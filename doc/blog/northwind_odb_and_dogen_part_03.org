#+title: Nerd Food: Northwind, or Using Dogen with ODB - Part III
#+options: date:nil toc:nil author:nil num:nil title:nil

On [[http://mcraveiro.blogspot.co.uk/2017/02/nerd-food-northwind-or-using-dogen-with_24.html][Part II]] of this series we got our Oracle Express set up - added the
required schemas and so forth - and we built and installed latest
ODB. After this grand build up, we shall finally get a chance to make
use of Dogen and ODB.

* Errata

However, before we proceed we must address some of the instructions on
the previous posts which were not quite right. The first point was the
need to download extra Oracle packages. Originally, when I looked at
the Oracle XE install I did not see the traditional =include=
directory, so I had assumed one needed to download the header files
separately. I did find this state of affairs somewhat unusual - but
then again this is Oracle, so "unusual" is the default behaviour. As
it turns out, I was wrong; the header files are indeed part of the
Oracle XE install, just placed in a rather... creative location:
=/u01/app/oracle/product/11.2.0/xe/rdbms/public=.

This is quite an important find because the OCI driver has moved on to
v12, whereas XE is still on v11. There is backwards compatibility, of
course - and everything should work fine connecting a v12 client
against an v11 database - but it does introduce a layer of complexity:
you now need to make sure you do not simultaneously have both v11 and
v12 shared objects in the path when linking or else you will start to
get some strange warnings. As usual, we try to confuse only one issue
at a time, so we need to make sure we are only making use of v11 and
purge all references to v12.

To address this issue, we need to recompile ODB's oracle support. If
you followed the instructions on Part II and you've have already
installed it, you need to first remove it:

: rm /full/path/to/local/lib/libodb-oracle* /full/path/to/local/odb/oracle

Replacing =/full/path/to/local= as required for your local
setup. Then, you can follow the instructions as per previous post, but
with *one crucial difference* at configure time: point to the Oracle
XE directories instead of the OCI driver directories:

#+begin_example
: . /u01/app/oracle/product/11.2.0/xe/bin/oracle_env.sh
: LD_LIBRARY_PATH=/u01/app/oracle/product/11.2.0/xe/lib CPPFLAGS="-I/full/path/to/local/include -I/u01/app/oracle/product/11.2.0/xe/rdbms/public" LDFLAGS="-L/full/path/to/local/lib -L/u01/app/oracle/product/11.2.0/xe/lib" ./configure --prefix=/full/path/to/local/local
#+end_example

This will result on a ODB Oracle library that uses the OCI driver from
Oracle XE. You then just need to make sure you have executed
=oracle_env.sh= before running your binary, as we shall see later
on.

* Installing Dogen

With that out of the way, we can now resume scheduled service. The
last package we need to install is Dogen. This is fairly
straightforward: we can just grab the latest release from BinTray:

- [[https://dl.bintray.com/domaindrivenconsulting/Dogen/0.98.0/dogen_0.98.0_amd64-applications.deb][dogen 0.98.0 amd64-applications.deb]]

It must be v98 or above because we did a number of fixes to Dogen as a
result of this series of articles; previous releases had shortcomings
with their ODB support. As expected, the setup is pretty standard-fare
debian:

#+begin_example
$ wget https://dl.bintray.com/domaindrivenconsulting/Dogen/0.98.0/dogen_0.98.0_amd64-applications.deb -O dogen_0.98.0_amd64-applications.deb
$ sudo dpkg -i dogen_0.98.0_amd64-applications.deb
[sudo] password for USER:
Selecting previously unselected package dogen-applications.
(Reading database ... 551550 files and directories currently installed.)
Preparing to unpack dogen_0.98.0_amd64-applications.deb ...
Unpacking dogen-applications (0.98.0) ...
Setting up dogen-applications (0.98.0) ...
#+end_example

If all has gone according to plan, you should see something along the
lines of:

#+begin_example
$ dogen.knitter --version
Dogen Knitter v0.98.0
Copyright (C) 2015-2017 Domain Driven Consulting Plc.
Copyright (C) 2012-2015 Marco Craveiro.
License: GPLv3 - GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#+end_example

One final note on installations: I had previously assumed Boost to be
installed on [[http://mcraveiro.blogspot.co.uk/2017/02/nerd-food-northwind-or-using-dogen-with_24.html][part II]] but - if nothing else, purely for the sake of
completeness - here are the instructions to set it up, as well as
CMake. We will need both of these in order to build our application,
but we won't dwell on them /too/ much on them or else this series of
posts would go on forever.

#+begin_example
# apt-get install cmake
# apt-get install libboost-all-dev
#+end_example

Mind you, you don't /actually/ need the entirety of Boost for this
exercise, but it's just easier this way.

* The Application

At long last, we can start to create our very "simple" project. I say
simple, but in truth it ended up being a tad more complex than I'd
liked, so it was easier to create a github project for it and then
discuss it here in this post.


Casing:

-
http://www.codesynthesis.com/pipermail/odb-users/2014-September/002109.html
http://www.codesynthesis.com/pipermail/odb-users/2014-January/001689.html
http://www.codesynthesis.com/products/odb/doc/odb.xhtml --sql-name-case




CMAKE_INCLUDE_PATH=/full/path/to/local/include CMAKE_LIBRARY_PATH=/full/path/to/local/lib cmake ../..
CMAKE_INCLUDE_PATH=/home/marco/local/include CMAKE_LIBRARY_PATH=/home/marco/local/lib cmake ../..

* Conclusion
