#+title: Domain Driven Development with Dogen
#+options: author:nil

Copyright (c) 2013 Marco Craveiro

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, version 1.3; with no Invariant
Sections, no Front-Cover Texts and no Back-Cover Texts.

Revision *DRAFT*, May 2013

This revision of the manual describes Dogen *TRUNK* and is available
in the following formats: HTML and PDF.

#+toc: headlines 2
#+toc: listings
#+toc: tables

* Preface

** About This Document

One of the main problems facing any software engineer working on large
software systems is the need to clearly separate the business rules
from the infrastructural code. If we think back, this is what the word
/Application/ was all about: the use of computer science /applied/ to
a specific problem to provide an automated solution to a real world
problem. Unavoidably, the solution will always be made up of a large
portion of code which is not specific to the problem at hand: reading
records from a database, writing them back, reading and writing to
file and so on. However, one would like for the business rules to be
stated in code as clearly as possible, and not mixed up with code
which is totally unrelated to the problem at hand.

Domain driven development is a software engineering methodology that
formalises ideas around this separation of concerns. Just like design
patterns are attributed to the Gang of Four (GoF) but largely
developed through painstaking evolution 
allows for clear delineation of domain knowledge, splitting it from
other infrastructural code. 


** More Information

* PART I - BASIC CONCEPTS

** Introduction

** Hello World Example

* PART II - ADVANCED CONCEPTS
