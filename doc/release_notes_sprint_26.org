#+title: Release Notes for Sprint 26
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 26.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2013-05-11 Sat 16:24]

| Headline                                                      | Time    |       |      |
|---------------------------------------------------------------+---------+-------+------|
| *Total time*                                                  | *11:24* |       |      |
|---------------------------------------------------------------+---------+-------+------|
| Development Stories Implemented                               |         | 11:24 |      |
| COMPLETED Fix build break on visitor tests                    |         |       | 0:32 |
| COMPLETED Remove workflow aspects from transformer            |         |       | 2:23 |
| COMPLETED Add tests for profiler                              |         |       | 1:56 |
| COMPLETED Re-implement key support                            |         |       | 4:03 |
| COMPLETED Add injector tests                                  |         |       | 1:15 |
| COMPLETED Add doxygen comments to keys and version            |         |       | 0:10 |
| IMPLEMENTATION Add =extract_key= function                     |         |       | 0:22 |
| Use explicit casting for versioned to unversioned conversions |         |       | 0:43 |
#+end:

*** COMPLETED Fix build break on visitor tests                        :story:
    CLOSED: [2013-05-07 Tue 08:36]
    CLOCK: [2013-05-07 Tue 08:32]--[2013-05-07 Tue 08:36] =>  0:04
    CLOCK: [2013-05-07 Tue 07:47]--[2013-05-07 Tue 08:15] =>  0:28

We have occasional test failures due to reordering of the types list
in the visitor view model. Not quite sure why the ordering keeps on
changing as the underlying processes all seem ordered. At any rate, we
need a quick fix for this to get the builds green consistent and stop
the traffic lighting. Do a quick hack and sort the types container
when generating the visitor view model.

*** COMPLETED Remove workflow aspects from transformer                :story:
    CLOSED: [2013-05-08 Wed 08:34]
    CLOCK: [2013-05-08 Wed 08:25]--[2013-05-08 Wed 08:34] =>  0:09
    CLOCK: [2013-05-08 Wed 08:23]--[2013-05-08 Wed 08:24] =>  0:01
    CLOCK: [2013-05-08 Wed 08:02]--[2013-05-08 Wed 08:18] =>  0:16
    CLOCK: [2013-05-07 Tue 22:46]--[2013-05-08 Wed 00:18] =>  1:32
    CLOCK: [2013-05-07 Tue 18:30]--[2013-05-07 Tue 18:50] =>  0:20
    CLOCK: [2013-05-07 Tue 18:25]--[2013-05-07 Tue 18:30] =>  0:05

When we created transformer, we added profiling and validation into
it, simply because it was easier. However, the right thing to do is to
move that code into workflow and leave it only with its core
responsibilities (i.e. to transform processed objects into SML
objects). To do so we need to refactor the visitor to take a function
instead of a transformer interface - which is now no longer
required.

**** COMPLETED Update code
     CLOSED: [2013-05-08 Wed 00:19]
**** COMPLETED Update diagram
     CLOSED: [2013-05-08 Wed 08:30]
*** COMPLETED Add tests for profiler                                  :story:
    CLOSED: [2013-05-09 Thu 08:57]
    CLOCK: [2013-05-09 Thu 08:46]--[2013-05-09 Thu 08:57] =>  0:11
    CLOCK: [2013-05-09 Thu 07:37]--[2013-05-09 Thu 08:40] =>  1:03
    CLOCK: [2013-05-08 Wed 18:28]--[2013-05-08 Wed 18:41] =>  0:13
    CLOCK: [2013-05-08 Wed 18:22]--[2013-05-08 Wed 18:28] =>  0:06
    CLOCK: [2013-05-08 Wed 18:04]--[2013-05-08 Wed 18:10] =>  0:06
    CLOCK: [2013-05-07 Tue 18:07]--[2013-05-07 Tue 18:24] =>  0:17

We don't seem to have any specs testing the conversion of a dia object
to an object profile. Although its fairly trivial, we should still
have minimum tests.

*** COMPLETED Move all of the versioning, entity, key tests to stereotypes :story:
    CLOSED: [2013-05-11 Sat 03:40]

- remove versioning from all other models such as std::model, etc.
- add tests for =std::unordered=, maps etc.

*** COMPLETED Re-implement key support                                :story:
    CLOSED: [2013-05-11 Sat 04:03]

- create a new stereotype of keyed. when set, it results in the
  creation of a new class containing all properties marked as
  identity. if none are found, throw. only entities can be keyed.
- create new stand alone function =extract_key=. given an instance of
  a class, it returns the corresponding key. it should be defined in
  the same file as the key.
- if versioned, also create versioned key class. add typedefs in class
  for versioned key.

Rules:

- entities must have at least one KEY_ATTRIBUTE
- keyed pods must be entities.
- unversioned keyed entities will have unversioned keys.
- versioned keyed entities will have versioned keys.
- values can be versioned.

**** COMPLETED Propagate key attribute to SML
     CLOSED: [2013-05-10 Fri 08:16]
     CLOCK: [2013-05-10 Fri 08:10]--[2013-05-10 Fri 08:16] =>  0:06
     CLOCK: [2013-05-07 Tue 18:02]--[2013-05-07 Tue 18:07] =>  0:05
     CLOCK: [2013-05-07 Tue 17:46]--[2013-05-07 Tue 17:56] =>  0:10

**** CANCELLED Ensure entities have at least one key attribute defined
     CLOSED: [2013-05-10 Fri 08:17]

This work will be part of adding a validator to SML.

**** COMPLETED Remove =disable_versioning=
     CLOSED: [2013-05-10 Fri 19:58]
     CLOCK: [2013-05-10 Fri 18:25]--[2013-05-10 Fri 18:40] =>  0:15
     CLOCK: [2013-05-10 Fri 08:27]--[2013-05-10 Fri 08:36] =>  0:09

For some unexplained reason there is a switch that disables versioning
altogether. This seems like a bad idea since its overriding the
definitions made inside the model, potentially generating invalid
models - for instance if a model makes reference to a key, it will no
longer work. Not quite sure what was the original intention but as its
stands this is not a useful feature, so remove it across the board.

**** COMPLETED Implement new key generation and remove legacy code
     CLOSED: [2013-05-11 Sat 03:28]
     CLOCK: [2013-05-11 Sat 00:54]--[2013-05-11 Sat 03:28] =>  2:34
     CLOCK: [2013-05-11 Sat 00:40]--[2013-05-11 Sat 00:54] =>  0:14
     CLOCK: [2013-05-11 Sat 00:14]--[2013-05-11 Sat 00:22] =>  0:08

Do not generate versioned/unversioned keys for entities.

**** COMPLETED Add =std::string= identity scenario to =std_model=
     CLOSED: [2013-05-11 Sat 03:33]
**** COMPLETED Add pod identity scenario to stereotypes model
     CLOSED: [2013-05-11 Sat 03:51]
     CLOCK: [2013-05-11 Sat 03:38]--[2013-05-11 Sat 03:50] =>  0:12
     CLOCK: [2013-05-11 Sat 03:28]--[2013-05-11 Sat 03:38] =>  0:10

*** COMPLETED Add injector tests                                      :story:
    CLOSED: [2013-05-11 Sat 16:07]
    CLOCK: [2013-05-11 Sat 15:34]--[2013-05-11 Sat 16:07] =>  0:33
    CLOCK: [2013-05-11 Sat 04:03]--[2013-05-11 Sat 04:45] =>  0:42

*** COMPLETED Add doxygen comments to keys and version                :story:
    CLOSED: [2013-05-11 Sat 16:23]
    CLOCK: [2013-05-11 Sat 16:13]--[2013-05-11 Sat 16:23] =>  0:10

*** IMPLEMENTATION Use explicit casting for versioned to unversioned conversions :story:
    CLOCK: [2013-05-11 Sat 16:27]--[2013-05-11 Sat 16:29] =>  0:02
    CLOCK: [2013-05-11 Sat 15:06]--[2013-05-11 Sat 15:13] =>  0:07
    CLOCK: [2012-11-22 Thu 08:44]--[2012-11-22 Thu 09:20] =>  0:36

At present we have to_versioned; in reality this would be dealt much
better using explicit casts:

: explicit operator std::string() { return "explicit"; }

Actually the real solution for this is to make the versioned key
contain the unversioned key; then dogen will generate all the
required code.

At this point in time we do not have enough use cases to make the
correct design decisions in this area. We need to wait until we start
using keys in anger in Creris and then design the API around the use
cases.

It is not possible to use global cast operators so we need to
introduce a dependency between versioned and unversioned keys in order
for this to work.

**** COMPLETED Link pod to its versioned and unversioned keys
     CLOSED: [2013-05-11 Sat 17:11]
     CLOCK: [2013-05-11 Sat 16:54]--[2013-05-11 Sat 17:11] =>  0:17
     CLOCK: [2013-05-11 Sat 16:31]--[2013-05-11 Sat 16:54] =>  0:23

Also link versioned key to unversioned key.

*** IMPLEMENTATION Add =extract_key= function                         :story:
    CLOCK: [2013-05-11 Sat 15:24]--[2013-05-11 Sat 15:34] =>  0:10
    CLOCK: [2013-05-11 Sat 15:20]--[2013-05-11 Sat 15:24] =>  0:04
    CLOCK: [2013-05-11 Sat 03:55]--[2013-05-11 Sat 04:03] =>  0:08

We need a way to automatically extract a key for a pod. To do so
create a utility file with a method that extracts keys for a type. We
need to create a new aspect for this.

The right solution is to create pods at the SML level to represent
this concept. If we do that we get all of the includer etc work for
free. For that we need to add new category types:

- visitor
- key_extractor

Injector creates pods for these just like it does with keys; the view
model transformer intercepts them and generates the correct view
models.

** Deprecated Development Stories
