#+title: Sprint Backlog 52
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) task(t) note(n) spike(p) }
#+tags: { refactor(r) bug(b) feature(f) vision(v) }
#+tags: { meta_data(m) tests(a) packaging(q) media(h) build(u) validation(x) diagrams(w) frontend(c) backend(g) }
#+tags: dia(y) sml(l) cpp(k) config(o) formatters(d)

* Stories

This file contains all stories that were closed during sprint 52.

The *Mission Statement* for this sprint is to make inroads in
implementing the frontend and backend models.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-09-30 Tue 20:23]

| Headline                                                          | Time    |       |      |
|-------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                      | *16:32* |       |      |
|-------------------------------------------------------------------+---------+-------+------|
| Development Stories Implemented                                   |         | 16:32 |      |
| IMPLEMENTATION Sprint and product backlog grooming                |         |       | 1:23 |
| COMPLETED Rethink meta-data subsystem in light of latest analysis |         |       | 2:06 |
| COMPLETED Create the =frontend= model                             |         |       | 7:41 |
| COMPLETED Replace knit frontend logic with =frontend= model       |         |       | 3:50 |
| IMPLEMENTATION Create the =backend= model                         |         |       | 0:25 |
| Refactor types header formatter                                   |         |       | 1:07 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-09-29 Mon 01:25]--[2014-09-29 Mon 01:36] =>  0:11
    CLOCK: [2014-09-29 Mon 01:10]--[2014-09-29 Mon 01:25] =>  0:15
    CLOCK: [2014-09-27 Sat 10:47]--[2014-09-27 Sat 10:50] =>  0:03
    CLOCK: [2014-09-27 Sat 10:33]--[2014-09-27 Sat 10:47] =>  0:14
    CLOCK: [2014-09-25 Thu 10:21]--[2014-09-25 Thu 10:40] =>  0:19
    CLOCK: [2014-09-24 Wed 22:15]--[2014-09-24 Wed 22:36] =>  0:21

Updates to sprint and product backlog.

*** Updates to the manual and readme files                       :task:media:

Use downtime to update the manual and / or readme file.

*** COMPLETED Rethink meta-data subsystem in light of latest analysis  :task:
    CLOSED: [2014-09-28 Sun 17:22]
    CLOCK: [2014-09-23 Tue 21:18]--[2014-09-23 Tue 21:27] =>  0:09
    CLOCK: [2014-09-22 Mon 13:10]--[2014-09-22 Mon 13:44] =>  0:34

After the analysis performed in the actual use cases we have for
meta-data, it became apparent that the current architecture is far
more complicated than what is required to fulfil our use cases. We now
aim to design an architecture that fulfils the use cases and nothing
more.

**** COMPLETED Consequences of the use case analysis
     CLOSED: [2014-09-23 Tue 21:50]
     CLOCK: [2014-09-23 Tue 21:37]--[2014-09-23 Tue 21:50] =>  0:13
     CLOCK: [2014-09-23 Tue 21:28]--[2014-09-23 Tue 21:37] =>  0:09

There are several points of worthy of note:

- we do not need meta-data for internal purposes. originally we did
  this because we thought it was easier, but actually it complicates
  things without any obvious benefits. In reality, it makes more sense
  to use strongly-typed data structures for all the data that is
  inferred internally and reserve the meta-data purely for input
  purposes - data supplied by the user. This means we do not need
  "enrichers" as such because we want the meta-data to be
  read-only. However we still need something akin to it.
- we can built the internal data-structures on the fly as we visit the
  SML containment graph. These types were previously called enrichers
  but should be renamed to say "builders" - this is a consequence of
  the previous point whereby the builders use internal types to keep
  state rather than pushing it into the meta-data. Another interesting
  consequence is that the responsibilities of these types may not
  necessarily be the determinant characteristic in naming the
  interface. In reality, the interface is just providing us a way to
  iterate through the SML graph of containment. This is not at all
  related to meta-data, or to enrichment. The implementers of the
  interface are responsible for the building. We still need
  dependencies between the builders and we still need multiple
  passes. Basically we should move all of these classes away from the
  meta-data namespace, into the main SML namespace. We need to read up
  on the right name for this - seems like a variation of visitor, but
  without double-dispatch. Boost graph may be a good source of
  inspiration. Compiler terminology may also be of assistance (the
  iterators of the AST in clang for instance).

**** COMPLETED Static initialisation and a cleaner architecture
     CLOSED: [2014-09-24 Wed 22:37]
     CLOCK: [2014-09-24 Wed 21:45]--[2014-09-24 Wed 21:46] =>  0:01
     CLOCK: [2014-09-24 Wed 21:27]--[2014-09-24 Wed 21:31] =>  0:04
     CLOCK: [2014-09-24 Wed 20:30]--[2014-09-24 Wed 21:26] =>  0:56

As a result of the implementation of the enrichers, we found out the
joys of using static initialisation. It is actually a useful approach
because it means we can minimise coupling; however, we need to be
careful on how we set it up to avoid problems with order of
initialisation, or just plain forgetting to initialise things.

One way of thinking about this is to split =knit= into three:
frontend, backend and the rest.

Frontend contains just the interface for the front end and a
workflow. The workflow allows implementers of the frontend interface
to register. The registration process takes a file extension and a
shared pointer to the interface. The worfklow receives a list of boost
file paths, and against each a flag: is target. For each of these, it
looks for the appropriate frontend in a unordered map, calls the
frontend with the file name and the flag, and receives back an SML
model. The result of the workflow is a set of SML models. The SML
models have a "is target" flag set on them somewhere.

Backend is in some ways similar: It provides a backend interface that
receives an SML model and a map of qname to formatter settings. It
returns a list of files (as per =formatters= model).

Knit makes use of these models, effectively creating the complete
pipeline between frontends and backends. The disabling and enabling of
the backends is done via the meta-data.

The static initialisation is now more straightforward: we need to
register backends and frontends against each workflow. These are the
only two points of static initialisation. The two workflows on
construction validate their state (e.g. we need at least one frontend
and one backend). Dia to SML and SML itself are used to implement the
two front ends; CPP implements the one backend.

The "builders" are as follows:

- one for the formatters model (owned by the backend model, since the
  formatter settings will be common to all backends). This satisfies
  use case *annotation settings*. Owned by the =backend= model; its
  result is provided to the workflow of each individual backend.
- one for each individual backend (the C++ builder will process
  generic C++ settings). This satisfies use case *backend settings*.
- one for each facet (use case *facet settings*). Owned by the
  individual backend. Result supplied to each formatter.
- one for each formatter (use case *formatter settings*). These are
  responsible for naming the files and for determining the inclusion
  lists. The formatter should own the builder and retrieve its product
  just prior to formatting.

This means the builders must implement two interfaces: one for
visiting the SML data structures and one for producing the
settings. We should also abandon any dependency management between
formatters for now as the use cases do not show a need for it yet.

Finally, we pass in all of the settings to the formatters. The
formatters must return =std::optional<formatter:file>= in case the
formatter is disabled in the formatter settings. The =backend= model
will return all the files produced by all formatters on all backend
models. These are then passed to an outputter in =knit=.

*** COMPLETED Create the =frontend= model                     :task:refactor:
    CLOSED: [2014-09-28 Sun 18:21]
    CLOCK: [2014-09-28 Sun 17:21]--[2014-09-28 Sun 18:20] =>  0:59
    CLOCK: [2014-09-28 Sun 13:40]--[2014-09-28 Sun 13:46] =>  0:06
    CLOCK: [2014-09-28 Sun 11:57]--[2014-09-28 Sun 12:45] =>  0:48
    CLOCK: [2014-09-28 Sun 11:09]--[2014-09-28 Sun 11:37] =>  0:28
    CLOCK: [2014-09-28 Sun 11:02]--[2014-09-28 Sun 11:07] =>  0:05
    CLOCK: [2014-09-27 Sat 19:09]--[2014-09-27 Sat 20:40] =>  1:31
    CLOCK: [2014-09-27 Sat 16:16]--[2014-09-27 Sat 16:35] =>  0:19
    CLOCK: [2014-09-27 Sat 15:01]--[2014-09-27 Sat 15:25] =>  0:24
    CLOCK: [2014-09-27 Sat 11:53]--[2014-09-27 Sat 12:15] =>  0:22
    CLOCK: [2014-09-27 Sat 10:01]--[2014-09-27 Sat 10:28] =>  0:27
    CLOCK: [2014-09-27 Sat 09:59]--[2014-09-27 Sat 10:00] =>  0:01
    CLOCK: [2014-09-26 Fri 23:46]--[2014-09-27 Sat 00:04] =>  0:18
    CLOCK: [2014-09-26 Fri 21:59]--[2014-09-26 Fri 22:07] =>  0:08
    CLOCK: [2014-09-26 Fri 20:07]--[2014-09-26 Fri 21:52] =>  1:45

Create the interface, workflow and registrar for the frontend
model. Implement sources for SML and Dia to SML.

*** COMPLETED Replace knit frontend logic with =frontend= model :task:refactor:
    CLOSED: [2014-09-29 Mon 00:20]
    CLOCK: [2014-09-29 Mon 00:30]--[2014-09-29 Mon 00:36] =>  0:06
    CLOCK: [2014-09-28 Sun 23:22]--[2014-09-29 Mon 00:20] =>  0:58
    CLOCK: [2014-09-28 Sun 21:43]--[2014-09-28 Sun 22:40] =>  0:57
    CLOCK: [2014-09-28 Sun 19:08]--[2014-09-28 Sun 20:40] =>  1:32
    CLOCK: [2014-09-28 Sun 18:32]--[2014-09-28 Sun 18:49] =>  0:17

Now that we have created the =frontend= model and implemented all of the
known use cases, we need to remove the legacy code and replace it with
the =frontend= model. We need to address all the issues that result from
such integration.

*** COMPLETED Add a =is_target= flag to model                 :task:refactor:
   CLOSED: [2014-09-29 Mon 01:26]

Ideally we should keep track of the "targetness" of the model with the
model itself instead of passing parameters. This will make the
frontend move easier.

*** COMPLETED Refactor knit's =persister=                     :task:refactor:
    CLOSED: [2014-09-29 Mon 01:36]

- add documentation
- we put the decision on whether to persist on not based on settings
  inside of persister. It should really be up to the person calling
  the persister to decide. Persister should always persist.
- we should have an argument deciding the file format, perhaps an
  enumeration, instead of passing in the extension. The extension
  should be automatically determined.

*** IMPLEMENTATION Create the =backend= model                 :task:refactor:
    CLOCK: [2014-09-30 Tue 19:03]--[2014-09-30 Tue 19:28] =>  0:25

Create the interface, workflow and registrar for the backend
model. Implement it in formatters and C++ models.

We may need to use some kind of adaptor for now to convert the output
of the =cpp_formatters= model into a =formatters::file=.

*** Find a new name for enrichers and builders

In reality these are just some kind of visitors of the SML
graph. Also, the implementers of this interface are more like
"builders" since they have state.

We need to also move across all of this infrastructure from meta-data,
since they are not meta-data specific at all.

*** Update =knit= to use the =backend= model                  :task:refactor:

Remove the internal interfaces and code in workflow that perform the
same role as the new =backend= model does.

*** Move SML graph visiting code from meta-data into main namespace :task:refactor:

We also need to rename enrichers and delete the graph of dependencies
between enrichers.

*** Refactor types header formatter            :task:refactor:formatters:cpp:
    CLOCK: [2014-08-25 Mon 12:01]--[2014-08-25 Mon 12:40] =>  0:39
    CLOCK: [2014-08-25 Mon 11:56]--[2014-08-25 Mon 11:57] =>  0:01
    CLOCK: [2014-08-25 Mon 11:35]--[2014-08-25 Mon 11:43] =>  0:08

Make the main types header formatters look like the =om= types
formatter. This model was deleted around commit 10157ad.

This is still not quite right. We need to drive the formatting from
two things:

- user options
- available formatters

**** Tidy-up =types_main_header_file_formatter=                        :task:
     CLOCK: [2014-08-25 Mon 11:57]--[2014-08-25 Mon 12:16] =>  0:19

Clean up internal functions in file and add documentation.

**** Make use of boilerplate                                           :task:

Generate the licence, etc using boilerplate formatter.

**** Copy across documentation from =om=                               :task:

We did a lot of doxygen comments that are readily applicable, copy
them across.

**** Make use of indenting stream                                      :task:

Remove uses of old indenter.

**** Copy across =om= types formatter tests                            :task:

Not sure how applicable this would be, but we may be able to scavenge
some tests.

*** Add include files at the formatter level    :task:refactor:meta_data:cpp:

We need to remove all the include files from =includer= which are
related to formatter specific code. We need to inject these
dependencies inside of the formatters.

- implement includer in terms of json files
- get includer to work off of object relationships
- remove relationships from transformer
- remove helper models boost and std

*** Includer generation should be done from meta-data         :task:refactor:

It would be nice if we could determine which includer files to create
by looking at the meta-data. For this we need a notion of an inclusion
group, defined at the model level:

- =cpp.types.includers.general=
- =cpp.types.includers.value_objects=
- ...

Under each of these one would configure the aspect:

- =cpp.types.includers.general.generate=: =true=
- =cpp.types.includers.general.file_name=: =a/b/c=
- =cpp.types.includers.general.is_system=: =false=

Then, each type, module etc would declare its membership (as a list):

- =cpp.includers.member=: =cpp.types.includers.general=
- =cpp.includers.member=: =cpp.types.includers.value_objects=
- ...

*Previous understanding*

We should simply go through all the types in the SML model and for
each type and each facet create the corresponding inclusion
path. locator can be used to generate standard paths, and a model
specific mapping is required for other models such as std.

Include then takes the relationships extracted by extractor, the
mappings generated by this mapper and simply appends to the inclusion
list the file names. it also appends the implementation specific
headers.

*** Support "cross-facet interference"                         :task:feature:

In a few cases its useful to disable bits of a facet when another
facet is switched off because those bits do not belong to the main
facet the formatter is working on. At present this happens in the
following cases:

- Forward declaration of serialisation in domain when serialisation is
  off
- Friend of serialisation in domain when serialisation is
  off
- declaration and implementation of to_stream when IO is off
- declaration and implementation of inserter when IO is off and
  integrated IO is on.

We need a way of accessing the on/off state of all facets from any
formatter so that they can make cross facet decisions. A quick hack
was to add yet another flag: =disable_io= which is disabled when the
IO facet is not present and passed on to the relevant formatters. This
needs to be replaced by a more general approach.

*** Implement the types enricher in cpp                :task:feature:sml:cpp:

Create the first and second stage enrichment for types. This is a good
test to see if the overall logic is sound.

*** Add frontends and backends to =info= command line option  :story:feature:

#+begin_quote
*Story*: As a dogen user, I want to know what frontends and backends
are available in my dogen version so that I don't try to use features
that are not present.
#+end_quote

With the static registration of frontends and backends, we should add
some kind of mechanism to display whats on offer in the command line,
via the =--info= option. This is slightly tricky because the
=frontend= and =backend= models do not know of the command line. We
need a method in the frontends that returns a description and a method
in the workflow that returns all descriptions. These must be
static. The knitter can then call these methods and build the info
text.

** Deprecated Development Stories

Stories that do not make sense any longer.

*** CANCELLED Create a librarian to manage library models     :task:refactor:
    CLOSED: [2014-09-29 Mon 01:25]

*Rationale*: Actually, the library models are not an SML artefact; in
fact SML handles these models in exactly the same way as any other
model. Knit is the right place for this.

As part of the frontend refactor we moved the loading of library
models away from the SML workflow. However, SML should at least
provide a simple way to manage the library models or else we will have
to duplicate this code wherever these models need to be loaded.
