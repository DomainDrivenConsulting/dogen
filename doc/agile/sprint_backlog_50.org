#+title: Sprint Backlog 50
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 50.

The *Mission Statement* for this sprint is to get dogen development up
and running again, after a long break.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-08-23 Sat 12:27]

| Headline                                                | Time   |      |      |
|---------------------------------------------------------+--------+------+------|
| *Total time*                                            | *8:37* |      |      |
|---------------------------------------------------------+--------+------+------|
| Development Stories Implemented                         |        | 8:37 |      |
| IMPLEMENTATION Sprint and product backlog grooming      |        |      | 1:15 |
| COMPLETED Update instructions in manual for Postgres    |        |      | 0:50 |
| COMPLETED Tidy-up test model folder structure           |        |      | 6:01 |
| COMPLETED Review where we are with the last refactoring |        |      | 0:21 |
| COMPLETED Check that dogen builds on C++-14             |        |      | 0:10 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-08-23 Sat 11:31]--[2014-08-23 Sat 11:56] =>  0:25
    CLOCK: [2014-08-23 Sat 10:56]--[2014-08-23 Sat 11:07] =>  0:11
    CLOCK: [2014-08-22 Fri 12:39]--[2014-08-22 Fri 12:49] =>  0:10
    CLOCK: [2014-08-22 Fri 12:10]--[2014-08-22 Fri 12:39] =>  0:29

Updates to sprint and product backlog.

*** COMPLETED Update instructions in manual for Postgres              :story:
    CLOSED: [2014-08-22 Fri 12:39]
    CLOCK: [2014-08-22 Fri 11:20]--[2014-08-22 Fri 12:10] =>  0:50

After debian's upgrade of Postgres to 9.4 we need to do a fresh setup
of the RDBMS. It seems its not quite as easy as expected. Update the
manual to make this easier in the future.

- Create a new cluster for 9.4 as it seems debian doesn't do it any
  more:

: pg_createcluster 9.4 main

- Remove old clusters:

: pg_dropcluster 9.3 main
: pg_dropcluster 9.1 main
: pg_dropcluster 9.0 main

- Create user =build= and databases as usual.

*** COMPLETED Fix doxygen warnings                                    :story:
    CLOSED: [2014-08-22 Fri 13:02]

We are getting a few annoying warnings when generating the docs:

: Warning: Tag `XML_SCHEMA' at line 213 of file `/home/marco/Development/DomainDrivenConsulting/output/dogen/clang-3.5/stage/doxygen/dogen.doxy' has become obsolete.
:          To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"
: Warning: Tag `XML_DTD' at line 214 of file `/home/marco/Development/DomainDrivenConsulting/output/dogen/clang-3.5/stage/doxygen/dogen.doxy' has become obsolete.
:          To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"

Remove these tags as we are not using them.

*** COMPLETED Tidy-up test model folder structure                     :story:
    CLOSED: [2014-08-23 Sat 10:12]
    CLOCK: [2014-08-22 Fri 12:49]--[2014-08-22 Fri 12:53] =>  0:04

Create a single top-level directory to house the test models:
=test_models=. At present its difficult to understand the code
structure due to the proliferation of test models.

Originally we had spec'd a very elaborate tree structure for this
directory but since we only support C++-11 at present, lets just
create a single folder. We can worry about cleverer organisation
later.

**** COMPLETED Old understanding                                       :note:
     CLOSED: [2014-08-22 Fri 12:53]

Split from story Tidy-up test models:

We should take this opportunity to reorganise the test model folders,
perhaps with a structure similar to this (in projects):

: test_models
:     |----> cpp_03                 [language, variant]
:              |----> enumeration   [model with tests]
:               ...
:     |----> cpp_11
:              |----> enumeration
:               ...
:     |----> csharp
:      ...

All the tests in sanitizer would then be moved into each individual
model. This would allow compiling the tests on C++ 03 and C++ 11. We
would also have to move this flag from the generic C++ section to each
individual library/binary makefile.

Note: actually, this cannot be done. The reason why we created the
sanitizer in the first place was because the diffs wouldn't work if
the specs were placed in the test models (e.g. the generated code
would not contain the specs and thus be different). We will probably
need a 03 sanitizer, an 11 sanitizer, etc.

See also story Add C++-03 mode.

**** COMPLETED Add section in manual for test models                   :task:
     CLOSED: [2014-08-22 Fri 13:40]
     CLOCK: [2014-08-22 Fri 13:06]--[2014-08-22 Fri 13:40] =>  0:34

We should really describe the purpose of the test models in the
manual. Create a section on test models covering all of the existing
models and explaining the legacy issues.

Added [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/manual/manual.org#test-models][Test Models]].

**** COMPLETED Update all models to generate on the =test_models= namespace :task:
     CLOSED: [2014-08-22 Fri 20:19]
     CLOCK: [2014-08-22 Fri 20:13]--[2014-08-22 Fri 20:19] =>  0:06
     CLOCK: [2014-08-22 Fri 18:20]--[2014-08-22 Fri 19:13] =>  0:53
     CLOCK: [2014-08-22 Fri 14:21]--[2014-08-22 Fri 17:51] =>  3:30

We first must move the models to the correct namespace before we can
move them physically. We need to fix all of the compilation errors.

**** COMPLETED Create =test_models= folder and move all test code to it :task:
     CLOSED: [2014-08-22 Fri 20:19]
     CLOCK: [2014-08-22 Fri 12:53]--[2014-08-22 Fri 13:05] =>  0:12

Create the folder and move code manually.

**** COMPLETED Fix code generation to generate on new folder           :task:
     CLOSED: [2014-08-22 Fri 20:19]

Ensure dogen is generating the test models in the right place.

**** COMPLETED Fix unit tests                                          :task:
     CLOSED: [2014-08-22 Fri 20:19]

Ensure all CMake code that relies on the path to the test models still
works.

**** COMPLETED Fix commented out code                                  :task:
     CLOSED: [2014-08-23 Sat 10:12]
     CLOCK: [2014-08-23 Sat 09:30]--[2014-08-23 Sat 10:12] =>  0:42

In order to break the task down, we ended up having to comment out
some tests. Fix these.

*** COMPLETED Review where we are with the last refactoring           :story:
    CLOSED: [2014-08-23 Sat 12:00]
    CLOCK: [2014-08-23 Sat 11:09]--[2014-08-23 Sat 11:30] =>  0:21

After the long hiatus its not very clear where we left the
formatters refactoring. We need to go through the last changes and see
what is left to be done.

Current state:

- refactoring of the domain class declaration into the types main
  header formatter done.
- still not using the boilerplate formatting code though.
- still using the cpp formatters utility rather than the
  formatters. Same with indenter and formatting error.

*** COMPLETED Check that dogen builds on C++-14                       :story:
    CLOSED: [2014-08-23 Sat 12:27]
    CLOCK: [2014-08-23 Sat 12:00]--[2014-08-23 Sat 12:10] =>  0:10

We should try to build dogen using clang on c++ 14 mode and see if we
get any errors.

Code compiled without any changes, other than flags:

: diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
: index 592d023..5a39206 100644
: --- a/projects/CMakeLists.txt
: +++ b/projects/CMakeLists.txt
: @@ -110,7 +110,7 @@ endif()
:  if (WIN32)
:      set(other_flags "-std=gnu++11")
:  else()
: -    set(other_flags "-std=c++11")
: +    set(other_flags "-std=c++1y")
:  endif()
:  set(other_flags "${other_flags} -frtti -fvisibility-inlines-hidden")
:  set(other_flags "${other_flags} -fvisibility=default")

*** Move includes and header guard into entity                        :story:

With this a formatter can now rely only on entities rather than
requiring a file.

*** Create =includers_info= and =forward_declarations_info=           :story:

We should make sure the type system represents all the inputs to
formatters. Create these types and update their formatters,
transformer etc.

*** Delete key implementation formatter                               :story:

It doesn't seem like there is any good reason to treat the keys in a
special way so try to remove this.

*** Delete content types                                              :story:

Now we have the type system representing the content, we can delete
this enumeration.

*** Delete aspect types                                               :story:

Now we have the type system representing the aspects, we can delete
this enumeration.

*** Create formatter interfaces for each concrete entity type         :story:

Formatters should have a single format method that takes a concrete
entity, formatting settings and knitting settings. It returns a file.

**** Remove =file_formatter_interface=                                 :task:

Update all C++ formatters to use specific types:

- remove factory; update workflow to call formatters directly
- remove file formatter interface
- formatters to have format() for each specific supported entity,
  overloaded as required

**** Update formatters to output =formatters::file=                    :task:

Instead of passing in a stream, we just want to return a file.

**** Update formatters to take settings and entity as input            :task:

We want the formatters to be stateless - well at least as far as
mutating state goes - so that we can run them in parallel. We also
want them to have no constructor arguments so we can register them. To
do so we need to pass in both knitting and formatting settings to
=format= as well as the entity.

**** Get formatters to register themselves with workflow               :task:

Copy the code from the deleted registration files. Formatters should
register against a content descriptor.

*** Rename the include tags and add them to CPP model                 :story:

Update all the JSON files with names in the form
=cpp.include.types.header_file=. Add properties in =cpp= to capture
these.

While we're at it, add support for =family= too.

*** Delete tag related infrastructure from =sml=                      :story:

With the exception of tag writer, we don't really need any tagging in
SML. That means:

- no meta data tagger
- no writer
- no meta data error
- no meta data sub-workflow

*** Make use of boilerplate                                           :task:

Remove all of the manual boilerplate and make use of the new
class. This will involve bring across some meta-data into C++ model.

*** Add include files at the formatter level                          :story:

We need to remove all the include files from =includer= which are
related to formatter specific code. We need to inject these
dependencies inside of the formatters.

- implement includer in terms of json files
- get includer to work off of object relationships
- remove relationships from transformer
- remove helper models boost and std

*** Refactor types header formatter                                   :story:

Make the main types header formatters look like the =om= types formatter.

**** Tidy-up =types_main_header_file_formatter=                        :task:

Clean up internal functions in file and add documentation.

**** Copy across documentation from =om=                               :task:

We did a lot of doxygen comments that are readily applicable, copy
them across.

**** Make use of indenting stream                                      :task:

Remove uses of old indenter.

**** Copy across =om= types formatter tests                            :task:

Not sure how applicable this would be, but we may be able to scavenge
some tests.

*** Add warning =-Wunused-private-field=                              :story:

Seems like this warning is not part of =-Wall

*** Use formatting settings in formatters model                       :story:

We need to replace the references to the c++ settings directly with
formatter settings.

*** Move all the configuration options into tags                      :story:

Parameters as per analysis story.

**** Create a tags class in =config=                                   :task:

We need to declare all the tags we're exporting.

**** Create a =property_tree_parser= that outputs settings             :task:

The parser should take the existing settings as an input and return
an overridden version of them.

**** Plug the parser into the SML sub-workflow                         :task:

When we do this we need to make sure everyone is using the same
settings; there are many places where the settings have been passed in
by reference. Also, we need to make sure the target model is the first
one to be processed.

**** Update all models and tests to use the new tags                   :task:

Once the config options are in we need to start making use of them to
ensure they work exactly as before.

**** Remove all C++ command line settings                              :task:

Once the overrides have been proven to work, we need to remove the
command line options and make sure nothing breaks.

** Deprecated Development Stories
