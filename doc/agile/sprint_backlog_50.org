#+title: Sprint Backlog 50
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 50.

The *Mission Statement* for this sprint is to get dogen development up
and running again, after a long break.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-08-23 Sat 10:12]

| Headline                                             | Time   |      |      |
|------------------------------------------------------+--------+------+------|
| *Total time*                                         | *7:30* |      |      |
|------------------------------------------------------+--------+------+------|
| Development Stories Implemented                      |        | 7:30 |      |
| IMPLEMENTATION Sprint and product backlog grooming   |        |      | 0:39 |
| COMPLETED Update instructions in manual for Postgres |        |      | 0:50 |
| COMPLETED Tidy-up test model folder structure        |        |      | 6:01 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-08-22 Fri 12:39]--[2014-08-22 Fri 12:49] =>  0:10
    CLOCK: [2014-08-22 Fri 12:10]--[2014-08-22 Fri 12:39] =>  0:29

Updates to sprint and product backlog.

*** COMPLETED Update instructions in manual for Postgres              :story:
    CLOSED: [2014-08-22 Fri 12:39]
    CLOCK: [2014-08-22 Fri 11:20]--[2014-08-22 Fri 12:10] =>  0:50

After debian's upgrade of Postgres to 9.4 we need to do a fresh setup
of the RDBMS. It seems its not quite as easy as expected. Update the
manual to make this easier in the future.

- Create a new cluster for 9.4 as it seems debian doesn't do it any
  more:

: pg_createcluster 9.4 main

- Remove old clusters:

: pg_dropcluster 9.3 main
: pg_dropcluster 9.1 main
: pg_dropcluster 9.0 main

- Create user =build= and databases as usual.

*** COMPLETED Fix doxygen warnings                                    :story:
    CLOSED: [2014-08-22 Fri 13:02]

: Warning: Tag `XML_SCHEMA' at line 213 of file `/home/marco/Development/DomainDrivenConsulting/output/dogen/clang-3.5/stage/doxygen/dogen.doxy' has become obsolete.
:          To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"
: Warning: Tag `XML_DTD' at line 214 of file `/home/marco/Development/DomainDrivenConsulting/output/dogen/clang-3.5/stage/doxygen/dogen.doxy' has become obsolete.
:          To avoid this warning please remove this line from your configuration file or upgrade it using "doxygen -u"

*** COMPLETED Tidy-up test model folder structure                     :story:
    CLOSED: [2014-08-23 Sat 10:12]
    CLOCK: [2014-08-22 Fri 12:49]--[2014-08-22 Fri 12:53] =>  0:04

*New understanding*:

Since we only support C++-11 for now, lets just create a single
top-level directory to house the test models and worry about cleverer
organisation later. At present its difficult to understand the code
structure due to the proliferation of test models.

**** COMPLETED Old understanding                                       :note:
     CLOSED: [2014-08-22 Fri 12:53]

We should take this opportunity to reorganise the test model folders,
perhaps with a structure similar to this (in projects):

: test_models
:     |----> cpp_03                 [language, variant]
:              |----> enumeration   [model with tests]
:               ...
:     |----> cpp_11
:              |----> enumeration
:               ...
:     |----> csharp
:      ...

All the tests in sanitizer would then be moved into each individual
model. This would allow compiling the tests on C++ 03 and C++ 11. We
would also have to move this flag from the generic C++ section to each
individual library/binary makefile.

Note: actually, this cannot be done. The reason why we created the
sanitizer in the first place was because the diffs wouldn't work if
the specs were placed in the test models (e.g. the generated code
would not contain the specs and thus be different). We will probably
need a 03 sanitizer, an 11 sanitizer, etc.

See [[*Add%20C%2B%2B-03%20mode][C++ 03 support]].

**** COMPLETED Add section in manual for test models                   :task:
     CLOSED: [2014-08-22 Fri 13:40]
     CLOCK: [2014-08-22 Fri 13:06]--[2014-08-22 Fri 13:40] =>  0:34

We should really describe the purpose of the test models in the manual.

**** COMPLETED Update all models to generate on the =test_models= namespace :task:
     CLOSED: [2014-08-22 Fri 20:19]
     CLOCK: [2014-08-22 Fri 20:13]--[2014-08-22 Fri 20:19] =>  0:06
     CLOCK: [2014-08-22 Fri 18:20]--[2014-08-22 Fri 19:13] =>  0:53
     CLOCK: [2014-08-22 Fri 14:21]--[2014-08-22 Fri 17:51] =>  3:30

We first must move the models to the correct namespace before we can
move them physically. We need to fix all of the compilation errors.

**** COMPLETED Create =test_models= folder and move all test code to it :task:
     CLOSED: [2014-08-22 Fri 20:19]
     CLOCK: [2014-08-22 Fri 12:53]--[2014-08-22 Fri 13:05] =>  0:12

Create the folder and move code manually.

**** COMPLETED Fix code generation to generate on new folder           :task:
     CLOSED: [2014-08-22 Fri 20:19]

Ensure dogen is generating the test models in the right place.

**** COMPLETED Fix unit tests                                          :task:
     CLOSED: [2014-08-22 Fri 20:19]

Ensure all CMake code that relies on the path to the test models still
works.

**** COMPLETED Fix commented out code                                  :task:
     CLOSED: [2014-08-23 Sat 10:12]
     CLOCK: [2014-08-23 Sat 09:30]--[2014-08-23 Sat 10:12] =>  0:42

In order to break the task down, we ended up having to comment out
some tests. Fix these.

*** Review where we are with the last refactoring                     :story:

After the long hiatus its not very clear where we left the
formatters refactoring. We need to go through the last changes and see
what is left to be done.

*** Use formatting settings in formatters model                       :story:

We need to replace the references to the c++ settings directly with
formatter settings.

*** Move all the configuration options into tags                      :story:

Parameters as per analysis story.

**** Create a tags class in =config=                                   :task:

We need to declare all the tags we're exporting.

**** Create a =property_tree_parser= that outputs settings             :task:

The parser should take the existing settings as an input and return
an overridden version of them.

**** Plug the parser into the SML sub-workflow                         :task:

When we do this we need to make sure everyone is using the same
settings; there are many places where the settings have been passed in
by reference. Also, we need to make sure the target model is the first
one to be processed.

**** Update all models and tests to use the new tags                   :task:

Once the config options are in we need to start making use of them to
ensure they work exactly as before.

**** Remove all C++ command line settings                              :task:

Once the overrides have been proven to work, we need to remove the
command line options and make sure nothing breaks.

** Deprecated Development Stories
