#+title: Sprint Backlog 59
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Commentary

** Mission

Implement dynamic and start making use of it in SML.

** Retrospective

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2015-01-09 Fri 23:40]

| Headline                                                                 | Time   |      |      |
|--------------------------------------------------------------------------+--------+------+------|
| *Total time*                                                             | *5:50* |      |      |
|--------------------------------------------------------------------------+--------+------+------|
| Active                                                                   |        | 5:50 |      |
| STARTED Sprint and product backlog grooming                              |        |      | 0:12 |
| COMPLETED Refactor comments processing code in dia to sml                |        |      | 4:01 |
| STARTED Inject dia fields =comment=, =is_final= and =identity_attribute= |        |      | 1:37 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-01-05 Mon 23:28]--[2015-01-05 Mon 23:32] =>  0:04
    CLOCK: [2015-01-05 Mon 23:10]--[2015-01-05 Mon 23:18] =>  0:08

Updates to sprint and product backlog.

*** COMPLETED Refactor comments processing code in dia to sml         :story:
    CLOSED: [2015-01-08 Thu 23:44]
    CLOCK: [2015-01-08 Thu 22:40]--[2015-01-08 Thu 23:44] =>  1:04
    CLOCK: [2015-01-08 Thu 22:29]--[2015-01-08 Thu 22:40] =>  0:11
    CLOCK: [2015-01-08 Thu 21:34]--[2015-01-08 Thu 22:29] =>  0:55
    CLOCK: [2015-01-07 Wed 21:52]--[2015-01-07 Wed 23:29] =>  1:37
    CLOCK: [2015-01-06 Tue 22:14]--[2015-01-06 Tue 22:21] =>  0:07
    CLOCK: [2015-01-05 Mon 23:32]--[2015-01-05 Mon 23:39] =>  0:07

*New Understanding*

- the comments parser job should be to convert the comments section
  into the value of the =dia.comment= key, as well as parse any other
  kvps.
- the transformer should ensure only zero or one notes can exist for a
  module.
- the setting of the documentation should be done as a separate step
  in transformation - i.e. look for =dia.comment= field, if set, use
  its value to populate documentation. This could be done to all types
  for completeness.
- the identity processing is similar in that it should be done as a
  post-processing step rather than during transformation.
- tests need to be cleaned up - we need to check for text of the
  exception being thrown.
- use processed comment in processed object

*Previous Understanding*

In dia to sml; At present we are returning:

: std::pair<std::string,
:    std::list<
:       std::pair<std::string, std::string>
:    >
: >

Where the first string is the comments (sans kvps) and the second are
the kvps. This is a bit confusing. We should probably have a class
with fields that reflect this, e.g.:

- =original_comments=
- =key_value_pair=

We need to reflect on these names.

*** STARTED Inject dia fields =comment=, =is_final= and =identity_attribute= :story:
    CLOCK: [2015-01-09 Fri 23:22]--[2015-01-09 Fri 23:40] =>  0:18
    CLOCK: [2015-01-09 Fri 23:18]--[2015-01-09 Fri 23:22] =>  0:04
    CLOCK: [2015-01-06 Tue 22:21]--[2015-01-06 Tue 23:36] =>  1:15

We need to implement dia.comment in terms of the dynamic object. We
need to add the field definition and make sure we can replace the
transformer processing with the new approach.

*** Add a dynamic workflow to dia to sml transformer                  :story:

We need to process the output of the comments parser using the dynamic
workflow.

*** Replace uses of meta-data with dynamic object                     :story:

Find all places where we are using ptree and use the dynamic object
instead. This should be mainly in meta-data factories.

*** Rename namespace =meta-data= to =dynamic=                         :story:

We have created a number of "meta-data extension" namespaces, which is
where we transform the ptree into a strongly typed object. These
should be renamed to =dynamic= to make it consistent.

*** Remove all references to =ptree=                                  :story:

Delete reader and writer classes and remove meta-data from
=Extensible=.

*** Add merger to dynamic                                             :story:

We need a class that takes two objects and merges them. For example
the root module meta-data object and any type. Could be called
merger. Should have a lhs and a rhs and produce a result.

*Note*: we still need to prove the use case; it may be that we do not
need merging at all.

*** Add dynamic merging to SML workflow                               :story:

We need an extra activity in the SML workflow that makes use of the
=dynamic::merger= to produce the final dynamic object.

*Note*: we still need to prove the use case; it may be that we do not
need merging at all.

*** Remove dependency of writer on tags                               :story:

We seem to be using the tags to detect containers. We need to get rid
of this dependency.

*** Delete tags class in SML                                          :story:

This class does not make sense any more as each model will be
responsible for their own tags.

Can only be done once we delete writer and reader.

*** Protect against double-initialisation                             :story:

We need to look into static initialisation and make sure the code can
cope with it being called several times.

*** Create a top-level initialiser for knit                           :story:

At present we are duplicating the initialisation dependencies
everywhere where knit is being used. We should just declare a knit
initialiser that does the job and call that from the outside world.

** Deprecated
