#+title: Sprint Backlog 56
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) task(t) note(n) spike(p) }
#+tags: { refactor(r) bug(b) feature(f) vision(v) }
#+tags: { meta_data(m) tests(a) packaging(q) media(h) build(u) validation(x) diagrams(w) frontend(c) backend(g) }
#+tags: dia(y) sml(l) cpp(k) config(o) formatters(d)

* Stories

This file contains all stories that were closed during sprint 56.

The *Mission Statement* for this sprint is to finish implementing the
C++ model workflow skeleton, moving across all of the formatting code
for the class formatter.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-11-24 Mon 18:35]

| Headline                                                               | Time    |       |      |
|------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                           | *11:15* |       |      |
|------------------------------------------------------------------------+---------+-------+------|
| Development Stories Implemented                                        |         | 11:15 |      |
| IMPLEMENTATION Sprint and product backlog grooming                     |         |       | 0:24 |
| COMPLETED Implement path spec details builder for class header         |         |       | 1:55 |
| COMPLETED Create a compact form of qname io                            |         |       | 2:29 |
| COMPLETED Organise include builders by formatter id                    |         |       | 0:51 |
| COMPLETED Rename =identifier_name_builder= to =name_builder=           |         |       | 0:04 |
| COMPLETED Ensure relative path works correctly end to end              |         |       | 1:46 |
| COMPLETED Add dogen to travis                                          |         |       | 2:10 |
| COMPLETED Analysis on how to best represent settings                   |         |       | 1:31 |
| IMPLEMENTATION Implement include generation for class header formatter |         |       | 0:05 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-11-25 Tue 08:39]--[2014-11-25 Tue 08:42] =>  0:03
    CLOCK: [2014-11-23 Sun 19:40]--[2014-11-23 Sun 19:51] =>  0:11
    CLOCK: [2014-11-20 Thu 08:04]--[2014-11-20 Thu 08:09] =>  0:05
    CLOCK: [2014-11-17 Mon 07:45]--[2014-11-17 Mon 07:53] =>  0:08

Updates to sprint and product backlog.

*** Updates to the manual and readme files                       :task:media:

Use downtime to update the manual and / or readme file.

*** COMPLETED Implement path spec details builder for class header     :task:
    CLOSED: [2014-11-20 Thu 08:04]
    CLOCK: [2014-11-20 Thu 07:53]--[2014-11-20 Thu 08:04] =>  0:11
    CLOCK: [2014-11-19 Wed 19:39]--[2014-11-19 Wed 19:49] =>  0:10
    CLOCK: [2014-11-19 Wed 17:54]--[2014-11-19 Wed 18:21] =>  0:27
    CLOCK: [2014-11-17 Mon 17:54]--[2014-11-17 Mon 18:41] =>  0:47
    CLOCK: [2014-11-17 Mon 07:53]--[2014-11-17 Mon 08:13] =>  0:20

We need to implement the interface for path spec details builder.

*** COMPLETED Create a compact form of qname io                       :story:
    CLOSED: [2014-11-21 Fri 20:34]
    CLOCK: [2014-11-21 Fri 20:22]--[2014-11-21 Fri 20:40] =>  0:18
    CLOCK: [2014-11-21 Fri 19:58]--[2014-11-21 Fri 20:13] =>  0:15
    CLOCK: [2014-11-21 Fri 08:56]--[2014-11-21 Fri 09:08] =>  0:12
    CLOCK: [2014-11-21 Fri 07:52]--[2014-11-21 Fri 08:35] =>  0:43
    CLOCK: [2014-11-20 Thu 17:37]--[2014-11-20 Thu 18:25] =>  0:48
    CLOCK: [2014-11-20 Thu 08:22]--[2014-11-20 Thu 08:35] =>  0:13

#+begin_quote
*Story*: As a dogen developer and user, I want to quickly identify an
instance of an SML type that is causing problems.
#+end_quote

At present we are using the JSON-based qname IO to dump qnames to the
log. For exceptions we use the simple name. There are downsides to
both of these approaches. With JSON we have a lot of moving parts that
obscure the vital information. With the simple name we miss all the
context for the type.

What we really need is a second type of IO for qnames that is
compacted to the absolute minimum. For example we could use dots to
concatenate all of the qname properties: =a.b.c=.

This will make the log files a lot smaller as well. Before:

: 2014-11-06 19:50:35.253844 [DEBUG] [sml.json_hydrator] Type has no containing module:  { "__type__": "dogen::sml::qname", "model_name": "", "external_module_path": [ ] , "module_path": [ ] , "simple_name": "long double" }

After:

: 2014-11-06 19:50:35.253844 [DEBUG] [sml.json_hydrator] Type has no containing module:  "long double"

We should add an SML utility function that does this work. We should
then do a grep for all instances of qname IO includes and for each,
replace it with the new utility function.

Finally we should raise a vision jira to make this either an extension
method (if these are supported in C++-17) or a manually generated
method on qname when we have a merging code generator.

*** COMPLETED Organise include builders by formatter id       :task:refactor:
    CLOSED: [2014-11-23 Sun 00:19]
    CLOCK: [2014-11-22 Sat 23:28]--[2014-11-23 Sun 00:19] =>  0:51

We need to create a map of include builders interface by formatter id
in order to make path spec details generation slightly more sensible.

*** COMPLETED Rename =identifier_name_builder= to =name_builder= :task:refactor:
    CLOSED: [2014-11-23 Sun 00:30]
    CLOCK: [2014-11-23 Sun 00:26]--[2014-11-23 Sun 00:30] =>  0:04

We now build identifier names as well as file names so the class name
is no longer right. Make it more generic.

*** COMPLETED Ensure relative path works correctly end to end          :task:
    CLOSED: [2014-11-23 Sun 00:48]
    CLOCK: [2014-11-23 Sun 00:30]--[2014-11-23 Sun 00:48] =>  0:18
    CLOCK: [2014-11-22 Sat 22:50]--[2014-11-22 Sat 23:27] =>  0:37
    CLOCK: [2014-11-22 Sat 21:53]--[2014-11-22 Sat 22:31] =>  0:38
    CLOCK: [2014-11-20 Thu 08:09]--[2014-11-20 Thu 08:22] =>  0:13

Now that we have finished generating the path spec details, we should
start making use of its properties. We first start with the relative
path. We need to make sure the file name, header guards, etc are being
generated correctly, end to end.

*** COMPLETED Add dogen to travis                                :task:build:
    CLOSED: [2014-11-23 Sun 17:24]
    CLOCK: [2014-11-23 Sun 18:18]--[2014-11-23 Sun 18:32] =>  0:14
    CLOCK: [2014-11-23 Sun 18:06]--[2014-11-23 Sun 18:18] =>  0:12
    CLOCK: [2014-11-23 Sun 17:25]--[2014-11-23 Sun 18:06] =>  0:41
    CLOCK: [2014-11-23 Sun 17:00]--[2014-11-23 Sun 17:24] =>  0:24
    CLOCK: [2014-11-23 Sun 16:20]--[2014-11-23 Sun 16:59] =>  0:39

We're not doing a very good job of managing the CI support in
CDash. We are now down to a single build agent on OSX. We should add
the project to travis and stop managing the agents.

- https://travis-ci.org/
- [[http://computer-vision-talks.com/articles/2014-02-23-using-travis-ci/][Using Travis-CI for continuous testing your projects]]

It is also a good time to add the "markers" to the readme page. For an
example see:

https://raw.githubusercontent.com/flycheck/flycheck/master/README.rst

*** COMPLETED Analysis on how to best represent settings      :task:refactor:
    CLOSED: [2014-11-24 Mon 18:34]
    CLOCK: [2014-11-25 Tue 08:17]--[2014-11-25 Tue 08:39] =>  0:22
    CLOCK: [2014-11-25 Tue 08:10]--[2014-11-25 Tue 08:17] =>  0:07
    CLOCK: [2014-11-25 Tue 07:51]--[2014-11-25 Tue 08:10] =>  0:19
    CLOCK: [2014-11-24 Mon 17:52]--[2014-11-24 Mon 18:34] =>  0:42
    CLOCK: [2014-11-24 Mon 07:51]--[2014-11-24 Mon 08:40] =>  0:49

We created a single bundle for a given facet. However, in practice,
formatters need to access other facets in order to determine what to
enable / disable. This is related to cross facet interference, already
in the backlog.

In addition we also need to create formatter settings with two
properties: additional postfix and enabled. The additional postfix
allows uses to override the default postfix for the formatter. Enabled
allows users to disable specific formatters. These settings are
expected to be configured at the model module level.

*Random Thoughts*:

- what we called settings bundle are in reality the project settings
  and as a consequence, bundler becomes the project settings factory.
- project settings are all "global" and thus read from the model
  module.
- project settings are missing the formatter settings.
- project settings must have settings by formatter id and settings by
  facet id. The alternative was discussed of only having settings by
  formatter id but it was deemed that the two lookups (facet id and
  formatter id) are preferable to duplicating the data for each
  formatter. This could be analysed in the future with data.
- what we have called path spec details are in reality type-level
  formatter settings. Some of these could be overrides to the project
  level formatter settings. This is a difficult class to name. We
  rather arbitrarily choose formatter properties.
- actually we could have both project settings and some kind of
  aggregation structure like settings bundle. The latter is the input
  of the format function, thus avoiding all look-ups. Perhaps project
  settings for formatter. Which raises the question of why do it in
  two ways, if no one is going to use the clever structure of project
  settings. It would be more sensible for project settings to just be
  a holder of an unordered map of string (formatter id) to settings
  bundle.
- local vs global settings: in reality what we have is more like the
  "global settings", i.e. those that apply to the entire project, and
  the "local settings" those that are either applicable to a pair
  (formatter, type). Interestingly, the local settings are also the
  perfect place to put a) the formatter-specific settings such as the
  ODB pragmas; we could perhaps call these "opaque settings"? b) the
  formatter settings overrides c) the "properties" such as includes
  and relative path.
- perhaps create formatter settings at the global level with enabled
  and additional postfix; and file settings at the local level with
  relative path and includes. Both local and global settings can
  contain opaque settings. Formatters can then provide an optional
  opaque settings factory which returns opaque settings if any are
  found, or defaults, or nothing - as required.
- actually calling the local/global settings factories "factories" is
  slightly misleading as they are more like sub-workflows. They rely
  on lots of other objects with complex behaviours, rather than just
  value objects (with possibly complex data structures).
- the local settings "factory" must generate the formatter settings
  overrides before it generates the file settings; it must supply the
  overridden formatter settings to the formatter.
- we should consider creating a file name builder interface. Similar
  to what we did with include builder interface, this would mean that
  the local settings factory will only be coupled to the file name
  builder rather than the whole formatter, which it needs not know
  about.
- for the cases where we have "integrated" functionality - at this
  point integrated IO only in types, but conceivably integrated
  hashing in the future - we need to ensure that the original facet
  is not also enabled (e.g. IO). This means the validation of the
  opaque settings can only be done within the formatter itself. We
  probably need to have a "opaque settings validator" that is passed
  in to a settings validator.

*Final Understanding*

- rename settings bundle to global settings and bundler to global
  settings factory. Factory returns a map of formatter id to global
  settings.
- add formatter settings with enable and postfix. add it to global
  settings. create a formatter settings factory. it takes a list of
  formatter id's and uses these to look-up formatter traits in
  meta-data to generate formatter settings. use factory in global
  settings factory.
- transformer and workflow to use new map of global settings rather
  than facet container.
- rename path spec details to file settings.
- create an empty opaque settings class. Create a opaque settings
  factory interface class. Formatter interface to return an optional
  opaque settings factory interface.
- create a local settings class that is made up of file settings,
  opaque settings and formatter settings. Entity to have a container
  of local settings (map of formatter id to local settings).
- create a local settings factory that takes on the work from workflow
  in generating the file settings. It also takes on a container of
  opaque settings factory by formatter id to generate the opaque
  settings. Finally, it uses the formatter settings factory for the
  overrides. These should be optional. If populated, they should take
  on the global settings as defaults so that we don't have to worry
  about global settings for formatters any more. This means the local
  settings factory must have access to the global settings.
- when formatting, cast opaque settings (if available) and throw if
  cast fails. For formatters without opaque settings, throw if any
  supplied.
- create a settings class that has a map of formatter id to global
  settings. It could also have a map of c++ entity name (produced with
  name builder to include namespaces). to formatter id to local
  settings. With this we can now move the settings away from entity
  because we no longer require the qname.

*** Capture settings validation rules                                  :task:

Once all settings have been built (global and local) we must pass them
to a validator class that makes sure they all make sense. This story
captures all the rules we need to check for. We must also check the
SML validator story in backlog for rules that apply to settings.

- integrated IO must not be enabled if IO is enabled and vice-versa
  (opaque settings validator). actually it seems this is possible, we
  need to investigate the current implementation.
- types must be enabled
- if serialisation is enabled, types forward declaration of the
  serialisation classes must be enabled (opaque settings validator)

*** Perform the global settings refactor                      :task:refactor:

- rename settings bundle to global settings
- rename bundler to global settings factory or workflow. This class
  will return a map of formatter id to global settings.

*** Create the formatter settings                                      :task:

- add formatter settings with enable and postfix. add it to global settings.
- create a formatter settings factory. it takes a list of formatter
  id's and uses these to look-up formatter traits in meta-data to
  generate formatter settings.
- use factory in global settings factory/workflow.

*** Add support for opaque settings

- create an empty opaque settings class. Create a opaque settings
  factory interface class. Formatter interface to return an optional
  opaque settings factory interface.
- create a local settings class that is made up of file settings,
  opaque settings and formatter settings. Entity to have a container
  of local settings (map of formatter id to local settings).
- create a local settings factory that takes on the work from workflow
  in generating the file settings. It also takes on a container of
  opaque settings factory by formatter id to generate the opaque
  settings. Finally, it uses the formatter settings factory for the
  overrides. These should be optional. If populated, they should take
  on the global settings as defaults so that we don't have to worry
  about global settings for formatters any more. This means the local
  settings factory must have access to the global settings.

*** IMPLEMENTATION Implement include generation for class header formatter :task:
    CLOCK: [2014-11-23 Sun 00:52]--[2014-11-23 Sun 00:57] =>  0:05

Now that we have finished generating the path spec details, we need to
make sure includes generation works as expected. Add both formatter
level includes as well as model level includes.

We also need to deal with:

- exposing formatter id as a static property so we can create
  dependencies between formatters;
- includes overrides via meta-data, so we can start using STL, Boost
  etc classes.
- includes of STL, Boost etc that are formatter level dependencies -
  this needs to be handled via traits.

*** Remove references to namespace in namespace               :task:refactor:

Due to moving classes around, we seem to have lots of cases where code
in a namespace (say =sml=) refers to types in that namespace with
qualification (say =sml::qname=). We need to do a grep in each project
to look for instances of a namespace and ensure they are valid.

*** Perform lexical casts once only for error reporting       :task:refactor:

There are a number of places in the code where we do lexical casts for
enumerations for the exception part:

: BOOST_LOG_SEV(lg, error) << unsupported_formatter_type << ft
:                          << " name: " << o.name();
: BOOST_THROW_EXCEPTION(workflow_error(unsupported_formatter_type +
:    boost::lexical_cast<std::string>(ft)));

We should just do the lexical cast once at the top and use it for both
logging and the exception message.

*** Create a transformation and formatting sub-workflow       :task:refactor:

At present we have two template functions in the main workflow,
linking the different steps of transformation and formatting. However,
it may make more sense to plug in to the all types traversal. For this
we need a sub-workflow that owns the model and the transformer and
which overloads =operator()=. It produces files.

It can receive a formatter dispatcher and a transformer on
construction and keep references these. Execute returns the list of
files.

*** Tidy-up sml consumer interface                            :task:refactor:

After implementing the includes for the class header formatter we
should figure out if we need the multiple passes machinery. Most
likely all of that should be scraped.

*** Implement class header formatter           :task:refactor:formatters:cpp:

- look at the old =om= types formatter implementation to see if there
  is any code to scavenge. This model was deleted around commit
  10157ad.

**** Tidy-up =types_main_header_file_formatter=                        :task:

Clean up internal functions in file and add documentation.

**** Copy across documentation from =om=                               :task:

We did a lot of doxygen comments that are readily applicable, copy
them across.

**** Make use of indenting stream                                      :task:

Remove uses of old indenter.

**** Copy across =om= types formatter tests                            :task:

Not sure how applicable this would be, but we may be able to scavenge
some tests.

** Deprecated Development Stories

Stories that do not make sense any longer.
