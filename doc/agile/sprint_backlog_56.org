#+title: Sprint Backlog 56
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) task(t) note(n) spike(p) }
#+tags: { refactor(r) bug(b) feature(f) vision(v) }
#+tags: { meta_data(m) tests(a) packaging(q) media(h) build(u) validation(x) diagrams(w) frontend(c) backend(g) }
#+tags: dia(y) sml(l) cpp(k) config(o) formatters(d)

* Stories

This file contains all stories that were closed during sprint 56.

The *Mission Statement* for this sprint is to finish implementing the
C++ model workflow skeleton, moving across all of the formatting code
for the class formatter.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-11-23 Sun 17:24]

| Headline                                                               | Time   |      |      |
|------------------------------------------------------------------------+--------+------+------|
| *Total time*                                                           | *8:26* |      |      |
|------------------------------------------------------------------------+--------+------+------|
| Development Stories Implemented                                        |        | 8:26 |      |
| IMPLEMENTATION Sprint and product backlog grooming                     |        |      | 0:13 |
| COMPLETED Implement path spec details builder for class header         |        |      | 1:55 |
| COMPLETED Create a compact form of qname io                            |        |      | 2:29 |
| COMPLETED Organise include builders by formatter id                    |        |      | 0:51 |
| COMPLETED Rename =identifier_name_builder= to =name_builder=           |        |      | 0:04 |
| COMPLETED Ensure relative path works correctly end to end              |        |      | 1:46 |
| COMPLETED Add dogen to travis                                          |        |      | 1:03 |
| IMPLEMENTATION Implement include generation for class header formatter |        |      | 0:05 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-11-20 Thu 08:04]--[2014-11-20 Thu 08:09] =>  0:05
    CLOCK: [2014-11-17 Mon 07:45]--[2014-11-17 Mon 07:53] =>  0:08

Updates to sprint and product backlog.

*** Updates to the manual and readme files                       :task:media:

Use downtime to update the manual and / or readme file.

*** COMPLETED Implement path spec details builder for class header     :task:
    CLOSED: [2014-11-20 Thu 08:04]
    CLOCK: [2014-11-20 Thu 07:53]--[2014-11-20 Thu 08:04] =>  0:11
    CLOCK: [2014-11-19 Wed 19:39]--[2014-11-19 Wed 19:49] =>  0:10
    CLOCK: [2014-11-19 Wed 17:54]--[2014-11-19 Wed 18:21] =>  0:27
    CLOCK: [2014-11-17 Mon 17:54]--[2014-11-17 Mon 18:41] =>  0:47
    CLOCK: [2014-11-17 Mon 07:53]--[2014-11-17 Mon 08:13] =>  0:20

We need to implement the interface for path spec details builder.

*** COMPLETED Create a compact form of qname io                       :story:
    CLOSED: [2014-11-21 Fri 20:34]
    CLOCK: [2014-11-21 Fri 20:22]--[2014-11-21 Fri 20:40] =>  0:18
    CLOCK: [2014-11-21 Fri 19:58]--[2014-11-21 Fri 20:13] =>  0:15
    CLOCK: [2014-11-21 Fri 08:56]--[2014-11-21 Fri 09:08] =>  0:12
    CLOCK: [2014-11-21 Fri 07:52]--[2014-11-21 Fri 08:35] =>  0:43
    CLOCK: [2014-11-20 Thu 17:37]--[2014-11-20 Thu 18:25] =>  0:48
    CLOCK: [2014-11-20 Thu 08:22]--[2014-11-20 Thu 08:35] =>  0:13

#+begin_quote
*Story*: As a dogen developer and user, I want to quickly identify an
instance of an SML type that is causing problems.
#+end_quote

At present we are using the JSON-based qname IO to dump qnames to the
log. For exceptions we use the simple name. There are downsides to
both of these approaches. With JSON we have a lot of moving parts that
obscure the vital information. With the simple name we miss all the
context for the type.

What we really need is a second type of IO for qnames that is
compacted to the absolute minimum. For example we could use dots to
concatenate all of the qname properties: =a.b.c=.

This will make the log files a lot smaller as well. Before:

: 2014-11-06 19:50:35.253844 [DEBUG] [sml.json_hydrator] Type has no containing module:  { "__type__": "dogen::sml::qname", "model_name": "", "external_module_path": [ ] , "module_path": [ ] , "simple_name": "long double" }

After:

: 2014-11-06 19:50:35.253844 [DEBUG] [sml.json_hydrator] Type has no containing module:  "long double"

We should add an SML utility function that does this work. We should
then do a grep for all instances of qname IO includes and for each,
replace it with the new utility function.

Finally we should raise a vision jira to make this either an extension
method (if these are supported in C++-17) or a manually generated
method on qname when we have a merging code generator.

*** COMPLETED Organise include builders by formatter id       :task:refactor:
    CLOSED: [2014-11-23 Sun 00:19]
    CLOCK: [2014-11-22 Sat 23:28]--[2014-11-23 Sun 00:19] =>  0:51

We need to create a map of include builders interface by formatter id
in order to make path spec details generation slightly more sensible.

*** COMPLETED Rename =identifier_name_builder= to =name_builder= :task:refactor:
    CLOSED: [2014-11-23 Sun 00:30]
    CLOCK: [2014-11-23 Sun 00:26]--[2014-11-23 Sun 00:30] =>  0:04

We now build identifier names as well as file names so the class name
is no longer right. Make it more generic.

*** COMPLETED Ensure relative path works correctly end to end          :task:
    CLOSED: [2014-11-23 Sun 00:48]
    CLOCK: [2014-11-23 Sun 00:30]--[2014-11-23 Sun 00:48] =>  0:18
    CLOCK: [2014-11-22 Sat 22:50]--[2014-11-22 Sat 23:27] =>  0:37
    CLOCK: [2014-11-22 Sat 21:53]--[2014-11-22 Sat 22:31] =>  0:38
    CLOCK: [2014-11-20 Thu 08:09]--[2014-11-20 Thu 08:22] =>  0:13

Now that we have finished generating the path spec details, we should
start making use of its properties. We first start with the relative
path. We need to make sure the file name, header guards, etc are being
generated correctly, end to end.

*** COMPLETED Add dogen to travis                                :task:build:
    CLOSED: [2014-11-23 Sun 17:24]
    CLOCK: [2014-11-23 Sun 17:00]--[2014-11-23 Sun 17:24] =>  0:24
    CLOCK: [2014-11-23 Sun 16:20]--[2014-11-23 Sun 16:59] =>  0:39

We're not doing a very good job of managing the CI support in
CDash. We are now down to a single build agent on OSX. We should add
the project to travis and stop managing the agents.

- https://travis-ci.org/
- [[http://computer-vision-talks.com/articles/2014-02-23-using-travis-ci/][Using Travis-CI for continuous testing your projects]]

It is also a good time to add the "markers" to the readme page. For an
example see:

https://raw.githubusercontent.com/flycheck/flycheck/master/README.rst

*** IMPLEMENTATION Implement include generation for class header formatter :task:
    CLOCK: [2014-11-23 Sun 00:52]--[2014-11-23 Sun 00:57] =>  0:05

Now that we have finished generating the path spec details, we need to
make sure includes generation works as expected. Add both formatter
level includes as well as model level includes.

We also need to deal with:

- exposing formatter id as a static property so we can create
  dependencies between formatters;
- includes overrides via meta-data, so we can start using STL, Boost
  etc classes.
- includes of STL, Boost etc that are formatter level dependencies -
  this needs to be handled via traits.

*** Remove references to namespace in namespace               :task:refactor:

Due to moving classes around, we seem to have lots of cases where code
in a namespace (say =sml=) refers to types in that namespace with
qualification (say =sml::qname=). We need to do a grep in each project
to look for instances of a namespace and ensure they are valid.

*** Perform lexical casts once only for error reporting       :task:refactor:

There are a number of places in the code where we do lexical casts for
enumerations for the exception part:

: BOOST_LOG_SEV(lg, error) << unsupported_formatter_type << ft
:                          << " name: " << o.name();
: BOOST_THROW_EXCEPTION(workflow_error(unsupported_formatter_type +
:    boost::lexical_cast<std::string>(ft)));

We should just do the lexical cast once at the top and use it for both
logging and the exception message.

*** Create a transformation and formatting sub-workflow       :task:refactor:

At present we have two template functions in the main workflow,
linking the different steps of transformation and formatting. However,
it may make more sense to plug in to the all types traversal. For this
we need a sub-workflow that owns the model and the transformer and
which overloads =operator()=. It produces files.

It can receive a formatter dispatcher and a transformer on
construction and keep references these. Execute returns the list of
files.

*** Tidy-up sml consumer interface                            :task:refactor:

After implementing the includes for the class header formatter we
should figure out if we need the multiple passes machinery. Most
likely all of that should be scraped.

*** Implement class header formatter           :task:refactor:formatters:cpp:

- look at the old =om= types formatter implementation to see if there
  is any code to scavenge. This model was deleted around commit
  10157ad.

**** Tidy-up =types_main_header_file_formatter=                        :task:

Clean up internal functions in file and add documentation.

**** Copy across documentation from =om=                               :task:

We did a lot of doxygen comments that are readily applicable, copy
them across.

**** Make use of indenting stream                                      :task:

Remove uses of old indenter.

**** Copy across =om= types formatter tests                            :task:

Not sure how applicable this would be, but we may be able to scavenge
some tests.

** Deprecated Development Stories

Stories that do not make sense any longer.
