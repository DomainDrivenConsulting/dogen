#+title: Release Notes for Sprint 41
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 41.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2013-12-20 Fri 18:23]

| Headline                                                     | Time   |      |      |
|--------------------------------------------------------------+--------+------+------|
| *Total time*                                                 | *8:03* |      |      |
|--------------------------------------------------------------+--------+------+------|
| Development Stories Implemented                              |        | 8:03 |      |
| IMPLEMENTATION Release notes and backlog grooming            |        |      | 0:19 |
| COMPLETED Use relationship container for visitors            |        |      | 1:13 |
| IMPLEMENTATION Create an =association_indexer= and add tests |        |      | 6:31 |
#+end:

*** IMPLEMENTATION Release notes and backlog grooming                  :task:
    CLOCK: [2013-12-18 Wed 07:56]--[2013-12-18 Wed 08:11] =>  0:15
    CLOCK: [2013-12-16 Mon 07:55]--[2013-12-16 Mon 07:59] =>  0:04

*** Update manual                                                     :story:

Use compilation downtime to update the manual.

*** COMPLETED Use relationship container for visitors                 :story:
    CLOSED: [2013-12-16 Mon 18:29]
    CLOCK: [2013-12-16 Mon 18:10]--[2013-12-16 Mon 18:29] =>  0:19
    CLOCK: [2013-12-16 Mon 17:50]--[2013-12-16 Mon 18:03] =>  0:13
    CLOCK: [2013-12-16 Mon 07:59]--[2013-12-16 Mon 08:40] =>  0:41

We need to store the two-way relationships related to visitation.

*** IMPLEMENTATION Create an =association_indexer= and add tests      :story:
**** COMPLETED Remove unnecessary extractor methods                   :spike:
     CLOSED: [2013-12-16 Mon 23:35]
     CLOCK: [2013-12-16 Mon 23:28]--[2013-12-16 Mon 23:35] =>  0:07

We forgot to remove some methods in extractor that are no longer
necessary:

- properties for concept: we have done concept and property expansion
  now, so all we need to do is to look at local properties.
- extract inheritance graph: no one is using this functionality.

Get rid of these methods to avoid confusing the analysis for
association indexer.

**** COMPLETED Create the class skeleton with tests                    :task:
     CLOSED: [2013-12-17 Tue 00:10]
     CLOCK: [2013-12-16 Mon 23:01]--[2013-12-16 Mon 23:28] =>  0:27
     CLOCK: [2013-12-16 Mon 18:30]--[2013-12-16 Mon 18:45] =>  0:15
     CLOCK: [2013-12-13 Fri 18:07]--[2013-12-13 Fri 18:17] =>  0:10
     CLOCK: [2013-12-13 Fri 08:43]--[2013-12-13 Fri 08:48] =>  0:05

**** COMPLETED Mock models with properties have missing types         :spike:
     CLOSED: [2013-12-17 Tue 11:43]
     CLOCK: [2013-12-17 Tue 11:25]--[2013-12-17 Tue 11:43] =>  0:18
     CLOCK: [2013-12-17 Tue 11:12]--[2013-12-17 Tue 11:25] =>  0:13

It seems we do not always add associated types when we create mock
models that have objects with properties; in a lot of cases, we add
the property without also adding the types the property requires. This
is a problem for the association indexer.

**** COMPLETED Mock models do not perform property expansion correctly :spike:
     CLOSED: [2013-12-17 Tue 19:52]
     CLOCK: [2013-12-17 Tue 19:40]--[2013-12-17 Tue 19:57] =>  0:17
     CLOCK: [2013-12-17 Tue 12:03]--[2013-12-17 Tue 12:07] =>  0:04
     CLOCK: [2013-12-17 Tue 11:55]--[2013-12-17 Tue 12:03] =>  0:08

When the property indexing flag is set, one expects all objects that
model concepts to have the properties copied across to the local
properties container. However, we only add the relationship without
copying.

**** COMPLETED Implement class and add unit tests                      :task:
     CLOSED: [2013-12-19 Thu 23:42]
     CLOCK: [2013-12-19 Thu 22:50]--[2013-12-19 Thu 23:42] =>  0:52
     CLOCK: [2013-12-19 Thu 17:52]--[2013-12-19 Thu 18:38] =>  0:46
     CLOCK: [2013-12-18 Wed 08:28]--[2013-12-18 Wed 08:42] =>  0:14
     CLOCK: [2013-12-18 Wed 08:11]--[2013-12-18 Wed 08:28] =>  0:17
     CLOCK: [2013-12-18 Wed 07:55]--[2013-12-18 Wed 07:56] =>  0:01
     CLOCK: [2013-12-17 Tue 11:44]--[2013-12-17 Tue 11:47] =>  0:03
     CLOCK: [2013-12-17 Tue 10:49]--[2013-12-17 Tue 10:52] =>  0:03
     CLOCK: [2013-12-16 Mon 23:35]--[2013-12-17 Tue 00:10] =>  0:35

Missing tests:

- object with multiple properties of different types, no duplicates
- object with multiple properties of different types, duplicates
- object with operation with single parameter
- object with operation with multiple parameters
- object with operation with return type
- object with different types of nested qualified names

**** COMPLETED Plug into workflow                                      :task:
     CLOSED: [2013-12-19 Thu 23:53]
     CLOCK: [2013-12-19 Thu 23:43]--[2013-12-19 Thu 23:53] =>  0:10

Unexpectedly, nothing to rebaseline. this is because engine specs
compare the code generator output rather than the contents of the SML
model and relationships are not yet expressed in code.

**** COMPLETED Copy across applicable extractor tests                 :spike:
     CLOSED: [2013-12-20 Fri 18:23]
     CLOCK: [2013-12-20 Fri 17:43]--[2013-12-20 Fri 18:23] =>  0:40
     CLOCK: [2013-12-20 Fri 07:38]--[2013-12-20 Fri 08:24] =>  0:46

We appear to have forgotten to copy the extractor tests that make
sense for the association indexer.

**** Start using indexed associations                                  :task:
** Deprecated Development Stories
*** CANCELLED Move extractor from C++ model into SML                  :story:
    CLOSED: [2013-12-16 Mon 23:37]

New understanding: this will largely be achieved through the
implementation of the association indexer. We will still have an
extractor in SML to C++ but it will be a simple aggregator of
relationships and will only live until we move over to =om=.

Old Understanding: Extractor and relationships should be moved into
SML. The C++ specific bits are the parts where we directly name types
such as =has_std_string=, etc. These should be generalised, such that
the user could pass in a list of types to the extractor and then we'd
return them with a bool for whether we seen them or not.

We should also remove the references to =forward_decls= directly and
instead have something like "pointer only" dependencies or some such
SML level concept and then interpret this dependency as a forward
declaration at the C++ level.
