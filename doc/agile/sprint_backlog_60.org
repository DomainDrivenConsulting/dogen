#+title: Sprint Backlog 60
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Commentary

** Mission

Replace all uses of meta-data with dynamic across the entire code
base.

** Retrospective

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2015-01-25 Sun 00:10]

| Headline                                                         | Time    |       |      |
|------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                     | *12:14* |       |      |
|------------------------------------------------------------------+---------+-------+------|
| Active                                                           |         | 12:14 |      |
| STARTED Sprint and product backlog grooming                      |         |       | 1:23 |
| COMPLETED Add annotation fields and remove meta-data usage       |         |       | 2:15 |
| COMPLETED Add field definition to odb formatters                 |         |       | 1:09 |
| COMPLETED Consider defaulting doxygen docs to false              |         |       | 0:05 |
| COMPLETED Refactor hierarchy ownership of fields                 |         |       | 1:03 |
| COMPLETED Create field definitions for all c++ fields            |         |       | 4:55 |
| COMPLETED Add default value support to dynamic field definitions |         |       | 0:35 |
| STARTED Rename namespace =meta-data= to =dynamic=                |         |       | 0:26 |
| STARTED Update c++ factories to use dynamic object               |         |       | 0:23 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-01-21 Wed 23:30]--[2015-01-21 Wed 23:36] =>  0:06
    CLOCK: [2015-01-21 Wed 23:07]--[2015-01-21 Wed 23:13] =>  0:06
    CLOCK: [2015-01-21 Wed 19:10]--[2015-01-21 Wed 20:00] =>  0:50
    CLOCK: [2015-01-20 Tue 23:56]--[2015-01-21 Wed 00:02] =>  0:06
    CLOCK: [2015-01-20 Tue 22:40]--[2015-01-20 Tue 22:55] =>  0:15

Updates to sprint and product backlog.

*** COMPLETED Fix windows nightly build                               :story:
    CLOSED: [2015-01-21 Wed 08:43]

Note: this was fixed some time ago.

The nightly build for windows has been broken for quite a while. The
problem is we have hit a limit in COFF in the serialisation of context
(=sml_to_cpp=):

: cd /E/mingw/msys/1.0/home/ctest/build/Nightly/dogen/mingw-1.0.17-i686-gcc-4.7/build/projects/sml_to_cpp/src && /e/mingw/bin/g++.exe   -DBOOST_ALL_DYN_LINK -isystem /e/usr/local/pfh/include -std=gnu++0x -D_WIN32_WINNT=0x0501 -DBOOST_TEST_SOURCE  -g -O0 -Wall -Wextra -pedantic -Werror -Wno-system-headers -Woverloaded-virtual -Wwrite-strings -fprofile-arcs -ftest-coverage -std=gnu++11 -frtti -fvisibility-inlines-hidden -fvisibility=default @CMakeFiles/sml_to_cpp.dir/includes_CXX.rsp   -o CMakeFiles/sml_to_cpp.dir/io/std_types_io.cpp.obj -c /e/mingw/msys/1.0/home/ctest/build/Nightly/dogen/mingw-1.0.17-i686-gcc-4.7/source/projects/sml_to_cpp/src/io/std_types_io.cpp
: /e/cmake/bin/cmake.exe -E cmake_progress_report /E/mingw/msys/1.0/home/ctest/build/Nightly/dogen/mingw-1.0.17-i686-gcc-4.7/build/CMakeFiles 
: [ 77%] Building CXX object projects/sml_to_cpp/src/CMakeFiles/sml_to_cpp.dir/serialization/context_ser.cpp.obj
: cd /E/mingw/msys/1.0/home/ctest/build/Nightly/dogen/mingw-1.0.17-i686-gcc-4.7/build/projects/sml_to_cpp/src && /e/mingw/bin/g++.exe   -DBOOST_ALL_DYN_LINK -isystem /e/usr/local/pfh/include -std=gnu++0x -D_WIN32_WINNT=0x0501 -DBOOST_TEST_SOURCE  -g -O0 -Wall -Wextra -pedantic -Werror -Wno-system-headers -Woverloaded-virtual -Wwrite-strings -fprofile-arcs -ftest-coverage -std=gnu++11 -frtti -fvisibility-inlines-hidden -fvisibility=default @CMakeFiles/sml_to_cpp.dir/includes_CXX.rsp   -o CMakeFiles/sml_to_cpp.dir/serialization/context_ser.cpp.obj -c /e/mingw/msys/1.0/home/ctest/build/Nightly/dogen/mingw-1.0.17-i686-gcc-4.7/source/projects/sml_to_cpp/src/serialization/context_ser.cpp
: e:/mingw/bin/../lib/gcc/mingw32/4.7.2/../../../../mingw32/bin/as.exe: CMakeFiles/sml_to_cpp.dir/serialization/context_ser.cpp.obj: too many sections (32795)

This problem is solved with visual studio using the =/bigobj= flag,
but this is not available on mingw at the moment. Support has been
[[https://sourceware.org/ml/binutils/2014-03/msg00114.html][checked in]] to mingw64 trunk, so hopefully it will make its way to
32-bits too. See also: [[http://sourceforge.net/p/mingw-w64/bugs/341/][#341 Too many sections aka /bigobj replacement
flag]].

*** COMPLETED Add annotation fields and remove meta-data usage        :story:
    CLOSED: [2015-01-21 Wed 21:05]
    CLOCK: [2015-01-21 Wed 21:36]--[2015-01-21 Wed 21:56] =>  0:20
    CLOCK: [2015-01-21 Wed 20:45]--[2015-01-21 Wed 21:02] =>  0:17
    CLOCK: [2015-01-21 Wed 20:00]--[2015-01-21 Wed 20:37] =>  0:37
    CLOCK: [2015-01-20 Tue 23:31]--[2015-01-20 Tue 23:56] =>  0:25
    CLOCK: [2015-01-20 Tue 22:55]--[2015-01-20 Tue 23:31] =>  0:36

Add all required field definitions for the formatters field; rename
meta-data namespace to dynamic and re-implement factory using dynamic
fields instead of =ptree=.

We need to inject:

- copyright
- licence
- modeline_group

We also need to sort out the upper case/lower case naming of these
fields in various diagrams, as well as the licence vs licence name,
etc.

*** COMPLETED Add field definition to odb formatters                  :story:
    CLOSED: [2015-01-21 Wed 22:45]
    CLOCK: [2015-01-21 Wed 22:45]--[2015-01-21 Wed 22:51] =>  0:06
    CLOCK: [2015-01-21 Wed 22:10]--[2015-01-21 Wed 22:45] =>  0:35
    CLOCK: [2015-01-21 Wed 21:05]--[2015-01-21 Wed 21:33] =>  0:28

We need a hack in order to cope with ODB pragmas. The easiest way is
to define the field definitions in the formatters - this is the right
way at any rate - but then do some kind of hack to extract the field
from the meta-data. For example we could call the field definition
directly from the =cpp_formatters= model.

*** COMPLETED Consider defaulting doxygen docs to false               :story:
    CLOSED: [2015-01-21 Wed 23:21]
    CLOCK: [2015-01-21 Wed 23:16]--[2015-01-21 Wed 23:21] =>  0:05

At present we do build all quite a lot, but never really look at the
docs. We should not have to pay the cost of doxygenation. It would be
better to default it to false even in the presence of the doxygen
binary.

*** COMPLETED Refactor hierarchy ownership of fields                  :story:
    CLOSED: [2015-01-24 Sat 18:53]
    CLOCK: [2015-01-24 Sat 17:49]--[2015-01-24 Sat 18:52] =>  1:03

Since we cannot know the name of the fields for each formatter, we
need a way to pull out all fields for a given formatter when building
the formatter settings. We need to model this kind of hierarchical
information so we can query fields by it.

*** COMPLETED Create field definitions for all c++ fields             :story:
    CLOSED: [2015-01-24 Sat 20:46]
    CLOCK: [2015-01-24 Sat 20:38]--[2015-01-24 Sat 20:46] =>  0:08
    CLOCK: [2015-01-24 Sat 20:34]--[2015-01-24 Sat 20:37] =>  0:03
    CLOCK: [2015-01-24 Sat 20:32]--[2015-01-24 Sat 20:34] =>  0:02
    CLOCK: [2015-01-24 Sat 20:28]--[2015-01-24 Sat 20:32] =>  0:04
    CLOCK: [2015-01-24 Sat 20:06]--[2015-01-24 Sat 20:28] =>  0:22
    CLOCK: [2015-01-24 Sat 19:01]--[2015-01-24 Sat 20:06] =>  1:05
    CLOCK: [2015-01-23 Fri 23:15]--[2015-01-24 Sat 00:04] =>  0:49
    CLOCK: [2015-01-22 Thu 21:43]--[2015-01-22 Thu 23:25] =>  1:42
    CLOCK: [2015-01-22 Thu 20:50]--[2015-01-22 Thu 21:30] =>  0:40

We need to go through all of the fields used by the C++ factories and
create definitions for them. We also need to remove the traits class.

This is actually a lot more complicated than expected. We need to do
the following:

- create a proper hierarchical structure for fields rather than a flat
  owner. This is to cope with the fields that belong to facets or
  formatters. Update all of the existing field definitions. Split
  into its own story.
- add a class header file name field. This is so we can override it
  for STL, boost, etc. We only need it for class header file names (by
  convention).
- create all of the field definitions for all of the formatters and
  inject them via the initialisers.

*** COMPLETED Add default value support to dynamic field definitions  :story:
    CLOSED: [2015-01-24 Sat 21:21]
    CLOCK: [2015-01-24 Sat 20:46]--[2015-01-24 Sat 21:21] =>  0:35

We need to add a default value to the field definition. We also need
to go through all the existing fields and add default values where
required.

*** STARTED Rename namespace =meta-data= to =dynamic=                 :story:
    CLOCK: [2015-01-22 Thu 19:15]--[2015-01-22 Thu 19:25] =>  0:10
    CLOCK: [2015-01-21 Wed 22:51]--[2015-01-21 Wed 23:07] =>  0:16

We have created a number of "meta-data extension" namespaces, which is
where we transform the ptree into a strongly typed object. These
should be renamed to =dynamic= to make it consistent.

*** STARTED Update c++ factories to use dynamic object                :story:
    CLOCK: [2015-01-24 Sat 23:47]--[2015-01-25 Sun 00:10] =>  0:23

This requires a bit of cleverness because we need to make use of the
hierarchical properties for ownership. We also need to add default
values to field definitions and remove the default facet properties.

- group by facet where formatter is null
- in each group, locate the facet settings and copy them over

*** Dynamic workflow is recreated for every model                     :story:

We should create the dynamic workflow once and pass it to the dia to
sml instances. Instead we are recreating it in every transformer
instance. Since the workflow is const, we should be able to pass
references to it around.

*** Create a container of field definitions in field definition       :story:

It would be good if we could just return all field definitions in one
go from within the field definition class itself instead of calling
each of them in the initialiser; it is more likely that one would
remember to add the field to the list when adding new fields. It would
also mean there is only one file to change.

We could use =std::reference_wrapper= for this.

*** Replace uses of meta-data with dynamic object                     :story:

Find all places where we are using ptree and use the dynamic object
instead. This should be mainly in meta-data factories.

*** Inject unit test field definitions                                :story:

We need to inject fields like =KEY= etc used by unit tests in the unit
tests themselves. Take the opportunity to lower-case them.

*** Remove optionality from =obtain_field_definition=                 :story:

In order to progress in stages we made fields optional in dynamic
workflow; if a definition is not found we skip it. We need to remove
this once all field definitions have been added.

*** Remove uses of meta-data in tests                                 :story:

Where we are checking for the presence of meta-data fields, we need to
look for dynamic fields instead.

*** Update mock factory to generate dynamic fields                    :story:

At present the mock factory is generating meta-data fields. We need it
to generate dynamic fields. We should hard-code the field names using
local constants - and not add dependencies on the different models due
to field definitions.

*** Remove all references to =ptree=                                  :story:

Delete reader and writer classes and remove meta-data from
=Extensible=.

*** Remove dependency of writer on tags                               :story:

We seem to be using the tags to detect containers. We need to get rid
of this dependency.

*** Delete tags class in SML                                          :story:

This class does not make sense any more as each model will be
responsible for their own tags.

Can only be done once we delete writer and reader.

*** Add merger to dynamic                                             :story:

We need a class that takes two objects and merges them. For example
the root module meta-data object and any type. Could be called
merger. Should have a lhs and a rhs and produce a result.

*Note*: we still need to prove the use case; it may be that we do not
need merging at all.

*** Add dynamic merging to SML workflow                               :story:

We need an extra activity in the SML workflow that makes use of the
=dynamic::merger= to produce the final dynamic object.

*Note*: we still need to prove the use case; it may be that we do not
need merging at all.

*** Protect against double-initialisation                             :story:

We need to look into static initialisation and make sure the code can
cope with it being called several times.

*** Update meta-data section in manual                                :story:

Once we are done with all of the meta-data refactoring, we need to
update the manual.

*** Add field definition description                                  :story:

It would be useful to have a description of the purpose of the field
so that we could print it to the command line.

*** Add field definition group                                        :story:

Fields should be grouped. This could conceivably be achieved by the
owner, or maybe we need a high-level entity to do this
aggregation. This is useful when printing fields out to the shell.

*** Rename ODB parameters                                             :story:

At present we use the following form:

: #DOGEN ODB_PRAGMA=no_id

We need to use the new naming style =cpp.odb.pragma=. We also need to
rename the opaque_parameters to reflect ODB specific data.

*** Rename =dia.comment=                                              :story:

This field hasn't got a sensible name. We need to continue thinking
about the right name for this - as we have already started doing with
processed comment; =applicable_to_parent_object= is not quite the
right name but it is moving on the right direction. Once we settle on
a good name we need to rename all usages of =dia.comment=.

*** Remove copyright notices from licence hydrator                    :story:

At present there seems to be no use case for adding a copyright notice
when hydrating a licence; these only make sense in the context of a
model. We should remove this.

** Deprecated
