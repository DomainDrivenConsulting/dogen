#+title: Sprint Backlog 12
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- resolve the refactoring problem with lots of duplicated types.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2019-03-07 Thu 12:04]
| <75>                                                         |         |       |       |       |
| Headline                                                     | Time    |       |       |     % |
|--------------------------------------------------------------+---------+-------+-------+-------|
| *Total time*                                                 | *60:42* |       |       | 100.0 |
|--------------------------------------------------------------+---------+-------+-------+-------|
| Stories                                                      | 60:42   |       |       | 100.0 |
| Active                                                       |         | 60:42 |       | 100.0 |
| Edit release notes for previous sprint                       |         |       |  1:27 |   2.4 |
| Sprint and product backlog grooming                          |         |       |  1:03 |   1.7 |
| Implement text model generation chain in generation          |         |       |  3:45 |   6.2 |
| Move generation model out of coding                          |         |       |  4:22 |   7.2 |
| Rename endomodel to just model                               |         |       |  2:11 |   3.6 |
| Remove exomodel remnants                                     |         |       |  0:03 |   0.1 |
| Consider adding a dot graph of the transforms to probing     |         |       |  1:47 |   2.9 |
| Split annotations processing into two phases                 |         |       |  3:10 |   5.2 |
| Move injection processing out of coding                      |         |       | 18:39 |  30.7 |
| Create a extraction model post-processing chain              |         |       |  0:56 |   1.5 |
| Move coding to generation model transform into orchestration |         |       |  0:33 |   0.9 |
| Add option for northwind tests                               |         |       |  0:54 |   1.5 |
| Add DTL to vcpkg                                             |         |       |  5:15 |   8.6 |
| Remove coding options                                        |         |       |  3:59 |   6.6 |
| Rename the =transform= method to =apply=                     |         |       |  0:05 |   0.1 |
| Try to fix valgrind warning on =find_files=                  |         |       |  0:20 |   0.5 |
| Add basic "diff mode"                                        |         |       | 11:09 |  18.4 |
| Fix northwind tests on OSX and Windows                       |         |       |  1:04 |   1.8 |
#+TBLFM: $5='(org-clock-time%-mod @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2019-02-26 Tue 16:51]
    :LOGBOOK:
    CLOCK: [2019-02-27 Wed 10:12]--[2019-02-27 Wed 10:32] =>  0:20
    CLOCK: [2019-02-26 Tue 15:44]--[2019-02-26 Tue 16:51] =>  1:07
    :END:

 Add github release notes for previous sprint.

 Title: Dogen v1.0.11, "Moçamedes"

#+begin_src markdown
![Moçamedes](https://www.portaldeangola.com/wp-content/uploads/2018/02/namibe.jpg)
_Município de Moçamedes, capital da província do Namibe. [(C) 2018 Portal de Angola](https://www.portaldeangola.com/2018/08/03/mocamedes-completa-169-anos-com-mais-espacos-verdes/)_.

# Overview

Sprint 11 was yet another "never ending" sprint, lasting several months and is packed full of work. By far, the largest contributor for this oversized sprint was the work on the PhD thesis, which lays the theoretical foundations of MASD. All of the preliminary reviews of the PhD have now been completed, and we have now reached the "business end" towards the delivery of the dissertation. This is good news for the Dogen development, because it means that the theoretical model is now close to completion and we can once more focus on coding. The downside is that after many months of theory without giving the code the proper attention, it is now quite far away from the theory. Towards the end of the sprint some coding work did get done though, adding some interesting features.

## Infrastructure Cleanup

Continuing from the previous sprint, we worked on a number of small housekeeping tasks that have been outstanding for a while

- Nightly builds have now returned. We still have a number of false positives that need to be suppressed, but we're closing in on those.
- Clang-cl build is no longer experimental. Dogen now builds and runs all tests, and the C++ reference implementation has only one test failure. We've also made some inroads in improving CDash's support for clang-cl (https://github.com/Kitware/CDash/issues/733). We are now very close to shipping our Windows binaries from clang-cl.
- Assorted vcpkg updates: Boost is now at v1.69 across all operative systems, ODB is now at v2.5.

## Reference Models Cleanup

A number of small fixes were done to the reference models, improving our confidence in the build process:

- Update all models to latest Dogen, including sync'ing the JSON models to the latest Dia models.
- Update the ```northwind``` model to latest ODB, and add tests to connect to a postgres database on travis (Linux only). We are now validating our ORM support.
- Added a colour palette test model to exercise all stereotypes that have an associated colour to ensure the palette is consistent.

## Codebase Cleanup

Continuing with our overall code cleanup, a number of refactors were made:

- the utility model is now a regular model. Together with the "single binary" work (see below), this now means that Dogen is made entirely of Dogen models.
- reduce the number of generated files that are unused. We've removed many forward declarations and other facets that were generated for no good reason.  This work resulted in cleaning up some bugs for corner cases in facet enablement.
- clean up temporary profiles, created when we were trying to get rid of unnecessary facets. We now have only one temporary profile, that can only be removed when we fix a bug in Dogen.
- start using Boost.DI for dependency injection instead of rolling our own code. We still need to replace all the registrars and so forth, but we've made a start.

# User visible changes

A number of user visible changes were made with this release. These are all **breaking changes** and require updates in order for existing models to continue working.

## Complete MASD namespace rename

All of the profiles and meta-data are now in the MASD namespace. With this release we tidied up missed items such as: ```masd.decoration.licence_name```, ```masd.decoration.copyright_notice``` etc that had been missed previously.

## Move command line options to metadata

A number of command line options have been moved into the meta-data section of the model. This is because these options were really model properties. With this change we now make it easier to regenerate models in a reproducible manner. Example options:

```
#DOGEN masd.extraction.ignore_files_matching_regex=.*/CMakeLists.txt
#DOGEN masd.extraction.delete_extra_files=true
#DOGEN masd.extraction.force_write=true
```

## Create a single Dogen binary

When we started Dogen we created a number of tiny binaries that worked as frontends to specific transformations such as ```knitter```, ```stitcher``` and so forth. However, as we better understood the problem domain, it became clear that there was lots of duplication between binaries for no real advantage. With this release, we implemented the git approach of having a single binary with a "command" interface. The help screen explains this new approach:

```
$ ./masd.dogen.cli --help
Dogen is a Model Driven Engineering tool that processes models encoded in supported codecs.
Dogen is created by the MASD project.
Dogen uses a command-based interface: <command> <options>.
See below for a list of valid commands.

Global options:

General:
  -h [ --help ]                   Display usage and exit.
  -v [ --version ]                Output version information and exit.

Logging:
  -e [ --log-enabled ]            Generate a log file.
  -g [ --log-directory ] arg      Directory to place the log file in. Defaults
                                  to 'log'.
  -l [ --log-level ] arg          What level to use for logging. Valid values:
                                  trace, debug, info, warn, error. Defaults to
                                  'info'.

Tracing:
  --tracing-enabled               Generate metrics about executed transforms.
  --tracing-level arg             Level at which to trace.Valid values: detail,
                                  summary.
  --tracing-guids-enabled         Use guids in tracing metrics, Not
                                  recommended when making comparisons between
                                  runs.
  --tracing-format arg            Format to use for tracing metrics. Valid
                                  values: org-mode, text
  --tracing-output-directory arg  Directory in which to dump probe data. Only
                                  used if transforms tracing is enabled.

Error Handling:
  --compatibility-mode-enabled    Try to process models even if there are
                                  errors.

Commands:

   generate       Generates source code from input models.
   convert        Converts a model from one codec to another.
   weave          Weaves one or more template files into its final output.

For command specific options, type <command> --help.
```

And then for say the ```generate``` command, we now have:

```
$ ./masd.dogen.cli generate --help
Dogen is a Model Driven Engineering tool that processes models encoded in supported codecs.
Dogen is created by the MASD project.
Displaying options specific to the generate command.
For global options, type --help.

Generation:
  -t [ --target ] arg           Model to generate code for, in any of the
                                supported formats.
  -o [ --output-directory ] arg Output directory for the generated code.
                                Defaults to the current working directory.
```

This approach cleaned significantly the internals, resulting in the deletion of a number of model-lets and coalescing all of their functionality in a much cleaner way in a single model: ```masd.dogen.cli```.

## New stereotypes

A small number of stereotypes has been added:

- ```masd::cpp::header_only```: handcrafted type that has only a header file.
- ```masd::entry_point```: handcrafted type that has only an implementation file.
- ```masd::interface```: handcrafted type that has only a header file.

In the future we will bind different templates to these stereotypes to provide a more suitable starting state.

For more details of the work carried out this sprint, see [the sprint log](https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_11.org).

# Next Sprint

We are now in full refactoring mode in Dogen. The objective of the next sprint is to implement the orchestration model properly, removing all of the (many) experiments that have been attempted over the last few years.

# Binaries

You can download binaries from [Bintray](https://bintray.com/masd-project/main/dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_1.0.11_amd64-applications.deb](https://dl.bintray.com/masd-project/main/1.0.11/dogen_1.0.11_amd64-applications.deb)
- [dogen-1.0.11-Darwin-x86_64.dmg](https://dl.bintray.com/masd-project/main/1.0.11/dogen-1.0.11-Darwin-x86_64.dmg)
- [dogen-1.0.11-Windows-AMD64.msi](https://dl.bintray.com/masd-project/main/dogen-1.0.11-Windows-AMD64.msi)

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/1100704249032462336][Tweet]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6506470333200023552][LinkedIn]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

*** STARTED Sprint and product backlog grooming                       :story:
    :LOGBOOK:
    CLOCK: [2019-03-04 Mon 18:31]--[2019-03-04 Mon 18:41] =>  0:10
    CLOCK: [2019-03-04 Mon 18:14]--[2019-03-04 Mon 18:25] =>  0:11
    CLOCK: [2019-03-01 Fri 11:43]--[2019-03-01 Fri 12:07] =>  0:24
    CLOCK: [2019-02-26 Tue 15:25]--[2019-02-26 Tue 15:43] =>  0:18
    :END:

 Updates to sprint and product backlog.

*** COMPLETED Implement text model generation chain in generation     :story:
    CLOSED: [2019-02-28 Thu 13:54]
    :LOGBOOK:
    CLOCK: [2019-02-28 Thu 13:54]--[2019-02-28 Thu 14:02] =>  0:08
    CLOCK: [2019-02-28 Thu 12:59]--[2019-02-28 Thu 13:53] =>  0:54
    CLOCK: [2019-02-28 Thu 10:04]--[2019-02-28 Thu 12:05] =>  2:01
    CLOCK: [2019-02-28 Thu 09:21]--[2019-02-28 Thu 10:03] =>  0:42
    :END:

Move the text model transform and all related code into the generation
model. This implies updating all formatters.

Notes:

- move linter into orchestration or extraction

Merged Stories:

*Move text model into extraction model*

We started this work but stopped half-way. This is required in order
to move to the new pipeline orchestration.

Tasks:

- copy the current state of all types into extraction as they have
  moved on.
- make coding refer to extraction to start off with. Eventually the
  transforms can be moved over to =generation.extraction=.

*Create a context factory for injection model*

At present we are creating a coding context just so we can get access
to the tracer. We then initialise the injection context with the
tracer. A better approach would be to have a context factory that
handles the tracer creation in injection.

*** COMPLETED Move generation model out of coding                     :story:
    CLOSED: [2019-03-01 Fri 09:13]
    :LOGBOOK:
    CLOCK: [2019-03-01 Fri 08:21]--[2019-03-01 Fri 09:13] =>  0:52
    CLOCK: [2019-02-28 Thu 15:35]--[2019-02-28 Thu 17:34] =>  1:59
    CLOCK: [2019-02-28 Thu 14:03]--[2019-02-28 Thu 15:34] =>  1:31
    :END:

- then copy the model from coding into generation and all associated
  transforms.
- then add support in each generation model (cpp, csharp) for
  converting from the generation model to the formattables model.
- then create a model generation chain that uses the generation model.
- then delete the model and transforms from coding; delete the
  adaptors from generation models (cpp, csharp).
- then move the model to text model chain into generation.

*** COMPLETED Rename endomodel to just model                          :story:
    CLOSED: [2019-03-01 Fri 11:16]
    :LOGBOOK:
    CLOCK: [2019-03-01 Fri 11:21]--[2019-03-01 Fri 11:31] =>  0:10
    CLOCK: [2019-03-01 Fri 10:55]--[2019-03-01 Fri 11:16] =>  0:21
    CLOCK: [2019-03-01 Fri 09:14]--[2019-03-01 Fri 10:54] =>  1:40
    :END:

Now we just have one model in coding we can rename it to something
sensible. Update all transforms, variables, etc.

Notes:

- what is new adapter in coding?

*** COMPLETED Remove exomodel remnants                                :story:
    CLOSED: [2019-03-01 Fri 11:20]
    CLOCK: [2019-03-01 Fri 11:17]--[2019-03-01 Fri 11:20] =>  0:03

It seems we have removed the exomodel on the main, but a grep for it
still shows quite a few remnants. Go through the grep and remove all
of it.

*Previous Understanding*

Once the =external= model has been created, we need to replace the
legacy exomodel related transforms; and once that is done, we need to
remove all of the legacy code.

*** COMPLETED Update ref impl namespaces to match the new specification :story:
    CLOSED: [2019-03-01 Fri 11:43]

*Rationale*: already implemented.

Perform the namespace update to the reference implementation.

*** COMPLETED Log file names do not have frontend                     :story:
    CLOSED: [2019-03-01 Fri 11:45]

*Rationale*: already implemented.

Add extension to log file name so that we can see both Dia and JSON
logs at the same time. At present, one overwrites the other because we
do not have the frontend (e.g. the extension) on the log file name.

*** COMPLETED Consider adding a dot graph of the transforms to probing :story:
    CLOSED: [2019-03-01 Fri 22:30]
    :LOGBOOK:
    CLOCK: [2019-03-01 Fri 22:31]--[2019-03-01 Fri 22:39] =>  0:08
    CLOCK: [2019-03-01 Fri 20:51]--[2019-03-01 Fri 22:30] =>  1:39
    :END:

At present it is very difficult to figure out the composition of the
chains and transforms. It would be great if we could visualise them as
a graph using dot/graphviz. The notation looks quite straightforward
and since we've already built the graph in tracing, its probably just
a case of transforming it.

We can just add a new format: dot. Then teach the metrics printer to
output in it. Ideally we should find a way to put at least the timings
on the graph as well. We should take this opportunity to use the
tracing formats directly in metrics printer rather than the "use
org-mode" hack we do at present.

Generate DOT:

: ./masd.dogen.cli generate -t ~/Development/DomainDrivenConsulting/masd/dogen/integration/projects/masd.dogen.models/dia/hello_world.dia --log-enabled --log-level trace --tracing-enabled --tracing-level detail --tracing-format graphviz --tracing-guids-enabled

Convert to PDF:

: dot -Tpdf transform_stats.dot -o output.pdf

Links:

- [[https://renenyffenegger.ch/notes/tools/Graphviz/examples/index][Graphviz (dot) examples]]

*** COMPLETED Split annotations processing into two phases            :story:
    CLOSED: [2019-03-02 Sat 15:52]
    :LOGBOOK:
    CLOCK: [2019-03-02 Sat 15:37]--[2019-03-02 Sat 15:50] =>  0:13
    CLOCK: [2019-03-02 Sat 15:12]--[2019-03-02 Sat 15:36] =>  0:24
    CLOCK: [2019-03-02 Sat 15:01]--[2019-03-02 Sat 15:11] =>  0:10
    CLOCK: [2019-03-02 Sat 08:01]--[2019-03-02 Sat 08:20] =>  0:19
    CLOCK: [2019-03-02 Sat 07:19]--[2019-03-02 Sat 08:00] =>  0:41
    CLOCK: [2019-03-02 Sat 07:09]--[2019-03-02 Sat 07:18] =>  0:09
    CLOCK: [2019-03-02 Sat 06:31]--[2019-03-02 Sat 07:08] =>  0:37
    CLOCK: [2019-03-01 Fri 18:01]--[2019-03-01 Fri 18:18] =>  0:17
    CLOCK: [2019-03-01 Fri 17:40]--[2019-03-01 Fri 18:00] =>  0:20
    :END:

At present the annotation factory does two very distinct jobs:

- the creation of an annotation. For this we just need to map the KVPs
  to a slightly more typed structure. This should be doable at pretty
  much any time.
- profile expansion. For this we need for all the fields to have been
  setup and template expanded; we need the stereotypes to have been
  processed and we need the profiles to have been processed. Only then
  we can match the dynamic stereotypes against the profiles and setup
  the annotation.

In a world where profiles are distinct meta-entities, this is fine
because we can ensure we read the JSON files first and then perform
model processing. However, going forward, we want models to contain
profiles (once they are renamed to something more sensible). What this
means is that we have a circular dependency between profiles and
models. This had been understood in the past (somewhere in the product
backlog) but we didn't quite point out a solution.

The solution appears simple: split annotation processing into two
steps:

- First we initialise the annotation without any further
  processing. This then allows users to query it, but if they do, they
  will not see any of the profile related fields. This should be ok
  because we are just looking for a few root module properties
  (references, etc). We've already performed some analysis on this -
  locate this story.
- Second we expand the profiles. This must be done very early on in
  coding. Unfortunately, we also made another mistake: when we adapt a
  injection element into their coding meta-type, we are performing the
  annotation expansion. This made sense at the time, but its now not
  ideal because we want to resolve all types to their coding types
  before we perform profile expansion (so that we can locate the
  profiles first amongst the meta-types and perform their
  initialisation).

Problems:

- something is not quite right with stitch expansion; we used to have
  profile expansion before (somehow) but now it does not work any
  more. Fixed.

Tasks:

- create a "profile expander" that takes on the role of profile
  expansion from annotation factory. Update existing transform to call
  first the factory then the expander and make sure nothing breaks.
- add annotation processing to injection, including annotation factory
  (minus profile expansion).
- remove annotations factory work from new adapter, reusing instead
  injection annotation.

Notes:

- note that types are different from profiles: once we code-generate
  the types code, we will register them at initialisation time. This
  can be done exactly as is at present, but instead of reading the
  type templates from JSON we are merely creating some C++ code which
  performs the same role. Then, we can initialise the type repository
  as we do at present (during context generation), which will then
  perform the template expansion and so forth. All of this must
  precede both profile expansion and any querying of annotations prior
  to expansion. The best way to achieve this is to create a type
  registrar that allows generated code to register types. We can call
  this generate code in the initialiser.
- the generation of the fields will require a transform that creates a
  masd::object with the fields, the class that registers the type, and
  a class that reads the fields to populate the object. We need LAM to
  map types from annotations to the output language.

*** COMPLETED Move injection processing out of coding                 :story:
    CLOSED: [2019-03-04 Mon 18:13]
    :LOGBOOK:
    CLOCK: [2019-03-04 Mon 17:51]--[2019-03-04 Mon 18:13] =>  0:22
    CLOCK: [2019-03-04 Mon 17:30]--[2019-03-04 Mon 17:50] =>  0:20
    CLOCK: [2019-03-04 Mon 17:17]--[2019-03-04 Mon 17:29] =>  0:12
    CLOCK: [2019-03-04 Mon 16:15]--[2019-03-04 Mon 17:16] =>  1:01
    CLOCK: [2019-03-04 Mon 15:55]--[2019-03-04 Mon 16:14] =>  0:19
    CLOCK: [2019-03-04 Mon 15:47]--[2019-03-04 Mon 15:54] =>  0:07
    CLOCK: [2019-03-04 Mon 15:18]--[2019-03-04 Mon 15:46] =>  0:28
    CLOCK: [2019-03-04 Mon 15:02]--[2019-03-04 Mon 15:17] =>  0:15
    CLOCK: [2019-03-04 Mon 14:52]--[2019-03-04 Mon 15:01] =>  0:09
    CLOCK: [2019-03-04 Mon 14:34]--[2019-03-04 Mon 14:51] =>  0:17
    CLOCK: [2019-03-04 Mon 14:19]--[2019-03-04 Mon 14:33] =>  0:14
    CLOCK: [2019-03-04 Mon 11:55]--[2019-03-04 Mon 12:00] =>  0:05
    CLOCK: [2019-03-04 Mon 11:20]--[2019-03-04 Mon 11:54] =>  0:34
    CLOCK: [2019-03-04 Mon 10:53]--[2019-03-04 Mon 11:19] =>  0:26
    CLOCK: [2019-03-04 Mon 10:40]--[2019-03-04 Mon 10:52] =>  0:12
    CLOCK: [2019-03-04 Mon 09:28]--[2019-03-04 Mon 10:39] =>  1:11
    CLOCK: [2019-03-04 Mon 09:00]--[2019-03-04 Mon 09:27] =>  0:27
    CLOCK: [2019-03-04 Mon 07:59]--[2019-03-04 Mon 08:28] =>  1:04
    CLOCK: [2019-03-03 Sun 20:55]--[2019-03-03 Sun 21:04] =>  0:09
    CLOCK: [2019-03-03 Sun 16:08]--[2019-03-03 Sun 18:55] =>  2:47
    CLOCK: [2019-03-03 Sun 15:21]--[2019-03-03 Sun 16:07] =>  0:46
    CLOCK: [2019-03-03 Sun 12:30]--[2019-03-03 Sun 12:46] =>  0:16
    CLOCK: [2019-03-03 Sun 10:11]--[2019-03-03 Sun 10:41] =>  0:30
    CLOCK: [2019-03-03 Sun 09:59]--[2019-03-03 Sun 10:11] =>  0:12
    CLOCK: [2019-03-03 Sun 08:15]--[2019-03-03 Sun 08:23] =>  0:08
    CLOCK: [2019-03-03 Sun 07:23]--[2019-03-03 Sun 08:14] =>  0:51
    CLOCK: [2019-03-02 Sat 19:38]--[2019-03-02 Sat 19:45] =>  0:07
    CLOCK: [2019-03-02 Sat 19:20]--[2019-03-02 Sat 19:37] =>  0:17
    CLOCK: [2019-03-02 Sat 18:56]--[2019-03-02 Sat 19:19] =>  0:23
    CLOCK: [2019-03-01 Fri 17:03]--[2019-03-01 Fri 17:39] =>  0:36
    CLOCK: [2019-03-01 Fri 16:48]--[2019-03-01 Fri 17:02] =>  0:14
    CLOCK: [2019-03-01 Fri 14:55]--[2019-03-01 Fri 16:47] =>  1:52
    CLOCK: [2019-03-01 Fri 14:50]--[2019-03-01 Fri 14:54] =>  0:04
    CLOCK: [2019-03-01 Fri 14:33]--[2019-03-01 Fri 14:49] =>  0:16
    CLOCK: [2019-03-01 Fri 12:39]--[2019-03-01 Fri 14:32] =>  1:53
    CLOCK: [2019-03-01 Fri 11:37]--[2019-03-01 Fri 11:43] =>  0:06
    CLOCK: [2019-03-01 Fri 11:32]--[2019-03-01 Fri 11:36] =>  0:04
    :END:

We need to stop the intermixing between injection and coding
models. We need to load up all of the injection models in one go and
supply them into coding for processing.

Notes:

- add annotations to injection. Read references.
- add logic to read system models into injection.
- add a chain in orchestration that does the new injection workflow
  and passes the model set into coding.
- delete injection related classes in coding.
- remove extensions from references, and then use registered injectors
  to determine the expected extensions.
- rename model generation chain to model production chain. This way we
  avoid confusion with code generation.
- grep for exogenous and endogenous.
- rename =external_model_to_model_transform= to injection.
- create a top-level context that owns all other four contexts. It
  contains the top-level tracer. Then supply the tracer to the other
  contexts. Create a context factory that internally creates the other
  contexts.
- make tracer ioable, then implement all contexts via code
  generation. Ensure tracer does not end tracing on destruction and
  make it copyable. Or maybe make it a boost shared pointer.
- system models should be referenced just like any other model. The
  only difference is that they are sourced from elsewhere. This means
  we can now implement the reference models directory path approach.
- finish the injection clean up, removing all of the injection related
  transforms.
- create a profile expansion transform, performed after the injection
  to coding transform.
- at this point, we are now read to introduce a new transform that
  will sit just before the profile expansion transform and which will
  filter all the meta-elements in the model (such as profiles) and
  pre-process them prior to profile expansion. There will likely be
  some complications related to naming (this transform must be done
  before resolution etc and profiles are a form of name resolution).
- in order to do side-by-side testing, create a new field called
  "references2" and populate it with the new style of references. Then
  create a parallel transform chain that can be switched on and off
  with a macro from orchestration.
- we need to also support models with extensions, just in case users
  decide to supply them. However, this is a bit tricky - sometimes we
  may have false positives, such as for the "dia" models.
- strange dependencies:
  - injection on extraction.
  - tracing on annotations.
  - injection.json on extraction.

*** COMPLETED Model references are not transitive                     :story:
    CLOSED: [2019-03-04 Mon 18:20]

*Rationale*: implemented as part of moving injection processing out of
coding.

For some reason we do not seem to be following references of
referenced models. We should load them automatically, now that they
are part of the meta-data. However, the =yarn.json= model breaks when
we remove the reference to annotation even though it does not use this
model directly and =yarn= is referencing it correctly.

The reason why is that we load up references to all intermediate
models, but then on merge we only take target references. What we
really need to do is to combine the reference containers on merge. For
this we need to create a method that loops through the map and inserts
all keys which have not yet been inserted. Something like "merge
references".

We should address this issue when we introduce two-phase parsing of
models. This is because, as with the new meta-model elements, we also
need to do a first pass across the target and all reference models to
obtain all the paths for all referenced models. We then need to obtain
the unique set of referenced models and load those. To put in this
logic in the code at present (i.e. without a two-phase approach) would
mean we'd have to load the same models several times (or heavily
rewrite existing code, resulting in a two-phase approach, anyway).

*** COMPLETED Create a extraction model post-processing chain         :story:
    CLOSED: [2019-03-05 Tue 09:33]
    :LOGBOOK:
    CLOCK: [2019-03-05 Tue 08:48]--[2019-03-05 Tue 09:35] =>  0:47
    CLOCK: [2019-03-05 Tue 08:38]--[2019-03-05 Tue 08:47] =>  0:09
    :END:

We already have a few transforms that can go into this chain:

- linting
- writing
- diffing

Additional stories are in the backlog.

*** COMPLETED Move coding to generation model transform into orchestration :story:
    CLOSED: [2019-03-05 Tue 10:09]
    :LOGBOOK:
    CLOCK: [2019-03-05 Tue 09:36]--[2019-03-05 Tue 10:09] =>  0:33
    :END:

There is no need to house this in generation.

*** COMPLETED Dogen's vcpkg export for OSX was created from master    :story:
    CLOSED: [2019-03-05 Tue 14:20]

*Rationale*: implemented as part of the DTL work.

Problems:

- we have built it from master instead of masd branch.
- installing libodb et al. from master fails due to a config error. We
  need to check that master has our fix. We need to check that the
  config.h workaround works for OSX as well.
- when building using the masd branch, we can't download ODB from git
  due to a hash mismatch. This may be something to do with the git
  version (2.7).

*** COMPLETED Move top-level transforms into orchestration            :story:
    CLOSED: [2019-03-05 Tue 14:25]

- clear up the existing orchestration model We don't really know what
  its current state is. Keep it as a backup as we may need to go back
  to it.
- copy the top-level chains into orchestration, into a well
  defined namespace (say =dirty=). This must include the model to text
  model and registration. Remove all of these types from coding. At
  this point coding should only depend on injectors.
- try implement interface based I/O instead of reading/writing
  directly from the filesystem.
- first move the model to text model transform into
  =generation.cpp=. This means updating all of the formatters. Also,
  use the external model, deleting all of the text models.

*** COMPLETED Add option for northwind tests                          :story:
    CLOSED: [2019-03-05 Tue 20:04]
    :LOGBOOK:
    CLOCK: [2019-03-05 Tue 19:10]--[2019-03-05 Tue 20:04] =>  0:54
    :END:


At present, when we detect ODB and associated libraries, we build and
run the northwind tests. However, not all build agents have postgres
installed. We need an option that can be used to stop the inclusion of
the northwind tests - or ideally, to build the tests but not run it.

Try also to setup postgres on windows.

*** COMPLETED Update dogen's windows vcpkg export                     :story:
    CLOSED: [2019-03-05 Tue 20:05]

*Rationale*: completed as part of the vcpkg update.

- ensure we built it from masd and not master
- check master builds libodb 2.4
- build libodb 2.5 from masd and re-export.

*** COMPLETED Add DTL to vcpkg                                        :story:
    CLOSED: [2019-03-06 Wed 11:21]
    :LOGBOOK:
    CLOCK: [2019-03-05 Tue 16:39]--[2019-03-05 Tue 18:02] =>  1:23
    CLOCK: [2019-03-05 Tue 13:02]--[2019-03-05 Tue 15:06] =>  2:04
    CLOCK: [2019-03-05 Tue 11:42]--[2019-03-05 Tue 12:26] =>  0:44
    CLOCK: [2019-03-05 Tue 11:01]--[2019-03-05 Tue 11:15] =>  0:14
    CLOCK: [2019-03-05 Tue 10:10]--[2019-03-05 Tue 11:00] =>  0:50
    :END:

dtl seems to be the easiest library to work with in terms of
generating diffs. however, its not on vcpkg.

- add cmake support to dtl. not strictly needed but seems like an easy
  thing to do and will make vcpkg easier. it also means we can build
  tests and examples to make sure it all works in isolation. actually
  this was tried before and not accepted by the maintainer.
- add dtl port.

Notes:

- odb targets: =odb::libodb-sqlite=

links:

- [[https://github.com/google/diff-match-patch/tree/master/cpp][diff-match-patch]]: interesting diff library but requires qt.
- [[https://github.com/martinsos/edlib#usage-and-examples][edlib]]: interesting library but seems to be more for levehnstein
  diffs. also not on vcpkg.
- [[https://github.com/cubicdaiya/dtl/pull/2][add cmake support]]: pr to add cmake support to dtl, not accepted by
  the maintainer. see also [[https://github.com/chino540off/dtl][the repo]].
- [[https://github.com/microsoft/vcpkg/tree/master/ports/libodb][libodb]]: example of a project with a vcpkg specific cmake support.
- [[https://stackoverflow.com/questions/13438547/linux-c-or-c-library-to-diff-and-patch-strings][linux c or c++ library to diff and patch strings?]]

*** COMPLETED Remove coding options                                   :story:
    CLOSED: [2019-03-06 Wed 11:21]
    :LOGBOOK:
    CLOCK: [2019-03-06 Wed 09:51]--[2019-03-06 Wed 11:30] =>  1:39
    CLOCK: [2019-03-06 Wed 09:01]--[2019-03-06 Wed 09:50] =>  0:49
    CLOCK: [2019-03-05 Tue 15:07]--[2019-03-05 Tue 16:38] =>  1:31
    :END:

By now we should have moved away from using most properties in coding
options. We need to get rid of this class because its making the logic
confusing.

- delete unused properties.
- move remaining properties to the context.

In fact this is all one big hack at present. We started off by having
a single context for all activities, but in truth there are different
requirements. For conversion we just need the injection context. We
need to have different make functions in the factory for each use
case. Each function should take in the API configuration itself, plus
any additional (i.e. hacked) parameters.

Notes:

- transform options and formatting repository are not used in coding.

*** STARTED Rename the =transform= method to =apply=                  :story:
    :LOGBOOK:
    CLOCK: [2019-03-04 Mon 18:25]--[2019-03-04 Mon 18:30] =>  0:05
    :END:

Its a bit silly to name classes =x_transform= and then to have their
main method also called =transform=. We should rename these to
something like =apply=.

We should work on this once the system tests are back and running, as
we may break a lot of things with a "simple" tidy-up.

*** STARTED Try to fix valgrind warning on =find_files=               :story:
    :LOGBOOK:
    CLOCK: [2019-02-27 Wed 17:25]--[2019-02-27 Wed 17:45] =>  0:20
    :END:

We seem to be doing something wrong with directory iterators:

: UMC ==7755== Conditional jump or move depends on uninitialised value(s)
: ==7755==    at 0xA0FAFB: (anonymous namespace)::dir_itr_increment(void*&, void*&, std::__cxx11::basic_string, std::allocator >&, boost::filesystem::file_status&, boost::filesystem::file_status&) (operations.cpp:2163)
: ==7755==    by 0xA101B5: boost::filesystem::detail::directory_iterator_increment(boost::filesystem::directory_iterator&, boost::system::error_code*) (operations.cpp:2374)
: ==7755==    by 0xA1002E: boost::filesystem::detail::directory_iterator_construct(boost::filesystem::directory_iterator&, boost::filesystem::path const&, boost::system::error_code*) (operations.cpp:2354)
: ==7755==    by 0x6F2AF6: boost::filesystem::directory_iterator::directory_iterator(boost::filesystem::path const&) (operations.hpp:905)
: ==7755==    by 0x6F2462: boost::filesystem::recursive_directory_iterator::recursive_directory_iterator(boost::filesystem::path const&) (operations.hpp:1174)
: ==7755==    by 0x6F0E15: masd::dogen::utility::filesystem::find_files(boost::filesystem::path const&) (file.cpp:85)
: ==7755==    by 0x6ADB4B: masd::dogen::coding::helpers::mapping_set_repository_factory::obtain_mappings[abi:cxx11](std::vector > const&) const (mapping_set_repository_factory.cpp:66)
: ==7755==    by 0x6AF507: masd::dogen::coding::helpers::mapping_set_repository_factory::make(std::vector > const&) const (mapping_set_repository_factory.cpp:172)

*** STARTED Add basic "diff mode"                                     :story:
    :LOGBOOK:
    CLOCK: [2019-03-07 Thu 12:46]--[2019-03-07 Thu 13:39] =>  0:53
    CLOCK: [2019-03-07 Thu 11:58]--[2019-03-07 Thu 12:04] =>  0:06
    CLOCK: [2019-03-07 Thu 10:37]--[2019-03-07 Thu 11:57] =>  1:20
    CLOCK: [2019-03-07 Thu 09:31]--[2019-03-07 Thu 10:36] =>  1:05
    CLOCK: [2019-03-07 Thu 06:15]--[2019-03-07 Thu 07:34] =>  1:19
    CLOCK: [2019-03-06 Wed 18:46]--[2019-03-06 Wed 19:02] =>  0:16
    CLOCK: [2019-03-06 Wed 18:02]--[2019-03-06 Wed 18:12] =>  0:10
    CLOCK: [2019-03-06 Wed 17:12]--[2019-03-06 Wed 18:01] =>  0:49
    CLOCK: [2019-03-06 Wed 16:11]--[2019-03-06 Wed 17:12] =>  1:01
    CLOCK: [2019-03-06 Wed 15:23]--[2019-03-06 Wed 16:10] =>  0:47
    CLOCK: [2019-03-06 Wed 15:05]--[2019-03-06 Wed 15:22] =>  0:17
    CLOCK: [2019-03-06 Wed 13:02]--[2019-03-06 Wed 15:04] =>  2:02
    CLOCK: [2019-03-06 Wed 12:01]--[2019-03-06 Wed 12:06] =>  0:05
    CLOCK: [2019-03-06 Wed 11:31]--[2019-03-06 Wed 12:00] =>  0:29
    CLOCK: [2019-03-05 Tue 15:07]--[2019-03-05 Tue 15:19] =>  0:12
    CLOCK: [2019-03-05 Tue 11:16]--[2019-03-05 Tue 11:41] =>  0:25
    CLOCK: [2019-03-05 Tue 07:52]--[2019-03-05 Tue 08:38] =>  0:46
    :END:

We need a very simple way of checking all generated files in memory
against what's in the file system and returning a flag if they are
different. We can then use these flags to determine if tests pass. In
the future we can extend this approach to include a proper diff of the
files, but for now we just need a reliable way to run system tests
again.

Actually the right solution for this is to see the processing as part
of a chain:

- out of the generator come a set of artefacts with operations (write,
  merge, ignore)
- these get joined with a transform that reads the state of the file
  system. It then adds more operations: delete, etc. If there are no
  diffs, it marks those files as skip.
- the final step is a processor which gets that model and executes the
  operations. This can then be replaced by a "reporter" that simply
  states what the operations would be.

Diff mode is using the report to see if there are any diffs.

Notes:

- before we can check in we need a find DTL cmake script. done.
- it seems there is no use case for having both a diff and also
  writing files. So we should just rename diffing to dry-run. When
  enabled, it disables writing.
- we need to have the brief diffs on a diff report rather than on the
  patch. We need a separate transfrom to make the report.
- check default diff style
- add newly_generated to diff
- stitch workflow is still using artefact writer.

Merged Stories:

*Validation-only or dry-run mode*

Both stitcher and knitter could do with a "dry-run" mode in which we'd
do everything except for actually outputting.

*For Knitter*

It would be nice if one could just check if a dia diagram is valid for
code generation, e.g. =--validate= or something along those lines.

*For Stitch*

We are interested in performing the parsing. This would be useful for
example for a flymake mode in emacs.

An additional feature of dry-run would be to run, generate the model
and then produce a unified diff, e.g. tell me what you'd change. For
this we'd have to link against a diff library. We need to
automatically exclude non-overwrite files (or have an option to
exclude/include them).

Links:

- [[https://github.com/google/diff-match-patch/tree/master/cpp][google Diff Match Patch library]]
- [[https://github.com/cubicdaiya/dtl][DTL: Diff Template Library]]
- [[https://stackoverflow.com/questions/1451694/is-there-a-way-to-diff-files-from-c][SO: Is there a way to diff files from C++?]]

*Dry-run option to just diff with existing generated code*

#+begin_quote
*Story*: As a dogen user, I want to know what has changed with the
next code generation so that I can evaluate if the changes are as
expected or not.
#+end_quote

It would be useful to have an option that would do everything except
writing the files to disk; instead, it would diff them with the
existing files and report if there are any differences. This would be
useful to make sure the source code matches the latest version of the
diagram.

We could use something like the [[https://code.google.com/p/dtl-cpp/wiki/Tutorial][DTL library]].

*** STARTED Fix northwind tests on OSX and Windows                    :story:
    :LOGBOOK:
    CLOCK: [2019-03-06 Wed 12:07]--[2019-03-06 Wed 12:11] =>  0:04
    CLOCK: [2019-03-06 Wed 08:00]--[2019-03-06 Wed 09:00] =>  1:00
    :END:

Get the tests to compile and run on windows. At present they are
failing to link. It seems there is some kind of mismatch between debug
and release, at least on MSVC.

Building with linking errors is available [[https://ci.appveyor.com/project/mcraveiro/cpp-ref-impl/builds/22859591][here]]. For now we've disabled
postgres:

: diff --git a/.appveyor.yml b/.appveyor.yml
: index 3f9fc6e..c265e24 100644
: --- a/.appveyor.yml
: +++ b/.appveyor.yml
: @@ -41,7 +41,6 @@ services:
:  before_build:
:    - SET PGUSER=postgres
:    - SET PGPASSWORD=Password12!
: -  - SET POSTGRES_SERVER_SETUP=1
:    - psql -f %APPVEYOR_BUILD_FOLDER%\build\scripts\setup_postgres.sql -U postgres
:    - if DEFINED msvc_setup_path call "%msvc_setup_path%" %msvc_setup_arg%
:    - cd %APPVEYOR_BUILD_FOLDER%

At present we are building northwind on all platforms, but the tests
are being excluded on OSX and windows, so we are not really testing
the linking, just the compilation. One of the problems is that we
conflated the running of the tests (for which we need a postgres
server) with the building of the tests (which we should always do
whenever we find all the required dependencies). However, it seems a
bit silly yo have to have two flags for this.

*** STARTED Update metrics in OpenHub                                 :story:
    :LOGBOOK:
    CLOCK: [2019-03-07 Thu 12:05]--[2019-03-07 Thu 12:18] =>  0:13
    :END:

For some reason our metrics are stuck at 5 months ago or so. It is
actually mildly useful to know the number of lines of code etc.

*** Fabric generates forward decls with no path                       :story:

The following looks strange:

: 2019-03-06 17:30:20.074618 [DEBUG] [quit.cpp.formatters.workflow] Procesing element: <dogen><hello_world><transformation_error>
: 2019-03-06 17:30:20.074627 [DEBUG] [quit.cpp.formatters.workflow] Meta name: <dogen><generation><cpp><fabric><forward_declarations>
: 2019-03-06 17:30:20.074636 [DEBUG] [quit.cpp.formatters.workflow] Using the stock formatter: masd.extraction.cpp.serialization.forward_declarations
: 2019-03-06 17:30:20.074647 [DEBUG] [generation.cpp.formatters.assistant] Processing element: <dogen><hello_world><transformation_error> for archetype: masd.extraction.cpp.serialization.forward_declarations
: 2019-03-06 17:30:20.074659 [DEBUG] [quit.cpp.formatters.workflow] Formatted artefact. Path: ""

*** Rename =transformation_error= to =transform_exception=            :story:

In keeping with the framework guidelines for naming exceptions.

*** Consider replacing the associations against object templates      :story:

Object templates are really a higher level concept when compared to
objects, etc. We should not be using associations to denote the notion
of an object instantiating an object template. Perhaps the "implements
an interface" relationship is more appropriate. Check the UML books.

*** ODB linking is incorrect for generated code                       :story:

At present we are adding the libraries in the test instead of the
model using ODB. The following should be part of the generated code:

:    ${Boost_LIBRARIES}
:    ${ODB_PGSQL_LIBRARIES}
:    ${ODB_SQLITE_LIBRARIES}
:    ${ODB_BOOST_LIBRARIES}
:    ${ODB_LIBODB_LIBRARIES}
:    ${PostgreSQL_LIBRARIES}
:    ${OPENSSL_LIBRARIES}
:    resolv
:    ${SQLite3_LIBRARY}

The same problem applies to boost linking.

*** Move all formatters in extraction to generation                   :story:

Since we only need these during generation, seems like the more
logical place. This should be done when (after) we move all of the
meta-elements that live in formatter into coding.

*** Rework the system tests using diff mode                           :story:

Once we have diff mode, we need to find some kind of workflow for
tests:

- each product is composed of a git URL and a list of models.
- we git clone all repos as part of the build process.
- directories and model locations are hard-coded in each test.
- test runs against the model and hard-coded location, produces the
  diff. Test asserts of the diff being non-zero.

*** Code generation of tests for dogen models                         :story:

We probably already have a story for this. At present we are manually
generating tests for each model (serialisation, etc). The structure of
the tests is very predictable. In a world where tests are a facet, we
could have some options to control the generation of tests. This would
also allow end users to generate tests for their models and report the
results. We would need to generate the utility model for this - or
perhaps we could code generate tests in a way that no longer requires
templates - its all "hard-coded". This would make the tests easier to
follow, but we would generate a lot of code.

We could separate dogen specific tests from user tests by naming them
differently, e.g. =abc_dogen_test.cpp=. We can then create two
different test binaries, one for dogen tests and another for user
tests, so that users don't have to run dogen tests unless something
has gone wrong.

Interestingly we could even set rules to ignore tests that are known
to fail:

- if object has no members do not do equality tests
- if object has some kind of recursion do not do tests
- etc.

These can be marked as known limitations. At present the tests require
Boost.Test but it should be possible to target other frameworks
(meta-data option).

Merged stories:

*Consider creating a "test" facet*

Whilst we can't really generate tests, we can at least create the
stubs for them. For this we could have a =test= facet that uses a
stereotype, e.g. =test_suite=. Users mark classes with
these. Attributes are the test cases. At the model level users can
choose the test framework. For example for Boost.Test, it generates
the main file with fixture initialisation, etc. We could then have one
of two approaches:

- protected regions, where the test contents are protected and perhaps
  an area at the top for globals etc.
- stubs only, were we generate the original content but then users
  subsequently manage the files.

*** Add warning for unused references                                 :story:

It would be nice if we could figure out if the user has added some
references to a model that are not required. This could be done as a
byproduct of resolution. However, we need to be careful when we
introduce two-passes as we may use a model for say profiles or
concepts but nothing else. One way of addressing this is to have a
container of "used references"; whenever we find a type from a
reference, we add that reference to the list. In the end we diff that
container against the global refs.

*** Generate model dependency graph                                   :story:

It would be nice to generate a tracing of the model dependencies. This
may not necessarily be part of tracing.

*** LAM name resolution should be PIM only                            :story:

With the current approach, we are not resolving any names until after
we've mapped LAM models into a PSM. This possibly means that users can
provide a model with non-LAM types. Ideally we should not allow
this. Check to see if we are validating this in the present mapping
code.

*** Add logging to console again                                      :story:

We removed logging to console because we didn't have any use cases,
but there is at least one and its really useful: debugging. Add it
back again.

*** Rename =fallback_element_type=                                    :story:

Our JSON uses a very strangely named attribute to carry the meta-type:

:       "fallback_element_type": "masd::object",

Its not at all obvious what this is meant to do. It should just be the
=element_type=.

We introduced this because users can set the stereotype,
e.g. =masd::object= - but don't always have to (e.g. when converting a
model from Dia). In this case, the fallback element type is
used. Perhaps we can keep the "fallback" logic internally, but just
call it element type?

*** Adding reference to itself results in resolution errors           :story:

Whilst trying to fix the JSON models we inadvertently added a
self-reference in =dogen.generation.json=:

:    "yarn.reference": "dogen.generation.json",

This resulted in some puzzling errors:

: 2018-10-18 19:15:00.861210 [ERROR] [yarn.transforms.enablement_transform] Duplicate element archetype: quilt.cpp.serialization.registrar_implementation <dogen><generation><registrar>

Ideally we should either warn and ignore or fail to process models
with self-references.

*** Add model sources and sinks in Dogen                              :story:

At present we are reading and writing to files inside the
workflows. This means that if we want to use databases in the future
we will have to update the entire code base to cope with this. A
better approach is to perform IO via some interface, which can be
implemented to target either the filesystem or a database, cache, etc.

Notes:

- add workflow that takes in a string, path, etc and creates a model
  set. It will need to read references and language from the model
  annotations.
- add model source into injection
- add model set into injection, with target and references
- add model set into coding.
- add a new model: coding.injection. Create a class that converts from
  one model set to another.

*** Consider renaming log level =trace=                               :story:

Its slightly confusing given that we also have =tracing=.

*** Consider making =disabled= a trace/log level                      :story:

At present we have two knobs to control tracing/logging:

- enabled
- level

According to the rule of making invalid states unrepresentable, we
should just have a log level of disabled, so that its not possible to
set the trace/log level when logging is disabled.

*** Throw on profiles that refer to invalid fields                    :story:

At present during profile instantiation, if we detect a field which
does not exist we skip the profile. This was done in the past because
we had different binaries for stitch, knit etc, which meant that we
could either split profiles by application or skip errors
silently. Now we have a single binary, we could enable this
validation. However, the stitch tests still rely on this
behaviour. The right solution for this is to have some kind of
override flag ("compatibility mode" springs to mind) which is off by
default but can be used (judiciously).

We put a fix in but it seems weave is still borked. The problem
appears to be that we do something in the generation path that is not
done for weaving (and presumably for conversion). The hack was put
back in for now.

*** Fix clang-cl warnings                                             :story:

We also have a number of warnings left to clean up, all related to
boost.log:

: masd.dogen.utility.lib(lifecycle_manager.cpp.obj) : warning LNK4217: locally defined symbol
: ?get_tss_data@detail@boost@@YAPEAXPEBX@Z (void * __cdecl boost::detail::get_tss_data(void const *))
: imported in function "public: struct boost::log::v2s_mt_nt6::sinks::basic_formatting_sink_frontend<char>::formatting_context * __cdecl boost::thread_specific_ptr<struct boost::log::v2s_mt_nt6::sinks::basic_formatting_sink_frontend<char>::formatting_context>::get(void)const " (?get@?$thread_specific_ptr@Uformatting_context@?$basic_formatting_sink_frontend@D@sinks@v2s_mt_nt6@log@boost@@@boost@@QEBAPEAUformatting_context@?$basic_formatting_sink_frontend@D@sinks@v2s_mt_nt6@log@2@XZ)

Notes:

- opened issue: [[https://github.com/Microsoft/vcpkg/issues/5336][Building with clang-cl on windows generates warnings
  from vcpkg-installed libraries]]
- it seems that the log files show a lot more warnings than those
  reported by cdash,
- Updated issue on CDash parsing problems for clang-cl: [[https://github.com/Kitware/CDash/issues/733][Parsing of
  errors and warnings from clang-cl]]
- Sent email to clang mailinglist: [[http://lists.llvm.org/pipermail/cfe-dev/2019-February/061326.html][Clang-cl - errors and warning
  messages slightly different from MSVC]]. Clang [[http://lists.llvm.org/pipermail/cfe-dev/2019-February/061339.html][have patched]] the diffs
  now.

*** Implement configuration validator                                 :story:

At present we are not performing any validation to the new
configuration classes in the API.

*** Create transforms for templating                                  :story:

At present we are using workflows to convert stitch and wale
templates. In reality, these are just tranforms. We need to figure out
if there should just be a high-level transform in orchestrator that
encapsulates these or if the templating model itself should follow the
naming convention.

*** Add support for "directory mode" in conversion                    :story:

The real use case we have for conversion is to point it to a directory
with models and give it a destination "type" (e.g. json) and a output
directory, and then have it convert all models to that type and place
them in the output directory.

A second but related use case is to point it to a model, supply a
destination "type" and then output it into a directory, without having
to supply a destination file.

In effect, this is a common use case for all commands (generate and
weaving as well). We could probably deduce it: if the user supplied a
directory as a target, we should do it in directory mode.

Merged stories:

*Drop the original extension in tailor*

Filenames in tailor look weird:

: dart.dia.json

it should just be:

: dart.json

Actually this is not a tailor / converter problem per se - its just
that CMake is supplying the entire file name with extension to dogen
as the destination. However, due to restrictions on how =NAME_WE=
works for multiple extensions, it is non-trivial to sort this
problem. In addition, because we want to read models from the dia
directory and write them into the JSON directory, we can't just simply
change dogen to update the extension itself. We need some hackery in
CMake to process extensions properly like by dropping the last N
characters of the filename or some such.

*** Add stereotype for IoC containers                                 :story:

At present we are marking IoC containers with either handcrafted or
header only. In reality, they should have their own stereotype and
colours as, in the future, we want to code generate them. However, we
can only do this once we get rid of the initialisers because they are
also a form of IoC containers, but with different requirements.

Proposed stereotype: =masd::ioc::container=.

Actually, this is not quite right. We are not creating the IoC
containers themselves, but the wiring code that sets up these
containers. We need to figure out the correct term for
these. Suggestions:

- [[https://github.com/avao/Qart/blob/master/Src/Qart.CyberTester/Bootstrapper.cs][bootstrapper]], with a =Bootstrapper.CreateContainer= method;
  e.g. =masd::ioc::bootstrapper=.

*** Handling of forward declarations on generated types               :story:

At present, if we disable forward declarations globally (in a profile,
say), the code fails to build with errors on visitors. This is because
we need forward declarations for:

- the visitable type;
- all of its descendants;
- the visitor.

This is a hard requirement because, without these the code does not
make sense. We need some way of "forcing" enablement for some features
where there is such a hard dependency. This is probably something we
need to look at when we implement "computable enablement". We then
need some way of telling the system about these dependencies:
e.g. visitor requires enablement x, y, z.

A second problem is that, at present, there is no way to manually
enable (force) forward declarations on visitors. We can enable them on
all model elements but not on the generated type. Because of this we
are generating forward declarations for all types, for no reason.

*** Disable global hashing on coding                                  :story:

We are generating hash for all types at present in coding but we only
need it for two types: name and location. Try to switch it off
globally and on just for those two types.

*** Stitch does not have a force write flag                           :story:

At present the stitch workflow is hardcoded not to force write. The
correct solution is to allow the template to have a force write
parameter.

*** Contents change check is done twice                               :story:

We seem to check twice if a file has changed:

: 2015-04-26 12:37:28.451464 [DEBUG] [formatters.filesystem_writer] File contents have not changed, and force write is false so not writing.
: 2015-04-26 12:37:28.451486 [DEBUG] [formatters.filesystem_writer] File contents have not changed, and force write is false so not writing.

This is in stitch but it should be the same for knit.

*** Convert utility exceptions into dogen exceptions                  :story:

At present the utility model has a number of hand-crafted
exceptions. We need to convert them to dogen exceptions. We also need
to get rid of the invalid enum exception and use the
=std::argument...= exception instead.

*** JSON models in dogen are out of sync                              :story:

Problems:

- tailor generation results in files with the wrong name (=dia.json=)
- input models were copied into test data.

*** Move generation element properties back into formattables         :story:

We moved a number of properties out of formattables. Move them
back. By the end of this refactor we should end up with no references
to facets in coding.

*** Move fabric types into generation                                 :story:

- copy across the fabric types from cpp and csharp into generation.
- update formatters to use the types from generation.
- delete them from original models.

*** Move formattables into generation                                 :story:

- first, update the generation model with formattable properties from
  cpp: add a formattable type to the generation model and container
  for it, add the formattable population logic. Then remove the
  formattable logic from cpp.
- repeat the exercise with csharp. We should end up with two new
  namespaces in generation handling the fabric meta-types and their
  processing.
- by the end of this refactor, cpp and csharp should contain only the
  formatters.

*** Create =generation.extraction= model                              :story:

- rename =generation.cpp= to =generation.extraction=.
- rename =formatters= namespace to =cpp=.
- ensure the logic for processing one tech space will work for
  multiple tech spaces. For example, we could move the existing
  workflow into the =cpp= namespace and register the text generation
  chain from there.
- repeat the exercise with the csharp model.
- by the end of this refactor we should end up with a single
  =generation.extraction= containing both the csharp and cpp
  formatters.
- consider renaming formatters to model to text transforms.

*** Inheriting from oneself causes segfault                           :story:

If you set an object to inherit from itself, say via metadata:

: #DOGEN masd.generalization.parent=in_memory_weaver

Dogen segfaults due to recursion. We need to test this via UML
inheritance as well.

*** Implement the new dogen product API                               :story:

Now the API has been designed and generated, we need to implement it.

*** Fix cmake emacs variable for tab width                            :story:

We need to replace uses of =tab-width= in cmake files with
=cmake-tab-width=, as explained here:

[[http://stackoverflow.com/questions/25751408/controlling-the-indent-offset-for-cmake-in-emacs][Controlling the indent/offset for CMake in emacs]]

We need to do this for both code generated and manually generated
files.

*** Fix =cp= error on cmake with local third-party packages           :story:

We are getting strange errors in cmake:

: cp: cannot stat ‘/usr/lib/i386-linux-gnu/libpthread.so.1.54.0’: No such file or directory

*** Assorted improvements to CMake files                               :epic:

It seems we are not using proper CMake idioms to pick up compiler
features, as explained here:

- [[http://unclejimbo.github.io/2018/06/08/Modern-CMake-for-Library-Developers/][Modern CMake for Library Developers]]
- [[http://www.slideshare.net/DanielPfeifer1/cmake-48475415][CMake - Introduction and best practices]]
- [[https://datascience.lanl.gov/data/151208-LANL-Hoffman-Science.pdf][Building Science with CMake]]
- [[http://voices.canonical.com/jussi.pakkanen/2013/03/26/a-list-of-common-cmake-antipatterns/][A list of common CMake antipatterns]]
- [[https://rix0r.nl/blog/2015/08/13/cmake-guide/][The Ultimate Guide to Modern CMake]]
- [[https://github.com/crezefire/cxp][CXP: C++ Cross Platform]]: A template project for creating a cross
  platform C++ CMake project using modern CMake syntax and transitive
  dependencies.

We need to implement this using proper CMake idioms.

Notes:

- Add version and language to project.
- start using [[https://cmake.org/cmake/help/v3.3/command/target_compile_options.html][target compile options]] for each target. We will have to
  repeat the same flags; this could be avoided by passing in a
  variable. See also [[http://stackoverflow.com/questions/23995019/what-is-the-modern-method-for-setting-general-compile-flags-in-cmake][What is the modern method for setting general
  compile flags in CMake?]]
- define qualified aliases for all libraries, including nested
  aliasing for =dogen::test_models=. Ensure all linking is done
  against qualified names.
- use target include directories for each target and only add the
  required include directories to each target. Mark them with the
  appropriate visibility, including using =interface=. We should then
  remove all duplication of libraries in the specs.
- try replacing calls to =-std=c++-14= with compiler feature
  detection. We need to create a list of all C++-14 features we're
  using.
- remove all of the debug/release compilation options and start using
  =CMAKE_BUILD_TYPE= instead. See [[http://pastebin.com/jCDW5Aa9][this]] example. We added build type
  support to our builds, but as a result, the binaries moved from
  =stage/bin= to =bin=. There is no obvious explanation for this.
- remove =STATIC= on all libraries and let users specify which linkage
  to use. We already have a story to capture this work.
- remove the stage folder and use the traditional CMake
  directories. This will also fix the problems we have with
  BUILD_TYPE.
- consider buying the CMake book: https://crascit.com/professional-cmake/.

Merged stories:

*Usage of external module path in cmakelists*                       :story:

It seems like we are not populating the target names
properly. Originally the target name for test model all built-ins was:

: dogen_all_builtins

When we moved the test models into =test_models= the target name did
not change. It should have changed to:

: dogen_test_models_all_builtins

*** Support for cmake components and groups                           :story:

#+begin_quote
*Story*: As a dogen user, I need to integrate the generated models
with my existing packaging code.
#+end_quote

We recently added support for creating multiple packages from a single
source tree. We need generated models to have a new top-level cmake file:

: add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)
: add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)
:
: install(
:     DIRECTORY include/
:     DESTINATION include
:     COMPONENT headers
:     FILES_MATCHING PATTERN "*.hpp")

And the =src= cmake file:

: install(TARGETS dia ARCHIVE DESTINATION lib COMPONENT libraries)

*** Mop-up nested namespaces using legacy syntax                      :story:

It seems we still have a number of places in the templates where we
are using the legacy nested namespaces. Its probably only in
serialisation, given that's the only place where we've hard-coded the
namespaces and they are more than one level deep (we have a lot of
=std= but that's not affected):

: namespace boost {
: namespace serialization {

We need to wrap these in if's for C++ 17 and add nested namespaces.

*** Add tests for external and model modules                          :story:

At present we do not have tests exercising different combinations of
external and model modules.

Tests:

- 0-3 levels of external modules
- 1-3 levels of model modules

*** Rewrite name resolution in terms of lists                         :story:

Even since we did the external modules / model modules change we broke
code generation; this is because we do not go up the model modules
during name resolution. We did a quick hack to fix this but it needs
to be done properly.

Let's walk through a simple example:. Name cames in as:

- model module: =probing=
- simple: =prober=

We are in model:

- model module: =dogen.external=

Expected behaviour is to try all combinations of model modules:

- =dogen.external.probing=
- =dogen.probing
- =probing=

This highlights a fundamental problem with resolution: we view the
{external, model, internal} modules as if they are separate entities
but in reality, for the purposes of resolution, there is only one
thing that is relevant: the module path. If it matches because of
{external, model, internal} modules, well that is not relevant to
resolution. Other users of =name= do need to know this information
(for example to generate directories or file names) but not the
resolver.

Interestingly, because we are only looking for an id, it doesn't
really matter how we get to it (in terms of the internal composition
of the name), as long as it matches bitwise. This means we can look at
the process slightly differently:

- start off with the name as the user provided it. Extract all strings
  from it to create a list, in order: external, model, internal,
  simple. Try to resolve that. Call it user list.
- then create a second list from model / context: external, model,
  internal. Call it model list.
- try concantenating model list and user list, pretty printing and
  resolving it. If it fails, pop model list and concatenate again. Try
  until model list is empty.

Tasks:

- first add a quick hack just to get the code generator working
  again. For example, take the first model module of the model and try
  resolving with that. Then worry about fixing this properly.
- split the conversion of name into list from pretty printer. Printer
  should merely take a string or list of strings and do its thing. We
  need to find a good location for this method, since (for now) we
  cannot place it in the right location which is the name class
  itself.
- change resolver to obtain the lists as per above. The to list
  machinery can be used for this, though we need to handle model names
  somehow. We can copy the =model_name_mode= logic from printer.
- drop all of the logic in resolver at present and use the list logic
  as per above. Do not check references, etc.

Notes:

- there are a few useful functions here:
  - subtraction: given a base list, subtract another list. Fro
    example, given =masd::dogen::annotations::annotation=, subtract
    =masd::dogen::annotations=. This is useful when determining the
    right qualification inside a class.
  - addition: concatenate a list with another.
  - combination: given a base list, create all possible permutations
    for a second list. For example: =masd::dogen::annotations= and
    =some::type=, we want =masd::dogen::annotations::some::type=,
    =masd::dogen::some::type=, =masd::some::type=, =some::type=. We
    are iterating upwards the first list.
  - make id: given a list, generate an ID. This was we don't even need
    to go though the whole "name building" exercise, we simply go from
    lists into ID's and check the containers.
- we probably should introduce a type for this: =flat_location=?
  something that can be converted from a =location= (but not the
  opposite) and has the properties defined above. Or we could have a
  "location flattener" that performs these actions, but this is less
  clean as we now need a few of these helpers.
- there are two fundamental concepts: a path (which is what we call a
  location) and an address (which is what we call an ID). Path implies
  an hierarchical space, which is what modeling and generation space
  are. Address is flat and unique. There is a function to go from
  paths to addresses but not vice-versa. Given two paths we can
  generate all possible addresses by performing a "climb" in the
  hierarchical space.
- we could make addresses URIs, and preserve almost all of the
  information: =masd://some.model.name/a/b.c=. The problem is we
  cannot tell the difference between model modules and external
  modules. However, we could simplify this and say model modules and
  external modules are all the same thing; users can choose to express
  external modules as part of the file name or not. (e.g. "express
  full path" or some such flag). We can also choose to express
  external modules as directories or as a dotted path. URIs may not be
  the best of ideas because models exist in contexts (workspaces,
  servers, users) rather than in one universal space. However, we
  could use URLs as a way to identify resources once we clear up the
  REST story.

*** Default model modules from filename                               :story:

It would be nice to be able to not have to supply model modules when
its obvious from the filename.

*** Nested external model path results in strange references          :story:

Note: we have probably already implemented a solution for this, need
to check the resolver.

The external model path does not contribute to path resolution in a
model. Up til now that has actually been a feature; it would have been
annoying to have to dype =dogen::= on every type for every
model. Instead, we refer to say =dogen::a::b= as simply =a::b= in all
models that use =a=. However this masks a deeper problem: this is not
the desired behaviour at all times. We saw this problem when we
created multiple models under dynamic: =dynamic::schema= and
=dynamic::expansion=. In this case, users of these models referred to
them as =schema= and =expansion= respectively, and this was not
ideal. In general:

- external module path should contribute to references just like
  internal module path does - there should be no difference;
- dogen should be clever enough to determine if two models share a
  top-level namespace (regardless if it was obtained from the external
  or internal module path) that there is no need to have an absolute
  path. So in the case of =dogen=, since every model has =dogen= as
  their external module path, according to this rule we should not
  have to type it.

*** Remove hello world model                                          :story:

It is confusing to have it mixed up with product models. Use a regular
dogen model to test the package. We could have it on the reference
model as a stand alone example, or we could create a "hello dogen"
product for a trivial example of dogen usage.

*** Move from doxygen to standardese                                  :story:

We should try to use standardese to generate the documentation for
dogen. Seems easier to use and CMake friendly. Also, it seems more c++
compliant because it uses libclang.

Once the move is done, we should update dogen to generate comments in
either markup via a meta-data parameter (documentation markup?).

Links:

- https://github.com/foonathan/standardese

*** New approach to model testing                                    :story:

In the beginning we generated all models with all facets, even the
dogen core models. The idea was to test the generator even though
these facets were not useful for the product. This was really useful
because the dogen models are much more realistic than the test models
and due to this we picked up a number of bugs. However, we have now
hit the maximum build times on travis and we need to start removing
all ballast. This will mean we lose these valuable tests. The
alternative is to create these tests on the fly:

- create a new override flag that forces all facets to be emitted.
- create a new test facet with templates that are dependent on the
  enabled facets; each test tests the dependent facet.
- create a ctest nightly build that generates code using these new
  facets, compiles it and runs all tests.
- we need some meta-data to "ignore" some modeling elements for
  certain facets such as composition which are known to be broken. Or
  maybe we should just leave the tests as red so we know.
- the tests should be designed not to use templates etc to make the
  debug dumps really obvious (unlike the existing tests). It may even
  make more sense to test each type individually so that when the test
  fails its really obvious:

: MY_TYPE_serialisation_roundtrips_correctly

  this way when we look at CDash we know exactly which types failed to
  serialise.

During the transition phase, we will remove all of the existing tests.

*** Add support for multiple profile binds per modeling element       :story:

At present we can only bind an element to one profile. The reason why
is because we've already expanded the profile graphs into a flat
annotation and if we were to apply two of these expanded annotations
with common parents, the second application would overwrite the
first. Of course, we bumped into the exact same problem when doing
profile inheritance; there it was solved by ensuring each parent
profile is applied only once for each graph.

One possible solution for this problem is to consider each model
element as a "dynamic profile" (for want of a better name; on the fly
profile?). We would create a profile which is named after each of the
profiles it includes, e.g. say we include =dogen::hashable= and
=dogen::pretty_printable= for model element e0. Then the "on the fly
profile" would be:

: dogen::hashable_dogen::pretty_printable

It would be generated by the profiler, with parents =dogen::hashable=
and =dogen::pretty_printable=, and cached so that if anyone shows up
with that same profile we can reuse it. Because of the additive nature
of profile graphs this would have the desired result. Actually we
could probably have a two pass-process; first identify all of the
required dynamic profiles and generate them; then process them. This
way we can rely on a const data structure.

This will all be made easier when we have a two-pass pipeline because
we can do the profile processing on the first pass, and we can even
generate the "dynamic profiles" as real meta-model elements, created
on the fly.

*** Facet enablement and model references is buggy                    :story:

 At present we are processing enablement as part of the
 post-processing. This means that we are using the target model's
 annotation profile in order to determine the facet enablement. This
 can cause problems as follows: say we enable hashing on a model via
 the model profile of M0. We then consume that model as a reference and
 disable hashing on M1. When processing types from M0 for M1 we will
 disable hashing for them as well. Thus, no includes for hashing will
 be generated even if a hash map is used.

 Actually this is not quite right. We are expanding annotations at the
 external model transform level; this means the enablement on the
 reference must be correct. However, somehow we seem to be looking at
 the element on the target model when deciding to include the hash
 file from reference model.

*** Consider creating a test build for all facets                     :story:

In the past we had enabled a lot of facets on the dogen models to
serve as part of the testing infrastructure. However, its no longer
feasible to do this because the build is taking too long. However, the
reference models just can't capture all of the complexity of a
codebase like dogen's so we lost some testability with this move. What
would be really nice is if we could create "test builds":

- given a set of test models, copy them somewhere, generate a product
  configuration with some kind of override that enables all facets
  everywhere. some will just not come through like ORM.
- build the product. all handcrafted code is now blank but all facets
  are coming though.
- this could be part of the ctest script, as a "mode" - product
  generation test. Every time there is a commit to a product the build
  kicks in.

Notes:

- one way to achieve this would be to force the profile of the
  model. However, we are moving away from profiles, and in the future
  there will be a list of stereotypes associated with the model. Then
  it will be much harder to figure out what stereotypes do what and to
  overwrite them.
- an alternative would be to have some kind of "test mode"; when
  handling enablement, we'd check the "mode". If we're in test mode,
  we simply enable all and ignore any other settings. We could have a
  "force enable" flag or some such like we do for
  overwriting. However, we may then hit another problem: enabling all
  facets may result in non-buildable models:
  - facets may be incompatible. This is not a problem at present.
  - handcrafted classes may result in code that does not
    compile. Shouldn't though because we are still checking the status
    of the attributes.
- the key thing though is the overall build time must be below the
  threshold. Maybe we can have this on a nightly, running on our own
  hardware.

Conclusions:

- create a new flag: =force-enablement=. When set to true, we ignore
  all enablement settings and generate all facets. We do not generate
  all kernels though (e.g. the kernel must be on in the model).
- create a script that copies the models to a new product and
  generates them with fore-enablement. This will only work when we can
  generate products.
- as facets are enabled, tests are automatically generated for them.
- build the result and run all tests.

*** Create some basic naming guidelines                               :story:

As per Framework Design Guidelines, we need some basic guidelines for
naming in Dogen. We don't need to go overboard, we just need something
to get us started and evolve it as we go along.

Links:

- [[https://isocpp.org/wiki/faq/coding-standards][C++ Coding Standards]]
- [[http://wiki.c2.com/?CapitalizationRules][Capitalization Rules]]
- [[https://en.wikipedia.org/wiki/Snake_case][Snake Case]]
- [[http://cs.smu.ca/~porter/csc/ref/stl/naming_conventions.html][Naming Conventions for these STL Reference Pages]]
- [[https://style-guides.readthedocs.io/en/latest/cpp.html][C++ coding style guide]]
- [[https://stxxl.org/tags/1.4.1/coding_style.html][Coding Style Guidelines]]
- [[https://www.fluentcpp.com/2018/04/24/following-conventions-stl/][Make Your Containers Follow the Conventions of the STL]]

*** Consider generating program options code                          :story:

If there was a syntax to describe boost program options, we should be
able to generate most of the code for it:

- the code that initialises the options;
- the domain objects that will store the options;
- the copying of values from program options objects into domain
  objects.

This would mean that creating a command line tool would be a matter of
just supplying an options file. We could then have a stereotype for
this (name to be yet identified). Marking a type with this stereotype
and supplying the appropriate meta-data so one could locate the
options file would cause dogen to emit the program options binding
code.

A similar concept seems to exist for python: [[http://docopt.org/][docopt]]. We should keep
the same syntax. We just need to have a well defined domain object for
these. The aim would be to replace config.

For models such as these, the dia representation is just overhead. It
would be great if we could do it using just JSON.

Actually even better would be if we could have a text file in docopt
format and parse it and then use it to generate the code described
above.

Actually maybe we are just making this too complicated. We probably
just need some very trivial meta-data extensions that express the
required concept:

- create a yarn element to model this new meta-class. We basically
  need to model the structure of program options with option groups
  and options.
- define a stereotype for the new yarn elements, say
  =CommandLineOptionGroup=.
- for types facet we simply generate the regular c++ code. But in
  addition, we also generate a new facet that: a) injects the
  propertties into boost program options b) instantiates the c++
  objects from boost program options.
- this means that instead of creating a new meta-type, we need to
  augment =yarn::object= with command line options stuff.

Notes:

- create stereotypes for options group, options; allow users to define
  members of type options in options group. Or should the options just
  be member variables? In which case we could have
  =command_line::options= as the stereotype.
- generate the options classes.
- inject a hand-crafted validator or consider generating the validator
  given the meta-data supplied by the user (mandatory, at most X
  times, etc).
- generate an options builder that takes on the building
  responsibilities from the parser.
- generate a parser that hooks the builder and copies data from the
  options map into the options.
- allow users to supply the help text and the version text as
  parameters; these should probably be done in a similar way to what
  we do with the modeline etc.
- allow users to set default values in the options attributes and set
  them in generated code. This is probably just adding default value
  support to dogen, for which we have a separate story.
- one very useful way in which to use program options is via
  projections. That is a given model M0 defines the configuration and
  a second model M1 defines the options parsing. In this case the
  options defined in M0 already has the required shape:
  - there is a top-level class housing all options, traditionally
    called "configuration";
  - the top-level class contains meta-data with the product blurb;
  - attributes of that class can be annotated as "modes", "groups" or
    nothing. A mode will result in a modal CLI interface. Groups
    result in top-level groupings of options. Nothing means the
    attribute must be of a simple type and will be a global option
    (e.g. =help=, =version=, etc).
  - attributes have a description, etc associated as meta-data. They
    also have other useful annotations such as optional, mandatory
    etc. These are used in validation. Interestingly this may mean we
    can also automatically generate a validator.
  - dogen generates in M1 a set of chained program option parsers
    (assuming a modal interface; otherwise just one) which generate
    the M0 options.
  - in M1, users define a class with attribute
    =masd::command_line_options=, associated with an options class.
  - users can choose the "backend": boost program options, etc. Each
    is implemented as a separate template.
  - dogen generates a parser with an associated exception
    (parser_validation_error). The exception is simply injected as a
    type.

Links:

- [[https://github.com/abolz/CmdLine2][CmdLine2]]: alternative library to program options.

*** Exclude profiles from stereotypes processing                      :story:

At present we are manually excluding profiles from the stereotypes
transform. This was just a quick hack to get us going. We need to
replace this with a call to annotations to get a list of profile names
and exclude those.

We should also rename =is_stereotype_handled_externally= to something
more like "is profile" or "matches profile name".

Actually the right thing may even be to just remove all of the profile
stereotypes during annotations processing. However, we should wait
until we complete the exomodel work since that will remove scribble
groups, etc. Its all in the annotations transform.

*** Problems in conversion of dogen models                            :story:

Regenerated all models, got the following errors:

- we are adding the extension to the dia filename because of how CMake
  works. We should probably remove the output parameter or at least
  allow defaulting it to a replacement of the extension.
- we are removing the dependencies due to duplicates in JSON keys.
- we are looking for .dia diagrams instead of .json for references.

*Previous Understanding*

We converted all of dogen's models from dia into JSON using tailor and
code-generated them to see if there were any differences.

Issues to address:

- problems with =quilt.cpp= and =yarn.dia= / =yarn.json=: the
  conversion of the model path did not work as expected - we do not
  know of the "."  separator. Fixed it manually and then it all worked
  (minus CMakeLists, see below). We could possibly fix the builder to
  automatically use the "." to separate model paths. Actually with the
  latest changes we now seem to only be looking at the first model
  module, so for =yarn.dia= we only have =yarn=.
- CMakeLists were deleted on all models for some reason, even though
  the annotations profile look correct.
- in quilt we correctly generated the forward declarations for
  registrar error and workflow error without including boost
  exception. Not sure why that is, nor why it is that we are including
  them for forward declarations.
- Missing include of registrar serialisation in
  =all_ser.hpp=. Instability in =registrar_ser.cpp=, but content is
  correct otherwise.
- =database.json= generated invalid JSON.
- references in dia diagrams have the dia extension. This means that
  they do not resolve when converted to JSON.

"Script":

 #+begin_src
rm *.json
A="dia knit quilt.cpp wale yarn.json annotations formatters quilt yarn database options stitch yarn.dia"
for a in $A; do /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/dogen.tailor -t $a.dia -o $a.json; done
for a in $A; do /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/dogen.knitter -t ${a}.json --cpp-project-dir /home/marco/Development/DomainDrivenConsulting/dogen/projects --ignore-files-matching-regex .*/CMakeLists.txt --ignore-files-matching-regex .*/test/.* --ignore-files-matching-regex .*/tests/.* --verbose --delete-extra-files; done
 #+end_src

In an ideal world, we should probably have a script that we run as
part of =knit_and_stitch= that converts to tailor and then runs
knitter on the models, so that we keep track of tailor breaks outside
of JSON test models.

*** Update static strings to string views                             :story:

Now we're on C++17 we can start making use of its new features. One
low hanging fruit is string view. We use static strings quite a lot
for logging etc. We can just replace these with string views.

Links:

- [[https://www.bfilipek.com/2018/10/strings17talk.html][Let's Talk About String Operations in C++17]]

*** Consider adding compiler name to package                          :story:

At present we are not uploading clang packages into bintray. This is
because they have the same name as the GCC and MSVC packages. If we
add the compiler name to the package we can then upload them too. This
would be good because we can then test to make sure all packages are
working correctly.

*** Fix clang-cl broken test                                          :story:

We have one test failing on clang-cl, ref impl:

: Running 1 test case...
: unknown location(0): fatal error: in "boost_model_tests/validate_serialisation": class boost::archive::archive_exception: unregistered void cast class masd::cpp_ref_impl::boost_model::class_derived<-class masd::cpp_ref_impl::boost_model::class_base
: ..\..\..\..\projects\masd.cpp_ref_impl.test_model_sanitizer\tests\boost_model_tests.cpp(56): last checkpoint: validate_serialisation
:
: *** 1 failure is detected in the test module "test_model_sanitizer_tests"

It seems that the boost registration is failing on debug. This is very
strange as it works on MSVC and Linux, release and debug but fails on
clang-cl release.

*** Move element segmentation into yarn                               :story:

We've added the notion that an element can be composed of other
elements in quilt, in order to handle forward declarations. However,
with a little bit of effort we can generalise it into yarn. It would
be useful for other things such as inner classes. We don't need to
actually implement inner classes right now but we should make sure the
moving of this feature into yarn is compatible with it.

Notes:

- seems like we have two use cases: a) we need all elements, master
  and extensions and we don't really care about which is which. b) we
  only want masters. However, we must be able to access the same
  element properties from either the master or the extension. Having
  said all that, it seems we don't really need all of the element
  properties for both - forward declarations probably only need:
  decoration and artefact properties.
- we don't seem to use the map in formattables model anywhere, other
  than to find master/extension elements.
- Yarn model could have two simple list containers (masters and
  all). Or maybe we don't even need this to start off with, we can
  just iterate and skip extensions where required.
- so in conclusion, we to move decoration, enablement and dependencies
  into yarn (basically decoration and artefact properties) first and
  then see where segmentation ends.

Tasks:

- add a concept for element extensions: =Extensible=. Contains a list
  of element pointers.
- populate it with the extensions.
- change enablement to merge all element properties of extensible
  elements.

*** Create a yarn locator                                             :story:

We need to move all functionality which is not kernel specific into
yarn for the locator. This will exist in the helpers namespace. We
then need to implement the C++ locator as a composite of yarn
locator. It will live in fabric.

*Other Notes*

At present we have multiple calls in locator, which are a bit
ad-hoc. We could potentially create a pattern. Say for C++, we have
the following parameters:

- relative or full path
- include or implementation: this is simultaneously used to determine
  the placement (below) and the extension.
- meta-model element:
- "placement": top-level project directory, source directory or
  "natural" location inside of facet.
- archetype location: used to determine the facet and archetype
  postfixes.

E.g.:

: make_full_path_for_enumeration_implementation

Interestingly, the "placement" is a function of the archetype location
(a given artefact has a fixed placement). So a naive approach to this
seems to imply one could create a data driven locator, that works for
all languages if supplied suitable configuration data. To generalise:

- project directory is common to all languages.
- source or include directories become "project
  sub-directories". There is a mapping between the artefact location
  and a project sub-directory.
- there is a mapping between the artefact location and the facet and
  artefact postfixes.
- extensions are a slight complication: a) we want to allow users to
  override header/implementation extensions, but to do it so for the
  entire project (except maybe for ODB files). However, what yarn's
  locator needs is a mapping of artefact location to  extension. It
  would be a tad cumbersome to have to specify extensions one artefact
  location at a time. So someone has to read a kernel level
  configuration parameter with the artefact extensions and expand it
  to the required mappings. Whilst dealing with this we also have the
  issue of elements which have extension in their names such as visual
  studio projects and solutions. The correct solution is to implement
  these using element extensions, and to remove the extension from the
  element name.
- each kernel can supply its configuration to yarn's locator via the
  kernel interface. This is fairly static so it can be supplied early
  on during initialisation.
- there is still something not quite right. We are performing a
  mapping between some logical space (the modeling space) and the
  physical space (paths in the filesystem). Some modeling elements
  such as the various CMakeLists.txt do not have enough information at
  the logical level to tell us about their location; at present the
  formatter itself gives us this hint ("include cmakelists" or "source
  cmakelists"?). It would be annoying to have to split these into
  multiple archetypes just so we can have a function between the
  archetype location and the physical space. Although, if this is the
  only case of a modeling element not mapping uniquely, perhaps we
  should do exactly this.
- However, we still have inclusion paths to worry about. As we done
  with the source/include directories, we need to somehow create a
  concept of inclusion path which is not language specific; "relative
  path" and "requires relative path" perhaps? These could be a
  function of archetype location.

*** Tidy-up of inclusion terminology                                  :story:

Random notes:

- imports and exports
- some types support both (headers)
- some support imports only (cpp)
- some support neither (cmakelists, etc).

*** Consider adding =artefact_set= to formatters' model               :story:

We are using collections of artefacts quite a bit, and it makes sense
to create an abstraction for it such as a =artefact_set=. However, for
this to work properly we need to add at least one basic behaviour: the
ability to merge two artefact sets. Or else we will end up having to
unpack the artefacts, then merging them, then creating a new artefact
set.

Problem is, we either create the artefact set as a non-generatable
type - not ideal - or we create it as generatable and need to add this
as a free function. We need to wait until dogen has support for
merging code generation.

** Deprecated
*** CANCELLED Consider supplying element configuration as a parameter :story:
    CLOSED: [2019-03-01 Fri 12:03]

*Rationale*: models have changed so much, not even sure what this
story is about.

Figure out if element configuration is context or if it is better
expressed as a stand alone formatting parameter.
*** CANCELLED Build boost for MinGW                                   :story:
    CLOSED: [2019-03-05 Tue 14:23]

*Rationale*: we will not support any additional compilers in CI as the
ones we have are already keeping us busy.

We do not have a MinGW build on windows. This could probably be easily
added. Steps:

- download and install =mingw= on the windows VM.
- create a vcpkg package using =mingw=, and upload it to dropbox.
- setup a new build on appveyor on the build matrix for mingw.

Notes:

- In order to add support for appveyor we need to fix the path:

:  # Workaround for CMake not wanting sh.exe on PATH for MinGW
:  - ps: PATH=%PATH%:C:\Program Files\Git\usr\bin;=%
: before_build:
:  - ps: set PATH=C:\MinGW\bin;%PATH%
