#+title: Sprint Backlog 12
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- resolve the refactoring problem with lots of duplicated types;

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2019-02-27 Wed 17:46]
| <75>                                        |        |      |      |       |
| Headline                                    | Time   |      |      |     % |
|---------------------------------------------+--------+------+------+-------|
| *Total time*                                | *2:05* |      |      | 100.0 |
|---------------------------------------------+--------+------+------+-------|
| Stories                                     | 2:05   |      |      | 100.0 |
| Active                                      |        | 2:05 |      | 100.0 |
| Edit release notes for previous sprint      |        |      | 1:27 |  69.6 |
| Sprint and product backlog grooming         |        |      | 0:18 |  14.4 |
| Try to fix valgrind warning on =find_files= |        |      | 0:20 |  16.0 |
#+TBLFM: $5='(org-clock-time%-mod @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2019-02-26 Tue 16:51]
    :LOGBOOK:
    CLOCK: [2019-02-27 Wed 10:12]--[2019-02-27 Wed 10:32] =>  0:20
    CLOCK: [2019-02-26 Tue 15:44]--[2019-02-26 Tue 16:51] =>  1:07
    :END:

 Add github release notes for previous sprint.

 Title: Dogen v1.0.11, "Moçamedes"

#+begin_src markdown
![Moçamedes](https://www.portaldeangola.com/wp-content/uploads/2018/02/namibe.jpg)
_Município de Moçamedes, capital da província do Namibe. [(C) 2018 Portal de Angola](https://www.portaldeangola.com/2018/08/03/mocamedes-completa-169-anos-com-mais-espacos-verdes/)_.

# Overview

Sprint 11 was yet another "never ending" sprint, lasting several months and is packed full of work. By far, the largest contributor for this oversized sprint was the work on the PhD thesis, which lays the theoretical foundations of MASD. All of the preliminary reviews of the PhD have now been completed, and we have now reached the "business end" towards the delivery of the dissertation. This is good news for the Dogen development, because it means that the theoretical model is now close to completion and we can once more focus on coding. The downside is that after many months of theory without giving the code the proper attention, it is now quite far away from the theory. Towards the end of the sprint some coding work did get done though, adding some interesting features.

## Infrastructure Cleanup

Continuing from the previous sprint, we worked on a number of small housekeeping tasks that have been outstanding for a while

- Nightly builds have now returned. We still have a number of false positives that need to be suppressed, but we're closing in on those.
- Clang-cl build is no longer experimental. Dogen now builds and runs all tests, and the C++ reference implementation has only one test failure. We've also made some inroads in improving CDash's support for clang-cl (https://github.com/Kitware/CDash/issues/733). We are now very close to shipping our Windows binaries from clang-cl.
- Assorted vcpkg updates: Boost is now at v1.69 across all operative systems, ODB is now at v2.5.

## Reference Models Cleanup

A number of small fixes were done to the reference models, improving our confidence in the build process:

- Update all models to latest Dogen, including sync'ing the JSON models to the latest Dia models.
- Update the ```northwind``` model to latest ODB, and add tests to connect to a postgres database on travis (Linux only). We are now validating our ORM support.
- Added a colour palette test model to exercise all stereotypes that have an associated colour to ensure the palette is consistent.

## Codebase Cleanup

Continuing with our overall code cleanup, a number of refactors were made:

- the utility model is now a regular model. Together with the "single binary" work (see below), this now means that Dogen is made entirely of Dogen models.
- reduce the number of generated files that are unused. We've removed many forward declarations and other facets that were generated for no good reason.  This work resulted in cleaning up some bugs for corner cases in facet enablement.
- clean up temporary profiles, created when we were trying to get rid of unnecessary facets. We now have only one temporary profile, that can only be removed when we fix a bug in Dogen.
- start using Boost.DI for dependency injection instead of rolling our own code. We still need to replace all the registrars and so forth, but we've made a start.

# User visible changes

A number of user visible changes were made with this release. These are all **breaking changes** and require updates in order for existing models to continue working.

## Complete MASD namespace rename

All of the profiles and meta-data are now in the MASD namespace. With this release we tidied up missed items such as: ```masd.decoration.licence_name```, ```masd.decoration.copyright_notice``` etc that had been missed previously.

## Move command line options to metadata

A number of command line options have been moved into the meta-data section of the model. This is because these options were really model properties. With this change we now make it easier to regenerate models in a reproducible manner. Example options:

```
#DOGEN masd.extraction.ignore_files_matching_regex=.*/CMakeLists.txt
#DOGEN masd.extraction.delete_extra_files=true
#DOGEN masd.extraction.force_write=true
```

## Create a single Dogen binary

When we started Dogen we created a number of tiny binaries that worked as frontends to specific transformations such as ```knitter```, ```stitcher``` and so forth. However, as we better understood the problem domain, it became clear that there was lots of duplication between binaries for no real advantage. With this release, we implemented the git approach of having a single binary with a "command" interface. The help screen explains this new approach:

```
$ ./masd.dogen.cli --help
Dogen is a Model Driven Engineering tool that processes models encoded in supported codecs.
Dogen is created by the MASD project.
Dogen uses a command-based interface: <command> <options>.
See below for a list of valid commands.

Global options:

General:
  -h [ --help ]                   Display usage and exit.
  -v [ --version ]                Output version information and exit.

Logging:
  -e [ --log-enabled ]            Generate a log file.
  -g [ --log-directory ] arg      Directory to place the log file in. Defaults
                                  to 'log'.
  -l [ --log-level ] arg          What level to use for logging. Valid values:
                                  trace, debug, info, warn, error. Defaults to
                                  'info'.

Tracing:
  --tracing-enabled               Generate metrics about executed transforms.
  --tracing-level arg             Level at which to trace.Valid values: detail,
                                  summary.
  --tracing-guids-enabled         Use guids in tracing metrics, Not
                                  recommended when making comparisons between
                                  runs.
  --tracing-format arg            Format to use for tracing metrics. Valid
                                  values: org-mode, text
  --tracing-output-directory arg  Directory in which to dump probe data. Only
                                  used if transforms tracing is enabled.

Error Handling:
  --compatibility-mode-enabled    Try to process models even if there are
                                  errors.

Commands:

   generate       Generates source code from input models.
   convert        Converts a model from one codec to another.
   weave          Weaves one or more template files into its final output.

For command specific options, type <command> --help.
```

And then for say the ```generate``` command, we now have:

```
$ ./masd.dogen.cli generate --help
Dogen is a Model Driven Engineering tool that processes models encoded in supported codecs.
Dogen is created by the MASD project.
Displaying options specific to the generate command.
For global options, type --help.

Generation:
  -t [ --target ] arg           Model to generate code for, in any of the
                                supported formats.
  -o [ --output-directory ] arg Output directory for the generated code.
                                Defaults to the current working directory.
```

This approach cleaned significantly the internals, resulting in the deletion of a number of model-lets and coalescing all of their functionality in a much cleaner way in a single model: ```masd.dogen.cli```.

## New stereotypes

A small number of stereotypes has been added:

- ```masd::cpp::header_only```: handcrafted type that has only a header file.
- ```masd::entry_point```: handcrafted type that has only an implementation file.
- ```masd::interface```: handcrafted type that has only a header file.

In the future we will bind different templates to these stereotypes to provide a more suitable starting state.

For more details of the work carried out this sprint, see [the sprint log](https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_11.org).

# Next Sprint

We are now in full refactoring mode in Dogen. The objective of the next sprint is to implement the orchestration model properly, removing all of the (many) experiments that have been attempted over the last few years.

# Binaries

You can download binaries from [Bintray](https://bintray.com/masd-project/main/dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_1.0.11_amd64-applications.deb](https://dl.bintray.com/masd-project/main/1.0.11/dogen_1.0.11_amd64-applications.deb)
- [dogen-1.0.11-Darwin-x86_64.dmg](https://dl.bintray.com/masd-project/main/1.0.11/dogen-1.0.11-Darwin-x86_64.dmg)
- [dogen-1.0.11-Windows-AMD64.msi](https://dl.bintray.com/masd-project/main/dogen-1.0.11-Windows-AMD64.msi)

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/1100704249032462336][Tweet]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6506470333200023552][LinkedIn]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

*** STARTED Sprint and product backlog grooming                       :story:
    :LOGBOOK:
    CLOCK: [2019-02-26 Tue 15:25]--[2019-02-26 Tue 15:43] =>  0:18
    :END:

 Updates to sprint and product backlog.

*** STARTED Try to fix valgrind warning on =find_files=               :story:
    :LOGBOOK:
    CLOCK: [2019-02-27 Wed 17:25]--[2019-02-27 Wed 17:45] =>  0:20
    :END:

We seem to be doing something wrong with directory iterators:

: UMC ==7755== Conditional jump or move depends on uninitialised value(s)
: ==7755==    at 0xA0FAFB: (anonymous namespace)::dir_itr_increment(void*&, void*&, std::__cxx11::basic_string, std::allocator >&, boost::filesystem::file_status&, boost::filesystem::file_status&) (operations.cpp:2163)
: ==7755==    by 0xA101B5: boost::filesystem::detail::directory_iterator_increment(boost::filesystem::directory_iterator&, boost::system::error_code*) (operations.cpp:2374)
: ==7755==    by 0xA1002E: boost::filesystem::detail::directory_iterator_construct(boost::filesystem::directory_iterator&, boost::filesystem::path const&, boost::system::error_code*) (operations.cpp:2354)
: ==7755==    by 0x6F2AF6: boost::filesystem::directory_iterator::directory_iterator(boost::filesystem::path const&) (operations.hpp:905)
: ==7755==    by 0x6F2462: boost::filesystem::recursive_directory_iterator::recursive_directory_iterator(boost::filesystem::path const&) (operations.hpp:1174)
: ==7755==    by 0x6F0E15: masd::dogen::utility::filesystem::find_files(boost::filesystem::path const&) (file.cpp:85)
: ==7755==    by 0x6ADB4B: masd::dogen::coding::helpers::mapping_set_repository_factory::obtain_mappings[abi:cxx11](std::vector > const&) const (mapping_set_repository_factory.cpp:66)
: ==7755==    by 0x6AF507: masd::dogen::coding::helpers::mapping_set_repository_factory::make(std::vector > const&) const (mapping_set_repository_factory.cpp:172)

*** Throw on profiles that refer to invalid fields                    :story:

At present during profile instantiation, if we detect a field which
does not exist we skip the profile. This was done in the past because
we had different binaries for stitch, knit etc, which meant that we
could either split profiles by application or skip errors
silently. Now we have a single binary, we could enable this
validation. However, the stitch tests still rely on this
behaviour. The right solution for this is to have some kind of
override flag ("compatibility mode" springs to mind) which is off by
default but can be used (judiciously).

We put a fix in but it seems weave is still borked. The problem
appears to be that we do something in the generation path that is not
done for weaving (and presumably for conversion). The hack was put
back in for now.

*** Dogen's vcpkg export for OSX was created from master              :story:

Problems:

- we have built it from master instead of masd branch.
- installing libodb et al. from master fails due to a config error. We
  need to check that master has our fix. We need to check that the
  config.h workaround works for OSX as well.
- when building using the masd branch, we can't download ODB from git
  due to a hash mismatch. This may be something to do with the git
  version (2.7).

*** Fix clang-cl warnings                                             :story:

We also have a number of warnings left to clean up, all related to
boost.log:

: masd.dogen.utility.lib(lifecycle_manager.cpp.obj) : warning LNK4217: locally defined symbol
: ?get_tss_data@detail@boost@@YAPEAXPEBX@Z (void * __cdecl boost::detail::get_tss_data(void const *))
: imported in function "public: struct boost::log::v2s_mt_nt6::sinks::basic_formatting_sink_frontend<char>::formatting_context * __cdecl boost::thread_specific_ptr<struct boost::log::v2s_mt_nt6::sinks::basic_formatting_sink_frontend<char>::formatting_context>::get(void)const " (?get@?$thread_specific_ptr@Uformatting_context@?$basic_formatting_sink_frontend@D@sinks@v2s_mt_nt6@log@boost@@@boost@@QEBAPEAUformatting_context@?$basic_formatting_sink_frontend@D@sinks@v2s_mt_nt6@log@2@XZ)

Notes:

- opened issue: [[https://github.com/Microsoft/vcpkg/issues/5336][Building with clang-cl on windows generates warnings
  from vcpkg-installed libraries]]
- it seems that the log files show a lot more warnings than those
  reported by cdash,
- Updated issue on CDash parsing problems for clang-cl: [[https://github.com/Kitware/CDash/issues/733][Parsing of
  errors and warnings from clang-cl]]
- Sent email to clang mailinglist: [[http://lists.llvm.org/pipermail/cfe-dev/2019-February/061326.html][Clang-cl - errors and warning
  messages slightly different from MSVC]]. Clang [[http://lists.llvm.org/pipermail/cfe-dev/2019-February/061339.html][have patched]] the diffs
  now.

*** Model references are not transitive                               :story:

For some reason we do not seem to be following references of
referenced models. We should load them automatically, now that they
are part of the meta-data. However, the =yarn.json= model breaks when
we remove the reference to annotation even though it does not use this
model directly and =yarn= is referencing it correctly.

The reason why is that we load up references to all intermediate
models, but then on merge we only take target references. What we
really need to do is to combine the reference containers on merge. For
this we need to create a method that loops through the map and inserts
all keys which have not yet been inserted. Something like "merge
references".

We should address this issue when we introduce two-phase parsing of
models. This is because, as with the new meta-model elements, we also
need to do a first pass across the target and all reference models to
obtain all the paths for all referenced models. We then need to obtain
the unique set of referenced models and load those. To put in this
logic in the code at present (i.e. without a two-phase approach) would
mean we'd have to load the same models several times (or heavily
rewrite existing code, resulting in a two-phase approach, anyway).

*** Move top-level transforms into orchestration                      :story:

- clear up the existing orchestration model We don't really know what
  its current state is. Keep it as a backup as we may need to go back
  to it.
- copy the top-level chains into orchestration, into a well
  defined namespace (say =dirty=). This must include the model to text
  model and registration. Remove all of these types from coding. At
  this point coding should only depend on injectors.
- try implement interface based I/O instead of reading/writing
  directly from the filesystem.
- first move the model to text model transform into
  =generation.cpp=. This means updating all of the formatters. Also,
  use the external model, deleting all of the text models.

*** Move injection processing out of coding                           :story:

- add model source into injection
- add model set into injection, with target and references
- add workflow that takes in a string, path, etc and creates a model
  set. It will need to read references and language from the model
  annotations.
- add model set into coding.
- add a new model: coding.injection. Create a class that converts from
  one model set to another.
- add a chain in orchestration that does the new injection workflow
  and passes the model set into coding.
- delete injection related classes in coding.

*** Implement configuration validator                                 :story:

At present we are not performing any validation.

*** Create transforms for templating                                  :story:

At present we are using workflows to convert stitch and wale
templates. In reality, these are just tranforms. We need to figure out
if there should just be a high-level transform in orchestrator that
encapsulates these or if the templating model itself should follow the
naming convention.

*** Add support for "directory mode" in conversion                    :story:

The real use case we have for conversion is to point it to a directory
with models and give it a destination "type" (e.g. json) and a output
directory, and then have it convert all models to that type and place
them in the output directory.

A second but related use case is to point it to a model, supply a
destination "type" and then output it into a directory, without having
to supply a destination file.

In effect, this is a common use case for all commands (generate and
weaving as well). We could probably deduce it: if the user supplied a
directory as a target, we should do it in directory mode.

*** Add stereotype for IoC containers                                 :story:

At present we are marking IoC containers with either handcrafted or
header only. In reality, they should have their own stereotype and
colours as, in the future, we want to code generate them. However, we
can only do this once we get rid of the initialisers because they are
also a form of IoC containers, but with different requirements.

Proposed stereotype: =masd::ioc::container=.

Actually, this is not quite right. We are not creating the IoC
containers themselves, but the wiring code that sets up these
containers. We need to figure out the correct term for
these. Suggestions:

- [[https://github.com/avao/Qart/blob/master/Src/Qart.CyberTester/Bootstrapper.cs][bootstrapper]], with a =Bootstrapper.CreateContainer= method;
  e.g. =masd::ioc::bootstrapper=.

*** Handling of forward declarations on generated types               :story:

At present, if we disable forward declarations globally (in a profile,
say), the code fails to build with errors on visitors. This is because
we need forward declarations for:

- the visitable type;
- all of its descendants;
- the visitor.

This is a hard requirement because, without these the code does not
make sense. We need some way of "forcing" enablement for some features
where there is such a hard dependency. This is probably something we
need to look at when we implement "computable enablement". We then
need some way of telling the system about these dependencies:
e.g. visitor requires enablement x, y, z.

A second problem is that, at present, there is no way to manually
enable (force) forward declarations on visitors. We can enable them on
all model elements but not on the generated type. Because of this we
are generating forward declarations for all types, for no reason.

*** Disable global hashing on coding                                  :story:

We are generating hash for all types at present in coding but we only
need it for two types: name and location. Try to switch it off
globally and on just for those two types.

*** Rename the =transform= method to =apply=                          :story:

Its a bit silly to name classes =x_transform= and then to have their
main method also called =transform=. We should rename these to
something like =apply=.

*** Move text model into extraction model                             :story:

We started this work but stopped half-way. This is required in order
to move to the new pipeline orchestration.

Tasks:

- copy the current state of all types into extraction as they have
  moved on.
- make coding refer to extraction to start off with. Eventually the
  transforms can be moved over to =generation.extraction=.

*** Stitch does not have a force write flag                           :story:

At present the stitch workflow is hardcoded not to force write. The
correct solution is to allow the template to have a force write
parameter.

*** Contents change check is done twice                               :story:

We seem to check twice if a file has changed:

: 2015-04-26 12:37:28.451464 [DEBUG] [formatters.filesystem_writer] File contents have not changed, and force write is false so not writing.
: 2015-04-26 12:37:28.451486 [DEBUG] [formatters.filesystem_writer] File contents have not changed, and force write is false so not writing.

This is in stitch but it should be the same for knit.

*** Convert utility exceptions into dogen exceptions                  :story:

At present the utility model has a number of hand-crafted
exceptions. We need to convert them to dogen exceptions. We also need
to get rid of the invalid enum exception and use the
=std::argument...= exception instead.

*** JSON models in dogen are out of sync                              :story:

Problems:

- tailor generation results in files with the wrong name (=dia.json=)
- input models were copied into test data.

*** Add option for northwind tests                                    :story:

  At present, when we detect ODB and associated libraries, we build and
  run the northwind tests. However, not all build agents have postgres
  installed. We need an option that can be used to stop the inclusion of
  the northwind tests - or ideally, to build the tests but not run it.

*** Update dogen's windows vcpkg export                               :story:

- ensure we built it from masd and not master
- check master builds libodb 2.4
- build libodb 2.5 from masd and re-export.

*** Move generation model out of coding                               :story:

- then copy the model from coding into generation and all associated
  transforms.
- then add support in each generation model (cpp, csharp) for
  converting from the generation model to the formattables model.
- then create a model generation chain that uses the generation model.
- then delete the model and transforms from coding; delete the
  adaptors from generation models (cpp, csharp).
- then move the model to text model chain into generation.

*** Move generation element properties back into formattables         :story:

We moved a number of properties out of formattables. Move them
back. By the end of this refactor we should end up with no references
to facets in coding.

*** Move fabric types into generation                                 :story:

- copy across the fabric types from cpp and csharp into generation.
- update formatters to use the types from generation.
- delete them from original models.

*** Move formattables into generation                                 :story:

- first, update the generation model with formattable properties from
  cpp: add a formattable type to the generation model and container
  for it, add the formattable population logic. Then remove the
  formattable logic from cpp.
- repeat the exercise with csharp. We should end up with two new
  namespaces in generation handling the fabric meta-types and their
  processing.
- by the end of this refactor, cpp and csharp should contain only the
  formatters.

*** Create =generation.extraction= model                              :story:

- rename =generation.cpp= to =generation.extraction=.
- rename =formatters= namespace to =cpp=.
- ensure the logic for processing one tech space will work for
  multiple tech spaces. For example, we could move the existing
  workflow into the =cpp= namespace and register the text generation
  chain from there.
- repeat the exercise with the csharp model.
- by the end of this refactor we should end up with a single
  =generation.extraction= containing both the csharp and cpp
  formatters.
- consider renaming formatters to model to text transforms.

*** Inheriting from oneself causes segfault                           :story:

If you set an object to inherit from itself, say via metadata:

: #DOGEN masd.generalization.parent=in_memory_weaver

Dogen segfaults due to recursion. We need to test this via UML
inheritance as well.

*** Implement the new dogen product API                               :story:

Now the API has been designed and generated, we need to implement it.

*** Fix cmake emacs variable for tab width                            :story:

We need to replace uses of =tab-width= in cmake files with
=cmake-tab-width=, as explained here:

[[http://stackoverflow.com/questions/25751408/controlling-the-indent-offset-for-cmake-in-emacs][Controlling the indent/offset for CMake in emacs]]

We need to do this for both code generated and manually generated
files.

*** Fix =cp= error on cmake with local third-party packages           :story:

We are getting strange errors in cmake:

: cp: cannot stat ‘/usr/lib/i386-linux-gnu/libpthread.so.1.54.0’: No such file or directory

*** Assorted improvements to CMake files                               :epic:

It seems we are not using proper CMake idioms to pick up compiler
features, as explained here:

- [[http://unclejimbo.github.io/2018/06/08/Modern-CMake-for-Library-Developers/][Modern CMake for Library Developers]]
- [[http://www.slideshare.net/DanielPfeifer1/cmake-48475415][CMake - Introduction and best practices]]
- [[https://datascience.lanl.gov/data/151208-LANL-Hoffman-Science.pdf][Building Science with CMake]]
- [[http://voices.canonical.com/jussi.pakkanen/2013/03/26/a-list-of-common-cmake-antipatterns/][A list of common CMake antipatterns]]
- [[https://rix0r.nl/blog/2015/08/13/cmake-guide/][The Ultimate Guide to Modern CMake]]
- [[https://github.com/crezefire/cxp][CXP: C++ Cross Platform]]: A template project for creating a cross
  platform C++ CMake project using modern CMake syntax and transitive
  dependencies.

We need to implement this using proper CMake idioms.

Notes:

- Add version and language to project.
- start using [[https://cmake.org/cmake/help/v3.3/command/target_compile_options.html][target compile options]] for each target. We will have to
  repeat the same flags; this could be avoided by passing in a
  variable. See also [[http://stackoverflow.com/questions/23995019/what-is-the-modern-method-for-setting-general-compile-flags-in-cmake][What is the modern method for setting general
  compile flags in CMake?]]
- define qualified aliases for all libraries, including nested
  aliasing for =dogen::test_models=. Ensure all linking is done
  against qualified names.
- use target include directories for each target and only add the
  required include directories to each target. Mark them with the
  appropriate visibility, including using =interface=. We should then
  remove all duplication of libraries in the specs.
- try replacing calls to =-std=c++-14= with compiler feature
  detection. We need to create a list of all C++-14 features we're
  using.
- remove all of the debug/release compilation options and start using
  =CMAKE_BUILD_TYPE= instead. See [[http://pastebin.com/jCDW5Aa9][this]] example. We added build type
  support to our builds, but as a result, the binaries moved from
  =stage/bin= to =bin=. There is no obvious explanation for this.
- remove =STATIC= on all libraries and let users specify which linkage
  to use. We already have a story to capture this work.
- remove the stage folder and use the traditional CMake
  directories. This will also fix the problems we have with
  BUILD_TYPE.
- consider buying the CMake book: https://crascit.com/professional-cmake/.

Merged stories:

*Usage of external module path in cmakelists*                       :story:

It seems like we are not populating the target names
properly. Originally the target name for test model all built-ins was:

: dogen_all_builtins

When we moved the test models into =test_models= the target name did
not change. It should have changed to:

: dogen_test_models_all_builtins

*** Support for cmake components and groups                           :story:

#+begin_quote
*Story*: As a dogen user, I need to integrate the generated models
with my existing packaging code.
#+end_quote

We recently added support for creating multiple packages from a single
source tree. We need generated models to have a new top-level cmake file:

: add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)
: add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/tests)
:
: install(
:     DIRECTORY include/
:     DESTINATION include
:     COMPONENT headers
:     FILES_MATCHING PATTERN "*.hpp")

And the =src= cmake file:

: install(TARGETS dia ARCHIVE DESTINATION lib COMPONENT libraries)

*** Mop-up nested namespaces using legacy syntax                      :story:

It seems we still have a number of places in the templates where we
are using the legacy nested namespaces. Its probably only in
serialisation, given that's the only place where we've hard-coded the
namespaces and they are more than one level deep (we have a lot of
=std= but that's not affected):

: namespace boost {
: namespace serialization {

We need to wrap these in if's for C++ 17 and add nested namespaces.

*** Add DTL to vcpkg                                                  :story:

DTL seems to be the easiest library to work with in terms of
generating diffs. However, its not on vcpkg.

Tasks:

- add CMake support to DTL. Not strictly needed but seems like an easy
  thing to do and will make vcpkg easier. It also means we can build
  tests and examples to make sure it all works in isolation. Actually
  this was tried before and not accepted by the maintainer.
- add DTL port.

Links:

- [[https://github.com/google/diff-match-patch/tree/master/cpp][diff-match-patch]]: interesting diff library but requires QT.
- [[https://github.com/Martinsos/edlib#usage-and-examples][edlib]]: interesting library but seems to be more for Levehnstein
  diffs. Also not on vcpkg.
- [[https://github.com/cubicdaiya/dtl/pull/2][Add cmake support]]: PR to add CMake support to DTL, not accepted by
  the maintainer. See also [[https://github.com/chino540off/dtl][the repo]].
- [[https://github.com/Microsoft/vcpkg/tree/master/ports/libodb][libodb]]: example of a project with a vcpkg specific CMake support.
- [[https://stackoverflow.com/questions/13438547/linux-c-or-c-library-to-diff-and-patch-strings][Linux C or C++ library to diff and patch strings?]]

*** Add tests for external and model modules                          :story:

At present we do not have tests exercising different combinations of
external and model modules.

Tests:

- 0-3 levels of external modules
- 1-3 levels of model modules

*** Rewrite name resolution in terms of lists                         :story:

Even since we did the external modules / model modules change we broke
code generation; this is because we do not go up the model modules
during name resolution. We did a quick hack to fix this but it needs
to be done properly.

Let's walk through a simple example:. Name cames in as:

- model module: =probing=
- simple: =prober=

We are in model:

- model module: =dogen.external=

Expected behaviour is to try all combinations of model modules:

- =dogen.external.probing=
- =dogen.probing
- =probing=

This highlights a fundamental problem with resolution: we view the
{external, model, internal} modules as if they are separate entities
but in reality, for the purposes of resolution, there is only one
thing that is relevant: the module path. If it matches because of
{external, model, internal} modules, well that is not relevant to
resolution. Other users of =name= do need to know this information
(for example to generate directories or file names) but not the
resolver.

Interestingly, because we are only looking for an id, it doesn't
really matter how we get to it (in terms of the internal composition
of the name), as long as it matches bitwise. This means we can look at
the process slightly differently:

- start off with the name as the user provided it. Extract all strings
  from it to create a list, in order: external, model, internal,
  simple. Try to resolve that. Call it user list.
- then create a second list from model / context: external, model,
  internal. Call it model list.
- try concantenating model list and user list, pretty printing and
  resolving it. If it fails, pop model list and concatenate again. Try
  until model list is empty.

Tasks:

- first add a quick hack just to get the code generator working
  again. For example, take the first model module of the model and try
  resolving with that. Then worry about fixing this properly.
- split the conversion of name into list from pretty printer. Printer
  should merely take a string or list of strings and do its thing. We
  need to find a good location for this method, since (for now) we
  cannot place it in the right location which is the name class
  itself.
- change resolver to obtain the lists as per above. The to list
  machinery can be used for this, though we need to handle model names
  somehow. We can copy the =model_name_mode= logic from printer.
- drop all of the logic in resolver at present and use the list logic
  as per above. Do not check references, etc.

Notes:

- there are a few useful functions here:
  - subtraction: given a base list, subtract another list. Fro
    example, given =masd::dogen::annotations::annotation=, subtract
    =masd::dogen::annotations=. This is useful when determining the
    right qualification inside a class.
  - addition: concatenate a list with another.
  - combination: given a base list, create all possible permutations
    for a second list. For example: =masd::dogen::annotations= and
    =some::type=, we want =masd::dogen::annotations::some::type=,
    =masd::dogen::some::type=, =masd::some::type=, =some::type=. We
    are iterating upwards the first list.
  - make id: given a list, generate an ID. This was we don't even need
    to go though the whole "name building" exercise, we simply go from
    lists into ID's and check the containers.
- we probably should introduce a type for this: =flat_location=?
  something that can be converted from a =location= (but not the
  opposite) and has the properties defined above. Or we could have a
  "location flattener" that performs these actions, but this is less
  clean as we now need a few of these helpers.
- there are two fundamental concepts: a path (which is what we call a
  location) and an address (which is what we call an ID). Path implies
  an hierarchical space, which is what modeling and generation space
  are. Address is flat and unique. There is a function to go from
  paths to addresses but not vice-versa. Given two paths we can
  generate all possible addresses by performing a "climb" in the
  hierarchical space.
- we could make addresses URIs, and preserve almost all of the
  information: =masd://some.model.name/a/b.c=. The problem is we
  cannot tell the difference between model modules and external
  modules. However, we could simplify this and say model modules and
  external modules are all the same thing; users can choose to express
  external modules as part of the file name or not. (e.g. "express
  full path" or some such flag). We can also choose to express
  external modules as directories or as a dotted path. URIs may not be
  the best of ideas because models exist in contexts (workspaces,
  servers, users) rather than in one universal space. However, we
  could use URLs as a way to identify resources once we clear up the
  REST story.

*** Default model modules from filename                               :story:

It would be nice to be able to not have to supply model modules when
its obvious from the filename.

*** Nested external model path results in strange references          :story:

Note: we have probably already implemented a solution for this, need
to check the resolver.

The external model path does not contribute to path resolution in a
model. Up til now that has actually been a feature; it would have been
annoying to have to dype =dogen::= on every type for every
model. Instead, we refer to say =dogen::a::b= as simply =a::b= in all
models that use =a=. However this masks a deeper problem: this is not
the desired behaviour at all times. We saw this problem when we
created multiple models under dynamic: =dynamic::schema= and
=dynamic::expansion=. In this case, users of these models referred to
them as =schema= and =expansion= respectively, and this was not
ideal. In general:

- external module path should contribute to references just like
  internal module path does - there should be no difference;
- dogen should be clever enough to determine if two models share a
  top-level namespace (regardless if it was obtained from the external
  or internal module path) that there is no need to have an absolute
  path. So in the case of =dogen=, since every model has =dogen= as
  their external module path, according to this rule we should not
  have to type it.

*** Remove hello world model                                          :story:

 It is confusing to have it mixed up with product models. Use a regular
 dogen model to test the package. We could have it on the reference
 model as a stand alone example, or we could create a "hello dogen"
 product for a trivial example of dogen usage.

*** Move from doxygen to standardese                                  :story:

We should try to use standardese to generate the documentation for
dogen. Seems easier to use and CMake friendly. Also, it seems more c++
compliant because it uses libclang.

Once the move is done, we should update dogen to generate comments in
either markup via a meta-data parameter (documentation markup?).

Links:

- https://github.com/foonathan/standardese

*** Update ref impl namespaces to match the new specification         :story:

Perform the namespace update to the reference implementation.

*** New approach to model testsing                                    :story:

In the beginning we generated all models with all facets, even the
dogen core models. The idea was to test the generator even though
these facets were not useful for the product. This was really useful
because the dogen models are much more realistic than the test models
and due to this we picked up a number of bugs. However, we have now
hit the maximum build times on travis and we need to start removing
all ballast. This will mean we lose these valuable tests. The
alternative is to create these tests on the fly:

- create a new override flag that forces all facets to be emitted.
- create a new test facet with templates that are dependent on the
  enabled facets; each test tests the dependent facet.
- create a ctest nightly build that generates code using these new
  facets, compiles it and runs all tests.
- we need some meta-data to "ignore" some modeling elements for
  certain facets such as composition which are known to be broken. Or
  maybe we should just leave the tests as red so we know.
- the tests should be designed not to use templates etc to make the
  debug dumps really obvious (unlike the existing tests). It may even
  make more sense to test each type individually so that when the test
  fails its really obvious:

: MY_TYPE_serialisation_roundtrips_correctly

  this way when we look at CDash we know exactly which types failed to
  serialise.

During the transition phase, we will remove all of the existing tests.

*** Add support for multiple profile binds per modeling element       :story:

At present we can only bind an element to one profile. The reason why
is because we've already expanded the profile graphs into a flat
annotation and if we were to apply two of these expanded annotations
with common parents, the second application would overwrite the
first. Of course, we bumped into the exact same problem when doing
profile inheritance; there it was solved by ensuring each parent
profile is applied only once for each graph.

One possible solution for this problem is to consider each model
element as a "dynamic profile" (for want of a better name; on the fly
profile?). We would create a profile which is named after each of the
profiles it includes, e.g. say we include =dogen::hashable= and
=dogen::pretty_printable= for model element e0. Then the "on the fly
profile" would be:

: dogen::hashable_dogen::pretty_printable

It would be generated by the profiler, with parents =dogen::hashable=
and =dogen::pretty_printable=, and cached so that if anyone shows up
with that same profile we can reuse it. Because of the additive nature
of profile graphs this would have the desired result. Actually we
could probably have a two pass-process; first identify all of the
required dynamic profiles and generate them; then process them. This
way we can rely on a const data structure.

This will all be made easier when we have a two-pass pipeline because
we can do the profile processing on the first pass, and we can even
generate the "dynamic profiles" as real meta-model elements, created
on the fly.

*** Facet enablement and model references is buggy                    :story:

At present we are processing enablement as part of the
post-processing. This means that we are using the target model's
annotation profile in order to determine the facet enablement. This
can cause problems as follows: say we enable hashing on a model via
the model profile of M0. We then consume that model as a reference and
disable hashing on M1. When processing types from M0 for M1 we will
disable hashing for them as well. Thus, no includes for hashing will
be generated even if a hash map is used.

Actually this is not quite right. We are expanding annotations at the
external model transform level; this means the enablement on the
reference must be correct. However, somehow we seem to be looking at
the element on the target model when deciding to include the hash
file from reference model.

*** Consider creating a test build for all facets                     :story:

In the past we had enabled a lot of facets on the dogen models to
serve as part of the testing infrastructure. However, its no longer
feasible to do this because the build is taking too long. However, the
reference models just can't capture all of the complexity of a
codebase like dogen's so we lost some testability with this move. What
would be really nice is if we could create "test builds":

- given a set of test models, copy them somewhere, generate a product
  configuration with some kind of override that enables all facets
  everywhere. some will just not come through like ORM.
- build the product. all handcrafted code is now blank but all facets
  are coming though.
- this could be part of the ctest script, as a "mode" - product
  generation test. Every time there is a commit to a product the build
  kicks in.

Notes:

- one way to achieve this would be to force the profile of the
  model. However, we are moving away from profiles, and in the future
  there will be a list of stereotypes associated with the model. Then
  it will be much harder to figure out what stereotypes do what and to
  overwrite them.
- an alternative would be to have some kind of "test mode"; when
  handling enablement, we'd check the "mode". If we're in test mode,
  we simply enable all and ignore any other settings. We could have a
  "force enable" flag or some such like we do for
  overwriting. However, we may then hit another problem: enabling all
  facets may result in non-buildable models:
  - facets may be incompatible. This is not a problem at present.
  - handcrafted classes may result in code that does not
    compile. Shouldn't though because we are still checking the status
    of the attributes.
- the key thing though is the overall build time must be below the
  threshold. Maybe we can have this on a nightly, running on our own
  hardware.

Conclusions:

- create a new flag: =force-enablement=. When set to true, we ignore
  all enablement settings and generate all facets. We do not generate
  all kernels though (e.g. the kernel must be on in the model).
- create a script that copies the models to a new product and
  generates them with fore-enablement. This will only work when we can
  generate products.
- as facets are enabled, tests are automatically generated for them.
- build the result and run all tests.

*** Create some basic naming guidelines                               :story:

As per Framework Design Guidelines, we need some basic guidelines for
naming in Dogen. We don't need to go overboard, we just need something
to get us started and evolve it as we go along.

Links:

- [[https://isocpp.org/wiki/faq/coding-standards][C++ Coding Standards]]
- [[http://wiki.c2.com/?CapitalizationRules][Capitalization Rules]]
- [[https://en.wikipedia.org/wiki/Snake_case][Snake Case]]
- [[http://cs.smu.ca/~porter/csc/ref/stl/naming_conventions.html][Naming Conventions for these STL Reference Pages]]
- [[https://style-guides.readthedocs.io/en/latest/cpp.html][C++ coding style guide]]
- [[https://stxxl.org/tags/1.4.1/coding_style.html][Coding Style Guidelines]]
- [[https://www.fluentcpp.com/2018/04/24/following-conventions-stl/][Make Your Containers Follow the Conventions of the STL]]

*** Consider generating program options code                          :story:

If there was a syntax to describe boost program options, we should be
able to generate most of the code for it:

- the code that initialises the options;
- the domain objects that will store the options;
- the copying of values from program options objects into domain
  objects.

This would mean that creating a command line tool would be a matter of
just supplying an options file. We could then have a stereotype for
this (name to be yet identified). Marking a type with this stereotype
and supplying the appropriate meta-data so one could locate the
options file would cause dogen to emit the program options binding
code.

A similar concept seems to exist for python: [[http://docopt.org/][docopt]]. We should keep
the same syntax. We just need to have a well defined domain object for
these. The aim would be to replace config.

For models such as these, the dia representation is just overhead. It
would be great if we could do it using just JSON.

Actually even better would be if we could have a text file in docopt
format and parse it and then use it to generate the code described
above.

Actually maybe we are just making this too complicated. We probably
just need some very trivial meta-data extensions that express the
required concept:

- create a yarn element to model this new meta-class. We basically
  need to model the structure of program options with option groups
  and options.
- define a stereotype for the new yarn elements, say
  =CommandLineOptionGroup=.
- for types facet we simply generate the regular c++ code. But in
  addition, we also generate a new facet that: a) injects the
  propertties into boost program options b) instantiates the c++
  objects from boost program options.
- this means that instead of creating a new meta-type, we need to
  augment =yarn::object= with command line options stuff.

Notes:

- create stereotypes for options group, options; allow users to define
  members of type options in options group. Or should the options just
  be member variables? In which case we could have
  =command_line::options= as the stereotype.
- generate the options classes.
- inject a hand-crafted validator or consider generating the validator
  given the meta-data supplied by the user (mandatory, at most X
  times, etc).
- generate an options builder that takes on the building
  responsibilities from the parser.
- generate a parser that hooks the builder and copies data from the
  options map into the options.
- allow users to supply the help text and the version text as
  parameters; these should probably be done in a similar way to what
  we do with the modeline etc.
- allow users to set default values in the options attributes and set
  them in generated code. This is probably just adding default value
  support to dogen, for which we have a separate story.
- one very useful way in which to use program options is via
  projections. That is a given model M0 defines the configuration and
  a second model M1 defines the options parsing. In this case the
  options defined in M0 already has the required shape:
  - there is a top-level class housing all options, traditionally
    called "configuration";
  - the top-level class contains meta-data with the product blurb;
  - attributes of that class can be annotated as "modes", "groups" or
    nothing. A mode will result in a modal CLI interface. Groups
    result in top-level groupings of options. Nothing means the
    attribute must be of a simple type and will be a global option
    (e.g. =help=, =version=, etc).
  - attributes have a description, etc associated as meta-data. They
    also have other useful annotations such as optional, mandatory
    etc. These are used in validation. Interestingly this may mean we
    can also automatically generate a validator.
  - dogen generates in M1 a set of chained program option parsers
    (assuming a modal interface; otherwise just one) which generate
    the M0 options.
  - in M1, users define a class with attribute
    =masd::command_line_options=, associated with an options class.
  - users can choose the "backend": boost program options, etc. Each
    is implemented as a separate template.
  - dogen generates a parser with an associated exception
    (parser_validation_error). The exception is simply injected as a
    type.

Links:

- [[https://github.com/abolz/CmdLine2][CmdLine2]]: alternative library to program options.

*** Exclude profiles from stereotypes processing                      :story:

At present we are manually excluding profiles from the stereotypes
transform. This was just a quick hack to get us going. We need to
replace this with a call to annotations to get a list of profile names
and exclude those.

We should also rename =is_stereotype_handled_externally= to something
more like "is profile" or "matches profile name".

Actually the right thing may even be to just remove all of the profile
stereotypes during annotations processing. However, we should wait
until we complete the exomodel work since that will remove scribble
groups, etc. Its all in the annotations transform.

*** Problems in conversion of dogen models                            :story:

 Regenerated all models, got the following errors:

 - we are adding the extension to the dia filename because of how CMake
   works. We should probably remove the output parameter or at least
   allow defaulting it to a replacement of the extension.
 - we are removing the dependencies due to duplicates in JSON keys.
 - we are looking for .dia diagrams instead of .json for references.

 *Previous Understanding*

 We converted all of dogen's models from dia into JSON using tailor and
 code-generated them to see if there were any differences.

 Issues to address:

 - problems with =quilt.cpp= and =yarn.dia= / =yarn.json=: the
   conversion of the model path did not work as expected - we do not
   know of the "."  separator. Fixed it manually and then it all worked
   (minus CMakeLists, see below). We could possibly fix the builder to
   automatically use the "." to separate model paths. Actually with the
   latest changes we now seem to only be looking at the first model
   module, so for =yarn.dia= we only have =yarn=.
 - CMakeLists were deleted on all models for some reason, even though
   the annotations profile look correct.
 - in quilt we correctly generated the forward declarations for
   registrar error and workflow error without including boost
   exception. Not sure why that is, nor why it is that we are including
   them for forward declarations.
 - Missing include of registrar serialisation in
   =all_ser.hpp=. Instability in =registrar_ser.cpp=, but content is
   correct otherwise.
 - =database.json= generated invalid JSON.
 - references in dia diagrams have the dia extension. This means that
   they do not resolve when converted to JSON.

 "Script":

 #+begin_src
rm *.json
A="dia knit quilt.cpp wale yarn.json annotations formatters quilt yarn database options stitch yarn.dia"
for a in $A; do /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/dogen.tailor -t $a.dia -o $a.json; done
for a in $A; do /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/dogen.knitter -t ${a}.json --cpp-project-dir /home/marco/Development/DomainDrivenConsulting/dogen/projects --ignore-files-matching-regex .*/CMakeLists.txt --ignore-files-matching-regex .*/test/.* --ignore-files-matching-regex .*/tests/.* --verbose --delete-extra-files; done
 #+end_src

 In an ideal world, we should probably have a script that we run as
 part of =knit_and_stitch= that converts to tailor and then runs
 knitter on the models, so that we keep track of tailor breaks outside
 of JSON test models.

*** Log file names do not have frontend                               :story:

Add extension to log file name so that we can see both Dia and JSON
logs at the same time. At present, one overwrites the other because we
do not have the frontend (e.g. the extension) on the log file name.

*** Update static strings to string views                             :story:

Now we're on C++17 we can start making use of its new features. One
low hanging fruit is string view. We use static strings quite a lot
for logging etc. We can just replace these with string views.

Links:

- [[https://www.bfilipek.com/2018/10/strings17talk.html][Let's Talk About String Operations in C++17]]

*** Add basic "diff mode"                                             :story:

We need a very simple way of checking all generated files in memory
against what's in the file system and returning a flag if they are
different. We can then use these flags to determine if tests pass. In
the future we can extend this approach to include a proper diff of the
files, but for now we just need a reliable way to run system tests
again.

Actually the right solution for this is to see the processing as part
of a chain:

- out of the generator come a set of artefacts with operations (write,
  merge, ignore)
- these get joined with a transform that reads the state of the file
  system. It then adds more operations: delete, etc. If there are no
  diffs, it marks those files as skip.
- the final step is a processor which gets that model and executes the
  operations. This can then be replaced by a "reporter" that simply
  states what the operations would be.

Diff mode is using the report to see if there are any diffs.

Merged Stories:

*Validation-only or dry-run mode*

Both stitcher and knitter could do with a "dry-run" mode in which we'd
do everything except for actually outputting.

*For Knitter*

It would be nice if one could just check if a dia diagram is valid for
code generation, e.g. =--validate= or something along those lines.

*For Stitch*

We are interested in performing the parsing. This would be useful for
example for a flymake mode in emacs.

An additional feature of dry-run would be to run, generate the model
and then produce a unified diff, e.g. tell me what you'd change. For
this we'd have to link against a diff library. We need to
automatically exclude non-overwrite files (or have an option to
exclude/include them).

Links:

- [[https://github.com/google/diff-match-patch/tree/master/cpp][google Diff Match Patch library]]
- [[https://github.com/cubicdaiya/dtl][DTL: Diff Template Library]]
- [[https://stackoverflow.com/questions/1451694/is-there-a-way-to-diff-files-from-c][SO: Is there a way to diff files from C++?]]

*Dry-run option to just diff with existing generated code*

#+begin_quote
*Story*: As a dogen user, I want to know what has changed with the
next code generation so that I can evaluate if the changes are as
expected or not.
#+end_quote

It would be useful to have an option that would do everything except
writing the files to disk; instead, it would diff them with the
existing files and report if there are any differences. This would be
useful to make sure the source code matches the latest version of the
diagram.

We could use something like the [[https://code.google.com/p/dtl-cpp/wiki/Tutorial][DTL library]].

*** Consider adding compiler name to package                          :story:

At present we are not uploading clang packages into bintray. This is
because they have the same name as the GCC and MSVC packages. If we
add the compiler name to the package we can then upload them too. This
would be good because we can then test to make sure all packages are
working correctly.

*** Fix clang-cl broken test                                          :story:

We have one test failing on clang-cl, ref impl:

: Running 1 test case...
: unknown location(0): fatal error: in "boost_model_tests/validate_serialisation": class boost::archive::archive_exception: unregistered void cast class masd::cpp_ref_impl::boost_model::class_derived<-class masd::cpp_ref_impl::boost_model::class_base
: ..\..\..\..\projects\masd.cpp_ref_impl.test_model_sanitizer\tests\boost_model_tests.cpp(56): last checkpoint: validate_serialisation
:
: *** 1 failure is detected in the test module "test_model_sanitizer_tests"

It seems that the boost registration is failing on debug. This is very
strange as it works on MSVC and Linux, release and debug but fails on
clang-cl release.

** Deprecated
