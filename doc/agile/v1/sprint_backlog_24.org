#+title: Sprint Backlog 24
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) spike(p) }

* Mission Statement

- Continue work on the generation refactor.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2020-04-08 Wed 22:46]
| <75>                                   |        |      |      |       |
| Headline                               | Time   |      |      |     % |
|----------------------------------------+--------+------+------+-------|
| *Total time*                           | *5:39* |      |      | 100.0 |
|----------------------------------------+--------+------+------+-------|
| Stories                                | 5:39   |      |      | 100.0 |
| Active                                 |        | 5:39 |      | 100.0 |
| Edit release notes for previous sprint |        |      | 5:01 |  88.8 |
| Sprint and product backlog grooming    |        |      | 0:38 |  11.2 |
#+TBLFM: $5='(org-clock-time%-mod @3$2 $2..$4);%.1f
#+end:

*** STARTED Edit release notes for previous sprint                    :story:
    :LOGBOOK:
    CLOCK: [2020-04-08 Wed 21:51]--[2020-04-08 Wed 22:46] =>  0:55
    CLOCK: [2020-04-08 Wed 19:15]--[2020-04-08 Wed 20:13] =>  0:58
    CLOCK: [2020-04-07 Tue 20:32]--[2020-04-07 Tue 22:35] =>  2:03
    CLOCK: [2020-04-06 Mon 23:06]--[2020-04-06 Mon 23:16] =>  0:10
    CLOCK: [2020-04-06 Mon 22:10]--[2020-04-06 Mon 23:05] =>  0:55
    :END:

Add github release notes for previous sprint.

Title: Dogen v1.0.23, "Docas de Moçamedes"

#+BEGIN_SRC markdown
**NOTE: Release notes under construction**

![Docas de Moçamedes](https://pbs.twimg.com/media/CpAcgYpWIAEGmCF?format=jpg&name=medium)
_Docks in Moçamedes, Namibe, Angola. (C) 2016 Ampe Rogério - [Rede Angola](http://www.redeangola.info/namibe-volta-a-assinalar-dia-de-mocamedes)_

# Introduction

Welcome to the first release of Dogen under quarantine. I hope you have been able to stay home and stay safe, in what are very trying times for us all. This release is obviously unimportant in the grand scheme of things, but hopefully it is able to provide a momentary respite to those of us searching for _something else_ to focus our attention on. The sprint itself was a rather positive one,  if somewhat quiet on the user-facing front. Of particular note is the fact that we have _finally_ made major inroads on the fabled "generation" refactoring, which we shall cover at length. So get ready for some geeky [MDE](https://en.wikipedia.org/wiki/Model-driven_engineering) stories.

# User visible changes

This section covers stories that affect end users, with the video providing a quick demonstration of the new features, and the sections below describing them in more detail. Since there was only one very minor user facing  change, we've used the video mostly to chat about internal changes.

[![Sprint 1.0.23 Demo](https://img.youtube.com/vi/RysjvA2eZ4o/0.jpg)](https://youtu.be/RysjvA2eZ4o)
_Video 1: Sprint 23 Demo._

## Generate the MASD Palette

Whilst positive from an end-goal perspective, the growth spurts of the ```logical``` model have had a big impact on the MASD palette: we simply could not keep up with finding enough _decent colours_ for all these new meta-model elements. With this sprint, we took the first steps in automating the process. To our great astonishment, even something as deceptively simple as "finding decent colours" is a [non-trivial question](https://seaborn.pydata.org/introduction.html), for which there is published research. Lest we got lost on yet another massive detour, we followed Voltaire's sound advice - _le mieux est l'ennemi du bien_, after all - and went for the simplest possible approach that could get us moving in the right direction.

![New MASD palette](https://github.com/MASD-Project/dogen/raw/master/doc/blog/images/masd_palette_generated.png)
_Figure 1:The new MASD palette, generated by a script._

A [new script](https://github.com/MASD-Project/dogen/blob/master/projects/dogen.dia/python/generate_colours.py) to generate colours was created. It is based on the above-linked [Seaborn python library](https://seaborn.pydata.org/tutorial/color_palettes.html), as it appears to provide sets of palettes for these kinds of use cases. We are yet to master the technicalities of the library, but at this point we can at least generate groups of colours that are vaguely related. This is clearly only the beginning of the process, both in terms of joining the dots of the scripts (at present you need to manually copy the new palettes into the colouring script) but also as far as finding the right Seaborn palettes to use; as you can see from Figure 1, the new MASD palette still has far too many similar colours, making it difficult to visually differentiate meta-model elements. More exploration of Seaborn - and colouring in general - is required.

# Development Matters

In this section we cover topics that are mainly of interest if you follow Dogen development, such as details on internal stories that consumed significant resources, important events, etc. As usual, for all the gory details of the work carried out this sprint, see the [sprint log](https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_23.org).

## Milestones

The 11,000th commit was made to the Dogen GitHub repository during this release.

![11,000th commit](https://github.com/MASD-Project/dogen/raw/master/doc/blog/images/dogen_11_000_commits.png)
_Figure 2: 11,000th commit for Dogen on GitHub._

## Significant Internal Stories

The sprint was dominated by smattering of small and medium-sized stories that, collectively, made up the "generation" refactor work. We've grouped the most significant of them into a handful of "themes", allowing us to cover the refactor in some detail. To be fair, it is difficult to provide all of the required context  in order to fully understand the rationale for the work, but we shall try our best.

### Towards a ```physical``` model

The processing pipeline for Dogen remained largely unchanged since its early days. Figure 2 is a diagram from [sprint 12](https://github.com/MASD-Project/dogen/releases/tag/v1.0.12) describing the pipeline and associated models; other than the name changes, it is largely applicable to the code as it stands today. However, what has changed in quite dramatic fashion is our understanding of the _conceptual role_ of these models. Over time, a picture of a sparse _logical-physical_ space emerged; as elements travel through the pipeline, they are also traveling through this space, transformed by projections that are parameterised by variability, and ultimately materializing as fully-formed artefacts, ready to be written to the filesystem. Beneath those small name changes lies a leap in conceptual understanding of the domain, and posts such as the [The Refactoring Quagmire](https://mcraveiro.blogspot.com/2018/01/nerd-food-refactoring-quagmire.html) give you a feel for just how long and windy this road has been.

![Processing pipeline](https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/orchestration_pipeline.png)
_Figure 3: Dogen's processing pipeline._

For the past few sprints, we have been trying to get the code to behave according to this newly found knowledge. The [previous sprint](https://github.com/MASD-Project/dogen/releases/tag/v1.0.22) saw us transition the ```logical``` and ```variability``` models to this brave new world, and this sprint we have turned our attention to the ```physical``` model. It is a much bigger task than any thus far because the models are so far away from their desired state, but we had to start somewhere. We decided to go for three distinct lines of attack as our starting salvo:

- **Refactor the ```archetypes``` _modelet_**. The first moment of enlightenment was when we realised that the small ```archetypes``` model was nothing but a disguised meta-model of the physical dimension for the logical-physical space. In effect, it is a _metaphysical_ model though such a name (and associated pun) would probably not be viewed well in academic circles, so we had to refrain from using it. Nonetheless, we took the existing ```archetypes``` model and refactored it into the core of the ```physical``` model. Types such as ```archetype_location``` became the basis of the physical meta-model, populated with entities such as ```backend```, ```facet``` and ```kernel```.
- **Merge the ```extraction``` model into the ```physical``` model**. More surprisingly, we eventually realised that the ```extraction``` model was actually representing _instances_ of the physical meta-model, and as such should be merged into it. It was rather difficult to wrap our heads around this concept; to do so, we had to let go of the idea that ```artefacts``` are representations of files in memory, and instead started to view them as elements travelling in the logical-physical space towards their ultimate destination. After a great many whiteboard sessions,  these ideas were eventually clarified and then much of the conceptual design fell into place.
- **Move physical aspects in the ```logical``` model to the ```physical``` model**. The last step of our three-pronged approach was to figure out that the proliferation of types with names such as ```artefact_properties```, ```enablement_properties``` and the like was just a leakage of physical concepts into the logical model. This happened because we did not have a strong conceptual framework, and so never quite knew where to place things. As the physical model started to take shape with the two changes above, we finally resolved this long standing problem, as it suddenly became clear that most of the physical properties we had been associating with logical elements were more adequately modeled as _part of the artefacts themselves_. This then allows us to cleanly separate the ```logical``` and ```physical``` models, very much in keeping with the decoupling performed [last sprint](https://github.com/MASD-Project/dogen/releases/tag/v1.0.22) for the ```variability``` and ```physical``` models (the latter known then as ```archetypes```, of course). The sprint saw us modeling the required types have correctly in the ```physical``` model, but the entire tidy-up will be long in completing as the code in question is very fiddly.

FIXME: flatten names

### Rename the ```generation``` models to ```m2t```

It has long been understood that "formatters" are nothing but model-to-text (M2T) transforms, as per standard  [MDE](https://en.wikipedia.org/wiki/Model-driven_engineering) terminology. With this sprint, we finally had the time to rename the generation models to their rightful name:

- ```generation``` became ```m2t```
- ```generation.cpp``` became ```m2t.cpp```
- ```generation.csharp``` became ```m2t.csharp```

In addition, as per the previous story,  the new role of the ```m2t``` model is now to perform the expansion of the logical model into physical space. With this sprint we begun this exercise, but sadly only scratched the surface as we ran out of time. Nonetheless, the direction of travel seems very much clear, and much of the code that is at present duplicated between ```m2t.cpp`` and ```m2t.csharp``` should find its new home within ```m2t```, in a generalised form making use of the shiny new ```physical``` meta-model.

### Rename the ```meta-model``` namespace to ```entities```

One of the terms that can become very confusing very fast is ```meta-model```. When you are thick in the domain of [MDE](https://en.wikipedia.org/wiki/Model-driven_engineering), pretty much everything you touch is a meta-something, so much so that calling things "meta-models" should be done only sparingly and when it can provide some form of enlightenment to the reader. So it was that we decided to deprecate the widely used namespace ```meta-model``` in favour of the much blander ```entities```.
#+END_SRC markdown

- [[https://twitter.com/MarcoCraveiro/status/1240728672128172033][twitter]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6646494675207278592/][linkedin]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

*** Create a demo and presentation for previous sprint                :story:

Time spent creating the demo and presentation. Use the demo project:

*** STARTED Sprint and product backlog grooming                       :story:
    :LOGBOOK:
    CLOCK: [2020-04-07 Tue 08:02]--[2020-04-07 Tue 08:31] =>  0:29
    CLOCK: [2020-04-06 Mon 22:00]--[2020-04-06 Mon 22:09] =>  0:09
    :END:

Updates to sprint and product backlog.

*** Implement archetype locations from physical meta-model            :story:

We need to use the new physical meta-model to obtain information about
the layout of physical space, replacing the archetype locations.

Tasks:

- make the existing backend interface return the layout of physical
  space.
- create a transform that populates all of the data structures needed
  by the current code base (archetype locations).
- replace the existing archetype locations with a physical meta-model.
- remove all the archetype locations data structures.

Notes:

- template instantiation domains should be a part of the physical
  meta-model. Create a transform to compute these.

Merged stories:

*Clean-up archetype locations modeling*

We now have a large number of containers with different aspects of
archetype locations data. We need to look through all of the usages of
archetype locations and see if we can make the data structures a bit
more sensible. For example, we should use archetype location id's
where possible and only use the full type where required.

Notes:

- formatters could return id's?
- add an ID to archetype location; create a builder like name builder
  and populate ID as part of the build process.

*Implement the physical meta-model*

We need to replace the existing classes around archetype locations
with the new meta-model types.

Notes:

- formatters should add their data to a registrar that lives in the
  physical model rather than expose it via an interface.

*** Implement the generation model in terms of "formattables"         :story:

 We need to find a way to expand the generation model into a pair of:

 - element
 - artefact

 In effect, a formattable. Then we need to update the backends to stop
 expanding across physical space and instead use the expansion created
 by the generation model. We then need to update formattables to have
 an artefact, and supply the artefact to all formatters.

 Notes:

 - next task is to use the artefact from pair inside c++ and c# instead
   of creating one inside each formatter.
 - we need to also perform the archetype expansion within =m2t= not
   logical model.
 - we need to add artefacts to formatters and get them to populate
   them.

*** Stitch formatter updates                                          :story:

There are a number of issues with stitch formatters at present:

- stitch transform is still generating its own artefact.

*** Replace all formatting styles with the ones in physical model     :story:

We still have a number of copies of this enumeration.

*** Replace artefact properties with artefacts                        :story:

Now that we understand the role of the physical model, we need to get
rid of all the failed attempts at representing physical data across
other models such as the logical model, =m2t= etc. We need to use the
artefact itself and supply it to the formatters.

Notes:

- these attributes need to be migrated from the logical model into the
  physical model:
  - artefact level: artefact_properties, enablement_properties
  - model level: extraction_properties
- we need to understand what the pair =element_archetype= does. If
  necessary, it needs to be moved to the physical model or to the
  logical/physical mapping (see also =enabled_archetype_for_element=
  set).

*** Move decorations to their "final" resting place                   :story:

At present we are handling decorations in the generation model but
these are really logical concerns. The main reason why is because we
are not expanding the decoration across physical space, but instead we
expand them depending on the used technical spaces. However, since the
technical spaces are obtained from the formatters, there is an
argument to say that archetypes should have an associated technical
space. We need to decouple these concepts in order to figure out where
they belong.

*** Implement enablement in physical model                            :story:

We need to move the types in generation model related to enablement
into the physical model. We also need to move the types in the logical
model related to enablement into the physical model. We need to create
the enablement transform in the physical model. These are then called
from the generation model.

Notes:

- split enablement features by facet, backend, kernel etc.
- add code generation support for static configuration on templates.

Merged stories:

*Refactor enablement types*

These types all have historical names.

Tasks:

- =local_archetype_location_properties=: these are just enablement
  properties. We need to also add =backend_enabled=, at which point
  the type in the logical model is identical to the one in the
  generation model.
- =global_archetype_location_properties=: with the exception of
  =denormalised_archetype_properties=, these types are just used to
  read the meta-data for enablement. They could be private to a helper
  that generates =enablement_properties= and could be used for both
  global and local.
- the enablement transform (probably) has no dependencies and could be
  lifted into the physical model.

*** Implement locator in physical model                               :story:

Merged stories:

*Create a archetypes locator*

We need to move all functionality which is not kernel specific into
yarn for the locator. This will exist in the helpers namespace. We
then need to implement the C++ locator as a composite of yarn
locator.

*Other Notes*

At present we have multiple calls in locator, which are a bit
ad-hoc. We could potentially create a pattern. Say for C++, we have
the following parameters:

- relative or full path
- include or implementation: this is simultaneously used to determine
  the placement (below) and the extension.
- meta-model element:
- "placement": top-level project directory, source directory or
  "natural" location inside of facet.
- archetype location: used to determine the facet and archetype
  postfixes.

E.g.:

: make_full_path_for_enumeration_implementation

Interestingly, the "placement" is a function of the archetype location
(a given artefact has a fixed placement). So a naive approach to this
seems to imply one could create a data driven locator, that works for
all languages if supplied suitable configuration data. To generalise:

- project directory is common to all languages.
- source or include directories become "project
  sub-directories". There is a mapping between the artefact location
  and a project sub-directory.
- there is a mapping between the artefact location and the facet and
  artefact postfixes.
- extensions are a slight complication: a) we want to allow users to
  override header/implementation extensions, but to do it so for the
  entire project (except maybe for ODB files). However, what yarn's
  locator needs is a mapping of artefact location to  extension. It
  would be a tad cumbersome to have to specify extensions one artefact
  location at a time. So someone has to read a kernel level
  configuration parameter with the artefact extensions and expand it
  to the required mappings. Whilst dealing with this we also have the
  issue of elements which have extension in their names such as visual
  studio projects and solutions. The correct solution is to implement
  these using element extensions, and to remove the extension from the
  element name.
- each kernel can supply its configuration to yarn's locator via the
  kernel interface. This is fairly static so it can be supplied early
  on during initialisation.
- there is still something not quite right. We are performing a
  mapping between some logical space (the modeling space) and the
  physical space (paths in the filesystem). Some modeling elements
  such as the various CMakeLists.txt do not have enough information at
  the logical level to tell us about their location; at present the
  formatter itself gives us this hint ("include cmakelists" or "source
  cmakelists"?). It would be annoying to have to split these into
  multiple archetypes just so we can have a function between the
  archetype location and the physical space. Although, if this is the
  only case of a modeling element not mapping uniquely, perhaps we
  should do exactly this.
- However, we still have inclusion paths to worry about. As we done
  with the source/include directories, we need to somehow create a
  concept of inclusion path which is not language specific; "relative
  path" and "requires relative path" perhaps? These could be a
  function of archetype location.

Merged stories:

*Generate file paths as a transform*

We need to understand how file paths are being generated at present;
they should be a transform inside generation.

*** Implement formatting styles in physical model                     :story:

We need to move the types related to formatting styles into physical
model, and transfors as well.

Merged stories:

*Move formatting styles into generation*

We need to support the formatting styles at the meta-model level.

*** Implement dependencies in terms of new physical types             :story:

- add dependency types to physical model.
- add dependency types to logical model, as required.
- compute dependencies in generation. We need a way to express
  dependencies as a file dependency as well as a model
  dependency. This caters for both C++ and C#/Java.
- remove dependency code from C++ and C# model.

Notes:

- in light of the new physical model, we need a transform that calls
  the formatter to obtain dependencies. The right way to do this is to
  have another registrar (=dependencies_transform=?) and to have the
  formatters implement both interfaces. This means we can simply not
  implement the interface (and not register) when we have no
  dependencies - though of course given the existing wale
  infrastructure, we will then need yet another template for
  formatters which do not need d

Merged stories:

*Formatter dependencies and model processing*

At present we are manually adding the includes required by a formatter
as part of the "inclusion_dependencies" building. There are several
disadvantages to this approach:

- we are quite far down the pipeline. We've already passed all the
  model building checks, etc. Thus, there is no way of knowing what
  the formatter dependencies are. At present this is not a huge
  problem because we have so few formatters and their dependencies are
  mainly on the standard library and a few core boost models. However,
  as we add more formatters this will become a bigger problem. For
  example, we've added formatters now that require access to
  variability headers; in an ideal world, we should now need to have a
  reference to this model (for example, so that when we integrate
  package management we get the right dependencies, etc).
- we are hard-coding the header files. At present this is not a big
  problem. To be honest, we can't see when this would be a big
  problem, short of models changing their file names and/or
  locations. Nonetheless, it seems "unclean" to depend on the header
  file directly.
- the dependency is on c++ code rather than expressed via a model.

In an ideal world, we would have some kind of way of declaring a
formatter meta-model element, with a set of dependencies declared via
meta-data. These are on the model itself. They must be declared
against a specific archetype. We then would process these as part of
resolution. We would then map the header files as part of the existing
machinery for header files.

However one problem with this approach is that we are generating the
formatter code using stitch at present. For this to work we would need
to inject a fragment of code into the stitch template somehow with the
dependencies. Whilst this is not exactly ideal, the advantage is that
we could piggy-back on this mechanism to inject the postfix fields as
well, so that we don't need to define these manually in each
model. However, this needs some thinking because the complexity of
defining a formatter will increase yet again. When there are problems,
it will be hard to troubleshoot.

*Move dependencies into archetypes*

Actually the dependencies will be generated at the kernel level
because 99% of the code is kernel specific. However, we need to make
it an external transform. We need to figure out an interface that
supplies archetypes with the data needed to create the dependencies
container.

Tasks:

- create the locator in the C++ external transform
- create a dependencies transform that uses the existing include
  generation code.

*Previous understanding*

It seems all languages we support have some form of "dependencies":

- in c++ these are the includes
- in c# these are the usings
- in java these are the imports

So, it would make sense to move these into yarn. The process of
obtaining the dependencies must still be done in a kernel dependent
way because we need to build any language-specific structures that the
dependencies builder requires. However, we can create an interface for
the dependencies builder in yarn and implement it in each kernel. Each
kernel must also supply a factory for the builders.

*Tidy-up of inclusion terminology*

Random notes:

- imports and exports
- some types support both (headers)
- some support imports only (cpp)
- some support neither (cmakelists, etc).

*** Make physical model name a qualified name                         :story:

At present we are setting up the extraction model name from the simple
name of the model. It should really be the qualified name. Hopefully
this will only affect tracing and diffing.

*** Create a common formatter interface                               :story:

Once all language specific properties have been moved into their
rightful places, we should be able to define a formatter interface
that is suitable for both c++ and c# in generation. We should then
also be able to move all of the registration code into generation. We
then need to look at all containers of formatters etc to see what
should be done at generation level.

*** Consider moving compatibility mode to feature model               :story:

Given that compatibility mode only really applies to features, we
should just have the flag in the feature model itself?

*** Model SQL scripts as meta-model entities                          :story:

At present we are adding SQL scripts to the relational model under the
=sql= directory. These should be part of the model. We need meta-types
to represent these files. For now they just need to generate an empty
file - or perhaps just the SQL modeline and decoration. They should
also be marked as handcrafted. We also need to add a part for SQL.

*** Model lisp scripts as meta-model entities                         :story:

We are using lisp scripts in the dia and templating projects. These
need to be modeled and generated. Generation can have just decoration.

*** Consider allowing users to create their own parts                 :story:

It would be nice if one could create our own parts. However the main
problem is how would you allocate modeling elements to a part. At
present this is done via the formatter; perhaps we could override this
in meta-data? This is a very complex task and we need clear use cases
for it. Alternatively we could state that a user defined part's
content is ignored entirely.

*** Order of headers is hard-coded                                    :story:

In inclusion expander, we have hacked the sorting:

:        // FIXME: hacks for headers that must be last
:        const bool lhs_is_gregorian(
:            lhs.find_first_of(boost_serialization_gregorian) != npos);
:        const bool rhs_is_gregorian(
:            rhs.find_first_of(boost_serialization_gregorian) != npos);
:        if (lhs_is_gregorian && !rhs_is_gregorian)
:            return true;

This could be handled via meta-data, supplying some kind of flag (sort last?).

*** Top-level "inclusion required" should be "tribool"                :story:

One of the most common use cases for inclusion required is to have it
set to true for all types where we provide an override, but false for
all other cases. This makes sense in terms of use cases:

- either we need to supply some includes; in which case where we do
  not supply includes we do not want the system to automatically
  compute include paths;
- or we don't supply any includes, in which case:
  - we either don't require any includes at all (hardware built-ins);
  - or we want all includes to be computed by the system.

The problem is that we do not have a way to express this logic in the
meta-data. The only way would be to convert the top-level
=requires_includes= to an enumeration:

- yes, compute them
- yes, where supplied
- no

We need to figure out how to implement this. For now we are manually
adding flags.

*** Move technical space and generability transforms                  :story:

At present these transforms are in generation, but we don't think
that's the right place. We need some analysis to understand what they
do and why they are not in the logical model.

*** Use static registration with initialisers                         :story:

Since the start, we avoided using static registration for
initialisation due to the static initialisation order fiasco. Its much
better to manually determine the order of initialisation and do it
under programatic control rather than depend on the linker. However,
the downside is that we now have lots of code that needs to be called,
and every so often we forget to join all the dots. Perhaps we need
something in between complete "manual registration" and static
registration. Instead of supplying the registrars from the top-level,
we could instead:

- use static registration for a top-level initialiser. This is a very
  simple interface that has only one method: initialise. It uses
  regular static registration, but it merely adds itself to a
  list. Nothing else happens during static initialisation.
- when program starts, we call =initialise()= on all initialisers.
- within a given component, the top-level initialiser calls other
  initialisers. Internally, it obtains references to static registrars
  as required (e.g. features, etc). All of this happens during normal
  program execution, so we can log.
- DLLs can register initialisers on load. However, we are expected to
  load them prior to calling initialisation.
- all registrars should have a "validate" method. We should check that
  they are not empty. This method should be called prior to use. We
  should also have a "initialised" flag that stops
  double-initialisation. It should be set as the last step of
  initialisation.

Links:

- [[https://dxuuu.xyz/cpp-static-registration.html][C++ patterns: static registration]]

*** Consider bucketing elements by meta-type in generation model      :story:

At the moment we have a flat container of elements in the main
model. However, it seems like one of its use cases will be to bucket
the elements by meta-type before processing: formatters will want to
locate all formatters for a given meta-type and apply them all. At
present we are asking for the formatters for meta-name
repeatedly. This makes no sense, we should just ask for them once and
apply all formatters in one go.

For this we could simply group elements by meta-name in the model
itself and then use that container at formatting time. However, there
may be cases where looping through the whole model is more convenient
(during transforms) so this is not without its downsides.

Alternatively we could consider just bucketing in the formatters'
workflow itself.

This work will only be useful once we get rid of the formattables
model.

This can be done in the generation model, as part of the generation
clean up.

*** Dimension vs view vs perspective                                  :story:

We need to find the definition for how these terms are used within
UML and see which one is more appropriate for MASD.

*** Add support for product skeleton generation                       :story:

Now that dogen is evolving to a MDSD tool, it would be great to be
able to create a complete product skeleton from a tool. This would
entail:

- directory structure. We should document our standard product
  directory structure as part of this exercise. Initial document added
  to manual as "project_structure.org".
- licence: user can choose one.
- copyright: input by user, used in CMakeFiles, etc. added to the
  licence.
- CI support: travis, appveyor
- CMake support: top-level CMakefiles, CPack. versioning
  templates, valgrind, doxygen. For CTest we should also generate a
  "setup cron" and "setup windows scheduler" scripts. User can just
  run these from the build machine and it will start running CTest.
- vcpkg support: add "ports" code? user could point to vcpkg directory
  and a ports directory is created.
- agile with first sprint
- README with emblems.

Name for the tool: dart.

Tool should have different "template sets" so that we could have a
"standard dogen product" but users can come up with other project
structures.

Tool should add FindODB if user wants ODB support. Similar for EOS
when we support it again. We should probably have HTTP links to the
sources of these packages and download them on the fly.

Tool should also create git repo and do first commit (optional).

For extra bonus points, we should create a project in GitHub, Travis
and AppVeyor from dart.

We should also generate a RPM/Deb installation script for at least
boost, doxygen, build essentials, clang.

We should also consider a "refresh" or "force" statement, perhaps on a
file-by-file basis, which would allow one to regenerate all of these
files. This would be useful to pick-up changes in travis files, etc.

One problem with travis files is that each project has its own
dependencies. We should move these over to a shell script and call
these. The script is not generated or perhaps we just generate a
skeleton. This also highlights the issue that we have different kinds
of files:

- files that we generate and expect the user to modify;
- files that we generate but don't expect user modifications;
- files that the user generates.

We need a way to classify these.

Dart should use stitch templates to generate files.

We may need some options such as "generate boost test ctest
integration", etc.

Notes:

- [[https://github.com/elbeno/skeleton][Skeleton]]: project to generate c++ project skeletons.
- split all of the configuration of CMake dependencies from main CMake
  file. Possible name: ConfigureX? ConfigureODB, etc. See how find_X
  is implemented.
- detect all projects by looping through directories.
- fix CMake generation so that most projects are generated by Dogen.
- add option to Dogen to generate test skeleton.
- detect all input models and generate targets by looping through
  them.
- add CMake file to find knitter etc and include those files in
  package. We probably should install dogen now and have dogen rely on
  installed dogen first, with an option to switch to "built" dogen.
- generate git ignore files with common regexes. See [[https://github.com/github/gitignore][A collection of
  useful .gitignore templates]]. We could also model it as a meta-model
  object with associated options so that the user does not have to
  manually edit the file.
- generate top-level CMake, allowing user to enter dependencies and
  their versions (e.g. Boost 1.62 etc) and CMake version.
- inject dogen support automatically to CMake (on a feature switch).
- determine the list of projects by looking at the contents of the
  input models directory.
- user to enter copyright, github URL.
- we probably need to create a kernel for dart due to the
  peculiarities of the directory structure.

*Directory Themes*

It seems obvious no one in C++ will agree with a single way of
structuring projects. The best way out is to start a taxonomy of these
project layouts (directory structure themes?) and add this to the
project generator as a theme. At present there are several already
available:

- [[https://github.com/vector-of-bool/vector-of-bool.github.io/blob/master/_drafts/project-layout.md][Project Layout]]: see also discussion in [[https://old.reddit.com/r/cpp/comments/996q8o/prepare_thy_pitchforks_a_de_facto_standard/][reddit]]. Also: [[https://vector-of-bool.github.io/2018/09/16/layout-survey.html][Project
  Layout - Survey Results and Updates]]
- [[https://build2.org/][Build2]]: the packaging system seems to have a preferred directory
  layout. In particular, see [[https://build2.org/build2-toolchain/doc/build2-toolchain-intro.xhtml#proj-struct][Canonical Project Structure]].
- GNU: gnu projects seem to have a well-defined structure, if not the
  most sensible.
- [[https://www.reddit.com/r/cpp/comments/cvuywh/structuring_your_code_in_directories/][Structuring your code in directories]]
- [[https://api.csswg.org/bikeshed/?force=1&url=https://raw.githubusercontent.com/vector-of-bool/pitchfork/develop/data/spec.bs#src.layout][The Pitchfork Layout (PFL)]]
- [[https://www.boost.org/development/requirements.html#Organization][Boost: Organization]]
- [[https://hiltmon.com/blog/2013/07/03/a-simple-c-plus-plus-project-structure/][A Simple C++ Project Structure]]

*Product Model*

Actually we have been going about this all wrong. What we've called
"orchestration" is in fact the product model. It is just lacking all
other entities in the product meta-model such as:

- injection/coding models: injection/coding models are themselves
  modeling elements within the product meta-model. However, to avoid
  having to load an entire coding/injection model, a product coding
  model can contain only the key aspects of the injection/coding
  models we're interested in: a) file or path to the model b)
  references c) labels: these allow us to group models easily such as
  say "pipeline" or "injection" etc. d) references: with this we can
  make a product graph of model dependencies. We can also avoid
  rereading models. we can also figure out what packages needed by the
  model graph.
- build systems: visual studio, msbuild, cmake
- ctest
- CI: travis, appveyor.
- kubernetes support, docker support.
- valgrind
- compiler: clang, gcc, msvc, clang-cl. Version of the compiler. This
  is used in several places such as the scripts, CI, etc.
- operative system: windows, linux. used in installation scripts, CI,
  etc.
- dependencies for install scripts; these are sourced from the
  component models.
- manual: org mode, latex
- org agile: product backlog, sprints, vision, etc.

Notes:

- a product may be associated with one or more primary technical
  spaces (e.g. support for say C# and C++ in the same model). This
  would have an impact at the product level.
- a product could have some simple wale templates so that when you
  initialise a product you would get a trivial dia model with a simple
  entry point (for executables) or a library with maybe no types.
- when generating a product we can generate all models (product and
  component), generate just the product, generate a specific component
  or generate a label (which groups components).
- we need a "init" command that initialises a product. It needs a
  product name and maybe some other parameters to determine what to
  add. Maybe it just makes a product model and asks the user to fill
  it in instead.
- there are several types of component models: 1) models that do not
  generate anything at all. these are useful for defining templates,
  configurations, etc. 2) regular component models 3) product
  models. 4) platform definition models that are used to adapt
  existing libraries into MASD.
- in this sense, we have two different models: product and
  component. Both of these need to be projected into artefact space
  (because we have multiple facets in products as well). This means we
  somehow need to use archetypes from both models.
- the product model should have meta-elements describing the component
  models (perhaps =masd::component_model::target=, with a matching
  =masd::component_model::reference= in the component models).
- See aslo the story about directories in dogen: [[*Move models into the project directory][Move models into the
  project directory]].
- we could create separate chains for product and component
  model. This would imply a need for distinct model types. On the
  product model, we would locate all of the meta-elements representing
  a component model, and for each of these, run the product model
  chain. For other meta-model elements we just run their associated
  transforms - hopefully not many as these are expected to be very
  simple elements. We should also make use of injection model caching
  to avoid reloading models.
- as with component models, we should also have templates for product
  models so that we could simply do a "dogen new product" or some such
  incantation and that would result in the creation of a dogen product
  model and possibly its initial generation. One slight problem is
  that if we do a "dogen new component" we still have to manually add
  the component to the product model.
- we need to have a separate injection adapter for product models so
  that we filter out "invalid" meta-elements for the model
  type. Similarly, in the component injection adapter, we should
  filter out product model meta-elements (travis build files, etc).

Links:

- [[https://github.com/bkaradzic/GENie][GENie - Project generator tool]]
- see [[https://github.com/cginternals/cmake-init][cmake-init]] for ideas.
- [[https://github.com/premake/premake-core][Premake: powerfully simple build configuration.]]
- [[https://jgcoded.github.io/CMakeStarter/][CMake Starter]]: "This website is a simple tool to help C++ developers
  quickly start new CMake-based projects. The tool generates an entire
  C++ project with boiler-plate CMake files and source code, and the
  generated project can be downloaded as a zip file."
- [[https://awfulcode.io/2019/04/13/professional-zero-cost-setup-for-c-projects-part-1-of-n/][Professional, zero-cost setup for C++ projects (Part 1 of N)]]:

*** Formatter meta-model elements                                     :story:

A second approach is to leave this work until we have a way to code
generate meta-model elements. Then we could have a way to supply this
information as meta-data - or perhaps it is derived from the position
of the element in modeling space? The key thing is we need a static
method to determine the meta-name, and a virtual method to allow
access to it via inheritance. Perhaps we need to capture this pattern
in a more generic way. It may even already exist in the patterns
book. Then the elements would become an instance of the pattern. We
should also validate that all descendants provide a value for this
argument (e.g. an element descendant must have the meta-name set). We
could also use this for stereotypes.

The binding of the formatter against the meta-type is interesting, in
this light. The formatter has a type parameter - the type it is
formatting. In fact the formatter may have a number of type
parameters - we need to look at the stitch templates to itemise them
all - and these are then used to generate the formatter's template. We
could take this a level up and say that, at least conceptually, there
is a meta-meta-type for formatters, which is made up of a
parameterisable type. Then we could declare the formatter as an
instance of this meta-meta-type with a well-defined set of
parameters. Then, when a user instantiates a formatter, we can check
that all of the mandatory parameters have been filled in and error if
not. In this case we have something like:

- =masd::structural::parameterisable_type=. This is a meta-type that
  has a list of KVPs. Some are mandatory, some are optional.
- =masd::codegen::meta_formatter=. This defines the parameters needed
  for the formatter, with default values etc.
- =masd::codegen::formatter=. This is the actual formatters. They must
  supply values for the parameters defined by the meta-formatter.

Of course, we do not need a three-level hierarchy for this, and if
this is the only case where these parameters are used, we could just
hard-code the formatter as a meta-element and treat it like we do with
all other meta-types. Interestingly, we could bind formatters to
stereotypes rather than meta-elements. This would allow us to avoid
binding into the dogen implementation, and instead think at the MASD
level (e.g. =dogen::assets::meta_model::structural::enumeration= is a
lot less elegant than =masd::enumeration= or even
=masd::structural::enumeration=).

We could also validate that the wale template exists. In fact, if the
wale template is a meta-model element, we can check for consistency
within resolution. However, we need a generic way to associate a wale
template with any facet. The ideal setup would be for users to define
wale templates as instances of a meta-model element which is
parameterisable (see above). In reality, what we have found here is
another pattern:

- there are templates as model elements. When we create a template we
  are instantiating a template's template.
- we can then constrain the world of possibilities in to a
  well-defined set of parameters which are needed for the specific
  template that we are working on. This has a meta-model element
  associated with it, and a file.
- the file is the template file. In the case of wale, the template
  file is then instantiated. This is done by associating facets with
  the wale templates, and for each facet, supplying the arguments to
  instantiate the template. We then end up with a number of actual
  CPP/HPP files.
- for stitch the process is a bit different. The main problem is
  because we incorrectly "weaved" the arguments into the stitch
  template. It made sense at the time purely because we don't really
  expect to instantiate a given stitch template N times; it is really
  only done once. This was slightly misleading. Because of this we
  hard-coded the behaviour related to certain keys (e.g. includes,
  etc). If instead we somehow handle stitch in exactly the same way as
  we handle wale, we can keep the templates in a common template
  directory; then associate them to specific facets via meta-data, and
  supply the arguments as part of the same meta-data. The template
  would then just contain the code that would be weaved. A formatter
  is then a meta-model element associated with a wale template for the
  header file and - very interestingly - a wale template for the cpp
  file _which generates stitch templates_. The user then manually
  fills in the stitch template, but supplies any parameters (remember
  these are fixed) in the meta-model element. Generation will then
  produce the CPP
- the logical consequence of this approach is that we must reference
  the c++ generation model in order to create new formatters, because
  it will contain the templates. However, because the wale content of
  the template is located in the filesystem, it will not be possible
  to instantiate the template. We need instead to find a way to embed
  the content of the template into the model element itself. Then the
  reference would be sufficient. The downside is that, in the absence
  of org-mode injectors, these templates will be extremely difficult
  to manage (imagine having to update a dia comment with a wale
  template every time you need to change the template). On the plus
  side, we wouldn't have to have a set of files in the filesystem,
  which would make things a bit "neater".
- in fact, we have two use cases: the templates which generate
  generators (e.g. stitch) and so must be loaded into the code
  generator and the templates which are a DSL and so can be
  interpreted. Ultimately these should have a JSON object as
  input. Ultimately there should be a JSON representation of instances
  of the meta-model that can be used as input. However, what we are
  saying is that there is a ladder of flexibility and each has its own
  use cases:

  - code generated;
  - code generated with overrides;
  - DSL templates;
  - generator templates;
  - handcrafted

  Each of these has a role to play.

*** Private and public includes                                       :story:

#+begin_quote
*Story*: As a dogen user, I want to hide some internal types from
users so that I don't increase coupling for no reason.
#+end_quote

NOTE: We should use the terms =internal= and =external= to avoid
confusion with C++ scopes. This follows Microsoft terminology for C#
assemblies.

At present we are making all headers in a model public. However, for
models such as cpp this doesn't make any sense since only one type
should be available to the outside world. What we really need is a
separation between public and private headers, a functionality similar
to =internal= in C#. In conjunction with [[*Build%20shared%20objects%20instead%20of%20dynamic%20libraries][using shared objects]], this
should improve build times.

In order to do this:

- add a new config parameter: default visibility to private or default
  visibility to public. This is just so we don't have to mark all
  types manually - instead we just need to mark the exceptions.
- add two new stereotypes: =public= and =private=.
- add enum to sml: =visibility_type= (check with .Net for
  names). Valid values are =public=, =private=. Objects, enumerations,
  etc will have this enum.
- locator will now respect this value when producing an absolute file
  path. If public files go under =include/public=, if private files go
  under =include/private=.
- CMakelists for the component will add to the include path the
  private directory. Same for the spec CMakelists. Need to check that
  this not add to the global include path.
- CMakelists for the include files will only package the public
  headers.
- mark all the types accordingly in all our models. fix all the
  ensuing breakage. we will probably need to move forward on the IoC
  front in order for this to work as we don't want to expose
  implementations - e.g. =workflow_interface= will be public but
  =workflow= will be private; this means we need some kind of factory
  to generate =workflow_interface=.

More thoughts on this:

- we don't really need to have different directories for this; we
  could just put all the include files in the same directory. At
  packaging time, we should only package the public files (this would
  have to be done using CPack).
- also the GCC/MSVC visibility pragmas should take into account these
  options and only export public types.
- the slight problem with this is that we need some tests to ensure
  the packages we create are actually exporting all public types; we
  could easily have a public type that depends on a private type
  etc. We should also validate yarn to ensure this does not
  happen. This can be done by ensuring that a type marked as external
  only depends on types also marked as external and so forth.
- this could also just be a packaging artefact - we would only package
  public headers. Layout of source code would remain the same.
- when module support is available, we could use this to determine
  what is exported on the module interfaces.

*** Integration of archetypes into assets                             :story:

Up to recently, there was a belief that the archetypes model was
distinct from the assets model. The idea was that the projection of
assets into archetype space could be done without knowledge of the
things we are projecting. However, that is demonstrably false: n order
to project we need a name. That name contains a location. The location
is a point on a one-dimensional asset space.

In reality, what we always had is:

- a first dimension within assets space: "modeling dimension",
  "logical dimension"? It has an associated location.
- a second dimension within assets space: "physical dimension", with
  an associated location. Actually we cannot call it physical because
  physical is understood to mean the filesystem.

So it is that concepts such as archetype, facet and technical space
are all part of assets - they just happen to be part of the
two-dimensional projection. Generation is in effect a collection of
model to text transforms that adapts the two-dimensional element
representation into the extraction meta-model. Formatters are model to
text transforms which bind to locations in the physical dimension.

In this view of the world, we have meta-model elements to declare
archetypes, with their associated physical locations. This then
results in the injection of these meta-elements. Formatters bind to
these locations.

However, note that formatters provide dependencies. This is because
these are implementation dependent. This means we still need some
transforms to occur at the generation level. However, all of the
dependencies which are modeling related should happen within
assets. Only those which are formatter specific should happen in
generation. The problem though is that at present we deem all
dependencies to be formatter specific and each formatter explicitly
names its dependencies against which facets. It does make sense for
these to be together.

Perhaps what we are trying to say is that there are 3 distinct
concepts:

- modeling locations;
- logical locations;
- physical locations.

The first two are within the domain of assets. The last one is in the
domain of generation and extraction. Assets should make the required
data structures available, but it is the job of generation to populate
this information. Thus directory themes, locator, etc are all
generation concepts.

One could, with a hint of humour, call the "logical dimension" the
meta-physical dimension. This is because it provides the meta-concepts
for the physical dimension.

A backend provides a translation into a representation considered
valid according to the rules of a technical space. A backend can be
the primary or secondary backend for a technical space. A component
can only have a primary backend, and any number of secondary
backends. Artefacts produced by a backend must have a unique physical
location. In LAM mode, the component is split into multiple
components, each with their own primary technical space.

*** Replace traits with calls to the formatters                       :story:

Where we are using these traits classes, we should really be including
the formatter and calling for its static name - at least within each
backend.

*** Make creating new facets easier                                   :story:

For types that are stitchable such as formatters, we need to always
copy and paste the template form another formatter and then update
values. It would be great if we could have dogen generate a bare-bones
stitch template. This is pretty crazy so it requires a bit of
concentration to understand what we're doing here:

- detect that the =yarn::object= is annotated as
  =quilt.cpp.types.class_implementation.formatting_style= =stitch=.
- find the corresponding expected stitch file. If none is available,
  /dynamically/ change the =formatting_style= to =stock= and locate a
  well-known stitch formatter.
- the stitch formatter uses a stitch template that generates stitch
  templates. Since we cannot escape stitch markup, we will have to use
  the assistant. One problem we have is that the formatter does not
  state all of the required information such as what yarn types does
  it format and so forth. We probably need a meta-model concept to
  capture the idea of formatters - and this could be in yarn - and
  make sure it has all of this information. This also has the
  advantage of making traits, initialisers etc easier. We can do the
  same for helpers too.
- an additional wrinkle is that we need different templates for
  different languages. However, perhaps these are just wale templates
  in disguise rather than stitch templates? Then we can have the
  associated default wale templates, very much in the same way we have
  wale templates for the header files. They just happen to have stitch
  markup rather than say C++ code.

This is a radically different way from looking at the code. We are now
saying that yarn should have concepts for:

- facets: specialisation of modules with meta-data such as facet name
  etc. This can be done via composition to make our life easier.
- formatters and helpers: elements which belong to a facet and know of
  their archetype, wale templates, associated yarn element and so
  forth.

We then create stereotypes for these just like we did for
=enumeration=. As part of the yarn parsing we instantiate these
meta-objects with all of their required information. In addition, we
need to create what we are calling at present "profiles" to define
their enablement and to default some of its meta-data.

When time comes for code-generation, these new meta-types behave in a
more interesting way:

- if there is no stitch template, we use wale to generate it.
- once we have a stitch template, we use stitch to generate the c++
  code. From then on, we do not touch the stitch template. This
  happens because overwrite is set to false on the enablement
  "profile".

Merged stories:

*Code generate initialisers and traits*

If we could mark the modules containing facets with a stereotype
somehow - say =facet= for example, we could automatically inject two
meta-types:

- =initialzer=: for each type marked as =requires_initialisation=,
  register the formatter. Register the types as a formatter or as a
  helper.
- =traits=: for each formatter in this module (e.g. classes with the
  stereotype of =C++ Artefact Formatter= or =C# Artefact Formatter=),
  ask for their archetype. The formatters would have a meta-data
  parameter to set their archetype. In fact we probably should have a
  separate meta-data parameter (archetype source? archetype?).

We may need to solve the stereotype registration problem though, since
only C++ would know of this facet. Or we could hard-code it in yarn
for now.

Notes:

- how does the initialiser know the formatter is a =quilt.cpp=
  formatter rather than say a C# formatter? this could be done via the
  formatter's archetype - its the kernel.
- users can make use of this very same mechanism to generate their own
  formatters. We can then load up the DLL with boost plugin. Note that
  users are not constrained by the assets meta-model. That is to say,
  they can create new meta-types and inject them into assets. Whilst
  we don't support this use case at present, we should make sure the
  framework does not preclude it. Their DLL then defines the
  formatters which are able to process those meta-types. The only snag
  in all of this is the expansion machinery. We use static visitors
  all over the place, and without somehow dynamically knowing about
  the new types, they will not get expanded. We need to revisit
  expansion in this light to see if there is a way to make it more
  dynamic somehow, or at least have a "default" behaviour for all
  unknown types where we do the generic things to them such as
  computing the file path, etc. This is probably sufficient for the
  vast majority of use cases. The other wrinkle is also locator. We
  are hard-coding paths. If the users limit themselves to creating
  "regular" entities rather than say CMakeLists/msbuild like entities
  which have some special way to compute their names, then we don't
  have a problem. But there should be a generic way to obtain all path
  elements apart from the file name from locator. And also perhaps
  have facets that do not have a facet directory so that we can place
  types above the facet directories such as SLNs, CMakeLists, etc.

*** Consider adding descriptions to feature bundles                   :story:

It would be nice if we could add the feature bundle as an entry into
dumpspecs, with an associated description. For example, say for
=masd.generation.decoration=, explaining what a decoration is.

*** Create the notion of project destinations                         :story:

At present we have conflated the notion of a facet, which is a logical
concept, with the notion of the folders in which files are placed - a
physical concept. We started thinking about addressing this problem by
adding the "intra-backend segment properties", but as the name
indicates, we were not thinking about this the right way. In truth,
what we really need is to map facets (better: archetype locations) to
"destinations".

For example, we could define a few project destinations:

: masd.generation.destination.name="types_headers"
: masd.generation.destination.folder="include/masd.cpp_ref_impl.northwind/types"
: masd.generation.destination.name=top_level (global?)
: masd.generation.destination.folder=""
: masd.generation.destination.name="types_src"
: masd.generation.destination.folder="src/types"
: masd.generation.destination.name="tests"
: masd.generation.destination.folder="tests"

And so on. Then we can associate each formatter with a destination:

: masd.generation.cpp.types.class_header.destination=types_headers

Notes:

- these should be in archetypes models.
- with this we can now map any formatter to any folder, particularly
  if this is done at the element level. That is, you can easily define
  a global mapping for all formatters, and then override it
  locally. This solves the long standing problem of creating say types
  in tests and so forth. With this approach you can create anything
  anywhere.
- we need to have some tests that ensure we don't end up with multiple
  files with the same name at the same destination. This is a
  particular problem for CMake. One alternative is to allow the
  merging of CMake files, but we don't yet have a use case for
  this. The solution would be to have a "merged file flag" and then
  disable all other facets.
- this will work very nicely with profiles: we can create a few out of
  the box profiles for users such as flat project, common facets and
  so on. Users can simply apply the stereotype to their models. These
  are akin to "destination themes". However, we will also need some
  kind of "variable replacement" so we can support cases like
  =include/masd.cpp_ref_impl.northwind/types=. In fact, we also have
  the same problem when it comes to modules. A proper path is
  something like:
  - =include/${model_modules_as_dots}/types/${internal_modules_as_folders}=
  - =include/${model_modules_as_dots}/types/${internal_modules_as_dots}.=
  - =include/${model_modules_as_dots}/types/${internal_modules_as_underscores}_=

  This is *extremely* flexible. The user can now create a folder
  structure that depends on package names etc or choose to flatten it
  and can do so for one or all facets. This means for example that we
  could use nested folders for =include=, not use model modules for
  =src= and then flatten it all for =tests=.
- actually it is a bit of a mistake to think of these destinations as
  purely physical. In reality, we may also need them to contribute to
  namespaces. For example, in java the folders and namespaces must
  match. We could solve this by having a "module contribution" in the
  destination. These would then be used to construct the namespace for
  a given facet. Look for java story on backlog for this.
- this also addresses the issue of having multiple serialisation
  formats and choosing one, but having sensible folder names. For
  example, we could have boost serialisation mapped to a destination
  called =serialisation=. Or we could map it to say RapidJSON
  serialisation. Or we could support two methods of serialisation for
  the same project. The user chooses where to place them.

*** Model "types" and element binding                                 :story:

It seems clear that we will have different "types" of models:

- product models, describing entire products.
- component models, which at present we call "models". These describe
  a given component type such as a library or an executable. Thus,
  they themselves have sub-types.
- profile models: useful to keep the configuration separate. However,
  it may make more sense to place them in the product model, since its
  shared across components?
- PDMs: these describe platforms.

At present there is no concept of model types, so any meta-model
element can be placed in any model. This is convenient, but in the
future it may make things too complicated: users may end up placing
types in PDMs when they didn't meant to do so, etc. What seems to
emerge from here is that, just as with variability, there is a concept
of a binding point at the model level too. That is, meta-model
elements are associated with specific model types (binding element?).

In an ideal world, we should have a class in the meta-model that
represents each model type. We then instantiate this class within one
of the dogen models to register the different model types. Its
code-generation representation is the registration. It also binds to
all the meta-model elements it binds to. This can be done simply by
creating a feature that lists the stereotypes of the elements
(remember that these are then registered too, because we will generate
the meta-class information as we generate the assets model). Then, we
can ask the model type if a given element is valid (check a set of
stereotypes).

Formatters are themselves meta-model elements, and they bind to other
meta-model elements (which raises the question: which meta-model
elements are bindable? we can't allow a formatter to bind to a
formatter...). Perhaps we need another type of model, which is a
"generation model". This is where we can either declare new technical
spaces or add to existing technical spaces; and declare new facets and
formatters. We should be able to add to existing facets and TSs by
allowing users to specify the TS/facet when declaring the
formatter. If not specified, then the user must declare a facet in the
package containing the formatter. Similarly with TSs.

Note also that the formatter binding code is "inserted" directly
during generation into the CPP file. Its not possible to change
it. Same with the includes. This ensures the user cannot bypass the
model type system by mistake. Also, by having a formatter meta-model
type, we can now declare the header file as we please, and ensure the
shape of the implementation. Now, the stitch template can be
restricted to only the formatting function itself; the rest is
code-generated. We no longer need wale templates. This will of course
require the move to PDMs and the removal of the helper code. This also
means that anyone can declare new meta-model elements; they will
register themselves, and correctly expand across archetype
space. However, we do not have the adaption code nor do we have
containers for these modeling elements. We need a separate story for
this use case.

Destinations are meta-model elements too. In the generation.cpp model
we will declare all the available destinations:

- global
- src
- include
- tests

etc. The formaters bind into destinations. Formatters belong to facets
in the archetype space, which express themselves as directories in the
artefact path when we project from archetype space into artefact
space. More generally: assets in asset space are projected into the
multidimensional archetype space. Archetypes are projected into
artefact space, but the dimensions of archetype space are flattened
into the hierarchy of the filesystem.

We also need a concept of artefact types. These mainly are needed for
file extensions, but conceivably could also be used for other
purposes.

Notes:

- the binding should be done at the streotype level, not model
  element.

*** Associate includes with model elements                            :story:

The right solution for the formatter includes is to supply them as
meta-data in the model element. This has the advantage that we can
then make use of profiles. At present we have one way to supply
includes: the primary and secondary includes:

: "masd.generation.cpp.io.class_header.primary_inclusion_directive": "<boost/property_tree/json_parser.hpp>",
: "masd.generation.cpp.io.class_header.secondary_inclusion_directive": "<boost/algorithm/string.hpp>",

This does a part of the job: we can associate up to two include
directives with one facet and element. However:

- by using this machinery we are effectively replacing the original
  include.
- the includes will occur for anyone who references the type. Though
  however, since the includes are applicable only to the class
  implementation this is less of a problem. Technically its still
  incorrect though because these are not the includes needed to use
  the type but the includes needed to define the type.

For formatters, we kind of need to make the includes only happen when
we are building the formatter. If we could have a similar machinery,
but without adding to types referencing the type, this would give us a
way to declare all of the formatters dependencies. Then, we could
switch to building all of the stitch boilerplate outside of stitch and
supplying it as a KVP.

*** Move models into the project directory                            :story:

At present we have a models directory in each component of a
product. However, perhaps it makes more sense to have it as a
subdirectory of the component itself. This is because in an ideal
world, we should create a package for the component with the model and
the header files as well as the binaries, allowing users to consume
it:

- in the Dogen case, it means users can create plugins for Dogen;
- in the PDM case, it means users can make use of the PDM in their own
  models;
- for user models, it means you can consume a product in another
  product by referencing its models.

However, one downside of this approach is that we then need to have
many directories in the include path for models. If we take the
include headers as an example, there are a small number of directories
in the path:

- compiler specific directories
- =/usr/include=
- ...

Maybe we have two separate issues here:

- when creating a product, where should the models be placed? If we
  keep in mind that models are themselves an asset like any other and
  as such require a meta-model representation, it would be logical to
  keep the model with the component it generates (just like we keep
  the product model within the product it generates). This means for
  instance that we could easily initialise a component via the command
  line and create a "template" blank model (in dia or JSON) with a
  number of things already set. We probably also need a way to avoid
  deleting multiple files (e.g. if we have both a dia and a JSON
  model, we need to know to ignore both of them). This means that when
  building a product we need multiple include directories for models,
  just as we do for headers. This work should be done as part of
  adding products to the asset model because models will be in the
  same namespace. The dia and JSON directories are then the facets for
  the model. This also means that we can now add the targets for
  generation, conversion etc directly into each component. So,
  somewhat paradoxically, when we create a model, we need to have a
  model of the model in it (or maybe two models of the model, Dia and
  JSON). Interestingly, now that we have a model of the model, we can
  suddenly move all of the keys that we have placed at the top-level
  into this modeling element. We can aslo associate it with a profile
  via stereotypes, removing the need for
  =masd.variability.profile=. And if we take it to the next leve, then
  perhaps references are themselves also modeling elements. Its not
  clear if this is an advantage though.
- from a "consumption" perspective, perhaps we could have a single
  =shared/dogen/models= directory, just like we will also place all of
  the PDM's includes under =/usr/include= and the SO's under
  =/usr/lib=. We could split it into Dia and JSON if need be.
- the product model itself should be at the top-most directory of the
  git repository. We also need a "models" directory to store models
  which are not expressed as source code (profiles, PDMs, etc). Then,
  for each component, we should have the models at the root directory
  of the component. Whilst this is not in line with our OCD, it is
  required in order for the product model to be able to locate the
  component models. An alternative is to have a convention that we
  always look into a "models" directory (which can be renamed via a
  meta-data parameter) for models, plus any additional directories in
  the "model path". We must inject the model file names to dogen so
  that we do not delete the models.

*** Formatters can only belong to one facet                           :story:

Up to know there was an agreement that generation space was
hierarchical and formatters could only belong to one facet. This has
been true until now, but with the addition of CMake support to tests,
we now have an exception: we need to honour both the tests facet and
the cmake facet. If either of them are off, then we should not emit
the CMake file. This means that we need to somehow map one formatter
to multiple facets. For now we just hacked it and used one of the
facets. It means that if you disable CMake but enable testing you'll
still end up with the testing CMake file.

*** Project layout analysis                                           :story:

We should probably look at the layout of a few projects and see if our
meta-model covers these cases.

Links:

- [[http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1204r0.html][Canonical Project Structure]]
- [[https://www.reddit.com/r/cpp/comments/8qzepa/poll_c_project_layout/][Poll: C++ project layout]]
- [[https://www.reddit.com/r/cpp/comments/996q8o/prepare_thy_pitchforks_a_de_facto_standard/][Prepare thy Pitchforks: A (de facto) Standard Project Layout]]
- [[https://github.com/vector-of-bool/pitchfork][Pitchfork is a Set of C++ Project Conventions]]
- [[https://mariuszbartosik.com/directory-structure-for-a-c-project/][Directory Structure for a C++ Project]]

** Deprecated
