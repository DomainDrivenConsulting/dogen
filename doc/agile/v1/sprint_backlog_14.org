#+title: Sprint Backlog 14
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Finish work on moving decorations to metamodel.
- Start work on moving profiles to metamodel.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2019-03-26 Tue 06:52]
| <75>                                                   |        |      |      |       |
| Headline                                               | Time   |      |      |     % |
|--------------------------------------------------------+--------+------+------+-------|
| *Total time*                                           | *7:15* |      |      | 100.0 |
|--------------------------------------------------------+--------+------+------+-------|
| Stories                                                | 7:15   |      |      | 100.0 |
| Active                                                 |        | 7:15 |      | 100.0 |
| Edit release notes for previous sprint                 |        |      | 1:47 |  24.6 |
| Sprint and product backlog grooming                    |        |      | 0:46 |  10.6 |
| Create a video demo for the previous sprint's features |        |      | 3:11 |  43.9 |
| Promote extraction entities to meta-model elements     |        |      | 1:31 |  20.9 |
#+TBLFM: $5='(org-clock-time%-mod @3$2 $2..$4);%.1f
#+end:

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2019-03-25 Mon 14:43]
    :LOGBOOK:
    CLOCK: [2019-03-25 Mon 15:01]--[2019-03-25 Mon 15:44] =>  0:43
    CLOCK: [2019-03-25 Mon 10:18]--[2019-03-25 Mon 11:22] =>  1:04
    :END:

Add github release notes for previous sprint.

Title: Dogen v1.0.13, "Clube Náutico"

#+begin_src markdown
![Clube Náutico](https://restauranteclubenauticomocamedes.files.wordpress.com/2010/07/nautico_023.jpg)
_Esplanada do Náutico Club, Moçamedes, Namibe Province, Angola. (C) 2019 [Nautico Club Site](https://restauranteclubenauticomocamedes.wordpress.com)_.

# Introduction

The sprint cadence seems to finally be establishing itself, with sprint 13 offering yet another solid 2-week effort. The main emphasis was on solving the unit testing of generated code. If you recall, we had some sparse manual tests for these, delightfully called the "canned tests". These weren't exactly brilliant, but did provide _some_ kind of coverage. Sadly, we ended up having to disable them due to weird and wonderful failures on OSX and Windows, which we could not reproduce on Linux and which were rather difficult to get to the bottom of via CI because of the way the tests were designed.

As the next few sprints are all about very (hard-)core changes, we had to make sure a strong testing base is in place before we can proceed with the refactoring. As usual, the work was much harder than expected, taking us the best part of two sprints to get into a good place: sprint 12 was all about the system test story, and sprint 13 is all about the unit tests story. Fortunately, we still managed to sneak in one useful feature.

The below chart breaks down the cost of each story worked percentage-wise in terms of the overall sprint time.

![Story Pie Chart](https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/agile/v1/sprint_13_pie_chart.jpg)

The next sections provide a summary of the most significant stories. As usual, for more details of the work carried out this sprint, see [the sprint log](https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_13.org).

# Internal Changes

In this section we cover stories that consumed significant resources but are only visible internally.

## Sprint and product backlog grooming

In this sprint we spent quite a lot of time grooming the backlogs. This is something which never gets much of a mention, but which I believe is one of the most important aspects of Agile: [you need to keep your product backlog in good shape](http://mcraveiro.blogspot.com/2016/01/nerd-food-on-product-backlogs.html). Perhaps spending 15% of the total time of a sprint grooming backlogs may sound _a tad_ excessive, but in our defence we do have a [hefty product backlog](https://github.com/MASD-Project/dogen/blob/master/doc/agile/product_backlog.org), with over 550 user stories at various levels of detail. Also, given that we have just finished a massive rewrite of the theoretical basis for Dogen, it is no surprise that a lot of the stories started to bit-rot. This clean up was mainly to look for low hanging fruit and remove all stories which are completely deprecated; subsequent clean-ups will delve more into the detail of the stories.

# User visible changes

This section covers stories that affect end users. The sprint demo provides a quick demonstration on how the user visible changes; the below sections provide more detail.

[![Sprint 1.0.12 Demo](https://img.youtube.com/vi/yerm2xiKBqA/0.jpg)](https://youtu.be/yerm2xiKBqA)

## Code generation of tests for dogen models

This story had started on the previous sprint, but, as always, proved to be much more complicated than anticipated. Whilst the story is user facing - in that users can enable it for their own models - its purpose is very much just to test the code generator, so its not really that helpful to end users outside of Dogen.

Though in theory adding tests seems just like adding another facet - and since we already have quite a number of these - we were pretty confident this would be a "quick effort". In practice, there were subtle differences with tests that caused large problems. These in turn forced some changes to the core of Dogen. On the plus side, the pain seems to be worth it, as we are now testing pretty much all facets for all generated code, across both Dogen itself and the Reference Implementation on all supported platforms. Even better, they are all green:

![CDash builds](https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/cdash_dogen_all_builds.png)

Whilst coverage is extensive, unfortunately we do not yet cover ODB (C++ ORM mapping) nor C# (which still relies on canned tests). In addition, build time has gone up quite considerably, given that we now need to compile the test data facet for all of these types, plus the tests too. The following chart demonstrates this problem:

![Nightly build time](https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/dogen_nightly_build_time.png)

As a result of this increase, MSVC is no longer able to complete the builds within the allotted time. Fortunately our clang-cl builds are deemed good enough (only one test failure across some 2.7k tests) so we'll be shipping that to users from now on. In the future we will need to look into ways of decreasing build time, as we are very close to the edge on OSX and clang-cl.

## Delete empty directories

In the past we used to generate all facets for all models, Dogen and Reference Implementation. However, over time we ended up having to disable most facets as the build time was getting out of control. Dogen correctly deleted all of the generated files when the acets were disabled, but left behind a number of empty directories. Worse: because git does not care about empty directories, we weren't even aware of their existence until some speculative filesystem browsing revealed them. This sprint adds a new knob to delete any empty directory under the project: ```delete_empty_directories```. Together with ```delete_extra_files```, this should mean that most generated lint is taken care of now.

```
#DOGEN masd.extraction.delete_extra_files=true
#DOGEN masd.extraction.delete_empty_directories=true
```
## Rename of extraction fields

One user facing change was actually a bug. Some generation fields had been placed incorrectly in extraction. This was spotted and fixed in this release. The change is not backwards compatible. As an example, a model with the following fields:

```
#DOGEN masd.extraction.cpp.enabled=true
#DOGEN masd.extraction.cpp.standard=c++-17
#DOGEN masd.extraction.cpp.msbuild.enabled=false
#DOGEN masd.extraction.cpp.visual_studio.project.enabled=false
#DOGEN masd.extraction.cpp.visual_studio.solution.enabled=false
#DOGEN masd.extraction.csharp.enabled=false
```

Now becomes:

```
#DOGEN masd.generation.cpp.enabled=true
#DOGEN masd.generation.cpp.standard=c++-17
#DOGEN masd.generation.cpp.msbuild.enabled=false
#DOGEN masd.generation.cpp.visual_studio.project.enabled=false
#DOGEN masd.generation.cpp.visual_studio.solution.enabled=false
#DOGEN masd.generation.csharp.enabled=false
```

This change affects all facets in C# and C++, so if you are configuring these directly you will need to manually update your models.

# Next Sprint

We risk repeating the same words as we used on Sprint 12, but here it goes anyway: that we have the testing in place, our key objective for next sprint is to move all of the decoration related code into the meta-model. We started work on this in the previous sprint but sadly ran out of time. In addition, we hope to finally make some  inroads against moving annotations to the metamodel. This will be a significant major feature, at long last.

# Binaries

You can download binaries from [Bintray](https://bintray.com/masd-project/main/dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_1.0.13_amd64-applications.deb](https://dl.bintray.com/masd-project/main/1.0.13/dogen_1.0.13_amd64-applications.deb)
- [dogen-1.0.13-Darwin-x86_64.dmg](https://dl.bintray.com/masd-project/main/1.0.13/dogen-1.0.13-Darwin-x86_64.dmg)
- [dogen-1.0.13-Windows-AMD64.msi](https://dl.bintray.com/masd-project/main/DOGEN-1.0.13-Windows-AMD64.msi)

**Note**: Windows builds are now generated using clang-cl rather than MSVC.

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/1110195455487631365][Tweet]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6515961706701819904/][LinkedIn]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

*** STARTED Sprint and product backlog grooming                       :story:
    :LOGBOOK:
    CLOCK: [2019-03-26 Tue 06:15]--[2019-03-26 Tue 06:52] =>  0:37
    CLOCK: [2019-03-25 Mon 10:08]--[2019-03-25 Mon 10:17] =>  0:09
    :END:

Updates to sprint and product backlog.

*** COMPLETED Create a video demo for the previous sprint's features  :story:
    CLOSED: [2019-03-25 Mon 14:43]
    :LOGBOOK:
    CLOCK: [2019-03-25 Mon 14:44]--[2019-03-25 Mon 15:01] =>  0:17
    CLOCK: [2019-03-25 Mon 13:17]--[2019-03-25 Mon 14:43] =>  1:26
    CLOCK: [2019-03-25 Mon 12:45]--[2019-03-25 Mon 13:16] =>  0:31
    CLOCK: [2019-03-25 Mon 11:23]--[2019-03-25 Mon 12:20] =>  0:57
    :END:

Demo the delete empty directories feature.

*** STARTED Promote extraction entities to meta-model elements        :story:
:LOGBOOK:
CLOCK: [2019-03-25 Mon 18:27]--[2019-03-25 Mon 18:41] =>  0:14
CLOCK: [2019-03-25 Mon 17:27]--[2019-03-25 Mon 18:02] =>  0:35
CLOCK: [2019-03-25 Mon 16:43]--[2019-03-25 Mon 17:15] =>  0:32
CLOCK: [2019-03-25 Mon 16:32]--[2019-03-25 Mon 16:42] =>  0:10
:END:

As with mappings, profiles and templates, we should make modelines,
modeline groups, licences and location strings meta-model elements
too. It may require a little bit of thinking because they are not
simple KVPs - but we also have support for arrays in annotations.

The final destination is for users to create modeline configurations
or reuse the dogen ones.

Notes:

- In theory we should be able to load modelines incrementally, as they
  are only needed for code generation. However, order of references
  will matter because we need to validate references to
  modelines. Actually this is not a problem because we will process
  them after merging. Decorations can be generated at the very end.
- though it is probably overkill, it would be nice to be able to
  inherit from modelines; then we could define all the common fields
  on a parent.
- decoration repository moves to become properties of the model
  itself.
- decoration properties becomes just decoration. Can stay property of
  the element, though perhaps we need to distinguish between
  decoratable elements and those that are not. Make them optional?
- modeline_group, modeline, modeline_field, licence_text, marker (real
  name: location strings) become meta-model entities.
- decoration is a mapping of meta-type to modeline name. All coding
  elements for a kernel map to the technical space, except for build
  files, etc. This could be achieved by adding some meta-data. The
  good thing about this approach is that we can create a profile for
  these and make it transparent to users
  (=masd::standard_modelines=?).
- decoration of elements must be done after mapping has taken
  place. We will rely on the output language to determine the correct
  modeline.
- due to the fact that fabric types are still not in coding, we need
  to do decoration expansion as a two-phase process. We need to have
  the exact same transform present in both generation and coding. This
  is a bit painful and since its only temporary, a waste of time
  really. A better alternative would be to move all of fabric types
  into coding first - the simplest possible way, e.g. copy and paste,
  rename. We could use the injector as is in fabric. Then as the last
  step in coding, we could do the decoration transform. A simpler
  alternative is to just move the dynamic transform chain to
  coding. This means we don't have to touch fabric at all. We can add
  it to the post-assembly chain. Then we can execute the decoration
  transform. It must be done post mapping so that we have a concrete
  language set on the model. This is required both by the dynamic
  transform as well as the decoration transform.
- actually, we can only perform decoration expansion after we done the
  mapping to the output language. We need this information to
  determine the modelines. We need to unwind all the work on moving
  dynamic factories into coding.

Tasks:

- update qname in modeline group to string.
- implement modeline transform.
- update name to have dot separated and colon separated qualified
  names
- move dynamic transforms into coding again.
- implement decoration transform in post assembly chain after dynamic
  transform. Use the qualified name to find the correct modeline.
- implement the decoration formatters in generation.
- remvoe legacy decoration code in extraction.

Merged stories:

*Licences as meta-model elements*

Continuing the trend, licences are also moeta-model elements. We can
use the comments of a class to convey the licence text. The name
becomes the license name. Users use named configurations to assign
licences to elements. All artefacts produced across all facets for an
element will share the same licence. Users can easily add their own
licence (at whichever level they choose, product line, product,
component) and then refer to it. The only change is that they must now
prefix it with the model name (e.g. =masd::licenses::gpl_v2=).

In theory we should be able to load licences incrementally, as they
are only needed for code generation. However, order of references will
matter because we need to validate references to licences.

We should also allow for both:

- full licence: used later at the product level.
- licence summary: used for preambles in files.

*** Add support for decoration configuration overrides                :story:

At present we have hard-coded the decoration configuration to be read
from the root object only. In an ideal world, we should be able to
override some of these such as the copyrights. It may not make sense
to be able to override them all though.

*** Copyright holders is scalar when it should be an array            :story:

At present its only possible to specify a single copyright holder. It
should be handled the same was as odb parameters, but because that is
done with a massive hack, we are not going to extend the hack to
copyright holders.

*** Update copyright notices                                          :story:

We need to update all notices to reflect personal ownership until DDC
was formed, and then ownership by DDC.

- first update to personal ownership has been done, but we need to
  test if multiple copyright entries is properly supported.

*** Check if enable kernel directories is on extraction               :story:

When we moved the kernel logic into yarn from quilt, we did not rename
the traits.

*** Update metrics in OpenHub                                         :story:

For some reason our metrics are stuck at 5 months ago or so. It is
actually mildly useful to know the number of lines of code etc.

We probably need to delete and re-add the project.

*** Code generate all contexts                                        :story:

At present we are manually generating the transform contexts across
all models. The main reason for this is that tracer does not support
IO. There may be other reasons such as the annotations factory and
annotation expander. We should just add IO support for all types that
need it and code generate the contexts.



*** Add "ioable" handcrafted types                                    :story:

Whenever we need to mix and match generated types with handcrafted
types, it would be really useful to create the missing facets. The
main one is IO, but we probably also need test data support because
the tests would fail. We could simply handcraft the types on those
facets. It would be nice to have profiles like:

: masd::handcrafted_types
: masd::handcrafted_io
: masd::handcrafted_test_data

We could do with a simpler word for handcrafted. Check the literature.

Once this is in place, we could have some top-level stereotype that
aggregates all three (=masd::???=) and we can then tag types with it.

*** Read =generate_preamble= from dynamic object                      :story:

We need to generate the field definitions and update the general
settings factory.

*** Improve formatters code generation marker                         :story:

Things the marker can/should have:

- model level version;
- the dogen version too. However, this will make all our tests break
  every time there is a new commit so perhaps we need to have this
  switched off by default.

*** Consider introducing formatter "location strings"                 :story:

In MDSD, we have the notion of "location strngs" (volter, p.153):

#+begin_quote
A third and very useful technique is the application of location
strings that identify the transformation or the template used, as well
as the underlying model elements in the generated code. A location
string might look like this:

: [2003-10-04 17:05:36]
: GENERATED FROM TEMPLATE SomeTemplate
: MODEL ELEMENT aPackage::aClass::SomeOperation().
#+end_quote

This may be a useful thing. However, adding dates and dogen version
etc will cause spurious diffs.

*** Move wale templates from the data directory                       :story:

At present we have wale templates under the data directory. This is
not the right location. These are part of a model just like stitch
templates. There is one slight wrinkle though: if a user attempts to
create a dogen formatter (say if plugins were supported), then we need
access to the template from the debian package. So whilst they should
live in the appropriate model (e.g. =generation.cpp=,
=generation.csharp=), they also need to be packaged and shipped.

Interestingly, so will all dogen models which are defining annotations
and profiles. We need to rethink the data directory, separating system
models from dogen models somehow. In effect, the data directory will
be, in the future, the system models directory.

So, in conclusion, two use cases for wale templates:

- regular model defines a wale template and makes use of it. Template
  should be with the model, just like stitch templates. However,
  unlike stitch, there should be a directory for them.
- user model wants to define a new formatter. It will make use of
  dogen profiles and wale templates. These must be in the future data
  directory somehow.


** Deprecated
*** CANCELLED Fix =cp= error on cmake with local third-party packages :story:
    CLOSED: [2019-03-26 Tue 06:31]

*Rationale*: we are no longer copying this file.

We are getting strange errors in cmake:

: cp: cannot stat ‘/usr/lib/i386-linux-gnu/libpthread.so.1.54.0’: No such file or directory

*** CANCELLED Missing =enable_facet_XYZ= tests                        :story:
    CLOSED: [2019-03-26 Tue 06:44]

*Rationale*: with code-generated tests, we now have lots of uses of
the test data facet. No need for a special test.

- test data
