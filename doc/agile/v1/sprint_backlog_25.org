#+title: Sprint Backlog 25
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) spike(p) }

* Sprint Goals

- Complete the work on the physical meta-model and model.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2020-05-04 Mon 11:06]
| <75>         |        |     |   |     |
| Headline     | Time   |   % |   |     |
|--------------+--------+-----+---+-----|
| *Total time* | *0:00* | 0.0 |   | 0.0 |
#+TBLFM: $5='(org-clock-time%-mod @3$2 $2..$4);%.1f
#+end:

*** Edit release notes for previous sprint                            :story:

Add github release notes for previous sprint.

Release Announcements:

- [[https://twitter.com/MarcoCraveiro/status/1248358530245148677][twitter]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6646494675207278592/][linkedin]]
- [[https://gitter.im/MASD-Project/Lobby][Gitter]]

**** Dogen v1.0.24, "Imbondeiro no Iona"

*NOTE: Release notes under construction*

#+caption: Docas de Mo√ßamedes
[[https://pbs.twimg.com/media/CpAcgYpWIAEGmCF?format=jpg]]
/A baobab tree in Iona national park, Namib, Angola. (C) 2011 [[https://commons.wikimedia.org/wiki/File:Imbondeiro_Tree.jpg][Alfred Weidinger]]/

***** Introduction

Welcome to the first release of Dogen under quarantine. I hope you
have been able to stay home and stay safe, in what are very trying
times for us all. This release is obviously unimportant in the grand
scheme of things, but perhaps it can provide a momentary respite to
those of us searching for /something else/ to focus our attention
on. The sprint itself was a rather positive one, if somewhat quiet on
the user-facing front; of particular note is the fact that we have
/finally/ made major inroads on the fabled "generation" refactoring,
which we shall cover at length. So get ready for some geeky [[https://en.wikipedia.org/wiki/Model-driven_engineering][MDE]]
stories.

***** User Visible Changes

This section covers stories that affect end users, with the video
providing a quick demonstration of the new features, and the sections
below describing them in more detail. Since there were only a couple
of minor user facing changes, we've used the video to chat about the
internal work as well.

#+caption: Sprint 1.0.23 Demo
[[https://youtu.be/GFjBXArR6Jk][https://img.youtube.com/vi/GFjBXArR6Jk/0.jpg]]

/Video 1: Sprint 23 Demo./

******* Generate the MASD Palette


*****  Development Matters

This section cover topics that are mainly of interest if you follow
Dogen development, such as details on internal stories that consumed
significant resources, important events, etc. As usual, if you are
interested on all the gory details of the work carried out this
sprint, please see the [[https://github.com/MASD-Project/dogen/blob/master/doc/agile/v1/sprint_backlog_23.org][sprint log]].

******  Ephemerides and Milestones

The 11,000th commit was made to the Dogen GitHub repository during
this release.

#+caption: 11,000th commit
[[https://github.com/MASD-Project/dogen/raw/master/doc/blog/images/dogen_11_000_commits.png]]

/Figure 4: 11,000th commit for Dogen on GitHub./

The Dogen build is now completely warning and error free, across all
supported configurations - pleasing to the eye for the OCD'ers amongst
us. Of course, now the valgrind defects on the nightly become even
more visible, so we'll have to sort those out soon.

#+caption: CDash Builds
[[https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/dogen_build_no_warnings.png]]

/Figure 5: Dogen's CI is finally free of warnings./

******  Significant Internal Stories

The sprint was dominated by smattering of small and medium-sized
stories that, collectively, made up the "generation" refactor
work. We've grouped the most significant of them into a handful of
"themes", allowing us to cover the refactor in some detail. To be
fair, it is difficult to provide all of the required context in order
to fully understand the rationale for the work, but we tried our best.

*******  Rename =assets= to the =logical= model

One change that was trivial with regards to resourcing but huge in
conceptual terms was the rename of =assets= into the =logical=
model. We'll talk more about the importance of this change in the next
section - in the context of the logical-physical space - but here I
just want to reflect a little on the historic evolution of this model,
as depicted on Table 1.

| Release | Date        | Name       | Description                                                         | Problem                                                                     |
|---------+-------------+------------+---------------------------------------------------------------------+-----------------------------------------------------------------------------|
| v0.0.20 | 16 Nov 2012 | =sml=      | The Simplified Modeling Language.                                   | It was never really a "language".                                           |
| v0.0.71 | 10 Aug 2015 | =tack=     | Random sewing term.                                                 | No one knew what it meant.                                                  |
| v0.0.72 | 21 Oct 2015 | =yarn=     | Slightly less random sewing term.                                   | Term already used by a popular project; Dogen [[https://mcraveiro.blogspot.com/2018/01/nerd-food-refactoring-quagmire.html][moves away from sewing terms]]. |
| v1.0.07 | 1 Jan 2018  | =modeling= | Main point of the model.                                            | Too generic a term; used everywhere in both Dogen and MDE.                  |
| v1.0.10 | 29 Oct 2018 | =coding=   | Name reflects entities better.                                      | Model is not just about coding elements.                                    |
| v1.0.18 | 2 Jun 2019  | =assets=   | Literature seems to imply this is a better name.                    | Name is somewhat vague; anything can be an asset.                           |
| v1.0.23 | 6 Apr 2020  | =logical=  | Rise of the logical-physical space and associated conceptual model. | None yet.                                                                   |

/Table 1: Historic evolution of the name of the model with the core Dogen entities./

What this cadence of name changes reveals is a desperate hunt to
understand the role of this model in the domain. We are now hoping
that it has reached its final resting place, but we'll only know for
sure when we complete the write up of the MASD conceptual model.

******* Towards a =physical= Model

The processing pipeline for Dogen remains largely unchanged since its
early days. Figure 6 is a diagram from [[https://github.com/MASD-Project/dogen/releases/tag/v1.0.12][sprint 12]] describing the
pipeline and associated models; other than new names, it is largely
applicable to the code as it stands today. However, as we've already
hinted, what has changed in quite dramatic fashion is our
understanding of the /conceptual role/ of these models. Over time, a
picture of a sparse /logical-physical/ space emerged; as elements
travel through the pipeline, they are also traveling through this
space, transformed by projections that are parameterised by
variability, and ultimately materializing as fully-formed artefacts,
ready to be written to the filesystem. Beneath those small name
changes lies a leap in conceptual understanding of the domain, and
posts such as the [[https://mcraveiro.blogspot.com/2018/01/nerd-food-refactoring-quagmire.html][The Refactoring Quagmire]] give you a feel for just
how long and windy the road to enlightenment has been.

#+caption: Processing pipeline
[[https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/orchestration_pipeline.png]]

/Figure 6: Dogen's processing pipeline circa sprint 12./

For the last few sprints, we have been trying to get the code to
behave according to this newly found knowledge. The [[https://github.com/MASD-Project/dogen/releases/tag/v1.0.22][previous sprint]]
saw us transition the =variability= model to this brave new world, and
this sprint we have turned our attention to the =logical= and
=physical= models. Whilst the =logical= model work was just a trivial
rename (narrated above), the =physical= model was a much bigger task
than any thus far because all we had was an assortment of unrelated
models, very far away from their desired state.

Our starting salvo was composed of three distinct lines of attack:

- *Refactor the =archetypes= /modelet/*. The first moment of
  enlightenment was when we realised that the small =archetypes= model
  was nothing but a disguised meta-model of the physical dimension for
  the logical-physical space. In effect, it is a /metaphysical/ model
  though such a name (and associated pun) would probably not be viewed
  well in academic circles, so we had to refrain from using
  it. Nonetheless, we took the existing =archetypes= model and
  refactored it into the core of the =physical= model. Types such as
  =archetype_location= became the basis of the physical meta-model,
  populated with entities such as =backend=, =facet= and =kernel=.
- *Merge the =extraction= model into the =physical= model*. More
  surprisingly, we eventually realised that the =extraction= model was
  actually representing /instances/ of the physical meta-model, and as
  such should be merged into it. It was rather difficult to wrap our
  heads around this concept; to do so, we had to let go of the idea
  that =artefacts= are representations of files in memory, and instead
  started to view them as elements travelling in the logical-physical
  space towards their ultimate destination. After a great many
  whiteboard sessions, these ideas were eventually clarified and then
  much of the conceptual design fell into place.
- *Move physical aspects in the =logical= model to the =physical=
  model*. The last step of our three-pronged approach was to figure
  out that the proliferation of types with names such as
  =artefact_properties=, =enablement_properties= and the like was just
  a leakage of physical concepts into the logical model. This happened
  because we did not have a strong conceptual framework, and so never
  quite knew where to place things. As the physical model started to
  take shape with the two changes above, we finally resolved this long
  standing problem, and it suddenly became clear that most of the
  physical properties we had been associating with logical elements
  were more adequately modeled as /part of the artefacts
  themselves/. This then allows us to cleanly separate the =logical=
  and =physical= models, very much in keeping with the decoupling
  performed [[https://github.com/MASD-Project/dogen/releases/tag/v1.0.22][last sprint]] for the =variability= and =physical= models
  (the latter known then as =archetypes=, of course). The sprint saw
  us modeling the required types correctly in the =physical= model,
  but the entire tidy-up will be long in completing as the code in
  question is very fiddly.

#+caption: Physical Model
[[https://raw.githubusercontent.com/MASD-Project/dogen/master/doc/blog/images/dogen_physical_model.png]]

/Figure 7: Entities in the =physical= model./

Once all of these changes were in, we ended up with a =physical= model
with a more coherent look and feel, as Figure 7 atestares. However, we
were not quite done. We then turned our attention to one of the
biggest challenges within the physical model. For reasons that have
been lost in the mists of time, very early on in Dogen's life we
decided that all names within a location /had to be qualified/. This
is best illustrated by means of an example. Take the archetype
=masd.cpp.types.class_header=, responsible for creating header files
for classes. Its physical location was previously as follows:

- kernel: =masd=
- backend: =masd.cpp=
- facet: =masd.cpp.types=
- archetype: =masd.cpp.types.class_header=

This was a /remarkably bad idea/, with all sorts of consequences and
none of them good - not least of which complicating things
significantly when trying to come up with a unified approach to file
paths processing. So we had to very carefully change the code to use
simple names as it should have done in the first place, /i.e./:

- kernel: =masd=
- backend: =cpp=
- facet: =types=
- archetype: =class_header=

Because /so much/ of the code base depended on the fully qualified
name - think formatter registrations, binding of logical model
elements, etc - it was an uphill battle to get it to comply with this
change. In fact, it was /by far/ the most expensive story of the
entire sprint. Fortunately we have tests that give us some modicum of
confidence that we have not broken the world when making such
fundamental changes, but nonetheless it was grueling work.

******* Rename the =generation= Models to =m2t=

It has long been understood that "formatters" are nothing but
model-to-text (M2T) transforms, as per standard [[https://en.wikipedia.org/wiki/Model-driven_engineering][MDE]] terminology. With
this sprint, we finally had the time to rename the generation models
to their rightful name:

- =generation= became =m2t=
- =generation.cpp= became =m2t.cpp=
- =generation.csharp= became =m2t.csharp=

In addition, as per the previous story, the new role of the =m2t=
model is now to perform the expansion of the logical model into the
physical dimension of the logical-physical space. With this sprint we
begun this exercise, but sadly only scratched the surface as we ran
out of time. Nonetheless, the direction of travel seems clear, and
much of the code that is at present duplicated between =m2t.cpp= and
=m2t.csharp= should find its new home within =m2t=, in a generalised
form that makes use of the shiny new =physical= meta-model.

******* Rename the =meta-model= Namespace to =entities=

One of the terms that can become very confusing very fast is
=meta-model=. When you are thick in the domain of [[https://en.wikipedia.org/wiki/Model-driven_engineering][MDE]], pretty much
everything you touch is a meta-something, so much so that calling
things "meta-models" should be done sparingly and only when it can
provide some form of enlightenment to the reader. So it was that we
decided to deprecate the widely used namespace =meta-model= in favour
of the much blander =entities=.

******* Resourcing

With an astonishing utilisation rate of 66%, this sprint was extremely
efficient. Perhaps a tad /too/ efficient, even; next sprint we may
need to lower the utilisation rate back closer to 50%, in order to
ensure we get adequate rest. We've also managed to focus 80% of the
total ask on stories directly related to the sprint mission. Of these,
the flattening of the physical names completely dominated the work
(over 25%), followed by a smattering of smaller stories. Outside of
the sprint's mission, we spent a bit over 17% on process, with 10% on
release notes and demo - still a tad high, but manageable - and the
rest on maintaining the sprint and product backlog. The small crumbs
were spent on "vanity" infrastructure projects: adding support for
clang 10 (1%) - which brought noticeable benefits because =clangd=, as
always, has improved in leaps and bounds - and sorting out some rather
annoying warnings on Windows' =clang-cl= (1.3%).

#+caption: Story Pie Chart
[[https://github.com/MASD-Project/dogen/raw/master/doc/agile/v1/sprint_23_pie_chart.jpg]]

/Figure 8: Cost of stories for sprint 22./

****** Roadmap

We've updated the roadmap with the big themes we envision as being key
to the release of Dogen v2. As always, it must be taken with a huge
grain of salt, but still there is something very satisfying about
seeing the light at the end of the tunnel.

#+caption: Project Plan
[[https://github.com/MASD-Project/dogen/raw/master/doc/agile/v1/sprint_23_project_plan.png]]

#+caption: Resource Allocation Graph
[[https://github.com/MASD-Project/dogen/raw/master/doc/agile/v1/sprint_23_resource_allocation_graph.png]]

***** Binaries

You can download binaries from either [[https://bintray.com/masd-project/main/dogen/1.0.23][Bintray]] or GitHub, as per
Table 2. All binaries are 64-bit. For all other architectures and/or
operative systems, you will need to build Dogen from source. Source
downloads are available in [[https://github.com/MASD-Project/dogen/archive/v1.0.23.zip][zip]] or [[https://github.com/MASD-Project/dogen/archive/v1.0.23.tar.gz][tar.gz]] format.

| Operative System    | Format | BinTray                             | GitHub                              |
|---------------------+--------+-------------------------------------+-------------------------------------|
| Linux Debian/Ubuntu | Deb    | [[https://dl.bintray.com/masd-project/main/1.0.23/dogen_1.0.23_amd64-applications.deb][dogen_1.0.23_amd64-applications.deb]] | [[https://github.com/MASD-Project/dogen/releases/download/v1.0.23/dogen_1.0.23_amd64-applications.deb][dogen_1.0.23_amd64-applications.deb]] |
| OSX                 | DMG    | [[https://dl.bintray.com/masd-project/main/1.0.23/DOGEN-1.0.23-Darwin-x86_64.dmg][DOGEN-1.0.23-Darwin-x86_64.dmg]]      | [[https://github.com/MASD-Project/dogen/releases/download/v1.0.23/DOGEN-1.0.23-Darwin-x86_64.dmg][DOGEN-1.0.23-Darwin-x86_64.dmg]]      |
| Windows             | MSI    | [[https://dl.bintray.com/masd-project/main/DOGEN-1.0.23-Windows-AMD64.msi][DOGEN-1.0.23-Windows-AMD64.msi]]      | [[https://github.com/MASD-Project/dogen/releases/download/v1.0.23/DOGEN-1.0.23-Windows-AMD64.msi][DOGEN-1.0.23-Windows-AMD64.msi]]      |

/Table 2: Binary packages for Dogen./

*Note:* The OSX and Linux binaries are not stripped at present and so
are larger than they should be. We have [[https://github.com/MASD-Project/dogen/blob/master/doc/agile/product_backlog.org#linux-and-osx-binaries-are-not-stripped][an outstanding story]] to
address this issue, but sadly CMake does not make this a trivial
undertaking.

*****  Next Sprint

We shall continue work on the "generation" refactor - a name that is
now not quite as apt given all the model renaming. We are hopeful -
but not _too_ hopeful - of completing this work next sprint. Famous
last words.

That's all for this release. Happy Modeling!

*** Wale templates must be bound to logical archetypes                :story:

A stitch template may make use of a wale template. At present we are
loading these from the file system, thus requiring the
locator. However, since we already have the templates in memory, we
could model these a bit better.

Notes:

- we could easily add a wale template meta-data parameter to the
  logical archetype. The problem is, at this point all we are saying
  is that there are logical associations between elements. We then
  need to somehow load up the artefact corresponding to the wale
  template into the element artefacts of all logical archetypes which
  refer to that template. We could have a =text= transform that does
  this. Finally we could add a dependency between the stitch artefact
  and the wale artefact. However, for this to work, we need to supply
  the entire =element_artefacts= into the text transform and let the
  stitch transform locate whatever it needs.
- a second problem is that we need to load the wale templates from the
  file system before we reach the physical model. This could be done
  as part of the wale template. We already do something similar for
  stitch; if it exists load it, if not create it. We need a similar
  logic.

*** =templating= should not depend on =physical=                      :story:

For some random reason we implemented the =templating= model in terms
of artefacts of the physical model. There is no need for this in the
new world, so we should try to decouple these models. Templating
should not even know of files; it should receive a string and return a
string.

*** Extend tracing to M2T transforms                                  :story:

There is nothing stopping us from having a context with the tracer,
and doing a dump of the artefact before and after a M2T transform.

*** Rename "model-to-X" to TLAs                                       :story:

Given that model-to-text and text-to-model (to a lesser extent) are
well known TLAs in MDE we should make use of these in class names. The
names we have at present are very long. The additional size is not
providing any benefits.

*** Replace initialisers with facet-based initialisation              :story:

Now that we have facets, archetypes, etc as proper meta-model
elements, it is becoming clear that the initialiser is just a facet in
disguise. We have enough information to generate all initialisers as
part of the code generation of facets and backends. Once we do this,
we have reached the point where it is possible to create a new
meta-model element and add a formatter for it and code will be
automatically generated without any manual intervention. Similarly,
deleting formatters will delete all traces of it from the code
generator.

*** Consider making technical spaces a core concept                   :story:

At present we are trying to instantiate a stitch template. It requires
knowing the technical space that the original archetype belongs to so
that we can locate the appropriate decoration. However, because we are
in the text model and the archetype is a physical concept, we have no
way of knowing what the original TS was for a given archetype. We
could of course locate the associated M2T transform etc - but this
perhaps hints at a bigger problem with the conceptual model: technical
spaces are much more of a pervasive concept than just logical model:

- injectors belong to technical spaces.
- logical model entities belong to technical spaces.
- text transforms belong to technical spaces.
- physical model entities such as archetypes and artefacts belong to
  technical spaces.

It would be nice if we could have this modeled correctly, in some kind
of shared model. At present, the only model which does this is
=variability= but it does not make a lot of sense to put TS'
there. Perhaps we should wait until we have enough entities to see
what the name of this "core" model should be.

*** Inject backend, facets and archetypes into PMM                    :story:

At present we only have artefacts in the PMM. We need to inject all
other missing elements. We also need to create a transform which
builds the PMM. Finally while we're at it we should add enablement
properties and associated transform.

Notes:

- we should also change template instantiation code to use the PMM.
- once we have a flag, we can detect disabled backends before any work
  is carried out. The cost should be very close to zero. We don't need
  to do any checks for this afterwards.
- we need to add a list of archetypes that each archetype depends
  on. We need to update the formatters to return archetypes rather
  than names and have the dependencies there.

Merged stories:

*Implement archetype locations from physical meta-model*

We need to use the new physical meta-model to obtain information about
the layout of physical space, replacing the archetype locations.

Tasks:

- make the existing backend interface return the layout of physical
  space.
- create a transform that populates all of the data structures needed
  by the current code base (archetype locations).
- replace the existing archetype locations with a physical meta-model.
- remove all the archetype locations data structures.

Notes:

- template instantiation domains should be a part of the physical
  meta-model. Create a transform to compute these. *done*
- remove Locatable from Element? *done*

Merged stories:

*Clean-up archetype locations modeling*

We now have a large number of containers with different aspects of
archetype locations data. We need to look through all of the usages of
archetype locations and see if we can make the data structures a bit
more sensible. For example, we should use archetype location id's
where possible and only use the full type where required.

Notes:

- formatters could return id's?
- add an ID to archetype location; create a builder like name builder
  and populate ID as part of the build process.

*Implement the physical meta-model*

We need to replace the existing classes around archetype locations
with the new meta-model types.

Notes:

- formatters should add their data to a registrar that lives in the
  physical model rather than expose it via an interface.

*** Split enablement features                                         :story:

At present we are instantiating the =enabled= feature across the
entire =masd= template instantiation domain. This is a very
"efficient" way to do it because we only define one feature. However,
it also means its now possible to disable a facet or backend at the
element level. And worse, the binding point is global:

: #DOGEN masd.variability.default_binding_point=any
: #DOGEN masd.variability.generate_static_configuration=false
: #DOGEN masd.variability.instantiation_domain_name=masd

The right thing to do is to create four separate features, one for
the backend, one for the features and one for the archetype
(global). Then another one for the archetype, locally. Each with the
correct binding point.

*** Add PMM enablement transform                                      :story:

This transform reads the global enablement flags for backend, facet
and archetype. It is done as part of the chain to produce the PMM.

*** Add a PMM enablement satisfiability transform                     :story:

For now this transform can simply check that there are no enabled
archetypes that depend on disabled archetypes. In the future we could
have a flag that enables archetypes as required.

*** Add =is_generatable= to logical model                             :story:

Logical types which cannot be generated should be removed prior to
physical expansion. There are two types:

- intrinsically non-generatable types such as object templates, etc.
- types that may not be generated depending on state: modules.

In the future, when we support the static / dynamic pattern,

Tasks:

- add a generatable flag in logical model elements with associated
  transform.
- add a pruning transform that filters out all non-generatable types
  from logical model.

Merged stories:

*Intrinsic non-generatable types

In the decoration transform we have this hack:

: bool decoration_transform::
: is_generatable(const assets::meta_model::name& meta_name) {
:     // FIXME: massive hack for now.
:     using mnf = assets::helpers::meta_name_factory;
:     static const auto otn(mnf::make_object_template_name());
:     static const auto ln(mnf::make_licence_name());
:     static const auto mln(mnf::make_modeline_name());
:     static const auto mgn(mnf::make_modeline_group_name());
:     static const auto gmn(mnf::make_generation_marker_name());
:
:     const auto id(meta_name.qualified().dot());
:     return
:         id != otn.qualified().dot() &&
:         id != ln.qualified().dot() &&
:         id != mln.qualified().dot() &&
:         id != mgn.qualified().dot() &&
:         id != gmn.qualified().dot();
: }

This is done because we know up front that some elements in the assets
meta-model cannot be generated. We need a way to tag this elements
statically. This should be done when the elements are code
generated. It is not yet clear how this should be done though.

Notes:

- one possible approach is to have a constant that is code generated
  which states if a type is meant for generation or not.
- however, it would be even better if we could determine if a type has
  formatters or not. This would mean we would cover two possible
  scenarios: types that are intrinsically non-generatable and types
  that are not yet generatable. It may be that there is no need to
  distinguish between these two.
- when we have meta-model elements for logical meta-elements we just
  need to add this as a property (e.g. generatable). If a user tries
  to add a formatter to a non-generatable type we error.

*** Create a physical ID in logical-physical space                    :story:

Artefacts are points in logical-physical space. They should have an ID
which is composed by both logical and physical location. We could
create a very simple builder that concatenates both, for example:

: <dogen><variability><entities><default_value_override>|<masd><cpp><types><class_header>

The use of =|= would make it really easy to split out IDs as required,
and to visually figure out which part is which. Note though that the
ID is an opaque identifier and the splitting happens for
troubleshooting purposes only, not in the code. With the physical
model, all references are done using these IDs. So for example, if an
artefact =a0= depends on artefact =a1=, the dependency is recorded as
the ID of =a1=. The physical model should also be indexed by ID
instead of being a list of artefacts.

*** Make physical model name a qualified name                         :story:

At present we are setting up the extraction model name from the simple
name of the model. It should really be the qualified name. Hopefully
this will only affect tracing and diffing.

*** Add enablement test in C#                                         :story:

At present we have probably broken enablement in C# due to the hackery
around physical space expansion. However all tests are green. We need
to define a profile in C# that disables a facet in order to ensure we
test enablement before we start hacking around with the enablement
transforms. It will most likely be red - we need to add the pruning
hack to get rid of disabled artefacts as we do in C++.

*** Add dependencies to artefacts                                     :story:

We need to propagate the dependencies between logical model elements
into the physical model. We still need to distinguish between "types"
of dependencies:

- transparent_associations
- opaque_associations
- associative_container_keys
- parents

Basically, anything which we refer to when we are building the
dependencies for inclusion needs to be represented. We could create a
data structure for this purpose such as "dependencies". We should also
include "namespace" dependencies. These can be obtained by =sort |
uniq= of all of the namespaces for which there are dependencies. These
are then used for C#.

Note however that all dependencies are recorded as logical-physical
IDs.

We also need a way to populate the dependencies as a transform. This
must be done in =m2t= because we need the formatters. We can rely on
the same approach as =inclusion_dependencies= but instead of creating
/inclusion dependencies/, we are just creating /dependencies/.

*** Consider allowing representation of namespaces in file names      :story:

Languages like .Net represent namespacing using dots rather than
separate folders. Perhaps we should support a mode of operation where
all files are placed in a single folder but have the namespacing
encoded in the file name. For example:

: /a_project/types/a.cpp
: /a_project/io/a_io.cpp

would become:

: /a_project/types_a.cpp
: /a_project/io_a_io.cpp

or, using dot notation, so we can distinguish namespaces from
"composite" names:

: /a_project/types.a.cpp
: /a_project/io.a_io.cpp

We do not have a use case for this yet, but it should be fairly
straight forward to add it. We just need meta-data support to enable
the feature and then take it into account when generating the file
names (e.g. instead of using =/= as a separator, use =.=).

Actually this is _almost_ already possible: we provide a facet folder
meta-data that is always used to generate a new folder. If however
there was a way for it to not generate a folder we could achieve
this. For example, say we had to supply:

: /types/

as the facet folder. Then the user could simply supply instead:

: types_
: types.

And no folder would be created.

Notes:

- see also the story on destinations.
- consider splitting this story into two: one is about how folder
  layout (physical) may need to match namespace layout (logical);
  another is related to allowing users to flatten facet
  directories. They have some connection, but its not obvious how much
  they overlap.

*** Add a PM enablement and overwrite transform                       :story:

This relies on PMM enablement flags. Also, it reads the local
archetype enablement and overwrite flags and has the logic to set it
as per current enablement transform.

Once this transform is implemented, we should try disabling the
existing enablement transform and see what breaks.

*** Add a PM enablement satisfiability transform                      :story:

To start with, this should just check to see if any of the
dependencies are disabled. If so it throws. In the future we can add
solving.

*** Add a PM transform to prune disabled artefacts                    :story:

We must first start by expanding the physical space into all possible
points. Once enablement is performed though we can prune all artefacts
that are disabled. Note that we cannot prune based on global
information because archetypes may be enabled locally. However, once
all of the local information has been processed and the enabled flag
has been set, we can then remove all of those with the flag set to
false.

In a world with solving, we just need to make sure solving is slotted
in after enablement and before pruning. It should just work.

This transform is done within the =m2t= model, not the =physical=
model, because we need to remove the artefacts from the =m2t=
collection.

*** Implement formatting styles in physical model                     :story:

We need to move the types related to formatting styles into physical
model, and transfors as well. WE should also address formatting input.

Merged stories:

*Move formatting styles into generation*

We need to support the formatting styles at the meta-model level.

*Replace all formatting styles with the ones in physical model*

We still have a number of copies of this enumeration.

*** Implement locator in physical model                               :story:

Use PMM entities to generate artefact paths, within =m2t=.

Merged stories:

*Create a archetypes locator*

We need to move all functionality which is not kernel specific into
yarn for the locator. This will exist in the helpers namespace. We
then need to implement the C++ locator as a composite of yarn
locator.

*Other Notes*

At present we have multiple calls in locator, which are a bit
ad-hoc. We could potentially create a pattern. Say for C++, we have
the following parameters:

- relative or full path
- include or implementation: this is simultaneously used to determine
  the placement (below) and the extension.
- meta-model element:
- "placement": top-level project directory, source directory or
  "natural" location inside of facet.
- archetype location: used to determine the facet and archetype
  postfixes.

E.g.:

: make_full_path_for_enumeration_implementation

Interestingly, the "placement" is a function of the archetype location
(a given artefact has a fixed placement). So a naive approach to this
seems to imply one could create a data driven locator, that works for
all languages if supplied suitable configuration data. To generalise:

- project directory is common to all languages.
- source or include directories become "project
  sub-directories". There is a mapping between the artefact location
  and a project sub-directory.
- there is a mapping between the artefact location and the facet and
  artefact postfixes.
- extensions are a slight complication: a) we want to allow users to
  override header/implementation extensions, but to do it so for the
  entire project (except maybe for ODB files). However, what yarn's
  locator needs is a mapping of artefact location to  extension. It
  would be a tad cumbersome to have to specify extensions one artefact
  location at a time. So someone has to read a kernel level
  configuration parameter with the artefact extensions and expand it
  to the required mappings. Whilst dealing with this we also have the
  issue of elements which have extension in their names such as visual
  studio projects and solutions. The correct solution is to implement
  these using element extensions, and to remove the extension from the
  element name.
- each kernel can supply its configuration to yarn's locator via the
  kernel interface. This is fairly static so it can be supplied early
  on during initialisation.
- there is still something not quite right. We are performing a
  mapping between some logical space (the modeling space) and the
  physical space (paths in the filesystem). Some modeling elements
  such as the various CMakeLists.txt do not have enough information at
  the logical level to tell us about their location; at present the
  formatter itself gives us this hint ("include cmakelists" or "source
  cmakelists"?). It would be annoying to have to split these into
  multiple archetypes just so we can have a function between the
  archetype location and the physical space. Although, if this is the
  only case of a modeling element not mapping uniquely, perhaps we
  should do exactly this.
- However, we still have inclusion paths to worry about. As we done
  with the source/include directories, we need to somehow create a
  concept of inclusion path which is not language specific; "relative
  path" and "requires relative path" perhaps? These could be a
  function of archetype location.

Merged stories:

*Generate file paths as a transform*

We need to understand how file paths are being generated at present;
they should be a transform inside generation.

*Create the notion of project destinations*

At present we have conflated the notion of a facet, which is a logical
concept, with the notion of the folders in which files are placed - a
physical concept. We started thinking about addressing this problem by
adding the "intra-backend segment properties", but as the name
indicates, we were not thinking about this the right way. In truth,
what we really need is to map facets (better: archetype locations) to
"destinations".

For example, we could define a few project destinations:

: masd.generation.destination.name="types_headers"
: masd.generation.destination.folder="include/masd.cpp_ref_impl.northwind/types"
: masd.generation.destination.name=top_level (global?)
: masd.generation.destination.folder=""
: masd.generation.destination.name="types_src"
: masd.generation.destination.folder="src/types"
: masd.generation.destination.name="tests"
: masd.generation.destination.folder="tests"

And so on. Then we can associate each formatter with a destination:

: masd.generation.cpp.types.class_header.destination=types_headers

Notes:

- these should be in archetypes models.
- with this we can now map any formatter to any folder, particularly
  if this is done at the element level. That is, you can easily define
  a global mapping for all formatters, and then override it
  locally. This solves the long standing problem of creating say types
  in tests and so forth. With this approach you can create anything
  anywhere.
- we need to have some tests that ensure we don't end up with multiple
  files with the same name at the same destination. This is a
  particular problem for CMake. One alternative is to allow the
  merging of CMake files, but we don't yet have a use case for
  this. The solution would be to have a "merged file flag" and then
  disable all other facets.
- this will work very nicely with profiles: we can create a few out of
  the box profiles for users such as flat project, common facets and
  so on. Users can simply apply the stereotype to their models. These
  are akin to "destination themes". However, we will also need some
  kind of "variable replacement" so we can support cases like
  =include/masd.cpp_ref_impl.northwind/types=. In fact, we also have
  the same problem when it comes to modules. A proper path is
  something like:
  - =include/${model_modules_as_dots}/types/${internal_modules_as_folders}=
  - =include/${model_modules_as_dots}/types/${internal_modules_as_dots}.=
  - =include/${model_modules_as_dots}/types/${internal_modules_as_underscores}_=

  This is *extremely* flexible. The user can now create a folder
  structure that depends on package names etc or choose to flatten it
  and can do so for one or all facets. This means for example that we
  could use nested folders for =include=, not use model modules for
  =src= and then flatten it all for =tests=.
- actually it is a bit of a mistake to think of these destinations as
  purely physical. In reality, we may also need them to contribute to
  namespaces. For example, in java the folders and namespaces must
  match. We could solve this by having a "module contribution" in the
  destination. These would then be used to construct the namespace for
  a given facet. Look for java story on backlog for this.
- this also addresses the issue of having multiple serialisation
  formats and choosing one, but having sensible folder names. For
  example, we could have boost serialisation mapped to a destination
  called =serialisation=. Or we could map it to say RapidJSON
  serialisation. Or we could support two methods of serialisation for
  the same project. The user chooses where to place them.

*** Implement dependencies in terms of new physical types             :story:

- add dependency types to physical model.
- add dependency types to logical model, as required.
- compute dependencies in generation. We need a way to express
  dependencies as a file dependency as well as a model
  dependency. This caters for both C++ and C#/Java.
- remove dependency code from C++ and C# model.

Notes:

- in light of the new physical model, we need a transform that calls
  the formatter to obtain dependencies. The right way to do this is to
  have another registrar (=dependencies_transform=?) and to have the
  formatters implement both interfaces. This means we can simply not
  implement the interface (and not register) when we have no
  dependencies - though of course given the existing wale
  infrastructure, we will then need yet another template for
  formatters which do not need d

Merged stories:

*Formatter dependencies and model processing*

At present we are manually adding the includes required by a formatter
as part of the "inclusion_dependencies" building. There are several
disadvantages to this approach:

- we are quite far down the pipeline. We've already passed all the
  model building checks, etc. Thus, there is no way of knowing what
  the formatter dependencies are. At present this is not a huge
  problem because we have so few formatters and their dependencies are
  mainly on the standard library and a few core boost models. However,
  as we add more formatters this will become a bigger problem. For
  example, we've added formatters now that require access to
  variability headers; in an ideal world, we should now need to have a
  reference to this model (for example, so that when we integrate
  package management we get the right dependencies, etc).
- we are hard-coding the header files. At present this is not a big
  problem. To be honest, we can't see when this would be a big
  problem, short of models changing their file names and/or
  locations. Nonetheless, it seems "unclean" to depend on the header
  file directly.
- the dependency is on c++ code rather than expressed via a model.

In an ideal world, we would have some kind of way of declaring a
formatter meta-model element, with a set of dependencies declared via
meta-data. These are on the model itself. They must be declared
against a specific archetype. We then would process these as part of
resolution. We would then map the header files as part of the existing
machinery for header files.

However one problem with this approach is that we are generating the
formatter code using stitch at present. For this to work we would need
to inject a fragment of code into the stitch template somehow with the
dependencies. Whilst this is not exactly ideal, the advantage is that
we could piggy-back on this mechanism to inject the postfix fields as
well, so that we don't need to define these manually in each
model. However, this needs some thinking because the complexity of
defining a formatter will increase yet again. When there are problems,
it will be hard to troubleshoot.

*Move dependencies into archetypes*

Actually the dependencies will be generated at the kernel level
because 99% of the code is kernel specific. However, we need to make
it an external transform. We need to figure out an interface that
supplies archetypes with the data needed to create the dependencies
container.

Tasks:

- create the locator in the C++ external transform
- create a dependencies transform that uses the existing include
  generation code.

*Previous understanding*

It seems all languages we support have some form of "dependencies":

- in c++ these are the includes
- in c# these are the usings
- in java these are the imports

So, it would make sense to move these into yarn. The process of
obtaining the dependencies must still be done in a kernel dependent
way because we need to build any language-specific structures that the
dependencies builder requires. However, we can create an interface for
the dependencies builder in yarn and implement it in each kernel. Each
kernel must also supply a factory for the builders.

*Tidy-up of inclusion terminology*

Random notes:

- imports and exports
- some types support both (headers)
- some support imports only (cpp)
- some support neither (cmakelists, etc).

*** Merge C++ and C# model into =m2t=                                 :story:

Once we remove all of formatables and helpers from each technical
space and once we remove all of the transforms in =m2t= that don't
really belong there, we can probably merge all of these models into
one. We would then have a =transforms= namespace, with sub-namespaces
per language. Each of the namespaces is declared as a backend.

*** Top-level "inclusion required" should be "tribool"                :story:

One of the most common use cases for inclusion required is to have it
set to true for all types where we provide an override, but false for
all other cases. This makes sense in terms of use cases:

- either we need to supply some includes; in which case where we do
  not supply includes we do not want the system to automatically
  compute include paths;
- or we don't supply any includes, in which case:
  - we either don't require any includes at all (hardware built-ins);
  - or we want all includes to be computed by the system.

The problem is that we do not have a way to express this logic in the
meta-data. The only way would be to convert the top-level
=requires_includes= to an enumeration:

- yes, compute them
- yes, where supplied
- no

We need to figure out how to implement this. For now we are manually
adding flags.

*** Add the notion of a major and a minor technical space             :story:

When we move visual studio and other elements out of the current
technical spaces, we will need some way of distinguishing between a
"primary" technical space (e.g. C++, C# etc) and a "secondary"
technical space (e.g. visual studio, etc). We could use emacs'
convention and call these major and minor technical spaces.

This should be a property of the backend.

*** Move decorations to their "final" resting place                   :story:

At present we are handling decorations in the generation model but
these are really logical concerns. The main reason why is because we
are not expanding the decoration across physical space, but instead we
expand them depending on the used technical spaces. However, since the
technical spaces are obtained from the formatters, there is an
argument to say that archetypes should have an associated technical
space. We need to decouple these concepts in order to figure out where
they belong.

*** Create a common formatter interface                               :story:

Once all language specific properties have been moved into their
rightful places, we should be able to define a formatter interface
that is suitable for both c++ and c# in generation. We should then
also be able to move all of the registration code into generation. We
then need to look at all containers of formatters etc to see what
should be done at generation level.

Once we have a common formatter interface, we can add the formatters
themselves to the =element_artefacts= tuple. Then we can just iterate
through the tuples and call the formatter instead having to do
look-ups.

Also, at this point we can then update the physical elements generated
code to generate the transform code for backend and facet
(e.g. delegation and aggregation of the result).

*** Stitch formatter updates                                          :story:

There are a number of issues with stitch formatters at present:

- stitch transform is still generating its own artefact.

*** Order of headers is hard-coded                                    :story:

In inclusion expander, we have hacked the sorting:

:        // FIXME: hacks for headers that must be last
:        const bool lhs_is_gregorian(
:            lhs.find_first_of(boost_serialization_gregorian) != npos);
:        const bool rhs_is_gregorian(
:            rhs.find_first_of(boost_serialization_gregorian) != npos);
:        if (lhs_is_gregorian && !rhs_is_gregorian)
:            return true;

This could be handled via meta-data, supplying some kind of flag (sort
last?). We should try to generate the code in the "natural order" and
see if the code compiles with latest boost.

*** Move technical space and generability transforms                  :story:

At present these transforms are in generation, but we don't think
that's the right place. We need some analysis to understand what they
do and why they are not in the logical model.

*** Consider bucketing elements by meta-type in generation model      :story:

At the moment we have a flat container of elements in the main
model. However, it seems like one of its use cases will be to bucket
the elements by meta-type before processing: formatters will want to
locate all formatters for a given meta-type and apply them all. At
present we are asking for the formatters for meta-name
repeatedly. This makes no sense, we should just ask for them once and
apply all formatters in one go.

For this we could simply group elements by meta-name in the model
itself and then use that container at formatting time. However, there
may be cases where looping through the whole model is more convenient
(during transforms) so this is not without its downsides.

Alternatively we could consider just bucketing in the formatters'
workflow itself.

This work will only be useful once we get rid of the formattables
model.

This can be done in the generation model, as part of the generation
clean up.

*** Dimension vs view vs perspective                                  :story:

We need to find the definition for how these terms are used within
UML and see which one is more appropriate for MASD.

*** Private and public includes                                       :story:

#+begin_quote
*Story*: As a dogen user, I want to hide some internal types from
users so that I don't increase coupling for no reason.
#+end_quote

NOTE: We should use the terms =internal= and =external= to avoid
confusion with C++ scopes. This follows Microsoft terminology for C#
assemblies.

At present we are making all headers in a model public. However, for
models such as cpp this doesn't make any sense since only one type
should be available to the outside world. What we really need is a
separation between public and private headers, a functionality similar
to =internal= in C#. In conjunction with using shared objects, this
should improve build times.

In order to do this:

- add a new config parameter: default visibility to private or default
  visibility to public. This is just so we don't have to mark all
  types manually - instead we just need to mark the exceptions.
- add two new stereotypes: =public= and =private=.
- add enum to sml: =visibility_type= (check with .Net for
  names). Valid values are =public=, =private=. Objects, enumerations,
  etc will have this enum.
- locator will now respect this value when producing an absolute file
  path. If public files go under =include/public=, if private files go
  under =include/private=.
- CMakelists for the component will add to the include path the
  private directory. Same for the spec CMakelists. Need to check that
  this not add to the global include path.
- CMakelists for the include files will only package the public
  headers.
- mark all the types accordingly in all our models. fix all the
  ensuing breakage. we will probably need to move forward on the IoC
  front in order for this to work as we don't want to expose
  implementations - e.g. =workflow_interface= will be public but
  =workflow= will be private; this means we need some kind of factory
  to generate =workflow_interface=.

More thoughts on this:

- we don't really need to have different directories for this; we
  could just put all the include files in the same directory. At
  packaging time, we should only package the public files (this would
  have to be done using CPack).
- also the GCC/MSVC visibility pragmas should take into account these
  options and only export public types.
- the slight problem with this is that we need some tests to ensure
  the packages we create are actually exporting all public types; we
  could easily have a public type that depends on a private type
  etc. We should also validate yarn to ensure this does not
  happen. This can be done by ensuring that a type marked as external
  only depends on types also marked as external and so forth.
- this could also just be a packaging artefact - we would only package
  public headers. Layout of source code would remain the same.
- when module support is available, we could use this to determine
  what is exported on the module interfaces.

*** Replace traits with calls to the PMM elements                     :story:

Where we are using these traits classes, we should really be including
the formatter and calling for its static name - at least within each
backend.

*** Associate includes with model elements                            :story:

The right solution for the formatter includes is to supply them as
meta-data in the model element. This has the advantage that we can
then make use of profiles. At present we have one way to supply
includes: the primary and secondary includes:

: "masd.generation.cpp.io.class_header.primary_inclusion_directive": "<boost/property_tree/json_parser.hpp>",
: "masd.generation.cpp.io.class_header.secondary_inclusion_directive": "<boost/algorithm/string.hpp>",

This does a part of the job: we can associate up to two include
directives with one facet and element. However:

- by using this machinery we are effectively replacing the original
  include.
- the includes will occur for anyone who references the type. Though
  however, since the includes are applicable only to the class
  implementation this is less of a problem. Technically its still
  incorrect though because these are not the includes needed to use
  the type but the includes needed to define the type.

For formatters, we kind of need to make the includes only happen when
we are building the formatter. If we could have a similar machinery,
but without adding to types referencing the type, this would give us a
way to declare all of the formatters dependencies. Then, we could
switch to building all of the stitch boilerplate outside of stitch and
supplying it as a KVP.

** Deprecated
