#+title: Sprint Backlog 02
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Continue work on the yarn refactor

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2017-07-08 Sat 18:25]
| <75>                                                                        |         |       |      |       |
| Headline                                                                    | Time    |       |      |     % |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| *Total time*                                                                | *13:06* |       |      | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| Stories                                                                     | 13:06   |       |      | 100.0 |
| Active                                                                      |         | 13:06 |      | 100.0 |
| STARTED Sprint and product backlog grooming                                 |         |       | 0:48 |   6.1 |
| COMPLETED Edit release notes for previous sprint                            |         |       | 0:24 |   3.1 |
| COMPLETED Implement the context class                                       |         |       | 1:12 |   9.2 |
| COMPLETED Implement the exogenous transformation chain                      |         |       | 4:11 |  31.9 |
| COMPLETED Implement the pre-processing chain                                |         |       | 1:35 |  12.1 |
| COMPLETED Refactor mapping repository factory                               |         |       | 0:12 |   1.5 |
| COMPLETED Implement the output languages transform                          |         |       | 0:37 |   4.7 |
| COMPLETED Use forward declaration for context                               |         |       | 0:20 |   2.5 |
| COMPLETED Implement the references chain                                    |         |       | 2:43 |  20.7 |
| COMPLETED Implement the merge transform                                     |         |       | 0:40 |   5.1 |
| STARTED Implement the model assembly chain                                  |         |       | 0:11 |   1.4 |
| STARTED Implement the model generation chain                                |         |       | 0:13 |   1.7 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2017-07-08 Sat 17:16]--[2017-07-08 Sat 17:19] =>  0:03
    CLOCK: [2017-07-07 Fri 11:18]--[2017-07-07 Fri 11:23] =>  0:05
    CLOCK: [2017-07-03 Thu 20:15]--[2017-07-03 Thu 20:55] =>  0:40

Updates to sprint and product backlog.

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2017-07-05 Wed 16:08]
    CLOCK: [2017-07-03 Thu 20:56]--[2017-07-03 Thu 21:20] =>  0:24

Add github release notes for previous sprint.

Title: Dogen v1.0.01, "Academia de Pesca"

#+begin_src markdown
![Academia de Pesca](http://cdn1.portalangop.co.ao/angola/pt_pt/files/highlight/2015/10/45/0,6bd49eb1-adcc-40fd-93c8-257b4d4aae16.jpg)
_Academia de Pesca, Namibe. (C) Angola Press._

Overview
=======

This was an extremely quiet and long sprint, mainly focused on reading the literature on Model Driven Engineering.

User visible changes
===============
In this sprint, a couple of minor user visible features were added:

- **Emacs mode for stitch**: we now have syntax highlighting in emacs for stitch templates.

For more details of the work carried out this sprint, see the [sprint log](https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/v1/sprint_backlog_01.org).

Next Sprint
===========
In the next sprint we'll continue to work on cleaning up yarn's internals.

Binaries
======
You can download experimental binaries from [Bintray](https://bintray.com/domaindrivenconsulting/Dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_1.0.01_amd64-applications.deb](https://dl.bintray.com/domaindrivenconsulting/Dogen/1.0.01/dogen_1.0.01_amd64-applications.deb)
- [dogen-1.0.01-Darwin-x86_64.dmg](https://dl.bintray.com/domaindrivenconsulting/Dogen/1.0.01/dogen-1.0.01-Darwin-x86_64.dmg)
- [dogen-1.0.01-Windows-AMD64.msi](https://dl.bintray.com/domaindrivenconsulting/Dogen/dogen-1.0.01-Windows-AMD64.msi)

**Note**: They are produced by CI so they may not yet be ready.

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/881860977330880512][Tweet]]
- [[https://www.linkedin.com/feed/update/urn:li:activity:6287627272706891776/][LinkedIn]]

*** COMPLETED Implement the context class                             :story:
    CLOSED: [2017-07-06 Thu 07:25]
    CLOCK: [2017-07-06 Thu 06:53]--[2017-07-06 Thu 07:25] =>  0:32
    CLOCK: [2017-07-04 Tue 08:03]--[2017-07-04 Tue 08:43] =>  0:40

Tasks:

- create the transformation context, populate it with all the main
  objects needed by yarn at present.
- Add a method to generate the context and then unpack it to fit the
  current API.

*** COMPLETED Implement the exogenous transformation chain            :story:
    CLOSED: [2017-07-07 Fri 12:39]
    CLOCK: [2017-07-07 Fri 12:38]--[2017-07-07 Fri 12:41] =>  0:03
    CLOCK: [2017-07-07 Fri 12:27]--[2017-07-07 Fri 12:37] =>  0:10
    CLOCK: [2017-07-07 Fri 12:09]--[2017-07-07 Fri 12:26] =>  0:17
    CLOCK: [2017-07-07 Fri 11:48]--[2017-07-07 Fri 12:08] =>  0:20
    CLOCK: [2017-07-07 Fri 11:23]--[2017-07-07 Fri 11:47] =>  0:24
    CLOCK: [2017-07-07 Fri 11:03]--[2017-07-07 Fri 11:17] =>  0:14
    CLOCK: [2017-07-07 Fri 09:01]--[2017-07-07 Fri 11:02] =>  2:01
    CLOCK: [2017-07-06 Thu 19:08]--[2017-07-06 Thu 19:30] =>  0:22
    CLOCK: [2017-07-06 Thu 18:57]--[2017-07-06 Thu 19:07] =>  0:10
    CLOCK: [2017-07-06 Thu 07:26]--[2017-07-06 Thu 07:36] =>  0:10

Tasks:

- in yarn, implement:
  - model generation chain;
  - initial target chain; and
  - exogenous transforms (registration etc).
- in the frontends: implement the exogenous transforms interface.
- update knit to conditionally use the transforms code or the legacy
  code.

*** COMPLETED Implement the pre-processing chain                      :story:
    CLOSED: [2017-07-07 Fri 14:50]
    CLOCK: [2017-07-07 Fri 14:24]--[2017-07-07 Fri 14:50] =>  0:26
    CLOCK: [2017-07-07 Fri 14:16]--[2017-07-07 Fri 14:23] =>  0:07
    CLOCK: [2017-07-07 Fri 14:01]--[2017-07-07 Fri 14:15] =>  0:14
    CLOCK: [2017-07-07 Fri 13:44]--[2017-07-07 Fri 13:51] =>  0:07
    CLOCK: [2017-07-07 Fri 13:36]--[2017-07-07 Fri 13:43] =>  0:07
    CLOCK: [2017-07-07 Fri 13:28]--[2017-07-07 Fri 13:35] =>  0:07
    CLOCK: [2017-07-07 Fri 13:19]--[2017-07-07 Fri 13:27] =>  0:08
    CLOCK: [2017-07-07 Fri 12:59]--[2017-07-07 Fri 13:18] =>  0:19

This story may be too big as one story.

Tasks:

- implement all of the transforms required by the pre-processing
  chain.
- implement the pre-processing chain in terms of those transforms.
- plug in the pre-processing chain into the initial target chain.

*** COMPLETED Refactor mapping repository factory                     :story:
    CLOSED: [2017-07-07 Fri 15:23]
    CLOCK: [2017-07-07 Fri 15:11]--[2017-07-07 Fri 15:23] =>  0:12

At present we are doing a lot of work in the intermediate model
repository factory that is mapping related. It would make more sense
to just have the mapping repository factory take on all of that work.

*** COMPLETED Implement the output languages transform                :story:
    CLOSED: [2017-07-07 Fri 15:41]
    CLOCK: [2017-07-07 Fri 15:24]--[2017-07-07 Fri 15:41] =>  0:17
    CLOCK: [2017-07-07 Fri 14:51]--[2017-07-07 Fri 15:11] =>  0:20

Tasks:

- create a transform that expands an intermediate model into a number
  of models, mapped to languages.
- update the initial target chain to perform the language expansion to
  the target.

*** COMPLETED Use forward declaration for context                     :story:
    CLOSED: [2017-07-07 Fri 21:19]
    CLOCK: [2017-07-07 Fri 20:59]--[2017-07-07 Fri 21:19] =>  0:20

We've implemented a number of transforms using context
references. Now, when we change context, we end up with a massive
rebuild. We should be able to change all of the headers to include the
forward declaration.

*** COMPLETED Implement the references chain                          :story:
    CLOSED: [2017-07-08 Sat 17:17]
    CLOCK: [2017-07-08 Sat 16:06]--[2017-07-08 Sat 17:16] =>  1:10
    CLOCK: [2017-07-08 Sat 15:15]--[2017-07-08 Sat 16:05] =>  0:37
    CLOCK: [2017-07-07 Fri 21:20]--[2017-07-07 Fri 22:03] =>  0:43

Tasks:

- implement the references expansion in the references chain.
- plug in the references chain into the model generation chain.
- consider using a multi-threaded approach. If its too hard we should
  just stick to the single-threaded implementation we have at present.

Notes:

- add a reference extractor to extract all paths
- make references chain PIM - but language must match target's. this
  won't work: target LAM, converts to C#, reference is C#; reference
  gets dropped. We need to supply all of the languages (input and
  output) and if there is a match, we need to keep the reference.
- handle PSM in model generation chain, for both target and references

*** COMPLETED Implement the merge transform                           :story:
    CLOSED: [2017-07-08 Sat 18:24]
    CLOCK: [2017-07-08 Sat 17:44]--[2017-07-08 Sat 18:24] =>  0:40

We need to refactor the existing merger into a one-shot transform that
takes a list of partial models and returns the merged model.

*** STARTED Implement the model assembly chain                        :story:
    CLOCK: [2017-07-08 Sat 17:20]--[2017-07-08 Sat 17:31] =>  0:11

Tasks:

- map models;
- merge models;
- apply post processing
- convert models to their final representation.
- plug it in the model generation chain.

*** STARTED Implement the model generation chain                      :story:
    CLOCK: [2017-07-08 Sat 17:31]--[2017-07-08 Sat 17:44] =>  0:13

Tasks:

- implement the output languages expansion, considering
  multi-threading. If its too hard we should just stick to the
  single-threaded implementation we have at present.
- implement the intermediate model transform.

*** Implement the post-processing chain                               :story:

This story may be too big as one story.

Tasks:

- implement the external transform chain.
- implement all other transforms required by the post-processing
  chain.
- plug it in the model generation chain.
- fix all errors when we replace the legacy code with the new
  transform-based code.

*** Implement the code-generation chain                               :story:

Tasks:

- Add registration, interfaces etc.
- implement the kernels in terms of the new interfaces.
- update knit to use the code generator.

*** Use the in-memory interface of LibXml                             :story:

At present, our C++ wrappers on top of LibXml are using the file based
interface. We should do in-memory processing of the XML file. Once
this is in place, we can change the exogenous transformers to use
strings rather than paths to files.

*** Move element segmentation into yarn                               :story:

We've added the notion that an element can be composed of other
elements in quilt, in order to handle forward declarations. However,
with a little bit of effort we can generalise it into yarn. It would
be useful for other things such as inner classes. We don't need to
actually implement inner classes right now but we should make sure the
moving of this feature into yarn is compatible with it.

Notes:

- seems like we have two use cases: a) we need all elements, master
  and extensions and we don't really care about which is which. b) we
  only want masters. However, we must be able to access the same
  element properties from either the master or the extension. Having
  said all that, it seems we don't really need all of the element
  properties for both - forward declarations probably only need:
  decoration and artefact properties.
- we don't seem to use the map in formattables model anywhere, other
  than to find master/extension elements.
- Yarn model could have two simple list containers (masters and
  all). Or maybe we don't even need this to start off with, we can
  just iterate and skip extensions where required.
- so in conclusion, we to move decoration, enablement and dependencies
  into yarn (basically decoration and artefact properties) first and
  then see where segmentation ends.

*** Start documenting the theoretical aspects of Dogen                :story:

Up to now we have more or less coded Dogen as we went along; we
haven't really spent a lot of time worrying about the theory behind
the work we were carrying out. However, as we reached v1.0, the theory
took center stage. We cannot proceed to the next phase of the product
without a firm grasp of the theory. This story is a starting point so
we can decide on how to break up the work.

*** Add support for proper JSON serialisation in C++                  :story:

We need to add support for JSON in C++. It will eventually have to
roundtrip to JSON in C# but that will be handled as two separate
stories.

Libraries:

- One option is [[https://github.com/cierelabs/json_spirit][json_spirit]].
- Another option is [[https://github.com/miloyip/rapidjson][RapidJson]].
- Actually there is a project comparing JSON libraries: [[https://github.com/miloyip/nativejson-benchmark][nativejson-benchmark]]
- One interesting library is [[https://github.com/dropbox/json11][Json11]].

When we implement this we should provide support for JSON with
roundtripping tests.

We will not replace the current IO implementation; it should continue
to exist as is, requiring no external dependencies.

We should consider supporting multiple JSON libraries: instead of
making the mistake we did with serialisation where we bound the name
=serialization= with boost serialisation, we should call it by its
real name, e.g. =json_spirit= etc. Then when a user creates a
stereotype for a profile such as =Serializable= it can choose which
serialisation codecs to enable for which language. This means that the
same stereotypes can have different meanings in different
architectures, which is the desired behaviour.

We should create a serialise / deserialise functions following the
same logic as boost:

#+begin_src c++
void serialize(Value& v, const object& o);
void serialize(Value& v, const base& b);

void deserialize(const Value& v, object& o);
base* deserialize(const Value& v);
#+end_src

Or perhaps even better, we can make the above the internal methods and
use =operator<<= and =operator>>= as the external methods:

#+begin_src c++
void operator<<(Value& v, const object& o);
void operator>>(const Value& v, object& o);
#+end_src

Notes:

- create a registrar with a map for each base type. The function
  returns a base type pointer.
- when you deserialize a base type pointer, you call the pointer
  deserialize above. Same for when you have a pointer to an object. It
  will internally call the registrar (if its a base type) and get the
  right function.
- this means we only need to look at type for inheritance. Although we
  should probably always do it for validation? However, what happens
  if we want to make a model so we can read external JSON? It won't
  contain type markings.
- =operator>>= will not be defined for pointers or base classes.
- this wont work for the case of =doc << base=. For this we need a map
  that looks up on type_index.

Merged stories:

For the previous attempt to integrate RapidJson see this commit:

b2cce41 * third party: remove includes and rapid json

*Add support for JSON serialisation*

We should have proper JSON serialisation support, for both reading and
writing. We can then implement IO in terms of JSON.

*Raw JSON vs cooked JSON*

If we do implement customisable JSON serialisation, we should still
use the raw format in streaming. We need a way to disable the cooked
JSON internally. We should also re-implement streaming in terms of
this JSON mode.

*** Move all data types into its own namespace                        :story:

Now we have placed all the transforms under namespace =transforms=,
for symmetry purposes it would be nice to have some top-level
namespace for the data types. Names:

- entities
- ...

If we cannot find any good names, we may need to leave these objects
at the top-level. However, we should probably also place the code
generator at the top-level as well.

** Deprecated
