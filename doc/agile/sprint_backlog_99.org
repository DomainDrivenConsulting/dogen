#+title: Sprint Backlog 98
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Improve Visual Studio support.
- Finish ODB/Oracle blog post series.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2017-03-13 Mon 20:16]
| <75>                                                                        |         |       |       |       |
| Headline                                                                    | Time    |       |       |     % |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| *Total time*                                                                | *39:13* |       |       | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| Stories                                                                     | 39:13   |       |       | 100.0 |
| Active                                                                      |         | 39:13 |       | 100.0 |
| STARTED Sprint and product backlog grooming                                 |         |       |  1:01 |   2.6 |
| COMPLETED Edit release notes for previous sprint                            |         |       |  0:26 |   1.1 |
| COMPLETED Add test model for path meta-data                                 |         |       |  2:58 |   7.6 |
| COMPLETED ODB CMakeLists does not cope with changes to project paths        |         |       |  5:04 |  12.9 |
| COMPLETED Split include and source directories                              |         |       |  5:22 |  13.7 |
| COMPLETED Add C++-03 mode                                                   |         |       |  8:19 |  21.2 |
| COMPLETED Add a LAM test model just to validate existing functionality      |         |       |  2:38 |   6.7 |
| STARTED Check for incompatibility between input language and enabled kernels |         |       |  0:11 |   0.5 |
| STARTED Build on tags for Windows                                           |         |       |  0:15 |   0.6 |
| STARTED Add a "flat directory" mode                                         |         |       |  0:08 |   0.3 |
| STARTED Handling of visual studio projects and solutions is incorrect       |         |       |  1:11 |   3.0 |
| STARTED Implement the database model using Northwind                        |         |       | 11:40 |  29.7 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2017-03-09 Thu 07:10]--[2017-03-09 Thu 07:22] =>  0:12
    CLOCK: [2017-03-07 Tue 21:31]--[2017-03-07 Tue 21:36] =>  0:05
    CLOCK: [2017-03-07 Tue 21:24]--[2017-03-07 Tue 21:30] =>  0:06
    CLOCK: [2017-03-07 Tue 21:01]--[2017-03-07 Tue 21:23] =>  0:22
    CLOCK: [2017-03-06 Mon 10:33]--[2017-03-06 Mon 10:49] =>  0:16

Updates to sprint and product backlog.

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2017-03-06 Mon 12:15]
    CLOCK: [2017-03-06 Mon 10:49]--[2017-03-06 Mon 11:15] =>  0:26

Add github release notes for previous sprint.

Title: Dogen v0.98.0, "Santo Adrião"

#+begin_src markdown
![alt text](http://3.bp.blogspot.com/_QN04x6AzKRw/S3GrWbya3EI/AAAAAAAASdo/UiHYehVmWQE/s640/Igreja.jpg)
Igreja de Santo Adrião, Namibe, Angola. (C) Blog Moçâmedes Saudade, in [blogspot](http://mocamedes-saudade.blogspot.co.uk/2007/05/blog-post_2275.html).

Overview
=======
As with the previous sprint, this sprint was also a smuttering of unrelated commits, attempting to address problems we are facing in production at present. However a main theme emerged: major improvements in the ODB support.

This was spurned by the ongoing series of blogposts on the integration of ODB with Dogen, using Oracle as the RDBMS:

- [Nerd Food: Northwind, or Using Dogen with ODB - Part I](http://mcraveiro.blogspot.co.uk/2017/02/nerd-food-northwind-or-using-dogen-with.html)
- [Nerd Food: Northwind, or Using Dogen with ODB - Part II](http://mcraveiro.blogspot.co.uk/2017/02/nerd-food-northwind-or-using-dogen-with_24.html)

The purpose of these series of posts is to give Dogen's ORM functionality a through testing to ensure its good enough for production. The end result will be an update to the Database test model.

Finally, we also took the chance to clean up the multiple test models we had in C++, and coalesced a number of them into a single, unified test model for C++, along the lines of what we had done for C#.

User visible changes
===============
In this sprint, a small number of user visible changes were made:

- **ODB Fixes**: a number of small fixes in the ODB support were performed, including fixing the CMake targets.
- **Introduction of the ORM layer**: We create a layer of indirection between Dogen and ODB, allowing users to configure the object-relational mapping in "generic terms". This has the side-effect of greatly reducing the number of manual ODB pragmas required, because Dogen can now infer a lot of information from the meta-data supplied.
- **Log directory is now configurable**: You can now send the Dogen logs to a directory of your choosing, making Dogen easier to integrate with existing builds, which may already have their own log directory.

For more details of the work carried out this sprint, see the [sprint log](https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_98.org).

Next Sprint
========
The next sprint will continue to focus on ODB and Visual Studio support.

Binaries
======
You can download experimental binaries from [Bintray](https://bintray.com/domaindrivenconsulting/Dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_0.98.0_amd64-applications.deb](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.98.0/dogen_0.98.0_amd64-applications.deb)
- [dogen-0.98.0-Darwin-x86_64.dmg](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.98.0/dogen-0.98.0-Darwin-x86_64.dmg)
- [dogen-0.98.0-Windows-AMD64.msi](https://dl.bintray.com/domaindrivenconsulting/Dogen/dogen-0.98.0-Windows-AMD64.msi)

**Note**: They are produced by CI so they may not yet be ready.

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/838746103579291648][Tweet]]
- [[https://www.linkedin.com/hp/update/6244512213571248128/][LinkedIn]]

*** COMPLETED Add test model for path meta-data                       :story:
    CLOSED: [2017-03-06 Mon 22:15]
    CLOCK: [2017-03-06 Mon 22:10]--[2017-03-06 Mon 22:19] =>  0:09
    CLOCK: [2017-03-06 Mon 21:02]--[2017-03-06 Mon 22:09] =>  1:07
    CLOCK: [2017-03-06 Mon 20:36]--[2017-03-06 Mon 20:42] =>  0:06
    CLOCK: [2017-03-06 Mon 20:21]--[2017-03-06 Mon 20:35] =>  0:14
    CLOCK: [2017-03-06 Mon 20:05]--[2017-03-06 Mon 20:20] =>  0:15
    CLOCK: [2017-03-06 Mon 18:22]--[2017-03-06 Mon 18:29] =>  0:07
    CLOCK: [2017-03-06 Mon 17:02]--[2017-03-06 Mon 18:02] =>  1:00

We are making use of directory and file settings, but we do not have
any tests for it. Add a simple test model that exercises all settings
in one go (at least those that are not mutually exclusive).

*** COMPLETED ODB CMakeLists does not cope with changes to project paths :story:
    CLOSED: [2017-03-07 Tue 13:33]
    CLOCK: [2017-03-07 Tue 13:56]--[2017-03-07 Tue 14:06] =>  0:10
    CLOCK: [2017-03-07 Tue 13:34]--[2017-03-07 Tue 13:55] =>  0:21
    CLOCK: [2017-03-07 Tue 13:18]--[2017-03-07 Tue 13:33] =>  0:15
    CLOCK: [2017-03-07 Tue 12:40]--[2017-03-07 Tue 13:17] =>  0:37
    CLOCK: [2017-03-07 Tue 11:39]--[2017-03-07 Tue 12:02] =>  0:23
    CLOCK: [2017-03-07 Tue 11:03]--[2017-03-07 Tue 11:38] =>  0:35
    CLOCK: [2017-03-07 Tue 10:06]--[2017-03-07 Tue 10:40] =>  1:31
    CLOCK: [2017-03-07 Tue 08:27]--[2017-03-07 Tue 10:05] =>  1:38
    CLOCK: [2017-03-07 Tue 07:55]--[2017-03-07 Tue 08:26] =>  0:31

We have hard-coded the path to the ODB directory in the CMakeLists
file. This means that when we update the path to a different include,
source or ODB directory, the CMake file will fail. We need to add these
locations to fabric's CMakeLists and use the locator to populate it.

Notes:

- injection is done before the quilt workflow, so we do not have a
  locator handy. CMakeLists population will have to be a two-step
  process. We could add a CMakeLists expander (or somesuch other name)
  which is responsible for populating these directories.
- we may need to split CMakeLists into two: include and source. We
  don't need these parameters for source.
- we need the include directory name, path to source and include ODB
  directories and path to ODB options file.

Parameters not tested in the =all_path_and_directory_settings.dia=
model due to this problem:

: #DOGEN quilt.cpp.source_directory_name=some_source_dir
: #DOGEN quilt.cpp.include_directory_name=some_include_dir
: #DOGEN quilt.cpp.odb.directory=odb_dir

*** COMPLETED Split include and source directories                    :story:
    CLOSED: [2017-03-08 Wed 14:39]
    CLOCK: [2017-03-08 Wed 16:30]--[2017-03-08 Wed 16:50] =>  0:20
    CLOCK: [2017-03-08 Wed 15:52]--[2017-03-08 Wed 16:29] =>  0:37
    CLOCK: [2017-03-08 Wed 15:47]--[2017-03-08 Wed 15:51] =>  0:04
    CLOCK: [2017-03-08 Wed 15:16]--[2017-03-08 Wed 15:46] =>  0:30
    CLOCK: [2017-03-08 Wed 14:40]--[2017-03-08 Wed 15:15] =>  0:35
    CLOCK: [2017-03-08 Wed 14:25]--[2017-03-08 Wed 14:39] =>  0:14
    CLOCK: [2017-03-08 Wed 13:56]--[2017-03-08 Wed 14:24] =>  0:28
    CLOCK: [2017-03-08 Wed 13:35]--[2017-03-08 Wed 13:55] =>  0:20
    CLOCK: [2017-03-08 Wed 11:39]--[2017-03-08 Wed 12:33] =>  0:54
    CLOCK: [2017-03-08 Wed 11:16]--[2017-03-08 Wed 11:38] =>  0:22
    CLOCK: [2017-03-08 Wed 09:42]--[2017-03-08 Wed 10:09] =>  0:27
    CLOCK: [2017-03-06 Mon 16:30]--[2017-03-06 Mon 17:01] =>  0:31

We removed a feature due to lack of use cases: splitting source and
include directories. It allowed having them placed in different
top-level directories. It also meant that the computation of managed
directories required access to the root object. In case we need to
reactivate this story (if we find a use case), we keep track of the
commits that removed the feature here.

- [[https://github.com/DomainDrivenConsulting/dogen/commit/6103de47af5fc7d33710b216cac0fb1943416448][remove support for split projects]]

This will be implemented slightly differently this time round
though. Instead of a "split project" option and two additional options
for include and source, we'll just add a new option for include:

: output-cpp-include-dir

If present, it will be used for the c++ include directory. If not
present, the behaviour will remain as is. We can propagate this
information all the way to the locator, where it will do the right
thing.

Major problem: all of the CMake file relationships breakdown because
they had assumed include and source had the same parent directory. We
now need to:

- compute relative paths between include and source;
- move top-level CMake file to stay with source.

Merged stories:

*Handling of include cmakelists in split projects is not correct*

At present we are only generating a cmakelists file for include
folders on non-split projects. This means that the header files for
split projects won't be packaged up. It also means that for ODB
projects we won't get the ODB targets.

*** COMPLETED Add C++-03 mode                                          :epic:
    CLOSED: [2017-03-10 Fri 12:01]
    CLOCK: [2017-03-10 Fri 11:28]--[2017-03-10 Fri 12:00] =>  0:32
    CLOCK: [2017-03-10 Fri 11:02]--[2017-03-10 Fri 11:27] =>  0:25
    CLOCK: [2017-03-10 Fri 10:12]--[2017-03-10 Fri 10:47] =>  0:35
    CLOCK: [2017-03-09 Thu 15:33]--[2017-03-09 Thu 17:15] =>  1:42
    CLOCK: [2017-03-09 Thu 15:08]--[2017-03-09 Thu 15:32] =>  0:24
    CLOCK: [2017-03-09 Thu 15:00]--[2017-03-09 Thu 15:07] =>  0:07
    CLOCK: [2017-03-09 Thu 13:42]--[2017-03-09 Thu 14:59] =>  1:17
    CLOCK: [2017-03-09 Thu 08:21]--[2017-03-09 Thu 09:10] =>  0:49
    CLOCK: [2017-03-08 Wed 23:32]--[2017-03-08 Wed 23:50] =>  0:18
    CLOCK: [2017-03-08 Wed 22:15]--[2017-03-08 Wed 23:31] =>  1:16
    CLOCK: [2017-03-08 Wed 20:26]--[2017-03-08 Wed 21:01] =>  0:35
    CLOCK: [2017-03-08 Wed 17:32]--[2017-03-08 Wed 17:51] =>  0:19

#+begin_quote
*Story*: As a dogen user, I want to create models in C++ 03 so that I
can interface with legacy code.
#+end_quote

It shouldn't be too hard to generate C++-03 code in addition to
C++-14. We could follow the gcc/odb convention and have a =-std=
option for this in meta-data. The only problem would be testing - at
present the language settings comes from cmake, and we'd have to make
sure the compiler is not in C++-14 mode when compiling test models
in 03. Also, the mixing and matching of 03 with 14 may not be
trivial. We should wait for a use case.

It may be possible to add different flags to different projects in
CMake.

We should call this the c++ dialect.

Tasks:

- default ctors, final, noexcept. Need to manually add default
  ctor (e.g. force it).
- enums
- need to disable ODB c++ 11 as well.

*** COMPLETED Add a LAM test model just to validate existing functionality :story:
    CLOSED: [2017-03-13 Mon 14:34]
    CLOCK: [2017-03-10 Fri 20:40]--[2017-03-10 Fri 21:06] =>  0:26
    CLOCK: [2017-03-10 Fri 15:31]--[2017-03-10 Fri 15:55] =>  0:24
    CLOCK: [2017-03-07 Tue 14:07]--[2017-03-07 Tue 15:55] =>  1:48

At present we have basic support for LAM. We should create a simple
test model that uses a few of the mapped types just to make sure it
vaguely works and does not

*** STARTED Check for incompatibility between input language and enabled kernels :story:
    CLOCK: [2017-03-06 Mon 22:20]--[2017-03-06 Mon 22:31] =>  0:11

At present it is possible to have a model with input language of say
C++ but with the C# kernel enabled. We should throw if the input
language is incompatible with the enabled kernels.

Sadly this is not trivial. This is because quilt only sees the mapped
models; thus as far as knit is concerned, we ask for the input
language (e.g. c++) and there is an enabled kernel for it. We don't
look at it from the enabled kernel's perspective (e.g. "C# is enabled,
why is there no input language for it?"). We could have a method in
quilt that returns all enabled kernels; we could then look at all
models we are going to build and if there is a mismatch we can
throw. But extracting the =configuration_factory= out of quilt
workflow is not going to be easy without screwing up the API.

*** STARTED Build on tags for Windows                                 :story:
    CLOCK: [2017-03-06 Mon 12:01]--[2017-03-06 Mon 12:16] =>  0:15

At present we are not building and deploying for tags on Windows. This
is a major pain because it means we must remember to always push the
tag separately. We need to setup appveyor correctly.

Links:

- [[http://help.appveyor.com/discussions/problems/6209-build-is-not-triggered-for-tag][Build is not triggered for tag]]

*** STARTED Add a "flat directory" mode                               :story:
    CLOCK: [2017-03-06 Mon 14:31]--[2017-03-06 Mon 14:39] =>  0:08

It would be nice to have a mode in which all files get placed in a
single-directory: no src, include, etc – just one big folder with all
files.

Actually we can already achieve this:

- set =quilt.cpp.disable_facet_directories= to true
- set =quilt.cpp.include_directory_name= to empty
- set =quilt.cpp.source_directory_name= to empty

It is however a bit painful. It would be nice to have a shorthand for
this, which could be the "flat directory" mode. It is also compatible
with split project mode (we just have flat directories in two
different top-level directories), which is nice.

We should check that =enable_unique_file_names= is set to true.

*** STARTED Handling of visual studio projects and solutions is incorrect :story:
    CLOCK: [2017-03-09 Thu 06:39]--[2017-03-09 Thu 07:01] =>  0:22
    CLOCK: [2017-03-07 Tue 20:56]--[2017-03-07 Tue 21:00] =>  0:04
    CLOCK: [2017-03-07 Tue 20:10]--[2017-03-07 Tue 20:55] =>  0:45

At present we added the extension of the solution/project to the
element name, e.g.:

: all_path_and_directory_settings.csproj

This happens to work for the simpler cases, but if we try to add a
postfix we then have a problem:

: dogen.test_models.all_path_and_directory_settings.csproj_vc15_

Projects and solutions do not seem to fit our conceptual model for the
element space. We need to somehow have distinct element IDs but yet
not associate the extension with the name directly. Up to now we never
had two distinct elements with the exact same name but generating two
different artefacts with different extensions.

This is a problem because we will need to have the ability to generate
multiple project files for different versions of visual studio.

For now we removed the project and solution postfixes:

: #DOGEN quilt.csharp.visual_studio.solution.postfix=_vs15_
: #DOGEN quilt.csharp.visual_studio.project.postfix=_vc15_

In order to fit our conceptual model, we need to make some adjustments
to our implementation of projects and solutions. First, there is only
one meta-model element for *both* projects and solutions. This is
derived from the fact that they both share a common name. The
conceptual model does not involve file extensions - or file paths for
that matter; archetypes exist only in archetype space, and their
"paths" in this space are only related to the facets they belong
to. The physical location is a property of files, which are
expressions of archetypes in "file space". Thus, there is only one
single element, provisionally called "visual studio", which has
multiple archetypes (and their associated formatters):

- solution
- project

Second, a solution and project may be instantiated multiple times,
depending on the version of visual studio and the associated
compiler. Externally users supply a visual studio version and that
internally will map to different instances of the formatters. We must
instantiate the formatters for each supported version because we may
need to create multiple versions simultaneously: his is the use case
where users want to generate projects and solutions for multiple
versions of VS at the same time.

THe good news is that we already have something similar: master
includes. We can adapt a lot of the logic we have for master
includes. There are some differences though:

- we will have multiple instances on the same facet.
- we need some external mechanism to determine if a given version is
  enabled. We could force users to enter the "enabled" property for
  each version in the meta-data, but that would get really messy since
  there are only a few valid combinations of solution and project
  version. Its better if users supply the Visual Studio versions and
  we infer the solution and projects to enable. But we do not have a
  mechanism for this at present. We could add a "is enabled" to
  formatters like we did for helpers, supplying the element; we would
  then check the Visual Studio version in the element and return false
  if it didn't match the formatters version. Or we could change the
  formatter's interface to return optional artefact. Whilst this is a
  bit more painful - we'd have to change all formatters - it fits the
  code structure slightly better.
- we need to have different file names depending on the
  version. Worse: if there is just a single version we do not need to
  have a "version prefix". If there are multiple versions we need to
  add the prefix. The fist use case is easy: we already have archetype
  prefixes; we just need to add a prefix for each version. The second
  part requires some hacking. We could have an option in locator:
  "apply archetype postfix" supplied as an argument. Since we have the
  Visual Studio element we have visibility of all enabled versions.

*** STARTED Implement the database model using Northwind              :story:
    CLOCK: [2017-03-13 Mon 19:35]--[2017-03-13 Mon 20:16] =>  0:41
    CLOCK: [2017-03-13 Mon 17:57]--[2017-03-13 Mon 18:31] =>  0:34
    CLOCK: [2017-03-13 Mon 16:45]--[2017-03-13 Mon 17:56] =>  1:11
    CLOCK: [2017-03-13 Mon 15:51]--[2017-03-13 Mon 16:44] =>  0:53
    CLOCK: [2017-03-13 Mon 15:16]--[2017-03-13 Mon 15:50] =>  0:34
    CLOCK: [2017-03-13 Mon 13:54]--[2017-03-13 Mon 15:15] =>  1:21
    CLOCK: [2017-03-13 Mon 13:35]--[2017-03-13 Mon 13:53] =>  0:18
    CLOCK: [2017-03-13 Mon 11:02]--[2017-03-13 Mon 11:25] =>  0:23
    CLOCK: [2017-03-13 Mon 10:30]--[2017-03-13 Mon 10:34] =>  0:04
    CLOCK: [2017-03-13 Mon 09:12]--[2017-03-13 Mon 10:03] =>  0:51
    CLOCK: [2017-03-12 Sun 21:37]--[2017-03-12 Sun 21:51] =>  0:14
    CLOCK: [2017-03-12 Sun 20:13]--[2017-03-12 Sun 21:36] =>  1:23
    CLOCK: [2017-03-12 Sun 17:21]--[2017-03-12 Sun 18:19] =>  0:58
    CLOCK: [2017-03-12 Sun 15:05]--[2017-03-12 Sun 17:20] =>  2:15

Now we are using Dogen in anger with ODB, we need to make sure the
database model is actually exercising all of this functionality. One
easy way of achieving this is to use Microsoft's Northwind Database as
the base for the model.

- [[https://northwinddatabase.codeplex.com/][Northwind Database]]

We should implement it using Oracle and use this to test the changes
to ODB's oracle support.

Tasks:

- add comment for ODB targets
- add flag to mark a type as a value
- case of the identifiers is a problem: sometimes we get them
  uppercase (when we do them without quotes in sql plus) sometimes we
  get them lowercase (from odb). use =--sql-name-case= upper/lower as
  a flag.
- schema initialisation from statics is not working; this is as
  explained in [[http://www.codesynthesis.com/pipermail/odb-users/2013-May/001286.html][this email]]. We can force it by doing a query on that
  entity, but that then causes an exception.
- =head -n 200 northwind_ascii.sql | grep ^INSERT | cut -b 1-150 | uniq=

Notes:

: set linesize 8192
: set pagesize 50000

*** Ignore ODB files automatically                                    :story:

At present we are adding the following regular expressions to knitter
whenever we are using ODB with dogen:

:        --ignore-files-matching-regex .*sql
:        --ignore-files-matching-regex .*-odb.*)

We should inject the ODB files automatically into the list of expected
files. For a given element =foreign_key=, we will have a dogen file

: foreign_key_pragmas.hpp

We will also have the following ODB files:

: foreign_key-odb.cxx
: foreign_key-odb.hxx
: foreign_key-odb.ipp
: foreign_key-odb.ixx

The first file can either be on the =include/odb= directory or on the
=src/odb= directory (it is moved by the ODB target). All other files
are placed in the =include/odb= folder. Note that at present we are
using =cpp= extension rather than =cxx=.

Ideally we should also add the ODB include files to the master
includes. However, we probably need a separate master include file
just for ODB files.

*** Rename main Dogen package in Debian                               :story:

At present we seem to have called our package =dogen-applications=:

: $ apt-cache search dogen-applications
: dogen-applications - The Domain Generator - Generates source code for domain driven development.

We should try to call it just =dogen=.

*** Split out the file extension from the formatter                   :story:

At present we have handled file extensions in one of two ways:

- we baked them in into locator, dynamically: this is the case for
  =hpp= and =cpp=, where locator is responsible for retrieving the
  meta-data related to extensions.
- we hacked them in into locator, statically: this is the case for
  CMakeLists, where the =txt= is hard-coded in.
- we hacked them in into the elements: this is the case for Visual
  Studio solutions and projects.

In reality, what we need is to create a separation between the
archetype, the extension "kind" and the actual extension. All
archetypes have a fixed "extension kind". For example, C++ headers
will always have a C++ header extension even though the actual header
extension used is not known. In other cases the extension kind has a
fixed extension (CMakeLists, Visual Studio projects, solutions). At
present this mapping is done via the multiple functions locator
supplies.

We could conceivably have an enumeration for extension kind and then
have a single function for full paths, that just takes in the
extension kind, archetype etc. This would replace the proliferation of
"full path for XYZ".

We also have the concept of inclusion paths. We should generalise this
to just "relative paths" and have a "add project directory?" flag.

*** Name all project paths according to a scheme                      :story:

The locator API looks really confusing due to the various kinds of
paths. We need to catalogue them all and name them properly.

- output directory: directory into which knitter will write all files,
  unless "c++ headers output directory" is set, in which case it will
  write all files except for the headers.
- c++ headers output directory: directory in which knitter will write
  the headers. Only applicable to c++.
- include directory: aka inclusion directory; directory to place in
  the include path.

*** Start signing all tags                                            :story:

We should really be signing all git tags.

Links:

- [[https://git-scm.com/book/tr/v2/Git-Tools-Signing-Your-Work][Git Tools - Signing Your Work]]
- [[http://stackoverflow.com/questions/10161198/is-there-a-way-to-autosign-commits-in-git-with-a-gpg-key][Is there a way to “autosign” commits in Git with a GPG key?]]
- [[http://emacs.stackexchange.com/questions/18514/how-to-automatically-sign-commits-with-magit][How to automatically sign commits with magit?]]

*** Not setting output language results in weird errors               :story:

When setting the input language to language agnostic and not setting
the output languages, we get the following error:

: /dogen/projects/yarn/src/types/legacy_name_tree_parser.cpp(123): Throw in function std::__cxx11::string {anonymous}::grammar<Iterator>::scope_operator_for_language(dogen::yarn::languages) [with Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >; std::__cxx11::string = std::__cxx11::basic_string<char>]
: Dynamic exception type: boost::exception_detail::clone_impl<dogen::yarn::parsing_error>
: std::exception::what: Invalid or unsupported language: { "__type__": "languages", "value": "language_agnostic" }
: [tag_workflow*] = Code generation failure.
: [owner*] = <dogen><test_models><all_path_and_directory_settings><package_0><package_0_1><class_2>
: unknown location(0): fatal error: in "workflow_tests/all_path_and_directory_settings_generates_expected_code_dia": std::runtime_error: Error during test
: /home/marco/Development/DomainDrivenConsulting/dogen/projects/knit/tests/workflow_tests.cpp(213): last checkpoint

*** Using underscores with C# results in invalid code                 :story:

When building in LAM, if one uses underscore notation we create code
like so:

:        public int prop_0 { get; set; }
:        public class_0(int prop_0)
:        {
:            prop_0 = prop_0;
:        }

C# thinks we're assigning the parameter to itself rather than making
use of the property.

*** Support containers correctly in annotations                       :story:

At present we are allowing users to enter the same key multiple times
to represent a container:

: #DOGEN yarn.output_language=cpp
: #DOGEN yarn.output_language=csharp


This was an acceptable pattern from a Dia perspective, because we had
control of the KVP semantics. However, when we copied the pattern
across to the JSON representation things did not work out so
well. This is because the following JSON:

:     "yarn.output_language": "csharp",
:     "yarn.output_language": "cpp",

Is interpreted by a lot of JSON parsers as a duplicate, and results on
only a single KVP making it. We could try to solve a lot of problems
in one go and standardise all of the meta-data on JSON:

- use start and end markers to enclose the JSON when in dia. Story:
  [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/product_backlog.org#consider-adding-a-start-and-end-dogen-variable-block-in-dia][Consider adding a start and end dogen variable block in dia]]
- this would also solve the problem with pairs (or at least part of
  it). Story: [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_99.org#add-a-new-annotation-type-of-pair][Add a new annotation type of “pair”]]
- we could allow users to keep the JSON externally. Story: [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_99.org#add-support-for-one-off-profiles][Add support
  for “one off” profiles]]
- the JSON would also work nicely with the concept of a dogen
  project. Story: [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_99.org#introduce-dogen-projects][Introduce dogen projects]]

However, before we embark on this story we need to perform a lot of
analysis on this.

Notes:

- [[http://json-schema.org/][JSON Schema]]
- [[https://github.com/aspnet/Home/wiki/Project.json-file][Project.Json]]
- yarn.dia.comment is no longer necessary, just look for the
  markers.
- we should only allow arrays of simple types.
- the fragment used inside Dia should be identical to the file
  supplied as argument for the one-off profile and it should also
  identical to a fragment inside a project. Do we need to support both
  projects and one-off profiles?

Sample:

#+begin_src
  "annotation": {
    "yarn.dia.comment": true,
    "yarn.dia.external_modules": "dogen::test_models",
    "annotations.profile": "dogen",
    "yarn.input_language": "language_agnostic",
    "yarn.output_language": [ "csharp", "cpp" ]
#+end_src

This error has been picked up by codacy too:

- [[https://www.codacy.com/app/marco-craveiro/dogen/commit?cid%3D79696432&bid%3D3493157&utm_campaign%3Dnew_commit&utm_medium%3DEmail&utm_source%3DInternal][Commit 91886c6]]&

*** Add =targetver.h= support                                         :story:

On windows we should be generating the targetver header.

Links:

- [[https://github.com/Microsoft/Windows-classic-samples/blob/master/Samples/RadialController/cpp/targetver.h][targetver.h]]

*** Add support for DLL Main on windows                               :story:

At present we are manually generating DLL Main by hand and then
excluding it on regexes. This is not ideal and will be more of a
problem when we generate project files. Ideally we should code
generate it. Requirements:

- user must be able to disable it;
- user must be able to handcraft it in case they want different
  contents;

Links:

- [[https://msdn.microsoft.com/en-us/library/aa370448(v%3Dvs.85).aspx][DLL Main]]

*** Add support for pre-compiled headers on windows                   :story:

Most VS users have pre-compiled headers. We need to generate
=stdafx.h= etc. For now we can have it minimally populated until we
understand better the requirements.

Actually we could probably do a very simple computation in quilt to
figure out the most frequently used headers and add those to
=stdafx=. We just need to go through the entire model in the inclusion
expander to perform this calculation.

In addition we need to make sure =stdafx= is added as the first
include.

We should have a quilt setting for pre-compilation. We should also
check that visual studio support is enabled in order to generate
=stdafx=.

*** Add support for Visual Studio C++ projects                        :story:

Visual studio project needs the files to be listed by hand. We can
either generate the project or the user has to manually add the
files. This is a problem every time they change. Requirements:

- we need to be able to support multiple VS versions as well (user
  configurable)
- user may want to import property sheets
- need guids (as per C# projects)
- need additional library/include directories
- need to add pre-compiled headers support with /FI.
- add a solution for good measure, using the C# code.
- add filter files for headers and source files.

As per ODB, users may also want to build with different versions of
VS. We should allow generating more than one solution and postfix them
with the VS version.

We should also generate filters for the project:

- header files
- source files
- ODB header files
- ODB source files

The inclusion of ODB files must be done using regular expressions
because we do not want to have to do two passes for knit; so we don't
really know what files are available. However, if the ODB files have a
=cxx= extension, we can just =CLInclude= =*cxx=.

Links:

- [[https://msdn.microsoft.com/en-us/library/2208a1f2.aspx][Project Files]]

*** Add a top-level "Visual Studio" knob                              :story:

We have a number of features that only make sense when on Windows and
building for Visual Studio. We should have a top-level knob that
enables or disables all of these features in one go:

- =quilt.cpp.visual_studio.enabled=

*** Handcrafted support for fabric types                              :story:

At present we can either disable fabric types or enable them
(CMakeLists, etc). However, there is a third common use case: to
handcraft them. To do this we normally disable them and then add the
file to the ignore list:

:  --ignore-files-matching-regex .*/CMakeLists.txt)

One could conceive of some meta-data support that would make this
process a tad easier and more generic:

: quilt.cpp.cmakelists.stereotypes=handcrafted

Then hopefully the existing pipeline would take over and we'd generate
the files for the first time but then let the user overwrite it. This
would also be applicable to all fabric types (registrar, etc) but we'd
have to manually read each stereotype on each factory.

*** Use =cxx= extension with ODB files                                :story:

At present we renamed the ODB extension to =.cpp=. This is to make the
ODB files part of the project:

: set(files "")
: file(GLOB_RECURSE files RELATIVE
:    "${CMAKE_CURRENT_SOURCE_DIR}/"
:    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

However, it's quite nice to have distinct extensions for ODB and Dogen
files. We should add a conditional in CMake that detects ODB and if
found adds:

: set(odb_files "")
: file(GLOB_RECURSE odb_files RELATIVE
:    "${CMAKE_CURRENT_SOURCE_DIR}/"
:    "${CMAKE_CURRENT_SOURCE_DIR}/*.cxx")
: set(files ${files} ${odb_files})

*** Clean up annotation scope types                                   :story:

As part of the attribute rename (which used to be called property) we
should have renamed the annotation scope as well to attribute.

In addition, we have a scope type of "entity" but the yarn meta-model
type is really "element".

We should also check if "not applicable" scope is in use, and if not
delete it.

*** Add a new annotation type of "pair"                               :story:

It would be nice to be able to declare a annotation type with a value
type of "pair" or "key value pair" and have the annotations
automatically perform the splitting. The separator should not be
equals, since we already use that for annotations kvps, but it could
be comma, pipe, etc. The API would be augmented to return a
=std::pair= with key and value.

One slight snag: the value could be of any type:

- boolean
- string
- enumeration (when we support these)
- even text collection

We can start by just supporting strings, but probably worthwhile
having a think on how to specify the type.

*** Create a base options class across all tools                      :story:

At present we are copying and pasting a bit of code related to general
options across all the command line tools (knitter, darter, stitcher,
tailor). We could create a base class that has the common options and
then have a factory that populates the boost program options
associated with that class.

Ideally we should also have a log initialisation class that uses those
common options.

*** Introduce dogen projects                                          :story:

At present we are manually configuring each dogen target, adding each
separately to the build system. Perhaps a better approach is to have a
dogen project file where one can configure all of the targets in one
go. We don’t necessarily have to call dogen directly – perhaps another
command line tool is responsible for invoking dogen? The problem here
is that we’d end up with all dogen models in memory.

At any rate, the project file would contain all models for a given
product. We could possibly run with “all” or “specific” whereby the
user would supply one or more projects to code generate. For all
properties that are common, we’d defined them only once somehow
(common regexes, log level, etc).

*** Add support for "one off" profiles                                :story:

At present one can define top-level profiles. These are useful, but in
practice we ended up still defining a lot of things in each model. We
need a way to associate a profile with a model by supplying it on the
command line. That way users can create profiles and store them next
to the model rather than having to create a data directory, etc etc.

*** Add option to capitalise column and table names                   :story:

One very useful thing is to allow users to define types in camel case
or underscore separated but then have the ODB names generated all in
caps (schema name, table name, column name). The database we are
currently working with is all in caps and we are forced to manually
enter pragmas for every single type because of this. Instead, we
should have some meta-data:

: odb.use_capitals=true

This would automatically generate the pragmas.

One slight downside is that if a user then tries to manually override
the pragmas, we will have duplicates, in effect:

: #DOGEN odb_pragma=schema("northwind")
: #DOGEN odb_pragma=schema("NORTHWIND")

*** Add prefetch support to ODB                                       :story:

As per Boris email:

#+begin_quote
Hm, I am not sure the bulk approach (with a compiler-time pragma) is
right in this case. There we don't really have a choice since we need
to know the "batch buffer" size.

But here it is all runtime. Plus, you may want to have different
prefetch for different queries of the same object. In fact, you
can already customize it for queries (but not for object loads)
by using prepared queries (Section 4.5 in the manual):

1. Create prepared query.

2. Get its statement (statement()).

3. Cast it to odb::oracle::select_statement.

4. Call handle() on the result to get OCIStmt*.

5. Set custom OCI_ATTR_PREFETCH_ROWS.

6. Execute the query.

The problems with this approach are: (1) it is tedious and (2) it
doesn't work for non-query SELECT's (e.g., database::load()). So
perhaps the way to do it is:

1. Provide prefetch() functions on oracle::database() and
   oracle::connection() that can be used to modify database-wide
   and connection-wide prefetch values. Also set it to some
   reasonable default (say 512?)

2. Provide oracle::select_statement::prefetch() to make the
   prepared query approach less tedious.
#+end_quote

*** Replace the database model with the northwind model               :story:

As part of the [[https://github.com/DomainDrivenConsulting/zango][zango]] project we are creating a model that exercises
Dogen and ODB. It is largely based on the database model, minus the
basic types we had added a while ago. We should just drop the database
model and adopt the northwind model from zango.

*** Add ODB to the build machine                                      :story:

At present we are only compiling and running the ODB tests
locally. Now that ODB is becoming a core dependency, we need to make
sure we are running these tests on the build machines - Windows and
Linux at least.

*** Rename ODB parameters                                             :story:

At present we use the following form:

: #DOGEN ODB_PRAGMA=no_id

We need to use the new naming style =cpp.odb.pragma=. We also need to
rename the opaque_parameters to reflect ODB specific data.

Finally we should no longer attempt to derive the ODB pragma
context. We should just add it verbatim.

*** Map upsilon primitives to intrinsics                              :story:

Upsilon allows users to create "strong typedefs" around primitve
types. We need to unpack these into their intrinsic counterparts and
them map the intrinsics to native types.

Slight mistake: we mapped the primitive types themselves but in
reality what needs to be mapped are the fields making references to
the primitive types. We should just filter out all primitives.

Additional wrinkle: what the end users want is to unpack "real
primitives" into intrinsics, but "other" primitives should be mapped
to objects. This can be achieved by hard-coding =Plaform= primitives
into the mapping layer. However, some non-platform primitives may also
be candidates too. We need to create a list of these to see how
widespread the problem is.

Another alternative is to apply hard-coded regexes:

- if the name matches any of the intrinsic names

Finally, the last option may be to have yet another mapping data file
format that lists the primitives to unbox.

*** Immutable types cannot be owned by mutable types                  :story:

When we try to create a mutable class that has a property of an
immutable type, the code fails to compile due to the swap
method. This is because immutable types do not provide swap.

** Deprecated
