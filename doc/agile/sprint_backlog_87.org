#+title: Sprint Backlog 87
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- finish working on remaining formattables.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2016-09-04 Sun 09:07]
| <75>                                                                        |         |       |      |       |
| Headline                                                                    | Time    |       |      |     % |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| *Total time*                                                                | *15:26* |       |      | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+------+-------|
| Stories                                                                     | 15:26   |       |      | 100.0 |
| Active                                                                      |         | 15:26 |      | 100.0 |
| STARTED Sprint and product backlog grooming                                 |         |       | 0:19 |   2.1 |
| COMPLETED Move readme to markdown                                           |         |       | 0:49 |   5.3 |
| COMPLETED Use =element= base class in  =update_element=                     |         |       | 0:29 |   3.1 |
| COMPLETED Move file instantiation code into yarn                            |         |       | 2:22 |  15.3 |
| COMPLETED Yarn naming tidy-up                                               |         |       | 4:19 |  28.0 |
| COMPLETED Generalisation tidy-up                                            |         |       | 5:07 |  33.2 |
| STARTED Create an indexer for resolution data                               |         |       | 0:39 |   4.2 |
| STARTED Consider adding support for inheritance via meta-data               |         |       | 1:22 |   8.9 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2016-09-01 Thu 18:01]--[2016-09-01 Thu 18:20] =>  0:19

Updates to sprint and product backlog.

*** Manual updates and blog posts                                     :story:

Time taken with blog posts and updates to the manual.

*** COMPLETED Move readme to markdown                                 :story:
    CLOSED: [2016-09-01 Thu 18:53]
    CLOCK: [2016-09-01 Thu 21:02]--[2016-09-01 Thu 21:13] =>  0:11
    CLOCK: [2016-09-01 Thu 18:54]--[2016-09-01 Thu 19:01] =>  0:07
    CLOCK: [2016-09-01 Thu 18:45]--[2016-09-01 Thu 18:53] =>  0:08
    CLOCK: [2016-09-01 Thu 18:21]--[2016-09-01 Thu 18:44] =>  0:23

We are reaching the limits of what we can do with org-mode for the
README file. We should just bite the bullet and move to markdown.

*** COMPLETED Use =element= base class in  =update_element=           :story:
    CLOSED: [2016-09-02 Fri 08:34]
    CLOCK: [2016-09-02 Fri 08:05]--[2016-09-02 Fri 08:34] =>  0:29

In =yarn.dia=:

- update element should make use of the element base class.
- merge to value object with to service.

*** COMPLETED Move file instantiation code into yarn                  :story:
    CLOSED: [2016-09-02 Fri 12:35]
    CLOCK: [2016-09-02 Fri 12:12]--[2016-09-02 Fri 12:35] =>  0:23
    CLOCK: [2016-09-02 Fri 12:01]--[2016-09-02 Fri 12:11] =>  0:10
    CLOCK: [2016-09-02 Fri 11:01]--[2016-09-02 Fri 12:00] =>  0:59
    CLOCK: [2016-09-02 Fri 09:32]--[2016-09-02 Fri 09:47] =>  0:15
    CLOCK: [2016-09-02 Fri 08:35]--[2016-09-02 Fri 09:10] =>  0:35

At present =knit::workflow= handles the generation of the input
descriptors. We should create a class in =yarn= that takes a set of
directories and file paths and does the instantiation. We should then
make use of this class in the yarn workflow. All the code is under
=obtain_input_descriptors_activity=. It must be trivial to figure out
where we are in the pipeline by looking at the log file.

*** COMPLETED Yarn naming tidy-up                                     :story:
    CLOSED: [2016-09-02 Fri 17:11]
    CLOCK: [2016-09-02 Fri 16:57]--[2016-09-02 Fri 17:11] =>  0:14
    CLOCK: [2016-09-02 Fri 16:30]--[2016-09-02 Fri 16:56] =>  0:26
    CLOCK: [2016-09-02 Fri 15:22]--[2016-09-02 Fri 16:00] =>  1:25
    CLOCK: [2016-09-02 Fri 14:52]--[2016-09-02 Fri 15:21] =>  0:29
    CLOCK: [2016-09-02 Fri 14:16]--[2016-09-02 Fri 14:51] =>  0:35
    CLOCK: [2016-09-02 Fri 13:53]--[2016-09-02 Fri 14:15] =>  0:22
    CLOCK: [2016-09-02 Fri 13:42]--[2016-09-02 Fri 13:52] =>  0:10
    CLOCK: [2016-09-02 Fri 13:28]--[2016-09-02 Fri 13:42] =>  0:14
    CLOCK: [2016-09-02 Fri 12:36]--[2016-09-02 Fri 12:55] =>  0:19
    CLOCK: [2016-09-01 Thu 22:21]--[2016-09-01 Thu 23:13] =>  0:52

Originally we created a clear distinction between expanders and
indexers. In truth these are not particularly good names since
indexers actually "expand" the objects they touch, adding missing
data. We could call them all expanders, but then this just highlights
the fact that something is not quite right with naming.

In practice, we have:

- a set of classes that act on the model before it is merged (and the
  workflow that binds them);
- the merging;
- a set of classes that act on the model after it is merged (and the
  workflow that binds them);
- the top-level workflow that joins these.

We should:

- rename all of these types to "processor". Not a great name, but at
  least it lies less than indexer and expander. Actually between
  processor and expander there is probably little gain. Rename all to
  expander.
- rename the workflows to =pre_merge_workflow= and
  =post_merge_workflow=.
- rename input descriptor to just descriptor.
- rename =frontend_workflow= to =descriptor_processor= and add it to
  the pre-merge workflow.
- implement the main workflow in terms of these sub-workflows.
- move frontend registrar to workflow.

*** COMPLETED Generalisation tidy-up                                  :story:
    CLOSED: [2016-09-03 Sat 23:43]
    CLOCK: [2016-09-03 Sat 23:31]--[2016-09-03 Sat 23:41] =>  0:10
    CLOCK: [2016-09-03 Sat 23:24]--[2016-09-03 Sat 23:30] =>  0:06
    CLOCK: [2016-09-03 Sat 23:20]--[2016-09-03 Sat 23:23] =>  0:03
    CLOCK: [2016-09-03 Sat 23:12]--[2016-09-03 Sat 23:19] =>  0:07
    CLOCK: [2016-09-03 Sat 22:56]--[2016-09-03 Sat 23:11] =>  0:15
    CLOCK: [2016-09-03 Sat 22:53]--[2016-09-03 Sat 22:55] =>  0:02
    CLOCK: [2016-09-03 Sat 22:45]--[2016-09-03 Sat 22:52] =>  0:07
    CLOCK: [2016-09-03 Sat 21:05]--[2016-09-03 Sat 22:44] =>  1:39
    CLOCK: [2016-09-02 Fri 23:52]--[2016-09-03 Sat 00:03] =>  0:11
    CLOCK: [2016-09-02 Fri 22:20]--[2016-09-02 Fri 23:51] =>  1:31
    CLOCK: [2016-09-02 Fri 22:02]--[2016-09-02 Fri 22:19] =>  0:17
    CLOCK: [2016-09-02 Fri 17:47]--[2016-09-02 Fri 17:52] =>  0:05
    CLOCK: [2016-09-02 Fri 17:12]--[2016-09-02 Fri 17:46] =>  0:34

Since we are touching some of the older generalisation code, we should
take this opportunity to do a few clean-ups:

- add a is leaf property.
- compute is parent and is child in yarn.
- move validation code from =yarn.dia= into yarn. We don't have a
  validator yet, so maybe it can go into the indexers.

Rework generalisation code:

- first pass: store parents.
- second pass:
  - set is child if has parent.
  - if in parent map set is parent.
  - if is child and not is parent, set is leaf.
  - if is leaf, recurse to find original parent - do not recurse if
    original parent already set. if is leaf, add leaves to container
    against original parent.
  - set in_inheritance_relationship.
- third pass: populate leaves

Notes:

- attempted to convert leaves to set - bad idea. We want lists to
  stabilise order. However, at present we are sorting the lists. This
  needs to be looked at.

*** STARTED Create an indexer for resolution data                     :story:
    CLOCK: [2016-09-04 Sun 09:00]--[2016-09-04 Sun 09:07] =>  0:07
    CLOCK: [2016-09-04 Sun 08:42]--[2016-09-04 Sun 08:59] =>  0:17
    CLOCK: [2016-09-04 Sun 08:26]--[2016-09-04 Sun 08:41] =>  0:15

Now we need to use resolver in multiple places, it makes sense to
cache the resolver indices in the intermediate model. This could be
done by an indexer. We could make this the first step post-merge. We
should probably only cache indices that are reused across expanders.

*** STARTED Consider adding support for inheritance via meta-data     :story:
    CLOCK: [2016-09-03 Sat 23:54]--[2016-09-03 Sat 23:59] =>  0:05
    CLOCK: [2016-09-03 Sat 23:42]--[2016-09-03 Sat 23:53] =>  0:11
    CLOCK: [2016-09-01 Thu 21:14]--[2016-09-01 Thu 22:20] =>  1:06

In certain cases it may not be possible to add all inheritance
relationships in a diagram; this is the case with =formatters= in
=cpp=. There are just too many classes implementing the
=formatter_interface= and the diagram would become too messy if we
added generalisation relationships for them all. This would also be
the case with inheritance for exceptions in a lot of cases.

We got away with it so far because we are not generating formatter
interfaces, but one can imagine having the same problem with
generatable types. It would be nice if one could add a meta-data
parameter to the class to convey inheritance information, like so:

: #DOGEN yarn.parent=x.y.z

The notation for the parent as well as the name of the tag needs to be
thought through.

This means we can also inherit across models. See Allow cross model
inheritance.

Tasks:

- add new fields;
- add machinery to read in field in yarn's generalisation indexer;
  actually this is a bit of a hack. It makes more sense to do this
  during settings expansion.
- add test in trivial inheritance.
- use fields in quilt.cpp's formatters.

**** Bad Ideas

One very interesting way of doing this is via stereotypes. We could
extend the meta-model with a stereotype called =TypeReference=. We
would need support for qualified names as well, so for instance in
model =a= one could declare a class called =b::c= with =TypeReference=
and that would tell Dogen that this is not a new declaration of =c=
but a reference to an existing declaration in model =a=. This would
also make it clear from a UML perspective that inheritance is being
used. The class =b::c= in model =a= would be empty.

This is not a very good idea as it will just cause confusion and it
will require machinery to place the type in the right point in element
space.

*** Allow cross model inheritance                                     :story:

#+begin_quote
*Story*: As a dogen user, I want to inherit types from existing models
so that I can extend them.
#+end_quote

At present we can only inherit within the same model. This is a
limitation of how to express inheritance in a Dia diagram - either the
parent is part of that diagram or it is not, and if it's not we have
no way of connecting the generalisation relationship to it.

Having said that, it would actually be quite simple to allow cross
model inheritance by using dynamic extensions:

- create a field that forces a type to behave like a parent,
  regardless of whether there are any children or not; the key
  problems seems to be that childless types are final.
- create a field that contains a qualified name of a parent,
  regardless of whether it's in this model or not;
- change the transformer to convert these fields into yarn inheritance
  relationships.

There may be some fallout in places where we assume that the
descendants are all in this model such as serialisation, visitors.

Now that we have =is_final= in yarn, we should check when adding cross
model inheritance that the type we have inherited from is not
final. This may just be part of the validator's work.

We should also generate "augmented" visitors automatically with the
new types.

The biggest problem with this is name resolution. Up to now this
hadn't been a problem because we could rely on the parent name being
resolvable. However, once we add cross-model inheritance, the parent
name is no longer resolvable directly (unless we stipulate that the
external module path must be the same for all models).

*** Add support for bintray                                           :story:

There is a new web application that interfaces with GitHub:
[[https://bintray.com/][bintray]].

- add JSON validation to bintray deployment descriptor.

Notes:

- an account was created [[https://bintray.com/mcraveiro][linked to GitHub]].
- it supports the uploads of [[https://bintray.com/mcraveiro/deb][debs]].
- [[https://bintray.com/docs/usermanual/uploads/uploads_howdoiuploadmystufftobintray.html][How Do I Upload My Stuff to Bintray?]]
- [[https://github.com/tim-janik/beast][Beast]] project [[https://raw.githubusercontent.com/tim-janik/beast/master/README.md][README]] with emblems
- Beast [[https://github.com/tim-janik/beast/blob/master/.travis.yml][travis.yml]]
- [[https://github.com/tim-janik/rapicorn/blob/master/citool.sh.][citool.sh]] script from [[https://github.com/tim-janik/rapicorn][Rapicorn]] project and their [[https://raw.githubusercontent.com/tim-janik/rapicorn/master/README.md][README]].

*** Add support for visitor inheritance                               :story:

We need to detect when we inherit from a visitable type across models
and generate a "local visitor" for that model.

- add parent of optional name to visitor.
- when we are injecting the visitor, we need to bucket leaves by model
  first. Then we need to generate one visitor per bucket.
- if we inherit from a
- we need to populate visitable by in this bucketed way as well.
- all leaves that belong to external models must be placed in the same
  location on that model. Throw if not.
- update include generation to take visitor parent into account.
- update visitor template to detect external visitation and inherit
  accordingly.

*** Include forward declaration in visitable types                    :story:

There doesn't seem to be any good reason to include the full visitor
header in visitable types - we should be able to get away with
including only the forward declaration for the visitor.

This is actually fairly important because every time we change the
visitor template, we end up rebuilding 350-odd files for no
reason. This wouldn't happen if we were using forward declarations.

*** Remove =optional<list>=                                           :story:

We should not really be using optional<list>. The empty list is
sufficient for this.

*** Consider renaming formatters                                      :story:

After reading the [[http://martinfowler.com/eaaDev/PresentationModel.html][Presentation Model]] pattern a bit more carefully, it
seems it provides a good approach for formatters. If one thinks of the
file as the view, then the formatters are the presenters and the model
representing all presentation logic (e.g. =cpp=) is the presentation
model. We could:

- create a top-level folder called =presentation=;
- rename =formatters= to =core= and move it to =presentation=;
- move =cpp= to =presentation=;
- in =cpp=:
  - rename =formattables= to =presentables=;
  - rename =formatters= to =presenters=;
- in this light, =backend= is really the "meta-workflow" for all
  possible presentations. It should really live under presentation. It
  would make more sense to merge it with =core=, if it were not that
  core contains all sorts of loose bits that are useful only in the
  guts of presentation. We could call it =orchestration= or some such
  name. Or we could leave it as =presentation::backends=.
- move =file= to =backends=. We don't really want external clients to
  have to know about =core= just to obtain a single type. Also,
  backends shouldn't really have any dependencies.
- grep for formatting, formattables, formatter, format, etc. and
  ensure all usages have been replaced with present*.

We should wait until the "great refactoring" is done so that we do not
have to rename the legacy models too.

*Merged with duplicate*

These are not really formatters; not sure what the right name should
be though; templates?

*** Consider renaming includers                                       :story:

Its very confusing to have header files that include lots of other
header files called "includers". There is too much overloading. We
should consider calling them "master header files" as per Schaling
terminology in the [[http://theboostcpplibraries.com/boost.spirit][boost book]].

*** Analysis work on handling varying levels of formatter optionality :story:

In some cases the formatter may decide that it does not need to create
a file. The only use case we have is the =namespace_info= where if
there is no documentation one does not want to create a formatter. At
present we filter out empty namespaces in the formatters' workflow,
but this is not very clean because it now means the workflow needs to
know about the formatter's logic.

This would also make things cleaner for the services hack where we do
not want to generate services for now. Actually not quite; for
services we still need to generate skeletons. There are three cases:
a) nothing should be generated, in which case we should filter these
elements before hand b) something should be generated, but we may not
actually overwrite the existing file and c) generate and write,
regardless.

Note that we do not need to change the stitch templates for this; the
decision is done before we call the template.

Tasks:

- change formatter interfaces to return =boost::optional<file>=
- change all formatters.

*** Consider removing the overwrite flag in =formatters::file=        :story:

Investigate if the overwrite flag makes sense in file; it seems we
only use it in two scenarios: force overwrite requested by user or
file contents have changed, both of which can be done in the
file_writer.

Actually this flag is needed. It is required to handle the case where
we do not code-generate files, unless they do not exist. For example,
for service headers and implementation we should create the files, but
then subsequently not touch them. The overwrite flag should be set to
false. We need to figure out how to implement this and remove the
hacks around file writing.

For now we have abused this flag to allow legacy files overrides of
the new world formatters. This is just until we move totally to new
world though.

*** Consider automatic injection of helpers                           :story:

At present we are manually calling:

: a.add_helper_methods();

On each of the class implementation formatters in order to inject
helpers. This is fine for existing cases, but its a bit less obvious
when adding the first helper to an existing template: one does not
quite know why the helper is not coming through without
investigating. One possible solution is to make the helper generation
more "mandatory". Its not entirely obvious how this would work.

*** Element properties includes non-target types                      :story:

We seem to be generating a lot of element properties and formatter
properties as well. We should only be generating these for the target
model.

*** Consider renaming settings to annotations                         :story:

Whilst its pretty clear now that settings are a strongly-typed
representation of the meta-data and properties are the post-processed
version, the names "settings" and "properties" still sound far too
similar. It would be nicer to have something more meta-data-like for
settings such as annotations. Read up the past discussions on
naming. One possible reason not to use annotations was because we used
it already in the formatters model. Perhaps that could be renamed to
something else, freeing up the name?

*** Consider creating a single top-level settings class               :story:

Since settings are nothing but meta-data, we should be able to read
them all in one go. Further: we should be able to compute up front the
inputs (root object, all other objects; sliced from the model) and the
size of the outputs (vector of settings). It would be a totally
parallelisable task. This also means we only need a single repository
by id for all settings.

This repository is then the input for the property workflow. Because
properties follow a dependency graph, we would still need to compute
them in some kind of order.

Actually, this is not entirely true: for all elements in the target
model we will have a single top-level class with all settings (or
almost all, since some settings only make sense to the root object
such as directory settings). However, for the reference models we will
have less settings. We should probably do some taxonomy work here and
try to figure out what categories of settings we have.

*** Run tests that are passing on windows                             :story:

At present we have a release build on windows but we are not running
any tests. This is because some of the tests are failing at the
moment. We should run all test suites that are green to ensure we
don't regress without noticing.

*** Add "namespaces" to name                                          :story:

Name should have a flat class with all namespaces in yarn, instead of
generating it on every formatter.

*** =always_in_heap= is not a very good name                          :story:

What the name is trying to say is: I have a type parameter and that
type parameter is always allocated in the heap. But it does not quite
convey that at all - it seems like the type itself is always in heap
the way we use it in resolver.

*** Model should contain set of primitive id's                        :story:

We are computing the set of all primitive id's in quilt but this
should really be part of yarn.

*** Check generation type before dispatching element                  :story:

At present we are doing this check in =visit=:

:     if (o.generation_type() == yarn::generation_types::no_generation)
:        return;

If we did it before the =visit= call we'd save the cost of
dispatching.

*** Add test with smart pointer in base class                         :story:

At present we have the following helper formatters registered against
SmartPointer:

:      {
:        "quilt.cpp.types.class_implementation_formatter": [
:          "<quilt.cpp.types><smart_pointer_helper>",
:          "<quilt.cpp.io><smart_pointer_helper>"
:        ]
:      }

This should have caused something to break. It didn't because we don't
seem to have a test case with a smart pointer on the base class. This
raises the interesting point: do we ever need more than one helper for
a given family and a given file formatter? If so, we should change it
from a list to a single shared pointer.

Interestingly, for AssociativeContainer we have:

:    "AssociativeContainer": [
:      {
:        "quilt.cpp.types.class_implementation_formatter": [
:          "<quilt.cpp.io><associative_container_helper>"
:        ]
:      },
:      {
:        "quilt.cpp.io.class_implementation_formatter": [
:          "<quilt.cpp.io><associative_container_helper>"
:        ]
:      },

*** Clean-up helper terminology                                       :story:

The name "helper" was never really thought out. It makes little
sense - anything can be a helper. In addition, we have helpers that do
not behave in the same manner (inserter vs every other helper). We
need to come up with a good vocabulary around this.

- static aspects: those that are baked in to the file formatter.
- dynamic aspects: those that are inserted in to the file formatter at
  run time.
- type-dependent dynamic aspects: those that are connected to the
  types used in the file formatter.

*** Dump container of files in formatter workflow                     :story:

At present we are polluting the log file with lots of entries for each
file name in formatter's workflow. Ideally we want a single entry with
a container of file names. The problem is, if we dump the entire
container we will also get the file contents. But if we create a
temporary container we will have to pay the cost even though log level
may not be enabled.

*** Type-bound helpers and generic helpers                            :story:

Not all helpers are bound to a type. We have the case of inserter
helper in io which is used by main formatters directly. We need to
make this distinction in the manual.

*** Check which properties need to loop through the entire model      :story:

In certain cases such as helpers we probably don't need to go through
all types; only the target types matter. Ensure we are not processing
other types for no reason.

*** Add validation for helper families                                :story:

At present we are checking that the name tree has the expected number
of type arguments:

:    const auto children(t.children());
:    if (children.size() != 1) {
:        BOOST_LOG_SEV(lg, error) << invalid_smart_pointer;
:        BOOST_THROW_EXCEPTION(formatting_error(invalid_smart_pointer));
:    }
:    smart_pointer_helper_stitch(fa, t);

In the future with dynamic helpers we will remove these checks. In
order to implement them we need to declare the type families up front
in a JSON file, with a name and number of type arguments. When
constructing the type helpers, we can check the name tree to make sure
the number of type arguments is correct.

This can be done as a helper setting (number of type arguments?).

Actually this is a core yarn property. So:

- add number of type arguments to object;
- read this as a dynamic field;
- during validation, check that all name trees that instantiate this
  object have the expected number of type arguments.
- in order to cope with cases such as variant we also need some kind
  of enum, e.g. type parameterisation: none, variable, fixed. if
  fixed, then number of type parameters must be non-zero.

*** Implement formattables in terms of yarn types                     :epic:

At present formattables are just a shadow copy of yarn types plus
additional =cpp= specific types. In practice:

- for the types that are shadow copies, we could have helper utilities
  that do the translation on the fly (e.g. for names).
- for additional information which cannot be translated, we could have
  containers indexed by qualified name and query those just before we
  call the transformer. This is the case with formatter properties. We
  need something similar to house "type properties" such as
  =requires_stream_manipulators=. These could be moved into aspect
  settings.
- for types that do not exist in yarn, we could inherit from element;
  this is the case for registrar, forward declarations, cmakelists and
  odb options. Note that with this we are now saying that element
  space contains anything which can be modeled, regardless of if they
  are part of the programming language type system, or build system,
  etc. This is not ideal, but its not a problem just yet. We could
  update the factory to generate these types and then take a copy of
  the model and inject them in it.

*** Initialise formatters in the formatter's translation unit         :story:

At present we are initialising the formatters in each of the facet
initialisers. However, it makes more sense to initialise them on the
translation unit for each formatter. This will also make life easier
when we move to a mustache world where there may not be a formatter
header file at all.

** Deprecated
