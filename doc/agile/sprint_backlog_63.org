#+title: Sprint Backlog 63
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission

Start implementing types header formatter using stitch.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2015-04-07 Tue 17:45]

| Headline                                                              | Time    |       |       |
|-----------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                          | *15:56* |       |       |
|-----------------------------------------------------------------------+---------+-------+-------|
| Active                                                                |         | 15:56 |       |
| STARTED Sprint and product backlog grooming                           |         |       |  0:08 |
| COMPLETED Add support for forward declarations                        |         |       |  0:42 |
| COMPLETED Create a selector for path derivatives data structures      |         |       |  0:58 |
| STARTED Split merged model expansion from individual models expansion |         |       |  2:01 |
| STARTED Create a "populate includes operation"                        |         |       | 12:07 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-03-29 Sun 22:32]--[2015-03-29 Sun 22:40] =>  0:08

Updates to sprint and product backlog.

*** STARTED Updates to the manual and readme files                    :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Clean-up hierarchical support in dynamic                :story:
    CLOSED: [2015-03-30 Mon 07:29]

At present there are a number of limitations on how we have
implemented hierarchical support:

- fields from one model will get mixed up with other models;
- fields from one formatter in one facet will get mixed up with fields
  from other formatters in other facets with the same name.

We need to improve on the indexer. While we're at it, we should do a
few other assorted clean-ups:

- rename workflow (since we now have two);
- rename content extensions since this is a selector in disguise;

*** COMPLETED Add support for forward declarations                    :story:
    CLOSED: [2015-04-07 Tue 14:45]
    CLOCK: [2015-04-07 Tue 14:03]--[2015-04-07 Tue 14:45] =>  0:42

We need to have the basic skeleton for forward declarations in order
to be able to access the forward declaration include directives.

*** COMPLETED Create a selector for path derivatives data structures  :story:
    CLOSED: [2015-04-07 Tue 15:43]
    CLOCK: [2015-04-07 Tue 14:45]--[2015-04-07 Tue 15:43] =>  0:58

We need some kind of helper class to help us find data in the path
derivatives data structures.

*** STARTED Split merged model expansion from individual models expansion :spike:
    CLOCK: [2015-04-07 Tue 17:15]--[2015-04-07 Tue 17:45] =>  0:30
    CLOCK: [2015-04-07 Tue 15:43]--[2015-04-07 Tue 17:14] =>  1:31

It is not possible to perform the inclusion dependencies expansion
before we merge. This is because there are no relationships yet. We
cannot compute the relationships until we merge. However, the path
related expansions must be done before merging. Thus we must split the
expansion into a two-step process: before merging and after merging.

Tasks:

- split path derivatives workflow from inclusion dependencies workflow
- create a expansion types enum:  =stand_alone_model= and
  =merged_model=. Add this property to expander interface.
- Each expansion type has its own graph. Workflow is executed with an
  expansion type.
- Create a inclusion dependencies workflow that computes all of the
  inclusion dependencies against qname and formatter name. We no
  longer need expansion inputs.
- Create a inclusion dependencies expander that uses the result of its
  workflow to setup the inclusion dependencies.

*** STARTED Create a "supported" expander                             :story:

This needs a bit more analysis. The gist of it is that not all types
support all formatters. We need a way to determine if a formatter is
not supported. This probably should be inferred by a "is dogen model"
property (see backlog); e.g. non-dogen models need their types to have
an inclusion setup in order to be "supported", otherwise they should
default to "not-supported". However the "supported" flag is populated,
we then need to take into account relationships and propagate this
flag across the model such that, if a type =A= in a dogen model has a
property of a type =B= from a non-dogen model which does not support a
given formatter =f=, then =A= must also not support =f=.

In order to implement this feature we need to:

- update the SML grapher to take into account relationships
  (properties that the class has) as well as inheritance.
- we must only visit related types if we ourselves do not have values
  for all supported fields.
- we also need a visitor that detects cycles; when a cycle is found we
  simply assume that the status of the revisited class is true (or
  whatever the default value of "supported" is) and we write a warning
  to the log file. We should output the complete path of the cycle.
- users can override this by setting supported for all formatters
  where there are cycles.
- we could perhaps have a bitmask by qname; we could start by
  generating all bitmasks for all qnames and setting them to default
  value. We could then find all qnames that have supported set to
  false and update the corresponding bitmasks. Then we could use the
  graph to loop through the qnames and "and" the bitmasks of each
  qname with the bitmasks of their related qnames. The position of
  each field is allocated by the algorithm (e.g. the first "supported"
  field is at position 0 and so on). Actually the first position of
  the bitmask could be used to indicate if the bitmask has already
  been processed or not. In the presence of a cycle force it to true.
- we need a class that takes the SML model and computes the supported
  bitmasks for each qname; the supported expander then simply takes
  this (perhaps as part of the expansion context), looks up for the
  current qname and uses the field list to set the flags
  appropriately.
- we should remove all traces of supported from a settings
  perspective; supported and multi-level enabled are just artefacts of
  the meta-data. From a settings perspective, there is just a
  formatter level (common formatter settings) enabled which determines
  whether the formatter is on or off. How that flag came to be
  computed is not relevant outside the expansion process. This also
  means we can have simpler or more complex policies as time allows us
  improve on this story; provided we can at least set all flags to
  enabled we can move forward.

*** STARTED Create a "populate includes operation"                    :story:
    CLOCK: [2015-04-07 Tue 13:24]--[2015-04-07 Tue 14:03] =>  0:39
    CLOCK: [2015-04-06 Mon 19:09]--[2015-04-06 Mon 20:23] =>  1:14
    CLOCK: [2015-04-04 Sat 16:30]--[2015-04-04 Sat 17:17] =>  0:47
    CLOCK: [2015-04-03 Fri 16:17]--[2015-04-03 Fri 17:05] =>  0:48
    CLOCK: [2015-04-02 Thu 16:04]--[2015-04-02 Thu 18:02] =>  1:58
    CLOCK: [2015-04-02 Thu 15:03]--[2015-04-02 Thu 16:03] =>  1:00
    CLOCK: [2015-04-01 Wed 16:44]--[2015-04-01 Wed 18:12] =>  1:28
    CLOCK: [2015-03-30 Mon 17:05]--[2015-03-30 Mon 18:03] =>  0:58
    CLOCK: [2015-03-30 Mon 16:25]--[2015-03-30 Mon 17:04] =>  0:39
    CLOCK: [2015-03-30 Mon 14:58]--[2015-03-30 Mon 15:06] =>  0:08
    CLOCK: [2015-03-30 Mon 13:13]--[2015-03-30 Mon 14:01] =>  0:48
    CLOCK: [2015-03-30 Mon 12:56]--[2015-03-30 Mon 13:13] =>  0:17
    CLOCK: [2015-03-30 Mon 11:32]--[2015-03-30 Mon 12:55] =>  1:23

This operation needs to be implemented by every formatter. It queries
the model to look for all the types it depends on and obtains the
corresponding include paths from them. It places them in a formatter
specific list of includes. It depends on the inclusion path operation.

Notes:

- we need to remember the model after setup.
- we could use a base inclusion expander that sets up the formatter
  properties and remembers the model, etc. Derived expanders just
  need to provide an expansion method. We could even have a utility
  method to set the field back into the dynamic object.
- massive impedance mismatch between the boilerplate formatters and
  the inclusion dependency meta-data. We should probably just use a
  =std::list<std::string> to represent includes at the formatter
  level, but we need to check. Actually no one is yet using this code
  so we can change it at will.
- we need to simplify the story around include paths. There are two
  use cases: the include path ready to be stamped as an include
  statement and the header guards. The include path for the include
  statement could come with delimiters (<>, "", etc). The header
  guards however cannot. So due to this we have split the two things
  so we can recombine them later. However, this just generates a whole
  load of unnecessary complexity. To make matters worse, there is only
  a need to compute header guards for dogen types since the user is
  not expected to overload them (one can, possibly, configure its
  generation but not supply an override). Perhaps the cleaner solution
  is to have a header guards field and a include directive field, both
  generated as part of the path expansion. Formatter settings extract
  both.

Tasks:

- remove delimiter field, create a header guards field.
- rename include path field to include directive; add delimiters to
  all usages of this field.
- populate header guards in path expander, copying code from the
  formatter (upper-casing etc.).
- update header guards in boilerplate to take in a string, and to do
  nothing to the supplied header guard string (other than outputting
  it).
- when generating include directive field for dogen types, add the
  appropriate delimiters.
- change include formatter to use a list of strings.

Notes:

- Actually we have gone the wrong way about inclusion. The expander is
  not at the individual formatter level, but instead is a global
  expander for all formatters. It receives some kind of "computation"
  function from each formatter that, given a map of (qname,
  formatter) to inclusion directive, produces a set of inclusion
  dependencies. This is done on setup. Then, for each object, all the
  expander does is to look up the qname to retrieve the inclusion
  dependencies. The function can be available in the formatter
  interface to make our life easier; =compute_inclusion_dependencies=?
  On further thought we probably need to specialise this function for
  each entity type as we need to receive the entity to compute as well
  as the map above. Internally (in the CPP) we can create a class to
  handle the work. We also need access to the dynamic object to figure
  out what formatters are enabled etc. This is done internally using a
  selector.
- Consider renaming setup to =prepare=? Not sure if it makes a lot of
  difference.

*** STARTED Compute managed directories from knitting options         :story:

At present the backend is returning empty managed directories. This
means housekeeping will fail in the new world. We need to change the
interface of this method to take in the knitting options and return
the managed directories.

This is not entirely trivial. At present the managed directories are
computed in the locator. It takes into account split project, etc to
come up with all the directories used by the backend. We need to make
these decisions during path expansion, expect we only need manged
directories for the root object. However we do not know which object
is the root object at present, during the expansion. We could identify
it via the QName and the SML model in context thought. We could then
populate the managed directories as a text collection. We then need
some settings and a factory to pull out the managed directories from
the root object. This could be done in =managed_directories=, by
having an SML model as input.

*** Adding a dependency to a non-existent expander crashes dogen      :story:

We are not checking that all dependencies exist when building the
graph. If we add a dependency to a expander that does not exist we
crash and burn:

: /home/marco/Development/DomainDrivenConsulting/dogen/projects/knit/spec/workflow_spec.cpp(550): last checkpoint
: dogen_knit_spec: /usr/include/boost/smart_ptr/shared_ptr.hpp:653: typename boost::detail::sp_member_access<T>::type boost::shared_ptr<dogen::dynamic::expansion::expander_interface>::operator->() const [Y = dogen::dynamic::expansion::expander_interface]: Assertion `px != 0' failed.
: unknown location(0): fatal error in "all_primitives_model_generates_expected_code": signal: SIGABRT (application abort requested)

*** Expand fields from command line options into dynamic              :story:

We need to ensure the following fields are populated, from the command
line options:

- integrated facets
- enabled

*** Add =static_formatter_name=                                       :story:

At present formatter names are defined as traits, we should use the
"static" approach. Facet names can stay as traits as they are common
across formatters.

*** Check for duplicate formatter names in formatter registrar        :story:

At present it is possible to register a formatter name more than
once. Registrar should keep track of the names and throw if the name
is duplicated.

*** Add validation for field definitions                              :story:

Perform some validation in repository workflow:

- that formatter fields are not duplicated on simple name.
- fields are not duplicated on qualified name.
- instances have qualified name populated.
- only instances are left after instantiation.

*** Implement new settings factories with caching                     :story:

- create a field definition selector;
- get factories to use the selector on construction and setup a cache
  for all required fields. These could be const copies of the fields.
- stop using has_field followed by get content - we now know that the
  field either existed originally or was defaulted correctly.

For type settings:

:    using namespace dynamic::schema;
:    using fd = field_definitions;
:    const field_selector fs(o);
:
:    if (fs.has_field(fd::enabled()))
:        s.enabled(fs.get_boolean_content(fd::enabled()));

Actually, do we really need to cache? We just need the qualified name
of the field which is how the object stores its fields.

*** Create an operation to populate c++ properties                    :story:

There are a number of properties such as "requires default
constructor" and so on that are specific to the c++ model. Some
require looking at related types (do they have the property enabled?)
some others require looking at the SML model graph. It seems they
should all live under one single operation (or perhaps a few), but we
do not have any good names for them.

*** Perform expansion of properties and operations                    :story:

At present we are ignoring properties (and operations). This is ok as
we don't really have a use case for expansion there. However, it would
be nice if we could just expand them anyway. We just need to make sure
we don't do things like copying from root object.

*** Create settings expander and switcher                             :story:

*New Understanding*

The expansion process now takes on this work. We need to refactor this
story into an expander.

*Previous Understanding*

We need a class responsible for copying over all settings that exist
both locally and globally. The idea is that, for those settings, the
selector should be able to just query by formatter name locally and
get the right values. This could be the expander.

We also need a more intelligent class that determines what formatters
are enabled and disabled. This is due to:

- lack of support for a given formatter/facet by a type in the graph;
  it must be propagated to all dependent types. We must be careful
  with recursion (for example in the composite pattern).
- a facet has been switched off. This must be propagated to all
  formatters in that facet.
- user has switched off a formatter. As with lack of support, this
  must be propagated through the graph.

This could be done by the switcher. We should first expand the
settings then switch them.

In some ways we can think of the switcher as a dependency
manager. This may inform the naming of this class.

One thing to take into account is the different kinds of behaviours
regarding enabling facets and formatters:

- for serialisation we want it to be on and if its on, all types
  should be serialisable.
- for hashing we want it to be off (most likely) and if the user makes
  use of a hashing container we want the type that is the key of the
  container to have hashing on; no other types should have it on. We
  also may want the user to manually switch hashing on for a type.
- for forward declarations: if another formatter requires it for a
  type, we want it on; if no one requires it we want it off. The user
  may want to manually switch it on for a type.

*** Consider creating a include list sorter                           :story:

There are a few cases where we want the include files to be ordered in
certain ways (in one case the code breaks otherwise; FIXME search
backlog for it). In general we probably want to ensure the includes
are ordered in a specific way like we do with regular source code,
such as c files first, then standard c++ files, then boost, etc. We
should have a function that given a list of includes performs this
ordering.

*** Incorrect application of formatter templates                      :story:

At present we are applying formatter templates across all formatters
in C++ mode; this only makes sense because we do not have CMake and
ODB formatters. However, when these are added we will need to filter
the formatters further. For example, C++ formatters (both headers and
implementation) need inclusion dependencies but CMake files don't.

*** Consider supporting multiple formatter groups                     :story:

In some cases it would be nice for a field to belong to multiple
groups. For example =integrated_facet= is only applicable to class
header formatters. We could implement this by making the formatter
group a collection and having formatters belong to multiple groups.

*** Improve error reporting around JSON                               :story:

At present when we break the JSON we get errors like so:

: Error: Failed to parse JSON file<unspecified file>(75): expected object name.

These are not very useful in diagnosing the problem. In the log file
we do a bit better:

: 2015-03-30 12:02:12.897202 [DEBUG] [dynamic.schema.json_hydrator] Parsing JSON file: /home/marco/Development/DomainDrivenConsulting/output/dogen/clang-3.5/stage/bin/../data/fields/cpp.json
: 2015-03-30 12:02:12.897216 [DEBUG] [dynamic.schema.json_hydrator] Parsing JSON stream.
: 2015-03-30 12:02:12.897450 [ERROR] [dynamic.schema.json_hydrator] Failed to parse JSON file: <unspecified file>(75): expected object name
: 2015-03-30 12:02:12.897515 [FATAL] [knitter] Error: /home/marco/Development/DomainDrivenConsulting/dogen/projects/dynamic/schema/src/types/json_hydrator.cpp(226): Throw in function std::list<field_definition> dogen::dynamic::schema::json_hydrator::hydrate(std::istream &) const
: Dynamic exception type: N5boost16exception_detail10clone_implIN5dogen7dynamic6schema15hydration_errorEEE
: std::exception::what: Failed to parse JSON file<unspecified file>(75): expected object name
: [P12tag_workflow] = Code generation failure.

But it requires a lot of context to know whats going on. We need to
append more details to the exception.

** Deprecated
