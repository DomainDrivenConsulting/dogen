#+title: Sprint Backlog 51
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED POSTPONED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Stories

This file contains all stories that were closed during sprint 51.

The *Mission Statement* for this sprint is to implement the core of
the meta-data processing, in both SML and the formatters. We also want
to improve the communication with the outside world.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-09-09 Tue 08:48]

| Headline                                            | Time   |      |      |
|-----------------------------------------------------+--------+------+------|
| *Total time*                                        | *2:59* |      |      |
|-----------------------------------------------------+--------+------+------|
| Development Stories Implemented                     |        | 2:59 |      |
| IMPLEMENTATION Sprint and product backlog grooming  |        |      | 1:00 |
| IMPLEMENTATION Refactor meta-data processing in SML |        |      | 1:37 |
| IMPLEMENTATION Fix windows continuous build         |        |      | 0:22 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-09-09 Tue 07:51]--[2014-09-09 Tue 08:05] =>  0:14
    CLOCK: [2014-09-08 Mon 17:52]--[2014-09-08 Mon 18:04] =>  0:12
    CLOCK: [2014-09-08 Mon 08:01]--[2014-09-08 Mon 08:35] =>  0:34

Updates to sprint and product backlog.

*** Updates to the manual and readme files                             :task:

Use downtime to update the manual and / or readme file.

*** COMPLETED Manual: fix Fundamental Building Blocks section         :story:
    CLOSED: [2014-09-08 Mon 08:14]

We allowed this section to evolve as a collage of different ideas, but
now it is no longer making sense as a whole. We need to go back to the
drawing board and create a structure for it.

*** IMPLEMENTATION Refactor meta-data processing in SML               :story:

We need to create a simple interface that takes a ptree and a model
and updates the tags on the ptree. We also need a way to register
against the meta-data tagger.

**** COMPLETED Rename tagger to processor                              :task:
     CLOSED: [2014-09-08 Mon 23:20]
     CLOCK: [2014-09-08 Mon 22:56]--[2014-09-08 Mon 23:20] =>  0:24
     CLOCK: [2014-09-08 Mon 18:04]--[2014-09-08 Mon 18:37] =>  0:33

As per analysis story, we need to rename =meta_data_tagger= to
=meta_data_processor=. May be a good time to remove all the existing
tagging code. We need to re-add it later on in the right places.

Actions:

- created scratch pad for saving this kind of code snippets;
- copied across the tagger code;
- renamed the type in the model and regenerated;
- fixed code in workflow.

**** COMPLETED Design and implement the interface                      :task:
     CLOSED: [2014-09-08 Mon 23:21]

- add interface to model;
- add some tests to make sure the interface is usable.

*interface*

: name: meta_data_populator_interface
: identity: string
: dependencies: list of string
: populate(const model, const parent module, concept)
: populate(const model, const parent module, module)
: populate(const model, const parent module, type)

**** IMPLEMENTATION Create a sub-system for meta-data                  :task:
     CLOCK: [2014-09-09 Tue 08:06]--[2014-09-09 Tue 08:46] =>  0:40

As the names of the meta-data classes became more and more unwieldy,
it became obvious that they need their own namespace. Move all of them
there and get rid of the =meta_data= prefixes.

**** Add static registration to processor                              :task:
     CLOSED: [2014-09-09 Tue 08:46]

- create a static method to register instances of the interface and a
  static container to hold them;
- add a simple list of shared pointers to keep track of the registered
  expanders.

**** Move flat name builder to CPP model                               :task:

It seems this class is used only for tagging so we should have one in
each model. It may even make more sense in the c++ formatters model.

**** Remove dependency of writer on tags                               :task:

We seem to be using the tags to detect containers. We need to get rid
of this dependency.

**** Delete tags class in SML                                          :task:

This class does not make sense any more as each model will be
responsible for their own tags.

**** All model items traversal should resolve types                    :task:

This traversal was designed for tagger but yet it does not resolve
=type= into one of the sub-classes, forcing tagger to implement
visitation to resolve the types. We should improve the traversal.

*** IMPLEMENTATION Fix windows continuous build                       :story:
    CLOCK: [2014-09-08 Mon 21:45]--[2014-09-08 Mon 22:07] =>  0:22

Ever since we refactored the test models into their own folder, the
windows build stopped working. This is because we are too deep in the
directory tree, resulting in paths longer that the maximum supported
path. We need to move the build to a top-level folder somewhere.

Of course we still have the linking issue but that will be addressed
later.

Actions:

- hacked scripts to point to root build directory to see if this fixes
  the issue.

*** Implement a grapher in processor                                  :story:

- create a grapher in processor that represents the dependencies
  between instances of the interface
- once the populator has been instantiated we need to loop through the
  list of expanders and build a graph.
- on execute, iterate through the graph executing all instances of the
  interface.
- we should see if we can reuse some code of the dia grapher as we
  need to build 3 graphers altogether.

*** Implement the populator interface in the CPP model                :story:

The CPP model needs to register a top-level populator that expands all
of the C++ specific tags. This has to be done before the formatter
populators kick in. We need to remove all of the =cpp= related code
from populator and add it to =cpp= model. For now we should get
details from settings.

We should declare all of the traits at the model level, at least those
that are common to all formatters. Perhaps a traits class or some
such. SML should also declare the proper global traits such as
=enabled= and so on.

We should consider if we should declare the formatters this way too,
since they may depend on each other. This would be in the formatters
model.

*** Create an SML grapher                                             :story:

We need a class responsible for building a graph of SML qnames, and
associating these with a ptree.

In order to do this we need to make sure we have a module for the
model.

*** Implement the populator interface in formatters                   :story:

We should start implementing the interface on a few formatters to
prove that the approach actually works.

*** C++ formatters use of =headers_for_facet_=                        :story:

We seem to be creating a local variable =headers_for_facet_= in
function =format_file_infos_activity= but not really making use of
it. We need to investigate what was that we were trying to do here,
the name of the variable seems to imply it should have been a member
variable. Probably a remnant from some old refactoring.

*** Remove unnecessary properties from model                          :story:

The model should be just dumb container of types. We have a few legacy
properties left behind from the days where the model was also used in
the transformation process. Remove all the concepts from the model
(=Element= etc) and deal with the fall out. This is required in order
to simplify the graph in populator.

*** Manually generate packages for previous sprint                    :story:

We should manually generate packages for sprint 50 and upload them to
Google drive. To do this we should log in to each build agent, git
clone the repo from scratch, =git checkout= the tag and then do a full
build. We should also upload the docs too. Ideally we should do this
for all platforms.

*** Create a demo of installing dogen and generating hello world      :story:

We need to start creating a series of quick videos demoing dogen. The
script for the first video of the series is as follows:

- download packages from Google Drive and install them.
- obtain the hello world model from git.
- generate the hello world model.
- create a hello world main with make files and compile it.
- give a quick overview of the available facilities.

*** Version number relies on latest commit in master                  :story:

When trying to build off of a tag, we noticed that the version number
is always of the latest commit in master. This means that trying to
generate packages for tag =v0.50.2410= results in packages with a
version after that like say =v0.50.2415=. We should look at the
current commit in master rather than the latest one.

** Deprecated Development Stories

Stories that do not make sense any longer.

*** CANCELLED Move includes and header guard into entity              :story:
    CLOSED: [2014-09-08 Mon 08:10]

*Rationale*: This will be supplied by the meta-data.

With this a formatter can now rely only on entities rather than
requiring a file.
