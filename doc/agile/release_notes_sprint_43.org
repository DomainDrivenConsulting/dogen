#+title: Release Notes for Sprint 43
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 43.

The *Mission Statement* for this sprint is to integrate =om= with
=cpp_formatters=. After much debating it was decided that the current
structure is the best way forward. =om= was a proof-of-concept (POC)
that proved a few important points:

- it is possible to drive a formatter off of the meta-data. However,
  we also concluded that the meta-data is very weakly typed and very
  verbose. So we will use the meta-data to transport language specific
  parameters all the way to the language specific models and then
  transform them into the type system.
- includes are better handled with the following split: a) all the
  "object" specific includes are in the meta-data and can be derived
  by querying the appropriate tags b) all the formatter specific
  includes should be added by the formatter itself so that the
  implementation that requires them is very close by.
- we should have a language-agnostic model for formatters that
  provides the basic formatting primitives.
- expansion of the meta-data is much better performed after it has
  been converted to the type system. The code in tagger will be moved
  to the =sml_to_cpp= model over time.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-01-13 Mon 07:24]

| Headline                                          | Time   |      |      |
|---------------------------------------------------+--------+------+------|
| *Total time*                                      | *0:34* |      |      |
|---------------------------------------------------+--------+------+------|
| Development Stories Implemented                   |        | 0:34 |      |
| IMPLEMENTATION Release notes and backlog grooming |        |      | 0:34 |
#+end:

*** IMPLEMENTATION Release notes and backlog grooming                  :task:
    CLOCK: [2014-01-13 Mon 07:54]--[2014-01-13 Mon 08:02] =>  0:08
    CLOCK: [2014-01-13 Mon 07:09]--[2014-01-13 Mon 07:23] =>  0:14
    CLOCK: [2014-01-12 Sun 18:23]--[2014-01-12 Sun 18:43] =>  0:20

Updates to release notes and backlog.

*** Create a blog post on dogen's development methodology             :story:

We should do a write up of how we develop dogen.

*** IMPLEMENTATION Rename =om= to formatters and remove unnecessary classes :story:

This model will contain all the language neutral formatting code.

**** COMPLETED Create the new =formatters= model with only the required code :task:
     CLOSED: [2014-01-13 Mon 18:23]
     CLOCK: [2014-01-13 Mon 17:53]--[2014-01-13 Mon 18:22] =>  0:29
     CLOCK: [2014-01-13 Mon 08:02]--[2014-01-13 Mon 08:39] =>  0:37

Copy =om= into a new model and remove all of the C++ specific
code. Get it to compile and all tests to pass.

**** Delete the =om= model

Remove the model, the CMake infrastructure, etc.

*** Remove the =legacy_mode= flags                                    :story:

These were added to put =om= in compatibility mode. They will not be
required because we will introduce =om= features one at a
time. Rebaselining will be easy if required.

*** Move all C++ specific code from =formatters= into =cpp_formatters= :story:

Make =cpp_formatters= depend on =formatters= and move across C++ code:

- boilerplate formatter
- include formatter
- header guard formatter

*** Make use of the indenting stream in =cpp_formatters=              :story:

Replace indenter with the new indenting stream.

*** Make use of the boilerplate formatter in =cpp_formatters=         :story:

Update all file formatters to use the boilerplate formatter.

Consider creating a simple workflow in =formatters= that gets used by
the cpp_formatters workflow (or passed in). The job of this workflow
is to setup infrastructure common to all formatters such as loading
licences, modelines, etc.

*** Update =cpp= model with properties from tags                      :story:

Read properties from the meta-data and represent them inside of the
=cpp= model.

** Deprecated Development Stories
