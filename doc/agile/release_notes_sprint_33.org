#+title: Release Notes for Sprint 33
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 33.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2013-08-23 Fri 08:49]

| Headline                                          | Time   |      |      |
|---------------------------------------------------+--------+------+------|
| *Total time*                                      | *0:39* |      |      |
|---------------------------------------------------+--------+------+------|
| Development Stories Implemented                   |        | 0:39 |      |
| IMPLEMENTATION Release notes and backlog grooming |        |      | 0:13 |
| COMPLETED Remove prototype model                  |        |      | 0:04 |
| Create an intermediate C++ model                  |        |      | 0:22 |
#+end:

*** IMPLEMENTATION Release notes and backlog grooming                  :task:
    CLOCK: [2013-08-23 Fri 07:59]--[2013-08-23 Fri 08:00] =>  0:01
    CLOCK: [2013-08-23 Fri 07:47]--[2013-08-23 Fri 07:59] =>  0:08

*** COMPLETED Remove prototype model                                   :task:
    CLOSED: [2013-08-23 Fri 08:04]
    CLOCK: [2013-08-23 Fri 08:00]--[2013-08-23 Fri 08:04] =>  0:04

We don't really need it any more, concepts can be tried directly with
dogen.

*** Create an intermediate C++ model                                   :epic:

This story is the result of the analysis story done on the previous
iteration (see Make a more truthful C++ model).

**** COMPLETED Create the initial skeleton for the C++ IM
     CLOSED: [2013-08-23 Fri 08:17]
     CLOCK: [2013-08-23 Fri 08:29]--[2013-08-23 Fri 08:38] =>  0:09
     CLOCK: [2013-08-23 Fri 08:04]--[2013-08-23 Fri 08:17] =>  0:13

**** Create a mock factory for the C++ IM
**** Create a basic =standard_transformer= that instantiates new classes
**** Create a basic =standard_formatter= that formats new classes

*** Create an SML level concept for facets

In reality, "facets" are not a C++ thing; they are language
neutral. They are, however, expressed differently in different
languages. For example:

- types: same on all languages
- debug_printing: overloaded operator<< in C++, toString() in Java,
  ToString() in C#, etc.
- serialisation: slightly less obvious, but effectively the most
  "native" serialisation available for the given programming
  language. For C++ this is boost serialisation.
- hashing: language specific support for hashing, in C++ either std
  hash or boost hash, in Java/C# overloading of hash functions.
- test_data: some facilities for test data generation
- relational: bindings for relational databases. ODB in C++.

We can introduce these concepts at the SML level, probably at the
=model= and =abstract_object= level; we can then do further
translation at the language level, as required.

** Deprecated Development Stories
