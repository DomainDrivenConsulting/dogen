#+title: Release Notes for Sprint 40
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 40.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2013-12-05 Thu 23:59]

| Headline                                            | Time   |      |      |
|-----------------------------------------------------+--------+------+------|
| *Total time*                                        | *4:48* |      |      |
|-----------------------------------------------------+--------+------+------|
| Development Stories Implemented                     |        | 4:48 |      |
| IMPLEMENTATION Release notes and backlog grooming   |        |      | 0:05 |
| COMPLETED Add more tests to =concept_indexer=       |        |      | 3:22 |
| IMPLEMENTATION Plug =concept_indexer= into workflow |        |      | 1:21 |
#+end:

*** IMPLEMENTATION Release notes and backlog grooming                  :task:
    CLOCK: [2013-12-03 Tue 08:01]--[2013-12-03 Tue 08:06] =>  0:05

*** Update manual                                                     :story:

Use compilation downtime to update the manual.

*** COMPLETED Add more tests to =concept_indexer=                     :story:
    CLOSED: [2013-12-05 Thu 08:44]
**** COMPLETED Finish adding unit tests for modeled concepts           :task:
     CLOSED: [2013-12-05 Thu 08:06]
     CLOCK: [2013-12-05 Thu 17:44]--[2013-12-05 Thu 18:10] =>  0:26
     CLOCK: [2013-12-05 Thu 07:56]--[2013-12-05 Thu 08:06] =>  0:10
     CLOCK: [2013-12-04 Wed 18:07]--[2013-12-04 Wed 18:49] =>  0:42
     CLOCK: [2013-12-04 Wed 07:48]--[2013-12-04 Wed 08:12] =>  0:24
     CLOCK: [2013-12-03 Tue 21:09]--[2013-12-03 Tue 21:29] =>  0:20
     CLOCK: [2013-12-03 Tue 08:06]--[2013-12-03 Tue 08:48] =>  0:42

**** COMPLETED Add negative unit tests                                 :task:
     CLOSED: [2013-12-05 Thu 08:44]
     CLOCK: [2013-12-05 Thu 08:06]--[2013-12-05 Thu 08:44] =>  0:38

- concept that refines non-existing concept
- object that models non-existing concept
- object with non-existing parent

*** IMPLEMENTATION Plug =concept_indexer= into workflow               :story:
**** COMPLETED Minor refactor to workflow                              :task:
     CLOSED: [2013-12-05 Thu 23:26]
     CLOCK: [2013-12-05 Thu 23:20]--[2013-12-05 Thu 23:25] =>  0:05
     CLOCK: [2013-12-05 Thu 23:01]--[2013-12-05 Thu 23:20] =>  0:19
     CLOCK: [2013-12-05 Thu 18:12]--[2013-12-05 Thu 18:35] =>  0:23

- tidy-up method names
- avoid mixed activities

**** IMPLEMENTATION Add concept indexing activity                      :task:
     CLOCK: [2013-12-05 Thu 23:25]--[2013-12-05 Thu 23:59] =>  0:34

- remove resolver concept indexing

*** COMPLETED Concept resolution is not particularly clean            :story:
    CLOSED: [2013-12-05 Thu 23:42]

At present resolver is tasked with converting the hierarchy of
concepts into a container with a set of =qnames= that represent the
concepts the type models. It takes into account both the inheritance
from a concept perspective (e.g. refinement) and the type-related
inheritance (e.g. if our parent already models a concept we do not
have to model it too). However, the code is very hacky and needs to be
cleaned up.

*** Populate new concept properties in dia to sml transformer         :story:

- populate =is_parent= and =is_child=

*** Finish implementation of =inheritance_indexer= and add tests      :story:
**** Update transformer to populate basic relationships                :task:
**** Implement indexing of associations, keys and visitor              :task:
**** Plug into workflow                                                :task:
**** Add unit tests for the indexing of properties                     :task:
**** Add unit tests for the indexing of relationships                  :task:

*** Replace existing structures with indexing ones                    :story:

Make use of the indexing information in legacy C++ formatters as a way
to validate that it is correct.

**** Create a helper class to handle relationships                     :task:

- =find_relationship=: gets a specific relationship container, returns
  empty if it does not exist.
- =find_relationship_strict=: gets a specific relationship container,
  throws if it does not exist.

**** Replace original parent/parent functionality with relationships   :task:

- delete leaves, original parent, parent attributes and use
  relationships instead.

**** Replace the concepts expansion code with relationships            :task:
**** Replace C++ property handling code with relationships             :task:
**** Replace association, keys and visitor with relationships          :task:

*** Add include file support to main type formatter                   :story:

Inclusion support needs to be moved to the formatters. SML provides
all the required information at the model level in terms of type
dependencies, but only the formatter itself knows what includes it
needs because these are related to the implementation. Even
determining which facets of a type one should include is formatter
dependent. We need to distribute the logic of the includer into each
formatter.

** Deprecated Development Stories
