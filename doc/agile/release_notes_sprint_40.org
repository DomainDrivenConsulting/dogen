#+title: Release Notes for Sprint 40
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED
#+tags: story(s) epic(e) task(t) note(n) spike(p)

* Release Notes

This file contains all stories that were closed during sprint 40.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2013-12-13 Fri 07:25]

| Headline                                                              | Time    |       |       |
|-----------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                          | *19:52* |       |       |
|-----------------------------------------------------------------------+---------+-------+-------|
| Development Stories Implemented                                       |         | 19:52 |       |
| IMPLEMENTATION Release notes and backlog grooming                     |         |       |  0:44 |
| IMPLEMENTATION Update manual                                          |         |       |  0:19 |
| COMPLETED Add more tests to =concept_indexer=                         |         |       |  3:22 |
| COMPLETED Plug =concept_indexer= into workflow                        |         |       |  2:14 |
| COMPLETED Checking that a model hasn't changed by copying it is wrong |         |       |  0:13 |
| COMPLETED Create a =property_indexer= and add tests                   |         |       | 13:00 |
#+end:

*** IMPLEMENTATION Release notes and backlog grooming                  :task:
    CLOCK: [2013-12-13 Fri 07:58]--[2013-12-13 Fri 08:07] =>  0:09
    CLOCK: [2013-12-13 Fri 07:13]--[2013-12-13 Fri 07:25] =>  0:12
    CLOCK: [2013-12-11 Wed 07:53]--[2013-12-11 Wed 08:06] =>  0:13
    CLOCK: [2013-12-11 Wed 07:19]--[2013-12-11 Wed 07:26] =>  0:07
    CLOCK: [2013-12-07 Sat 18:40]--[2013-12-07 Sat 18:47] =>  0:07
    CLOCK: [2013-12-03 Tue 08:01]--[2013-12-03 Tue 08:06] =>  0:05

*** IMPLEMENTATION Update manual                                      :story:
    CLOCK: [2013-12-06 Fri 08:25]--[2013-12-06 Fri 08:39] =>  0:14
    CLOCK: [2013-12-06 Fri 08:20]--[2013-12-06 Fri 08:25] =>  0:05

Use compilation downtime to update the manual.

*** COMPLETED Add more tests to =concept_indexer=                     :story:
    CLOSED: [2013-12-05 Thu 08:44]
**** COMPLETED Finish adding unit tests for modeled concepts           :task:
     CLOSED: [2013-12-05 Thu 08:06]
     CLOCK: [2013-12-05 Thu 17:44]--[2013-12-05 Thu 18:10] =>  0:26
     CLOCK: [2013-12-05 Thu 07:56]--[2013-12-05 Thu 08:06] =>  0:10
     CLOCK: [2013-12-04 Wed 18:07]--[2013-12-04 Wed 18:49] =>  0:42
     CLOCK: [2013-12-04 Wed 07:48]--[2013-12-04 Wed 08:12] =>  0:24
     CLOCK: [2013-12-03 Tue 21:09]--[2013-12-03 Tue 21:29] =>  0:20
     CLOCK: [2013-12-03 Tue 08:06]--[2013-12-03 Tue 08:48] =>  0:42

**** COMPLETED Add negative unit tests                                 :task:
     CLOSED: [2013-12-05 Thu 08:44]
     CLOCK: [2013-12-05 Thu 08:06]--[2013-12-05 Thu 08:44] =>  0:38

- concept that refines non-existing concept
- object that models non-existing concept
- object with non-existing parent

*** COMPLETED Concept resolution is not particularly clean            :story:
    CLOSED: [2013-12-05 Thu 23:42]

At present resolver is tasked with converting the hierarchy of
concepts into a container with a set of =qnames= that represent the
concepts the type models. It takes into account both the inheritance
from a concept perspective (e.g. refinement) and the type-related
inheritance (e.g. if our parent already models a concept we do not
have to model it too). However, the code is very hacky and needs to be
cleaned up.

*** COMPLETED Plug =concept_indexer= into workflow                    :story:
    CLOSED: [2013-12-07 Sat 18:42]
**** COMPLETED Minor refactor to workflow                              :task:
     CLOSED: [2013-12-05 Thu 23:26]
     CLOCK: [2013-12-05 Thu 23:20]--[2013-12-05 Thu 23:25] =>  0:05
     CLOCK: [2013-12-05 Thu 23:01]--[2013-12-05 Thu 23:20] =>  0:19
     CLOCK: [2013-12-05 Thu 18:12]--[2013-12-05 Thu 18:35] =>  0:23

- tidy-up method names
- avoid mixed activities

**** COMPLETED Add concept indexing activity                           :task:
     CLOSED: [2013-12-06 Fri 07:49]
     CLOCK: [2013-12-05 Thu 23:25]--[2013-12-05 Thu 23:59] =>  0:34

**** COMPLETED Remove =modeled_concepts= from abstract object          :task:
     CLOSED: [2013-12-06 Fri 12:39]
     CLOCK: [2013-12-06 Fri 08:39]--[2013-12-06 Fri 08:41] =>  0:02
     CLOCK: [2013-12-06 Fri 07:55]--[2013-12-06 Fri 08:20] =>  0:25
     CLOCK: [2013-12-06 Fri 07:43]--[2013-12-06 Fri 07:51] =>  0:08

- deal with the fallout

**** COMPLETED Remove resolver concept indexing                        :task:
     CLOSED: [2013-12-07 Sat 18:42]
     CLOCK: [2013-12-06 Fri 19:50]--[2013-12-06 Fri 20:08] =>  0:18

- activate new activity

*** COMPLETED Populate new concept properties in dia to sml transformer :story:
    CLOSED: [2013-12-07 Sat 18:42]

- populate =is_parent= and =is_child=

*** COMPLETED Checking that a model hasn't changed by copying it is wrong :spike:
    CLOSED: [2013-12-11 Wed 20:22]
    CLOCK: [2013-12-10 Tue 08:40]--[2013-12-10 Tue 08:45] =>  0:05
    CLOCK: [2013-12-10 Tue 08:31]--[2013-12-10 Tue 08:39] =>  0:08

In the past we used to rely on making a copy of a model prior to doing
a transformation (named "expected" or e) and then checking that the
"actual" result of the transformation was equal/not equal to
"expected". We used to rely on the copy constructor for this because
there were no pointers in the model. With the introduction of shared
pointers, this logic became faulty because now expected and actual
have some pointers that point to the same locations in memory. We do
not yet support cloning, so there is no easy solution for this. We
need to review all the code that does this and on a case-by-case basis
figure out how to generate "expected".

We could also consider implementing cloning, if this proves too hard.

*** COMPLETED Create a =property_indexer= and add tests               :story:
    CLOSED: [2013-12-13 Fri 00:17]
**** COMPLETED Implement indexing of properties
     CLOSED: [2013-12-07 Sat 20:09]
     CLOCK: [2013-12-07 Sat 19:03]--[2013-12-07 Sat 20:09] =>  1:06
     CLOCK: [2013-12-07 Sat 18:48]--[2013-12-07 Sat 19:02] =>  0:14

**** COMPLETED Create a flags class in mock factory                   :spike:
     CLOSED: [2013-12-09 Mon 08:44]
     CLOCK: [2013-12-09 Mon 17:43]--[2013-12-09 Mon 17:48] =>  0:05
     CLOCK: [2013-12-09 Mon 07:59]--[2013-12-09 Mon 08:49] =>  0:50

- fixes borked clang build and makes the use of flags in factory a bit
  more sensible.

**** COMPLETED Add support for concept indexing in mock factory       :spike:
     CLOSED: [2013-12-10 Tue 07:57]
     CLOCK: [2013-12-09 Mon 23:42]--[2013-12-10 Tue 00:22] =>  0:40
     CLOCK: [2013-12-09 Mon 18:00]--[2013-12-09 Mon 18:42] =>  0:42

- blocker: we require the model to have been indexed at the concept level in
  order to test the property indexer, so we need to update the mock
  factory.

**** COMPLETED Add unit tests                                          :task:
     CLOSED: [2013-12-11 Wed 18:28]
     CLOCK: [2013-12-11 Wed 18:16]--[2013-12-11 Wed 18:28] =>  0:12
     CLOCK: [2013-12-11 Wed 17:56]--[2013-12-11 Wed 18:16] =>  0:20
     CLOCK: [2013-12-11 Wed 08:18]--[2013-12-11 Wed 08:41] =>  0:23
     CLOCK: [2013-12-11 Wed 08:07]--[2013-12-11 Wed 08:18] =>  0:11
     CLOCK: [2013-12-10 Tue 17:24]--[2013-12-10 Tue 18:01] =>  0:37
     CLOCK: [2013-12-10 Tue 17:15]--[2013-12-10 Tue 17:22] =>  0:07
     CLOCK: [2013-12-10 Tue 07:57]--[2013-12-10 Tue 08:29] =>  0:32
     CLOCK: [2013-12-07 Sat 20:09]--[2013-12-07 Sat 21:23] =>  1:14

**** COMPLETED Plug into workflow                                      :task:
     CLOSED: [2013-12-11 Wed 18:40]
     CLOCK: [2013-12-11 Wed 18:28]--[2013-12-11 Wed 18:40] =>  0:12

**** COMPLETED Concept properties were incorrectly added to all properties :spike:
     CLOSED: [2013-12-11 Wed 19:12]
     CLOCK: [2013-12-11 Wed 18:52]--[2013-12-11 Wed 19:12] =>  0:20

We should have added them to local properties.

**** COMPLETED Remove all usages of =parent_name= and =original_parent_name= :spike:
     CLOSED: [2013-12-12 Thu 23:20]
     CLOCK: [2013-12-12 Thu 22:53]--[2013-12-12 Thu 23:20] =>  0:27
     CLOCK: [2013-12-12 Thu 21:50]--[2013-12-12 Thu 22:52] =>  1:02
     CLOCK: [2013-12-12 Thu 17:40]--[2013-12-12 Thu 18:17] =>  0:37
     CLOCK: [2013-12-12 Thu 07:53]--[2013-12-12 Thu 08:30] =>  0:37

**** COMPLETED Replace C++ property handling code                      :task:
     CLOSED: [2013-12-13 Fri 00:01]
     CLOCK: [2013-12-12 Thu 23:30]--[2013-12-13 Fri 00:01] =>  0:31
     CLOCK: [2013-12-12 Thu 23:25]--[2013-12-12 Thu 23:30] =>  0:05
     CLOCK: [2013-12-11 Wed 23:53]--[2013-12-12 Thu 00:40] =>  0:47
     CLOCK: [2013-12-11 Wed 23:32]--[2013-12-11 Wed 23:53] =>  0:21
     CLOCK: [2013-12-11 Wed 20:00]--[2013-12-11 Wed 20:12] =>  0:12
     CLOCK: [2013-12-11 Wed 19:12]--[2013-12-11 Wed 19:20] =>  0:08
     CLOCK: [2013-12-11 Wed 18:41]--[2013-12-11 Wed 18:52] =>  0:11

**** COMPLETED Refactor =properties_for_concept= in extractor         :spike:
     CLOSED: [2013-12-13 Fri 00:17]
     CLOCK: [2013-12-13 Fri 00:00]--[2013-12-13 Fri 00:17] =>  0:17

*** COMPLETED Implement the property cache in SML                     :story:
    CLOSED: [2013-12-13 Fri 07:17]


Indexers and the indexed fields now take on the role of the property
cache.

*** COMPLETED Validate inheritance graph does a lot of double-checks  :story:
    CLOSED: [2013-12-13 Fri 07:21]

In method =validate_inheritance_graph=, we should really just check
that the parent exists since we know all objects get checked
anyway. this results in a lot of double-checks for no reason.

*** Create a =relationship_indexer= and add tests                     :story:
**** Create the class skeleton with tests                              :task:
**** Plug into workflow                                                :task:
**** Add indexing of associations                                      :task:
**** Add indexing of leaves                                            :task:
**** Add indexing of keys                                              :task:
**** Add indexing of  and visitor                                      :task:
** Deprecated Development Stories
*** CANCELLED Add content to the introduction in manual               :story:
    CLOSED: [2013-12-13 Fri 07:22]

New understanding: This story was too generic and we already have the
rolling add content to manual.

*** CANCELLED Remove generation types in SML                          :story:
    CLOSED: [2013-12-13 Fri 07:24]

New understanding: There will no longer be any language specific models, so
generation types has to stay in SML.

Old understanding: SML knows not of code generation so we shouldn't
have a generation type in it. What we should have instead is a way of
identifying a type as belonging to the target model or not. In a way,
its qname already does that.

Partial generation is actually a c++ model decision based on how much
features it supports.
