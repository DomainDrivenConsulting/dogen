#+title: Sprint Backlog 53
#+options: date:nil toc:nil author:nil num:nil
#+todo: ANALYSIS IMPLEMENTATION TESTING | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) task(t) note(n) spike(p) }
#+tags: { refactor(r) bug(b) feature(f) vision(v) }
#+tags: { meta_data(m) tests(a) packaging(q) media(h) build(u) validation(x) diagrams(w) frontend(c) backend(g) }
#+tags: dia(y) sml(l) cpp(k) config(o) formatters(d)

* Stories

This file contains all stories that were closed during sprint 53.

The *Mission Statement* for this sprint is to implement the backend
model, hook it up to the C++ model and implement at least one
formatter in the C++ model.

** Development Stories Implemented

#+begin: clocktable :maxlevel 3 :scope subtree
Clock summary at [2014-10-07 Tue 22:04]

| Headline                                                            | Time   |      |      |
|---------------------------------------------------------------------+--------+------+------|
| *Total time*                                                        | *2:28* |      |      |
|---------------------------------------------------------------------+--------+------+------|
| Development Stories Implemented                                     |        | 2:28 |      |
| IMPLEMENTATION Sprint and product backlog grooming                  |        |      | 0:27 |
| COMPLETED Fix CMake 3.0 warnings                                    |        |      | 0:14 |
| COMPLETED Rename =model_provider_interface= to =frontend_interface= |        |      | 0:18 |
| IMPLEMENTATION Implement the =backend= model                        |        |      | 1:29 |
#+end:

*** IMPLEMENTATION Sprint and product backlog grooming                 :task:
    CLOCK: [2014-10-06 Mon 08:10]--[2014-10-06 Mon 08:18] =>  0:08
    CLOCK: [2014-10-06 Mon 07:51]--[2014-10-06 Mon 08:10] =>  0:19

Updates to sprint and product backlog.

*** Updates to the manual and readme files                       :task:media:

Use downtime to update the manual and / or readme file.

*** Manually generate packages for previous sprint          :story:packaging:

#+begin_quote
*Story*: As a dogen user, I want to install dogen so that I don't have
to compile it.
#+end_quote

We should manually generate packages for the previous sprint and
upload them to Google drive. To do this we should log in to each build
agent, git clone the repo from scratch, =git checkout= the tag and
then do a full build. We should also upload the docs too. Ideally we
should do this for all platforms.

*** COMPLETED Fix CMake 3.0 warnings                                  :spike:
    CLOSED: [2014-10-06 Mon 19:16]
    CLOCK: [2014-10-06 Mon 19:02]--[2014-10-06 Mon 19:16] =>  0:14

After the latest CMake update we started to see a lot of warnings. We
need to fix these.

*** COMPLETED Rename =model_provider_interface= to =frontend_interface= :task:refactor:
    CLOSED: [2014-10-07 Tue 22:04]
    CLOCK: [2014-10-07 Tue 21:46]--[2014-10-07 Tue 22:04] =>  0:18

Since we called =backend_interface= to the =backend= model interface
for all the backend instances, it only seems logical to call
=frontend_interface= to its equivalent in the =frontend= model. This
may be a case of "over-symmetry" but seems to make sense.

*** IMPLEMENTATION Implement the =backend= model              :task:refactor:

Create the interface, workflow and registrar for the backend
model. Workflow returns list of consumers. Implement it in formatters
and C++ models. Formatters are consumers too (or provide a consumer).

We may need to use some kind of adaptor for now to convert the output
of the =cpp_formatters= model into a =formatters::file=.

**** COMPLETED Code generate the =backend= model
     CLOSED: [2014-10-06 Mon 19:26]
     CLOCK: [2014-10-06 Mon 19:16]--[2014-10-06 Mon 19:26] =>  0:10
     CLOCK: [2014-10-06 Mon 08:20]--[2014-10-06 Mon 08:46] =>  0:26

Add model to CMake, fix all code generation errors, etc.

**** IMPLEMENTATION Implement the main classes
     CLOCK: [2014-10-07 Tue 21:04]--[2014-10-07 Tue 21:44] =>  0:40
     CLOCK: [2014-10-06 Mon 19:26]--[2014-10-06 Mon 19:39] =>  0:13

Add code for interface, registrar and workflow.

*** Update =knit= to use the =backend= model                  :task:refactor:

Remove the internal interfaces and code in workflow that perform the
same role as the new =backend= model does.

*** Refactor types header formatter            :task:refactor:formatters:cpp:

Make the main types header formatters look like the =om= types
formatter. This model was deleted around commit 10157ad.

This is still not quite right. We need to drive the formatting from
two things:

- user options
- available formatters

**** Tidy-up =types_main_header_file_formatter=                        :task:

Clean up internal functions in file and add documentation.

**** Make use of boilerplate                                           :task:

Generate the licence, etc using boilerplate formatter.

**** Copy across documentation from =om=                               :task:

We did a lot of doxygen comments that are readily applicable, copy
them across.

**** Make use of indenting stream                                      :task:

Remove uses of old indenter.

**** Copy across =om= types formatter tests                            :task:

Not sure how applicable this would be, but we may be able to scavenge
some tests.

*** Add include files at the formatter level    :task:refactor:meta_data:cpp:

We need to remove all the include files from =includer= which are
related to formatter specific code. We need to inject these
dependencies inside of the formatters.

- implement includer in terms of json files
- get includer to work off of object relationships
- remove relationships from transformer
- remove helper models boost and std

*** Includer generation should be done from meta-data         :task:refactor:

It would be nice if we could determine which includer files to create
by looking at the meta-data. For this we need a notion of an inclusion
group, defined at the model level:

- =cpp.types.includers.general=
- =cpp.types.includers.value_objects=
- ...

Under each of these one would configure the aspect:

- =cpp.types.includers.general.generate=: =true=
- =cpp.types.includers.general.file_name=: =a/b/c=
- =cpp.types.includers.general.is_system=: =false=

Then, each type, module etc would declare its membership (as a list):

- =cpp.includers.member=: =cpp.types.includers.general=
- =cpp.includers.member=: =cpp.types.includers.value_objects=
- ...

*Previous understanding*

We should simply go through all the types in the SML model and for
each type and each facet create the corresponding inclusion
path. locator can be used to generate standard paths, and a model
specific mapping is required for other models such as std.

Include then takes the relationships extracted by extractor, the
mappings generated by this mapper and simply appends to the inclusion
list the file names. it also appends the implementation specific
headers.

*** Support "cross-facet interference"                         :task:feature:

In a few cases its useful to disable bits of a facet when another
facet is switched off because those bits do not belong to the main
facet the formatter is working on. At present this happens in the
following cases:

- Forward declaration of serialisation in domain when serialisation is
  off
- Friend of serialisation in domain when serialisation is
  off
- declaration and implementation of to_stream when IO is off
- declaration and implementation of inserter when IO is off and
  integrated IO is on.

We need a way of accessing the on/off state of all facets from any
formatter so that they can make cross facet decisions. A quick hack
was to add yet another flag: =disable_io= which is disabled when the
IO facet is not present and passed on to the relevant formatters. This
needs to be replaced by a more general approach.

*** Add frontends and backends to =info= command line option  :story:feature:

#+begin_quote
*Story*: As a dogen user, I want to know what frontends and backends
are available in my dogen version so that I don't try to use features
that are not present.
#+end_quote

With the static registration of frontends and backends, we should add
some kind of mechanism to display whats on offer in the command line,
via the =--info= option. This is slightly tricky because the
=frontend= and =backend= models do not know of the command line. We
need a method in the frontends that returns a description and a method
in the workflow that returns all descriptions. These must be
static. The knitter can then call these methods and build the info
text.

*** Rename the include tags and add them to CPP model          :task:bug:sml:

Update all the JSON files with names in the form
=cpp.include.types.header_file=. Add properties in =cpp= to capture
these.

While we're at it, add support for =family= too.

** Deprecated Development Stories

Stories that do not make sense any longer.

*** CANCELLED Implement the types enricher in cpp      :task:feature:sml:cpp:
    CLOSED: [2014-10-01 Wed 15:44]

*Rationale*: superseded by new stories.

Create the first and second stage enrichment for types. This is a good
test to see if the overall logic is sound.

*** CANCELLED Move SML graph visiting code from meta-data into main namespace :task:refactor:
    CLOSED: [2014-10-01 Wed 15:43]

*Rationale*: superseded by new stories.

We also need to rename enrichers and delete the graph of dependencies
between enrichers.

*** CANCELLED Create a librarian to manage library models     :task:refactor:
    CLOSED: [2014-09-29 Mon 01:25]

*Rationale*: Actually, the library models are not an SML artefact; in
fact SML handles these models in exactly the same way as any other
model. Knit is the right place for this.

As part of the frontend refactor we moved the loading of library
models away from the SML workflow. However, SML should at least
provide a simple way to manage the library models or else we will have
to duplicate this code wherever these models need to be loaded.
