#+title: Sprint Backlog 69
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Finish implementing all formatters using the new cpp architecture
  and remove the legacy architecture;
- Start integration with Clang.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-29 Mon 17:54]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *25:54* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 25:54   |       |      |
| Active                                                                      |         | 25:54 |      |
| STARTED Sprint and product backlog grooming                                 |         |       | 1:31 |
| COMPLETED Create a short presentation on Dogen                              |         |       | 6:37 |
| COMPLETED Add support for opaque settings factories                         |         |       | 1:40 |
| COMPLETED Refactor opaque settings production                               |         |       | 1:04 |
| COMPLETED Implement class header formatter in odb                           |         |       | 1:29 |
| COMPLETED Fix borked windows build                                          |         |       | 0:10 |
| COMPLETED Handling of "singleton" formatters                                |         |       | 2:07 |
| COMPLETED Split formatters into per instance and singleton                  |         |       | 1:10 |
| COMPLETED Implement all missing interfaces and hook them in to workflow     |         |       | 1:22 |
| COMPLETED Path settings factory makes use of command line options           |         |       | 0:29 |
| STARTED Thoughts on cpp refactoring                                         |         |       | 2:21 |
| STARTED Create a formattables factory                                       |         |       | 5:54 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-06-26 Fri 14:10]--[2015-06-26 Fri 15:09] =>  0:59
    CLOCK: [2015-06-24 Wed 16:24]--[2015-06-24 Wed 16:34] =>  0:10
    CLOCK: [2015-06-22 Mon 14:01]--[2015-06-22 Mon 14:23] =>  0:22

Updates to sprint and product backlog.

- Backlog reviewed up to "In next major release".

*** Updates to the manual and readme files                            :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Create a short presentation on Dogen                    :story:
    CLOSED: [2015-06-23 Tue 16:28]
    CLOCK: [2015-06-29 Mon 15:01]--[2015-06-29 Mon 16:10] =>  1:09
    CLOCK: [2015-06-29 Mon 14:44]--[2015-06-29 Mon 14:57] =>  0:13
    CLOCK: [2015-06-29 Mon 14:32]--[2015-06-29 Mon 14:43] =>  0:11
    CLOCK: [2015-06-29 Mon 14:01]--[2015-06-29 Mon 14:32] =>  0:31
    CLOCK: [2015-06-23 Tue 15:30]--[2015-06-23 Tue 16:20] =>  0:50
    CLOCK: [2015-06-22 Mon 15:33]--[2015-06-22 Mon 18:10] =>  2:37
    CLOCK: [2015-06-22 Mon 15:25]--[2015-06-22 Mon 15:32] =>  0:07
    CLOCK: [2015-06-22 Mon 15:14]--[2015-06-22 Mon 15:24] =>  0:10
    CLOCK: [2015-06-22 Mon 14:24]--[2015-06-22 Mon 15:13] =>  0:49

We need to create an introductory presentation on dogen.
We should use LaTex and [[http://mirror.ox.ac.uk/sites/ctan.org/macros/latex/contrib/beamer/doc/beameruserguide.pdf][Beamer]] for it.

Tasks:

- create a skeleton for the presentation
- add a target on cmake

*** COMPLETED Add support for opaque settings factories               :story:
    CLOSED: [2015-06-23 Tue 21:40]
    CLOCK: [2015-06-23 Tue 20:41]--[2015-06-23 Tue 21:40] =>  0:59
    CLOCK: [2015-06-23 Tue 19:58]--[2015-06-23 Tue 20:22] =>  0:24
    CLOCK: [2015-06-23 Tue 17:37]--[2015-06-23 Tue 17:54] =>  0:17

We have started adding opaque settings, but it seems we did not finish
it. This is required for odb support.

*** COMPLETED Refactor opaque settings production                     :story:
    CLOSED: [2015-06-23 Tue 22:53]
    CLOCK: [2015-06-23 Tue 22:20]--[2015-06-23 Tue 22:51] =>  0:31
    CLOCK: [2015-06-23 Tue 21:46]--[2015-06-23 Tue 22:19] =>  0:33

We need to be able to use the same code to generate opaque settings
for both the bundle and the settings in properties. We need to move
across the code in the bundle factory into some kind of stand alone
class that can be used from the factory and the transformer.

*** COMPLETED Implement class header formatter in odb                 :story:
    CLOSED: [2015-06-23 Tue 22:56]
    CLOCK: [2015-06-23 Tue 23:05]--[2015-06-23 Tue 23:09] =>  0:04
    CLOCK: [2015-06-23 Tue 22:57]--[2015-06-23 Tue 23:04] =>  0:07
    CLOCK: [2015-06-23 Tue 22:53]--[2015-06-23 Tue 22:56] =>  0:03
    CLOCK: [2015-06-23 Tue 16:21]--[2015-06-23 Tue 17:36] =>  1:15

Create the formatter, stitch template and all associated
machinery. Fix all differences.

Solved problems:

- spurious newline after pragmas
- no support for opaque factories
- no opaque settings for properties

*** COMPLETED Fix borked windows build                                :story:
    CLOSED: [2015-06-24 Wed 14:15]
    CLOCK: [2015-06-24 Wed 13:33]--[2015-06-24 Wed 13:43] =>  0:10

Build borked with the following errors:

: file included from /.../source/projects/cpp/src/types/settings/initializer.cpp:22:0:
:  /.../source/projects/cpp/include/dogen/cpp/types/settings/odb_settings_factory.hpp:37:7: error: looser throw specifier for 'virtual dogen::cpp::settings::odb_settings_factory::~odb_settings_factory()'

And

:  /.../source/projects/cpp/include/dogen/cpp/types/settings/opaque_settings_factory_interface.hpp:45:13: error:   overriding 'virtual dogen::cpp::settings::opaque_settings_factory_interface::~opaque_settings_factory_interface() noexcept (true)'

*** COMPLETED Handling of "singleton" formatters                      :story:
    CLOSED: [2015-06-24 Wed 16:35]
    CLOCK: [2015-06-24 Wed 15:50]--[2015-06-24 Wed 16:23] =>  0:33
    CLOCK: [2015-06-24 Wed 14:15]--[2015-06-24 Wed 15:49] =>  1:34

Handling of special file names:

- at present we assume that all file names are constructed from the
  formatter properties and the qname. This is not correct. Some file
  names are "special" such as CMakeLists etc. These "special" file
  names seem to have two requirements: a) an hard-coded file name b)
  occasionally, to be stored at project directory, source directory,
  or (by default) at facet directory. This could easily be handled
  with two new fields: =file_name= and =file_location=. These use
  formatter template expansion.
- however, we have a problem: some file names such as registrar need
  the facet postfix. Others such as =options.odb= do not. Still others
  like =CMakeLists.txt= don't have a facet at all (and thus do not
  need prefixes). By sheer luck it seems that all files that use
  prefixes are inside of facet folders and all files that do not need
  prefixes are outside facet folders.
- an additional requirement is that not all formatters are driven by
  qnames; there are a set of formatters that are driven by formatter
  names. These "singleton" formatters are the ones that need file
  names and location. A new field could be added: =instantiation_type=
  with values =singleton= or =per_instance=. We should then create
  instance path settings and singleton path settings. Path derivatives
  factory could then have a "make singleton path derivatives".
- actually these are all static properties of the formatters; it makes
  no sense to configure them in the meta-data because they cannot be
  changed.

In conclusion, we need:

- formatter instantiation type: singleton, per instance.
- file name: if singleton must be supplied, must be blank otherwise.
- location: project, source, facet. if per instance, must be facet.

Another way of looking at the problem is that in some cases, SML does
not drive the generation of the formattables. In those cases, the
formattables are actually hard-coded (or at least partially hard-coded
as we need some inputs such as model name, etc). Since we are already
hard-coding the formattables generation, it makes sense to also
hard-code the paths. However, we still need to make sure we
distinguish between per instance formatters from singleton formatters
or else we risk generating instances for the singleton formatters.

With this approach, we need:

- formatter instantiation type: singleton, per instance. This allows
  us to filter out singleton formatters from the instance formatters
  pipeline. We could even segregate them in the formatter registrar
  (all singleton formatters?).
- a transformer-like class to create the singleton formattables. Path
  generation is done in this class, with the assistance of path
  settings. This could just be called =factory=. Given a model, it
  returns all of the "singleton" formattables.

*** COMPLETED Split formatters into per instance and singleton        :story:
    CLOSED: [2015-06-25 Thu 13:25]
    CLOCK: [2015-06-24 Wed 17:37]--[2015-06-24 Wed 17:48] =>  0:11
    CLOCK: [2015-06-24 Wed 17:21]--[2015-06-24 Wed 17:36] =>  0:15
    CLOCK: [2015-06-24 Wed 16:36]--[2015-06-24 Wed 17:20] =>  0:36

One slight problem of splitting the formatters based on cardinality is
that it is not the "formatter cardinality" we are talking about; after
all, a formatter always takes one formattable and produces a
file. This is more subtle: the cardinality of the formattables
associated with the formatter. What we really need is a conept to
distinguish between these kinds of formattables. For now lets call
these "internal" and "external" formatters until a better name reveals
itself.

This is obviously still an inadequate solution (what if we create an
internal class info?) but it'll have to do.

- add an enum at the formattables base class level and the formatter
  interface level.
- split formatters into internal and external in container.
- change path settings factory to receive a forward list of formatters
  instead of a formatter container.
- change path derivatives workflow to pass in the external container.

*** COMPLETED Implement all missing interfaces and hook them in to workflow :story:
    CLOSED: [2015-06-26 Fri 16:39]
    CLOCK: [2015-06-26 Fri 15:17]--[2015-06-26 Fri 16:39] =>  1:22

We should have interfaces for all formattables, even those for which
we have no formatters yet. We should also check the formatters
container and see if there are any available formatters for a given
type and if none are, log that at warning level.

*** COMPLETED Path settings factory makes use of command line options :story:
    CLOSED: [2015-06-26 Fri 17:33]
    CLOCK: [2015-06-26 Fri 17:04]--[2015-06-26 Fri 17:33] =>  0:29

We want to make the settings subsystem rely only on the
meta-data. However we incorrectly added the command line options to
the path settings factory. We need to remove this and pass the command
line options to the path derivatives factory in formattables.

*** STARTED Thoughts on cpp refactoring                               :story:
    CLOCK: [2015-06-25 Thu 17:29]--[2015-06-25 Thu 17:54] =>  0:25
    CLOCK: [2015-06-25 Thu 16:18]--[2015-06-25 Thu 16:44] =>  0:26
    CLOCK: [2015-06-25 Thu 15:32]--[2015-06-25 Thu 16:17] =>  0:45
    CLOCK: [2015-06-25 Thu 13:30]--[2015-06-25 Thu 14:15] =>  0:45

We haven't quite arrived at the ideal configuration for the cpp
model. We are close, but not there yet. The problem we have at the
moment is that the formatters drive a lot of the work in
formattables, resulting in a circular dependency. This is happening
because we are missing some entities. This story is just a random set
of thoughts in this space, trying to clear up the terminology across
the board.

*Random thoughts*

What is probably needed is to have facets, aspects and "file kinds" as
top-level concepts rather than just strings with which we label
formatters. In addition, we need a good name for "file kinds". This is
a meta-concept, something akin to a file template. The formatter
produces a physical representation of that meta-concept. As part of
the formatter registration, we can also register this meta-concept
(provided it relies on an existing formattable). And in effect, these
are the pieces of the puzzle:

- you define a "file kind".
- a facet and a model are groupings of "file kinds". These happen to
  be hierarchical groupings. There are others: header and
  implementation, or class header formatter. Those are
  non-hierarchical.
- you bind a transformer to a SML type to generate a formattable.
- a formattable is associated with one or more "file kinds" or better
  yet a file kind is associated with a formattable. It is also
  associated with formatting properties and settings. It is those
  tuples that we pass to the formatters.
- you bind a formatter to a "file" and process the associated
  formattable.

Perhaps we can call these "file kinds" file archetypes or just
archetypes.

What can be said about an archetype:

- conceptual notion of something we want to generate.
- one SML entity can map to zero or many archetypes. Concept at
  present maps to zero. Object maps to many.
- a representation of the archetype as source code is done by the
  formatter. It uses a template to help it generate that
  representation.
- a given archetype maps to one and only one SML entity.
- a given archetype maps to one and only one CPP entity.
- archetypes can be grouped in many ways. One way is facets and
  models.
- archetypes have definitions: name of the archetype, what groups it
  belongs to.
- archetypes have associated data: formattables, settings,
  properties. This is an entity and needs a name.
- formatters work on one and only one archetype.
- archetypes have qualified names; this is (mostly) what we called
  ownership hierarchy. Qualified names can be represented as separate
  fields or using the dot notation.
- archetypes have labels: this is what we called groups.
- dynamic is a model designed to augment SML with some archetype
  data. This is not true in the dia case. Check all fields to see if
  it is true everywhere else.
- an aspect is a property of one or more archetypes; it is a knob that
  affects the generation of the source code representation.
- an archetype instance belongs to an archetype.
- we should remove the concept of "integrated facets". It just happens
  that a facet such as types may have aspects that enable features
  similar to aspects in other facets. There may be rules that
  determine that when certain aspects are enabled, certain facets must
  be switched off because they are incompatible.
- facet is a good name for grouping archetypes, but model isn't. We
  need a better name for a set of facets. Aspect is also a good
  name. In addition, a model group is also a bad name. A "model" is a
  cohesive group of archetypes that are meant to be used together. A
  "model group" is a cohesive group of models that provide the same
  conceptual representations in different programming languages. Maybe
  we should use a more "random" name such as: pod. Then perhaps a
  model group could become a "pod family": a family of related pods. A
  given model can be represented by one pod family or another - they
  are mutually exclusive. Of course, from a command line perspective,
  its better to think of "modes". Each mode corresponds to choosing
  one "pod family" over another. This does not map very cleanly.
- archetypes have an associated programming language - a grammar.
- a facet may exist in more than one programming language and an
  aspect too.
- pods are programming language specific.
- formattables are kind of like an archetype friendly representation
  of the domain types. We need a good name for this.
- internal and external now make slightly more sense, at least once we
  got a good name for formatters. We still need a good name for it
  though. If the archetype instance is generated because of the
  presence of the domain type, it is external. If the archetype has no
  sensitivity to domain types (but may have sensitivity to other
  things such as options) it is internal. The naming around this is
  not totally clear.
- internal formatters may not be allowed to be disabled. For example,
  if serialisation is on, registrar must be generated. With
  CMakeLists, we may want do disable them altogether.
- in the thrift story in the backlog we mention the existence of
  mutually exclusive groups of facets. We should also come up with a
  name for these.
- archetype may not be the right name. See [[http://www.pearsonhighered.com/samplechapter/032111230X.pdf][Archetypes and archetype
  patterns]].

One way to look at it is as follows: there is the modeling dimension,
in which we have an entity, say entity =A=; and there is the
implementation dimension, in which =a= can be represented by =A1, A2,
..., An= archetypes. In effect, the implementation dimension has
multiple dimensions, one for each pod (and of course the pod families
would be an extra dimension and so on).

*** STARTED Create a formattables factory                             :story:
    CLOCK: [2015-06-29 Mon 17:01]--[2015-06-29 Mon 17:54] =>  0:53
    CLOCK: [2015-06-27 Sat 17:34]--[2015-06-27 Sat 18:10] =>  0:36
    CLOCK: [2015-06-27 Sat 16:39]--[2015-06-27 Sat 17:33] =>  0:54
    CLOCK: [2015-06-27 Sat 14:41]--[2015-06-27 Sat 16:38] =>  1:57
    CLOCK: [2015-06-26 Fri 17:33]--[2015-06-26 Fri 17:51] =>  0:18
    CLOCK: [2015-06-26 Fri 16:40]--[2015-06-26 Fri 17:03] =>  0:23
    CLOCK: [2015-06-25 Thu 16:45]--[2015-06-25 Thu 17:28] =>  0:43
    CLOCK: [2015-06-25 Thu 13:20]--[2015-06-25 Thu 13:30] =>  0:10

Create a class responsible for instantiating all of the "singleton"
formatters:

- all includers
- serialisation registrar
- odb options
- all cmakelists

This class will be hooked into the formattables workflow. It will
hard-code the path and file names for these formattables (but take
into account things such as prefixes, etc).

Notes:

- registrar info is still an entity and as such needs settings,
  formatter properties, etc. This means its not so easy to construct
  it from factory. Perhaps the separation we have is more between
  "entity" and "non-entity" formattables rather than internal and
  external. Having said that, for the registrar to go through the same
  pipeline as the SML types we will have to create a qname
  etc. Perhaps what would be really needed is a way to inject C++
  specific types in SML. Transformer would somehow recognise this
  objects and create the correct formattables for it. This sounds too
  complicated (and circular). However, somehow we need to
  short-circuit the path derivatives, properties, etc generation and
  inject a C++ specific type. Actually, of all the things that we
  provide for "regular" SML types, all we need is enablement and file
  path. We can easily generate these from the factory.
- we need to somehow be able to create the path derivatives for a
  single path settings. We need to generate file names for all files
  in the factory and this requires path derivatives.

*** Solve the problem of "relocatable" formatters                     :story:

There may be cases where a formatter is the same for all facets, but
we still need to have it instantiated for every facet. At present that
is not possible because formatters have hard-coded ownership
hierarchies. In addition, there is the potential for inclusion
dependencies generation which is also facet specific.

This could be solved by instantiating the formatter in the initializer
of every facet, and supplying the facet name to the constructor; the
ownership hierarchy would then use this facet name. This would mean
that the same formatter would be registered for every facet.

We don't yet have a use case for this. It was thought to be needed for
forward declarations but at present we only need them for types. It is
probably needed in order to integrate knit and stitch.

Actually this is needed for the includers.

*** Add include providers for all types                               :story:

We need to implement the provider container support for primitives,
modules and concepts.

Update:

- inclusion dependencies factory
- provider container

*** Implement odb options formatter in odb                            :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

- we have two of these at the moment, one at the top-level and another
  one inside odb. Remove the odb one.

*** Implement serialisation registrar formatter                       :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement source cmakelists formatter                             :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement include cmakelists formatter                            :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

** Deprecated
