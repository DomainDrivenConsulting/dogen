#+title: Sprint Backlog 69
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Finish implementing all formatters using the new cpp architecture
  and remove the legacy architecture;
- Start integration with Clang.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-24 Wed 17:19]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *12:19* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 12:19   |       |      |
| Active                                                                      |         | 12:19 |      |
| STARTED Sprint and product backlog grooming                                 |         |       | 0:32 |
| COMPLETED Create a short presentation on Dogen                              |         |       | 4:33 |
| COMPLETED Add support for opaque settings factories                         |         |       | 1:40 |
| COMPLETED Refactor opaque settings production                               |         |       | 1:04 |
| COMPLETED Implement class header formatter in odb                           |         |       | 1:29 |
| COMPLETED Fix borked windows build                                          |         |       | 0:10 |
| COMPLETED Handling of "singleton" formatters                                |         |       | 2:07 |
| STARTED Split formatters into per instance and singleton                    |         |       | 0:44 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-06-24 Wed 16:24]--[2015-06-24 Wed 16:34] =>  0:10
    CLOCK: [2015-06-22 Mon 14:01]--[2015-06-22 Mon 14:23] =>  0:22

Updates to sprint and product backlog.

- Backlog reviewed up to "In next major release".

*** Updates to the manual and readme files                            :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Create a short presentation on Dogen                    :story:
    CLOSED: [2015-06-23 Tue 16:28]
    CLOCK: [2015-06-23 Tue 15:30]--[2015-06-23 Tue 16:20] =>  0:50
    CLOCK: [2015-06-22 Mon 15:33]--[2015-06-22 Mon 18:10] =>  2:37
    CLOCK: [2015-06-22 Mon 15:25]--[2015-06-22 Mon 15:32] =>  0:07
    CLOCK: [2015-06-22 Mon 15:14]--[2015-06-22 Mon 15:24] =>  0:10
    CLOCK: [2015-06-22 Mon 14:24]--[2015-06-22 Mon 15:13] =>  0:49

We need to create an introductory presentation on dogen.
We should use LaTex and [[http://mirror.ox.ac.uk/sites/ctan.org/macros/latex/contrib/beamer/doc/beameruserguide.pdf][Beamer]] for it.

Tasks:

- create a skeleton for the presentation
- add a target on cmake

*** COMPLETED Add support for opaque settings factories               :story:
    CLOSED: [2015-06-23 Tue 21:40]
    CLOCK: [2015-06-23 Tue 20:41]--[2015-06-23 Tue 21:40] =>  0:59
    CLOCK: [2015-06-23 Tue 19:58]--[2015-06-23 Tue 20:22] =>  0:24
    CLOCK: [2015-06-23 Tue 17:37]--[2015-06-23 Tue 17:54] =>  0:17

We have started adding opaque settings, but it seems we did not finish
it. This is required for odb support.

*** COMPLETED Refactor opaque settings production                     :story:
    CLOSED: [2015-06-23 Tue 22:53]
    CLOCK: [2015-06-23 Tue 22:20]--[2015-06-23 Tue 22:51] =>  0:31
    CLOCK: [2015-06-23 Tue 21:46]--[2015-06-23 Tue 22:19] =>  0:33

We need to be able to use the same code to generate opaque settings
for both the bundle and the settings in properties. We need to move
across the code in the bundle factory into some kind of stand alone
class that can be used from the factory and the transformer.

*** COMPLETED Implement class header formatter in odb                 :story:
    CLOSED: [2015-06-23 Tue 22:56]
    CLOCK: [2015-06-23 Tue 23:05]--[2015-06-23 Tue 23:09] =>  0:04
    CLOCK: [2015-06-23 Tue 22:57]--[2015-06-23 Tue 23:04] =>  0:07
    CLOCK: [2015-06-23 Tue 22:53]--[2015-06-23 Tue 22:56] =>  0:03
    CLOCK: [2015-06-23 Tue 16:21]--[2015-06-23 Tue 17:36] =>  1:15

Create the formatter, stitch template and all associated
machinery. Fix all differences.

Solved problems:

- spurious newline after pragmas
- no support for opaque factories
- no opaque settings for properties

*** COMPLETED Fix borked windows build                                :story:
    CLOSED: [2015-06-24 Wed 14:15]
    CLOCK: [2015-06-24 Wed 13:33]--[2015-06-24 Wed 13:43] =>  0:10

Build borked with the following errors:

: file included from /.../source/projects/cpp/src/types/settings/initializer.cpp:22:0:
:  /.../source/projects/cpp/include/dogen/cpp/types/settings/odb_settings_factory.hpp:37:7: error: looser throw specifier for 'virtual dogen::cpp::settings::odb_settings_factory::~odb_settings_factory()'

And

:  /.../source/projects/cpp/include/dogen/cpp/types/settings/opaque_settings_factory_interface.hpp:45:13: error:   overriding 'virtual dogen::cpp::settings::opaque_settings_factory_interface::~opaque_settings_factory_interface() noexcept (true)'

*** COMPLETED Handling of "singleton" formatters                      :story:
    CLOSED: [2015-06-24 Wed 16:35]
    CLOCK: [2015-06-24 Wed 15:50]--[2015-06-24 Wed 16:23] =>  0:33
    CLOCK: [2015-06-24 Wed 14:15]--[2015-06-24 Wed 15:49] =>  1:34

Handling of special file names:

- at present we assume that all file names are constructed from the
  formatter properties and the qname. This is not correct. Some file
  names are "special" such as CMakeLists etc. These "special" file
  names seem to have two requirements: a) an hard-coded file name b)
  occasionally, to be stored at project directory, source directory,
  or (by default) at facet directory. This could easily be handled
  with two new fields: =file_name= and =file_location=. These use
  formatter template expansion.
- however, we have a problem: some file names such as registrar need
  the facet postfix. Others such as =options.odb= do not. Still others
  like =CMakeLists.txt= don't have a facet at all (and thus do not
  need prefixes). By sheer luck it seems that all files that use
  prefixes are inside of facet folders and all files that do not need
  prefixes are outside facet folders.
- an additional requirement is that not all formatters are driven by
  qnames; there are a set of formatters that are driven by formatter
  names. These "singleton" formatters are the ones that need file
  names and location. A new field could be added: =instantiation_type=
  with values =singleton= or =per_instance=. We should then create
  instance path settings and singleton path settings. Path derivatives
  factory could then have a "make singleton path derivatives".
- actually these are all static properties of the formatters; it makes
  no sense to configure them in the meta-data because they cannot be
  changed.

In conclusion, we need:

- formatter instantiation type: singleton, per instance.
- file name: if singleton must be supplied, must be blank otherwise.
- location: project, source, facet. if per instance, must be facet.

Another way of looking at the problem is that in some cases, SML does
not drive the generation of the formattables. In those cases, the
formattables are actually hard-coded (or at least partially hard-coded
as we need some inputs such as model name, etc). Since we are already
hard-coding the formattables generation, it makes sense to also
hard-code the paths. However, we still need to make sure we
distinguish between per instance formatters from singleton formatters
or else we risk generating instances for the singleton formatters.

With this approach, we need:

- formatter instantiation type: singleton, per instance. This allows
  us to filter out singleton formatters from the instance formatters
  pipeline. We could even segregate them in the formatter registrar
  (all singleton formatters?).
- a transformer-like class to create the singleton formattables. Path
  generation is done in this class, with the assistance of path
  settings. This could just be called =factory=. Given a model, it
  returns all of the "singleton" formattables.

*** STARTED Split formatters into per instance and singleton          :story:
    CLOCK: [2015-06-24 Wed 16:36]--[2015-06-24 Wed 17:20] =>  0:36

One slight problem of splitting the formatters based on cardinality is
that it is not the "formatter cardinality" we are talking about; after
all, a formatter always takes one formattable and produces a
file. This is more subtle: the cardinality of the formattables
associated with the formatter. What we really need is a conept to
distinguish between these kinds of formattables. For now lets call
these "internal" and "external" formatters until a better name reveals
itself.

- add an enum at the formattables base class level and the formatter
  interface level.
- split formatters into internal and external in container.
- change path settings factory to receive a forward list of formatters
  instead of a formatter container.
- change path derivatives workflow to pass in the external container.

*** Create a formattables factory                                     :story:

Create a class responsible for instantiating all of the "singleton"
formatters:

- all includers
- serialisation registrar
- odb options
- all cmakelists

This class will be hooked into the formattables workflow. It will
hard-code the path and file names for these formattables (but take
into account things such as prefixes, etc).

*** Path settings factory makes use of command line options           :story:

We want to make the settings subsystem rely only on the
meta-data. However we incorrectly added the command line options to
the path settings factory. We need to remove this and pass the command
line options to the path derivatives factory in formattables.

*** Implement odb options formatter in odb                            :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

- we have two of these at the moment, one at the top-level and another
  one inside odb. Remove the odb one.

*** Implement serialisation registrar formatter                       :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement source cmakelists formatter                             :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement include cmakelists formatter                            :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

** Deprecated
