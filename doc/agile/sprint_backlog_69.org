#+title: Sprint Backlog 69
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Finish implementing all formatters using the new cpp architecture
  and remove the legacy architecture;
- Start integration with Clang.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-23 Tue 21:40]
| <75>                                                                        |        |      |      |
| Headline                                                                    | Time   |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| *Total time*                                                                | *7:50* |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| Stories                                                                     | 7:50   |      |      |
| Active                                                                      |        | 7:50 |      |
| STARTED Sprint and product backlog grooming                                 |        |      | 0:22 |
| COMPLETED Create a short presentation on Dogen                              |        |      | 4:33 |
| COMPLETED Add support for opaque settings factories                         |        |      | 1:40 |
| STARTED Implement class header formatter in odb                             |        |      | 1:15 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-06-22 Mon 14:01]--[2015-06-22 Mon 14:23] =>  0:22

Updates to sprint and product backlog.

- Backlog reviewed up to "In next major release".

*** Updates to the manual and readme files                            :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Create a short presentation on Dogen                    :story:
    CLOSED: [2015-06-23 Tue 16:28]
    CLOCK: [2015-06-23 Tue 15:30]--[2015-06-23 Tue 16:20] =>  0:50
    CLOCK: [2015-06-22 Mon 15:33]--[2015-06-22 Mon 18:10] =>  2:37
    CLOCK: [2015-06-22 Mon 15:25]--[2015-06-22 Mon 15:32] =>  0:07
    CLOCK: [2015-06-22 Mon 15:14]--[2015-06-22 Mon 15:24] =>  0:10
    CLOCK: [2015-06-22 Mon 14:24]--[2015-06-22 Mon 15:13] =>  0:49

We need to create an introductory presentation on dogen.
We should use LaTex and [[http://mirror.ox.ac.uk/sites/ctan.org/macros/latex/contrib/beamer/doc/beameruserguide.pdf][Beamer]] for it.

Tasks:

- create a skeleton for the presentation
- add a target on cmake

*** COMPLETED Add support for opaque settings factories               :story:
    CLOSED: [2015-06-23 Tue 21:40]
    CLOCK: [2015-06-23 Tue 20:41]--[2015-06-23 Tue 21:40] =>  0:59
    CLOCK: [2015-06-23 Tue 19:58]--[2015-06-23 Tue 20:22] =>  0:24
    CLOCK: [2015-06-23 Tue 17:37]--[2015-06-23 Tue 17:54] =>  0:17

We have started adding opaque settings, but it seems we did not finish
it. This is required for odb support.
Problems:

- no support for opaque factories
- spurious newline after pragmas
- no opaque settings for properties

*** STARTED Implement class header formatter in odb                   :story:
    CLOCK: [2015-06-23 Tue 16:21]--[2015-06-23 Tue 17:36] =>  1:15

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement odb formatter in odb                                    :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement serialisation registrar formatter                       :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Remove calls to unix utilities directly                           :story:

We have a couple of cases where we are calling UNIX utilities when
there are equivalent CMake calls. For example
=test_data/CMakeLists.txt=:

:        set(target_name "rebase_${model_name}")
:        if(EXISTS "${git_expected}/")
:            add_custom_target(${target_name}
:                COMMAND rm -rf ${expected}/*
:                COMMAND cp ${actual}/* ${expected}
:                COMMAND cp ${actual}/* ${git_expected}/
:                WORKING_DIRECTORY ${stage_bin_dir})

These can be replaced with:

:        file(REMOVE_RECURSE ${stage_test_data_dir}/${dir}/expected)
:        file(COPY ${curdir}/${dir} DESTINATION ${stage_dir}/test_data)
:         file(MAKE_DIRECTORY ${stage_test_data_dir}/${dir}/actual)

etc.

*** Detect the presence of the diff command                           :story:

The diff targets is dependent on the presence of the diff command, but
we are not checking to see if it exists:

:        set(target_name "diff_${model_name}")
:        add_custom_target(${target_name}
:            COMMAND diff -r -u ${expected} ${actual}
:            WORKING_DIRECTORY ${stage_bin_dir})
:        add_dependencies(diff_dataset ${target_name})

We need to detect it and only add this targets if diff has been found.

** Deprecated
