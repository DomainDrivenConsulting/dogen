#+title: Sprint Backlog 69
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Finish implementing all formatters using the new cpp architecture
  and remove the legacy architecture;
- Start integration with Clang.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-23 Tue 16:29]
| <75>                                                                        |        |      |      |
| Headline                                                                    | Time   |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| *Total time*                                                                | *4:55* |      |      |
|-----------------------------------------------------------------------------+--------+------+------|
| Stories                                                                     | 4:55   |      |      |
| Active                                                                      |        | 4:55 |      |
| STARTED Sprint and product backlog grooming                                 |        |      | 0:22 |
| COMPLETED Create a short presentation on Dogen                              |        |      | 4:33 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-06-22 Mon 14:01]--[2015-06-22 Mon 14:23] =>  0:22

Updates to sprint and product backlog.

- Backlog reviewed up to "In next major release".

*** Updates to the manual and readme files                            :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Create a short presentation on Dogen                    :story:
    CLOSED: [2015-06-23 Tue 16:28]
    CLOCK: [2015-06-23 Tue 15:30]--[2015-06-23 Tue 16:20] =>  0:50
    CLOCK: [2015-06-22 Mon 15:33]--[2015-06-22 Mon 18:10] =>  2:37
    CLOCK: [2015-06-22 Mon 15:25]--[2015-06-22 Mon 15:32] =>  0:07
    CLOCK: [2015-06-22 Mon 15:14]--[2015-06-22 Mon 15:24] =>  0:10
    CLOCK: [2015-06-22 Mon 14:24]--[2015-06-22 Mon 15:13] =>  0:49

We need to create an introductory presentation on dogen.
We should use LaTex and [[http://mirror.ox.ac.uk/sites/ctan.org/macros/latex/contrib/beamer/doc/beameruserguide.pdf][Beamer]] for it.

Tasks:

- create a skeleton for the presentation
- add a target on cmake

*** STARTED Implement class header formatter in odb                   :story:
    CLOCK: [2015-06-23 Tue 16:21]--[2015-06-23 Tue 17:36] =>  1:15

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement odb formatter in odb                                    :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Implement serialisation registrar formatter                       :story:

Create the formatter, stitch template and all associated
machinery. Fix all differences.

*** Remove calls to unix utilities directly                           :story:

We have a couple of cases where we are calling UNIX utilities when
there are equivalent CMake calls. For example
=test_data/CMakeLists.txt=:

:        set(target_name "rebase_${model_name}")
:        if(EXISTS "${git_expected}/")
:            add_custom_target(${target_name}
:                COMMAND rm -rf ${expected}/*
:                COMMAND cp ${actual}/* ${expected}
:                COMMAND cp ${actual}/* ${git_expected}/
:                WORKING_DIRECTORY ${stage_bin_dir})

These can be replaced with:

:        file(REMOVE_RECURSE ${stage_test_data_dir}/${dir}/expected)
:        file(COPY ${curdir}/${dir} DESTINATION ${stage_dir}/test_data)
:         file(MAKE_DIRECTORY ${stage_test_data_dir}/${dir}/actual)

etc.

*** Detect the presence of the diff command                           :story:

The diff targets is dependent on the presence of the diff command, but
we are not checking to see if it exists:

:        set(target_name "diff_${model_name}")
:        add_custom_target(${target_name}
:            COMMAND diff -r -u ${expected} ${actual}
:            WORKING_DIRECTORY ${stage_bin_dir})
:        add_dependencies(diff_dataset ${target_name})

We need to detect it and only add this targets if diff has been found.

** Deprecated
*** CANCELLED Indent stream can be made a bit less inefficient        :story:
    CLOSED: [2015-06-10 Wed 18:52]

*Rationale*: manual indentation in templates is considered evil. It
had a large amount of complexity and it never quite works
properly. All indentation will be left to clang format.

Out first attempt at creating a stream with indentation support was a
bit naive: we are intercepting every character and then deciding if we
need to change any states in the state machine. Its probably wiser to
just use manipulators to perform the state transitions and leave the
=put= undisturbed. We can leave this until we have a good way of
getting metrics out of the system.

Actually we should also decide if indent stream is needed at all in a
stitch world.

It was shown that indent streams are useful for at least one use case:
for comments.

*** CANCELLED Consider creating an iostreams filter for comments      :story:
    CLOSED: [2015-06-10 Wed 18:53]

*Rationale*: in a world of templates this filtering streams add very
little value and make life more complicated.

Seems logic to follow the filtering idea and add a doxygen (or
generic) commenting filter; one inserts into the stream and it
automatically inserts all the comment markers such as =/**=, =@brief=
and so on. Basically takes on the work of =comment_formatter=. This
would mean we would no longer need the =contents= vector, and we could
stream directly to the stream, after pushing the comments formatter on
to it. However, it would probably mean we need to cast the stream to a
=filtering_ostream= in order to do the push.
*** CANCELLED Implement options copier and remove options from context :story:
    CLOSED: [2015-06-11 Thu 22:00]

*Rationale*: does not make sense in a non-expansion world.

At present the path derivatives expander is getting access to the C++
options via the expansion context. This was obviously a temporary hack
to get things moving. The right thing must surely be to add the root
object to the context, and to read the options from the root
object. These for now must be populated via the options copier; in the
future one can imagine that users define them in diagrams.

Actually, the directories supplied to dogen do need to be command line
options. This is because they tend to be created by CMake on the fly
as absolute paths and as such cannot be hard-coded into the
diagram. This being the case, perhaps we should just supply the
knitting options to the expansion context. This does mean that now
expansion is a knitting thing - it could have been used by
stitch. Needs a bit more thinking.

*Tasks to read options from root object*

Not yet clear this is the right solution, but if it is, this is what
needs to be done.

- check that we have all the required fields in JSON for all of the
  c++ options we require for now.
- update options copier to copy these options. In many cases we will
  have to "redirect" the option. For example, =domain_facet_folder=
  becomes the types directory and so forth. Having said that we
  probably won't need these for now.
- remove options from context, and add root object instead. We may
  need to do the usual "locate root object" routine.
- update the path settings factory to read these from the root object.
- add options to type settings where it makes sense (e.g. disable
  complete constructor) and implement the type settings factory.
*** CANCELLED Move sorting of includes into utility                   :story:
    CLOSED: [2015-06-11 Thu 22:07]

*Rationale*: no point now when we are almost about to finish
converting types to the new world.

When we implemented the sorting of includes we added it directly to
=cpp_formatters= and to =inclusion_dependency_factory=, copy and
paste. Maybe we should move this to utility, even if we are only using
it temporarily, to avoid having problems when the code gets out of sync.

*** CANCELLED Populate the "new" =class_info= properties              :story:
    CLOSED: [2015-06-11 Thu 22:13]

*Rationale*: We removed new class info.

We need a way of populating the class aspects via the type settings
and via information obtained in the SML model. We may want to create a
class to handle this logic or maybe it can be done in transformer.
