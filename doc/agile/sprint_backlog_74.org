#+title: Sprint Backlog 74
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- get yarn into its final shape, with the work in single element
  container;
- make inroads in supporting composite model names;
- get continuous builds working again.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-11-22 Sun 22:16]
| <75>                                                                        |         |       |      |
| Headline                                                                    | Time    |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| *Total time*                                                                | *18:53* |       |      |
|-----------------------------------------------------------------------------+---------+-------+------|
| Stories                                                                     | 18:53   |       |      |
| Active                                                                      |         | 18:53 |      |
| STARTED Sprint and product backlog grooming                                 |         |       | 3:08 |
| COMPLETED Write the next interesting instalment                             |         |       | 1:05 |
| COMPLETED SML json hydrator =read_module_path= needs refactoring            |         |       | 1:21 |
| COMPLETED Generate all yarn names using name factory                        |         |       | 7:25 |
| COMPLETED Rename yarn's =object=                                            |         |       | 0:14 |
| COMPLETED Populate model module path                                        |         |       | 0:59 |
| COMPLETED Update name factory and builder to compute qualified name         |         |       | 0:11 |
| STARTED Help contributor setup a windows environment to build dogen         |         |       | 0:45 |
| STARTED Remove original model name from location                            |         |       | 3:45 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-11-21 Sat 22:42]--[2015-11-21 Sat 23:05] =>  0:23
    CLOCK: [2015-11-19 Thu 18:18]--[2015-11-19 Thu 18:47] =>  0:29
    CLOCK: [2015-11-19 Thu 18:04]--[2015-11-19 Thu 18:17] =>  0:13
    CLOCK: [2015-11-19 Thu 08:44]--[2015-11-19 Thu 08:53] =>  0:09
    CLOCK: [2015-11-19 Thu 08:04]--[2015-11-19 Thu 08:29] =>  0:25
    CLOCK: [2015-11-09 Mon 21:21]--[2015-11-09 Mon 22:50] =>  1:29

Updates to sprint and product backlog.

*** COMPLETED Write the next interesting instalment                   :story:
    CLOSED: [2015-11-09 Mon 23:56]
    CLOCK: [2015-11-09 Mon 22:51]--[2015-11-09 Mon 23:56] =>  1:05

We've accumulated plenty of tabs with articles we've read of
late. Offload them into the next interesting instalment.

*** COMPLETED Remove primitive model handling in yarn dia transformer :story:
    CLOSED: [2015-11-09 Mon 22:35]

*Rationale*: this was implemented in previous sprint.

We seem to be doing some handling for primitives which is no longer
required. The handling of current model is also very dodgy. All in
transformer's update model reference.

Actually this is nothing at all to do with the primitive model but all
to do with computing the correct name. We need to start using the
builder here.
*** COMPLETED Create method to traverse all types when resolving names :story:
    CLOSED: [2015-11-19 Thu 08:24]

*New Understanding*

We can't use all model items traversal here because we are not
traversing all types but doing a search across the different elements
container. However we can do a function that is reused by all.

*Previous Understanding*

Resolver should use all types traversal instead of hand-picked queries
on the containers. We should do the exact same look-ups for all
containers:

- unchanged - name as it was original read out.
- from containing module name, by moving up from the containing module
  to the root module name (popping the internal module list of the
  containing module until its empty).
- from the references names, using external module path only.

*** COMPLETED SML json hydrator =read_module_path= needs refactoring  :story:
    CLOSED: [2015-11-19 Thu 08:27]
    CLOCK: [2015-11-11 Wed 21:30]--[2015-11-11 Wed 22:51] =>  1:21

We have a very misleading function =read_module_path= which reads
modules but also creates modules that do not exist. We need to split
this into a =read= function without side-effects and a =create=
function that creates the missing modules.

*** COMPLETED Generate all yarn names using name factory              :story:
    CLOSED: [2015-11-20 Fri 22:10]
    CLOCK: [2015-11-20 Fri 21:05]--[2015-11-20 Fri 21:30] =>  0:25
    CLOCK: [2015-11-20 Fri 12:10]--[2015-11-20 Fri 12:30] =>  0:20
    CLOCK: [2015-11-19 Thu 22:01]--[2015-11-19 Thu 22:15] =>  0:14
    CLOCK: [2015-11-17 Tue 22:54]--[2015-11-17 Tue 23:33] =>  0:39
    CLOCK: [2015-11-17 Tue 22:44]--[2015-11-17 Tue 22:53] =>  0:09
    CLOCK: [2015-11-17 Tue 21:51]--[2015-11-17 Tue 22:43] =>  0:52
    CLOCK: [2015-11-17 Tue 21:19]--[2015-11-17 Tue 21:50] =>  0:31
    CLOCK: [2015-11-16 Mon 20:44]--[2015-11-16 Mon 22:47] =>  2:03
    CLOCK: [2015-11-11 Wed 21:26]--[2015-11-11 Wed 21:29] =>  0:03
    CLOCK: [2015-11-10 Tue 23:22]--[2015-11-10 Tue 23:32] =>  0:10
    CLOCK: [2015-11-10 Tue 23:02]--[2015-11-10 Tue 23:21] =>  0:19
    CLOCK: [2015-11-10 Tue 21:21]--[2015-11-10 Tue 23:01] =>  1:40

We need to go through the code base and make sure that whenever we
create a yarn name we do it using the factory rather than hand rolling
one. This includes:

- yarn main (done)
- yarn test (done)
- yarn dia (done)
- yarn json (done)
- resolver (done)
- add in global namespace to primitve JSON model. (done)
- cpp (done)

*** COMPLETED Rename yarn's =object=                                  :story:
    CLOSED: [2015-11-20 Fri 22:15]
    CLOCK: [2015-11-19 Thu 08:35]--[2015-11-19 Thu 08:43] =>  0:08
    CLOCK: [2015-11-19 Thu 08:29]--[2015-11-19 Thu 08:35] =>  0:06

We start off by trying to follow the DDD naming but that has now been
changed in favour of more traditional meta-model names. In this sense,
object is not a good name as it evokes M0 rather than M1 or
higher. Perhaps =structure=? But structures do not normally have
methods. We probably should look at non-C-based languages for ideas.

Final word on this:

- object is fine, in keeping with the other names (concept,
  enumeration, etc). In reality, we need to end this fixation for
  =class=. We are creating a meta-model language to describe types for
  a specific purpose.
- we need to document this rationale in the manual at some point.

**** Thought experiments on prefixing all types with =meta=

Actually, one crazy but possibly correct solution would be to use the
prefix =meta=. We had decided against it many sprints ago because
=sml= _was_ a meta-model, so it didn't make a lot of sense to use meta
everywhere. However, now that =yarn= has grown as a proper code
generation model - doing a lot more than just provide meta-types - we
now only have a few types that are meta-types. These are the
descendents of element:

- =meta_class=: what we call object. This is a class that represents
  all classes.
- =meta_concept=: the concept that represents all concepts.
- ...

and so on. With the prefix =meta_= these names actually tell the truth
in terms of the responsibilities of these classes. We should also
rename the =Object= concept accordingly.

Note that the stereotypes remain the same. That is =enumeration= is
still a stereotype that applies to the current UML class, making it an
enumeration rather than some kind of meta-enumeration. Same with
=concept=, etc.

Problem areas:

- =intermediate_meta_model=: name is too big. It was already too big
  but now its just silly. We need to consider yet another rename,
  perhaps =raw_meta_model=?
- =meta_model=: acceptable.
- =meta_property=: we could continue to call it property but in
  reality it is not a property just like concept is not a concept, so
  for consistency purposes it should be renamed too.
- plurals, variables, etc: it would be annoying to have to start
  calling the containers =meta_classes= instead of =classes= and so
  on, but strictly speaking that is the correct name. Same for
  variables.

In truth by the time we finished applying the prefix =meta= in all
these places, it has lost all of its meaning. We need to take the
eCore approach and assume we are in the meta-layer, so there is no
need for a prefix. The only problem is =object=.

*** COMPLETED Populate model module path                              :story:
    CLOSED: [2015-11-20 Fri 23:08]
    CLOCK: [2015-11-20 Fri 22:09]--[2015-11-20 Fri 23:08] =>  0:59

We need to start updating model name.

*** COMPLETED Update name factory and builder to compute qualified name :story:
    CLOSED: [2015-11-20 Fri 23:21]
    CLOCK: [2015-11-20 Fri 23:10]--[2015-11-20 Fri 23:21] =>  0:11

We started off by disabling the qualified name to make resolution
work. We now need to enable it and fix all issues.

*** STARTED Help contributor setup a windows environment to build dogen :story:
    CLOCK: [2015-11-22 Sun 20:55]--[2015-11-22 Sun 21:40] =>  0:45

We should write down all instructions and use them for a blog post.

Current instructions:

1. Create a new folder =c:\development= with a structure that is
   something like:
   - =c:\development\packages= -> top-level directory for all the
     applications we install such as cmake, git, codelite, etc.
   - =c:\development\downloads= -> raw packages as downloaded in case we
     need to install them again.
   - =c:\development\code= -> place where the code we will work with
     will live. this includes dogen and boost.
   - =c:\development\third_party= -> place where the libraries we depend
     on to build dogen will live when installed. this is the place
     where we will install boost to (eventually).
2. download and install gcc, a free c++ compiler:
http://sourceforge.net/projects/tdm-gcc/files/TDM-GCC%20Installer/tdm-gcc-5.1.0-3.exe/download
3. download and install latest cmake:
https://cmake.org/files/v3.4/cmake-3.4.0-win32-x86.exe
4. download and install code lite, a free IDE: http://downloads.codelite.org/
5. download latest boost: http://www.boost.org/users/history/version_1_59_0.html
6. download and install latest git: https://git-scm.com/download/win

*** STARTED Remove original model name from location                  :story:
    CLOCK: [2015-11-22 Sun 22:01]--[2015-11-22 Sun 22:15] =>  0:14
    CLOCK: [2015-11-21 Sat 23:06]--[2015-11-21 Sat 23:12] =>  0:06
    CLOCK: [2015-11-21 Sat 22:14]--[2015-11-21 Sat 22:41] =>  0:27
    CLOCK: [2015-11-21 Sat 21:20]--[2015-11-21 Sat 22:13] =>  0:53
    CLOCK: [2015-11-21 Sat 21:13]--[2015-11-21 Sat 21:20] =>  0:07
    CLOCK: [2015-11-21 Sat 20:31]--[2015-11-21 Sat 21:12] =>  0:41
    CLOCK: [2015-11-20 Fri 23:22]--[2015-11-21 Sat 00:39] =>  1:17

Since the objective of location is to track a point in element space,
it seems a bit redundant to have original model name there. We should
move this to the element itself.

The good thing about this is that we can now locate the model even
when the type was placed in global namespace.

Notes:

- generalisation indexer: problem with leaves location.
- merger: problems with location.

*** Rename =in_global_namespace=                                      :story:

We used a C++ keyword by mistake in yarn, should have been global
module. We should also check where we generate the global module.

*** Add =interface= stereotype                                        :story:

Even though we can't generate much outside of plain types, we should
already have support for a stereotype of =interface= which for now
behaves just like =service=. In the future we may be able to code
generate the interface.

*** Implement module expander test                                    :story:

We copied across the code for the module expander test from yarn json
but didn't actually finished implementing it.

*** Rename original parents                                           :story:

Inheritance follows a tree of some kind. We should use tree
terminology for this.

*** Rename all model items traversal                                  :story:

We now know model items are called elements, so this should be an
element traversal.

*** Handle types placed in the global namespace                       :story:

Types such as =int= etc must be handled differently from other
types. The idea here is that these types are part of a model but
declared directly into the global namespace. If we model things
correctly, these types would exist in a point in element space where
everything but simple name is empty. However we do not do this because
it would mean that we could not distinguish the origin of such
types. It is still not clear why this is a requirement.

- if we do not need to remember the origin of a type, we could simply
  change JSON and dia to allow types to live in global namespace;
  perhaps a flag in global namespace would trigger everything on that
  type to be blank (all location fields). This is the right solution
  as it would then mean resolver would just work and we can now add
  any type to the global namespace.
- if we do need to remember the origin, we could manufacture a type
  name from each reference name, by taking all properties from the
  reference name (model name, etc). The problem with this is that we
  can now refer to any type in any model without qualifying it with
  model name, which is not ideal. So we'd have to have a flag at the
  element level (something like is in global namespace) to figure out
  what is valid and what is not.

Actually the solution for this may be to split the "location" model
name from the "origin" model name. Location is the position of the
type in element space, and so should be blank. Origin is the name of
the model it came from, and should exist in the element itself.

*** Use qualified name as the key of the intermediate model container :story:

We are using name as the key for the intermediate model container, but
once we have proper qualified name support everywhere, there is no
reason why we can't just use the qualified name. We should not change
the logic in the =cpp= containers as there the name is used for
processing reasons - we'd end up having to have the name as the value
instead.

*** Use the single element container model in =cpp=                   :story:

We have implemented a single element container in yarn but its not yet
being used. We need to:

- update yarn workflow to return this model instead of intermediate
  model;
 replace all usages of intermediate model in =cpp= with this model.

*** Implement formattables in terms of yarn types                     :story:

At present formattables are just a shadow copy of yarn types plus
additional =cpp= specific types. In practice:

- for the types that are shadow copies, we could have helper utilities
  that do the translation on the fly (e.g. for names).
- for additional information which cannot be translated, we could have
  containers indexed by qualified name and query those just before we
  call the transformer. This is the case with formatter properties. We
  need something similar to house "type properties" such as
  =requires_stream_manipulators=. These could be moved into aspect
  settings.
- for types that do not exist in yarn, we could inherit from element;
  this is the case for registrar, forward declarations, cmakelists and
  odb options. Note that with this we are now saying that element
  space contains anything which can be modeled, regardless of if they
  are part of the programming language type system, or build system,
  etc. This is not ideal, but its not a problem just yet. We could
  update the factory to generate these types and then take a copy of
  the model and inject them in it.

*** Create =src= and =include= facets                                 :story:

At present we have some formatters that are not in the traditional
facets such as =types=, etc. We should make facets for them. We need
to check what the current facet name is. There should only be one case
of this, the CMakeLists formatters.

*** Move all properties in =cpp= to a properties namespace            :story:

Once all formattables are gone, we should have only properties left in
the formattables namespace. We should then rename it to
properties.

Merged stories:

*Split formatter properties and associated classes from formattables*

We have two kinds of data: the formattables themselves (mapped from
yarn) and associated data (formatter properties). The latter is
totally independent. We should create a namespace for all of these
classes and a workflow that produces the data ready for consumption. A
tentative name is =manifest=.

*** Intermediate model should not be an Element                       :story:

We need to move all functionality from the model into the model module
such that the model no longer needs to be an element (documentation,
etc). It can remain as a nameable.

*** Consider renaming nested name                                     :story:

*New understanding*:

This story requires further analysis. Blindly following the composite
pattern was tried but it resulted in a lot of inconsistencies because
we then had to follow MEC-33 and create =abstract_qname=; however, the
nested qname does not really behave like a composite qname; its more
like the difference between a type in isolation and a type
instantiated as an argument of a function. For example, whilst the
type in isolation may have unknown template parameters, presumably, as
an argument of a function these have been instantiated with real
types.

One way to solve this is just to make the type name a bit more
explicit rather than try to imply the composite pattern
(e.g. "nested"). We need a name that signifies "instantiated
type". Look at the C++ standard for the difference between defining a
generic type and instantiating a generic type.

No good names yet (type reference, type instantiation, instantiated
name). What are we trying to represent: an identifier which points to
a complete definition of a name such that the name can be instantiated
as a type in the underlying language. By "instantiated" we mean used
to define variables of this type. In this light: instantiable name,
definable name? If we choose instantiable name, we could then rename
"children" to type arguments.

Other notes:

- there is such a thing as a element instance identifier. We call it
  nested name at present. The element instance identifier identifies
  instantiations of types. It models two cases: for the case where the
  type has no type parameters, the instance identifier is equal to the
  element identifier; for all other cases, it is a hierarchical
  collection of element identifiers, modeling the type parameter
  structure.

*Previous understanding*:

We should just follow the composite pattern in the naming.

*** Update copyright notices                                          :story:

We need to update all notices to reflect personal ownership until DDC
was formed, and then ownership by DDC.

- first update to personal ownership has been done, but we need to
  test if multiple copyright entries is properly supported.

*** Copyright holders is scalar when it should be an array            :story:

At present its only possible to specify a single copyright holder. It
should be handled the same was as odb parameters, but because that is
done with a massive hack, we are not going to extend the hack to
copyright holders.

*** Refactor code around model origination                            :story:

- remove origin types and generation types, replacing it with just a
  boolean for is target.
- at present we are using origin type to determine whether to create a
  registrar, etc in cpp model. There is no other use case for
  this. This is done in several places due to the bad handling of C++
  specific types. Grep for =references= in =cpp= to find all
  locations.
- we should also replace has generatable types with something more
  like "target model has types" or "is target model empty". The idea
  we are trying to capture is that the target model contained at least
  one type. This could be set by the merger when it processes the
  target model.

*Previous Understanding*

In the past we added a number of knobs around generation, all with
their own problems:

- =origin_types=: was the model/type created by the user or the
  system. in reality this means did the model come from Dia or
  JSON. this is confusing as the user can also add JSON files (their
  own model library) and in the future the user can use JSON
  exclusively without needed Dia at all.

- =generation_types=: if the model is target, all types are to be
  generated /unless/ they are not properly supported, in which case
  they are to be "partially" generated (as is the case with
  services). This is a formatter decision and SML should not know
  anything about it.

These can be replaced by a single enumeration that indicates if the
type/model is target or not.

This work should be integrated with the model types story.

*** Filter out unused types from final model                          :story:

When we finished assembling the model we should be able to determine
which supporting types are in use and drop those that are not. This
can be done just before building the final model (or as part of that
task).

We should have a class responsible for removing all types from a model
which are not in use. This could be done as part of model assembly.

One way this could be achieved is by adding a "usages" property,
computed during resolution. Resolver could keep track of the
non-target names that are in use and return those.

*** Handle enumeration type dynamically                               :story:

- add some enumeration post-processing that assigns it a underlying
  type. Should be done with merged model (look for a primitive type with
  property =is_default_enumeration_type=).

*** Split references into dogen and non-dogen models                  :story:

If we had two containers of references, one for dogen models and
another one for non-dogen models - which we could give a nice name, to
imply its foreign origin - we could then use the dogen references for
registrar, etc. This is a replacement for the origin type.

*** Add support for composite model names in name                     :story:

We added the model names list to location, but we are still not
parsing composite model names (e.g. =yarn.dia=). This will probably
break a lot of stuff.

- deal with the fallout in terms of file paths creation, etc.
- split model names with dots into multiple model paths.

- a model should have: an element identifier which is identical to the
  root module (the module that represents the model). A model is
  itself an element.

*** Add =operator<= for names                                         :story:

We seem to redefine this all over the place. Create a utility class
somewhere.

*** Services and leaves are not properly handled                      :story:

We are manually ignoring services when calculating leaves.

*** Add support for model names with dots                             :story:

It is quite annoying to have to create folders and sub-folders for the
main projects. This is not too bad right now because we don't really
make use of nesting that much, other than with test models. However,
now that the architecture is clear and we need to make use of nesting,
it becomes more of a concern. For example:

: / a
:   / b
:   / c
: / d
:   / e
:   / f

This is clearer as:

: / a
: / a.b
: / a.c
: / d.e
: / d.f

However, in order to implement this we need a bit of cleverness:

- for the purposes of files, the dot represents a dot;
- for the purposes of namespaces, we must create several namespaces
  (e.g. yarn::core).

This is also inline with the idea that the model name does not always
contribute to the namespaces as required by primitives. We basically
need a cleverer version of qname to handle all of these scenarios.

It may also be worth taking into account the other story on this topic
where we considered using underscores instead of folders for facet
names. It may be nicer to have dots for this,
e.g. =types.my_class.hpp=.

Idea:

=qnames= should have a model name and a model package; only the model
package contributes to the namespaces. The model name is unpacked into
multiple model packages (e.g. "a.b" => a::b). The file name uses the
model name, not the model package.

*** Use dots in data files extensions                                 :story:

At the moment we use extensions such as =xmlyarn=. It should really be
=.xml.yarn= or something of the kind.

*** Consider renaming includers                                       :story:

Its very confusing to have header files that include lots of other
header files called "includers". There is too much overloading. We
should consider calling them "master header files" as per Schaling
terminology in the [[http://theboostcpplibraries.com/boost.spirit][boost book]].

*** Update Linux CDash agent                                          :story:

We need to get the build green on the Linux agent again.

*** Update Windows CDash agent                                        :story:

We need to get the build green on the Windows agent again.

*** Add tests to identifier parser with invalid names                 :story:

We need to handle properly the following cases:

- totally blank name.
- template with angle brackets but nothing inside: =a<>=.
- template with angle brackets, type and then a comma: =a<b,>=.

** Deprecated
*** CANCELLED Replace name with id's in yarn                          :story:
    CLOSED: [2015-11-09 Mon 22:36]

*Rationale*: superseded with the backlog refactoring.

*New Understanding*

This is a new spin on that old chestnut of splitting partial models
from full models. We probably got enough to do this. The

*Previous Understanding*

We don't really need qname in it's current form for the purposes of
yarn. We should:

- create a base class for all types in model called element.
- add a property called id to element. Compute id on the basis of
  hashing name and location. Change all model containers,
  relationships etc to use id instead of qname.
*** CANCELLED Rename types in =yarn= using MOF/eCore terms            :story:
    CLOSED: [2015-11-19 Thu 08:46]

*Rationale*: We have more or less got to the final form for yarn given
the use cases. There is no need for further renamings, other than the
stories we already have open on the topic.

Rename the types in =yarn= to make them a bit more inline with
MOF/eCore. As much as possible but without going overboard. Ensure we
do not pick up meta-meta-model concepts by mistake. Rename nested
qname to something more sensible from MOF/eCore. Review all concept
names in this light.
