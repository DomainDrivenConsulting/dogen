#+title: Sprint Backlog 96
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) epic(e) }

* Mission Statement

- Finish C# support;
- Finish Upsilon support.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
#+CAPTION: Clock summary at [2017-01-23 Mon 11:03]
| <75>                                                                        |         |       |       |       |
| Headline                                                                    | Time    |       |       |     % |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| *Total time*                                                                | *35:15* |       |       | 100.0 |
|-----------------------------------------------------------------------------+---------+-------+-------+-------|
| Stories                                                                     | 35:15   |       |       | 100.0 |
| Active                                                                      |         | 35:15 |       | 100.0 |
| STARTED Sprint and product backlog grooming                                 |         |       |  1:32 |   4.3 |
| COMPLETED Edit release notes for previous sprint                            |         |       |  0:35 |   1.7 |
| COMPLETED Add test in knit to validate upsilon                              |         |       |  0:51 |   2.4 |
| COMPLETED Create an upsilon yarn frontend                                   |         |       | 10:18 |  29.2 |
| COMPLETED Fields with collections in upsilon cause errors                   |         |       |  1:20 |   3.8 |
| COMPLETED Bind language to kernel                                           |         |       |  1:29 |   4.2 |
| COMPLETED Upsilon can have collections of collections                       |         |       |  1:01 |   2.9 |
| COMPLETED Upsilon test borked due to no output                              |         |       |  0:21 |   1.0 |
| STARTED Add multi-language support                                          |         |       | 11:29 |  32.6 |
| STARTED Add a type mapper                                                   |         |       |  6:19 |  17.9 |
#+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2017-01-16 Mon 21:02]--[2017-01-16 Mon 21:56] =>  0:54
    CLOCK: [2017-01-16 Mon 18:02]--[2017-01-16 Mon 18:17] =>  0:15
    CLOCK: [2017-01-16 Mon 15:47]--[2017-01-16 Mon 15:50] =>  0:03
    CLOCK: [2017-01-16 Mon 09:27]--[2017-01-16 Mon 09:47] =>  0:20

Updates to sprint and product backlog.

*** COMPLETED Edit release notes for previous sprint                  :story:
    CLOSED: [2017-01-16 Mon 10:15]
    CLOCK: [2017-01-16 Mon 11:52]--[2017-01-16 Mon 11:55] =>  0:03
    CLOCK: [2017-01-16 Mon 11:45]--[2017-01-16 Mon 11:51] =>  0:06
    CLOCK: [2017-01-16 Mon 09:51]--[2017-01-16 Mon 10:15] =>  0:24
    CLOCK: [2017-01-16 Mon 09:48]--[2017-01-16 Mon 09:50] =>  0:02

Add github release notes for previous sprint.

Title: Dogen v0.95.0, "Iona"

#+begin_src markdown
Overview
=======
The bulk of this sprint's work was related to a customer specific feature: support for the upsilon input format. Other smaller tasks were:

- the continued work on the C# frontend, which is now nearing completion. C# support is still considered experimental and the generated code has an unstable API, liable to change without notice.
- improvements on the Windows build.
- addition of a benchmarking framework which allows us to measure the impact of new features in code generation time.

User visible changes
===============

In this sprint, a number of user visible features were added:

- **Improvements to C# including collections**:  it is now possible to use  object based collections. We can now generate most C# code except generic containers.
- **Packaging on Windows**: packaging support for Windows using WiX is now complete. As with OSX and Linux, Binaries are available from BinTray.
- **Validation improvements**: with the new validation framework, Dogen detects a lot of errors at code generation time (such as invalid type names, attempt to instantiate abstract types, etc). More validation rules will be added over time.

For more details of the work carried out this sprint, see the [sprint log](https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/sprint_backlog_95.org).

Next Sprint
========
The next sprint will continue to focus on C#, particularly the addition of collections.

Binaries
======
You can download experimental binaries from [Bintray](https://bintray.com/domaindrivenconsulting/Dogen) for OSX, Linux and Windows (all 64-bit):

- [dogen_0.95.0_amd64-applications.deb](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.95.0/dogen_0.95.0_amd64-applications.deb)
- [dogen-0.95.0-Darwin-x86_64.dmg](https://dl.bintray.com/domaindrivenconsulting/Dogen/0.95.0/dogen-0.95.0-Darwin-x86_64.dmg)
- [dogen-0.95.0-Windows-AMD64.msi](https://dl.bintray.com/domaindrivenconsulting/Dogen/dogen-0.95.0-Windows-AMD64.msi)

**Note**: They are produced by CI so they may not yet be ready.

For all other architectures and/or operative systems, you will need to build Dogen from source. Source downloads are available below.
#+end_src

- [[https://twitter.com/MarcoCraveiro/status/820962437465866241][Tweet]]

*** COMPLETED Add test in knit to validate upsilon                    :story:
    CLOSED: [2017-01-16 Mon 18:01]
    CLOCK: [2017-01-16 Mon 17:55]--[2017-01-16 Mon 18:01] =>  0:06
    CLOCK: [2017-01-16 Mon 17:09]--[2017-01-16 Mon 17:54] =>  0:45

At present we are testing the individual (low-level) upsilon workflows
but not the overall knit workflow for upsilon models. Due to this we
borked knit for upsilon models without realising it. We need to add a
test that processes the upsilon model even if it does not (yet)
generate any code.

Once we fixed a couple of minor errors, the meta-model generated by
upsilon actually generated C# and C++ code. This is rather puzzling:

- we should only generate those languages for which we have
  formatters, and we don't have any formatters for upsilon. Somehow
  this resulted in us using all available formatters.
- Profile expansion seems to have occurred:

: quilt.cpp.test_data.enabled=true

  etc. We did not set up any meta-data in upsilon (nor can we as the
  format does not support it).

*** COMPLETED Create an upsilon yarn frontend                         :story:
    CLOSED: [2017-01-17 Tue 21:08]
    CLOCK: [2017-01-17 Tue 20:26]--[2017-01-17 Tue 20:34] =>  0:08
    CLOCK: [2017-01-17 Tue 20:12]--[2017-01-17 Tue 20:25] =>  0:13
    CLOCK: [2017-01-17 Tue 18:19]--[2017-01-17 Tue 18:55] =>  0:36
    CLOCK: [2017-01-17 Tue 18:15]--[2017-01-17 Tue 18:18] =>  0:03
    CLOCK: [2017-01-17 Tue 17:05]--[2017-01-17 Tue 18:14] =>  1:09
    CLOCK: [2017-01-17 Tue 16:49]--[2017-01-17 Tue 17:04] =>  0:15
    CLOCK: [2017-01-17 Tue 16:01]--[2017-01-17 Tue 16:48] =>  0:47
    CLOCK: [2017-01-17 Tue 10:41]--[2017-01-17 Tue 12:01] =>  1:20
    CLOCK: [2017-01-17 Tue 09:24]--[2017-01-17 Tue 10:40] =>  1:16
    CLOCK: [2017-01-17 Tue 09:01]--[2017-01-17 Tue 09:23] =>  0:22
    CLOCK: [2017-01-16 Mon 15:02]--[2017-01-16 Mon 15:46] =>  0:44
    CLOCK: [2017-01-16 Mon 14:49]--[2017-01-16 Mon 15:01] =>  0:12
    CLOCK: [2017-01-16 Mon 13:45]--[2017-01-16 Mon 14:48] =>  1:03
    CLOCK: [2017-01-16 Mon 13:01]--[2017-01-16 Mon 13:44] =>  0:43
    CLOCK: [2017-01-16 Mon 10:58]--[2017-01-16 Mon 11:44] =>  0:46
    CLOCK: [2017-01-16 Mon 10:16]--[2017-01-16 Mon 10:57] =>  0:41

Now we can read upsilon models, we need to transform them into yarn
models. This fairly straightforward as a meta-model
transformation. There are however a few corner cases:

- we need to inject model value into the yarn model
- we need to inject a =Collection= type into the yarn model, which has
  one type parameter.
- we need to hard-code the model to a given language. At present we do
  not have proper multi-language workflows. When a model comes out of
  the frontend it has to either be C++, C# or LAM. To make life easy
  we can just set it as either C++ or C# for now. Ideally we want to
  retrieve a LAM model, mappable to C++ and C#. Actually that's not
  quite right as we do not have the LAM types in the frontend. For now
  lets just hack it and retrieve it either as C++ or C#. But perhaps
  the right solution is to create a "upsilon language" which is
  mappable to LAM/C++/C#. In fact we should just map against LAM, and
  deduce the mappings for all other languages from there. The "upsilon
  language" is not generatable, so it must be mapped. Which raises an
  interesting point: there are two uses of "language": the language in
  which the model is written and the language in which one wants to
  output it. Normally they are the same. However, if I supply a LAM
  model I may want to choose a language. For Dogen/JSON frontends this
  is simply a meta-data extension. For upsilon we need to piggy-back
  on the existing language infrastructure.
- registration with "composite" extensions is not working; boost path
  only returns the last extension - e.g. =.xml= instead of
  =.Configuration.xml=.
- We've created an "extension" method that returns all extensions for
  a given file name. It wasn't very useful in the end. If needed in
  the future its under =f83e9152e=.

Problems:

- we assume all languaes are "outputtable". Upsilon and LAM are
  not. Language is not even a good name for these things either.
- the pipeline assumes that we will generate only one final model; in
  the mapping world this is not the case. A user may wish to map a
  given model into n "outputtable" languages. In this case we need a
  very different workflow: read each model natively, map them to the
  outputtable language and then perform the workflow for the
  outputtable language, possibly loading a different set of system
  models.
- we have no way of telling dogen what the output language are. This
  can be done in the diagram itself for Dia and JSON but not for
  upsilon. We could add command line arguments for this.
- we have no way of describing mappings. We can use meta-data for
  Dia/JSON but not for upsilon.
- we need an end-to-end test for the upsilon model that includes the
  translation to c++/c# and code generation.

Upsilon as a language:

- originally we envisioned that upsilon would exist all the way into
  the meta-model as an intermediate model; we'd then go through
  mapping to convert it into an outputtable language. However, we have
  one slight problem: upsilon allows the user to create "string
  typedefs". This means that many primitives are user primitives (say
  a =SequenceId= could be an =int= in disguise). With the mapping
  approach, we need to create a large map, model specific, with all of
  these primitives. This could be done with the help of scripting
  (primitives have an intrinsic type that can be mapped to a language
  type). Alternatively, we could hard-code the mapping such that
  =yarn.upsilon= would generate a model in an outputtable
  language. This is easier but not reusable for LAM.
- actually we could even use tailor to generate the mapping files,
  given that the upsilon information already has all of the required
  information.

Tasks:

- add new "upsilon" language which is not generatable; entire yarn
  workflow should work for upsilon, but then quilt just does nothing.
- add tailor support so that we can convert upsilon to JSON.

Other problems:

- relative/absolute config paths
- intrinsics all in lower case
- comments at the top of XML
- all types are coming under the main schema rather than the
  referenced schemas.
- referencing all system types even for other languages.
- logging: add field etc names, move to trace
- how do we determine the target model?

*** COMPLETED Fields with collections in upsilon cause errors         :story:
    CLOSED: [2017-01-18 Wed 11:59]
    CLOCK: [2017-01-18 Wed 10:39]--[2017-01-18 Wed 11:59] =>  1:20

It seems that when we refer to a collection on the target model,
resolution fails.

*** COMPLETED Bind language to kernel                                 :story:
    CLOSED: [2017-01-18 Wed 14:36]
    CLOCK: [2017-01-18 Wed 12:38]--[2017-01-18 Wed 13:50] =>  1:12
    CLOCK: [2017-01-17 Tue 20:55]--[2017-01-17 Tue 21:12] =>  0:17

At present we have the notion of a language at the frontend level but
this is not really used when determining available kernels. So we
simply go through all of the enabled kernels and generate them
all. This is not ideal; we could instead determine what languages the
kernel supports and only generate if its a supported language. This
would stop us code-generating a C# model in C++ and vice-versa.

*** COMPLETED Upsilon can have collections of collections             :story:
    CLOSED: [2017-01-18 Wed 15:56]
    CLOCK: [2017-01-18 Wed 14:54]--[2017-01-18 Wed 15:55] =>  1:01

Our current translation of Upsilon collections assumes they are always
containers of compounds. In practice, collections of collections have
been spotted in the wild and they break because we do not follow the
collection scrubbing into the type name.

While fixing this bug we hit a disk space issue on the debian box
which resulted in delays.

*** COMPLETED Upsilon test borked due to no output                    :story:
    CLOSED: [2017-01-18 Wed 21:01]
    CLOCK: [2017-01-18 Wed 20:40]--[2017-01-18 Wed 21:01] =>  0:21

Seems like we borked the upsilon test when we introduced the "no
output" change whereby we don't output if the model's language does
not match the kernel's.

: 2017-01-18 20:54:38.534005 [INFO] [knit.housekeeper] initial configuration: ignore patterns: [  ] managed directories: [ "/home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/../test_data/TestModel/actual.upsilon/Zeta", "/home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/../test_data/TestModel/actual.upsilon/Zeta" ]
: 2017-01-18 20:54:38.534027 [ERROR] [utility.filesystem.file] Could not find directory: /home/marco/Development/DomainDrivenConsulting/dogen/build/output/gcc/Release/stage/bin/../test_data/TestModel/actual.upsilon/Zeta

*** STARTED Add multi-language support                                :story:
    CLOCK: [2017-01-23 Mon 10:39]--[2017-01-23 Mon 11:03] =>  0:24
    CLOCK: [2017-01-23 Mon 09:12]--[2017-01-23 Mon 10:38] =>  1:26
    CLOCK: [2017-01-22 Sun 14:31]--[2017-01-22 Sun 15:23] =>  0:52
    CLOCK: [2017-01-21 Sat 11:32]--[2017-01-21 Sat 12:55] =>  1:23
    CLOCK: [2017-01-21 Sat 09:47]--[2017-01-21 Sat 10:04] =>  0:17
    CLOCK: [2017-01-21 Sat 08:15]--[2017-01-21 Sat 09:46] =>  1:31
    CLOCK: [2017-01-18 Wed 23:24]--[2017-01-18 Wed 23:35] =>  0:11
    CLOCK: [2017-01-18 Wed 22:54]--[2017-01-18 Wed 23:23] =>  0:29
    CLOCK: [2017-01-18 Wed 22:41]--[2017-01-18 Wed 22:53] =>  0:12
    CLOCK: [2017-01-18 Wed 22:26]--[2017-01-18 Wed 22:40] =>  0:14
    CLOCK: [2017-01-18 Wed 22:20]--[2017-01-18 Wed 22:25] =>  0:05
    CLOCK: [2017-01-18 Wed 21:22]--[2017-01-18 Wed 22:19] =>  0:57
    CLOCK: [2017-01-18 Wed 21:04]--[2017-01-18 Wed 21:21] =>  0:17
    CLOCK: [2017-01-18 Wed 19:01]--[2017-01-18 Wed 19:49] =>  0:48
    CLOCK: [2017-01-18 Wed 17:15]--[2017-01-18 Wed 17:39] =>  0:24
    CLOCK: [2017-01-18 Wed 16:14]--[2017-01-18 Wed 17:14] =>  1:00
    CLOCK: [2017-01-18 Wed 15:56]--[2017-01-18 Wed 16:13] =>  0:17
    CLOCK: [2017-01-18 Wed 14:29]--[2017-01-18 Wed 14:53] =>  0:24
    CLOCK: [2017-01-18 Wed 13:58]--[2017-01-18 Wed 14:10] =>  0:12
    CLOCK: [2017-01-18 Wed 13:51]--[2017-01-18 Wed 13:57] =>  0:06

This story splits the mapping work into two phases: first we just add
the capability of processing (and grouping) models by language (this
story). Second we add mapping (on another story).

The objective is to change all APIs (yarn, knit) to deal with more
than one model, per language. For this we need the intermediate model
factory to return models bucketed by language and for the model
factory to process and return them by language too; finally, the main
workflow can just return a list of models.

In knit we need to process the list of models and send them to quilt
one at a time.

We should also add a list of output languages to the kernel, which for
now will always be equal to the input language. It would be nice to
keep track of all of the different states:

- input language
- requested output languages
- actual output language

Assorted Notes:

- add a list of languages to the model, populate them from upsilon.
- for other models read it from meta-data; if not populated, assume
  its the same as the input language.
- at the kernel level, check to see if the language matches the
  kernel. Each kernel has a hard-coded language.
- in yarn, once the model is merged checked its input and output
  languages. If they are different, send the model to the
  mapper. Actually we need to do this at a higher level in order to
  cater for multiple output languages.
- we could change intermediate processing as follows: create a
  map by language with target and references. Read target in, map it
  to each output language. Then read each reference and map it to each
  output language. Then for each language, read and filter all system
  models.
- we need to support "mapping to nothing". For example, the LAM will
  have to have a pointer type, which in C# maps to nothing but in C++
  can map to shared pointer, etc.
- add output language fields. If not populated assume input language.
- validator checks that the output language is valid
  (e.g. outputtable).
- upsilon maps the output languages.
- we have incompatible requirements: all types without a schema are
  assigned to the current schema; however, types such as model value
  live in the global namespace. Due to this we cannot resolve them. We
  need to map model value to something vaguely sensible in c++ or
  remove it.
- we seem to be running housekeeping twice, once per language. The
  problem is, we consider the files of "the other" language as
  unexpected (for each run we just have visibility of the files of the
  current language) so the net result is we are deleting
  everything. We need to somehow supply the language dependent path to
  the house keeper or do a single run with the combined set of files.
- we need to detect inheritance in mapper and inject shared pointers.

Tasks:

- create built-ins for all of upsilon's intrinsics. Convert all
  primitives into these intrinsics.

Merged stories:

*Process models based on language*

At present we are loading up all system models and processing them,
only to discard them at merging stage. Ideally we want to process only
if the model language matches.

*Add output languages*

At present we only support the input language associated with the
model. This has been sufficient because the input and output language
is always the same. However, with upsilon things change: we need to
generate multiple languages off of a single upsilon model. In the
future we will have the same requirement for LAM. We could:

- rename language to input language;
- add a set of output languages to model; for LAM these would be
  populated via meta-data.
- when a model comes out of intermediate, if it has an input language
  which is not outputtable, we then look at the output languages. All
  intermediate models must be of the same non-outputtable language. We
  take all of these models and supply them to the mapper, together
  with an outputtable language.

*** STARTED Add a type mapper                                         :story:
    CLOCK: [2017-01-19 Thu 17:34]--[2017-01-19 Thu 17:56] =>  0:22
    CLOCK: [2017-01-19 Thu 16:19]--[2017-01-19 Thu 17:33] =>  1:14
    CLOCK: [2017-01-19 Thu 14:37]--[2017-01-19 Thu 16:18] =>  1:41
    CLOCK: [2017-01-19 Thu 14:15]--[2017-01-19 Thu 14:36] =>  0:21
    CLOCK: [2017-01-19 Thu 11:45]--[2017-01-19 Thu 12:03] =>  0:18
    CLOCK: [2017-01-19 Thu 11:23]--[2017-01-19 Thu 11:44] =>  0:21
    CLOCK: [2017-01-19 Thu 11:03]--[2017-01-19 Thu 11:22] =>  0:19
    CLOCK: [2017-01-19 Thu 10:01]--[2017-01-19 Thu 10:40] =>  1:07
    CLOCK: [2017-01-19 Thu 08:23]--[2017-01-19 Thu 09:09] =>  0:46
    CLOCK: [2017-01-18 Wed 14:10]--[2017-01-18 Wed 14:28] =>  0:18

We need to create a class that receives a map of element id to element
id. It then goes through every mapped element reference and deletes the
element reference and replaces it with the corresponding element id.

We then need to extend the resolver to do an element id based
lookup. The only slight wrinkle in the master plan is that the current
indices are designed to return a true/false answer to the question of
"is this ID valid". In this use case we want something different:
return me the complete name for this ID.

We could make a requirement that mapped types must be resolvable
directly. This would mean that the mapper could operate on the merged
model; it could generate its own index of referrable types (but
crucially, only for those that are mapped) and replace them
directly. i.e.:

- for every mapped element, find its name in the merged model;
- for every candidate element, if its id is on the mapped list, swap
  name with replacement name.

Mapping happens straight after merging. Model factory would now take a
parameter of language, which it supplies to the mapper. We have an
additional command line argument of maps (language name +
".map.json"?). All maps are made against LAM types. The mapper must
load all maps and cross-reference them so that we can resolve any
language to any language going via LAM. Two-way look-up? First from
language to LAM them from LAM to language. If already in LAM then only
one look-up is required. Mapping must also include removal. Actually
this requirement is only needed for ModelValue; upsilon could filter
out any extends of this type, greatly simplifying the mapping logic.

*** In JSON hydrator rename simple name to simple                     :story:

We are still using =simple_name=. Make this consistent with the yarn
terminology.

*** Load system models based on language prefix                       :story:

We used a convention for system models that have the language as a
prefix:

: cpp.boost.json
: cpp.builtins.json
: cpp.std.json
: csharp.builtins.json
: csharp.system.collections.generic.json
: csharp.system.collections.json
: upsilon.builtins.json

Coincidentally, this could make life easier when it comes to filtering
models by language: we could pattern match the file name depending on
the language and only load those who match. The convention would then
become a rule for system models. With this we would not have to load
the models, process annotations, etc just to get access to the
language.

*** Backslashes in strings cause JSON parsing to failed               :story:

When trying to JQ an upsilon model, JQ failed with an error due to the
use of un-escaped backslashes. We need to add this to the tidy-up
string list.

*** Add support for ignoring types                                    :story:

#+begin_quote
*Story*: As a dogen user, I want to ignore certain types I am working
on so that I can evolve my diagram over time, whilst still being able
to commit it.
#+end_quote

Sometimes when changing a diagram it may be useful to set some types
to "ignore", i.e. make dogen pretend they don't exist at all. For
instance one may want to introduce new types one at a time. It would
be nice to have a dynamic extension flag for ignoring.

We should probably have some kind of warning to ensure users are aware
of the types being ignored.

*** Add auxiliary function properties to c#                           :story:

We need to associate a function with an attribute and a
formatter. This could be the helper or the assistant (or nothing).

Actually this is not quite so straightforward. In =io= (c#) we have:

: assistant.Add("ByteProperty", value.ByteProperty, true/*withSeparator*/);

This is a bit of a problem because we now need to different
invocations, one for helper another for the assistant, which differ on
the function prototype. For the helper we need something like:

: Add(assistant, "ByteProperty", value.ByteProperty, true/*withSeparator*/);

So a string is no longer sufficient. Maybe we could have a struct with
auxiliary function properties:

- auxiliary function types = enum with { assistant, helper }
- auxiliary function name = string

So we can have a map of attribute id to map of formatter id to
auxiliary function properties.

Actually we should also create "attribute properties" as a top-level
container so that in the future we can latch on other attribute level
properties.

*** Add internal object dumper resolution                             :story:

We should try to resolve an object to a local dumper, if one exists;
for all model types and primitives. Add a registrar for local dumpers.

: using System;
: using System.Collections.Generic;
:
: namespace Dogen.TestModels.CSharpModel
: {
:     static public class DynamicDumperRegistrar
:     {
:         public interface IDynamicDumper
:         {
:             void Dump(AssistantDumper assistant, object value);
:         }
:
:         static private IDictionary<Type, IDynamicDumper> _dumpers = new Dictionary<Type, IDynamicDumper>();
:
:         static void RegisterDumper(Type type, IDynamicDumper dumper)
:         {
:         }
:     }
: }

*** Add support for generic container types to C#                     :story:

We should add all major container types and tests for them.

: IEnumerable<T>
: ICollection<T>
: IList<T>
: IDictionary<K, V>
: List<T>
: ConcurrentQueue<T>, ConcurrentStack<T>, LinkedList<T>
: Dictionary<TKey, TValue>
: SortedList<TKey, TValue>
: ConcurrentDictionary<TKey, TValue>
: KeyedCollection<TKey, TItem>

Notes:

- we need a way to determine if we are using a helper, the assistant
  or a sequence generator directly.

*** Add support for Language Agnostic Models (LAM)                    :story:

When we start supporting more than one language, one interesting
feature would be to be able to define a model once and have it
generated for all supported languages. This would be achieved by
having a system model (or set of system models) that define all the
key types in a language agnostic manner. For example:

: lam::string
: lam::int
: lam::int16

Each of these types then has a set of meta-data fields that map them
to a type in a supported language:

: lam:string: cpp.concrete_type_mapping = std::string
: lam:string: csharp.concrete_type_mapping = string

And so on. We load the user model that makes use of LAM, we generate
the merged model still with LAM types and then we perform a
translation for each of the supported and enabled languages: for every
LAM type, we replace all its references with the corresponding
concrete type. We need to split the supplied mapping into a QName, use
the QName to load the system models for that language, look up the
type and replace it. After the translation no LAM types are left. We
end up with N yarn merged models where N is the number of supported and
enabled languages.

Each of these models is then sent down to code generation. This should
be equivalent to manually generating models per language - we could
use this as a test.

Once we have LAM, it would be great to be able to exchange data
between languages. This could be done as follows:

- XML: create a "LAM" XML schema, and a set of formatters that read
  and write from it. This is kind of like reverse mapping the types
  back to LAM types when writing the XML.
- JSON: similar approach to XML, minus the schema.
- POF: use the coherence libraries to dump the models into POF.

Tasks:

- create the LAM model with a set of basic types.
- add a set of mapping fields into yarn: =yarn.mapping.csharp=, etc
  and populate the types with entries for each supported language.
- create a notion of mapping of intermediate models into
  languages. The input is the merged intermediate model and the output
  is N models one per language. We also need a way to associate
  backends with languages. Each model is sent down to its backend.
- note that reverse mapping is possible: we should be able to
  associate a type on a given language with it's lam type. This means
  that, given a model in say C#, we could reconstruct a yarn lam model
  (or tell the user about the list of failures to map). This should be
  logged as a separate story.

Links:

- [[http://stackoverflow.com/questions/741054/mapping-between-stl-c-and-c-sharp-containers][Mapping between stl C++ and C# containers]]
- [[http://stackoverflow.com/questions/3659044/comparison-of-c-stl-collections-and-c-sharp-collections][Comparison of C++ STL collections and C# collections?]]

*** Fix issues with bintray windows uploads                           :story:

At present we are doing a lot of hacks for windows:

- hardcoding the path to the package
- not uploading on just tags
- uploading to the top-level folder instead of the version.

Ideally we want to reuse the Travis BinTray descriptor but AppVeyor
does not support this directly.

*** Model references are not transitive                               :story:

For some reason we do not seem to be following references of
referenced models. We should load them automatically, now that they
are part of the meta-data. However, the =yarn.json= model breaks when
we remove the reference to annotation even though it does not use this
model directly and =yarn= is referencing it correctly.

*** Add support for boxed types                                       :story:

At present we support built-in types such as =int= but not
=System.Integer=. In theory we should be able to add these types with:

:        "quilt.csharp.assistant.requires_assistance": true,
:        "quilt.csharp.assistant.method_postfix": "ShortByte"

And they should behave just like built-ins.

*** Add handcrafted class to C# test model                            :story:

We should make sure handcrafted code works in C#.

Actually in order to get handcrafted types to work we need support for
enablement. This is a somewhat tricky feature so we should leave it
for after all the main ones are done.

*** Add support for arrays                                            :story:

At present the yarn parser does not support array notation:
=string[]=. We need to look into how arrays would work for C++ and
implement it in a compatible way.

Links:

- [[https://www.dotnetperls.com/array][array]]

*** Add fluency support for C#                                        :story:

We need to add fluent support for C#.

C# properties are not compatible with the fluent pattern. Instead, one
needs to create builders, across the inheritance tree.

Links:

- [[http://stackoverflow.com/questions/13761666/how-to-use-fluent-style-syntactic-sugar-with-c-sharp-property-declaration][How to use Fluent style syntactic sugar with c# property declaration]]

*** Add visitor support to C#                                         :story:

Implement the visitor formatters for C#.

*** Benchmarks do not work for utility tests                          :story:

When we run the benchmarks for utility we get an error:

: Running 95 test cases...
: /home/marco/Development/DomainDrivenConsulting/dogen/projects/utility/tests/asserter_tests.cpp(141): error: in "asserter_tests/assert_directory_good_data_set_returns_true": check asserter::assert_directory(e, a) has failed

Seems like the tests do not clean up after themselves. We need to add
some clean up logic and re-enable the tests.

*** Add cross-model support to C#                                     :story:

At present we do not have any tests that prove that cross-model
support is working (other than proxy models). We need to create a user
level model that makes use of types from another model. In theory it
should just work since we are using fully qualified names everywhere.

*** Generate AssemblyInfo in C#                                       :story:

We need to inject a type for this in fabric. For now we can leave it
mainly blank but in the future we need to have meta-data in yarn for
all of its properties:

: [assembly: AssemblyTitle ("TestDogen")]
: [assembly: AssemblyDescription ("")]
: [assembly: AssemblyConfiguration ("")]
: [assembly: AssemblyCompany ("")]
: [assembly: AssemblyProduct ("")]
: [assembly: AssemblyCopyright ("marco")]
: [assembly: AssemblyTrademark ("")]
: [assembly: AssemblyCulture ("")]
: [assembly: AssemblyVersion ("1.0.*")]

These appear to just be properties at the model level.

*** Consider adding a clone method for C#                             :story:

It would be nice to have a way to clone a object graph. We probably
have an equivalent story for this for C++ in the backlog.

*** Consider making the output directory configurable in C#           :story:

At present we are outputting binaries into the =bin= directory,
locally on the project directory. However, it would make more sense to
output to =build/output= like C++ does. For this to work, we need to
be able to supply an output directory as meta-data.

*** Add support for nuget                                             :story:

A proxy model may require obtaining a nuget package. Users should be
able to define a proxy model as requiring a nuget package and then
Dogen should generate packages.config and add all such models to it.

: +  <package id="NUnit" version="2.6.4" targetFramework="net45" />

*** Augment element ID with meta-model type                           :story:

The element ID is considered to be a system-level, opaque
identifier. It could, for all intents and purposes, be a large int. We
have decided to use a string so we can dump it to the log and figure
out what is going on without having to map IDs to a human-readable
value. In the same vein, we could also add another component to the ID
that would contain the meta-model element for that ID. This
information could be placed at the start.

Of course, we will not be able to remove the look-ups we have at
present that try to figure out the meta-model element because they are
related to resolution. But for any other cases it may result in
slightly more performant code. We need to look at all the use cases.

*** Identifiable needs to use camel case in C#                        :story:

At present we are building identifiables with underscores.

*** Generate windows packages with CPack                              :story:

We tried to generate windows packages by using the NSIS tool, but
there are no binaries available for it at present. However, it seems
CPack can now generate MSIs directly:

- [[http://stackoverflow.com/questions/18437356/how-to-generate-msi-installer-with-cmake][How to generate .msi installer with cmake?]]
- [[https://cmake.org/cmake/help/v3.0/module/CPackWIX.html][CPackWIX]]

We need to investigate how to get the build to produce MSIs using WIX.

*** Move enablement into quilt                                        :story:

We need to make use of the exact same logic as implemented in
=quilt.cpp= for enablement. Perhaps all of the enablement related
functionality can be lifted and grafted onto quilt without any major
changes.

*** Add feature to disable regions                                    :story:

We need a way to stop outputting regions if the user does not want
them.

*** Add parameters for using imported assemblies                      :story:

Assemblies imported via proxy models need to have the ability to
supply two parameters:

- assembly name: this is not always the same as the proxy model name;
- root namespace: similarly this may differ from the proxy model name.

These should be supplied as meta data and used when constructing
fabric types.

*** Add msbuild target for C# test model                              :story:

Once we are generating solutions, we should detect msbuild (or xbuild)
and build the solution. This should be a CMake target that runs on
Travis.

*** Add visibility to yarn elements                                   :story:

We need to be able to mark yarn types as:

- public
- internal

This can then be used by C++ as well for visibility etc.

*** Add partial element support to yarn                               :story:

We need to be able to mark yarn elements as "partial". It is then up
to programming languages to map this to a language feature. At present
only [[https://msdn.microsoft.com/en-us/library/wa80x488.aspx][C# would do so]].

It would be nice to have a more meaningful name at yarn
level. However, seems like this is a fairly general programming
concept now: [[https://en.wikipedia.org/wiki/Class_(computer_programming)#Partial][wikipedia]].

*** Add visibility to yarn attributes                                 :story:

We need to be able to mark yarn attributes as:

- public
- private
- protected

*** Add final support in C#                                           :story:

Links:

- [[https://msdn.microsoft.com/en-us/library/88c54tsw.aspx][sealed (C# Reference)]]

*** Add aspects for C# serialisation support                          :story:

We need to add serialisation support:

- C# serialisation
- Data Contract serialisation
- Json serialisation

In C# these are done via attributes so we do not need additional
facets. We will need a lot of configuration knobs though:

- ability to switch a serialisation method on at model level or
  element level.
- support for serialisation specific arguments such as parameters for
  Json.Net.

Links:

- [[https://msdn.microsoft.com/en-us/library/ms731923(v%3Dvs.110).aspx][Types Supported by the Data Contract Serializer]]
- [[https://msdn.microsoft.com/en-us/library/ms731073(v%3Dvs.110).aspx][Serialization and Deserialization]]
- [[https://msdn.microsoft.com/en-us/library/ms733127(v%3Dvs.110).aspx][Using Data Contracts]]
- [[https://msdn.microsoft.com/en-us/library/ms731923(v%3Dvs.110).aspx][Types Supported by the Data Contract Serializer]]

*** Consider adding =artefact_set= to formatters' model               :story:

We are using collections of artefacts quite a bit, and it makes sense
to create an abstraction for it such as a =artefact_set=. However, for
this to work properly we need to add at least one basic behaviour: the
ability to merge two artefact sets. Or else we will end up having to
unpack the artefacts, then merging them, then creating a new artefact
set.

Problem is, we either create the artefact set as a non-generatable
type - not ideal - or we create it as generatable and need to add this
as a free function. We need to wait until dogen has support for
merging code generation.

** Deprecated
