#+title: Sprint Backlog 67
#+options: date:nil toc:nil author:nil num:nil
#+todo: STARTED | COMPLETED CANCELLED POSTPONED
#+tags: { story(s) spike(p) }

* Mission Statement

- Implement needle and update all legacy formatters to use it.
- Implement as many formatters as possible using the new cpp
  architecture.

* Stories

** Active

#+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
#+CAPTION: Clock summary at [2015-06-01 Mon 17:54]
| <75>                                                                        |         |       |       |
| Headline                                                                    | Time    |       |       |
|-----------------------------------------------------------------------------+---------+-------+-------|
| *Total time*                                                                | *30:24* |       |       |
|-----------------------------------------------------------------------------+---------+-------+-------|
| Stories                                                                     | 30:24   |       |       |
| Active                                                                      |         | 30:24 |       |
| STARTED Sprint and product backlog grooming                                 |         |       |  1:12 |
| COMPLETED Move to emacs prelude                                             |         |       | 20:46 |
| POSTPONED Consider creating an Emacs mode for stitch                        |         |       |  0:56 |
| POSTPONED Consider using a proper JSON library                              |         |       |  0:47 |
| POSTPONED Create a blog post on biicode                                     |         |       |  1:10 |
| CANCELLED Update legacy formatters to use needle for io                     |         |       |  2:40 |
| COMPLETED Remove needle and RapidJson from repo                             |         |       |  0:10 |
| STARTED Implement io helper method generator                                |         |       |  2:43 |
#+end:

*** STARTED Sprint and product backlog grooming                       :story:
    CLOCK: [2015-06-01 Mon 14:52]--[2015-06-01 Mon 15:08] =>  0:16
    CLOCK: [2015-06-01 Mon 14:19]--[2015-06-01 Mon 14:38] =>  0:19
    CLOCK: [2015-05-25 Mon 08:50]--[2015-05-25 Mon 09:27] =>  0:37

Updates to sprint and product backlog.

*** STARTED Updates to the manual and readme files                    :story:

Use downtime to update the manual and / or readme file.

*** COMPLETED Move to emacs prelude                                   :spike:
    CLOSED: [2015-05-27 Wed 00:20]
    CLOCK: [2015-05-27 Wed 15:00]--[2015-05-27 Wed 16:27] =>  1:27
    CLOCK: [2015-05-26 Tue 23:42]--[2015-05-27 Wed 00:20] =>  0:38
    CLOCK: [2015-05-26 Tue 22:54]--[2015-05-26 Tue 23:42] =>  0:48
    CLOCK: [2015-05-26 Tue 22:07]--[2015-05-26 Tue 22:54] =>  0:47
    CLOCK: [2015-05-26 Tue 19:30]--[2015-05-26 Tue 22:06] =>  2:36
    CLOCK: [2015-05-26 Tue 17:10]--[2015-05-26 Tue 18:50] =>  1:40
    CLOCK: [2015-05-25 Mon 21:40]--[2015-05-25 Mon 22:50] =>  1:10
    CLOCK: [2015-05-25 Mon 16:30]--[2015-05-25 Mon 19:20] =>  2:50
    CLOCK: [2015-05-25 Mon 15:12]--[2015-05-25 Mon 16:04] =>  0:52
    CLOCK: [2015-05-25 Mon 10:26]--[2015-05-25 Mon 14:41] =>  4:15
    CLOCK: [2015-05-25 Mon 09:45]--[2015-05-25 Mon 10:22] =>  0:37
    CLOCK: [2015-05-25 Mon 09:28]--[2015-05-25 Mon 09:39] =>  0:11
    CLOCK: [2015-05-24 Sun 22:10]--[2015-05-25 Mon 01:05] =>  2:55

We are having a number of problems related to emacs 23 and cunene
which can be solved by moving to a more modern setup. Implement cunene
in terms of prelude.

Problems:

- arrow keys are conflicting
- org mode does not automatically set column lengths any more, and has
  added some strange latex indentation.
- no auto fill mode in org

*** POSTPONED Consider creating an Emacs mode for stitch              :story:
    CLOSED: [2015-06-01 Mon 14:26]
    CLOCK: [2015-05-27 Wed 17:05]--[2015-05-27 Wed 18:01] =>  0:56

*Rationale*: this is not in keeping with the sprint's mission so we
need to backlog it.

*Original Story*

It would be nice to have syntax highlighting for stitch templates. We
have a [[https://github.com/mcraveiro/cunene/blob/master/lisp/other/utils/t4-mode.el][mumamo-based version]] in cunene - originally done for t4 - but
which is rather unusable.
*** POSTPONED Consider using a proper JSON library                    :story:
    CLOSED: [2015-06-01 Mon 14:24]
    CLOCK: [2015-05-31 Sun 15:20]--[2015-05-31 Sun 16:07] =>  0:47

*Rationale*: RapidJson was not a solution for the problem at hand (the
needle approach for io), so we need to backlog this story.

*Original Story*

We could use a full-blow JSON parser rather than the property tree
one. One option is [[https://github.com/cierelabs/json_spirit][json_spirit]].

Another option is [[https://github.com/miloyip/rapidjson][RapidJson]].

Actually there is a project comparing JSON libraries:

[[https://github.com/miloyip/nativejson-benchmark][nativejson-benchmark]]

One interesting library is [[https://github.com/dropbox/json11][Json11]].

*** POSTPONED Create a blog post on biicode                           :story:
    CLOSED: [2015-06-01 Mon 14:30]
    CLOCK: [2015-05-31 Sun 14:10]--[2015-05-31 Sun 15:20] =>  1:10

*Rationale*: RapidJson was not a solution for the problem at hand (the
needle approach for io); since this story was a consequence of using
RapidJson, we need to backlog it.

Investigate adding biicode support since we need to add a RapidJson
dependency. Create a blog post about it.

*** CANCELLED Update legacy formatters to use needle for io           :story:
    CLOSED: [2015-06-01 Mon 14:26]
    CLOCK: [2015-06-01 Mon 14:00]--[2015-06-01 Mon 14:18] =>  0:18
    CLOCK: [2015-05-31 Sun 16:50]--[2015-05-31 Sun 18:23] =>  1:33
    CLOCK: [2015-05-31 Sun 16:08]--[2015-05-31 Sun 16:13] =>  0:05
    CLOCK: [2015-05-28 Thu 07:36]--[2015-05-28 Thu 08:20] =>  0:44

*Rationale*: after a lot experimentation, it seems that doing this
from needle is not entirely trivial. Instead, we need to take the path
of least resistance which is to re-implement the legacy approach in a
way that is compatible with stitch templates.

*Original Story*

- add some hack to includer to pick up these header files.
- remove io helpers from transformer and regenerate all models.

This is actually quite a complicated thing we are trying to do
here. The problem has to do with partial ordering of the template
specialisations. It is very difficult (if not impossible) to order the
specialisations correctly. We need to figure out a simpler of doing
this.

More thoughts:

- the basic problem is that we tried to use a template function to
  dispatch to the appropriate JSON formatting. The problem with this
  is that we then enter the world of [[https://msdn.microsoft.com/en-us/library/zaycz069.aspx][partial ordering]], which means
  that depending on the order in which functions are declared, we may
  get different results. And since we declared the most general
  function in the jsonify header, it was never going to work.
- however, even placing it in a special header that is always last is
  not sufficient; not quite sure why that is, but we still seem to
  pick the wrong function in certain cases. Basically, relying on
  ordering is very brittle and will result in hard-to-debug
  problems. In addition, we don't really want to have complex rules of
  ordering the includes because then we need to provide a way to
  express those rules in the meta-data, adding a whole load of
  complexity across the dogen stack for very little gain.
- an alternative to this problem is to rely on overloading without
  templates, a la =operator<<=. We don't actually need to make
  =jsonify= a generic function; all we need is for the JSON formatting
  types to be generic. We can then define a large number of
  (non-generic) overloads that return instantiations of the JSON
  formatting types. Overloading rules are a lot more amenable to
  reasoning than partial ordering.
- however, the problem with this is that we then need to always
  declare a jsonify function for every time, just like with
  =operator<<=. And it must be placed in the same namespace as the
  type itself - or perhaps we could move jsonify to detail.
- actually we are trying to do two things at the same time:
  =operator<<= and json serialisation. For this to work properly we
  need to split out json serialisation. We need to look into
  implementing stand alone JSON.
- the split of JSON from =operator<<= is not necessarily a solution to
  this problem. The most important thing is to move to [[http://en.wikipedia.org/wiki/Argument-dependent_name_lookup][ADL]] rather than
  partial ordering.
- an ADL implementation still suffers from this problem; we are not
  able to get =std::pair= in a container to work. We need to find a
  solution to port across the helper functions for now.

*** COMPLETED Remove needle and RapidJson from repo                   :story:
    CLOSED: [2015-06-01 Mon 14:48]
    CLOCK: [2015-06-01 Mon 14:38]--[2015-06-01 Mon 14:48] =>  0:10

Since we did not managed to get this working, we should just remove
all of the experiments we performed:

- remove needle project
- remove third party stuff for RapidJson
- add links to these commits to the stories in the backlog

*** STARTED Implement class implementation formatter using stitch     :story:

We need to implement a stitch template for the class
implementation formatter in types, plug it in and start working
through the diffs.

Problems:

- includes will fail on stream manipulators. This is because we need
  to check if we require them when generating dependencies, but we
  have to do so manually since the class info doesn't exist yet. We
  need to hack this for now - once we have "field gathering" support
  this will be easier.
- we need family back for tidy-up string. or perhaps we should have a
  "requires tidying" property and then needle can provide adequate
  overloads.
- we can't implement this without needle support.

*** STARTED Implement io helper method generator                      :story:
    CLOCK: [2015-06-01 Mon 15:10]--[2015-06-01 Mon 17:53] =>  2:43

We need to find a way to copy across the io method generation code
from legacy into a stitch world. The simplest approach is just to
extend the assistant; the template then just calls the assistant after
the includes but before the namespaces. We may need some kind of
lambda parameter to be passed in to boilerplate to support this.

Notes:

- we need access to family information in order to do this
  (e.g. sequence container, etc) or we can bring across the
  transformer hacks too.
- We need two methods: a generator for the helpers at the top and a
  generator for the streaming. Or we could implement the inserter
  method itself in stitch.
- actually, we could conceivably have a stitch template for each
  helper method; and to have these templates "linked" in some kind of
  fashion to one or more types (this was the role performed by
  family"); and then to have the "recursor" take a container of linked
  stitch templates and then apply them as the types match. For this we
  would need a lot of machinery to manage the associations between
  types and templates. But for now we could manage this association
  manually by calling the right template at the right time. As luck
  would have it we are already ignoring all stitch related files so we
  just need to manually generate the templates and hook them together
  with a "helper method formatter" in each facet. We can then pass in
  a parameter to the assistant to generate the appropriate helpers
  when setting up bootstrap (or even pass in an instance of the
  helper).
- we could go one step further: create a single helper method
  formatter which has a "mapping table" of functions, which are just
  calls to stitch templates. They may be supplied or not. Each facet
  has a factory for this helper that supplies its own templates. We
  call the factory when invoking the boilerplate formatter. The
  problem is our helpers are full of hackery and we did not model
  these types properly so taking an approach like this one will
  probably mean we will get stuck at some point with some fundamental
  problem. The quick and dirty approach will work because its not that
  different from the existing approach, just re-implemented for
  stitch.
- we called the class "helper method formatter" but it generates
  multiple methods. It should be "helper methods formatter".

*** Container details in JSON dump                                    :story:

#+begin_quote
*Story*: As a dogen user, I would like to know how many elements
containers have so that I don't have to count it manually.
#+end_quote

It would be nice to have the container type and size in the JSON
output.

At present we are not treating shared pointers as objects:

:         s << "\"shared_ptr\": \"empty shared pointer\"";

We need to start outputting them as JSON objects, just like we do for
containers, with a name for the "pointee".

*** Header guard in formatters should be optional                     :story:

At present we are relying on empty header guards to determine what to
do in boilerplate. We should use boost optional.

*** Do not include algorithm if swap is disabled                      :story:

At present we always include =algorithm= in types' class header - both
in new and old world. However, it is there for swap, so we should only
include it if we are going to generate swap. This could be achieved
with:

: if ((!c.all_properties().empty() || c.is_parent()) && !c.is_immutable()) {

As per stitch template.

*** Create more "utility" members in class info                       :story:

One way of making the templates a bit more manageable is to avoid
having really complex conditions. We could simplify these by giving
them intelligible names and making them properties of the
formattables - mainly class info as that's where the complexity seems
to stem from. For example:

: if ((!c.all_properties().empty() || c.is_parent()) && !c.is_immutable()) {

could be replaced with =has_swap=, or perhaps even =has_public_swap= /
=has_protected_swap=.

*** Add support for "field gathering"                                 :story:

We need to add support in dynamic and SML for the "gathering" of
fields; this consists in marking a field as "gatherable" in the
JSON. We then need to find all types that have that field and gather
their qnames in the model.

Note: we do not need to handle inclusion_required this way; it already
works well so leave it as is.

Tasks:

- find a good name for gathering and gatherable.
- add support in dynamic for marking fields as gatherable. Add a
  method in field definition repository that returns a list of all
  gatherable fields.
- mark all required fields as gatherable.
- add a container of string (qualified field name) to qname in model,
  with a suggestive name (qnames by dynamic field? gathered qnames?).
- create an SML class to process all gathered fields: obtain fields
  that are gatherable, then loop through the model; for all types that
  have gatherable fields, add them to container against the field.
- implement transformer in terms of gathered fields (i.e. consult the
  container for requires_stream_manipulators, etc).

*** Create the opaque settings activity                               :story:

We need to add support for opaque settings. This should be as easy as
adding a method in the formatter to register/return the opaque
settings factory and then supplying the settings workflow with all of
these factories.

*** Consider splitting =formattables::transformer=                    :story:

We have two different responsibilities within transformer:

- to perform an individual (1-1) transformation of an SML type into a
  formatable;
- to determine how many transformations of an SML type are required,
  and to do them.

Maybe we should have a transformer sub-workflow that collaborates with
specific transformers, aligned to =cpp= types
(e.g. =class_info_transformer=, =enum_info_transformer= and so on,
each taking different SML types). The role of the top-level
transformer is to call all of the sub-transformers for a given SML
type.

The other option is to align them to SML types and to produce
different =cpp= types.

*** Remove intermediate fields from dynamic                           :story:

With the previous approach we had fields in dynamic that were
generated within dogen; we now should only have fields that are set
from the outside world. Remove all of the fields that are not supposed
to be settable from the outside world. At present this just file path.

*** Stitch gcc release builds are borked                              :spike:

When running stitch for a gcc release build we get:

: FAILED: cd /home/marco/Development/DomainDrivenConsulting/output/dogen/gcc-4.9 && /home/marco/Development/DomainDrivenConsulting/output/dogen/gcc-4.9/stage/bin/dogen_stitcher --target /home/marco/Development/DomainDrivenConsulting/dogen/projects/cpp/src/ --verbose

Debug builds work. All builds work for clang. According to gdb:

: #0  0x00000000004cb36e in std::_Hashtable<std::string, std::pair<std::string const, dogen::dynamic::schema::field_definition>, std::allocator<std::pair<std::string const, dogen::dynamic::schema::field_definition> >, std::__detail::_Select1st, std::equal_to<std::string>, std::hash<std::string>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(std::string const&) const ()
: #1  0x00000000004c96bd in dogen::dynamic::schema::workflow::obtain_field_definition(std::string const&) const ()
: #2  0x00000000004ca24b in dogen::dynamic::schema::workflow::create_fields_activity(std::unordered_map<std::string, std::list<std::string, std::allocator<std::string> >, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::list<std::string, std::allocator<std::string> > > > > const&, dogen::dynamic::schema::scope_types) const ()

*** Add support for the relationships graph in enabler                :story:

*Note*: this story needs refactoring. It is basically here to cover
the support for a graph with cycles in enabler but has not yet been
updated.

This needs a bit more analysis. The gist of it is that not all types
support all formatters. We need a way to determine if a formatter is
not supported. This probably should be inferred by a "is dogen model"
property (see backlog); e.g. non-dogen models need their types to have
an inclusion setup in order to be "supported", otherwise they should
default to "not-supported". However the "supported" flag is populated,
we then need to take into account relationships and propagate this
flag across the model such that, if a type =A= in a dogen model has a
property of a type =B= from a non-dogen model which does not support a
given formatter =f=, then =A= must also not support =f=.

In order to implement this feature we need to:

- update the SML grapher to take into account relationships
  (properties that the class has) as well as inheritance.
- we must only visit related types if we ourselves do not have values
  for all supported fields.
- we also need a visitor that detects cycles; when a cycle is found we
  simply assume that the status of the revisited class is true (or
  whatever the default value of "supported" is) and we write a warning
  to the log file. We should output the complete path of the cycle.
- users can override this by setting supported for all formatters
  where there are cycles.
- we could perhaps have a bitmask by qname; we could start by
  generating all bitmasks for all qnames and setting them to default
  value. We could then find all qnames that have supported set to
  false and update the corresponding bitmasks. Then we could use the
  graph to loop through the qnames and "and" the bitmasks of each
  qname with the bitmasks of their related qnames. The position of
  each field is allocated by the algorithm (e.g. the first "supported"
  field is at position 0 and so on). Actually the first position of
  the bitmask could be used to indicate if the bitmask has already
  been processed or not. In the presence of a cycle force it to true.
- we need a class that takes the SML model and computes the supported
  bitmasks for each qname; the supported expander then simply takes
  this (perhaps as part of the expansion context), looks up for the
  current qname and uses the field list to set the flags
  appropriately.
- we should remove all traces of supported from a settings
  perspective; supported and multi-level enabled are just artefacts of
  the meta-data. From a settings perspective, there is just a
  formatter level (common formatter settings) enabled which determines
  whether the formatter is on or off. How that flag came to be
  computed is not relevant outside the expansion process. This also
  means we can have simpler or more complex policies as time allows us
  improve on this story; provided we can at least set all flags to
  enabled we can move forward.

Solution for cycles:

- detect the cycle and then remember the pair (a, b) where b is the
  start of the cycle and a is the last vertex before the cycle. We
  should assume that a is (true, true) for the edge (a, b) and compute
  all other edges. Finally, once the graph has been processed we
  should check all of the pairs in a cycle; for these we should simply
  look at the values of b, and update a accordingly.

*Other notes*

- we need some validation to ensure that some types will be generated
  at all. The existing "generatable types" logic will have to be
  removed or perhaps updated; we should take the opportunity to make
  it reflect whether a type belongs to the target model or not. This
  has no bearing on generatability (other that non-target types are
  always not generated). So at the middle-end level we need to check
  if there are any target types at all, and if not, just want the user
  and exit. Then, a second layer is required at the model group /
  language level to determine if there are any types to generate. It
  is entirely possible that we end up not generating anything at all
  because once we went through the graph everything got
  disabled. Users will have to somehow debug this when things go
  wrong.
- following on from this, we probably need a "dump info" option that
  explains the enabled/supported decisions for a given model, for all
  target types; possibly, users could then supply regexes to filter
  this info (e.g. why did you not generate =hash= for type =xyz=? can
  I see all types for formatter =abc=?). It may be useful to have an
  option to toggle between "target only types" and "all types",
  because the system types may be the ones causing the problem.
- the enabled supported logic applies to all formatters across all
  model groups. We need a way

*** Formatters need different =enabled= defaults                      :story:

We should be able to disable some formatters such as forward
declarations. Some users may not require them. We can do this using
dynamic extensions. We can either implement it in the backend or make
all the formatters return an =std::optional<dogen::formatters::file>=
and internally look for a =enabled= trait.

We need to be able to distinguish "optional" formatters - those that
can be disabled - and "mandatory" formatters - those that cannot. If a
user requests the disabling of a mandatory formatter, we must
throw. This must be handled in enabler.

This story was merged with a previous one: Parameter to disable cpp
file.

#+begin_quote
*Story*: As a dogen user, I want to disable cpp files so that I don't
generate files with dummy content when I'm not using them.
#+end_quote

It would be really useful to define a implementation specific
parameter which disables the generation of a cpp file for a
service. This would stop us from having to create noddy translation
units with dummy functions just to avoid having to define exclusion
regexes.

In some cases we may need a "enable by usage". For example,
it would be great to be able to enable forward declarations only for
those types for which we required them. Same with hash. We can detect
this by looking at the generated include dependencies. However,
because the include dependency only has a directive, we cannot tell
which formatter it belonged to. This would require some augmenting of
the directive to record the "origination" formatter.

*** Improve references management                                     :story:

At present, we compute model references as follows:

- in dia to sml we first loop through all types and figure out the
  distinct model names. This is done by creating a "shallow" qname
  with just the model name and setting its origin type to unknown.
- when we merge, we take the references of target - the only ones we
  care about - and then we check that against the list of the models
  we are about to merge. If there are any missing models we complain
  (see comments below). We then loop through the list of references
  and "resolve" the origin type of the model.

Note: We could actually also complain if there are too many models, or
more cleverly avoid merging those models which are not required. Or
even more cleverly, we could avoid loading them in the first place, if
only we could load target first.

A slightly better way of doing this would be:

- in SML create a references updater that takes a model and computes
  its reference requirements. It could also receive a list of "other"
  models from which to get their origin types to avoid using =unknown=
  at all, and checks that all reference requirements have been met.
- the current step =update_references= is just a call to the
  references updater, prior to merging, with the target model.

*** Assignment operator seems to pass types by value                  :story:

The code for the operator is as follows:

:         stream_ << indenter_ << ci.name() << "& operator=(" << ci.name()
:                << " other);" << std::endl;

If this is the case we need to fix it and regenerate all models.

Actually we have implemented assignment in terms of swap, so that is
why we copy. We need to figure out if this was a good idea. Raise
story in backlog.

: diff --git a/projects/cpp/src/types/formatters/types/class_header_formatter.stitch b/projects/cpp/src/types/formatters/types/class_header_formatter.stitch
: index f9f91af..663f0ac 100644
: --- a/projects/cpp/src/types/formatters/types/class_header_formatter.stitch
: +++ b/projects/cpp/src/types/formatters/types/class_header_formatter.stitch
: @@ -253,7 +253,7 @@ public:
:  <#+
:                  if (!c.is_parent()) {
:  #>
: -    <#= c.name() #>& operator=(<#= c.name() #> other);
: +    <#= c.name() #>& operator=(<#= c.name() #>& other);
:  <#+
:                  }
:              }
: diff --git a/projects/cpp_formatters/src/types/class_declaration.cpp b/projects/cpp_formatters/src/types/class_declaration.cpp
: index c2eeb3c..534ab69 100644
: --- a/projects/cpp_formatters/src/types/class_declaration.cpp
: +++ b/projects/cpp_formatters/src/types/class_declaration.cpp
: @@ -457,8 +457,8 @@ void class_declaration::swap_and_assignment(
:
:      // assignment is only available in leaf classes - MEC++-33
:      if (!ci.is_parent()) {
: -        stream_ << indenter_ << ci.name() << "& operator=(" << ci.name()
: -                << " other);" << std::endl;
: +        stream_ << indenter_ << ci.name() << "& operator=(const " << ci.name()
: +                << "& other);" << std::endl;
:      }
:
:      utility_.blank_line();
: diff --git a/projects/cpp_formatters/src/types/class_implementation.cpp b/projects/cpp_formatters/src/types/class_implementation.cpp
: index 5c9fe50..9276701 100644
: --- a/projects/cpp_formatters/src/types/class_implementation.cpp
: +++ b/projects/cpp_formatters/src/types/class_implementation.cpp
: @@ -456,8 +456,8 @@ assignment_operator(const cpp::formattables::class_info& ci) {
:          return;
:
:      stream_ << indenter_ << ci.name() << "& "
: -            << ci.name() << "::operator=(" << ci.name()
: -            << " other) ";
: +            << ci.name() << "::operator=(const " << ci.name()
: +            << "& other) ";
:
:      utility_.open_scope();
:      {

*** Implement options copier and remove options from context          :story:

At present the path derivatives expander is getting access to the C++
options via the expansion context. This was obviously a temporary hack
to get things moving. The right thing must surely be to add the root
object to the context, and to read the options from the root
object. These for now must be populated via the options copier; in the
future one can imagine that users define them in diagrams.

Actually, the directories supplied to dogen do need to be command line
options. This is because they tend to be created by CMake on the fly
as absolute paths and as such cannot be hard-coded into the
diagram. This being the case, perhaps we should just supply the
knitting options to the expansion context. This does mean that now
expansion is a knitting thing - it could have been used by
stitch. Needs a bit more thinking.

*Tasks to read options from root object*

Not yet clear this is the right solution, but if it is, this is what
needs to be done.

- check that we have all the required fields in JSON for all of the
  c++ options we require for now.
- update options copier to copy these options. In many cases we will
  have to "redirect" the option. For example, =domain_facet_folder=
  becomes the types directory and so forth. Having said that we
  probably won't need these for now.
- remove options from context, and add root object instead. We may
  need to do the usual "locate root object" routine.
- update the path settings factory to read these from the root object.
- add options to type settings where it makes sense (e.g. disable
  complete constructor) and implement the type settings factory.

*** Consider dropping the prefix inclusion in expansion               :story:

*New Understanding*

The problem with this is that "directive" does not have any
meaning. We could get away with dependencies, but directive is very
open ended. We cannot start changing meta-data keys (e.g. =directive=
instead of =inclusion_directive=) because that would confuse users; so
we would end up with two names in two different places, probably even
more confusing.

*Previous Understanding*

At present we have really long class names because they all need
"inclusion" on the name. In reality, we have two concepts:

- directives
- dependencies

We don't need the prefix "inclusion" to make these understandable. We
can probably get away with removing it from all of the expansion
classes without significant loss of meaning.

*** Add new c++ warnings to compilation                               :story:

- =-Wunused-private-field=: Seems like this warning is not part of
  =-Wall=
- =-Winconsistent-missing-override=: new clang warning, probably 3.6.

** Deprecated
*** CANCELLED Perform expansion of properties and operations          :story:
    CLOSED: [2015-06-01 Mon 14:57]

*Rationale*: We no longer have expansion.

At present we are ignoring properties (and operations). This is ok as
we don't really have a use case for expansion there. However, it would
be nice if we could just expand them anyway. We just need to make sure
we don't do things like copying from root object.

*** CANCELLED Create an operation to populate c++ properties          :story:
    CLOSED: [2015-06-01 Mon 14:57]

*Rationale*: We no longer have expansion.

There are a number of properties such as "requires default
constructor" and so on that are specific to the c++ model. Some
require looking at related types (do they have the property enabled?)
some others require looking at the SML model graph. It seems they
should all live under one single operation (or perhaps a few), but we
do not have any good names for them.

*** CANCELLED Rename dynamic models                                   :story:
    CLOSED: [2015-06-01 Mon 14:59]

*Rationale*: We no longer have expansion.

At present we have named the dynamic models as follows:

- =schema=: for =dynamic::schema=
- =expansion=: for =dynamic::expansion=

This is because the name of the model is used to generate the
enclosing namespaces. Ideally we should name the models something like
=dynamic_schema= but still generate the namespaces correctly. One way
of doing this is to use the meta-data property for the model name,
which would allow having a file name that is different from the model
name. We have a dependency on [[https://github.com/DomainDrivenConsulting/dogen/blob/master/doc/agile/product_backlog.org#add-a-property-for-the-model-name-as-dynamic-extensions][this]] story.
