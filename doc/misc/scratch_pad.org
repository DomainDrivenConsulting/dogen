#+title: Scratch Pad
#+options: date:nil toc:nil author:nil num:nil

This document contains snippets of code that we want to preserve, most
likely to avoid having to trek down git history to find it.

** Graph populator

#+begin_src c++
class graph_populator {
public:
    graph_populator(module_containment_grapher& grapher) : grapher_(grapher) { }

public:
    void operator()(dogen::sml::type& t) const {
        grapher_.add(t.name(), t.containing_module());
    }

    void operator()(dogen::sml::module& m) const {
        grapher_.add(m.name(), m.containing_module());
    }

    void operator()(dogen::sml::concept& c) const {
        grapher_.add(c.name(), c.containing_module());
    }

private:
    module_containment_grapher& grapher_;
};
#+end_src

** General settings handler

*** Header
#+begin_src
namespace dogen {
namespace formatters {

/**
 * @brief Generates a map of general settings for qnames, taking into
 * account the general settings heuristics.
 */
class general_settings_handler : public sml::consumer_interface {
private:
    typedef std::unordered_map<sml::qname, general_settings>
    general_settings_by_qname_type;

public:
    /**
     * @brief Initialise a new handler.
     *
     * @param data_files_directories where to look for reference data.
     */
    explicit general_settings_handler(
        const std::list<boost::filesystem::path>& data_files_directories);

public:
    std::string id() const override;
    unsigned int required_passes() const override;
    bool consume_last() const override;
    void consume(const sml::model& model, const unsigned int pass,
        const sml::concept& target) const override;
    void consume(const sml::model& model, const unsigned int pass,
        const sml::module& target) const override;
    void consume(const sml::model& model, const unsigned int pass,
        const sml::enumeration& target) const override;
    void consume(const sml::model& model, const unsigned int pass,
        const sml::primitive& target) const override;
    void consume(const sml::model& model, const unsigned int pass,
        const sml::object& target) const override;

public:
    /**
     * @brief Returns the general settings by qname container, built
     * from an SML model.
     */
    const std::unordered_map<sml::qname, general_settings>&
    general_settings_by_qname() const;

private:
    mutable general_settings_by_qname_type general_settings_by_qname_;
    const meta_data::general_settings_factory factory_;
};

} }
#+end_src

*** Implementation

#+begin_src
#include <boost/lexical_cast.hpp>
#include <boost/throw_exception.hpp>
#include "dogen/utility/log/logger.hpp"
#include "dogen/sml/io/qname_io.hpp"
#include "dogen/sml/io/module_types_io.hpp"
#include "dogen/formatters/types/handling_error.hpp"
#include "dogen/formatters/types/general_settings_handler.hpp"

namespace {

const std::string id("formatters.general_settings_handler");
using namespace dogen::utility::log;
auto lg(logger_factory(id));
const std::string unexpected_module_type("Unexpected module type: ");
const std::string qname_not_found("Could not find settings for qname: ");
const std::string uncontained_element(
    "Element does not have a containing module: ");

}
namespace dogen {
namespace formatters {

general_settings_handler::general_settings_handler(
    const std::list<boost::filesystem::path>& data_files_directories)
    : factory_(data_files_directories) { }

std::string general_settings_handler::id() const {
    return ::id;
}

unsigned int general_settings_handler::required_passes() const {
    return 1;
}

bool general_settings_handler::consume_last() const {
    return false;
}

void general_settings_handler::
consume(const sml::model& /*model*/, const unsigned int /*pass*/,
    const sml::concept& target) const {

    if (target.generation_type() == sml::generation_types::no_generation)
        return;
}

void general_settings_handler::
consume(const sml::model& /*model*/, const unsigned int /*pass*/,
    const sml::module& target) const {

    if (target.generation_type() == sml::generation_types::no_generation)
        return;

    if (target.type() != sml::module_types::model &&
        target.type() != sml::module_types::regular) {
        const auto t(boost::lexical_cast<std::string>(target.type()));
        BOOST_LOG_SEV(lg, error) << unexpected_module_type << t;
        BOOST_THROW_EXCEPTION(handling_error(unexpected_module_type + t));
    }

    if (target.type() == sml::module_types::model) {
        const auto gs(factory_.build(target.meta_data()));
        general_settings_by_qname_.insert(std::make_pair(target.name(), gs));
    }

    if (!target.containing_module()) {
        const auto sn(target.name().simple_name());
        BOOST_LOG_SEV(lg, error) << uncontained_element << sn;
        BOOST_THROW_EXCEPTION(handling_error(uncontained_element + sn));
    }

    const auto cm(*target.containing_module());
    const auto i(general_settings_by_qname_.find(cm));
    if (i == general_settings_by_qname_.end()) {
        BOOST_LOG_SEV(lg, error) << qname_not_found << target.name();
        const auto sn(target.name().simple_name());
        BOOST_THROW_EXCEPTION(handling_error(qname_not_found + sn));
    }
}

void general_settings_handler::
consume(const sml::model& /*model*/, const unsigned int /*pass*/,
    const sml::enumeration& target) const {

    if (target.generation_type() == sml::generation_types::no_generation)
        return;
}

void general_settings_handler::
consume(const sml::model& /*model*/, const unsigned int /*pass*/,
    const sml::primitive& target) const {

    if (target.generation_type() == sml::generation_types::no_generation)
        return;
}

void general_settings_handler::
consume(const sml::model& /*model*/, const unsigned int /*pass*/,
    const sml::object& target) const {

    if (target.generation_type() == sml::generation_types::no_generation)
        return;
}

} }
#+end_src
** All formatters support

#+begin_src
diff --git a/projects/cpp/include/dogen/cpp/types/registrar.hpp b/projects/cpp/include/dogen/cpp/types/registrar.hpp
index d198af8..36ba8ba 100644
--- a/projects/cpp/include/dogen/cpp/types/registrar.hpp
+++ b/projects/cpp/include/dogen/cpp/types/registrar.hpp
@@ -29,6 +29,7 @@
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/cpp/types/facet_settings.hpp"
+#include "dogen/cpp/types/formatters/formatter_interface.hpp"
 #include "dogen/cpp/types/formatters/class_formatter_interface.hpp"
 
 namespace dogen {
@@ -40,6 +41,10 @@ public:
         std::shared_ptr<formatters::class_formatter_interface>
     > class_formatters_type;
 
+    typedef std::forward_list<
+        std::shared_ptr<formatters::formatter_interface>
+        > formatters_type;
+
 public:
     /**
      * @brief Ensures the registrar is ready to be used.
@@ -64,6 +69,11 @@ public:
     const class_formatters_type& class_formatters() const;
 
     /**
+     * @brief Returns all available formatters.
+     */
+    const formatters_type& all_formatters() const;
+
+    /**
      * @brief Returns all default settings for all facets.
      */
     const std::unordered_map<std::string, facet_settings>&
@@ -73,6 +83,7 @@ private:
     class_formatters_type class_formatters_;
     std::unordered_map<std::string, facet_settings>
     default_facet_settings_by_facet_id_;
+    formatters_type all_formatters_;
 };
 
 } }
#+end_src

#+begin_src
	Modified   projects/cpp/src/types/registrar.cpp
diff --git a/projects/cpp/src/types/registrar.cpp b/projects/cpp/src/types/registrar.cpp
index 923686d..5216597 100644
--- a/projects/cpp/src/types/registrar.cpp
+++ b/projects/cpp/src/types/registrar.cpp
@@ -63,12 +63,17 @@ void registrar::register_formatter(
         BOOST_THROW_EXCEPTION(registrar_error(null_formatter));
 
     class_formatters_.push_front(f);
+    all_formatters_.push_front(f);
 }
 
 const registrar::class_formatters_type& registrar::class_formatters() const {
     return class_formatters_;
 }
 
+const registrar::formatters_type& registrar::all_formatters() const {
+    return all_formatters_;
+}
#+end_src
