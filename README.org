* Overview

Motto 1: Le mieux est l'ennemi du bien. -- Voltaire

Motto 2: First write the code generator; don't worry about the code, it
will write itself.

Motto 3: Malembe, Malembe. -- Angolan proverb

** What is Dogen

*Dogen* is a code generator designed to target domain models, inspired
by the [[http://en.wikipedia.org/wiki/Domain-driven_design][domain driven design]] methodology. Our main objective was to
automate the modeling process as much as possible: the user creates
domain models using a supported UML tool and respecting a set of
predefined restrictions; Dogen then uses the tool's diagram files to
generate the source code representation. The generated code contains
most of the services required from a typical C++ domain object such as
serialisation, hashing, streaming and so on.

For a more complete description of Dogen see the [[https://github.com/kitanda/dogen/blob/master/doc/manual/manual.org][Manual]].

Please note that *the code generated by Dogen is C++-11 only.*

** Why do we need Dogen

The main objective of creating a domain generator is to avoid having
to maintain manually a significant amount of trivial code; this not
only speeds up the development process but it also improves code
quality as programmers do not tend to perform repetitive tasks
terribly well.

We developed our own domain generator because we could not find one
that fitted our requirements - open source or otherwise. You can see
the results of our research [[https://github.com/kitanda/dogen#related-work][below]].

Note that Dogen is specifically tailored for our needs and as such it
is not a general purpose domain generator. We are, however, wiling to
accept any patches for functionality not directly required by us.

* Obtaining Dogen

There are two ways of obtaining Dogen: you can either install one of
the available binary packages or compile it yourself from source.

** Binary Packages

Dogen uses Continuous Integration (CI) and Trunk Development. We use
CDash for CI. In practice, this means that it should always be safe
(and preferable) to install the most recent packages available.

You can monitor the build status [[http://hedgr.co.uk/cdash/index.php?project%3Ddogen][here]]. When the build is green, latest
is always greatest; when the build is not green, it is our top
priority to make it green again.

We have build agents for the following Operative Systems:

- Linux: 32-bit and 64-bit with Clang and GCC.
- Mac OS X: 64-bit with GCC.
- Windows: 32-bit using MinGW (GCC for Windows).

The generated packages are named after the build agents, and contain
the Operative System name and bitness (e.g. 64-bit or 32-bit) in their
names.

#begin_quote
IMPORTANT: Installable packages generated off of CI used to be available at
github [[https://github.com/kitanda/dogen/downloads][here]], but since they decommissioned the downloads section, we
found no place to upload them to. So, at present, there is no way of
downloading the packages generated by the build agents. We are trying
to find a new location to upload the packages to.
#end_quote

** Building from Source

We officially support Linux, Mac OS X and Win32 since we have build
agents for these platforms. However, any platform that meets the
dependencies [[https://github.com/kitanda/dogen#dependencies][below]] should be able to build Dogen.

*** Dependencies

In order to compile Dogen you need:

- a fairly recent version of [[http://gcc.gnu.org/][GCC]] (> [[http://gcc.gnu.org/gcc-4.7/][4.7]]) or [[http://clang.llvm.org/index.html][Clang]] (> [[http://llvm.org/releases/3.0/docs/ClangReleaseNotes.html][3.0]]) or any
  compiler with good C++-11 support;
- [[http://www.cmake.org/][CMake]] [[http://www.kitware.com/news/home/browse/CMake?2013_05_22&CMake%2B2.8.11%2BNow%2BAvailable][2.8]] or later;
- Boost [[http://www.boost.org/users/history/version_1_55_0.html][1.55]];
- for portable serialisation, you need [[http://epa.codeplex.com/][EOS]] support (optional);
- for relational database support you need [[http://www.codesynthesis.com/products/odb/][ODB]] support (optional);

*** Building Instructions

Once all dependencies have been installed, and placed in the
appropriate =INCLUDE= and =LIB= paths (or the equivalent for your
operative system), follow the following steps:

: git clone git://github.com/kitanda/dogen.git
: mkdir output
: cd output
: cmake ../dogen -G "Unix Makefiles"
: make -j5 # number of cores available

The dogen binary will be in =output/stage/bin/dogen_driver=.

If you are on a non-Unix platform you need to use the appropriate
CMake generator (the =-G= parameter above). At present the Ninja
generator is known not to work. No other generator has been used by
the Dogen team.

Once the build has completed successfully, you should [[https://github.com/kitanda/dogen#running-unit-tests][run the unit
tests]] to make sure your system is fully supported.

*** Running Unit Tests

In order to ensure your platform is properly supported by Dogen, you
should run the test suite and ensure that all tests pass.

If you have setup ODB support, you will need to do the following steps
first:

- install and configure [[http://www.postgresql.org/][PostgreSQL]];
- [[https://kb.mediatemple.net/questions/1237/How%2Bdo%2BI%2Benable%2Bremote%2Baccess%2Bto%2Bmy%2BPostgreSQL%2Bserver%253F#dv][configure]] access to local and remote users;
- create a database called =musseque= and a user called =build= with a
  password of your choice;
- create a =.pgpass= file as described in [[http://wiki.postgresql.org/wiki/Pgpass][here]] (more details in the
  Postgres manual, section [[http://www.postgresql.org/docs/current/static/libpq-pgpass.html][The Password File]]). Test access to the
  database before proceeding.

Finally, run:

: make run_all_specs

If there are no failures, you are good to go. If there are failures,
please [[https://github.com/kitanda/dogen#submitting-bug-reports][see below]].

*** Submitting bug reports

If you have a failure building Dogen or running its unit tests, please
submit a bug report that includes:

- the error messages;
- the compiler version;
- the Operative System.

If you find a bug whilst using Dogen, please send the log file as
well; it is located under the directory where you executed Dogen and
named =dogen.log=.

Bugs can be submitted using [[https://github.com/kitanda/dogen/issues][github Issues]].
