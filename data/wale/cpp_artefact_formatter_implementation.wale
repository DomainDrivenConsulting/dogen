
std::string {{class.simple_name}}::static_artefact() {
    return traits::{{archetype.simple_name}}_archetype();
}

std::string {{class.simple_name}}::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
{{class.simple_name}}::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(),  cpp::traits::kernel(),
          traits::facet(),
          {{class.simple_name}}::static_artefact());
    return r;
}

std::type_index {{class.simple_name}}::element_type_index() const {
    static auto r(std::type_index(typeid({{yarn_element}})));
    return r;
}

const yarn::meta_model::name& {{class.simple_name}}::meta_name() const {
    using {{meta_name_factory}};
    static auto r(meta_name_factory::make_{{meta_element}}_name());
    return r;
}

inclusion_support_types {{class.simple_name}}::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path {{class.simple_name}}::inclusion_path(
    const formattables::locator& /*l*/, const yarn::meta_model::name& n) const {

    using namespace dogen::utility::log;
    static logger lg(
        logger_factory({{class.simple_name}}::static_artefact()));
    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path {{class.simple_name}}::full_path(
    const formattables::locator& l, const yarn::meta_model::name& n) const {
    return l.make_full_path_for_cpp_implementation(n, static_artefact());
}
