<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::serialization #>
<#@ stitch.inclusion_dependency="dogen.formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen.yarn/types/meta_model/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen.yarn/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/serialization/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.cpp/types/formatters/serialization/enum_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=yarn::meta_model::enumeration #>
<#@ stitch.wale.kvp.meta_element=enumeration #>
<#@ stitch.wale.kvp.meta_name_factory=yarn::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> enum_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::meta_model::element& e) const {
    auto builder(f.make());
    builder.add(e.name(), types::traits::enum_header_archetype());
    builder.add(inclusion_constants::boost::serialization::nvp());
    return builder.build();
}

yarn::meta_model::artefact enum_header_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& ye(a.as<yarn::meta_model::enumeration>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
#>

template<class Archive>
void serialize(Archive& ar, <#= a.get_qualified_name(ye.name()) #>& v, unsigned int /*version*/){
    using boost::serialization::make_nvp;
    ar & make_nvp("<#= ye.name().simple() #>", v);
}

<#+
    } // sbf
    return a.make_artefact();
}
#>
