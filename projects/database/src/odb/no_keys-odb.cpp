// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "dogen/database/odb/no_keys-odb.hpp"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/details/shared-ptr.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/no-id-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/no-id-object-result.hxx>

namespace odb
{
  // no_keys
  //

  const char access::object_traits< ::dogen::database::no_keys >::
  persist_statement_name[] = "dogen_database_no_keys_persist";

  const char access::object_traits< ::dogen::database::no_keys >::
  query_statement_name[] = "dogen_database_no_keys_query";

  const char access::object_traits< ::dogen::database::no_keys >::
  erase_query_statement_name[] = "dogen_database_no_keys_erase_query";

  const unsigned int access::object_traits< ::dogen::database::no_keys >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::timestamp_oid
  };

  bool access::object_traits< ::dogen::database::no_keys >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // prop_0_
    //
    t[0UL] = 0;

    // prop_1_
    //
    t[1UL] = 0;

    // prop_2_
    //
    if (t[2UL])
    {
      i.prop_2_value.capacity (i.prop_2_size);
      grew = true;
    }

    // prop_3_
    //
    t[3UL] = 0;

    return grew;
  }

  void access::object_traits< ::dogen::database::no_keys >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // prop_0_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.prop_0_value;
    b[n].is_null = &i.prop_0_null;
    n++;

    // prop_1_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.prop_1_value;
    b[n].is_null = &i.prop_1_null;
    n++;

    // prop_2_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.prop_2_value.data ();
    b[n].capacity = i.prop_2_value.capacity ();
    b[n].size = &i.prop_2_size;
    b[n].is_null = &i.prop_2_null;
    n++;

    // prop_3_
    //
    b[n].type = pgsql::bind::timestamp;
    b[n].buffer = &i.prop_3_value;
    b[n].is_null = &i.prop_3_null;
    n++;
  }

  bool access::object_traits< ::dogen::database::no_keys >::
  init (image_type& i, const object_type& o, pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // prop_0_
    //
    {
      int const& v =
        o.prop_0 ();

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.prop_0_value, is_null, v);
      i.prop_0_null = is_null;
    }

    // prop_1_
    //
    {
      unsigned int const& v =
        o.prop_1 ();

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i.prop_1_value, is_null, v);
      i.prop_1_null = is_null;
    }

    // prop_2_
    //
    {
      ::std::string const& v =
        o.prop_2 ();

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.prop_2_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.prop_2_value,
        size,
        is_null,
        v);
      i.prop_2_null = is_null;
      i.prop_2_size = size;
      grew = grew || (cap != i.prop_2_value.capacity ());
    }

    // prop_3_
    //
    {
      ::boost::posix_time::ptime const& v =
        o.prop_3 ();

      bool is_null (true);
      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_image (
        i.prop_3_value, is_null, v);
      i.prop_3_null = is_null;
    }

    return grew;
  }

  void access::object_traits< ::dogen::database::no_keys >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // prop_0_
    //
    {
      int v;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.prop_0_value,
        i.prop_0_null);

      o.prop_0 (v);
    }

    // prop_1_
    //
    {
      unsigned int v;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i.prop_1_value,
        i.prop_1_null);

      o.prop_1 (v);
    }

    // prop_2_
    //
    {
      ::std::string& v =
        o.prop_2 ();

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.prop_2_value,
        i.prop_2_size,
        i.prop_2_null);
    }

    // prop_3_
    //
    {
      ::boost::posix_time::ptime& v =
        o.prop_3 ();

      pgsql::value_traits<
          ::boost::posix_time::ptime,
          pgsql::id_timestamp >::set_value (
        v,
        i.prop_3_value,
        i.prop_3_null);
    }
  }

  const char access::object_traits< ::dogen::database::no_keys >::persist_statement[] =
  "INSERT INTO \"no_keys\" ("
  "\"prop_0\","
  "\"prop_1\","
  "\"prop_2\","
  "\"prop_3\")"
  " VALUES ($1,$2,$3,$4)";

  const char access::object_traits< ::dogen::database::no_keys >::query_statement[] =
  "SELECT "
  "\"no_keys\".\"prop_0\","
  "\"no_keys\".\"prop_1\","
  "\"no_keys\".\"prop_2\","
  "\"no_keys\".\"prop_3\""
  " FROM \"no_keys\""
  " ";

  const char access::object_traits< ::dogen::database::no_keys >::erase_query_statement[] =
  "DELETE FROM \"no_keys\""
  " ";

  const char access::object_traits< ::dogen::database::no_keys >::table_name[] =
  "\"no_keys\"";

  void access::object_traits< ::dogen::database::no_keys >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits< ::dogen::database::no_keys >::object_type >
  access::object_traits< ::dogen::database::no_keys >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        query_statement + q.clause (),
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) pgsql::no_id_object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::dogen::database::no_keys >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement_name,
      erase_query_statement + q.clause (),
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
