<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::io #>
<#@ stitch.inclusion_dependency="dogen.yarn/types/meta_model/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen.yarn/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen.formatting/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.csharp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.quilt.csharp/types/formatters/io/enum_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum #>
<#@ stitch.wale.kvp.yarn_element=yarn::meta_model::enumeration #>
<#@ stitch.wale.kvp.meta_element=enumeration #>
<#@ stitch.wale.kvp.meta_name_factory=yarn::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

yarn::meta_model::artefact enum_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    const auto& ye(a.as<yarn::meta_model::enumeration>(static_id(), e));
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>
    /// <summary>
    /// Generates sequences of <#= sn #>.
    /// </summary>
    public static class <#= sn #>Dumper
    {
        static internal void Dump(AssistantDumper assistant, <#= sn #> value, bool withSeparator = false)
        {
            assistant.IncrementDepth();
            if (assistant.MaximumDepthExceeded())
                return;

            assistant.AddStartObject();
            assistant.AddType("<#= qn #>", true/*withSeparator*/);
            string valueAsString = "Unsupported Value";
            switch (value)
            {
<#+
            for (const auto& en : ye.enumerators()) {
#>
                case <#= ye.name().simple() #>.<#= en.name().simple() #>:
                    valueAsString = "<#= en.name().simple() #>";
                    break;
<#+
            }
#>
            }

            assistant.Add("value", valueAsString);
            assistant.AddEndObject();

            assistant.DecrementDepth();
        }

        public static string Dump(<#= sn #> value)
        {
            var assistant = new AssistantDumper();
            Dump(assistant, value);
            return assistant.ToString();
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
