<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::csharp::formatters::io #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/io/class_formatter.hpp" #>
<#@ masd.stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

extraction::meta_model::artefact class_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    const auto id(e.name().qualified().dot());
    assistant a(ctx, archetype_location(), id);
    const auto& o(a.as<coding::meta_model::object>(static_id(), e));
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
#>
using System;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const bool has_attributes(!o.local_attributes().empty());
#>
    /// <summary>
    /// Generates sequences of <#= sn #>.
    /// </summary>
    public static class <#= sn #>Dumper
    {
        static internal void Dump(AssistantDumper assistant, <#= sn #> value, bool withSeparator = false)
        {
            assistant.IncrementDepth();
            if (assistant.MaximumDepthExceeded())
                return;

            assistant.AddStartObject();
            assistant.AddType("<#= qn #>", true/*withSeparator*/);
            if (value == null)
            {
                assistant.Add("data", "<null>");
                assistant.AddEndObject();
                return;
            }

            assistant.AddKey("data");
            assistant.AddPairSeparator();
            assistant.AddStartObject();
<#+
                if (!o.parents().empty()) {
                    const auto& pn(o.parents().front());
                    const auto pqn(a.get_qualified_name(pn));
#>
            assistant.AddKey("__parent_0__");
            assistant.AddPairSeparator();
            <#= pqn #>Dumper.Dump(assistant, value<#= (has_attributes ? ", true/*withSeparator*/" : "") #>);
<#+
                }

                generation::formatters::sequence_formatter sf(o.local_attributes().size());
                sf.element_separator("");
                sf.postfix_configuration().not_last(", true/*withSeparator*/");
                sf.postfix_configuration().last("");

                for (const auto& attr : o.local_attributes()) {
                    const auto oap(a.get_assistant_properties(attr));
                    if (oap && oap->requires_assistance()) {
#>
            assistant.Add("<#= attr.name().simple() #>", value.<#= attr.name().simple() #><#= sf.postfix() #>);
<#+
                    } else {
                        const auto attr_qn(a.get_qualified_name(attr.parsed_type().current()));
#>
            assistant.AddKey("<#= attr.name().simple() #>");
            assistant.AddPairSeparator();
            <#= attr_qn #>Dumper.Dump(assistant, value.<#= attr.name().simple() #><#= sf.postfix() #>);
<#+
                    }

                    sf.next();
                }
#>
            assistant.AddEndObject(); // data
            assistant.AddEndObject(); // main object
            assistant.HandleMemberSeparator(withSeparator);

            assistant.DecrementDepth();
        }

        public static string Dump(<#= sn #> value)
        {
<#+
                if (o.is_parent()) {
#>
            return value.Dump();
<#+
                } else {
#>
            var assistant = new AssistantDumper();
            Dump(assistant, value);
            return assistant.ToString();
<#+
                }
#>
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
