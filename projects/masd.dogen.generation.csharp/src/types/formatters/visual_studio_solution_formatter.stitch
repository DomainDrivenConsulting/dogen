<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::csharp::formatters #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/fabric/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/fabric/visual_studio_solution.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/visual_studio_solution_formatter.hpp" #>
<#+

std::string visual_studio_solution_formatter::static_id() {
    return traits::visual_studio_solution_archetype();
}

std::string visual_studio_solution_formatter::id() const {
    static auto r(archetype_location().archetype());
    return r;
}

variability::archetype_location
visual_studio_solution_formatter::archetype_location() const {
    static variability::archetype_location
        r(csharp::traits::kernel(), csharp::traits::backend(),
          traits::visual_studio_facet(),
          visual_studio_solution_formatter::static_id());
    return r;
}

const coding::meta_model::name&
visual_studio_solution_formatter::meta_name() const {
    using fabric::meta_name_factory;
    static auto r(meta_name_factory::make_visual_studio_solution_name());
    return r;
}

std::string visual_studio_solution_formatter::family() const {
    return csharp::traits::visual_studio_solution_family();
}

boost::filesystem::path visual_studio_solution_formatter::
full_path(const formattables::locator& l, const coding::meta_model::name& n) const {
    return l.make_full_path_for_solution(n, static_id());
}

std::list<std::string> visual_studio_solution_formatter::
inclusion_dependencies(const coding::meta_model::element& /*e*/) const {
    std::list<std::string> r;
    return r;
}

extraction::meta_model::artefact visual_studio_solution_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location());
    const auto& vsl(a.as<fabric::visual_studio_solution>(static_id(), e));
#>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{<#= vsl.project_solution_guid() #>}") = "<#= vsl.project_name() #>", "<#= vsl.project_name() #>.csproj", "{<#= vsl.project_guid() #>}"
EndProject
Global
    GlobalSection(SolutionConfigurationPlatforms) = preSolution
        Debug|Any CPU = Debug|Any CPU
        Release|Any CPU = Release|Any CPU
    EndGlobalSection
    GlobalSection(ProjectConfigurationPlatforms) = postSolution
        {<#= vsl.project_guid() #>}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        {<#= vsl.project_guid() #>}.Debug|Any CPU.Build.0 = Debug|Any CPU
        {<#= vsl.project_guid() #>}.Release|Any CPU.ActiveCfg = Release|Any CPU
        {<#= vsl.project_guid() #>}.Release|Any CPU.Build.0 = Release|Any CPU
    EndGlobalSection
    GlobalSection(MonoDevelopProperties) = preSolution
        StartupItem = CSharpModel.csproj
    EndGlobalSection
EndGlobal
<#+
    return a.make_artefact();
}
#>
