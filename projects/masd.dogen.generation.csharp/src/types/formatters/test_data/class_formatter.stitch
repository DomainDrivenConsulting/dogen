<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::csharp::formatters::test_data #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.extraction/types/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/test_data/class_formatter.hpp" #>
<#@ masd.stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

extraction::meta_model::artefact class_formatter::format(
    const context& ctx, const coding::meta_model::element& e) const {
    const auto id(e.name().qualified().dot());
    assistant a(ctx, archetype_location(), id);
    const auto& o(a.as<coding::meta_model::object>(static_id(), e));
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
#>
using System;
using System.Collections;
using System.Collections.Generic;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const bool has_attributes(!o.all_attributes().empty());
            const bool is_parent_or_has_attributes(
                !o.parents().empty() || has_attributes);
#>
    /// <summary>
    /// Generates sequences of <#= sn #>.
    /// </summary>
    public static class <#= sn #>SequenceGenerator
    {
        static internal void Populate(<#= sn #> value, uint position)
        {
<#+
                if (!is_parent_or_has_attributes) {
#>
            // nothing to populate
<#+
                } else {
                    unsigned int count(0);
                    if (!o.parents().empty()) {
                        const auto& pn(o.parents().front());
                        const auto pqn(a.get_qualified_name(pn));
#>
            <#= pqn #>SequenceGenerator.Populate(value, position);
<#+
                    }

                    for (const auto& attr : o.local_attributes()) {
                        const auto oap(a.get_assistant_properties(attr));
                        if (oap && oap->requires_assistance()) {
#>
            value.<#= attr.name().simple() #> = AssistantSequenceGenerator.Create<#= oap->method_postfix() #>(position + <#= count++ #>);
<#+
                        } else {
                            const auto attr_qn(a.get_qualified_name(attr.parsed_type().current()));
#>
            value.<#= attr.name().simple() #> = <#= attr_qn #>SequenceGenerator.Create(position + <#= count++ #>);
<#+
                        }
                    }
                }
#>
        }

        static internal <#= sn #> Create(uint position)
        {
<#+
            if (!o.is_parent()) {
#>
            var result = new <#= sn #>();
<#+
                if (has_attributes) {
#>
            Populate(result, position);
<#+
                }
#>
            return result;
<#+
            } else {
                auto leaves(o.leaves());
                const auto front(leaves.front());
                leaves.pop_front();
                unsigned int i(0);
                const auto total(static_cast<unsigned int>(leaves.size()));
                for (const auto& l : leaves) {
#>
            if ((position % <#= total #>) == <#= i++ #>)
                return <#= a.get_qualified_name(l) #>SequenceGenerator.Create(position);
<#+
                }
#>
            return <#= a.get_qualified_name(front) #>SequenceGenerator.Create(position);
<#+
            }
#>
        }

        #region Enumerator
        private class <#= sn #>Enumerator : IEnumerator, IEnumerator<<#= sn #>>, IDisposable
        {
            #region Properties
            private uint _position;
            private <#= sn #> _current;
            #endregion

            private void PopulateCurrent()
            {
                _current = <#= sn #>SequenceGenerator.Create(_position);
            }

            #region IDisposable
            public void Dispose()
            {
            }
            #endregion

            #region IEnumerator implementation
            public bool MoveNext()
            {
                ++_position;
                PopulateCurrent();
                return true;
            }

            public void Reset()
            {
                _position = 0;
                PopulateCurrent();
            }

            public object Current {
                get
                {
                    return _current;
                }
            }

            <#= sn #> IEnumerator<<#= sn #>>.Current
            {
                get
                {
                    return _current;
                }
            }
            #endregion

            public <#= sn #>Enumerator()
            {
                PopulateCurrent();
            }
        }
        #endregion

        #region Enumerable
        private class <#= sn #>Enumerable : IEnumerable, IEnumerable<<#= sn #>>
        {
            #region IEnumerable implementation
            public IEnumerator GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }

            IEnumerator<<#= sn #>> IEnumerable<<#= sn #>>.GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }
            #endregion
        }
        #endregion

        static public IEnumerable<<#= sn #>> Sequence()
        {
            return new <#= sn #>Enumerable();
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
