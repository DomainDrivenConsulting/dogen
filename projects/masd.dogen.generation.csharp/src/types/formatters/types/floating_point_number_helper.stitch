<#@ masd.annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=masd::dogen::generation::csharp::formatters::types #>
<#@ stitch.inclusion_dependency="masd.dogen.extraction/types/csharp/scoped_namespace_formatter.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formattables/helper_properties.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/types/floating_point_number_helper.hpp" #>
<#@ stitch.wale.template=csharp_helper_formatter_implementation.wale #>
<#@ stitch.wale.kvp.helper.family=FloatingPointNumber #>
<#@ stitch.wale.kvp.class.simple_name=floating_point_number_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void floating_point_number_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
#>
        /// <summary>
        /// Compare floating point numbers, taking precision into account (<#= qn #> version).
        /// </summary>
        static private bool NearlyEqual(<#= qn #> lhs, <#= qn #> rhs)
        {
            <#= qn #> epsilon = Math.Max(Math.Abs(lhs), Math.Abs(rhs)) * <#= qn #>.Epsilon;
            return Math.Abs(lhs - rhs) <= epsilon;
        }
<#+
}
#>
