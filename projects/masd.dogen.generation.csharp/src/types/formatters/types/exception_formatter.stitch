<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::csharp::formatters::types #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/exception.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.csharp/types/formatters/types/exception_formatter.hpp" #>
<#@ masd.stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=exception_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=exception #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::exception #>
<#@ masd.stitch.wale.kvp.meta_element=exception #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

extraction::meta_model::artefact exception_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location());
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
#>
using System;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            a.comment(e.documentation(), 1/*indent*/);
#>
    public class <#= sn #>  : Exception
    {
        public <#= sn #>() { }
        public <#= sn #>(string message) : base(message) { }
        public <#= sn #>(string message, Exception inner) : base(message, inner) { }
    }
<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
