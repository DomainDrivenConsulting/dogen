
physical::entities::archetype {{class.simple_name}}::static_archetype() const {
    static physical::entities::archetype r([]() {
        physical::entities::archetype r;
        using pmnf = identification::helpers::physical_meta_name_factory;
        r.meta_name(pmnf::make(csharp::traits::backend_sn(),
            traits::facet_sn(), traits::{{archetype.simple_name}}_archetype_sn()));
        using lmnf = {{meta_name_factory}};
        r.logical_meta_element_id(identification::entities::logical_meta_id(lmnf::make_{{meta_element}}_name().qualified().dot());
        return r;
    }());
    return r;
}

physical::entities::archetype {{class.simple_name}}::archetype() const {
    return static_archetype();
}

boost::filesystem::path {{class.simple_name}}::full_path(
    const formattables::locator& l, const logical::entities::name& n) const {
    return l.make_full_path(n, archetype().meta_name().id().value());
}

std::list<std::string> {{class.simple_name}}::
inclusion_dependencies(const logical::entities::element& /*e*/) const {
    std::list<std::string> r;
    return r;
}
