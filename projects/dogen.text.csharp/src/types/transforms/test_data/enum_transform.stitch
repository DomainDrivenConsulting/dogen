<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::csharp::transforms::test_data #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/enumeration.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.csharp/types/transforms/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.csharp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.csharp/types/transforms/test_data/enum_transform.hpp" #>
<#@ masd.stitch.wale.text_template=csharp_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=enum_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=enum #>
<#@ masd.stitch.wale.kvp.meta_element=enumeration #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void enum_transform::apply(const context& ctx, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    assistant ast(ctx, e, archetype().meta_name(), a);
    const auto& ye(ast.as<logical::entities::structural::enumeration>(archetype().meta_name().qualified(), e));
    {
        const auto sn(e.name().simple());
        auto sbf(ast.make_scoped_boilerplate_formatter(e));
        {
#>
using System;
using System.Collections;
using System.Collections.Generic;

<#+
            const auto ns(ast.make_namespaces(e.name()));
            auto snf(ast.make_scoped_namespace_formatter(ns));
#>
    /// <summary>
    /// Generates sequences of <#= sn #>.
    /// </summary>
    public static class <#= sn #>SequenceGenerator
    {
        static internal <#= sn #> Create(uint position)
        {
            var result = (<#= sn #>)(position % <#= ye.enumerators().size() #>);
            return result;
        }

        #region Enumerator
        private class <#= sn #>Enumerator : IEnumerator, IEnumerator<<#= sn #>>, IDisposable
        {
            #region Properties
            private uint _position;
            private <#= sn #> _current;
            #endregion

            private void PopulateCurrent()
            {
                _current = <#= sn #>SequenceGenerator.Create(_position);
            }

            #region IDisposable
            public void Dispose()
            {
            }
            #endregion

            #region IEnumerator implementation
            public bool MoveNext()
            {
                ++_position;
                PopulateCurrent();
                return true;
            }

            public void Reset()
            {
                _position = 0;
                PopulateCurrent();
            }

            public object Current {
                get
                {
                    return _current;
                }
            }

            <#= sn #> IEnumerator<<#= sn #>>.Current
            {
                get
                {
                    return _current;
                }
            }
            #endregion

            public <#= sn #>Enumerator()
            {
                PopulateCurrent();
            }
        }
        #endregion

        #region Enumerable
        private class <#= sn #>Enumerable : IEnumerable, IEnumerable<<#= sn #>>
        {
            #region IEnumerable implementation
            public IEnumerator GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }

            IEnumerator<<#= sn #>> IEnumerable<<#= sn #>>.GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }
            #endregion
        }
        #endregion

        static public IEnumerable<<#= sn #>> Sequence()
        {
            return new <#= sn #>Enumerable();
        }
    }
<#+
        }
    } // sbf
    ast.update_artefact();
}
#>
