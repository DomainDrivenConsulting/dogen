<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::odb #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/builtin.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/odb/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/odb/builtin_header_transform.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=builtin_header_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=builtin_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::builtin #>
<#@ masd.stitch.wale.kvp.meta_element=builtin #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> builtin_header_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const logical::entities::element& /*e*/) const {
    static const std::list<std::string> r;
    return r;
}

void builtin_header_transform::apply(const context& /*ctx*/, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    a.logical_name().simple(e.name().simple());
    a.logical_name().qualified(e.name().qualified().dot());
    a.origin_sha1_hash(e.origin_sha1_hash());
}

#>
