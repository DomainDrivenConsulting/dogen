<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::types #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/entry_point.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation.wale #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/main_transform.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/formatting_error.hpp" #>
<#@ masd.stitch.wale.kvp.class.simple_name=main_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=main #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=regular_support #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::entry_point #>
<#@ masd.stitch.wale.kvp.meta_element=entry_point #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> main_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const logical::entities::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

physical::entities::artefact main_transform::
apply(const context& ctx, const logical::entities::element& e) const {
    assistant a(ctx, e, physical_name(), false/*requires_header_guard*/);
    const auto& o(a.as<logical::entities::structural::entry_point>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(o));
        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

int main(int /*argc*/, char* /*argv*/[]) {
    return 0;
}

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
