<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::types #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/string/splitter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.variability/types/helpers/enum_mapper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/variability/feature_template_bundle.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/io/inserter_implementation_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/feature_template_bundle_implementation_transform.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=feature_template_bundle_implementation_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=feature_template_bundle_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::variability::feature_template_bundle #>
<#@ masd.stitch.wale.kvp.meta_element=variability_feature_template_bundle #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> feature_template_bundle_implementation_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {
    using logical::entities::variability::feature_template_bundle;
    const auto& fb(assistant::as<feature_template_bundle>(e));
    auto builder(f.make());

    const auto ch_arch(traits::feature_template_bundle_header_archetype_qn());
    builder.add(fb.name(), ch_arch);
    builder.add("\"dogen.variability/types/helpers/value_factory.hpp\"");

    if (fb.generate_static_configuration()) {
        builder.add("\"dogen.variability/types/helpers/feature_selector.hpp\"");
        builder.add("\"dogen.variability/types/helpers/configuration_selector.hpp\"");
    }

    return builder.build();
}

void feature_template_bundle_implementation_transform::apply(const context& ctx, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    assistant ast(ctx, e, physical_meta_name(), false/*requires_header_guard*/, a);
    const auto& ftb(ast.as<logical::entities::variability::feature_template_bundle>(e));

    {
        const auto sn(ftb.name().simple());
        const auto qn(ast.get_qualified_name(ftb.name()));
        auto sbf(ast.make_scoped_boilerplate_formatter(ftb));
        ast.add_helper_methods(ftb.name().qualified().dot());

        {
            const auto ns(ast.make_namespaces(ftb.name()));
            auto snf(ast.make_scoped_namespace_formatter(ns));
            using namespace variability::helpers;
            using utility::string::splitter;

            if (ftb.generate_registration()) {
#>

namespace {
<#+
                for (const auto& ft : ftb.feature_templates()) {
                    const auto simple_key(splitter::split_scoped(ft.key()).back());
                    const bool has_qualified_name(simple_key != ft.key());
#>

dogen::variability::entities::feature_template
make_<#= ft.identifiable_key() #>() {
    using namespace dogen::variability::entities;
    feature_template r;
    r.name().simple("<#= simple_key #>");
<#+
                    if (has_qualified_name) {
#>
    r.name().qualified("<#= ft.key() #>");
<#+
                    }
#>
    r.description(R"(<#= ft.documentation() #>
)");
    const auto vt(<#= enum_mapper::from_value_type(ft.value_type()) #>);
    r.value_type(vt);
    r.binding_point(<#= enum_mapper::from_binding_point(*ft.binding_point()) #>);
    r.instantiation_domain_name("<#= ftb.instantiation_domain_name() #>");
<#+

                    if (!ft.default_value().empty()) {
#>
    dogen::variability::helpers::value_factory f;
    r.default_value(f.make(vt, std::list<std::string>{ <#= ft.default_value() #> }));
<#+
                        for (const auto& dvo : ft.default_value_overrides()) {
#>
    r.default_value_overrides().push_back(
        default_value_override("<#= dvo.key_ends_with() #>",
            f.make(vt, std::list<std::string>{ <#= dvo.default_value() #> })));
<#+
                       }
                   }
#>
    return r;
}
<#+
                }
#>

}

<#+
            }

            if (ftb.generate_static_configuration()) {
#>
<#= sn #>::feature_group
<#= sn #>::make_feature_group(const dogen::variability::entities::feature_model& fm) {
    feature_group r;
    const dogen::variability::helpers::feature_selector s(fm);

<#+
                for (const auto& ft : ftb.feature_templates()) {
                    const auto simple_key(splitter::split_scoped(ft.key()).back());
#>
    r.<#= simple_key #> = s.get_by_name("<#= ft.key() #>");
<#+
                }
#>

    return r;
}

<#= sn #>::static_configuration <#= sn #>::make_static_configuration(
    const feature_group& fg,
    const dogen::variability::entities::configuration& cfg) {

    static_configuration r;
    const dogen::variability::helpers::configuration_selector s(cfg);
<#+
                for (const auto& ft : ftb.feature_templates()) {
                    const auto simple_key(splitter::split_scoped(ft.key()).back());

                    const bool has_default_value(!ft.default_value().empty());
                    if (has_default_value) {
#>
    r.<#= simple_key #> = s.get_<#= enum_mapper::from_value_type(ft.value_type(), false/*simple*/) #>_content_or_default(fg.<#= simple_key #>);
<#+
                    } else if (ft.is_optional()) {
#>
    if (s.has_configuration_point(fg.<#= simple_key #>))
        r.<#= simple_key #> = s.get_<#= enum_mapper::from_value_type(ft.value_type(), false/*simple*/) #>_content(fg.<#= simple_key #>);
<#+
                    } else {
#>
    r.<#= simple_key #> = s.get_<#= enum_mapper::from_value_type(ft.value_type(), false/*simple*/) #>_content(fg.<#= simple_key #>);
<#+
                    }
                }
#>
    return r;
}
<#+
            }

            if (ftb.generate_registration()) {

#>

std::list<dogen::variability::entities::feature_template>
<#= sn #>::make_templates() {
    using namespace dogen::variability::entities;
    std::list<dogen::variability::entities::feature_template> r;
<#+

                for (const auto& ft : ftb.feature_templates()) {
#>
    r.push_back(make_<#= ft.identifiable_key() #>());
<#+
                }
#>
    return r;
}

<#+
            }
        } // snf
    } // sbf
    ast.update_artefact();
}

#>
