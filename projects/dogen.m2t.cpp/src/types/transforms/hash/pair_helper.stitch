<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::hash #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/hash/pair_helper.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=Pair #>
<#@ masd.stitch.wale.kvp.class.simple_name=pair_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void pair_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto first(hp.direct_descendants().front());
    const auto second(hp.direct_descendants().back());
#
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);

<#+
    if (!first.requires_hashing_helper())
#>
    combine(seed, v.first);
<#+
    else
#>
    combine(seed, hash_<#= first.name_tree_identifiable() #>(v.first));
<#+

    if (!second.requires_hashing_helper())
#>
    combine(seed, v.second);
<#+
    else
#>
    combine(seed, hash_<#= second.name_tree_identifiable() #>(v.second));
    return seed;
}
<#+
}
#>
