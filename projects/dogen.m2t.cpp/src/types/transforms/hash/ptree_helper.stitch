<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::hash #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/hash/ptree_helper.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=BoostPTree #>
<#@ masd.stitch.wale.kvp.class.simple_name=ptree_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void ptree_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);
    for (const auto& node : v) {
        combine(seed, node.first);
        combine(seed, node.second.data());
        combine(seed, hash_<#= ident #>(node.second));
    }

    return seed;
}
<#+
}
#>
