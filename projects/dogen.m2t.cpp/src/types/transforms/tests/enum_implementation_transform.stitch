<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::tests #>
<#@ masd.stitch.inclusion_dependency=<boost/predef.h>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/enumeration.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/lexical_cast/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/tests/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/tests/enum_implementation_transform.hpp" #>
<#+

physical::entities::archetype enum_implementation_transform::static_archetype() const {
    static physical::entities::archetype r([]() {
        physical::entities::archetype r;
        using pmnf = physical::helpers::meta_name_factory;
        r.meta_name(pmnf::make(cpp::traits::backend_sn(),
            traits::facet_sn(), traits::enum_implementation_archetype_sn()));
        using lmnf = logical::helpers::meta_name_factory;
        r.logical_meta_element_id(lmnf::make_enumeration_name().qualified().dot());
        return r;
    }());
    return r;
}

physical::entities::archetype enum_implementation_transform::archetype() const {
    return static_archetype();
}

inclusion_support_types enum_implementation_transform::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path enum_implementation_transform::inclusion_path(
    const formattables::locator& /*l*/, const logical::entities::name& n) const {

    using namespace dogen::utility::log;
    static logger lg(logger_factory(archetype().meta_name().qualified()));
    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path enum_implementation_transform::full_path(
    const formattables::locator& l, const logical::entities::name& n) const {
    return l.make_full_path_for_tests_cpp_implementation(n, archetype().meta_name().qualified());
}

std::list<std::string> enum_implementation_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {

    auto builder(f.make());
    builder.add(e.name(), types::traits::enum_header_archetype_qn());
    builder.add(e.name(), test_data::traits::enum_header_archetype_qn());

    using ic = inclusion_constants;
    builder.add(ic::std::string());
    builder.add(ic::boost::test::unit_test());
    builder.add(ic::boost::predef());

    const auto io_arch(io::traits::enum_header_archetype_qn());
    const bool io_enabled(builder.is_enabled(e.name(), io_arch));
    if (io_enabled) {
        builder.add(e.name(), io_arch);
        builder.add(ic::std::sstream());
        builder.add(ic::boost::property_tree::ptree());
        builder.add(ic::boost::property_tree::json_parser());
    }

    const auto lc_arch(lexical_cast::traits::enum_header_archetype_qn());
    const bool lc_enabled(builder.is_enabled(e.name(), lc_arch));
    if (lc_enabled) {
        builder.add(e.name(), lc_arch);
        builder.add(ic::boost::lexical_cast());
    }

    using ser = transforms::serialization::traits;
    const auto ser_arch(ser::enum_header_archetype_qn());
    const bool ser_enabled(builder.is_enabled(e.name(), ser_arch));
    if (ser_enabled) {
        builder.add(e.name(), ser_arch);

        builder.add(ic::boost::archive::text_iarchive());
        builder.add(ic::boost::archive::text_oarchive());
        builder.add(ic::boost::archive::binary_iarchive());
        builder.add(ic::boost::archive::binary_oarchive());
        builder.add(ic::boost::archive::polymorphic_iarchive());
        builder.add(ic::boost::archive::polymorphic_oarchive());
        builder.add(ic::boost::serialization::nvp());
        builder.add(ic::boost::archive::xml_iarchive());
        builder.add(ic::boost::archive::xml_oarchive());
    }

    using hash = transforms::hash::traits;
    const auto hash_arch(hash::enum_header_archetype_qn());
    const bool hash_enabled(builder.is_enabled(e.name(), hash_arch));
    if (hash_enabled)
        builder.add(e.name(), hash_arch);

    return builder.build();
}

void enum_implementation_transform::apply(const context& ctx, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    assistant ast(ctx, e, archetype().meta_name(), false/*requires_header_guard*/, a);
    const auto& enm(ast.as<logical::entities::structural::enumeration>(e));

    {
        auto sbf(ast.make_scoped_boilerplate_formatter(e));
        const auto qn(ast.get_qualified_name(e.name()));
        const auto sn(e.name().simple());
        std::string type_name("auto");
        if (ast.is_cpp_standard_98())
            type_name = qn;
#>
BOOST_AUTO_TEST_SUITE(<#= e.name().simple() #>_tests)

<#+
        /*
         * If test data is not enabled, none of the tests can be
         * generated. We need to insert a fake test for now. The real
         * solution will be to filter based on element state.
         */
        if (!ast.is_test_data_enabled()) {
            /*
             * No tests.
             */
#>
BOOST_AUTO_TEST_CASE(fake_test) {
    BOOST_CHECK(true);
}

<#+
        } else {
            if (ast.is_io_enabled()) {
                /*
                 * IO tests.
                 */
#>
BOOST_AUTO_TEST_CASE(inserter_operator_produces_valid_json) {
    <#= qn #>_generator g;
    const <#= type_name #> a(g());
    std::stringstream s;
    s << a;

    boost::property_tree::ptree pt;
    BOOST_REQUIRE_NO_THROW(read_json(s, pt));
}

<#+
            }

            if (ast.is_lexical_cast_enabled()) {
                /*
                 * Lexical cast tests.
                 */
#>
BOOST_AUTO_TEST_CASE(casting_valid_strings_produces_expected_enumeration) {
    using <#= qn #>;
    <#= sn #> r;
<#+
        for (const auto& enu : enm.enumerators()) {
            const auto enu_sn(enu.name().simple());
            std::string enu_qn;
            if (ast.is_cpp_standard_98())
                enu_qn = ast.get_qualified_namespace(enm.name()) + "::" + enu_sn;
            else
                enu_qn = sn + "::" + enu_sn;
#>

    r = boost::lexical_cast<<#= sn #>>(std::string("<#= enu_sn #>"));
    BOOST_CHECK(r == <#= enu_qn #>);
    r = boost::lexical_cast<<#= sn #>>(std::string("<#= sn + "::" + enu_sn #>"));
    BOOST_CHECK(r == <#= enu_qn #>);
<#+
        }
#>
}

BOOST_AUTO_TEST_CASE(casting_invalid_string_throws) {
    using <#= qn #>;
    BOOST_CHECK_THROW(boost::lexical_cast<<#= sn #>>(std::string("DOGEN_THIS_IS_INVALID_DOGEN")),
        boost::bad_lexical_cast);
}

BOOST_AUTO_TEST_CASE(casting_valid_enumerations_produces_expected_strings) {
    using <#= qn #>;
    std::string r;
<#+
        for (const auto& enu : enm.enumerators()) {
            const auto enu_sn(enu.name().simple());
            std::string enu_qn;
            if (ast.is_cpp_standard_98())
                enu_qn = ast.get_qualified_namespace(enm.name()) + "::" + enu_sn;
            else
                enu_qn = sn + "::" + enu_sn;

#>

    r = boost::lexical_cast<std::string>(<#= enu_qn #>);
    BOOST_CHECK(r == "<#= sn + "::" + enu_sn #>");
<#+
        }
#>
}

BOOST_AUTO_TEST_CASE(casting_invalid_enumeration_throws) {
#if BOOST_COMP_GNUC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    using <#= qn #>;
    const <#= sn #> r(static_cast<<#= sn #>>(<#= enm.enumerators().size() + 10 #>));
#if BOOST_COMP_GNUC
#pragma GCC diagnostic pop
#endif
    BOOST_CHECK_THROW(boost::lexical_cast<std::string>(r),
        boost::bad_lexical_cast);
}

<#+
            }

            if (ast.is_serialization_enabled()) {
                /*
                 * Serialization tests.
                 */
#>
BOOST_AUTO_TEST_CASE(xml_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const <#= type_name #> a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(text_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const <#= type_name #> a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(binary_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const <#= type_name #> a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        text_oarchive oa(os);
        oa << a;
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        text_iarchive ia(is);
        ia >> b;
    }
    BOOST_CHECK(a == b);
}

<#+
            }

             if (ast.is_hash_enabled()) {
                 /*
                  * hash tests.
                  */
#>
BOOST_AUTO_TEST_CASE(equal_enums_generate_the_same_hash) {
    <#= qn #>_generator g;
    g();
    const <#= type_name #> a(g());
    const <#= type_name #> b(a);

    std::hash<<#= qn #>> hasher;
    BOOST_CHECK(hasher(a) == hasher(b));
}

BOOST_AUTO_TEST_CASE(different_enums_generate_different_hashes) {
    <#= qn #>_generator g;
    g();
    const <#= type_name #> a(g());
    const <#= type_name #> b(g());

    std::hash<<#= qn #>> hasher;
    BOOST_CHECK(hasher(a) != hasher(b));
}

<#+
            }
        }
#>
BOOST_AUTO_TEST_SUITE_END()
<#+
    } // sbf
    ast.update_artefact();
}

#>
