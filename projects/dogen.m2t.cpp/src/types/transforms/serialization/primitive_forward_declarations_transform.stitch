<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::serialization #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/serialization/primitive_forward_declarations_transform.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_forward_declarations_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive_forward_declarations #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=regular_support #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_forward_declarations_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {
    auto builder(f.make());

    using tp = transforms::types::traits;
    const auto tp_fn(tp::primitive_forward_declarations_archetype_qn());
    builder.add(e.name(), tp_fn);

    return builder.build();
}

physical::entities::artefact primitive_forward_declarations_transform::
apply(const context& ctx, const logical::entities::element& e) const {
    assistant a(ctx, e, physical_meta_name(), true/*requires_header_guard*/);
    const auto& p(a.as<logical::entities::structural::primitive>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(p));
        const auto qn(a.get_qualified_name(p.name()));
#>

namespace boost {
namespace serialization {

template<class Archive>
void save(Archive& ar, const <#= qn #>& v, unsigned int version);

template<class Archive>
void load(Archive& ar, <#= qn #>& v, unsigned int version);

} }

<#+
    } // sbf
    return a.make_artefact();
}

#>
