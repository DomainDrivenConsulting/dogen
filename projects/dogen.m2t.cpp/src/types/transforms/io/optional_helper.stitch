<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::transforms::io #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/io/optional_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.helper.family=Optional #>
<#@ masd.stitch.wale.kvp.class.simple_name=optional_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void optional_helper::
apply(assistant& ast, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(ast.make_scoped_namespace_formatter(d.namespaces()));
        const auto containee(hp.direct_descendants().front());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= nt_qn #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= n_qn #>\"" << ", ";

    if (v)
        s << "\"data\": " << <#= ast.streaming_for_type(containee, "*v") #>;
    else
        s << "\"data\": ""\"<null>\"";
    s << " }";
    return s;
}

<#+
    }
#>

<#+
}
#>
