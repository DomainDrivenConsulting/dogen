<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::formatters::test_data #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/test_data/domain_type_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=Default #>
<#@ masd.stitch.wale.kvp.class.simple_name=domain_type_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void domain_type_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const bool is_pointer(d.is_pointer());
    const bool is_recursive(d.is_circular_dependency());

    if (is_recursive) {
#>

<#= qn #><#= (is_pointer ? "*" : "") #>
create_<#= ident #>(const unsigned int) {
<#+
        if (is_pointer) {
#>
    return nullptr;
<#+
        } else {
#>
    return <#= qn #>();
<#+
        }
#>
}
<#+
    } else {
#>

<#= qn #><#= (is_pointer ? "*" : "") #>
create_<#= ident #>(const unsigned int position) {
    return <#= qn #>_generator::create<#= (is_pointer ? "_ptr" : "") #>(position);
}
<#+
    }
}
#>
