<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/types/smart_pointer_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=SmartPointer #>
<#@ masd.stitch.wale.kvp.class.simple_name=smart_pointer_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void smart_pointer_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto qn(d.name_tree_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
#>

inline bool operator==(const <#= qn #>& lhs,
const <#= qn #>& rhs) {
    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
}

<#+
    }
#>

<#+
}

#>
