<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/module.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/types/namespace_header_transform.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=namespace_header_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=namespace_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::module #>
<#@ masd.stitch.wale.kvp.meta_element=module #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> namespace_header_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const logical::entities::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

physical::entities::artefact namespace_header_transform::
format(const context& ctx, const logical::entities::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& m(a.as<logical::entities::structural::module>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            if (a.requires_nested_namespaces()) {
                a.comment(m.documentation());
                const auto ns(a.make_namespaces(e.name(),
                        false/*detect_model_name*/));
                auto snf(a.make_scoped_namespace_formatter(ns));
            } else {
                const auto ns(a.make_namespaces(m.name()));
                auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
                a.comment(m.documentation());
#>
namespace <#= m.name().simple() #> {
}

<#+
            }
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
