<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::cpp::formatters::hash #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.cpp/types/formatters/hash/class_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> class_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {

    const auto& o(assistant::as<logical::entities::structural::object>(e));
    const auto carch(traits::canonical_archetype());
    auto builder(f.make());
    builder.add(o.name(), carch);

    builder.add(o.transparent_associations(), carch);
    builder.add(o.opaque_associations(), carch);
    builder.add(o.parents(), carch);

    return builder.build();
}

physical::entities::artefact class_implementation_formatter::
format(const context& ctx, const logical::entities::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& o(a.as<logical::entities::structural::object>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
#>

namespace {

<#+
        if (!o.local_attributes().empty() || !o.parents().empty()) {
#>
template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
<#+
        }

        a.add_helper_methods(o.name().qualified().dot());
#>

}

<#+
        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto sn(o.name().simple());
            const auto qn(a.get_qualified_name(o.name()));

#>

std::size_t <#= sn #>_hasher::hash(const <#= sn #>&<#= ((o.local_attributes().empty() && o.parents().empty()) ? "" : " v") #>) {
    std::size_t seed(0);
<#+
            if (!o.parents().empty()) {
#>

<#+
                const auto& pn(o.parents().front());
                const auto pqn(a.get_qualified_name(pn));
#>
    combine(seed, dynamic_cast<const <#= pqn #>&>(v));
<#+
            }

            if (!o.local_attributes().empty()) {
#>

<#+
                for (const auto attr : o.local_attributes()) {
                    if (a.requires_hashing_helper_method(attr))
#>
    combine(seed, hash_<#= attr.parsed_type().qualified().identifiable() #>(v.<#= attr.name().simple() #>()));
<#+
                    else
#>
    combine(seed, v.<#= attr.name().simple() #>());
<#+
                }

                if (o.local_attributes().size() > 1)
#>

<#+
            }
#>
    return seed;
}

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
