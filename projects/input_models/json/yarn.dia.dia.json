{
  "documentation": "Yarn Dia is a unidirectional transformation model that transforms\nDia @e diagram into an yarn @e model.\n\nBy that we mean that it is a model designed to transform a representation of\na user model in Dia diagram format to its counterpart in yarn format, taking\ninto account any special yarn meta-data which the user may have encoded into\nthe Dia diagram. Note that the Dia diagram format contains a representation\nof UML.\n\n@section yarn_dia_0 Dia diagrams as DAGs\n\nDia diagrams are made up of @e objects, identified by IDs. These objects\ncontain a number of UML model elements, which we are interested in. For\ninstance:\n\n@li UML class\n@li UML generalisation\n@li UML notes\n\nand so on. Each of these objects will contribute to a yarn object; but note\nthat the mapping is not one-to-one.For example, in order to process an\nyarn object, one needs to have both the UML class as well as any\ngeneralisations it may be involved in (both as a child or as a parent). To\nmake our life easier we created a DAG of Dia objects that provides us with\nthe information in dependency order. That is, we process dia objects in\nsuch a way that when a dependency exists, we know that the object in which\nwe depend on has already been processed. Please note that to ensure no\ncycles we had to ignore some of the UML objects such as UML aggregation -\nbut fortunately, these objects do not provide sufficient information for\nan yarn transformation anyway so not much was lost (instead, one must\nmanually declare attributes in a class).\n\nSee @ref grapher for details on how the the DAG is built.\n\n@section yarn_dia_1 Intermediate processing\n\nTo make the code easier to read and maintain, we created a numeber of\nintermediate stages between a Dia diagram and yarn:\n\n@li Dia object -> processed object -> profile -> Yarn\n\nThis may look a bit excessive at first glance, but it was done because\nthe shape of the Dia objects is a bit too generic for our purposes, and\nthe resulting processing code was full of loops and look-ups. Instead,\nwe make the generic Dia object into a very concrete processed object -\nstill preserving most of the semantics of Dia - and then from those we\nbuild a profile. A profile allows us to quickly scan for UML and yarn\ntype information without getting lost in the intricacies of the generic\nDia structure. With these in hand, the @ref transformer is able to\ncreate the corresponding yarn entity, and the transformation code is\nnot obscured.\n\n@section yarn_dia_2 Dia meta-data\n\nThere are a couple of conventions on how to model in Dia that one\nneeds to follow in order to comply with Dogen:\n\n@li any public attribute in a class is automatically converted into a\nyarn property rather than a member variable. This means that it is\nexpected that a getter and a setter will be generated.\n\n@li a number of DDD stereotypes were added:@e service, @e value and @e\nobject. These all map directly to the DDD ideas defined by Eric Evans\nin the Domain Driven Design book.\n\n@li a number of yarn specific stereotypes were added: @e exception,\n@e enumeration, @e object template, @e visitable, @e fluent, @e immutable,\n@e comparable. These we describe below.\n\n@li any type without any stereotype defaults to @e value @e object.\n\n@li any UML Note with the marker #DOGEN yarn.dia.comment=true will be\nused as the documentation of the current package - or the model, if\nplace at the top-level. Only one such note is expected per containing\nentity.\n\nThe yarn stereotypes have the following behaviours:\n\n@li @b exception: an exception class will be code generated. This is still\na value object but it will have any additional machinery related to\nexceptions attached to it.\n\n@li @b enumeration: Can only have attributes, and the attributes must not\nhave types. Type defaults to unsigned int.\n\n@li @b object @b template: Defines new stereotypes on the fly; that\nis, if you create a UML class @e MyObjectTemplate with property @e a\nand mark it as an object template, you can then create a UML class @e\nmy_class with a stereotype of @e MyObjectTemplate; the result will be\nthat my_class will have a property @e a too.\n\n@li @b visitable: a visitor service will be create for the type. Must be\nthe root of an inheritance tree.\n\n@li @b fluent: a fluent interface will be generated for all properties.\n\n@li @b immutable: only getters will be generated for each property.\n\n@li @b comparable: unused as of yet.\n",
  "tagged_values": {
    "yarn.dia.comment": "true",
    "yarn.model_modules": "yarn.dia",
    "yarn.external_modules": "dogen",
    "yarn.reference": "options.dia",
    "yarn.input_language": "cpp",
    "quilt.cpp.enabled": "true",
    "quilt.cpp.msbuild.enabled": "false",
    "quilt.cpp.visual_studio.project.enabled": "false",
    "quilt.cpp.visual_studio.solution.enabled": "false",
    "quilt.csharp.enabled": "false",
    "annotations.profile": "dogen.disable_common_facets"
  },
  "elements": [
    {
      "name": "adaptation_error",
      "documentation": "A fatal error has occurred while adapting a Dia model object\ninto its yarn representation.\n",
      "stereotypes": [
        "yarn::exception"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "grapher",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "graphing_error",
      "documentation": "An error has occurred while building the dia object graph.\n",
      "stereotypes": [
        "yarn::exception"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "visitor",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object",
      "attributes": [
        {
          "name": "builder_",
          "type": "builder"
        }
      ]
    },
    {
      "name": "processed_comment_factory",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "workflow",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "processed_object_factory",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "processed_attribute",
      "fallback_element_type": "yarn::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string",
          "documentation": "Name of the property.\n"
        },
        {
          "name": "type",
          "type": "std::string",
          "documentation": "Type of the property.\n"
        },
        {
          "name": "comment",
          "type": "processed_comment",
          "documentation": "Any comments associated with the property.\n"
        }
      ]
    },
    {
      "name": "processed_object",
      "documentation": "Representation of a dia object after first stage processing.\n",
      "fallback_element_type": "yarn::object",
      "attributes": [
        {
          "name": "id",
          "type": "std::string",
          "documentation": "Dia object id.\n"
        },
        {
          "name": "name",
          "type": "std::string",
          "documentation": "Name of the object in dia format.\n"
        },
        {
          "name": "dia_object_type",
          "type": "dia_object_types",
          "documentation": "Type of the dia object.\n"
        },
        {
          "name": "stereotypes",
          "type": "std::string"
        },
        {
          "name": "comment",
          "type": "processed_comment",
          "documentation": "Any comments associated with the object.\n\nOn the case of a UML note, represents the text of the note.\n"
        },
        {
          "name": "child_node_id",
          "type": "std::string",
          "documentation": "If the object is contained in another object, its node id.\n"
        },
        {
          "name": "connection",
          "type": "boost::optional<std::pair<std::string,std::string>>",
          "documentation": "Connections this object may have with other objects.\n"
        },
        {
          "name": "attributes",
          "type": "std::list<processed_attribute>",
          "documentation": "All attributes associated with dia object.\n"
        }
      ]
    },
    {
      "name": "dia_object_types",
      "documentation": "Identifier for the type of Dia object.\n",
      "stereotypes": [
        "yarn::enumeration"
      ],
      "fallback_element_type": "yarn::object",
      "attributes": [
        {
          "name": "uml_large_package",
          "type": "",
          "documentation": "A UML package\n"
        },
        {
          "name": "uml_class",
          "type": "",
          "documentation": "A UML class\n"
        },
        {
          "name": "uml_generalization",
          "type": "",
          "documentation": "UML Inheritance\n"
        },
        {
          "name": "uml_association",
          "type": "",
          "documentation": "UML Association\n"
        },
        {
          "name": "uml_note",
          "type": "",
          "documentation": "UML Note\n"
        },
        {
          "name": "uml_message",
          "type": "",
          "documentation": "UML Message\n"
        },
        {
          "name": "uml_realization",
          "type": "",
          "documentation": "UML Realization\n"
        }
      ]
    },
    {
      "name": "validator",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "validation_error",
      "documentation": "The object profile is not valid.\n",
      "stereotypes": [
        "yarn::exception"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "traits",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "processed_comment",
      "documentation": "Contains the same content as the original dia comment, but split by type of data.\n",
      "fallback_element_type": "yarn::object",
      "attributes": [
        {
          "name": "documentation",
          "type": "std::string",
          "documentation": "Text of the comment, excluding all Dogen instructions.\n"
        },
        {
          "name": "key_value_pairs",
          "type": "std::list<std::pair<std::string,std::string>>",
          "documentation": "Dogen instructions, in the key-value-pair form.\n"
        },
        {
          "name": "applicable_to_parent_object",
          "type": "bool",
          "documentation": "If true, the comment should be attached to the dia object containing it.\n"
        },
        {
          "name": "original_content",
          "type": "std::string",
          "documentation": "Content of the field as it was read from the dia object.\n"
        },
        {
          "name": "external_modules",
          "type": "std::string",
          "documentation": "The external module path, if any was supplied.\n"
        }
      ]
    },
    {
      "name": "initializer",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "building_error",
      "stereotypes": [
        "yarn::exception"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "exomodel_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "builder",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    },
    {
      "name": "adapter",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "yarn::object"
    }
  ]
}
