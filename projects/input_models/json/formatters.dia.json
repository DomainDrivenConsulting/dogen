{
  "root_module": {
    "name": {
      "simple": ""
    },
    "meta_name": {
      "simple": "module",
      "external_modules": "dogen",
      "model_modules": "yarn",
      "internal_modules": "meta_model"
    },
    "documentation": "Provides formatting code applicable to all formatters.\n\nThis model is the repository of all formatting related code\nwhich is not language specific. Language-specific models can\nthen make use of it.\n",
    "annotation": {
      "yarn.dia.comment": "true",
      "yarn.model_modules": "formatters",
      "yarn.external_modules": "dogen",
      "yarn.input_language": "cpp",
      "quilt.cpp.enabled": "true",
      "quilt.cpp.msbuild.enabled": "false",
      "quilt.cpp.visual_studio.project.enabled": "false",
      "quilt.cpp.visual_studio.solution.enabled": "false",
      "quilt.csharp.enabled": "false",
      "annotations.profile": "dogen.disable_odb_cmake"
    }
  },
  "elements": [
    {
      "name": {
        "simple": "artefact"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Artefact produced by a formatter.\n",
      "attributes": [
        {
          "name": {
            "simple": "path"
          },
          "unparsed_type": "boost::filesystem::path",
          "documentation": "Absolute path to the file, indicating the location in the filesystem where it will be written.\n"
        },
        {
          "name": {
            "simple": "content"
          },
          "unparsed_type": "std::string",
          "documentation": "Content of the file.\n"
        },
        {
          "name": {
            "simple": "overwrite"
          },
          "unparsed_type": "bool",
          "documentation": "Determines when to write the file.\n\nIf true, the file will always be written to the filesystem; if false, the file will\nonly be written to the filesystem if it does not exist.\n"
        },
        {
          "name": {
            "simple": "dependencies"
          },
          "unparsed_type": "std::vector<boost::filesystem::path>",
          "documentation": "Files in the project directory that this file depends on, but which are not generated.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "artefact_writer_interface"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "code_generation_marker_factory"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "comment_formatter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "boilerplate_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "header_guard_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "include_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "namespace_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "scoped_boilerplate_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "attributes": [
        {
          "name": {
            "simple": "stream_"
          },
          "unparsed_type": "std::ostream"
        },
        {
          "name": {
            "simple": "decoration_properties_"
          },
          "unparsed_type": "boost::optional<formatters::decoration_properties>"
        },
        {
          "name": {
            "simple": "includes_"
          },
          "unparsed_type": "std::list<std::string>"
        },
        {
          "name": {
            "simple": "header_guard_"
          },
          "unparsed_type": "std::string"
        }
      ]
    },
    {
      "name": {
        "simple": "scoped_namespace_formatter",
        "internal_modules": "cpp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "attributes": [
        {
          "name": {
            "simple": "stream_"
          },
          "unparsed_type": "std::ostream"
        },
        {
          "name": {
            "simple": "namespaces_"
          },
          "unparsed_type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": {
        "simple": "boilerplate_formatter",
        "internal_modules": "csharp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "namespace_formatter",
        "internal_modules": "csharp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "scoped_boilerplate_formatter",
        "internal_modules": "csharp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "scoped_namespace_formatter",
        "internal_modules": "csharp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "using_formatter",
        "internal_modules": "csharp"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "decoration_configuration"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "attributes": [
        {
          "name": {
            "simple": "generate_decoration"
          },
          "unparsed_type": "boost::optional<bool>"
        },
        {
          "name": {
            "simple": "copyright_notices"
          },
          "unparsed_type": "std::list<std::string>"
        },
        {
          "name": {
            "simple": "licence_name"
          },
          "unparsed_type": "std::string"
        },
        {
          "name": {
            "simple": "modeline_group_name"
          },
          "unparsed_type": "std::string"
        },
        {
          "name": {
            "simple": "marker_add_date_time"
          },
          "unparsed_type": "boost::optional<bool>"
        },
        {
          "name": {
            "simple": "marker_add_warning"
          },
          "unparsed_type": "boost::optional<bool>"
        },
        {
          "name": {
            "simple": "marker_message"
          },
          "unparsed_type": "std::string"
        }
      ]
    },
    {
      "name": {
        "simple": "decoration_formatter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "decoration_properties"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Configuration pertaining to file decoration.\n",
      "attributes": [
        {
          "name": {
            "simple": "generate_decoration"
          },
          "unparsed_type": "bool",
          "documentation": "If set to true, the decoration will be generated.\n"
        },
        {
          "name": {
            "simple": "modeline"
          },
          "unparsed_type": "boost::optional<modeline>",
          "documentation": "Modeline to use in this file, if any.\n"
        },
        {
          "name": {
            "simple": "licence"
          },
          "unparsed_type": "boost::optional<licence>",
          "documentation": "Licence to use in this file, if any.\n"
        },
        {
          "name": {
            "simple": "code_generation_marker"
          },
          "unparsed_type": "std::string",
          "documentation": "Code generation marker to use in this file.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "decoration_properties_factory"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "filesystem_writer"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "parents": [
        {
          "simple": "artefact_writer_interface"
        }
      ],
      "attributes": [
        {
          "name": {
            "simple": "force_write_"
          },
          "unparsed_type": "bool"
        }
      ]
    },
    {
      "name": {
        "simple": "indent_filter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "infix_configuration"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Configuration to use for a given infix in sequence formatter.\n",
      "stereotypes": [
        "yarn::fluent"
      ],
      "attributes": [
        {
          "name": {
            "simple": "first"
          },
          "unparsed_type": "std::string",
          "documentation": "Applicable only to the first element of a sequence, if the sequence has more\nthan one element.\n"
        },
        {
          "name": {
            "simple": "not_first"
          },
          "unparsed_type": "std::string",
          "documentation": "Applicable to all elements other than the first.\n"
        },
        {
          "name": {
            "simple": "not_last"
          },
          "unparsed_type": "std::string"
        },
        {
          "name": {
            "simple": "last"
          },
          "unparsed_type": "std::string",
          "documentation": "Only applicable to the last element of a sequence.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "licence"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Licence which the file is released under.\n",
      "attributes": [
        {
          "name": {
            "simple": "copyright_notices"
          },
          "unparsed_type": "std::list<std::string>",
          "documentation": "All copyright notices for the current file.\n"
        },
        {
          "name": {
            "simple": "text"
          },
          "unparsed_type": "std::string",
          "documentation": "Complete legal text for the licence.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "licence_text_hydrator"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "modeline"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Fields representing editor variables for emacs, vi, etc.\n\nA field is a key-value pair (KVP), where name is the first element and its value\nthe second.\n\nExample: -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\n\nIn this particular case, both prefix and postfix are @e -*-; @e mode is the first\nfield name and its value is @e c++; the KVP separator is @e : and the field\nseparator is @e ;.\n",
      "attributes": [
        {
          "name": {
            "simple": "name"
          },
          "unparsed_type": "std::string",
          "documentation": "Name of the modeline. Must be unique within a group.\n"
        },
        {
          "name": {
            "simple": "editor"
          },
          "unparsed_type": "editors",
          "documentation": "The modeline will use the syntax for this editor.\n"
        },
        {
          "name": {
            "simple": "location"
          },
          "unparsed_type": "modeline_locations",
          "documentation": "Where to place the modeline.\n"
        },
        {
          "name": {
            "simple": "fields"
          },
          "unparsed_type": "std::list<modeline_field>",
          "documentation": "List of all the parameters in the preamble, in order of appearence.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "modeline_field"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Entry in a modeline.\n",
      "attributes": [
        {
          "name": {
            "simple": "name"
          },
          "unparsed_type": "std::string",
          "documentation": "Name of the field.\n"
        },
        {
          "name": {
            "simple": "value"
          },
          "unparsed_type": "std::string",
          "documentation": "Value for the field. Can be empty.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "modeline_formatter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "modeline_group"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Group of modelines, logically associated.\n\nFor example, one may choose to have a set of modelines for @e emacs , or for\n@e vi, etc.\n",
      "attributes": [
        {
          "name": {
            "simple": "name"
          },
          "unparsed_type": "std::string",
          "documentation": "Name of the modeline group. Must be unique\n"
        },
        {
          "name": {
            "simple": "modelines"
          },
          "unparsed_type": "std::unordered_map<std::string,modeline>",
          "documentation": "All the modelines for this group.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "modeline_group_hydrator"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "repository"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "attributes": [
        {
          "name": {
            "simple": "modeline_groups"
          },
          "unparsed_type": "std::unordered_map<std::string,modeline_group>"
        },
        {
          "name": {
            "simple": "licence_texts"
          },
          "unparsed_type": "std::unordered_map<std::string,std::string>"
        }
      ]
    },
    {
      "name": {
        "simple": "repository_factory"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "sequence_formatter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "attributes": [
        {
          "name": {
            "simple": "element_separator_"
          },
          "unparsed_type": "std::string"
        },
        {
          "name": {
            "simple": "sequence_size_"
          },
          "unparsed_type": "unsigned int"
        }
      ]
    },
    {
      "name": {
        "simple": "stream_writer"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "parents": [
        {
          "simple": "artefact_writer_interface"
        }
      ],
      "attributes": [
        {
          "name": {
            "simple": "stream_"
          },
          "unparsed_type": "std::ostream"
        }
      ]
    },
    {
      "name": {
        "simple": "traits"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ]
    },
    {
      "name": {
        "simple": "utility_formatter"
      },
      "meta_name": {
        "simple": "object",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "stereotypes": [
        "handcrafted"
      ],
      "attributes": [
        {
          "name": {
            "simple": "stream_"
          },
          "unparsed_type": "std::ostream"
        }
      ]
    },
    {
      "name": {
        "simple": "cpp"
      },
      "meta_name": {
        "simple": "module",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      }
    },
    {
      "name": {
        "simple": "csharp"
      },
      "meta_name": {
        "simple": "module",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      }
    },
    {
      "name": {
        "simple": "comment_styles"
      },
      "meta_name": {
        "simple": "enumeration",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Supported styles of comments.\n",
      "enumerators": [
        {
          "name": {
            "simple": "c_style"
          },
          "documentation": "Original C programming language style.\n"
        },
        {
          "name": {
            "simple": "cpp_style"
          },
          "documentation": "One line, C++ style.\n"
        },
        {
          "name": {
            "simple": "csharp_style"
          },
          "documentation": "C# programming language style.\n"
        },
        {
          "name": {
            "simple": "shell_style"
          },
          "documentation": "Comments start with a hash.\n"
        },
        {
          "name": {
            "simple": "sql_style"
          },
          "documentation": "Comments start with a double-dash.\n"
        },
        {
          "name": {
            "simple": "xml_style"
          }
        }
      ]
    },
    {
      "name": {
        "simple": "editors"
      },
      "meta_name": {
        "simple": "enumeration",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Supported editors for modelines.\n",
      "enumerators": [
        {
          "name": {
            "simple": "emacs"
          },
          "documentation": "The emacs editor\n"
        },
        {
          "name": {
            "simple": "vi"
          },
          "documentation": "The generic vi editor\n"
        },
        {
          "name": {
            "simple": "vim"
          },
          "documentation": "The vi-like editor vim.\n"
        },
        {
          "name": {
            "simple": "ex"
          },
          "documentation": "The old ex editor.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "modeline_locations"
      },
      "meta_name": {
        "simple": "enumeration",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Location in the file to place the modeline.\n",
      "enumerators": [
        {
          "name": {
            "simple": "top"
          },
          "documentation": "Very first line in file.\n"
        },
        {
          "name": {
            "simple": "bottom"
          },
          "documentation": "Very last line in file.\n"
        }
      ]
    },
    {
      "name": {
        "simple": "quote_types"
      },
      "meta_name": {
        "simple": "enumeration",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "Types of quotes that can be used in streaming.\n",
      "enumerators": [
        {
          "name": {
            "simple": "single_quote"
          }
        },
        {
          "name": {
            "simple": "double_quote"
          }
        }
      ]
    },
    {
      "name": {
        "simple": "spacing_types"
      },
      "meta_name": {
        "simple": "enumeration",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "enumerators": [
        {
          "name": {
            "simple": "no_space"
          }
        },
        {
          "name": {
            "simple": "left_space"
          }
        },
        {
          "name": {
            "simple": "right_space"
          }
        },
        {
          "name": {
            "simple": "left_and_right_space"
          }
        }
      ]
    },
    {
      "name": {
        "simple": "building_error"
      },
      "meta_name": {
        "simple": "exception",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "An error occurred while the factory was building.\n"
    },
    {
      "name": {
        "simple": "formatting_error"
      },
      "meta_name": {
        "simple": "exception",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "An error has occurred while formatting.\n"
    },
    {
      "name": {
        "simple": "hydration_error"
      },
      "meta_name": {
        "simple": "exception",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      }
    },
    {
      "name": {
        "simple": "writing_error"
      },
      "meta_name": {
        "simple": "exception",
        "external_modules": "dogen",
        "model_modules": "yarn",
        "internal_modules": "meta_model"
      },
      "documentation": "An error ocrurred whilst writing.\n"
    }
  ]
}
