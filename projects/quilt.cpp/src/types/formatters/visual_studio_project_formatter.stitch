<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/visual_studio_project.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/visual_studio_project_formatter.hpp" #>
<#+

std::string visual_studio_project_formatter::static_artefact() {
    return traits::visual_studio_project_archetype();
}

std::string visual_studio_project_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location visual_studio_project_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::kernel(),
          traits::visual_studio_facet(),
          visual_studio_project_formatter::static_artefact());
    return r;
}

std::type_index visual_studio_project_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(fabric::visual_studio_project)));
    return r;
}

inclusion_support_types
visual_studio_project_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path visual_studio_project_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {
    
    using namespace dogen::utility::log;
    using namespace dogen::quilt::cpp::formatters;
    static logger lg(logger_factory(static_artefact()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path visual_studio_project_formatter::
full_path(const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_project(n, static_artefact());
}

std::list<std::string> visual_studio_project_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact
visual_studio_project_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& vsp(a.as<fabric::visual_studio_project>(static_artefact(), e));

#>
<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{<#= vsp.project_guid() #>}</ProjectGuid>
    <OutputType>Library</OutputType>
    <RootNamespace><#= vsp.project_name() #></RootNamespace>
    <AssemblyName><#= vsp.project_name() #></AssemblyName>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug</OutputPath>
    <DefineConstants>DEBUG;</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>full</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release</OutputPath>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <ConsolePause>false</ConsolePause>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
  </ItemGroup>
  <ItemGroup>
<#+
    for (const auto& f : ctx.model().project_items())
#>
    <Compile Include="<#= f #>" />
  </ItemGroup>
  <Import Project="$(MSBuildBinPath)\Microsoft.Cpp.targets" />
</Project>
<#+
    return a.make_artefact();
}
#>
