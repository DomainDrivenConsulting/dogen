<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/visual_studio_solution.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/visual_studio_solution_formatter.hpp" #>
<#+

std::string visual_studio_solution_formatter::static_artefact() {
    return traits::visual_studio_solution_archetype();
}

std::string visual_studio_solution_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location visual_studio_solution_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::kernel(),
          traits::visual_studio_facet(),
          visual_studio_solution_formatter::static_artefact());
    return r;
}

std::type_index visual_studio_solution_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(fabric::visual_studio_solution)));
    return r;
}

inclusion_support_types
visual_studio_solution_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path visual_studio_solution_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {
    
    using namespace dogen::utility::log;
    using namespace dogen::quilt::cpp::formatters;
    static logger lg(logger_factory(static_artefact()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path visual_studio_solution_formatter::
full_path(const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_solution(n, static_artefact());
}

std::list<std::string> visual_studio_solution_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact
visual_studio_solution_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& vsl(a.as<fabric::visual_studio_solution>(static_artefact(), e));
#>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{<#= vsl.project_solution_guid() #>}") = "<#= vsl.project_name() #>", "<#= vsl.project_name() #>.csproj", "{<#= vsl.project_guid() #>}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{<#= vsl.project_guid() #>}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{<#= vsl.project_guid() #>}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{<#= vsl.project_guid() #>}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{<#= vsl.project_guid() #>}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(MonoDevelopProperties) = preSolution
		StartupItem = CppModel.vcxroj
	EndGlobalSection
EndGlobal
<#+
    return a.make_artefact();
}
#>
