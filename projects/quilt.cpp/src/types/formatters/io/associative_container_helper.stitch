<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/associative_container_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#+

std::string associative_container_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string associative_container_helper::family() const {
    static std::string r("AssociativeContainer");
    return r;
}

std::list<std::string>
associative_container_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        io::traits::class_implementation_formatter_name(),
        types::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
associative_container_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        io::traits::facet_name(),
        types::traits::facet_name()
    });
    return r;
}

std::string associative_container_helper::helper_name() const {
    static std::string r("associative_container_helper");
    return r;
}

bool associative_container_helper::is_enabled(const assistant& a,
    const properties::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

void associative_container_helper::
format(assistant& a, const properties::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto qn(d.name_tree_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));

        if (hp.direct_descendants().size() == 2) {
            const auto key(hp.direct_descendants().front());
            const auto value(hp.direct_descendants().back());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= qn #>& v) {
    s << "[";
    for (auto i(v.begin()); i != v.end(); ++i) {
        if (i != v.begin()) s << ", ";
        s << "[ { " << "\"__type__\": " << "\"key\"" << ", " << "\"data\": ";
        s << <#= a.streaming_for_type(key, "i->first") #>;
        s << " }, { " << "\"__type__\": " << "\"value\"" << ", " << "\"data\": ";
        s << <#= a.streaming_for_type(value, "i->second") #>;
        s << " } ]";
    }
    s << " ] ";
    return s;
}

<#+
        } else {
        const auto containee(hp.direct_descendants().front());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= qn #>& v) {
    s << "[ ";
    for (auto i(v.begin()); i != v.end(); ++i) {
        if (i != v.begin()) s << ", ";
        s << <#= a.streaming_for_type(containee, "*i") #>;
    }
    s << "] ";
    return s;
}

<#+
        }
    }
#>

<#+
}
#>
