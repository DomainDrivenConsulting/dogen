<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/inserter_implementation_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    assistant& a, const yarn::object& o) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        a.add_helper_methods();

        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto sn(o.name().simple());
            const auto qn(a.get_qualified_name(o.name()));
            const bool no_arg(!o.is_parent() && !o.parent() &&
                o.local_attributes().empty());
#>

std::ostream& operator<<(std::ostream& s, const <#= sn #>&<#= (no_arg ? "" : " v")  #>) {
<#+
            if (o.is_parent() || o.parent()) {
#>
    v.to_stream(s);
    return(s);
<#+
            } else
                io::inserter_implementation_helper_stitch(a, o, false/*inside_class*/);
#>
}

<#+
        } // snf
    } // sbf
    return a.make_file();
}
#>
