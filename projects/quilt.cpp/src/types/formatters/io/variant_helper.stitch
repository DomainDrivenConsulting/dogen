<#@ annotations.profile=dogen.stitch #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/variant_helper.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#+

std::string variant_helper::formatter_name() const {
    static auto r(std::string("<") + traits::facet() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string variant_helper::family() const {
    static std::string r("BoostVariant");
    return r;
}

std::list<std::string> variant_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        io::traits::class_implementation_archetype(),
        types::traits::class_implementation_archetype()
    });
    return r;
}

std::list<std::string> variant_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        io::traits::facet(), types::traits::facet()
    });
    return r;
}

std::string variant_helper::helper_name() const {
    static std::string r("variant_helper");
    return r;
}

bool variant_helper::is_enabled(const assistant& a,
const formattables::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

void variant_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
#>

struct <#= d.name_tree_identifiable() #>_visitor : public boost::static_visitor<> {
    <#= d.name_tree_identifiable() #>_visitor(std::ostream& s) : stream_(s) {
        s << "{ " << "\"__type__\": " << "\"<#= d.name_qualified() #>\"" << ", ";
        s << "\"data\": ";
    }

    ~<#= d.name_tree_identifiable() #>_visitor() { stream_ << " }"; }
<#+
        for (const auto& dd : hp.direct_descendants()) {
#>

    void operator()(const <#= dd.name_qualified() #><#= (dd.is_simple_type() ? "" : "&") #> v) const {
<#+
            if (dd.is_simple_type()) {
#>
        stream_ << "{ " << "\"__type__\": " << "\"<#= dd.name_qualified() #>\"" << ", ";
        stream_ << "\"value\": ";
        stream_ << <#= a.streaming_for_type(dd, "v") #>;
        stream_ << " }";
<#+
            } else
#>
        stream_ << <#= a.streaming_for_type(dd, "v") #>;
    }
<#+
        }
#>

private:
    std::ostream& stream_;
};

inline std::ostream& operator<<(std::ostream& s, const <#= d.name_tree_qualified() #>& v) {
    boost::apply_visitor(<#= d.name_tree_identifiable() #>_visitor(s), v);
    return s;
}

<#+
    }
#>

<#+
}
#>
