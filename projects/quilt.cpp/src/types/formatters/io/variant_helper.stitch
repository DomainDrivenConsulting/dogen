<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/variant_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#+

std::string variant_helper::family() const {
    static std::string r("Variant");
    return r;
}

std::list<std::string> variant_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        traits::class_implementation_formatter_name()
    });
    return r;
}

bool variant_helper::requires_explicit_call() const {
    return false;
}

std::string variant_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

bool variant_helper::is_enabled(const assistant& /*a*/,
const properties::helper_properties& /*hp*/) const {
    return true;
}

void variant_helper::
format(assistant& a, const properties::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
#>

struct <#= d.name_tree_identifiable() #>_visitor : public boost::static_visitor<> {
    <#= d.name_tree_identifiable() #>_visitor(std::ostream& s) : stream_(s) {
        s << "{ " << "\"__type__\": " << "\"<#= d.name_qualified() #>\"" << ", ";
        s << "\"data\": ";
    }

    ~<#= d.name_tree_identifiable() #>_visitor() { stream_ << " }"; }
<#+
        for (const auto& dd : hp.direct_descendants()) {
#>

    void operator()(const <#= dd.name_qualified() #><#= (dd.is_primitive() ? "" : "&") #> v) const {
<#+
            if (dd.is_primitive()) {
#>
        stream_ << "{ " << "\"__type__\": " << "\"<#= dd.name_qualified() #>\"" << ", ";
        stream_ << "\"value\": ";
        stream_ << <#= a.streaming_for_type(dd, "v") #>;
        stream_ << " }";
<#+
            } else
#>
        stream_ << <#= a.streaming_for_type(dd, "v") #>;
    }
<#+
        }
#>

private:
    std::ostream& stream_;
};

inline std::ostream& operator<<(std::ostream& s, const <#= d.name_tree_qualified() #>& v) {
    boost::apply_visitor(<#= d.name_tree_identifiable() #>_visitor(s), v);
    return s;
}

<#+
    }
#>

<#+
}

void variant_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {

    {
        auto snf(a.make_scoped_namespace_formatter(t.namespaces()));
#>

struct <#= t.complete_identifiable_name() #>_visitor : public boost::static_visitor<> {
    <#= t.complete_identifiable_name() #>_visitor(std::ostream& s) : stream_(s) {
        s << "{ " << "\"__type__\": " << "\"<#= t.name() #>\"" << ", ";
        s << "\"data\": ";
    }

    ~<#= t.complete_identifiable_name() #>_visitor() { stream_ << " }"; }
<#+
        for (const auto& c : t.children()) {
#>

    void operator()(const <#= c.name() #><#= (c.is_primitive() ? "" : "&") #> v) const {
<#+
            if (c.is_primitive()) {
#>
        stream_ << "{ " << "\"__type__\": " << "\"<#= c.name() #>\"" << ", ";
        stream_ << "\"value\": ";
        stream_ << <#= a.streaming_for_type(c, "v") #>;
        stream_ << " }";
<#+
            } else
#>
        stream_ << <#= a.streaming_for_type(c, "v") #>;
    }
<#+
        }
#>

private:
    std::ostream& stream_;
};

inline std::ostream& operator<<(std::ostream& s, const <#= t.complete_name() #>& v) {
    boost::apply_visitor(<#= t.complete_identifiable_name() #>_visitor(s), v);
    return s;
}

<#+
    }
#>

<#+
}
#>
