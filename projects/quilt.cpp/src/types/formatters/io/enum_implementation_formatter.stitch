<#@ annotations.profile=dogen.stitch #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/io/enum_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#+

dogen::formatters::artefact enum_implementation_formatter_stitch(
    assistant& a, const yarn::enumeration& e) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

std::ostream& operator<<(std::ostream& s, const <#= e.name().simple() #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= e.name().simple() #>\", " << "\"value\": ";

    std::string attr;
    switch (v) {
<#+
            for (const auto& en : e.enumerators()) {
#>
    case <#= e.name().simple() #>::<#= en.name() #>:
        attr = "\"<#= en.name() #>\"";
        break;
<#+
            }
#>
    default:
        throw std::invalid_argument("Invalid value for <#= e.name().simple() #>");
    }
    s << attr << " }";
    return s;
}

<#+
         } // snf
    } // sbf
    return a.make_artefact();
}

#>
