<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::io #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/enum_implementation_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_implementation_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum_implementation #>
<#@ stitch.wale.kvp.yarn_element=yarn::enumeration #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> enum_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::element& e) const {
    auto builder(f.make());

    builder.add(inclusion_constants::std::ostream());
    builder.add(inclusion_constants::std::stdexcept());
    builder.add(inclusion_constants::std::string());

    const auto eh_fn(traits::enum_header_archetype());
    builder.add(e.name(), eh_fn);
    return builder.build();
}

dogen::formatters::artefact enum_implementation_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& ye(a.as<yarn::enumeration>(static_artefact(), e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(ye.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

std::ostream& operator<<(std::ostream& s, const <#= ye.name().simple() #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= ye.name().simple() #>\", " << "\"value\": ";

    std::string attr;
    switch (v) {
<#+
            for (const auto& en : ye.enumerators()) {
#>
    case <#= ye.name().simple() #>::<#= en.name().simple() #>:
        attr = "\"<#= en.name().simple() #>\"";
        break;
<#+
            }
#>
    default:
        throw std::invalid_argument("Invalid value for <#= ye.name().simple() #>");
    }
    s << attr << " }";
    return s;
}

<#+
         } // snf
    } // sbf
    return a.make_artefact();
}

#>
