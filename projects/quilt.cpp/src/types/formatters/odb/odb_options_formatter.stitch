<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::odb #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency=<boost/algorithm/string/case_conv.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/odb_options.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/odb_options_formatter.hpp" #>
<#+

std::string odb_options_formatter::static_artefact() {
    return traits::odb_options_archetype();
}

std::string odb_options_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
odb_options_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::kernel(),
          traits::facet(), odb_options_formatter::static_artefact());
    return r;
}

std::type_index odb_options_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(fabric::odb_options)));
    return r;
}

inclusion_support_types odb_options_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path odb_options_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {
    using namespace dogen::utility::log;
    static logger
        lg(logger_factory("quilt.cpp.formatters.odb.odb_options_formatter"));

        const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path odb_options_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_odb_options(n, static_artefact());
}

std::list<std::string> odb_options_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact odb_options_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& o(a.as<fabric::odb_options>(static_artefact(), e));

    {
        a.make_decoration_preamble();

        const auto model_name(a.get_identifiable_model_name(o.name()));
        const auto product_name(a.get_product_name(o.name()));
        const auto odb_folder(a.get_odb_facet_directory());
#>
# enable C++11. FIXME: causes ODB crash in options file.
# --std c++11

# target postgres
--database pgsql

# use the boost profile
--profile boost

# generate queries and embedded schemas
--generate-query
--generate-schema
--schema-format embedded

# use extensions similar to the dogen ones
# --ixx-suffix .ipp
# --hxx-suffix .hpp
--cxx-suffix .cpp

# fix domain includes
--include-regex '%(.*).hpp%<#= product_name #>/<#= model_name #>/types/$1.hpp%'

# fix odb generated includes
--include-regex '%(^[a-zA-Z0-9_]+)-odb.(.*)%<#= product_name #>/<#= model_name #>/odb/$1-odb.$2%'
--include-regex '%<#= product_name #>/<#= model_name #>/types/(.*)-odb.(.*)%<#= product_name #>/<#= model_name #>/odb/$1-odb.$2%'

# debug regexes
# --include-regex-trace

# make the header guards similar to dogen ones
--guard-prefix <#= boost::to_upper_copy(product_name) #>_<#= boost::to_upper_copy(model_name) #>_<#= boost::to_upper_copy(odb_folder) #>
<#+
    } // sbf
    return a.make_artefact();
}
#>
