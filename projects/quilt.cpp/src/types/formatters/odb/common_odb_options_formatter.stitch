<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::odb #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency=<boost/algorithm/string/case_conv.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/common_odb_options.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/common_odb_options_formatter.hpp" #>
<#+

std::string common_odb_options_formatter::static_artefact() {
    return traits::common_odb_options_archetype();
}

std::string common_odb_options_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
common_odb_options_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::kernel(),
          traits::facet(), common_odb_options_formatter::static_artefact());
    return r;
}

std::type_index common_odb_options_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(fabric::common_odb_options)));
    return r;
}

inclusion_support_types common_odb_options_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path common_odb_options_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {
    using namespace dogen::utility::log;
    static logger
        lg(logger_factory("quilt.cpp.formatters.odb.common_odb_options_formatter"));

        const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path common_odb_options_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_odb_options(n, static_artefact());
}

std::list<std::string> common_odb_options_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact common_odb_options_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& o(a.as<fabric::common_odb_options>(static_artefact(), e));

    {
        a.make_decoration_preamble();

        if (!a.is_cpp_standard_98()) {
#>
# enable C++11
--std c++11

<#+
        }

        if (!o.sql_name_case().empty()) {
#>
# casing
--sql-name-case <#= o.sql_name_case().empty() #>

<#+
        }

        if (o.databases().size() > 1) {
#>
# enable multi-database support
--multi-database static

<#+
        }

        if (!o.databases().empty()) {
#>
# target databases
<#+

            for (const auto& d : o.databases())
#>
--database <#= d #>

<#+
        }
#>
# use the boost profile
--profile boost

# generate queries and embedded schemas
--generate-query
--generate-schema
--schema-format embedded

# force odb extensions to be different from dogen ones just in case.
--ixx-suffix .ixx
--hxx-suffix .hxx
--cxx-suffix .cxx

# debug regexes
# --include-regex-trace
<#+
    } // sbf
    return a.make_artefact();
}
#>
