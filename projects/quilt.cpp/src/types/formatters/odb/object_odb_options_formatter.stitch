<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::odb #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency=<boost/algorithm/string/case_conv.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/meta_model/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/object_odb_options.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/object_odb_options_formatter.hpp" #>
<#+

std::string object_odb_options_formatter::static_artefact() {
    return traits::object_odb_options_archetype();
}

std::string object_odb_options_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
object_odb_options_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::backend(),
          traits::facet(), object_odb_options_formatter::static_artefact());
    return r;
}

const yarn::meta_model::name& object_odb_options_formatter::meta_name() const {
    static auto r(fabric::meta_name_factory::make_object_odb_options_name());
    return r;
}

inclusion_support_types
object_odb_options_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path object_odb_options_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::meta_model::name& n) const {
    using namespace dogen::utility::log;
    static logger lg(logger_factory(
            "quilt.cpp.formatters.odb.object_odb_options_formatter"));

        const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path object_odb_options_formatter::full_path(
    const formattables::locator& l, const yarn::meta_model::name& n) const {
    return l.make_full_path_for_odb_options(n, static_artefact());
}

std::list<std::string> object_odb_options_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::meta_model::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact object_odb_options_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& ooo(a.as<fabric::object_odb_options>(e));

    {
        const auto cs(dogen::formatters::comment_styles::shell_style);
        a.make_decoration_preamble(cs, e);
#>
# epilogue
--odb-epilogue <#= ooo.epilogue() #>

<#+
        if (!ooo.include_regexes().empty()) {
#>
# regexes
<#+
            for (const auto& regex : ooo.include_regexes())
#>
--include-regex <#= regex #>

# debug regexes
# --include-regex-trace

# make the header guards similar to dogen ones
--guard-prefix <#= ooo.header_guard_prefix() #>
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
