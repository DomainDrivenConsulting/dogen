<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::odb #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/class_header_formatter.hpp" #>
<#+

std::string class_header_formatter::static_artefact() {
    return traits::class_header_archetype();
}

std::string class_header_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
class_header_formatter::archetype_location() const {
    static annotations::archetype_location
        r(formatters::traits::kernel(), traits::facet(),
            class_header_formatter::static_artefact());
    return r;
}

std::type_index class_header_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(yarn::object)));
    return r;
}

inclusion_support_types class_header_formatter::inclusion_support_type() const {
    return inclusion_support_types::canonical_support;
}

boost::filesystem::path class_header_formatter::inclusion_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_inclusion_path_for_cpp_header(n, static_artefact());
}

boost::filesystem::path class_header_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_cpp_header(n, static_artefact());
}

std::list<std::string> class_header_formatter::inclusion_dependencies(
    const formattables::inclusion_dependencies_builder_factory& f,
    const yarn::element& e) const {
    const auto& o(assistant::as<yarn::object>(static_artefact(), e));
    auto builder(f.make());
    builder.add(o.name(), types::traits::class_header_archetype());

    const auto carch(traits::canonical_archetype());
    builder.add(o.transparent_associations(), carch);
    builder.add(o.opaque_associations(), carch);

    const auto self_fn(class_header_formatter::static_artefact());
    builder.add(o.parent(), self_fn);

    return builder.build();
}

dogen::formatters::artefact
class_header_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
    const auto& o(a.as<yarn::object>(static_artefact(), e));

    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        const auto top_level_pragmas(a.get_odb_pragmas());
        if (top_level_pragmas.empty()) {
#>
// class has no ODB pragmas defined.

<#+
        } else {
            {
                const auto ns(a.make_namespaces(o.name()));
                auto snf(a.make_scoped_namespace_formatter(ns));
#>

#ifdef ODB_COMPILER

<#+
                for (const auto& pg : top_level_pragmas)
#>
#pragma db object(<#= sn #>) <#= pg #>
<#+

                bool is_first(true);
                for (const auto& attr : o.local_attributes()) {
                    const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().id()));
                    for (const auto pg : attr_level_pragmas) {
                        if (is_first)
#>

<#+
                        is_first = false;
#>
#pragma db member(<#= sn #>::<#= a.make_member_variable_name(attr) #>) <#= pg #>
<#+
                    }
                }
#>

#endif

<#+
            }
#>

<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
