<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::odb #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/odb/class_header_formatter_stitch.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#+

dogen::formatters::artefact
class_header_formatter_stitch(assistant& a, const yarn::object& o) {

    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        const auto top_level_pragmas(a.get_odb_pragmas());
        if (top_level_pragmas.empty()) {
#>
// class has no ODB pragmas defined.

<#+
        } else {
            {
                const auto ns(a.make_namespaces(o.name()));
                auto snf(a.make_scoped_namespace_formatter(ns));
#>

#ifdef ODB_COMPILER

<#+
                for (const auto& pg : top_level_pragmas)
#>
#pragma db object(<#= sn #>) <#= pg #>
<#+

                bool is_first(true);
                for (const auto& attr : o.local_attributes()) {
                    const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().id()));
                    for (const auto pg : attr_level_pragmas) {
                        if (is_first)
#>

<#+
                        is_first = false;
#>
#pragma db member(<#= sn #>::<#= a.make_member_variable_name(attr) #>) <#= pg #>
<#+
                    }
                }
#>

#endif

<#+
            }
#>

<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
