<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/domain_type_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

std::string domain_type_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string domain_type_helper::family() const {
    static std::string r("Fallback");
    return r;
}

std::list<std::string>
domain_type_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        test_data::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
domain_type_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        test_data::traits::facet_name()
    });
    return r;
}

bool domain_type_helper::requires_explicit_call() const {
    return false;
}

bool domain_type_helper::is_enabled(const assistant& a,
    const properties::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

std::string domain_type_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

std::string domain_type_helper::helper_name() const {
    static std::string r("domain_type_helper");
    return r;
}

void domain_type_helper::
format(assistant& a, const properties::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const bool is_pointer(false);
    const bool is_recursive(false);

    if (is_recursive) {
#>

<#= qn #><#= (is_pointer ? "*" : "") #>
create_<#= ident #><#= (is_pointer ? "_ptr" : "") #>(const unsigned int) {
<#+
        if (is_pointer) {
#>
    return nullptr;
<#+
        } else {
#>
    return <#= qn #>();
<#+
        }
#>
}
<#+
    } else {
#>

<#= qn #><#= (is_pointer ? "*" : "") #>
create_<#= ident #><#= (is_pointer ? "_ptr" : "") #>(const unsigned int position) {
    return <#= qn #>_generator::create<#= (is_pointer ? "_ptr" : "") #>(position);
}
<#+
    }
}

void domain_type_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t,
    const bool as_pointer) {
#>

<#= t.complete_name() #><#= (as_pointer ? "*" : "") #>
create_<#= t.complete_identifiable_name() #><#= (as_pointer ? "_ptr" : "") #>(const unsigned int position) {
    return <#= t.complete_name() #>_generator::create<#= (as_pointer ? "_ptr" : "") #>(position);
}
<#+
}
#>
