<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/associative_container_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

std::string associative_container_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string associative_container_helper::family() const {
    static std::string r("AssociativeContainer");
    return r;
}

std::list<std::string>
associative_container_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        test_data::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
associative_container_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        test_data::traits::facet_name()
    });
    return r;
}

bool associative_container_helper::requires_explicit_call() const {
    return false;
}

std::string associative_container_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

bool associative_container_helper::is_enabled(const assistant& a,
    const properties::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

std::string associative_container_helper::helper_name() const {
    static std::string r("associative_container_helper");
    return r;
}

void associative_container_helper::
format(assistant& a, const properties::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
#>

<#= qn #> create_<#= ident #>(unsigned int position) {
    <#= qn #> r;
    for (unsigned int i(0); i < 4; ++i) {
<#+
    if (hp.direct_descendants().size() == 1) {
        const auto containee(hp.direct_descendants().front());
#>
        r.insert(create_<#= containee.name_tree_identifiable() #>(position + i));
<#+
    } else if (hp.direct_descendants().size() == 2) {
        const auto key(hp.direct_descendants().front());
        const auto value(hp.direct_descendants().back());
#>
        r.insert(std::make_pair(create_<#= key.name_tree_identifiable() #>(position + i), create_<#= value.name_tree_identifiable() #>(position + i)));
<#+
    }
#>
    }
    return r;
}
<#+
}

void associative_container_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {
#>

<#= t.complete_name() #> create_<#= t.complete_identifiable_name() #>(unsigned int position) {
    <#= t.complete_name() #> r;
    for (unsigned int i(0); i < 4; ++i) {
<#+
    if (t.children().size() == 1) {
        const auto containee(t.children().front());
#>
        r.insert(create_<#= containee.complete_identifiable_name() #>(position + i));
<#+
    } else if (t.children().size() == 2) {
        const auto key(t.children().front());
        const auto value(t.children().back());

#>
        r.insert(std::make_pair(create_<#= key.complete_identifiable_name() #>(position + i), create_<#= value.complete_identifiable_name() #>(position + i)));
<#+
    }
#>
    }
    return r;
}
<#+
}
#>
