<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/pair_helper.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=Pair #>
<#@ stitch.wale.kvp.class.simple_name=pair_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void pair_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto first(hp.direct_descendants().front());
    const auto second(hp.direct_descendants().back());
#>

<#= qn #>
create_<#= ident #>(unsigned int position) {
    <#= qn #> r(
        create_<#= first.name_tree_identifiable() #>(position),
        create_<#= second.name_tree_identifiable() #>(position));
    return r;
}
<#+
}
#>
