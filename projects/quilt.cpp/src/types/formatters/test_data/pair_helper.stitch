<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/pair_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

std::string pair_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string pair_helper::family() const {
    static std::string r("Pair");
    return r;
}

std::list<std::string>
pair_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        test_data::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
pair_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        test_data::traits::facet_name()
    });
    return r;
}

bool pair_helper::is_enabled(const assistant& /*a*/,
    const formattables::helper_properties& /*hp*/) const {
    return true;
}

std::string pair_helper::helper_name() const {
    static std::string r("pair_helper");
    return r;
}

void pair_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto first(hp.direct_descendants().front());
    const auto second(hp.direct_descendants().back());
#>

<#= qn #>
create_<#= ident #>(unsigned int position) {
    <#= qn #> r(
        create_<#= first.name_tree_identifiable() #>(position),
        create_<#= second.name_tree_identifiable() #>(position));
    return r;
}
<#+
}
#>
