<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/string_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+


std::string string_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string string_helper::family() const {
    static std::string r("String");
    return r;
}

std::list<std::string>
string_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        test_data::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
string_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        test_data::traits::facet_name()
    });
    return r;
}

bool string_helper::is_enabled(const assistant& /*a*/,
    const properties::helper_properties& /*hp*/) const {
    return true;
}

std::string string_helper::helper_name() const {
    static std::string r("string_helper");
    return r;
}

void string_helper::
format(assistant& a, const properties::helper_properties& /*hp*/) const {
#>

std::string create_std_string(const unsigned int position) {
    std::ostringstream s;
    s << "a_string_" << position;
    return s.str();
}
<#+
}
#>
