<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/path_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/properties/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

std::string path_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string path_helper::family() const {
    static std::string r("Path");
    return r;
}

std::list<std::string>
path_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        test_data::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
path_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        test_data::traits::facet_name()
    });
    return r;
}

bool path_helper::requires_explicit_call() const {
    return false;
}

std::string path_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

bool path_helper::is_enabled(const assistant& a,
    const properties::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

std::string path_helper::helper_name() const {
    static std::string r("path_helper");
    return r;
}

void path_helper::
format(assistant& /*a*/, const properties::helper_properties& /*hp*/) const {
}

void path_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {
#>

<#= t.complete_name() #>
create_<#= t.complete_identifiable_name() #>(const unsigned int position) {
    std::ostringstream s;
    s << "/a/path/number_" << position;
    return <#= t.name() #>(s.str());
}
<#+
}
#>
