<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/int_helper.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=Number #>
<#@ stitch.wale.kvp.class.simple_name=int_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void int_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
#>

<#= qn #> create_<#= ident #>(const unsigned int position) {
<#+
    // FIXME: hack, and not even a good one! position is unsigned
    if (qn == "int")
#>
    return position;
<#+
    else
#>
    return static_cast<<#= qn #>>(position);
}
<#+
}
#>
