<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/meta_model/primitive.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/primitive_implementation_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=primitive_implementation_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=primitive_implementation #>
<#@ stitch.wale.kvp.yarn_element=yarn::meta_model::primitive #>
<#@ stitch.wale.kvp.meta_element=primitive #>
<#@ stitch.wale.kvp.meta_name_factory=yarn::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::meta_model::element& e) const {

    const auto& p(assistant::as<yarn::meta_model::primitive>(static_artefact(), e));
    auto builder(f.make());
    builder.add(p.name(), traits::primitive_header_archetype());

    const auto carch(traits::canonical_archetype());
    builder.add(p.value_attribute().parsed_type().current(), carch);

    return builder.build();
}

dogen::formatters::artefact primitive_implementation_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& p(a.as<yarn::meta_model::primitive>(static_artefact(), e));

    const auto sn(p.name().simple());
    const auto qn(a.get_qualified_name(p.name()));
    {

        auto sbf(a.make_scoped_boilerplate_formatter(e));
#>
namespace {
<#+
        a.add_helper_methods(p.name().id());
#>

}

<#+
        {
            const auto attr(p.value_attribute());
            const auto ns(a.make_namespaces(p.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));

            /*
             * Default constructor.
             */
#>

<#= sn #>_generator::<#= sn #>_generator() : position_(0) { }
<#+
            /*
             * Populate method.
             */
            if (!p.is_immutable()) {
#>

void <#= sn #>_generator::
populate(const unsigned int position, result_type& v) {
    v.<#= attr.name().simple() #>(create_<#= attr.parsed_type().identifiable() #>(position + 1));
}
<#+
            }

            /*
             * Create method.
             */
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::create(const unsigned int position) {
<#+
            if (p.is_immutable()) {
#>
    return <#= sn #>(create_<#= attr.parsed_type().identifiable() #>(position + 1));
<#+
            } else {
#>
    <#= sn #> r;
    <#= sn #>_generator::populate(position, r);
    return r;
<#+
            }
#>
}
<#+
            /*
             * Create method ptr.
             */
#>

<#= sn #>_generator::result_type*
<#= sn #>_generator::create_ptr(const unsigned int position) {
<#+
            if (p.is_immutable())
#>
    return new <#= sn #>(create(position));
<#+
            else {
#>
    <#= sn #>* r = new <#= sn #>();
    <#= sn #>_generator::populate(position, *r);
    return r;
<#+
            }
#>
}
<#+
            /*
             * Function operator
             */
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::operator()() {
    return create(position_++);
}

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
