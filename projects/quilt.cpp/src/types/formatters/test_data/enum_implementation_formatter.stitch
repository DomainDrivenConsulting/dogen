<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/enum_header_formatter_stitch.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#+

dogen::formatters::artefact enum_implementation_formatter_stitch(
    assistant& a, const yarn::enumeration& e) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#= e.name().simple() #>_generator::<#= e.name().simple() #>_generator() : position_(0) { }
void <#= e.name().simple() #>_generator::
populate(const unsigned int position, result_type& v) {
    v = static_cast<<#= e.name().simple() #>>(position % <#= e.enumerators().size() #>);
}

<#= e.name().simple() #>_generator::result_type
<#= e.name().simple() #>_generator::create(const unsigned int  position) {
    result_type r;
    <#= e.name().simple() #>_generator::populate(position, r);
    return r;
}

<#= e.name().simple() #>_generator::result_type
<#= e.name().simple() #>_generator::operator()() {
    return create(position_++);
}

<#+
         } // snf
    } // sbf
    return a.make_artefact();
}

#>
