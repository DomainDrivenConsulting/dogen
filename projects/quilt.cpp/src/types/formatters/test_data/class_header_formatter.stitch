<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/class_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

dogen::formatters::file class_header_formatter_stitch(
    assistant& a, const formattables::class_info& c) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            auto snf(a.make_scoped_namespace_formatter(c.namespaces()));

#>

class <#= c.name() #>_generator {
public:
    <#= c.name() #>_generator();

public:
    typedef <#= c.qualified_name() #> result_type;

public:
<#+
            if (!c.is_immutable())
#>
    static void populate(const unsigned int position, result_type& v);
<#+
            if (!c.is_parent()) {
#>
    static result_type create(const unsigned int position);
    result_type operator()();

private:
    unsigned int position_;
<#+
            }
#>
public:
    static result_type* create_ptr(const unsigned int position);
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_file();
}
#>
