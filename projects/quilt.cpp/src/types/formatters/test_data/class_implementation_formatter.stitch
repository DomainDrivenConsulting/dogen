<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/test_data/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::test_data #>
<#+

dogen::formatters::artefact
class_implementation_formatter_stitch(assistant& a, const yarn::object& o) {

    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        if (!o.local_attributes().empty()) {
#>
namespace {
<#+
        a.add_helper_methods(o.name().id());
#>

}

<#+
        }

        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));

            /*
             * Default constructor.
             */
            if (!o.is_parent()) {
#>

<#= sn #>_generator::<#= sn #>_generator() : position_(0) { }
<#+
            }

            /*
             * Populate method.
             */
            if (!o.is_immutable()) {
                bool no_args(o.local_attributes().empty() && !o.parent());
                if (no_args) {
#>

void <#= sn #>_generator::
populate(const unsigned int /*position*/, result_type& /*v*/) {
<#+
                } else {
#>

void <#= sn #>_generator::
populate(const unsigned int position, result_type& v) {
<#+
                }

                if (o.parent()) {
                    const auto& pn(*o.parent());
                    const auto pqn(a.get_qualified_name(pn));
#>
    <#= pqn #>_generator::populate(position, v);
<#+
                }
                unsigned int i(0);
                for (const auto attr : o.local_attributes()) {
#>
    v.<#= attr.name().simple() #>(create_<#= attr.parsed_type().identifiable() #>(position + <#= i #>));
<#+
                    ++i;
                }
#>
}
<#+
            }

            /*
             * Create method.
             */
            if (!o.is_parent()) {
                 const bool no_arg(o.all_attributes().empty());
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::create(const unsigned int<#= (no_arg ? "/*position*/" : " position") #>) {
<#+
                if (o.is_immutable()) {
#>
    return <#= sn #>(
<#+
                    if (o.local_attributes().empty())
#>

<#+
                    else {
                        dogen::formatters::sequence_formatter sf(o.local_attributes().size());
                        for (const auto attr : o.local_attributes()) {
#>
        create_<#= attr.parsed_type().identifiable() #>(position + <#= sf.current_position() #>)<#= sf.postfix() #>
<#+
                            sf.next();
                        }
                    }
#>
        );
<#+
                } else {
#>
    <#= sn #> r;
<#+
                    if (!o.all_attributes().empty())
#>
    <#= sn #>_generator::populate(position, r);
    return r;
<#+
                }
#>
}
<#+
            }

            /*
             * Create method ptr.
             */
#>

<#= sn #>_generator::result_type*
<#= sn #>_generator::create_ptr(const unsigned int position) {
<#+
            if (o.leaves().empty()) {
                if (o.is_immutable())
#>
    return new <#= sn #>(create(position));
<#+
                else {
#>
    <#= sn #>* p = new <#= sn #>();
    <#= sn #>_generator::populate(position, *p);
    return p;
<#+
                }
            } else {
                auto leaves(o.leaves());
                const auto front(leaves.front());
                leaves.pop_front();
                unsigned int i(0);
                unsigned int total(leaves.size());
                for (const auto& l : leaves) {
#>
    if ((position % <#= total #>) == <#= i++ #>)
        return <#= a.get_qualified_name(l) #>_generator::create_ptr(position);
<#+
                }
#>
    return <#= a.get_qualified_name(front) #>_generator::create_ptr(position);
<#+
            }
#>
}
<#+
            /*
             * Function operator
             */
             if (!o.is_parent()) {
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::operator()() {
    return create(position_++);
}
<#+
            }
#>

<#+
        } // snf
    } // sbf
    return a.make_file();
}
#>
