<#@ annotations.profile=dogen.stitch #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency=<boost/algorithm/string/case_conv.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/fabric/cmakelists.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/include_cmakelists_formatter.hpp" #>
<#+

std::string include_cmakelists_formatter::static_artefact() {
    return traits::include_cmakelists_archetype();
}

std::string include_cmakelists_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location include_cmakelists_formatter::
archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::family(), cpp::traits::kernel(),
          traits::cmake_facet(),
          include_cmakelists_formatter::static_artefact());
    return r;
}

std::type_index include_cmakelists_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(fabric::cmakelists)));
    return r;
}

inclusion_support_types include_cmakelists_formatter::
inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path include_cmakelists_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {

    using namespace dogen::utility::log;
    using namespace dogen::quilt::cpp::formatters;
    static logger lg(
        logger_factory(include_cmakelists_formatter::static_artefact()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path include_cmakelists_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_include_cmakelists(n, static_artefact());
}

std::list<std::string> include_cmakelists_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact include_cmakelists_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& c(a.as<fabric::cmakelists>(static_artefact(), e));

    {
        a.make_decoration_preamble();
#>
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)

install(
    DIRECTORY <#= c.include_directory_name() #>/
    DESTINATION <#= c.include_directory_name() #>/
    COMPONENT headers
    FILES_MATCHING PATTERN "*.<#= c.header_file_extension() #>")
<#+
        if (a.is_odb_facet_enabled()) {
            const auto model_name(a.get_identifiable_model_name(c.name()));
            const auto product_name(a.get_product_name(c.name()));
            const auto odb_folder(a.get_odb_facet_directory());
#>

set(include_odb_dir "${CMAKE_CURRENT_SOURCE_DIR}/<#= c.odb_include_directory_path() #>")
set(all_odb_files "")
file(GLOB_RECURSE all_odb_files RELATIVE
    "${include_odb_dir}/"
    "${include_odb_dir}/*_<#= c.odb_postfix() #>.<#= c.header_file_extension() #>")

set(src_odb_dir "${CMAKE_CURRENT_SOURCE_DIR}/<#= c.odb_source_directory_path() #>/")
if(NOT EXISTS "${src_odb_dir}")
    file(MAKE_DIRECTORY "${src_odb_dir}")
endif()

add_custom_target(odb_<#= model_name #>
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMAND mv ${include_odb_dir}/*.cpp ${src_odb_dir})

set(ignore_file false)
set(include_types_dir "${CMAKE_CURRENT_SOURCE_DIR}/<#= c.types_include_directory_path() #>")
foreach(odb_file ${all_odb_files})
    if (odb_file MATCHES "all_<#= c.odb_postfix() #>.<#= c.header_file_extension() #>")
        set(ignore_file true)
    endif()

    if(NOT ignore_file)
        set(type_name "")
        string(REPLACE "_<#= c.odb_postfix() #>.<#= c.header_file_extension() #>" "" type_name ${odb_file})
        string(REPLACE "\\" "_" type_name ${type_name})
        string(REPLACE "/" "_" type_name ${type_name})

        set(target_name "odb_<#= model_name #>_${type_name}")
        add_custom_target(${target_name}
            COMMENT "ODB ${type_name}"
            WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
            COMMAND ${ODB_EXECUTABLE}
            --options-file ${CMAKE_CURRENT_SOURCE_DIR}/<#= c.odb_options_file_path() #>
            --output-dir ${include_odb_dir}/
            --odb-epilogue '\#include \"<#= c.odb_inclusion_directory_path() #>/${odb_file}\"'
            -I ${ODB_INCLUDE_DIRS} -I ${CMAKE_CURRENT_SOURCE_DIR}/<#= c.include_directory_name() #>
            ${include_types_dir}/${type_name}.<#= c.header_file_extension() #>)

        add_dependencies(odb_<#= model_name #> ${target_name})
    endif()
    set(ignore_file false)
endforeach()
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
