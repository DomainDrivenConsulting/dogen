<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/class_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::serialization #>
<#+

dogen::formatters::artefact class_header_formatter_stitch(
    assistant& a, const yarn::object& o) {
    {
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());

        if (!o.is_parent() && o.parent()) {
            const auto& pn(*o.parent());
            const auto pqn(a.get_qualified_name(pn));
#>
namespace boost {

template<>struct
is_virtual_base_of<
    <#= pqn #>,
    <#= qn #>
> : public mpl::true_ {};

}
<#+
        }
#>

BOOST_SERIALIZATION_SPLIT_FREE(<#= qn #>)
<#+
        if (o.is_parent()) {
#>
BOOST_SERIALIZATION_ASSUME_ABSTRACT(<#= qn #>)

<#+
        }
#>
namespace boost {
namespace serialization {

template<typename Archive>
void save(Archive& ar, const <#= qn #>& v, unsigned int version);

template<typename Archive>
void load(Archive& ar, <#= qn #>& v, unsigned int version);

} }

<#+
    } // sbf
    return a.make_file();
}
#>
