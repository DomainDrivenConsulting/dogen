<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::serialization #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    assistant& a, const yarn::object& o) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        a.add_helper_methods();

        const auto qn(a.get_qualified_name(o.name()));
        const bool has_attributes(!o.local_attributes().empty());
        const bool has_parents(!o.parents().empty());
        const bool has_attributes_or_parents(has_attributes || has_parents);

        if (o.is_parent() || !o.parents().empty()) {
#>

BOOST_CLASS_TRACKING(
    <#= qn #>,
    boost::serialization::track_selectively)
<#+
        }
#>

namespace boost {
namespace serialization {
<#+

        /*
         * Save function
         */
#>

template<typename Archive>
void save(Archive& <#= (has_attributes_or_parents ? "ar" : "/*ar*/") #>,
    const <#= qn #>& <#= (has_attributes_or_parents ? "v" : "/*v*/") #>,
    const unsigned int /*version*/) {
<#+
        for (const auto pn : o.parents()) {
            const auto pqn(a.get_qualified_name(pn));
#>
    ar << make_nvp("<#= pn.simple() #>", base_object<<#= pqn #>>(v));
<#+
        }

        if (has_attributes && has_parents)
#>

<#+
        for (const auto attr : o.local_attributes()) {
#>
    ar << make_nvp("<#= attr.name().simple() #>", v.<#= a.make_member_variable_name(attr) #>);
<#+
        }
#>
}

<#+
        /*
         * Load function
         */
#>
template<typename Archive>
void load(Archive& <#= (has_attributes_or_parents ? "ar," : "/*ar*/,") #>
    <#= qn #>& <#= (has_attributes_or_parents ? "v" : "/*v*/") #>,
    const unsigned int /*version*/) {
<#+
        for (const auto pn : o.parents()) {
            const auto pqn(a.get_qualified_name(pn));
#>
    ar >> make_nvp("<#= pn.simple() #>", base_object<<#= pqn #>>(v));
<#+
            if (has_attributes && has_parents)
#>

<#+
        }

        for (const auto attr : o.local_attributes()) {
#>
    ar >> make_nvp("<#= attr.name().simple() #>", v.<#= a.make_member_variable_name(attr) #>);
<#+
        }
#>
}

} }

namespace boost {
namespace serialization {

template void save(archive::polymorphic_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::polymorphic_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::text_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::text_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::binary_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::binary_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::xml_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::xml_iarchive& ar, <#= qn #>& v, unsigned int version);

} }
<#+
    } // sbf
    return a.make_file();
}

#>
