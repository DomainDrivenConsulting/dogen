<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/path_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::serialization #>
<#+

std::string path_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string path_helper::family() const {
    static std::string r("BoostPath");
    return r;
}

std::list<std::string>
path_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        serialization::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
path_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        serialization::traits::facet_name()
    });
    return r;
}

bool path_helper::is_enabled(const assistant& /*a*/,
    const formattables::helper_properties& /*hp*/) const {
    return true;
}

std::string path_helper::helper_name() const {
    static std::string r("path_helper");
    return r;
}

void path_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
#>
namespace boost {
namespace serialization {

template<typename Archive>
inline void save(Archive& ar,
    const <#= nt_qn #>& p,
    const unsigned int /*version*/) {
    std::string s;
    s = p.generic_string();
    ar & boost::serialization::make_nvp("path", s);
}

template<typename Archive>
inline void load(Archive& ar,
    <#= nt_qn #>& p,
    const unsigned int /*version*/) {
    std::string s;
    ar & boost::serialization::make_nvp("path", s);
    p = s;
}

} }
<#+
    }
}
#>
