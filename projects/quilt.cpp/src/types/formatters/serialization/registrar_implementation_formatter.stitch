<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/registrar_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::serialization #>
<#+

dogen::formatters::file registrar_implementation_formatter_stitch(
    assistant& a, const fabric::registrar& rg) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(rg.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto deps(rg.model_dependencies());
            const auto leaves(rg.leaves());
            const bool has_types(!deps.empty() || !leaves.empty());
            const std::string arg_name(has_types ? " ar" : "");
#>

template<typename Archive>
void register_types(Archive&<#= arg_name #>) {
<#+
            if (has_types) {
                for (const auto& d : deps) {
                    const auto dqn(a.get_qualified_name(d));
#>
    <#= dqn #>::register_types(ar);
<#+
                }

                if (!deps.empty() && !leaves.empty())
#>

<#+
                for (const auto l : leaves) {
                    const auto lqn(a.get_qualified_name(l));
#>
    ar.template register_type<<#= lqn #>>();
<#+
                }
            }
#>
}

template void register_types(boost::archive::polymorphic_oarchive&<#= arg_name #>);
template void register_types(boost::archive::polymorphic_iarchive&<#= arg_name #>);

template void register_types(boost::archive::text_oarchive&<#= arg_name #>);
template void register_types(boost::archive::text_iarchive&<#= arg_name #>);

template void register_types(boost::archive::binary_oarchive&<#= arg_name #>);
template void register_types(boost::archive::binary_iarchive&<#= arg_name #>);

template void register_types(boost::archive::xml_oarchive&<#= arg_name #>);
template void register_types(boost::archive::xml_iarchive&<#= arg_name #>);

<#+
        } // snf
    } // sbf
    return a.make_file();
}

#>
