<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/primitive.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/primitive_implementation_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=primitive_implementation_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=primitive_implementation #>
<#@ stitch.wale.kvp.yarn_element=yarn::primitive #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::element& e) const {

    const auto& p(assistant::as<yarn::primitive>(static_artefact(), e));
    const auto carch(traits::canonical_archetype());
    auto builder(f.make());
    builder.add(p.name(), carch);

    return builder.build();
}

dogen::formatters::artefact primitive_implementation_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& p(a.as<yarn::primitive>(static_artefact(), e));

    const auto sn(p.name().simple());
    const auto qn(a.get_qualified_name(p.name()));
    {
        auto sbf(a.make_scoped_boilerplate_formatter());
#>

namespace {

template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
<#+

        a.add_helper_methods(p.name().id());
#>

}

<#+
        {
            const auto ns(a.make_namespaces(p.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto sn(p.name().simple());
            const auto qn(a.get_qualified_name(p.name()));
            const auto attr(p.value_attribute());
#>

std::size_t <#= sn #>_hasher::hash(const <#= sn #>& v) {
    std::size_t seed(0);
<#+
            if (a.requires_hashing_helper_method(attr))
#>
    combine(seed, hash_<#= attr.parsed_type().identifiable() #>(v.<#= attr.name().simple() #>()));
<#+
            else
#>
    combine(seed, v.<#= attr.name().simple() #>());
    return seed;
}

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
