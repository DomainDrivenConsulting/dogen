<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/variant_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#+


std::string variant_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string variant_helper::family() const {
    static std::string r("AssociativeContainer");
    return r;
}

std::list<std::string>
variant_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        hash::traits::class_implementation_formatter_name()
    });
    return r;
}

std::list<std::string>
variant_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        hash::traits::facet_name()
    });
    return r;
}

bool variant_helper::requires_explicit_call() const {
    return false;
}

std::string variant_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

std::string variant_helper::helper_name() const {
    static std::string r("variant_helper");
    return r;
}

bool variant_helper::is_enabled(const assistant& /*a*/,
    const properties::helper_properties& /*hp*/) const {
    return true;
}

void variant_helper::
format(assistant& /*a*/, const properties::helper_properties& /*hp*/) const {
}

void variant_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {
#>

struct <#= t.complete_identifiable_name() #>_visitor : public boost::static_visitor<> {
    <#= t.complete_identifiable_name() #>_visitor() : hash(0) {}
<#+
    const auto children(t.children());
    for (const auto& c : children) {
#>
    void operator()(const <#= c.name() #><#= (c.is_primitive() ? "" : "&") #> v) const {
<#+
        if (!a.requires_hashing_helper_method(c))
#>
        combine(hash, v);
<#+
        else
#>
        combine(hash, hash_<#= c.complete_identifiable_name() #>(v));
    }

<#+
    }
#>
    mutable std::size_t hash;
};

inline std::size_t hash_<#= t.complete_identifiable_name() #>(const <#= t.complete_name() #>& v) {
    <#= t.complete_identifiable_name() #>_visitor vis;
    boost::apply_visitor(vis, v);
    return vis.hash;
}
<#+
}
#>
