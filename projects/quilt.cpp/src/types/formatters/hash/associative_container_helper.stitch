<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/associative_container_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#+

std::string associative_container_helper::formatter_name() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string associative_container_helper::family() const {
    static std::string r("AssociativeContainer");
    return r;
}

std::list<std::string>
associative_container_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        hash::traits::class_implementation_archetype()
    });
    return r;
}

std::list<std::string>
associative_container_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        hash::traits::facet_name()
    });
    return r;
}

std::string associative_container_helper::helper_name() const {
    static std::string r("associative_container_helper");
    return r;
}

bool associative_container_helper::is_enabled(const assistant& /*a*/,
    const formattables::helper_properties& /*hp*/) const {
    return true;
}

void associative_container_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());

    if (hp.direct_descendants().size() == 2) {
        const auto key(hp.direct_descendants().front());
        const auto value(hp.direct_descendants().back());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);
    for (const auto i : v) {
<#+
        if (!key.requires_hashing_helper())
#>
        combine(seed, i.first);
<#+
        else
#>
        combine(seed, hash_<#= key.name_tree_identifiable() #>(i.first));
<#+

        if (!(value.requires_hashing_helper()))
#>
        combine(seed, i.second);
<#+
        else
#>
        combine(seed, hash_<#= value.name_tree_identifiable() #>(i.second));
    }
    return seed;
}
<#+
    } else {
        const auto containee(hp.direct_descendants().front());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);
    for (const auto i : v) {
<#+
    if (!containee.requires_hashing_helper())
#>
        combine(seed, i);
<#+
    else
#>
        combine(seed, hash_<#= containee.name_tree_identifiable() #>(i));
    }
    return seed;
}
<#+
    }
}
#>
