<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/optional_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#+


std::string optional_helper::id() const {
    static auto r(std::string("<") + traits::facet_name() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string optional_helper::family() const {
    static std::string r("Optional");
    return r;
}

std::list<std::string>
optional_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        hash::traits::class_implementation_formatter_name()
    });
    return r;
}

bool optional_helper::requires_explicit_call() const {
    return false;
}

std::string optional_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

std::string optional_helper::helper_name() const {
    static std::string r("optional_helper");
    return r;
}

bool optional_helper::is_enabled(const assistant& /*a*/,
    const properties::helper_properties& /*hp*/) const {
    return true;
}

void optional_helper::
format(assistant& /*a*/, const properties::helper_properties& /*hp*/) const {
}

void optional_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {

    const auto containee(t.children().front());
#>

inline std::size_t hash_<#= t.complete_identifiable_name() #>(const <#= t.complete_name() #>& v) {
    std::size_t seed(0);

    if (!v)
        return seed;

<#+
    if (!a.requires_hashing_helper_method(containee))
#>
    combine(seed, *v);
<#+
    else
#>
    combine(seed, hash_<#= containee.complete_identifiable_name() #>(*v));
    return seed;
}
<#+
}
#>
