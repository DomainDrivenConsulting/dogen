<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/optional_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formattables/helper_properties.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#+


std::string optional_helper::formatter_name() const {
    static auto r(std::string("<") + traits::facet() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string optional_helper::family() const {
    static std::string r("Optional");
    return r;
}

std::list<std::string>
optional_helper::owning_formatters() const {
    static auto r(std::list<std::string> {
        hash::traits::class_implementation_archetype()
    });
    return r;
}

std::list<std::string>
optional_helper::owning_facets() const {
    static auto r(std::list<std::string> {
        hash::traits::facet()
    });
    return r;
}

std::string optional_helper::helper_name() const {
    static std::string r("optional_helper");
    return r;
}

bool optional_helper::is_enabled(const assistant& /*a*/,
    const formattables::helper_properties& /*hp*/) const {
    return true;
}

void optional_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto containee(hp.direct_descendants().front());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);

    if (!v)
        return seed;

<#+
    if (!containee.requires_hashing_helper())
#>
    combine(seed, *v);
<#+
    else
#>
    combine(seed, hash_<#= containee.name_tree_identifiable() #>(*v));
    return seed;
}
<#+
}
#>
