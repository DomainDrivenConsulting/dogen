<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    assistant& a, const properties::class_info& c) {
    {
        auto sbf(a.make_scoped_boilerplate_formatter());
#>

namespace {

<#+
        if (!c.properties().empty() || !c.parents().empty()) {
#>
template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
<#+
        }

        a.add_helper_methods();
#>

}

<#+
        {
            auto snf(a.make_scoped_namespace_formatter(c.namespaces()));
#>

std::size_t <#= c.name() #>_hasher::hash(const <#= c.name() #>&<#= ((c.properties().empty() && c.parents().empty()) ? "" : " v") #>) {
    std::size_t seed(0);
<#+
            if (!c.parents().empty()) {
#>

<#+
                for (const auto p : c.parents())
#>
    combine(seed, dynamic_cast<const <#= p.qualified_name() #>&>(v));
<#+

            }

            if (!c.properties().empty()) {
#>

<#+
                for (const auto p : c.properties()) {
                    if (a.requires_hashing_helper_method(p.type()))
#>
    combine(seed, hash_<#= p.type().complete_identifiable_name() #>(v.<#= p.name() #>()));
<#+
                    else
#>
    combine(seed, v.<#= p.name() #>()<#= (p.type().is_date() ? ".modjulian_day()" : "") #>);
<#+
                }

                if (c.properties().size() > 1)
#>

<#+
            }
#>
    return seed;
}

<#+
        } // snf
    } // sbf
    return a.make_file();
}
#>
