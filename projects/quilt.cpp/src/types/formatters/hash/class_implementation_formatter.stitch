<#@ annotations.profile=dogen.stitch #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::hash #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/class_implementation_formatter_stitch.hpp" #>
<#+

dogen::formatters::artefact class_implementation_formatter_stitch(
    assistant& a, const yarn::object& o) {
    {
        auto sbf(a.make_scoped_boilerplate_formatter());
#>

namespace {

<#+
        if (!o.local_attributes().empty() || o.parent()) {
#>
template <typename HashableType>
inline void combine(std::size_t& seed, const HashableType& value) {
    std::hash<HashableType> hasher;
    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
}
<#+
        }

        a.add_helper_methods(o.name().id());
#>

}

<#+
        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto sn(o.name().simple());
            const auto qn(a.get_qualified_name(o.name()));

#>

std::size_t <#= sn #>_hasher::hash(const <#= sn #>&<#= ((o.local_attributes().empty() && !o.parent()) ? "" : " v") #>) {
    std::size_t seed(0);
<#+
            if (o.parent()) {
#>

<#+
                const auto& pn(*o.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
    combine(seed, dynamic_cast<const <#= pqn #>&>(v));
<#+
            }

            if (!o.local_attributes().empty()) {
#>

<#+
                for (const auto attr : o.local_attributes()) {
                    if (a.requires_hashing_helper_method(attr))
#>
    combine(seed, hash_<#= attr.parsed_type().identifiable() #>(v.<#= attr.name().simple() #>()));
<#+
                    else
#>
    combine(seed, v.<#= attr.name().simple() #>());
<#+
                }

                if (o.local_attributes().size() > 1)
#>

<#+
            }
#>
    return seed;
}

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
