<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=yarn::enumeration #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> enum_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::element& e) const {

    const auto& en(assistant::as<yarn::enumeration>(static_artefact(), e));
    auto builder(f.make());
    const auto arch(traits::canonical_archetype());
    builder.add(en.underlying_element(), arch);
    return builder.build();
}

dogen::formatters::artefact enum_header_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
    const auto& ye(a.as<yarn::enumeration>(static_artefact(), e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(e.documentation());
            if (a.is_cpp_standard_98()) {
#>
enum <#= ye.name().simple() #> {
<#+
            } else {
                if (ye.use_implementation_defined_underlying_element())
#>
enum class <#= ye.name().simple() #> {
<#+
                else
#>
enum class <#= ye.name().simple() #> : <#= a.get_qualified_name(ye.underlying_element()) #> {
<#+
            }

            dogen::formatters::sequence_formatter sf(ye.enumerators().size());
            for (const auto& en : ye.enumerators()) {
                if (ye.use_implementation_defined_enumerator_values())
#>
    <#= en.name().simple() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                else
#>
    <#= en.name().simple() #> = <#= en.value() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                sf.next();
            }
#>
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
