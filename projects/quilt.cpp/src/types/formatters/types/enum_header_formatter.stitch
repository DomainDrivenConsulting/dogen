<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#+

std::string enum_header_formatter::static_artefact() {
    return traits::enum_header_archetype();
}

std::string enum_header_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location enum_header_formatter::
archetype_location() const {
    static annotations::archetype_location
        r(formatters::traits::kernel(), traits::facet(),
            enum_header_formatter::static_artefact());
    return r;
}

std::type_index enum_header_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(yarn::enumeration)));
    return r;
}

inclusion_support_types enum_header_formatter::inclusion_support_type() const {
    return inclusion_support_types::canonical_support;
}

boost::filesystem::path enum_header_formatter::inclusion_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_inclusion_path_for_cpp_header(n, static_artefact());
}

boost::filesystem::path enum_header_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_cpp_header(n, static_artefact());
}

std::list<std::string> enum_header_formatter::inclusion_dependencies(
    const formattables::inclusion_dependencies_builder_factory& /*f*/,
    const yarn::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact enum_header_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
    const auto& ye(a.as<yarn::enumeration>(static_artefact(), e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(e.documentation());
#>
enum class <#= ye.name().simple() #> : <#= a.get_qualified_name(ye.underlying_type()) #> {
<#+
            dogen::formatters::sequence_formatter sf(ye.enumerators().size());
            for (const auto& en : ye.enumerators()) {
#>
    <#= en.name() #> = <#= en.value() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                sf.next();
            }
#>
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
