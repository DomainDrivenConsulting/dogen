<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/inserter_implementation_helper_stitch.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/class_implementation_formatter.hpp" #>
<#+

std::string class_implementation_formatter::static_artefact() {
    return traits::class_implementation_archetype();
}

std::string class_implementation_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
class_implementation_formatter::archetype_location() const {
    static annotations::archetype_location
        r(formatters::traits::kernel(), traits::facet(),
            class_implementation_formatter::static_artefact());
    return r;
}

std::type_index class_implementation_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(yarn::object)));
    return r;
}

inclusion_support_types class_implementation_formatter::
inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path class_implementation_formatter::inclusion_path(
    const formattables::locator& /*l*/, const yarn::name& n) const {

    using namespace dogen::utility::log;
    using namespace dogen::quilt::cpp::formatters::types;
    static logger lg(
        logger_factory(class_implementation_formatter::static_artefact()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path class_implementation_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_cpp_implementation(n, static_artefact());
}

std::list<std::string> class_implementation_formatter::inclusion_dependencies(
    const formattables::inclusion_dependencies_builder_factory& f,
    const yarn::element& e) const {
    const auto& o(assistant::as<yarn::object>(static_artefact(), e));
    auto builder(f.make());

    const auto ch_arch(traits::class_header_archetype());
    builder.add(o.name(), ch_arch);
    builder.add(o.opaque_associations(), ch_arch);

    const auto io_arch(formatters::io::traits::class_header_archetype());
    const bool in_inheritance(o.is_parent() || o.is_child());
    const bool io_enabled(builder.is_enabled(o.name(), io_arch));
    const bool requires_io(io_enabled && in_inheritance);

    if (!requires_io)
        return builder.build();

    const auto os(inclusion_constants::std::ostream());
    builder.add(os);

    const auto si(builder.make_special_includes(o));
    if (si.requires_stream_manipulators)
        builder.add(inclusion_constants::boost::io::ios_state());

    if (si.has_std_string)
        builder.add(inclusion_constants::boost::algorithm::string());

    const auto io_carch(io::traits::canonical_archetype());
    builder.add(o.transparent_associations(), io_carch);
    builder.add(o.opaque_associations(), io_carch);
    builder.add(o.parent(), io_carch);

    if (o.is_visitation_leaf()) {
        /*
         * Only leaves have a visitation implementation. Note that we
         * don't bother including the base if we are already including
         * the derived visitor.
         */
        const auto v_arch(traits::visitor_header_archetype());
        if (o.derived_visitor())
            builder.add(*o.derived_visitor(), v_arch);
        else
            builder.add(*o.base_visitor(), v_arch);
    }

    return builder.build();
}

dogen::formatters::artefact class_implementation_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& o(a.as<yarn::object>(static_artefact(), e));

    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        a.add_helper_methods(o.name().id());

        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));

            /*
             * Default constructor.
             */
            if (a.requires_manual_default_constructor()) {
#>

<#= sn #>::<#= sn #>()
<#+
                // FIXME: this was just too hard to hack with a sequence.
                // FIXME: indentation is all off too.
                std::ostringstream ss;
                bool is_first(true);
                for (const auto attr : o.local_attributes()) {
                    if (!attr.parsed_type().is_current_simple_type())
                        continue;

                    if (!is_first)
                        ss << "," << std::endl << "      ";

                    ss << a.make_member_variable_name(attr)
                       << "(static_cast<" << a.get_qualified_name(attr.parsed_type())
                       << ">(0))";

                    is_first = false;
                }
                ss << " { }";
                const std::string out(ss.str());
#>
    : <#= out #>
<#+
            }

            /*
             * Move constructor.
             */
            if (a.requires_manual_move_constructor()) {
#>

<#= sn #>::<#= sn #>(<#= sn #>&& rhs)
<#+
                unsigned int size((o.parent() ? 1 : 0) + o.local_attributes().size());

                dogen::formatters::sequence_formatter sf(size);
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(" { }");
                if (o.parent()) {
                    const auto& pn(*o.parent());
                    const auto pqn(a.get_qualified_name(pn));
#>
    <#= sf.prefix() #><#= pqn #>(
        std::forward<<#= pqn #>>(rhs))<#= sf.postfix() #>
<#+
                    sf.next();
                }

                for (const auto attr : o.local_attributes()) {
#>
    <#= sf.prefix() #><#= a.make_member_variable_name(attr) #>(std::move(rhs.<#= a.make_member_variable_name(attr) #>))<#= sf.postfix() #>
<#+
                    sf.next();
                }
            }

            /*
             * Complete constructor.
             */
            if (!o.all_attributes().empty()) {
                const auto attr_count(o.all_attributes().size());
                if (attr_count == 1) {
                     const auto attr(*o.all_attributes().begin());
#>

<#= sn #>::<#= sn #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #>)
<#+
                } else {
#>

<#= sn #>::<#= sn #>(
<#+

                    dogen::formatters::sequence_formatter sf(attr_count);
                    sf.postfix_configuration().last(")");
                    for (const auto attr : o.all_attributes()) {
#>
    const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #><#= sf.postfix() #>
<#+
                        sf.next();
                    }
                }

                int sequence_size(o.local_attributes().size() + (o.parent() ? 1 : 0));
                for (const auto pair : o.inherited_attributes()) {
                    const auto& pattrs(pair.second);
                    sequence_size += (pattrs.size() > 1 ? pattrs.size() : 0);
                }

                dogen::formatters::sequence_formatter sf(sequence_size);
                sf.postfix_configuration().last(" { }");
                sf.prefix_configuration().first(": ").not_first("  ");
                for (const auto pair : o.inherited_attributes()) {
                    const auto pqn(a.get_qualified_name(pair.first));
                    const auto& pattrs(pair.second);
                    if (pattrs.size() <= 1) {
#>
    <#= sf.prefix() #><#= pqn #>(<#= (pattrs.empty() ? "" : pattrs.front().name().simple()) #>)<#= sf.postfix() #>
<#+
                        sf.next();
                    } else {
#>
    <#= sf.prefix() #><#= pqn #>(<#= sf.postfix(true/*skip*/) #>
<#+
                        sf.next();
                        dogen::formatters::sequence_formatter sf2(pattrs.size());
                        sf2.element_separator("");

                        sf2.prefix_configuration().first("  ").not_first("  ");
                        sf2.postfix_configuration().last(")");
                        for (const auto attr : pattrs) {
#>
    <#= sf2.prefix() #><#= attr.name().simple() #><#= sf2.postfix() #><#= sf.postfix() #>
<#+
                            sf2.next();
                            sf.next();
                        }
                    }
                }

                for (const auto attr : o.local_attributes()) {
#>
    <#= sf.prefix() #><#= a.make_member_variable_name(attr) #>(<#= attr.name().simple() #>)<#= sf.postfix() #>
<#+
                    sf.next();
                }
            }

            /*
             * Visitation.
             */
            if (o.is_visitation_leaf()) {
                std::string bvn;
                std::string dvn;
                std::string rpn;
                if (o.derived_visitor()) {
                    bvn = a.get_qualified_name(*o.base_visitor());
                    dvn = o.derived_visitor()->simple();
                    rpn = a.get_qualified_name(*o.root_parent());
                } else {
                    bvn = o.base_visitor()->simple();
                    rpn = o.root_parent()->simple();
                }
#>

void <#= sn #>::accept(const <#= bvn #>& v) const {
<#+
                if (o.derived_visitor()) {
#>
    typedef const <#= dvn #>* derived_ptr;
    const auto dv(dynamic_cast<derived_ptr>(&v));
    if (dv)
        dv->visit(*this);
<#+
                } else {
#>
    v.visit(*this);
<#+
                }
#>
}

void <#= sn #>::accept(<#= bvn #>& v) const {
<#+
                if (o.derived_visitor()) {
#>
    typedef <#= dvn #>* derived_ptr;
    const auto dv(dynamic_cast<derived_ptr>(&v));
    if (dv)
        dv->visit(*this);
<#+
                } else {
#>
    v.visit(*this);
<#+
                }
#>
    }

void <#= sn #>::accept(const <#= bvn #>& v) {
<#+
                if (o.derived_visitor()) {
#>
    typedef const <#= dvn #>* derived_ptr;
    const auto dv(dynamic_cast<derived_ptr>(&v));
    if (dv)
        dv->visit(*this);
<#+
                } else {
#>
    v.visit(*this);
<#+
                }
#>
}

void <#= sn #>::accept(<#= bvn #>& v) {
<#+
                if (o.derived_visitor()) {
#>
    typedef <#= dvn #>* derived_ptr;
    const auto dv(dynamic_cast<derived_ptr>(&v));
    if (dv)
        dv->visit(*this);
<#+
                } else {
#>
    v.visit(*this);
<#+
                }
#>
}

<#+
            }

            /*
             * Streaming
             */
            if (a.is_io_enabled()) {
                if (o.in_inheritance_relationship()) {
#>

void <#= sn #>::to_stream(std::ostream& s) const {
<#+
                io::inserter_implementation_helper_stitch(a, o, true/*inside_class*/);
#>
}
<#+
                }
            }

            /*
             * Swap
             */
            if (!o.is_immutable() && (!o.all_attributes().empty() || o.is_parent())) {
                const bool empty(o.all_attributes().empty() && !o.parent());
#>

void <#= sn #>::swap(<#= sn #>&<#= (empty ? "" : " other") #>) noexcept {
<#+
               if (o.parent()) {
                    const auto& pn(*o.parent());
#>
    <#= pn.simple() #>::swap(other);

<#+

               }

               if (!o.local_attributes().empty()) {
#>
    using std::swap;
<#+
                   for (const auto attr : o.local_attributes())
#>
    swap(<#= a.make_member_variable_name(attr) #>, other.<#= a.make_member_variable_name(attr) #>);
<#+
               }
#>
}
<#+
            }

            /*
             * Equals method
             */
            // FIXME: looking at root_parent as a hack due to service leafs not
            // FIXME: being processed atm.
            if (!o.is_parent() && o.parent() && o.root_parent()) {
                const auto rpn(*o.root_parent());
#>

bool <#= sn #>::equals(const <#= a.get_qualified_name(rpn) #>& other) const {
    const <#= sn #>* const p(dynamic_cast<const <#= sn #>* const>(&other));
    if (!p) return false;
    return *this == *p;
}
<#+
            }

            /*
             * Equals operator
             */
            std::string method_name;
            if (o.is_parent())
                method_name = "compare";
            else
                method_name = "operator==";
#>

bool <#= sn #>::<#= method_name #>(const <#= sn #>& <#= (o.all_attributes().empty() ? "/*rhs*/" : "rhs") #>) const {
<#+

            if (o.all_attributes().empty())
#>
    return true;
<#+
            else {
                dogen::formatters::sequence_formatter sf(o.parent() ? 1 : 0);
                sf.element_separator("");
                sf.prefix_configuration().first("return ").not_first("    ");
                sf.postfix_configuration().not_last(" &&");
                if (o.local_attributes().empty())
                    sf.postfix_configuration().last(";");
                else
                    sf.postfix_configuration().last(" &&");

                if (o.parent()) {
                    const auto& pn(*o.parent());
#>
    <#= sf.prefix() #><#= pn.simple() #>::compare(rhs)<#= sf.postfix() #>
<#+
                    sf.next();
                }
                sf.reset(o.local_attributes().size());
                sf.element_separator("");
                if (!o.parent())
                   sf.prefix_configuration().first("return ");
                else
                   sf.prefix_configuration().first("    ");
                sf.prefix_configuration().not_first("    ");
                sf.postfix_configuration().last(";").not_last(" &&");
                for (const auto attr : o.local_attributes()) {
#>
    <#= sf.prefix() #><#= a.make_member_variable_name(attr) #> == rhs.<#= a.make_member_variable_name(attr) #><#= sf.postfix() #>
<#+
                    sf.next();
                }
            }
#>
}
<#+

            /*
             * Assignment
             */
            if (!o.all_attributes().empty() && !o.is_parent() && !o.is_immutable()) {
#>

<#= sn #>& <#= sn #>::operator=(<#= sn #> other) {
    using std::swap;
    swap(*this, other);
    return *this;
}
<#+
            }

            /*
             * Getters and setters
             */
             for (const auto attr : o.local_attributes()) {
                 if (attr.parsed_type().is_current_simple_type()) {
#>

<#= a.get_qualified_name(attr.parsed_type()) #> <#= sn #>::<#= attr.name().simple() #>() const {
    return <#= a.make_member_variable_name(attr) #>;
}
<#+
                    if (!o.is_immutable()) {
#>

<#= (attr.is_fluent() ? sn + "&" : "void") #> <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #> v) {
    <#= a.make_member_variable_name(attr) #> = v;
<#+
                        if (attr.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}
<#+
                    }
                } else {
#>

const <#= a.get_qualified_name(attr.parsed_type()) #>& <#= sn #>::<#= attr.name().simple() #>() const {
    return <#= a.make_member_variable_name(attr) #>;
}
<#+
                    if (!o.is_immutable()) {
#>

<#= a.get_qualified_name(attr.parsed_type()) #>& <#= sn #>::<#= attr.name().simple() #>() {
    return <#= a.make_member_variable_name(attr) #>;
}

<#= (o.is_fluent() ? sn + "&" : "void") #> <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #>& v) {
    <#= a.make_member_variable_name(attr) #> = v;
<#+
                        if (o.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}

<#= (o.is_fluent() ? sn + "&" : "void") #> <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #>&& v) {
    <#= a.make_member_variable_name(attr) #> = std::move(v);
<#+
                        if (o.is_fluent()) {
#>
    return *this;
<#+
                        }
#>
}
<#+
                    }
                }
            }
#>

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}

#>
