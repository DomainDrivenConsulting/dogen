<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/class_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#+

dogen::formatters::file
class_header_formatter_stitch(assistant& a, const yarn::object& o) {
    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(o.documentation());
            if (!o.parent()) {
#>
class <#= sn #> <#= a.make_final_keyword_text(o) #>{
<#+
            } else {
                const auto& pn(*o.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
class <#= sn #> <#= a.make_final_keyword_text(o) #>: public <#= pqn #> {
<#+
            }
#>
public:
<#+
            /*
             * Compiler generated constructors and destructors.
             */
            if (!a.requires_manual_default_constructor())
#>
    <#= sn #>() = default;
    <#= sn #>(const <#= sn #>&) = default;
<#+
            if (!a.requires_manual_move_constructor())
#>
    <#= sn #>(<#= sn #>&&) = default;
<#+
            if (!o.in_inheritance_relationship())
#>
    ~<#= sn #>() = default;
<#+
            if (o.is_immutable())
#>
    <#= sn #>& operator=(const <#= sn #>&) = delete;
<#+
            else if (o.all_attributes().empty())
#>
    <#= sn #>& operator=(const <#= sn #>&) = default;

<#+
            /*
             * Manually generated default constructor.
             */
            if (a.requires_manual_default_constructor()) {
#>
public:
    <#= sn #>();

<#+
            }

            /*
             * Manually generated destructor.
             *
             * according to MEC++, item 33, base classes should always be
             * abstract. this avoids all sorts of tricky problems with
             * assignment and swap.
             *
             * incidentally, this also fixes some strange clang errors:
             * undefined reference to `vtable.
             */
            if (o.is_parent()) {
#>
    virtual ~<#= sn #>() noexcept = 0;

<#+
            } else if (o.is_child() != 0) {
#>
    virtual ~<#= sn #>() noexcept { }

<#+
            }

            /*
             * Manually generated move constructor.
             */
            if (a.requires_manual_move_constructor()) {
#>
public:
    <#= sn #>(<#= sn #>&& rhs);

<#+
            }

            /*
             * Manually generated complete constructor.
             */
            if (!o.all_attributes().empty()) {
#>
public:
<#+
                const auto attr_count(o.all_attributes().size());
                if (attr_count == 1) {
                    const auto attr(*o.all_attributes().begin());
#>
    explicit <#= sn #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #>);
<#+
                } else {
#>
    <#= sn #>(
<#+
                    dogen::formatters::sequence_formatter sf(attr_count);
                    sf.postfix_configuration().last(");");
                    for (const auto& attr : o.all_attributes()) {
#>
        const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #><#= sf.postfix() #>
<#+
                        sf.next();
                    }
                }
#>

<#+
            }

            /*
             * Friends
             */
            if (a.is_serialization_enabled()) {
#>
private:
    template<typename Archive>
    friend void boost::serialization::save(Archive& ar, const <#= qn #>& v, unsigned int version);

    template<typename Archive>
    friend void boost::serialization::load(Archive& ar, <#= qn #>& v, unsigned int version);

<#+
            }

            /*
             * Visitation.
             */
            if (o.is_visitation_root()) {
                const auto vsn(o.base_visitor()->simple());
#>
public:
    virtual void accept(const <#= vsn #>& v) const = 0;
    virtual void accept(<#= vsn #>& v) const = 0;
    virtual void accept(const <#= vsn #>& v) = 0;
    virtual void accept(<#= vsn #>& v) = 0;

<#+
            } else if (o.is_visitation_leaf()) {
                std::string bvn;
                std::string rpn;
                if (o.derived_visitor()) {
                    bvn = a.get_qualified_name(*o.base_visitor());
                    rpn = a.get_qualified_name(*o.root_parent());
                } else {
                    bvn = o.base_visitor()->simple();
                    rpn = o.root_parent()->simple();
                }
#>
public:
    using <#= rpn #>::accept;

    virtual void accept(const <#= bvn #>& v) const override;
    virtual void accept(<#= bvn #>& v) const override;
    virtual void accept(const <#= bvn #>& v) override;
    virtual void accept(<#= bvn #>& v) override;
<#+
            }

            /*
             * Streaming
             */
            if (a.is_io_enabled()) {
                if (o.is_parent()) {
#>
public:
    virtual void to_stream(std::ostream& s) const;

<#+
                } else if (o.parent()) {
#>
public:
    void to_stream(std::ostream& s) const override;

<#+
                }
            }

            /*
             * Getters and setters.
             */
            if (!o.local_attributes().empty()) {
#>
public:
<#+
                for (const auto& attr : o.local_attributes()) {
                    a.comment_start_method_group(attr.documentation(), !attr.is_immutable());

                    if (attr.parsed_type().is_current_simple_type()) {
#>
    <#= a.get_qualified_name(attr.parsed_type()) #> <#= attr.name().simple() #>() const;
<#+
                        if (attr.is_immutable()) {
#>

<#+
                            continue;
                        }
#>
    <#= a.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> v);
<#+
                    } else {
#>
    const <#= a.get_qualified_name(attr.parsed_type()) #>& <#= attr.name().simple() #>() const;
<#+
                        if (attr.is_immutable()) {
#>

<#+
                            continue;
                        }
#>
    <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #>();
    <#= a.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> v);
    <#= a.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #>&& v);
<#+
                    }
                    a.comment_end_method_group(attr.documentation(), !attr.is_immutable());
#>

<#+
                }
            }

            /*
             * Equality.
             *
             * Equality is only public in leaf classes - MEC++-33.
             */
            if (o.is_parent()) {
#>
protected:
    bool compare(const <#= sn #>& rhs) const;
<#+
            } else {
#>
public:
    bool operator==(const <#= sn #>& rhs) const;
    bool operator!=(const <#= sn #>& rhs) const {
        return !this->operator==(rhs);
    }

<#+
            }

            if (o.in_inheritance_relationship()) {
#>
public:
<#+
                if (o.is_parent() && !o.is_child()) {
#>
    virtual bool equals(const <#= sn #>& other) const = 0;
<#+
                } else if (o.is_parent()) {
                    const auto rpn(*o.root_parent());
#>
    virtual bool equals(const <#= a.get_qualified_name(rpn) #>& other) const = 0;
<#+
                } else if (o.root_parent()) {
                    const auto rpn(*o.root_parent());
#>
    bool equals(const <#= a.get_qualified_name(rpn) #>& other) const override;
<#+
                }
#>

<#+
             }

            /*
             * Swap and assignment.
             *
             * Swap and assignment are only public in leaf classes - MEC++-33
             */
            if ((!o.all_attributes().empty() || o.is_parent()) && !o.is_immutable()) {
                if (o.is_parent()) {
#>
protected:
<#+
                } else {
#>
public:
<#+
                }
#>
    void swap(<#= sn #>& other) noexcept;
<#+
                if (!o.is_parent() && !o.is_immutable()) {
#>
    <#= sn #>& operator=(<#= sn #> other);
<#+
                }
#>

<#+
            }

            /*
             * Member variables.
             */
            if (!o.local_attributes().empty()) {
#>
private:
<#+
                for (const auto& attr : o.local_attributes()) {
#>
    <#= a.get_qualified_name(attr.parsed_type()) #> <#= a.make_member_variable_name(attr) #>;
<#+
                }
            }
#>
};

<#+
            /*
             * Destructor implementation.
             */
            if (o.is_parent()) {
#>
inline <#= sn #>::~<#= sn #>() noexcept { }

<#+
            }

            /*
             * Global equality operator implementation.
             */
            if (o.is_parent()) {
#>
inline bool operator==(const <#= sn #>& lhs, const <#= sn #>& rhs) {
    return lhs.equals(rhs);
}

<#+
            }
        }

        if (!o.all_attributes().empty() && !o.is_parent() && !o.is_immutable()) {
#>

namespace std {

template<>
inline void swap(
    <#= qn #>& lhs,
    <#= qn #>& rhs) {
    lhs.swap(rhs);
}

}
<#+
        }
#>

<#+
    } // sbf
    return a.make_file();
}
#>
