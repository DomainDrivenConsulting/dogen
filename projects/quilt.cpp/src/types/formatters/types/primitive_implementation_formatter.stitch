<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ stitch.inclusion_dependency="dogen/utility/log/logger.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/primitive.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/inserter_implementation_helper.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/primitive_implementation_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=primitive_implementation_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=primitive_implementation #>
<#@ stitch.wale.kvp.yarn_element=yarn::primitive #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_implementation_formatter::inclusion_dependencies(
    const formattables::inclusion_dependencies_builder_factory& f,
    const yarn::element& e) const {
    const auto& o(assistant::as<yarn::primitive>(static_artefact(), e));
    auto builder(f.make());

    const auto ch_arch(traits::primitive_header_archetype());
    builder.add(o.name(), ch_arch);
    return builder.build();
}

dogen::formatters::artefact primitive_implementation_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
    const auto& p(a.as<yarn::primitive>(static_artefact(), e));

    const auto sn(p.name().simple());
    const auto qn(a.get_qualified_name(p.name()));
    {

        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(p.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto attr(p.value_attribute());

            /*
             * Default constructor.
             */
            if (a.requires_manual_default_constructor()) {
#>

<#= sn #>::<#= sn #>()
    : <#= a.make_member_variable_name(attr) #>(static_cast<<#= a.get_qualified_name(attr.parsed_type()) #>>(0)) { }
<#+
            }

            /*
             * Move constructor.
             */
            if (a.requires_manual_move_constructor()) {
#>

<#= sn #>::<#= sn #>(<#= sn #>&& rhs)
    : <#= a.make_member_variable_name(attr) #>(std::move(rhs.<#= a.make_member_variable_name(attr) #>)) { }
<#+
            }

            /*
             * Complete constructor.
             */
#>

<#= sn #>::<#= sn #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #>)
    : <#= a.make_member_variable_name(attr) #>(<#= attr.name().simple() #>) { }

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
