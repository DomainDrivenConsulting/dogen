<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/exception_header_formatter_stitch.hpp" #>
<#+

dogen::formatters::artefact exception_header_formatter_stitch(
    assistant& a, const yarn::exception& e) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(e.documentation());
#>
class <#= e.name().simple() #> : public virtual std::exception, public virtual boost::exception {
public:
    <#= e.name().simple() #>() = default;
    ~<#= e.name().simple() #>() noexcept = default;

public:
    <#= e.name().simple() #>(const std::string& message) : message_(message) { }

public:
    const char* what() const noexcept { return(message_.c_str()); }

private:
    const std::string message_;
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
