<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/exception.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/exception_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=exception_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=exception_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=yarn::exception #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> exception_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const yarn::element& /*e*/) const {
    auto builder(f.make());
    builder.add(inclusion_constants::std::string());
    builder.add(inclusion_constants::boost::exception::info());
    return builder.build();
}

dogen::formatters::artefact exception_header_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
    const auto& ye(a.as<yarn::exception>(static_artefact(), e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(ye.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(ye.documentation());
#>
class <#= ye.name().simple() #> : public virtual std::exception, public virtual boost::exception {
public:
    <#= ye.name().simple() #>() = default;
    ~<#= ye.name().simple() #>()<#= a.make_noexcept_keyword_text() #> = default;

public:
    explicit <#= ye.name().simple() #>(const std::string& message) : message_(message) { }

public:
    const char* what() const<#= a.make_noexcept_keyword_text() #> { return(message_.c_str()); }

private:
    const std::string message_;
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
