<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/smart_pointer_helper_stitch.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#+

std::string smart_pointer_helper::family() const {
    static std::string r("Dereferenceable");
    return r;
}

std::string smart_pointer_helper::owning_formatter() const {
    return traits::class_implementation_formatter_name();
}

bool smart_pointer_helper::requires_explicit_call() const {
    return false;
}

std::string smart_pointer_helper::function_name() const {
    static std::string r("operator==");
    return r;
}

std::string smart_pointer_helper::helper_name() const {
    static std::string r(owning_formatter() + "." + family());
    return r;
}

bool smart_pointer_helper::is_enabled(const assistant& /*a*/) const {
    return true;
}

void smart_pointer_helper::
format(assistant& a, const properties::helper_properties& hp) const {
    {
        const auto d(hp.descriptor());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
#>

inline bool operator==(const <#= d.name_tree_qualified() #>& lhs,
const <#= d.name_tree_qualified() #>& rhs) {
    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
}

<#+
    }
#>

<#+
}

void smart_pointer_helper_stitch(
    nested_type_formatting_assistant& a,
    const properties::nested_type_info& t) {

    {
        auto snf(a.make_scoped_namespace_formatter(t.namespaces()));
        const auto containee(t.children().front());
#>

inline bool operator==(const <#= t.complete_name() #>& lhs,
const <#= t.complete_name() #>& rhs) {
    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
}

<#+
    }
#>

<#+
}
#>
