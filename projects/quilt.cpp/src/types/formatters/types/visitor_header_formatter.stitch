<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/visitor.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/serialization/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/visitor_header_formatter.hpp" #>
<#+

std::string visitor_header_formatter::static_artefact() {
    return traits::visitor_header_archetype();
}

std::string visitor_header_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
visitor_header_formatter::archetype_location() const {
    static annotations::archetype_location
        r(formatters::traits::kernel(), traits::facet(),
            visitor_header_formatter::static_artefact());
    return r;
}

std::type_index visitor_header_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(yarn::visitor)));
    return r;
}

inclusion_support_types visitor_header_formatter::
inclusion_support_type() const {
    return inclusion_support_types::canonical_support;

}

boost::filesystem::path visitor_header_formatter::inclusion_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_inclusion_path_for_cpp_header(n, static_artefact());
}

boost::filesystem::path visitor_header_formatter::full_path(
    const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path_for_cpp_header(n, static_artefact());
}

std::list<std::string> visitor_header_formatter::inclusion_dependencies(
    const formattables::inclusion_dependencies_builder_factory& f,
    const yarn::element& e) const {
    const auto& v(assistant::as<yarn::visitor>(static_artefact(), e));
    auto builder(f.make());
    builder.add(v.visits(), traits::forward_declarations_archetype());

    if (v.parent())
        builder.add(*v.parent(), traits::visitor_header_archetype());

    return builder.build();
}

dogen::formatters::artefact visitor_header_formatter::
format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
    const auto& v(a.as<yarn::visitor>(static_artefact(), e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(v.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(v.documentation());
            if (!v.parent())
#>
class <#= v.name().simple() #> {
<#+
            else {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
class <#= v.name().simple() #> : public <#= pqn #> {
<#+
            }
#>
public:
    virtual ~<#= v.name().simple() #>() noexcept = 0;

public:
<#+
            if (v.parent()) {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
    using <#= pqn #>::visit;

<#+
            }

            bool is_first(true);
            for (const auto& t : v.visits()) {
                if (!is_first)
#>

<#+
                const auto qn(a.get_qualified_name(t));
                const auto doc("Accept visits for type " + qn);
                a.comment_start_method_group(doc);
#>
    virtual void visit(const <#= qn #>&) const { }
    virtual void visit(const <#= qn #>&) { }
    virtual void visit(<#= qn #>&) const { }
    virtual void visit(<#= qn #>&) { }
<#+
                a.comment_end_method_group(doc);
                is_first = false;
            }
#>
};

inline <#= v.name().simple() #>::~<#= v.name().simple() #>() noexcept { }

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
