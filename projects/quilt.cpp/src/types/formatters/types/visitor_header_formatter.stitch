<#@ decoration.licence_name=gpl_v3 #>
<#@ decoration.copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ decoration.modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/visitor_header_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#+

dogen::formatters::artefact visitor_header_formatter_stitch(
    assistant& a, const yarn::visitor& v) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            const auto ns(a.make_namespaces(v.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(v.documentation());
            if (!v.parent())
#>
class <#= v.name().simple() #> {
<#+
            else {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
class <#= v.name().simple() #> : public <#= pqn #> {
<#+
            }
#>
public:
    virtual ~<#= v.name().simple() #>() noexcept = 0;

public:
<#+
            if (v.parent()) {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));            
#>
    using <#= pqn #>::visit;

<#+
            }

            bool is_first(true);
            for (const auto& t : v.visits()) {
                if (!is_first)
#>

<#+
                const auto qn(a.get_qualified_name(t));
                const auto doc("Accept visits for type " + qn);
                a.comment_start_method_group(doc);
#>
    virtual void visit(const <#= qn #>&) const { }
    virtual void visit(const <#= qn #>&) { }
    virtual void visit(<#= qn #>&) const { }
    virtual void visit(<#= qn #>&) { }
<#+
                a.comment_end_method_group(doc);
                is_first = false;
            }
#>
};

inline <#= v.name().simple() #>::~<#= v.name().simple() #>() noexcept { }

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_file();
}

#>
