<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=a.stream() #>
<#@ inclusion_dependency="dogen/quilt.cpp/types/formatters/types/visitor_header_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#+

dogen::formatters::file visitor_header_formatter_stitch(
    assistant& a, const formattables::visitor_info& v) {

    {
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
            auto snf(a.make_scoped_namespace_formatter(v.namespaces()));
#>

<#+
            a.comment(v.documentation());
#>
class <#= v.name() #> {
public:
    virtual ~<#= v.name() #>() noexcept = 0;

public:
<#+
            bool is_first(true);
            for (const auto& t : v.types()) {
                if (!is_first)
#>

<#+
                a.comment_start_method_group(t.documentation());
#>
    virtual void visit(const <#= t.qualified_name() #>&) const { }
    virtual void visit(const <#= t.qualified_name() #>&) { }
    virtual void visit(<#= t.qualified_name() #>&) const { }
    virtual void visit(<#= t.qualified_name() #>&) { }
<#+
                a.comment_end_method_group(t.documentation());
                is_first = false;
            }
#>
};

inline <#= v.name() #>::~<#= v.name() #>() noexcept { }

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_file();
}

#>
