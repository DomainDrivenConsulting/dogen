<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::cpp::formatters::types #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/meta_model/module.hpp" #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.cpp/types/formatters/types/namespace_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=namespace_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=namespace_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=yarn::meta_model::module #>
<#@ stitch.wale.kvp.meta_element=module #>
<#@ stitch.wale.kvp.meta_name_factory=yarn::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> namespace_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const yarn::meta_model::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

dogen::formatters::artefact namespace_header_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& m(a.as<yarn::meta_model::module>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(m.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(m.documentation());
#>
namespace <#= m.name().simple() #> {
}

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
