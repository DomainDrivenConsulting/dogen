
std::string {{class.simple_name}}::static_id() {
    return traits::{{archetype.simple_name}}_archetype();
}

std::string {{class.simple_name}}::id() const {
    return static_id();
}

physical::location
{{class.simple_name}}::archetype_location() const {
    static physical::location
        r(cpp::traits::kernel(),  cpp::traits::backend(),
          traits::facet(),
          {{class.simple_name}}::static_id());
    return r;
}

const logical::entities::name& {{class.simple_name}}::meta_name() const {
    using {{meta_name_factory}};
    static auto r(meta_name_factory::make_{{meta_element}}_name());
    return r;
}

std::string {{class.simple_name}}::family() const {
    return cpp::traits::implementation_family();
}

inclusion_support_types {{class.simple_name}}::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path {{class.simple_name}}::inclusion_path(
    const formattables::locator& /*l*/, const logical::entities::name& n) const {

    using namespace dogen::utility::log;
    static logger lg(
        logger_factory({{class.simple_name}}::static_id()));
    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path {{class.simple_name}}::full_path(
    const formattables::locator& l, const logical::entities::name& n) const {
    return l.make_full_path_for_cpp_implementation(n, static_id());
}
