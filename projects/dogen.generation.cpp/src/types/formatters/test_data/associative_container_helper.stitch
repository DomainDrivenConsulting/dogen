<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::generation::cpp::formatters::test_data #>
<#@ stitch.inclusion_dependency="dogen.formatting/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/test_data/associative_container_helper.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=AssociativeContainer #>
<#@ stitch.wale.kvp.class.simple_name=associative_container_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void associative_container_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
#>

<#= qn #> create_<#= ident #>(unsigned int position) {
    <#= qn #> r;
    for (unsigned int i(0); i < 4; ++i) {
<#+
    if (hp.direct_descendants().size() == 1) {
        const auto containee(hp.direct_descendants().front());
#>
        r.insert(create_<#= containee.name_tree_identifiable() #>(position + i));
<#+
    } else if (hp.direct_descendants().size() == 2) {
        const auto key(hp.direct_descendants().front());
        const auto value(hp.direct_descendants().back());
#>
        r.insert(std::make_pair(create_<#= key.name_tree_identifiable() #>(position + i), create_<#= value.name_tree_identifiable() #>(position + i)));
<#+
    }
#>
    }
    return r;
}
<#+
}
#>
