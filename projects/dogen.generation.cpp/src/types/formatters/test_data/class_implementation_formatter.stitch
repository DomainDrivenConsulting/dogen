<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters::test_data #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/test_data/class_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> class_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {

    const auto& o(assistant::as<logical::entities::structural::object>(e));
    auto builder(f.make());
    builder.add(o.name(), traits::class_header_archetype());

    const auto carch(traits::canonical_archetype());
    builder.add(o.transparent_associations(), carch);
    builder.add(o.opaque_associations(), carch);
    builder.add(o.parents(), carch);
    builder.add(o.leaves(), carch);

    return builder.build();
}

extraction::entities::artefact class_implementation_formatter::
format(const context& ctx, const logical::entities::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& o(a.as<logical::entities::structural::object>(e));

    {
        const auto sn(o.name().simple());
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        if (!o.local_attributes().empty()) {
#>
namespace {
<#+
        a.add_helper_methods(o.name().qualified().dot());
#>

}

<#+
        }

        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));

            /*
             * Default constructor.
             */
            if (!o.is_parent()) {
#>

<#= sn #>_generator::<#= sn #>_generator() : position_(0) { }
<#+
            }

            /*
             * Populate method.
             */
            if (!o.is_immutable()) {
                bool no_args(o.local_attributes().empty() && o.parents().empty());
                if (no_args) {
#>

void <#= sn #>_generator::
populate(const unsigned int /*position*/, result_type& /*v*/) {
<#+
                } else {
#>

void <#= sn #>_generator::
populate(const unsigned int position, result_type& v) {
<#+
                }

                if (!o.parents().empty()) {
                    const auto& pn(o.parents().front());
                    const auto pqn(a.get_qualified_name(pn));
#>
    <#= pqn #>_generator::populate(position, v);
<#+
                }
                unsigned int i(0);
                for (const auto attr : o.local_attributes()) {
#>
    v.<#= attr.name().simple() #>(create_<#= attr.parsed_type().qualified().identifiable() #>(position + <#= i #>));
<#+
                    ++i;
                }
#>
}
<#+
            }

            /*
             * Create method.
             */
            if (!o.is_parent()) {
                 const bool no_arg(o.all_attributes().empty());
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::create(const unsigned int<#= (no_arg ? "/*position*/" : " position") #>) {
<#+
                if (o.is_immutable()) {
#>
    return <#= sn #>(
<#+
                    if (o.local_attributes().empty())
#>

<#+
                    else {
                        generation::formatters::sequence_formatter sf(o.local_attributes().size());
                        for (const auto attr : o.local_attributes()) {
#>
        create_<#= attr.parsed_type().qualified().identifiable() #>(position + <#= sf.current_position() #>)<#= sf.postfix() #>
<#+
                            sf.next();
                        }
                    }
#>
        );
<#+
                } else {
#>
    <#= sn #> r;
<#+
                    if (!o.all_attributes().empty())
#>
    <#= sn #>_generator::populate(position, r);
    return r;
<#+
                }
#>
}
<#+
            }

            /*
             * Create method ptr.
             */
#>

<#= sn #>_generator::result_type*
<#= sn #>_generator::create_ptr(const unsigned int position) {
<#+
            if (o.leaves().empty()) {
                if (o.is_immutable())
#>
    return new <#= sn #>(create(position));
<#+
                else {
#>
    <#= sn #>* p = new <#= sn #>();
    <#= sn #>_generator::populate(position, *p);
    return p;
<#+
                }
            } else {
                auto leaves(o.leaves());
                const auto front(leaves.front());
                leaves.pop_front();
                unsigned int i(0);
                const auto total(static_cast<unsigned int>(leaves.size()));
                for (const auto& l : leaves) {
#>
    if ((position % <#= total #>) == <#= i++ #>)
        return <#= a.get_qualified_name(l) #>_generator::create_ptr(position);
<#+
                }
#>
    return <#= a.get_qualified_name(front) #>_generator::create_ptr(position);
<#+
            }
#>
}
<#+
            /*
             * Function operator
             */
             if (!o.is_parent()) {
#>

<#= sn #>_generator::result_type
<#= sn #>_generator::operator()() {
    return create(position_++);
}
<#+
            }
#>

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
