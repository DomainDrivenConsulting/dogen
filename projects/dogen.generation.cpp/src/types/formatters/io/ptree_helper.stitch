<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters::io #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/ptree_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.helper.family=BoostPTree #>
<#@ masd.stitch.wale.kvp.class.simple_name=ptree_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void ptree_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
#>

inline std::ostream& operator<<(std::ostream& s, const <#= nt_qn #>& v) {
    std::ostringstream ss;
    boost::property_tree::write_json(ss, v);

    std::string content(ss.str());
    boost::replace_all(content, "\r\n", "");
    boost::replace_all(content, "\n", "");

    s << content;
    return s;
}

<#+
    }
#>

<#+
}
#>
