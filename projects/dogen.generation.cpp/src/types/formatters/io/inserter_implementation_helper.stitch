<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters::io #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/inserter_implementation_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#+

void inserter_implementation_helper(
    assistant& a, const logical::meta_model::structural::object& o, const bool inside_class) {

    const auto qn(a.get_qualified_name(o.name()));

    if (a.requires_stream_manipulators()) {
#>
    boost::io::ios_flags_saver ifs(s);
    s.setf(std::ios_base::boolalpha);
    s.setf(std::ios::fixed, std::ios::floatfield);
    s.precision(6);
    s.setf(std::ios::showpoint);

<#+
    }

    const bool no_parent_and_no_attributes(o.parents().empty() &&
        o.all_attributes().empty());
#>
    s << " { "
      << "\"__type__\": " << "\"<#= qn #>\""<#= (no_parent_and_no_attributes ? " << \" }\";" : " << \", \"") #>
<#+

    generation::formatters::sequence_formatter sf(o.parents().size());
    sf.prefix_configuration().first("  << ").not_first("s << ");
    sf.element_separator("");
    if (!o.parents().empty()) {
        const auto& pn(o.parents().front());
        const auto pqn(a.get_qualified_name(pn));
#>
    <#= sf.prefix() #>"\"__parent_<#= sf.current_position() #>__\": "<#= sf.postfix() #>;
    <#= pqn #>::to_stream(s);
<#+
        sf.next();
    }

    sf.reset(o.local_attributes().size());

    if (!o.parents().empty())
        sf.prefix_configuration().first("s << \", \"\n      ");
    else
        sf.prefix_configuration().first("  ");
    sf.prefix_configuration().not_first("  ");
    sf.postfix_configuration().not_last(" << \", \"");
    sf.element_separator("");

    for (const auto attr : o.local_attributes()) {
        std::string variable_name;
        if (inside_class)
            variable_name = attr.member_variable_name();
        else
            variable_name = "v." + attr.getter_setter_name() + "()";

#>
    <#= sf.prefix() #><< "\"<#= attr.name().simple() #>\": " << <#= a.streaming_for_type(attr.parsed_type().current(), variable_name) #><#= sf.postfix() #>
<#+
        sf.next();
    }

    if (!no_parent_and_no_attributes) {
        if (!o.local_attributes().empty())
#>
      << " }";
<#+
        else
#>
    s << " }";
<#+
    }

    if (!inside_class)
#>
    return(s);
<#+
}
#>
