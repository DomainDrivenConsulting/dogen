<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::generation::cpp::formatters::io #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/smart_pointer_helper.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation.wale #>
<#@ stitch.wale.kvp.helper.family=SmartPointer #>
<#@ stitch.wale.kvp.class.simple_name=smart_pointer_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void smart_pointer_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
        const auto containee(hp.direct_descendants().front());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= nt_qn #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= n_qn #>\"" << ", "
      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";

    if (v)
        s << "\"data\": " << <#= a.streaming_for_type(containee, "*v") #>;
    else
        s << "\"data\": ""\"<null>\"";
    s << " }";
    return s;
}

<#+
    }
#>

<#+
}
#>
