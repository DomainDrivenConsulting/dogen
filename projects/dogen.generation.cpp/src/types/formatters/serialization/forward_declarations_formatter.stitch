<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::generation::cpp::formatters::serialization #>
<#@ stitch.inclusion_dependency="dogen.modeling/types/meta_model/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/forward_declarations.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/serialization/forward_declarations_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=forward_declarations_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=forward_declarations #>
<#@ stitch.wale.kvp.class.inclusion_support_type=regular_support #>
<#@ stitch.wale.kvp.yarn_element=fabric::forward_declarations #>
<#@ stitch.wale.kvp.meta_element=forward_declarations #>
<#@ stitch.wale.kvp.meta_name_factory=fabric::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> forward_declarations_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const modeling::meta_model::element& e) const {
    auto builder(f.make());

    using tp = formatters::types::traits;
    const auto tp_fn(tp::forward_declarations_archetype());
    builder.add(e.name(), tp_fn);

    return builder.build();
}

modeling::meta_model::artefact forward_declarations_formatter::
format(const context& ctx, const modeling::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);

    const auto& fd(a.as<fabric::forward_declarations>(e));

    // FIXME: hack: legacy formatters do not support serialisation
    // forward declarations for some types.
    if (fd.is_enum() || fd.is_exception())
        return modeling::meta_model::artefact();

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        const auto qn(a.get_qualified_name(fd.name()));
#>

namespace boost {
namespace serialization {

template<class Archive>
void save(Archive& ar, const <#= qn #>& v, unsigned int version);

template<class Archive>
void load(Archive& ar, <#= qn #>& v, unsigned int version);

} }

<#+
    } // sbf
    return a.make_artefact();
}

#>
