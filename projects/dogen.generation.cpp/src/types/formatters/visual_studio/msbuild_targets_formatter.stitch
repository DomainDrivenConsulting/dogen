<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/msbuild_targets.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/msbuild_targets_formatter.hpp" #>
<#+

std::string msbuild_targets_formatter::static_id() {
    return traits::msbuild_targets_archetype();
}

std::string msbuild_targets_formatter::id() const {
    static auto r(archetype_location().archetype());
    return r;
}

archetypes::location
msbuild_targets_formatter::archetype_location() const {
    static archetypes::location
        r(cpp::traits::kernel(), cpp::traits::backend(),
          traits::msbuild_facet(),
          msbuild_targets_formatter::static_id());
    return r;
}

const assets::meta_model::name& msbuild_targets_formatter::meta_name() const {
    static auto r(fabric::meta_name_factory::make_msbuild_targets_name());
    return r;
}

std::string msbuild_targets_formatter::family() const {
    return cpp::traits::msbuild_family();
}

inclusion_support_types
msbuild_targets_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path msbuild_targets_formatter::inclusion_path(
    const formattables::locator& /*l*/, const assets::meta_model::name& n) const {

    using namespace dogen::utility::log;
    using namespace dogen::generation::cpp::formatters;
    static logger lg(logger_factory(static_id()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path msbuild_targets_formatter::full_path(
    const formattables::locator& l, const assets::meta_model::name& n) const {
    return l.make_full_path_for_msbuild_targets(n, static_id());
}

std::list<std::string> msbuild_targets_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const assets::meta_model::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

extraction::meta_model::artefact msbuild_targets_formatter::
format(const context& ctx, const assets::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& c(a.as<fabric::msbuild_targets>(e));

    {
        const auto ts(assets::meta_model::technical_space::xml);
        a.make_decoration_preamble(e, ts);
        const auto model_name(a.get_identifiable_model_name(c.name()));
        const auto product_name(a.get_product_name(c.name()));
        const auto targets(c.odb_targets());
#>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

    <!--[
        .NAME: odb.targets

        .SYNOPSIS:
            Generates all of the ODB files for this project.

        .DESCRIPTION:
            Calls the ODB compiler against each of the files in this Dogen model that require
            ODB compilation. Also moves the generated files to their correct location.

        .INPUTS:

        .OUTPUTS:
    ]-->
    <Target Name="<#= targets.main_target_name() #>"
<#+
            generation::formatters::sequence_formatter sf(targets.targets().size());
            sf.prefix_configuration().first("          DependsOnTargets=\"")
                                     .not_first("                            ");
            sf.postfix_configuration().last("\">");
            sf.element_separator(";");
            for (const auto& target : targets.targets()) {
#>
<#= sf.prefix() #><#= target.name() #><#= sf.postfix() #>
<#+
                sf.next();
            }
#>
        <Message Importance="high" Text="ODB <#= model_name #> "/>
    </Target>

<#+
            for (const auto& target : targets.targets()) {
#>
    <Target Name="<#= target.name() #>">
        <Message Importance="high" Text="<#= target.comment() #>"/>
        <Exec WorkingDirectory="$(OutputDirectory)" Command="&quot;$(OdbPath)&quot; -D_SECURE_SCL=0 $(OdbIncludeDirectories) --options-file $(MSBuildThisFileDirectory)<#= targets.common_odb_options() #> --options-file $(MSBuildThisFileDirectory)<#= target.object_odb_options() #> --output-dir $(MSBuildThisFileDirectory)<#= target.output_directory() #> $(MSBuildThisFileDirectory)<#= target.types_file() #>" />
<#+
                for (const auto& pair : target.move_parameters()) {
#>
        <Move
            SourceFiles="$(MSBuildThisFileDirectory)<#= pair.first #>"
            DestinationFolder="$(MSBuildThisFileDirectory)<#= pair.second #>" />
<#+
                }
#>
    </Target>
<#+
            }
#>
</Project>
<#+
    } // sbf
    return a.make_artefact();
}
#>
