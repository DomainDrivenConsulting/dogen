<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::generation::cpp::formatters::hash #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/hash/associative_container_helper.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=AssociativeContainer #>
<#@ stitch.wale.kvp.class.simple_name=associative_container_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void associative_container_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());

    if (hp.direct_descendants().size() == 2) {
        const auto key(hp.direct_descendants().front());
        const auto value(hp.direct_descendants().back());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);
    for (const auto i : v) {
<#+
        if (!key.requires_hashing_helper())
#>
        combine(seed, i.first);
<#+
        else
#>
        combine(seed, hash_<#= key.name_tree_identifiable() #>(i.first));
<#+

        if (!(value.requires_hashing_helper()))
#>
        combine(seed, i.second);
<#+
        else
#>
        combine(seed, hash_<#= value.name_tree_identifiable() #>(i.second));
    }
    return seed;
}
<#+
    } else {
        const auto containee(hp.direct_descendants().front());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);
    for (const auto i : v) {
<#+
    if (!containee.requires_hashing_helper())
#>
        combine(seed, i);
<#+
    else
#>
        combine(seed, hash_<#= containee.name_tree_identifiable() #>(i));
    }
    return seed;
}
<#+
    }
}
#>
