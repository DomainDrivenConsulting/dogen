<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency=<boost/algorithm/string/case_conv.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/fabric/cmakelists.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/source_cmakelists_formatter.hpp" #>
<#+

std::string source_cmakelists_formatter::static_id() {
    return traits::source_cmakelists_archetype();
}

std::string source_cmakelists_formatter::id() const {
    return static_id();
}

archetypes::location source_cmakelists_formatter::
archetype_location() const {
    static archetypes::location
        r(cpp::traits::kernel(), cpp::traits::backend(),
          traits::cmake_facet(),
          source_cmakelists_formatter::static_id());
    return r;
}

const assets::meta_model::name& source_cmakelists_formatter::meta_name() const {
    static auto r(fabric::meta_name_factory::make_cmakelists_name());
    return r;
}

std::string source_cmakelists_formatter::family() const {
    return cpp::traits::cmake_family();
}

inclusion_support_types source_cmakelists_formatter::
inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path source_cmakelists_formatter::inclusion_path(
    const formattables::locator& /*l*/, const assets::meta_model::name& n) const {

    using namespace dogen::utility::log;
    using namespace dogen::generation::cpp::formatters;
    static logger lg(logger_factory(source_cmakelists_formatter::static_id()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path source_cmakelists_formatter::full_path(
    const formattables::locator& l, const assets::meta_model::name& n) const {
    return l.make_full_path_for_source_cmakelists(n, static_id());
}

std::list<std::string> source_cmakelists_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const assets::meta_model::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

extraction::meta_model::artefact source_cmakelists_formatter::
format(const context& ctx, const assets::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& c(a.as<fabric::cmakelists>(e));

    {
        const auto ts(assets::meta_model::technical_space::cmake);
        a.make_decoration_preamble(e, ts);
        const auto model_name(a.get_dot_separated_model_name(c.name()));
        const auto product_name(a.get_product_name(c.name()));
#>
set(name "<#= model_name #>")
set(lib_binary_name ${name})
set(lib_target_name ${name}.lib)

set(files "")
file(GLOB_RECURSE files RELATIVE
    "${CMAKE_CURRENT_SOURCE_DIR}/"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.<#= c.implementation_file_extension() #>")

<#+
        if (a.is_odb_facet_enabled() && !c.odb_targets().targets().empty()) {
#>
set(odb_files "")
file(GLOB_RECURSE odb_files RELATIVE
   "${CMAKE_CURRENT_SOURCE_DIR}/"
   "${CMAKE_CURRENT_SOURCE_DIR}/*.cxx")
set(files ${files} ${odb_files})

<#+
        }
#>
set(lib_files ${files})
add_library(${lib_target_name} ${lib_files})
set_target_properties(${lib_target_name} PROPERTIES
<#+
        if (a.is_cpp_standard_98()) {
#>
    CXX_STANDARD 98
<#+
        }
#>
    OUTPUT_NAME ${lib_binary_name})

install(TARGETS ${lib_target_name}
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    COMPONENT libraries)
<#+
        if (a.is_odb_facet_enabled() && !c.odb_targets().targets().empty()) {
            const auto targets(c.odb_targets());
#>

#
# ODB Executable Targets
#
if (ODB_EXECUTABLE)
    # Top-level targets
    add_custom_target(<#= targets.main_target_name() #>)
    add_dependencies(odb_all <#= targets.main_target_name() #>)

    if (NOT ODB_EXECUTABLE_GLOBAL_ARGS)
        message(WARNING "ODB_EXECUTABLE_GLOBAL_ARGS not defined. Inclusion errors likely when running ODB targets.")
    endif()

<#+
            for (const auto& target : targets.targets()) {
#>

    add_custom_target(<#= target.name() #>
        COMMENT "<#= target.comment() #>"
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMAND ${ODB_EXECUTABLE}
            --options-file ${CMAKE_CURRENT_SOURCE_DIR}/<#= targets.common_odb_options() #>
            --options-file ${CMAKE_CURRENT_SOURCE_DIR}/<#= target.object_odb_options() #>
            --output-dir ${CMAKE_CURRENT_SOURCE_DIR}/<#= target.output_directory() #>
            ${ODB_EXECUTABLE_GLOBAL_ARGS}
            ${CMAKE_CURRENT_SOURCE_DIR}/<#= target.types_file() #>
<#+
                for (const auto& pair : target.move_parameters())
#>
        COMMAND mv ${CMAKE_CURRENT_SOURCE_DIR}/<#= pair.first #> ${CMAKE_CURRENT_SOURCE_DIR}/<#= pair.second #>
        VERBATIM
    )
    add_dependencies(<#= targets.main_target_name() #> <#= target.name() #>)
<#+
            }
#>
endif()
<#+
        }
    } // sbf
        return a.make_artefact();
}
#>
