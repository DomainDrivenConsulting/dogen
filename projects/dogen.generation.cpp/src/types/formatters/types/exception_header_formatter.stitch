<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency="dogen.assets/types/meta_model/structural/exception.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.assets/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/exception_header_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=exception_header_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=exception_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=assets::meta_model::structural::exception #>
<#@ masd.stitch.wale.kvp.meta_element=exception #>
<#@ masd.stitch.wale.kvp.meta_name_factory=assets::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> exception_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const assets::meta_model::element& /*e*/) const {
    auto builder(f.make());
    builder.add(inclusion_constants::std::string());
    builder.add(inclusion_constants::boost::exception::info());
    return builder.build();
}

extraction::meta_model::artefact exception_header_formatter::
format(const context& ctx, const assets::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& ye(a.as<assets::meta_model::structural::exception>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(ye.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(ye.documentation());
#>
class <#= ye.name().simple() #> : public virtual std::exception, public virtual boost::exception {
public:
<#+
            if (a.is_cpp_standard_98()) {
#>
    <#= ye.name().simple() #>() {}
    ~<#= ye.name().simple() #>() {}
<#+
            } else {
#>
    <#= ye.name().simple() #>() = default;
    ~<#= ye.name().simple() #>()<#= a.make_noexcept_keyword_text() #> = default;
<#+
            }
#>

public:
    explicit <#= ye.name().simple() #>(const std::string& message) : message_(message) { }

public:
<#+
            if (a.is_cpp_standard_98()) {
                // Note: we are using BOOST_NOEXCEPT here by design. The problem is
                // users may include this header in a C++ 98 project or in a C++ > 11 project;
                // and we need to have different behaviours. Depending on this inclusion.
                // If we do not, we will cause compilation errors when including C++ 98 code
                // on a C++ 11 project. This is because the standard library will have noexcept
                // but we won't (as we were generated for C++ 98), so we'd be weakening the exception
                // guarantees. By using the boost macro we will do the right thing hopefully.
                // And since we already need boost for exception, we should be ok.
#>
    const char* what() const BOOST_NOEXCEPT { return(message_.c_str()); }
<#+
            } else {
#>
    const char* what() const<#= a.make_noexcept_keyword_text() #> { return(message_.c_str()); }
<#+
            }
#>

private:
    const std::string message_;
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
