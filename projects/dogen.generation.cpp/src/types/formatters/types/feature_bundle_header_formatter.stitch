<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::generation::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/string/splitter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.assets/types/meta_model/variability/feature_bundle.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.assets/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/io/inserter_implementation_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.generation.cpp/types/formatters/types/feature_bundle_header_formatter.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_formatter_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=feature_bundle_header_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=feature_bundle_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=assets::meta_model::variability::feature_bundle #>
<#@ masd.stitch.wale.kvp.meta_element=variability_feature_bundle #>
<#@ masd.stitch.wale.kvp.meta_name_factory=assets::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> feature_bundle_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const assets::meta_model::element& e) const {
    using assets::meta_model::variability::feature_bundle;

    const auto& fb(assistant::as<feature_bundle>(e));
    auto builder(f.make());

    builder.add(inclusion_constants::std::list());
    builder.add("\"dogen.variability/types/meta_model/feature.hpp\"");

    if (fb.generate_static_configuration()) {
        builder.add("\"dogen.variability/types/meta_model/feature_model.hpp\"");
        builder.add("\"dogen.variability/types/meta_model/configuration.hpp\"");

        const auto ch_arch(traits::class_header_archetype());
        builder.add(fb.transparent_associations(), ch_arch);

        const auto fwd_arch(traits::class_forward_declarations_archetype());
        builder.add(fb.opaque_associations(), fwd_arch);
    }

    return builder.build();
}

extraction::meta_model::artefact feature_bundle_header_formatter::
format(const context& ctx, const assets::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& fb(a.as<assets::meta_model::variability::feature_bundle>(e));

    {
        const auto sn(fb.name().simple());
        const auto qn(a.get_qualified_name(fb.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(fb));
        a.add_helper_methods(fb.name().qualified().dot());

        {
            const auto ns(a.make_namespaces(fb.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            using utility::string::splitter;
#>

<#+
            a.comment(fb.documentation());
#>
class <#= sn #> final {
<#+
            if (fb.generate_static_configuration()) {
#>
public:
    struct feature_group {
<#+
                for (const auto& fb_ft : fb.features()) {
                    const auto simple_key(splitter::split_scoped(fb_ft.key()).back());
#>
        variability::meta_model::feature <#= simple_key #>;
<#+
                }
#>
    };

    static feature_group
    make_feature_group(const variability::meta_model::feature_model& fm);

public:
    struct static_configuration {
<#+
                for (const auto& fb_ft : fb.features()) {
                    const auto simple_key(splitter::split_scoped(fb_ft.key()).back());
#>
        <#= a.get_qualified_name(fb_ft.parsed_type()) #> <#= simple_key #>;
<#+
                }

                if (fb.requires_manual_default_constructor()) {
                    bool is_first(true);
                    std::ostringstream ss;
                    for (const auto& fb_ft : fb.features()) {
                        if (!fb_ft.parsed_type().is_current_simple_type())
                            continue;

                        const auto simple_key(splitter::split_scoped(fb_ft.key()).back());

                        if (!is_first)
                            ss << "," << std::endl << "            ";

                        ss << simple_key << "()";
                        is_first = false;
                    }
#>

        static_configuration() :
            <#= ss.str() #> {}
<#+
                }
#>
    };

    static static_configuration make_static_configuration(
        const feature_group& fg,
        const variability::meta_model::configuration& cfg);

    template<typename Configurable>
    static static_configuration make_static_configuration(
        const feature_group& fg, const Configurable& c) {
        return make_static_configuration(fg, *c.configuration());
    }
<#+
            }
#>

<#+
            if (fb.generate_registration()) {
#>
public:
    static std::list<dogen::variability::meta_model::feature>
    make_features();
<#+
            }
#>
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}
#>
