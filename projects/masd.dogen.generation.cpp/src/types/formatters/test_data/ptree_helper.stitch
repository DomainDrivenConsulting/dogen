<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::test_data #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/test_data/ptree_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=BoostPTree #>
<#@ masd.stitch.wale.kvp.class.simple_name=ptree_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void ptree_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
#>

<#= qn #>
create_<#= ident #>(const unsigned int position) {
    using boost::property_tree::ptree;
    ptree c;
    c.put("key_2", position);
    ptree r;
    r.push_back(ptree::value_type("key_1", c));
    return r;
}
<#+
}
#>
