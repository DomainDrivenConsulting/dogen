<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::test_data #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/enumeration.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/test_data/enum_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=enum_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=enum_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::enumeration #>
<#@ masd.stitch.wale.kvp.meta_element=enumeration #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> enum_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {
    auto builder(f.make());

    builder.add(e.name(), traits::enum_header_archetype());
    return builder.build();
}

extraction::meta_model::artefact enum_implementation_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& ye(a.as<coding::meta_model::enumeration>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(ye.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#= ye.name().simple() #>_generator::<#= ye.name().simple() #>_generator() : position_(0) { }
void <#= ye.name().simple() #>_generator::
populate(const unsigned int position, result_type& v) {
    v = static_cast<<#= ye.name().simple() #>>(position % <#= ye.enumerators().size() #>);
}

<#= ye.name().simple() #>_generator::result_type
<#= ye.name().simple() #>_generator::create(const unsigned int  position) {
    result_type r;
    <#= ye.name().simple() #>_generator::populate(position, r);
    return r;
}

<#= ye.name().simple() #>_generator::result_type
<#= ye.name().simple() #>_generator::operator()() {
    return create(position_++);
}

<#+
         } // snf
    } // sbf
    return a.make_artefact();
}

#>
