<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::tests #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.extraction/types/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/enumeration.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/test_data/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/tests/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/tests/enum_implementation_formatter.hpp" #>
<#+

std::string enum_implementation_formatter::static_id() {
    return traits::enum_implementation_archetype();
}

std::string enum_implementation_formatter::id() const {
    return static_id();
}

annotations::archetype_location
enum_implementation_formatter::archetype_location() const {
    static annotations::archetype_location
        r(cpp::traits::kernel(),  cpp::traits::backend(),
          traits::facet(),
          enum_implementation_formatter::static_id());
    return r;
}

const coding::meta_model::name& enum_implementation_formatter::meta_name() const {
    using coding::helpers::meta_name_factory;
    static auto r(meta_name_factory::make_enumeration_name());
    return r;
}

std::string enum_implementation_formatter::family() const {
    return cpp::traits::implementation_family();
}

inclusion_support_types enum_implementation_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path enum_implementation_formatter::inclusion_path(
    const formattables::locator& /*l*/, const coding::meta_model::name& n) const {

    using namespace dogen::utility::log;
    static logger lg(
        logger_factory(enum_implementation_formatter::static_id()));
    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.id();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.id()));
}

boost::filesystem::path enum_implementation_formatter::full_path(
    const formattables::locator& l, const coding::meta_model::name& n) const {
    return l.make_full_path_for_tests_cpp_implementation(n, static_id());
}

std::list<std::string> enum_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {

    auto builder(f.make());
    builder.add(e.name(), types::traits::enum_header_archetype());
    builder.add(e.name(), test_data::traits::enum_header_archetype());

    using ic = inclusion_constants;
    builder.add(ic::std::string());
    builder.add(ic::boost::test::unit_test());

    const auto io_arch(io::traits::enum_header_archetype());
    const bool io_enabled(builder.is_enabled(e.name(), io_arch));
    if (io_enabled) {
        builder.add(e.name(), io_arch);
        builder.add(ic::std::sstream());
        builder.add(ic::boost::property_tree::ptree());
        builder.add(ic::boost::property_tree::json_parser());
    }

    using ser = formatters::serialization::traits;
    const auto ser_arch(ser::enum_header_archetype());
    const bool ser_enabled(builder.is_enabled(e.name(), ser_arch));
    if (ser_enabled) {
        builder.add(e.name(), ser_arch);

        builder.add(ic::boost::archive::text_iarchive());
        builder.add(ic::boost::archive::text_oarchive());
        builder.add(ic::boost::archive::binary_iarchive());
        builder.add(ic::boost::archive::binary_oarchive());
        builder.add(ic::boost::archive::polymorphic_iarchive());
        builder.add(ic::boost::archive::polymorphic_oarchive());
        builder.add(ic::boost::serialization::nvp());
        builder.add(ic::boost::archive::xml_iarchive());
        builder.add(ic::boost::archive::xml_oarchive());
    }

    using hash = formatters::hash::traits;
    const auto hash_arch(hash::enum_header_archetype());
    const bool hash_enabled(builder.is_enabled(e.name(), hash_arch));
    if (hash_enabled)
        builder.add(e.name(), hash_arch);

    return builder.build();
}

extraction::meta_model::artefact enum_implementation_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        const auto qn(a.get_qualified_name(e.name()));
#>
BOOST_AUTO_TEST_SUITE(<#= e.name().simple() #>_tests)

<#+
        /*
         * If test data is not enabled, none of the tests can be
         * generated. We need to insert a fake test for now. The real
         * solution will be to filter based on element state.
         */
        if (!a.is_test_data_enabled()) {
            /*
             * No tests.
             */
#>
BOOST_AUTO_TEST_CASE(fake_test) {
    BOOST_CHECK(true);
}

<#+
        } else {
            if (a.is_io_enabled()) {
                /*
                 * IO tests.
                 */
#>
BOOST_AUTO_TEST_CASE(inserter_operator_produces_valid_json) {
    <#= qn #>_generator g;
    const auto a(g());
    std::stringstream s;
    s << a;

    boost::property_tree::ptree pt;
    BOOST_REQUIRE_NO_THROW(read_json(s, pt));
}

<#+
            }

            if (a.is_serialization_enabled()) {
                /*
                 * Serialization tests.
                 */
#>
BOOST_AUTO_TEST_CASE(xml_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(text_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        xml_oarchive oa(os);
        oa << BOOST_SERIALIZATION_NVP(a);
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        xml_iarchive ia(is);
        ia >> BOOST_SERIALIZATION_NVP(b);
    }
    BOOST_CHECK(a == b);
}

BOOST_AUTO_TEST_CASE(binary_roundtrip_produces_the_same_entity) {
    <#= qn #>_generator g;
    const auto a(g());

    using namespace boost::archive;
    std::ostringstream os;
    {
        text_oarchive oa(os);
        oa << a;
    }

    <#= qn #> b = <#= qn #>();
    std::istringstream is(os.str());
    {
        text_iarchive ia(is);
        ia >> b;
    }
    BOOST_CHECK(a == b);
}

<#+
            }

             if (a.is_hash_enabled()) {
                 /*
                  * hash tests.
                  */
#>
BOOST_AUTO_TEST_CASE(equal_enums_generate_the_same_hash) {
    <#= qn #>_generator g;
    g();
    const auto a(g());
    const auto b(a);

    std::hash<<#= qn #>> hasher;
    BOOST_CHECK(hasher(a) == hasher(b));
}

BOOST_AUTO_TEST_CASE(different_enums_generate_different_hashes) {
    <#= qn #>_generator g;
    g();
    const auto a(g());
    const auto b(g());

    std::hash<<#= qn #>> hasher;
    BOOST_CHECK(hasher(a) != hasher(b));
}

<#+
            }
        }
#>
BOOST_AUTO_TEST_SUITE_END()
<#+
    } // sbf
    return a.make_artefact();
}

#>
