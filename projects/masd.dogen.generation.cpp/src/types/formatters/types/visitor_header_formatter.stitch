<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/visitor.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/visitor_header_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=visitor_header_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=visitor_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::visitor #>
<#@ masd.stitch.wale.kvp.meta_element=visitor #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> visitor_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {
    using coding::meta_model::visitor;
    const auto& v(assistant::as<visitor>(e));
    auto builder(f.make());
    builder.add(v.visits(), traits::forward_declarations_archetype());

    if (v.parent())
        builder.add(*v.parent(), traits::visitor_header_archetype());

    return builder.build();
}

extraction::meta_model::artefact visitor_header_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& v(a.as<coding::meta_model::visitor>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(v.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(v.documentation());
            if (!v.parent())
#>
class <#= v.name().simple() #> {
<#+
            else {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
class <#= v.name().simple() #> : public <#= pqn #> {
<#+
            }
#>
public:
    virtual ~<#= v.name().simple() #>()<#= a.make_noexcept_keyword_text() #> = 0;

public:
<#+
            if (v.parent()) {
                const auto& pn(*v.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
    using <#= pqn #>::visit;

<#+
            }

            bool is_first(true);
            for (const auto& t : v.visits()) {
                if (!is_first)
#>

<#+
                const auto qn(a.get_qualified_name(t));
                const auto doc("Accept visits for type " + qn);
                a.comment_start_method_group(doc);
#>
    virtual void visit(const <#= qn #>&) const { }
    virtual void visit(const <#= qn #>&) { }
    virtual void visit(<#= qn #>&) const { }
    virtual void visit(<#= qn #>&) { }
<#+
                a.comment_end_method_group(doc);
                is_first = false;
            }
#>
};

inline <#= v.name().simple() #>::~<#= v.name().simple() #>()<#= a.make_noexcept_keyword_text() #> { }

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
