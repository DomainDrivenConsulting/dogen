<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::types #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/structural/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/inserter_implementation_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/primitive_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::structural::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string>
primitive_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {
    using coding::meta_model::structural::primitive;
    const auto& o(assistant::as<primitive>(e));
    auto builder(f.make());

    const auto ch_arch(traits::primitive_header_archetype());
    builder.add(o.name(), ch_arch);
    return builder.build();
}

extraction::meta_model::artefact primitive_implementation_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& p(a.as<coding::meta_model::structural::primitive>(e));

    const auto sn(p.name().simple());
    const auto qn(a.get_qualified_name(p.name()));
    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(p.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto attr(p.value_attribute());

            /*
             * Default constructor.
             */
            if (a.requires_manual_default_constructor()) {
#>

<#= sn #>::<#= sn #>()
    : <#= a.make_member_variable_name(attr) #>(static_cast<<#= a.get_qualified_name(attr.parsed_type()) #>>(0)) { }
<#+
            }

            /*
             * Move constructor.
             */
            if (a.requires_manual_move_constructor()) {
#>

<#= sn #>::<#= sn #>(<#= sn #>&& rhs)
    : <#= a.make_member_variable_name(attr) #>(std::move(rhs.<#= a.make_member_variable_name(attr) #>)) { }
<#+
            }

            /*
             * Complete constructor.
             */
#>

<#= sn #>::<#= sn #>(const <#= a.get_qualified_name(attr.parsed_type()) #><#= a.make_by_ref_text(attr) #> <#= attr.name().simple() #>)
    : <#= a.make_member_variable_name(attr) #>(<#= attr.name().simple() #>) { }

<#+
            /*
             * Getters and setters
             */
             if (attr.parsed_type().is_current_simple_type()) {
#>
<#= a.get_qualified_name(attr.parsed_type()) #> <#= sn #>::<#= attr.name().simple() #>() const {
    return <#= a.make_member_variable_name(attr) #>;
}

<#+
                if (!p.is_immutable()) {
#>
void <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #> v) {
    <#= a.make_member_variable_name(attr) #> = v;
}

<#+
                }
            } else {
#>
const <#= a.get_qualified_name(attr.parsed_type()) #>& <#= sn #>::<#= attr.name().simple() #>() const {
    return <#= a.make_member_variable_name(attr) #>;
}
<#+
                if (!p.is_immutable()) {
#>

<#= a.get_qualified_name(attr.parsed_type()) #>& <#= sn #>::<#= attr.name().simple() #>() {
    return <#= a.make_member_variable_name(attr) #>;
}

void <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #>& v) {
    <#= a.make_member_variable_name(attr) #> = v;
}

void <#= sn #>::<#= attr.name().simple() #>(const <#= a.get_qualified_name(attr.parsed_type()) #>&& v) {
    <#= a.make_member_variable_name(attr) #> = std::move(v);
}

<#+
                }
            }

            /*
             * Equality.
             */
#>
bool <#= sn #>::operator==(const <#= sn #>& rhs) const {
    return <#= a.make_member_variable_name(attr) #> == rhs.<#= a.make_member_variable_name(attr) #>;
}

<#+
            /*
             * Swap and assignment.
             */
            if (!p.is_immutable()) {
#>
void <#= sn #>::swap(<#= sn #>& other)<#= a.make_noexcept_keyword_text() #> {
    using std::swap;
    swap(<#= a.make_member_variable_name(attr) #>, other.<#= a.make_member_variable_name(attr) #>);
}

<#= sn #>& <#= sn #>::operator=(<#= sn #> other) {
    using std::swap;
    swap(*this, other);
    return *this;
}

<#+
            }
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
