<#@ masd.annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::types #>
<#@ stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.extraction/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/enum_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=coding::meta_model::enumeration #>
<#@ stitch.wale.kvp.meta_element=enumeration #>
<#@ stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> enum_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {

    using coding::meta_model::enumeration;
    const auto& en(assistant::as<enumeration>(e));
    auto builder(f.make());
    const auto arch(traits::canonical_archetype());
    builder.add(en.underlying_element(), arch);
    return builder.build();
}

coding::meta_model::artefact enum_header_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& ye(a.as<coding::meta_model::enumeration>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

<#+
            a.comment(e.documentation());
            if (a.is_cpp_standard_98()) {
#>
enum <#= ye.name().simple() #> {
<#+
            } else {
                if (ye.use_implementation_defined_underlying_element())
#>
enum class <#= ye.name().simple() #> {
<#+
                else
#>
enum class <#= ye.name().simple() #> : <#= a.get_qualified_name(ye.underlying_element()) #> {
<#+
            }

            dogen::extraction::sequence_formatter sf(ye.enumerators().size());
            for (const auto& en : ye.enumerators()) {
                if (ye.use_implementation_defined_enumerator_values())
#>
    <#= en.name().simple() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                else
#>
    <#= en.name().simple() #> = <#= en.value() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                sf.next();
            }
#>
};

<#+
        } // snf
#>

<#+
    } // sbf
    return a.make_artefact();
}

#>
