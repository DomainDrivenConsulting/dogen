<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/fabric/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/fabric/visual_studio_solution.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/visual_studio_solution_formatter.hpp" #>
<#+

std::string visual_studio_solution_formatter::static_id() {
    return traits::visual_studio_solution_archetype();
}

std::string visual_studio_solution_formatter::id() const {
    static auto r(archetype_location().archetype());
    return r;
}

archetypes::archetype_location
visual_studio_solution_formatter::archetype_location() const {
    static archetypes::archetype_location
        r(cpp::traits::kernel(), cpp::traits::backend(),
          traits::visual_studio_facet(),
          visual_studio_solution_formatter::static_id());
    return r;
}

const coding::meta_model::name&
visual_studio_solution_formatter::meta_name() const {
    using fabric::meta_name_factory;
    static auto r(meta_name_factory::make_visual_studio_solution_name());
    return r;
}

std::string visual_studio_solution_formatter::family() const {
    return cpp::traits::visual_studio_project_family();
}

inclusion_support_types
visual_studio_solution_formatter::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path visual_studio_solution_formatter::inclusion_path(
    const formattables::locator& /*l*/, const coding::meta_model::name& n) const {

    using namespace masd::dogen::utility::log;
    using namespace masd::dogen::generation::cpp::formatters;
    static logger lg(logger_factory(static_id()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path visual_studio_solution_formatter::
full_path(const formattables::locator& l, const coding::meta_model::name& n) const {
    return l.make_full_path_for_solution(n, static_id());
}

std::list<std::string> visual_studio_solution_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const coding::meta_model::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

extraction::meta_model::artefact visual_studio_solution_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& vsl(a.as<fabric::visual_studio_solution>(e));
#>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{<#= vsl.project_solution_guid() #>}") = "<#= vsl.project_name() #>", "<#= vsl.project_name() #>.csproj", "{<#= vsl.project_guid() #>}"
EndProject
Global
    GlobalSection(SolutionConfigurationPlatforms) = preSolution
        Debug|Any CPU = Debug|Any CPU
        Release|Any CPU = Release|Any CPU
    EndGlobalSection
    GlobalSection(ProjectConfigurationPlatforms) = postSolution
        {<#= vsl.project_guid() #>}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
        {<#= vsl.project_guid() #>}.Debug|Any CPU.Build.0 = Debug|Any CPU
        {<#= vsl.project_guid() #>}.Release|Any CPU.ActiveCfg = Release|Any CPU
        {<#= vsl.project_guid() #>}.Release|Any CPU.Build.0 = Release|Any CPU
    EndGlobalSection
    GlobalSection(MonoDevelopProperties) = preSolution
        StartupItem = CppModel.vcxroj
    EndGlobalSection
EndGlobal
<#+
    return a.make_artefact();
}
#>
