<#@ masd.annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::serialization #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/path_helper.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=BoostPath #>
<#@ stitch.wale.kvp.class.simple_name=path_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void path_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
#>
namespace boost {
namespace serialization {

template<class Archive>
void serialize(Archive& ar, boost::filesystem::path& p, const unsigned int/*v*/)
{
    std::string s;
    if(Archive::is_saving::value)
        s = p.generic_string();
    ar & boost::serialization::make_nvp("path", s);
    if(Archive::is_loading::value)
        p = s;
}

} }
<#+
    }
}
#>
