<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::serialization #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.extraction/types/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/class_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> class_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {
    const auto& o(assistant::as<coding::meta_model::object>(e));
    auto builder(f.make());

    const auto ch_fn(traits::class_header_archetype());
    builder.add(o.name(), ch_fn);

    using ic = inclusion_constants;
    builder.add(ic::boost::archive::text_iarchive());
    builder.add(ic::boost::archive::text_oarchive());
    builder.add(ic::boost::archive::binary_iarchive());
    builder.add(ic::boost::archive::binary_oarchive());
    builder.add(ic::boost::archive::polymorphic_iarchive());
    builder.add(ic::boost::archive::polymorphic_oarchive());

    // XML serialisation
    builder.add(ic::boost::serialization::nvp());
    builder.add(ic::boost::archive::xml_iarchive());
    builder.add(ic::boost::archive::xml_oarchive());

    const auto carch(traits::canonical_archetype());
    builder.add(o.transparent_associations(), carch);
    builder.add(o.opaque_associations(), carch);
    builder.add(o.parents(), carch);
    builder.add(o.leaves(), carch);

    return builder.build();
}

extraction::meta_model::artefact class_implementation_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& o(a.as<coding::meta_model::object>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        a.add_helper_methods(o.name().qualified().dot());

        const auto qn(a.get_qualified_name(o.name()));
        const bool has_attributes(!o.local_attributes().empty());
        const bool has_parent(!o.parents().empty());
        const bool has_attributes_or_parent(has_attributes || has_parent);

        if (o.is_parent() || !o.parents().empty()) {
#>

BOOST_CLASS_TRACKING(
    <#= qn #>,
    boost::serialization::track_selectively)
<#+
        }
#>

namespace boost {
namespace serialization {
<#+

        /*
         * Save function
         */
#>

template<typename Archive>
void save(Archive& <#= (has_attributes_or_parent ? "ar" : "/*ar*/") #>,
    const <#= qn #>& <#= (has_attributes_or_parent ? "v" : "/*v*/") #>,
    const unsigned int /*version*/) {
<#+
        if (!o.parents().empty()) {
            const auto& pn(o.parents().front());
            const auto pqn(a.get_qualified_name(pn));
#>
    ar << make_nvp("<#= pn.simple() #>", base_object<<#= pqn #>>(v));
<#+
        }

        if (has_attributes && has_parent)
#>

<#+
        for (const auto attr : o.local_attributes()) {
#>
    ar << make_nvp("<#= attr.name().simple() #>", v.<#= a.make_member_variable_name(attr) #>);
<#+
        }
#>
}

<#+
        /*
         * Load function
         */
#>
template<typename Archive>
void load(Archive& <#= (has_attributes_or_parent ? "ar," : "/*ar*/,") #>
    <#= qn #>& <#= (has_attributes_or_parent ? "v" : "/*v*/") #>,
    const unsigned int /*version*/) {
<#+
        if (!o.parents().empty()) {
            const auto& pn(o.parents().front());
            const auto pqn(a.get_qualified_name(pn));
#>
    ar >> make_nvp("<#= pn.simple() #>", base_object<<#= pqn #>>(v));
<#+
            if (has_attributes && has_parent)
#>

<#+
        }

        for (const auto attr : o.local_attributes()) {
#>
    ar >> make_nvp("<#= attr.name().simple() #>", v.<#= a.make_member_variable_name(attr) #>);
<#+
        }
#>
}

} }

namespace boost {
namespace serialization {

template void save(archive::polymorphic_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::polymorphic_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::text_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::text_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::binary_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::binary_iarchive& ar, <#= qn #>& v, unsigned int version);

template void save(archive::xml_oarchive& ar, const <#= qn #>& v, unsigned int version);
template void load(archive::xml_iarchive& ar, <#= qn #>& v, unsigned int version);

} }
<#+
    } // sbf
    return a.make_artefact();
}

#>
