<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::serialization #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.extraction/types/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/object.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/serialization/class_header_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=class_header_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=class_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::object #>
<#@ masd.stitch.wale.kvp.meta_element=object #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> class_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {

    using coding::meta_model::object;
    const auto& o(assistant::as<object>(e));
    auto builder(f.make());
    builder.add(o.name(), types::traits::class_header_archetype());

    using ic = inclusion_constants;
    builder.add(ic::boost::serialization::split_free());

    if (o.is_parent())
        builder.add(ic::boost::serialization::assume_abstract());

    if (!o.is_parent() && o.is_child())
        builder.add(ic::boost::type_traits::is_virtual_base_of());

    return builder.build();
}

extraction::meta_model::artefact class_header_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& o(a.as<coding::meta_model::object>(e));

    {
        const auto qn(a.get_qualified_name(o.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));

        if (!o.is_parent() && !o.parents().empty()) {
            const auto& pn(o.parents().front());
            const auto pqn(a.get_qualified_name(pn));
#>
namespace boost {

template<>struct
is_virtual_base_of<
    <#= pqn #>,
    <#= qn #>
> : public mpl::true_ {};

}
<#+
        }
#>

BOOST_SERIALIZATION_SPLIT_FREE(<#= qn #>)
<#+
        if (o.is_parent()) {
#>
BOOST_SERIALIZATION_ASSUME_ABSTRACT(<#= qn #>)

<#+
        }
#>
namespace boost {
namespace serialization {

template<typename Archive>
void save(Archive& ar, const <#= qn #>& v, unsigned int version);

template<typename Archive>
void load(Archive& ar, <#= qn #>& v, unsigned int version);

} }

<#+
    } // sbf
    return a.make_artefact();
}
#>
