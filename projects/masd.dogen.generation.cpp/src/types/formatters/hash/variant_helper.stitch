<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::generation::cpp::formatters::hash #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/variant_helper.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation_enabled.wale #>
<#@ stitch.wale.kvp.helper.family=BoostVariant #>
<#@ stitch.wale.kvp.class.simple_name=variant_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void variant_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto key(hp.direct_descendants().front());
    const auto value(hp.direct_descendants().back());
#>

struct <#= ident #>_visitor : public boost::static_visitor<> {
    <#= ident #>_visitor() : hash(0) {}
<#+
    for (const auto& dd : hp.direct_descendants()) {
#>
    void operator()(const <#= dd.name_qualified() #><#= (dd.is_simple_type() ? "" : "&") #> v) const {
<#+
        if (!dd.requires_hashing_helper())
#>
        combine(hash, v);
<#+
        else
#>
        combine(hash, hash_<#= dd.name_tree_identifiable() #>(v));
    }

<#+
    }
#>
    mutable std::size_t hash;
};

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    <#= ident #>_visitor vis;
    boost::apply_visitor(vis, v);
    return vis.hash;
}
<#+
}
#>
