<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::hash #>
<#@ stitch.inclusion_dependency="masd.dogen.formatting/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.modeling/types/meta_model/object.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.modeling/types/helpers/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/class_header_formatter.hpp" #>
<#@ stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ stitch.wale.kvp.class.simple_name=class_header_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=class_header #>
<#@ stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ stitch.wale.kvp.yarn_element=modeling::meta_model::object #>
<#@ stitch.wale.kvp.meta_element=object #>
<#@ stitch.wale.kvp.meta_name_factory=modeling::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> class_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const modeling::meta_model::element& e) const {

    auto builder(f.make());
    builder.add(inclusion_constants::std::functional());
    builder.add(e.name(), types::traits::canonical_archetype());
    return builder.build();
}

modeling::meta_model::artefact class_header_formatter::
format(const context& ctx, const modeling::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& o(a.as<modeling::meta_model::object>(e));

    const auto sn(o.name().simple());
    const auto qn(a.get_qualified_name(o.name()));
    {

        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(a.make_namespaces(o.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>

struct <#= sn #>_hasher {
public:
    static std::size_t hash(const <#= sn #>& v);
};

<#+
        } // snf
#>

namespace std {

template<>
struct hash<<#= qn #>> {
public:
    size_t operator()(const <#= qn #>& v) const {
        return <#= qn #>_hasher::hash(v);
    }
};

}
<#+
    } // sbf
    return a.make_artefact();
}
#>
