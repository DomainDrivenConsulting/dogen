<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::odb #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/odb/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/odb/primitive_header_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_header_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_header_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {

    using coding::meta_model::primitive;
    const auto& p(assistant::as<primitive>(e));
    auto builder(f.make());
    builder.add(p.name(), types::traits::primitive_header_archetype());

    return builder.build();
}

extraction::meta_model::artefact primitive_header_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
    const auto& p(a.as<coding::meta_model::primitive>(e));

    {
        const auto sn(p.name().simple());
        const auto qn(a.get_qualified_name(p.name()));
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        const auto top_level_pragmas(a.get_odb_pragmas());
        const auto attr(p.value_attribute());

        if (top_level_pragmas.empty()) {
#>
// class has no ODB pragmas defined.

<#+
        } else {
            {
                const auto ns(a.make_namespaces(p.name()));
                auto snf(a.make_scoped_namespace_formatter(ns));
#>

#ifdef ODB_COMPILER

<#+
                for (const auto& pg : top_level_pragmas)
#>
#pragma db <#= a.get_odb_type() #>(<#= sn #>) <#= pg #>
<#+

                bool is_first(true);
                const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().qualified().dot()));
                for (const auto pg : attr_level_pragmas) {
                        if (is_first)
#>

<#+
                        is_first = false;
#>
#pragma db member(<#= sn #>::<#= a.make_member_variable_name(attr) #>) <#= pg #>
<#+
                }
#>

#endif

<#+
            }
#>

<#+
        }
    } // sbf
    return a.make_artefact();
}

#>
