<#@ masd.annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::io #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/pair_helper.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formattables/helper_properties.hpp" #>
<#@ stitch.wale.template=cpp_helper_formatter_implementation.wale #>
<#@ stitch.wale.kvp.helper.family=Pair #>
<#@ stitch.wale.kvp.class.simple_name=pair_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void pair_helper::
format(assistant& a, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(a.make_scoped_namespace_formatter(d.namespaces()));
        const auto first(hp.direct_descendants().front());
        const auto second(hp.direct_descendants().back());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= nt_qn #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= n_qn #>\"" << ", ";

    s << "\"first\": " << <#= a.streaming_for_type(first, "v.first") #> << ", ";
    s << "\"second\": " << <#= a.streaming_for_type(second, "v.second") #>;
    s << " }";
    return s;
}

<#+
    }
#>

<#+
}
#>
