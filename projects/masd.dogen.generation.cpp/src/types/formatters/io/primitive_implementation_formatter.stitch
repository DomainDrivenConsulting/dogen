<#@ masd.annotations.profile=dogen.stitch #>
<#@ masd.stitch.containing_namespaces=masd::dogen::generation::cpp::formatters::io #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/meta_model/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.coding/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/inserter_implementation_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="masd.dogen.generation.cpp/types/formatters/io/primitive_implementation_formatter.hpp" #>
<#@ masd.stitch.wale.template=cpp_artefact_formatter_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_implementation_formatter #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive_implementation #>
<#@ masd.stitch.wale.kvp.yarn_element=coding::meta_model::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=coding::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string>
primitive_implementation_formatter::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const coding::meta_model::element& e) const {

    using coding::meta_model::primitive;
    const auto& p(assistant::as<primitive>(e));
    auto builder(f.make());
    const auto ph_fn(traits::primitive_header_archetype());
    builder.add(p.name(), ph_fn);

    const auto io_carch(formatters::io::traits::canonical_archetype());
    const auto self_fn(primitive_implementation_formatter::static_id());
    const bool io_enabled(builder.is_enabled(p.name(), self_fn));

    if (!io_enabled)
        return builder.build();

    const auto os(inclusion_constants::std::ostream());
    builder.add(os);
    builder.add(p.value_attribute().parsed_type().current(), io_carch);

    return builder.build();
}

extraction::meta_model::artefact primitive_implementation_formatter::
format(const context& ctx, const coding::meta_model::element& e) const {
    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
    const auto& p(a.as<coding::meta_model::primitive>(e));

    {
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        a.add_helper_methods(p.name().qualified().dot());

        {
            const auto ns(a.make_namespaces(p.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const auto sn(p.name().simple());
            const auto qn(a.get_qualified_name(p.name()));
            const auto attr(p.value_attribute());
#>

std::ostream& operator<<(std::ostream& s, const <#= sn #>& v) {
<#+
            if (a.requires_stream_manipulators()) {
#>
    boost::io::ios_flags_saver ifs(s);
    s.setf(std::ios_base::boolalpha);
    s.setf(std::ios::fixed, std::ios::floatfield);
    s.precision(6);
    s.setf(std::ios::showpoint);
<#+
            }

            const std::string variable_name = "v." + a.make_getter_setter_name(attr) + "()";
#>

    s << " { "
      << "\"__type__\": " << "\"<#= qn #>\"" << ", "
      << "\"<#= attr.name().simple() #>\": " << <#= a.streaming_for_type(attr.parsed_type().current(), variable_name) #>
      << " }";

    return s;
}

<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
