<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::test_data #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/fabric/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/assistant_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=assistant_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=assistant #>
<#@ stitch.wale.kvp.yarn_element=fabric::assistant #>
<#$ stitch.wale.template_instantiation_result #>
<#+

dogen::formatters::artefact
assistant_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    {
        const auto sn(e.name().simple());
        // const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>
using System;
using System.Collections;
using System.Collections.Specialized;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>
    /// <summary>
    /// Provides helper methods for the sequence generators.
    /// </summary>
    static class <#= sn #>SequenceGenerator
    {
        private const int SequenceSize = 10;

        public static object CreateObject(uint position)
        {
            return "this is an object: " + Convert.ToString(position);
        }

        public static string CreateString(uint position)
        {
            return "this is a string: " + Convert.ToString(position);
        }

        public static byte CreateByte(uint position)
        {
            return Convert.ToByte(position);
        }

        public static sbyte CreateShortByte(uint position)
        {
            return Convert.ToSByte(position);
        }

        public static int CreateInt(uint position)
        {
            return Convert.ToInt32(position);
        }

        public static uint CreateUInt(uint position)
        {
            return position;
        }

        public static short CreateShort(uint position)
        {
            return Convert.ToInt16(position);
        }

        public static ushort CreateUShort(uint position)
        {
            return Convert.ToUInt16(position);
        }

        public static long CreateLong(uint position)
        {
            return Convert.ToInt64(position);
        }

        public static ulong CreateULong(uint position)
        {
            return Convert.ToUInt64(position);
        }

        public static float CreateFloat(uint position)
        {
            return Convert.ToSingle(position);
        }

        public static double CreateDouble(uint position)
        {
            return Convert.ToDouble(position);
        }

        public static char CreateChar(uint position)
        {
            return Convert.ToChar(position);
        }

        public static bool CreateBool(uint position)
        {
            return position % 2 == 0;
        }

        public static decimal CreateDecimal(uint position)
        {
            return Convert.ToDecimal(position);
        }

        public static IEnumerable CreateIEnumerable(uint position)
        {
            return CreateArrayList(position);
        }

        public static ICollection CreateICollection(uint position)
        {
            return CreateArrayList(position);
        }

        public static IList CreateIList(uint position)
        {
            return CreateArrayList(position);
        }

        public static ArrayList CreateArrayList(uint position)
        {
            var result = new ArrayList();
            for (uint i = 0; i < SequenceSize; i++)
            {
                switch((position + i) % 5)
                {
                case 0: result.Add(CreateString(position + i)); break;
                case 1: result.Add(CreateByte(position + i)); break;
                case 2: result.Add(CreateInt(position + i)); break;
                case 3: result.Add(CreateLong(position + i)); break;
                case 4: result.Add(CreateFloat(position + i)); break;
                case 5: result.Add(CreateDecimal(position + i)); break;
                default: result.Add(CreateBool(position + i)); break;
                }
            }
            return result;
        }

        public static IDictionary CreateIDictionary(uint position)
        {
            return CreateHashtable(position);
        }

        public static Hashtable CreateHashtable(uint position)
        {
            var result = new Hashtable();
            for (uint i = 0; i < SequenceSize; i++)
            {
                result.Add("key_" + position + i, "value_" + position + i);
            }
            return result;
        }

        public static HybridDictionary CreateHybridDictionary(uint position)
        {
            var result = new HybridDictionary();
            for (uint i = 0; i < SequenceSize; i++)
            {
                result.Add("key_" + position + i, "value_" + position + i);
            }
            return result;
        }

        public static NameValueCollection CreateNameValueCollection(uint position)
        {
            var result = new NameValueCollection();
            for (uint i = 0; i < SequenceSize; i++)
            {
                result.Add("key_" + position + i, "value_" + position + i);
            }
            return result;
        }

        public static BitArray CreateBitArray(uint position)
        {
            var result = new BitArray(SequenceSize);
            for (int i = 0; i < SequenceSize; i++)
            {
                result[i] = position % 2 == 0;
            }
            return result;
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
