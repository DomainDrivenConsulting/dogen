<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::test_data #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/fabric/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/assistant_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=assistant_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=assistant #>
<#@ stitch.wale.kvp.yarn_element=fabric::assistant #>
<#$ stitch.wale.template_instantiation_result #>
<#+

dogen::formatters::artefact
assistant_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    {
        const auto sn(e.name().simple());
        // const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>

<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
