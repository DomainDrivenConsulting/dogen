<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::test_data #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/test_data/class_formatter.hpp" #>
<#+

std::string class_formatter::static_artefact() {
    return traits::class_archetype();
}

std::string class_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location class_formatter::archetype_location() const {
    static annotations::archetype_location
        r(csharp::traits::family(), csharp::traits::kernel(),
          traits::facet(),
          class_formatter::static_artefact());
    return r;
}

std::type_index class_formatter::element_type_index() const {
    static auto r(std::type_index(typeid(yarn::object)));
    return r;
}

boost::filesystem::path class_formatter::
full_path(const formattables::locator& l, const yarn::name& n) const {
    return l.make_full_path(n, static_artefact());
}

std::list<std::string> class_formatter::
inclusion_dependencies(const yarn::element& /*e*/) const {
    std::list<std::string> r;
    return r;
}

dogen::formatters::artefact
class_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    const auto& o(a.as<yarn::object>(static_artefact(), e));
    {
        const auto sn(e.name().simple());
        // const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>
using System;
using System.Collections;
using System.Collections.Generic;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            const bool no_parent_and_no_attributes(!o.parent() &&
                o.all_attributes().empty());

#>
    /// <summary>
    /// Generates sequences of <#= sn #>.
    /// </summary>
    public static class <#= sn #>SequenceGenerator
    {
        static internal <#= sn #> Create(uint position)
        {
            var result = new <#= sn #>();
<#+
                if (no_parent_and_no_attributes)
#>
            return result;
<#+
                else {
#>

<#+
                    unsigned int count(0);
                    for (const auto& attr : o.local_attributes()) {
#>
            result.<#= attr.name().simple() #> = GeneratorHelper.Create<#= attr.name().simple() #> (position + <#= count++ #>);
<#+
                    }
#>

            return result;
<#+
                }
#>
        }

        #region Enumerator
        private class <#= sn #>Enumerator : IEnumerator, IEnumerator<<#= sn #>>, IDisposable
        {
            #region Properties
            private uint _position;
            private <#= sn #> _current;
            #endregion

            private void PopulateCurrent()
            {
                _current = <#= sn #>SequenceGenerator.Create(_position);
            }

            #region IDisposable
            public void Dispose()
            {
            }
            #endregion

            #region IEnumerator implementation
            public bool MoveNext()
            {
                ++_position;
                PopulateCurrent();
                return true;
            }

            public void Reset()
            {
                _position = 0;
                PopulateCurrent();
            }

            public object Current {
                get
                {
                    return _current;
                }
            }

            <#= sn #> IEnumerator<<#= sn #>>.Current
            {
                get
                {
                    return _current;
                }
            }
            #endregion

            public <#= sn #>Enumerator()
            {
                PopulateCurrent();
            }
        }
        #endregion

        #region Enumerable
        private class <#= sn #>Enumerable : IEnumerable, IEnumerable<<#= sn #>>
        {
            #region IEnumerable implementation
            public IEnumerator GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }

            IEnumerator<<#= sn #>> IEnumerable<<#= sn #>>.GetEnumerator()
            {
                return new <#= sn #>Enumerator();
            }
            #endregion
        }
        #endregion

        static public IEnumerable<<#= sn #>> Sequence()
        {
            return new <#= sn #>Enumerable();
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
