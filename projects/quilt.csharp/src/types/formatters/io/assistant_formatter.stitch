<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::io #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/io/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/fabric/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/io/assistant_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=assistant_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=assistant #>
<#@ stitch.wale.kvp.yarn_element=fabric::assistant #>
<#$ stitch.wale.template_instantiation_result #>
<#+

dogen::formatters::artefact
assistant_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>
using System;
using System.Text;
using System.Collections;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
#>
    class <#= sn #>Dumper
    {
        #region Properties
        private readonly StringBuilder _stringBuilder;
        private int _currentDepth;

        private const uint MaxDepth = 1000;
        private const string Type = "__type__";
        private const string HashCode = "HashCode";
        private const string StringType = "string";
        private const string ByteType = "byte";
        private const string SByteType = "sbyte";
        private const string IntType = "int";
        private const string UIntType = "uint";
        private const string LongType = "long";
        private const string ULongType "ulong";
        private const string FloatType = "float";
        private const string DoubleType = "double";
        private const string CharType = "char";
        private const string DecimalType = "decimal";
        private const string BoolType = "bool";
        private const string NullValue = "<null>";
        private const string SystemObjectType = "System.Object";
        private const string DataKey = "data";
        #endregion

        #region Depth management
        public void IncrementDepth()
        {
            ++_currentDepth;
        }

        public void DecrementDepth()
        {
            ++_currentDepth;
        }

        public bool MaximumDepthExceeded()
        {
            return _currentDepth > MaxDepth;
        }
        #endregion

        #region Adds for JSON syntax
        public void AddStartObject()
        {
            _stringBuilder.Append("{ ");
        }

        public void AddEndObject()
        {
            _stringBuilder.Append(" }");
        }

        public void AddStartArray()
        {
            _stringBuilder.Append("[ ");
        }

        public void AddEndArray()
        {
            _stringBuilder.Append(" ]");
        }

        public void AddPairSeparator()
        {
            _stringBuilder.Append(" : ");
        }

        public void AddMemberSeparator()
        {
            _stringBuilder.Append(", ");
        }

        public void AddQuoted(string value)
        {
            if (value == null)
                _stringBuilder.Append("\"<null>\"");
            else
                _stringBuilder.Append("\"" + value + "\"");
        }

        public void AddNonQuoted(int value)
        {
            _stringBuilder.Append(Convert.ToString(value));
        }

        public void AddKey(string k)
        {
            AddQuoted(k);
        }

        public void AddType(string typeName, bool withSeparator = false)
        {
            AddKey(Type);
            AddPairSeparator();
            AddQuoted(typeName);
            HandleMemberSeparator(withSeparator);
        }

        private void AddKeyWithSeparator(string key)
        {
            AddKey(key);
            AddPairSeparator();
        }

        public void HandleMemberSeparator(bool withSeparator)
        {
            if (withSeparator)
                AddMemberSeparator();
        }
        #endregion

        #region Adds for well known types
        private bool HandleBoxedPrimitives(object value)
        {
            var type = value.GetType();
            if (type == typeof(string))
            {
                AddStartObject();
                AddType(StringType, true/*withSeparator*/);
                Add(DataKey, value as string);
                AddEndObject();
                return true;
            }

            if (type == typeof(byte))
            {
                AddStartObject();
                AddType(ByteType, true/*withSeparator*/);
                Add(DataKey, value as byte);
                AddEndObject();
                return true;
            }

            if (type == typeof(sbyte))
            {
                AddStartObject();
                AddType(SByteType, true/*withSeparator*/);
                Add(DataKey, value as sbyte);
                AddEndObject();
                return true;
            }

            if (type == typeof(int)) 
            {
                AddStartObject();
                AddType(IntType, true/*withSeparator*/);
                Add(DataKey, value as int);
                AddEndObject();
                return true;
            }

            if (type == typeof(uint))
            {
                AddStartObject();
                AddType(UIntType, true/*withSeparator*/);
                Add(DataKey, value as uint);
                AddEndObject();
                return true;
            }

            if (type == typeof(long))
            {
                AddStartObject();
                AddType(LongType, true/*withSeparator*/);
                Add(DataKey, value as long);
                AddEndObject();
                return true;
            }

            if (type == typeof(ulong))
            {
                AddStartObject();
                AddType(ULongType, true/*withSeparator*/);
                Add(DataKey, value as ulong);
                AddEndObject();
                return true;
            }

            if (type == typeof(float))
            {
                AddStartObject();
                AddType(FloatType, true/*withSeparator*/);
                Add(DataKey, value as float);
                AddEndObject();
                return true;
            }

            if (type == typeof(double))
            {
                AddStartObject();
                AddType(DoubleType, true/*withSeparator*/);
                Add(DataKey, value as double);
                AddEndObject();
                return true;
            }

            if (type == typeof(char))
            {
                AddStartObject();
                AddType(CharType, true/*withSeparator*/);
                Add(DataKey, value as char);
                AddEndObject();
                return true;
            }

            if (type == typeof(decimal))
            {
                AddStartObject();
                AddType(DecimalType, true/*withSeparator*/);
                Add(DataKey, value as decimal);
                AddEndObject();
                return true;
            }

            if (type == typeof(bool))
            {
                AddStartObject();
                AddType(BoolType, true/*withSeparator*/);
                Add(DataKey, value as bool);
                AddEndObject();
                return true;
            }

            return false;
        }

        public void Add(object value, bool withSeparator = false)
        {
            AddStartObject();
            AddType(SystemObjectType, true/*withSeparator*/);

            if (value == null)
            {
                Add(DataKey, NullValue);
                AddEndObject();
                HandleMemberSeparator(withSeparator);
                return;
            }

            if (HandleBoxedPrimitives(value, withSeparator))
            {
                AddEndObject();
                HandleMemberSeparator(withSeparator);
                return;
            }

            AddKey(DataKey);
            AddPairSeparator();
            AddStartObject();
            AddKey(HashCode);
            AddPairSeparator();
            AddNonQuoted(value.GetHashCode());

            AddEndObject(); // data
            AddEndObject();
            HandleMemberSeparator(withSeparator);
        }

        public void Add(string value, bool withSeparator = false)
        {
            AddQuoted(value);
            HandleMemberSeparator(withSeparator);
        }

        public void Add(byte value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(sbyte value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(int value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(uint value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(long value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(ulong value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(float value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(double value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(double value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(char value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(Convert.ToInt16(value)));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(decimal value, bool withSeparator = false)
        {
            _stringBuilder.Append(Convert.ToString(value));
            HandleMemberSeparator(withSeparator);
        }

        public void Add(bool value, bool withSeparator = false)
        {
            if (value)
                _stringBuilder.Append("true");
            else
                _stringBuilder.Append("false");

            HandleMemberSeparator(withSeparator);
        }

        public void Add(string key, object value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value, withSeparator);
        }

        public void Add(string key, string value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, byte value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, sbyte value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, int value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, uint value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, long value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, ulong value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, float value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, double value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, char value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, decimal value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, bool value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            Add(value);
        }

        public void Add(string key, IEnumerable value, bool withSeparator = false)
        {
            AddKeyWithSeparator(key);
            AddStartArray();
            bool isFirst = true;
            using (var enumerator = value.GetEnumerator())
            {
                while (enumerator.MoveNext())
                {
                    if (!isFirst)
                        AddMemberSeparator();

                    Add(enumerator.Current);
                    isFirst = false;
                }
            }
            AddEndArray();
            HandleMemberSeparator(withSeparator);
        }
        #endregion

        public AssistantDumper()
        {
            _stringBuilder = new StringBuilder();
        }

        public override string ToString()
        {
            return _stringBuilder.ToString();
        }
    }
<#+
        }
    } // sbf
    return a.make_artefact();
}
#>
