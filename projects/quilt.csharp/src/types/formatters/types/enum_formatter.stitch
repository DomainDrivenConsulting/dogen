<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/enumeration.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/types/enum_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=enum_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=enum #>
<#@ stitch.wale.kvp.yarn_element=yarn::enumeration #>
<#$ stitch.wale.template_instantiation_result #>
<#+

dogen::formatters::artefact
enum_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    const auto& ye(a.as<yarn::enumeration>(static_artefact(), e));
    {
        const auto sn(e.name().simple());
        const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>
using System;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            a.comment(e.documentation(), 1/*indent*/);
#>
    public enum <#= sn #> : <#= a.get_qualified_name(ye.underlying_type()) #>
    {
<#+
            dogen::formatters::sequence_formatter sf(ye.enumerators().size());
            for (const auto& en : ye.enumerators()) {
#>
        <#= en.name().simple() #> = <#= en.value() #><#= sf.postfix() #><#= a.comment_inline(en.documentation()) #>
<#+
                sf.next();
            }
#>
    }
<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
