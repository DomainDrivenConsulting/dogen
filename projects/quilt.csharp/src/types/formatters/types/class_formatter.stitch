<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::types #>
<#@ stitch.inclusion_dependency=<typeinfo> #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/yarn/types/object.hpp" #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/types/class_formatter.hpp" #>
<#@ stitch.wale.template=csharp_formatter_implementation.wale #>
<#@ stitch.wale.kvp.class.simple_name=class_formatter #>
<#@ stitch.wale.kvp.archetype.simple_name=class #>
<#@ stitch.wale.kvp.yarn_element=yarn::object #>
<#$ stitch.wale.template_instantiation_result #>
<#+

dogen::formatters::artefact
class_formatter::format(const context& ctx, const yarn::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    const auto& o(a.as<yarn::object>(static_artefact(), e));
    {
        const auto sn(e.name().simple());
        // const auto qn(a.get_qualified_name(e.name()));
        auto sbf(a.make_scoped_boilerplate_formatter());
        {
#>
using System;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            a.comment(e.documentation(), 1/*indent*/);
            if (!o.in_inheritance_relationship() || !o.is_child()) {
#>
    public <#= a.make_inheritance_keyword_text(o) #>class <#= sn #>
<#+
            } else {
                const auto& pn(*o.parent());
                const auto pqn(a.get_qualified_name(pn));
#>
    public <#= a.make_inheritance_keyword_text(o) #>class <#= sn #> : <#= pqn #>
<#+
            }
#>
    {
<#+
            if (!o.local_attributes().empty()) {
                if (!ctx.element_properties().helper_properties().empty())
                    a.add_helper_methods(id);

                /*
                * Properties
                */
#>
        #region Properties
<#+
                for (const auto& attr : o.local_attributes()) {
                    a.comment(attr.documentation(), 2/*indent*/);
#>
        public <#= a.get_qualified_name(attr.parsed_type()) #> <#= attr.name().simple() #> { get; set; }
<#+
                }
#>
        #endregion

<#+
            }

            /*
             * Constructors.
             */
#>
        #region Constructors
        public <#= sn #>() { }
        #endregion

<#+
            /*
             * Equals
             */
#>
        #region Equality
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;

            var value = obj as <#= sn #>;
<#+
            if (o.local_attributes().empty()) {
                if (o.parent()) {
#>
            return (value != null && base.Equals(value));
<#+
                } else {
#>
            return value != null;
<#+
                }
            } else {
                if (o.parent()) {
#>
            if (value == null || !base.Equals(value)) return false;
<#+
                } else {
#>
            if (value == null) return false;
<#+
                }
#>

            return
<#+
                dogen::formatters::sequence_formatter sf(o.local_attributes().size());
                sf.element_separator("");
                sf.postfix_configuration().not_last(" &&");
                sf.postfix_configuration().last(";");
                for (const auto& attr : o.local_attributes()) {
                    if (attr.parsed_type().is_current_simple_type()) {
                        if (attr.parsed_type().is_floating_point()) {
#>
                NearlyEqual(<#= attr.name().simple() #>, value.<#= attr.name().simple() #>)<#= sf.postfix() #>
<#+
                        } else {
#>
                <#= attr.name().simple() #> == value.<#= attr.name().simple() #><#= sf.postfix() #>
<#+
                        }
                    } else {
#>
                <#= attr.name().simple() #> != null && value.<#= attr.name().simple() #> != null &&
                <#= attr.name().simple() #>.Equals(value.<#= attr.name().simple() #>)<#= sf.postfix() #>
<#+
                    }
                    sf.next();
                }
            }
#>
        }

        public static bool operator ==(<#= sn #> lhs, <#= sn #> rhs)
        {
            if (Object.ReferenceEquals(lhs, rhs))
                return true;

            return !Object.ReferenceEquals(null, lhs) && lhs.Equals(rhs);
        }

        public static bool operator !=(<#= sn #> lhs, <#= sn #> rhs)
        {
            return !(lhs == rhs);
        }

        public override int GetHashCode()
        {
<#+
            if (o.local_attributes().empty()) {
#>
            return 0;
<#+
            } else {
#>
            unchecked
            {
                // Choose large primes to avoid hashing collisions
                const int HashingBase = (int) 2166136261;
                const int HashingMultiplier = 16777619;

                int hash = HashingBase;
<#+
                for (const auto& attr : o.local_attributes()) {
                    if (attr.parsed_type().is_current_simple_type()) {
#>
                hash = (hash * HashingMultiplier) ^ <#= attr.name().simple() #>.GetHashCode();
<#+
                    } else {
#>
                hash = (hash * HashingMultiplier) ^
                    (!<#= a.reference_equals(attr) #>.ReferenceEquals(null, <#= attr.name().simple() #>) ? <#= attr.name().simple() #>.GetHashCode() : 0);
<#+
                    }
                }
#>
                return hash;
            }
<#+
            }
#>
        }
        #endregion
<#+
            if (o.in_inheritance_relationship())
            {
#>

        #region Dumpers
<#+
                if (o.is_parent() && !o.is_child()) {
#>
        internal abstract string Dump();
<#+
                } else if (o.is_leaf()) {
#>
        internal override string Dump()
        {
            return <#= sn #>Dumper.Dump(this);
        }
<#+
                }
#>
        #endregion
<#+
        }
#>
    }
<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
