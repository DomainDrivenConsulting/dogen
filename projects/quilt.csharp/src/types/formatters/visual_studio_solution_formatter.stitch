<#@ annotations.profile=dogen.stitch #>
<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters #>
<#@ stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ stitch.inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/fabric/meta_name_factory.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/fabric/visual_studio_solution.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/types/traits.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/visual_studio_solution_formatter.hpp" #>
<#+

std::string visual_studio_solution_formatter::static_artefact() {
    return traits::visual_studio_solution_archetype();
}

std::string visual_studio_solution_formatter::formatter_name() const {
    static auto r(archetype_location().archetype());
    return r;
}

annotations::archetype_location
visual_studio_solution_formatter::archetype_location() const {
    static annotations::archetype_location
        r(csharp::traits::family(), csharp::traits::kernel(),
          traits::visual_studio_facet(),
          visual_studio_solution_formatter::static_artefact());
    return r;
}

const yarn::meta_model::name&
visual_studio_solution_formatter::meta_name() const {
    using fabric::meta_name_factory;
    static auto r(meta_name_factory::make_visual_studio_solution_name());
    return r;
}

boost::filesystem::path visual_studio_solution_formatter::
full_path(const formattables::locator& l, const yarn::meta_model::name& n) const {
    return l.make_full_path_for_solution(n, static_artefact());
}

std::list<std::string> visual_studio_solution_formatter::
inclusion_dependencies(const yarn::meta_model::element& /*e*/) const {
    std::list<std::string> r;
    return r;
}

dogen::formatters::artefact visual_studio_solution_formatter::
format(const context& ctx, const yarn::meta_model::element& e) const {
    const auto id(e.name().id());
    assistant a(ctx, archetype_location(), id);
    const auto& vsl(a.as<fabric::visual_studio_solution>(static_artefact(), e));
#>
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio 2012
Project("{<#= vsl.project_solution_guid() #>}") = "<#= vsl.project_name() #>", "<#= vsl.project_name() #>.csproj", "{<#= vsl.project_guid() #>}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{<#= vsl.project_guid() #>}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{<#= vsl.project_guid() #>}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{<#= vsl.project_guid() #>}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{<#= vsl.project_guid() #>}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(MonoDevelopProperties) = preSolution
		StartupItem = CSharpModel.csproj
	EndGlobalSection
EndGlobal
<#+
    return a.make_artefact();
}
#>
