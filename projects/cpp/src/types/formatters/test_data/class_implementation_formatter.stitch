<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/test_data/class_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/sequence_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::test_data #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        fa.add_helper_methods();

        {
            auto snf(fa.make_scoped_namespace_formatter());

            /*
             * Default constructor.
             */
            if (!c.is_parent()) {
#>
<#= c.name() #>_generator::<#= c.name() #>_generator() : position_(0) { }

<#+
            }

            /*
             * Populate method.
             */
            if (!c.is_immutable()) {
                bool no_args(c.properties().empty() && c.parents().empty());
                if (no_args)
#>
void <#= c.name() #>_generator populate(const unsigned int /*position*/, result_type& /*v*/) {
<#+
                else
#>
void <#= c.name() #>_generator populate(const unsigned int position, result_type& v) {


}
<#+
            }
#>

<#+
        } // snf
    } // sbf
    // return fa.make_file();
    return fa.make_file(false/*overwrite*/);
}
#>
