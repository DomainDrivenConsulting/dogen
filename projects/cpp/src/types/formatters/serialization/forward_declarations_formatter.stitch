<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=s #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/forward_declarations_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::serialization #>
<#+

void forward_declarations_formatter_stitch(std::ostream& s,
    const boost::optional<dogen::formatters::general_settings>& gs,
    const settings::formatter_settings& fs,
    const formattables::forward_declarations_info& fd) {

    dogen::formatters::cpp::scoped_boilerplate_formatter
       sbf(s, gs, fs.inclusion_dependencies(), *fs.header_guard());
#>

namespace boost {
namespace serialization {

template<class Archive>
void save(Archive& ar, const <#= fd.qualified_name() #>& v, unsigned int version);

template<class Archive>
void load(Archive& ar, <#= fd.qualified_name() #>& v, unsigned int version);

} }

<#+
}

#>
