<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/serialization/registrar_implementation_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::serialization #>
<#+

dogen::formatters::file registrar_implementation_formatter_stitch(
    formatters::entity_formatting_assistant& fa,
    const formattables::registrar_info& /*ri*/) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
#>

template<typename Archive>
void register_types(Archive&) {
}

template void register_types(boost::archive::polymorphic_oarchive&);
template void register_types(boost::archive::polymorphic_iarchive&);

template void register_types(boost::archive::text_oarchive&);
template void register_types(boost::archive::text_iarchive&);

template void register_types(boost::archive::binary_oarchive&);
template void register_types(boost::archive::binary_iarchive&);

<#+
            if (!fa.is_xml_serialization_disabled()) {
#>
template void register_types(boost::archive::xml_oarchive&);
template void register_types(boost::archive::xml_iarchive&);

<#+
            }

            if (!fa.is_eos_serialization_disabled()) {
#>
template void register_types(eos::portable_oarchive&);
template void register_types(eos::portable_iarchive&);

<#+
            }
        } // snf
    } // sbf
    // return fa.make_file();
    return fa.make_file(false/*overwrite*/);
}

#>
