<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=s #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/forward_declarations_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

void forward_declarations_formatter_stitch(std::ostream& s,
    const settings::formatter_settings& fs,
    const formattables::forward_declarations_info& fd) {

    const auto gs(fd.settings().general_settings());
    dogen::formatters::cpp::scoped_boilerplate_formatter
       sbf(s, gs, fs.inclusion_dependencies(), *fs.header_guard());

    {
        dogen::formatters::cpp::scoped_namespace_formatter snf(
           s, fd.namespaces(), false/*create_anonymous_namespace*/,
           true/*add_new_line*/);

        if (fd.is_enum()) {
#>

enum class <#= fd.name() #> : <#= fd.enum_type() #>;

<#+
        } else {
#>

class <#= fd.name() #>;

<#+
        }
    }
#>

<#+
}

#>
