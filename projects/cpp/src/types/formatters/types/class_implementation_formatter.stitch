<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/formatting_assistant.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_implementation_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    formatters::formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
            if (c.requires_manual_default_constructor()) {
#>

<#= c.name() #>::<#= c.name() #>()
<#+
                unsigned int pos(0);
                for (const auto p : c.properties()) {
                    if (!p.type().is_primitive() && !p.type().is_enumeration())
                        continue;
#>
    <#= (pos == 0 ? ": " : "  ") #><#= fa.make_member_variable_name(p) #>(static_cast<<#= p.type().complete_name() #>>(0))<#= fa.make_list_separator_text(c.properties().size(), pos) #><#= (pos == c.properties().size() - 1 ? " { }" : "") #>
<#+
                    ++pos;
                }
            }
#>

<#+
        } // snf
#>

<#+
    } // sbf
    return fa.make_file(false/*overwrite*/);
}

#>
