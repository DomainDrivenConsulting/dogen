<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/formatting_assistant.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_implementation_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

dogen::formatters::file class_implementation_formatter_stitch(
    formatters::formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());

            /*
             * Default constructor.
             */
            if (c.requires_manual_default_constructor()) {
#>

<#= c.name() #>::<#= c.name() #>()
<#+
                auto sf(fa.make_sequence_formatter(c.properties().size()));
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(" { }");
                for (const auto p : c.properties()) {
                    if (!p.type().is_primitive() && !p.type().is_enumeration())
                        continue;
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #>(static_cast<<#= p.type().complete_name() #>>(0))<#= sf.postfix() #>
<#+
                }
#>

<#+
            }

            /*
             * Move constructor.
             */
            if (c.requires_manual_move_constructor()) {
#>

<#= c.name() #>::<#= c.name() #>(<#= c.name() #>&& rhs)
<#+
                unsigned int size(c.parents().size() + c.properties().size());
                auto sf(fa.make_sequence_formatter(size));
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(" { }");

                for (const auto p : c.parents())
#>
    <#= sf.prefix() #><#= p.qualified_name() #>(std::forward<<#= p.qualified_name() #>>(rhs))<#= sf.postfix() #>
<#+

                for (const auto p : c.properties())
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #>(std::move(rhs.<#= fa.make_member_variable_name(p) #>))<#= sf.postfix() #>

<#+
            }

            /*
             * Complete constructor.
             */
            if (!c.all_properties().empty()) {
                const auto prop_count(c.all_properties().size());
                if (prop_count == 1) {
                     const auto p(*c.all_properties().begin());
#>
<#= c.name() #>::<#= c.name() #>(const <#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #>)
<#+
                } else
#>
<#= c.name() #>::<#= c.name() #>(
<#+

                auto sf(fa.make_sequence_formatter(prop_count));
                sf.postfix_configuration().last(")");
                for (const auto p : c.properties())
#>
    const <#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #><#= sf.postfix() #>
<#+

                sf.reset();
                sf.prefix_configuration().first(": ").not_first("  ");
                sf.postfix_configuration().last(") { }");

                for (const auto p : c.properties())
#>
    <#= sf.prefix() #><#= fa.make_member_variable_name(p) #>(<#= p.name() #>)<#= sf.postfix() #>
<#+
            }
#>

<#+
        } // snf
#>

<#+
    } // sbf
    return fa.make_file(false/*overwrite*/);
}

#>
