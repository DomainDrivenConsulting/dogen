<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=s #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_header_formatter_stitch.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_namespace_formatter.hpp" #>
<#@ inclusion_dependency="dogen/formatters/types/cpp/scoped_boilerplate_formatter.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

void class_header_formatter_stitch(std::ostream& s,
    const boost::optional<dogen::formatters::general_settings>& gs,
    const settings::formatter_settings& fs,
    const formattables::class_info& c) {

    dogen::formatters::cpp::scoped_boilerplate_formatter
       sbf(s, gs, fs.inclusion_dependencies(), *fs.header_guard());

    {
        dogen::formatters::cpp::scoped_namespace_formatter snf(
           s, c.namespaces(), false/*create_anonymous_namespace*/,
           true/*add_new_line*/);

        std::string final_status;
        if (!c.is_parent())
            final_status = "final ";

#>

class <#= c.name() #> <#= final_status #>{
public:
<#+
        if (!c.requires_manual_default_constructor())
#>
    <#= c.name() #>() = default;
    <#= c.name() #>(const <#= c.name() #>&) = default;
<#+
        if (!c.requires_manual_move_constructor())
#>
    <#= c.name() #>(<#= c.name() #>&&) = default;
<#+
        if (!c.is_parent() && c.parents().empty())
#>
    ~<#= c.name() #>() = default;
<#+
        if (c.is_immutable())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = delete;
<#+
        if (c.all_properties().empty())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = default;

public:
<#+
        if (c.requires_manual_default_constructor())
#>
    <#= c.name() #>();

};

<#+
    }
#>

<#+
}

#>
