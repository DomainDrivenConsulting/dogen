<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/formatting_assistant.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_header_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

dogen::formatters::file class_header_formatter_stitch(
    formatters::formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());
            const auto ts(fa.type_settings());

            std::string final_status;
            if (c.is_final())
                final_status = "final ";

#>

class <#= c.name() #> <#= final_status #>{
public:
<#+
            if (!c.requires_manual_default_constructor())
#>
    <#= c.name() #>() = default;
    <#= c.name() #>(const <#= c.name() #>&) = default;
<#+
            if (!c.requires_manual_move_constructor())
#>
    <#= c.name() #>(<#= c.name() #>&&) = default;
<#+
            if (!c.is_parent() && c.parents().empty())
#>
    ~<#= c.name() #>() = default;
<#+
            if (c.is_immutable())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = delete;
<#+
            if (c.all_properties().empty())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = default;

<#+
            if (c.requires_manual_default_constructor()) {
#>
public:
    <#= c.name() #>();

<#+
            }
#>
<#+
            if (c.requires_manual_move_constructor()) {
#>
public:
    <#= c.name() #>(<#= c.name() #>&& rhs);

<#+
            }

            if (!ts.disable_complete_constructor()) {
#>
public:

<#+
            }
#>
};

<#+
        }
    }
#>

<#+
    return fa.make_file();
}

#>
