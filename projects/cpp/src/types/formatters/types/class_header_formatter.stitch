<#@ licence_name=gpl_v3 #>
<#@ copyright_notice=Copyright(C) 2012 Kitanda <info@kitanda.co.uk> #>
<#@ modeline_group_name=emacs #>
<#@ stream_variable_name=fa.stream() #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/serialization/traits.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/formatting_assistant.hpp" #>
<#@ inclusion_dependency="dogen/cpp/types/formatters/types/class_header_formatter_stitch.hpp" #>
<#@ containing_namespaces=dogen::cpp::formatters::types #>
<#+

dogen::formatters::file class_header_formatter_stitch(
    formatters::formatting_assistant& fa,
    const formattables::class_info& c) {

    {
        auto sbf(fa.make_scoped_boilerplate_formatter());
        {
            auto snf(fa.make_scoped_namespace_formatter());

#>

class <#= c.name() #> <#= fa.make_final_keyword_text(c) #>{
public:
<#+
            if (!c.requires_manual_default_constructor())
#>
    <#= c.name() #>() = default;
    <#= c.name() #>(const <#= c.name() #>&) = default;
<#+
            if (!c.requires_manual_move_constructor())
#>
    <#= c.name() #>(<#= c.name() #>&&) = default;
<#+
            if (!c.is_parent() && c.parents().empty())
#>
    ~<#= c.name() #>() = default;
<#+
            if (c.is_immutable())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = delete;
<#+
            if (c.all_properties().empty())
#>
    <#= c.name() #>& operator=(const <#= c.name() #>&) = default;

<#+
            if (c.requires_manual_default_constructor()) {
#>
public:
    <#= c.name() #>();

<#+
            }
#>
<#+
            if (c.requires_manual_move_constructor()) {
#>
public:
    <#= c.name() #>(<#= c.name() #>&& rhs);

<#+
            }

            if (!c.disable_complete_constructor()) {
#>
public:
<#+
                const auto prop_count(c.all_properties().size());
                if (prop_count == 1) {
                    const auto p(*c.all_properties().begin());
#>
    explicit <#= c.name() #>(<#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #>);
<#+
                } else {
#>
    <#= c.name() #>(
<#+
                    int pos(0);
                    for (const auto& p : c.all_properties()) {
#>
        const <#= p.type().complete_name() #><#= fa.make_by_ref_text(p) #> <#= p.name() #><#= fa.make_parameter_separator_text(prop_count, pos) #>
<#+
                    ++pos;
                    }
                }
#>

<#+
            }

            using formatters::serialization::traits;
            const auto disable_serialization(
                !fa.is_formatter_enabled(traits::class_header_formatter_name()));
            if (!disable_serialization) {
#>
private:
    template<typename Archive>
    friend void boost::serialization::save(Archive& ar, const <#= c.name() #>& v, unsigned int version);

    template<typename Archive>
    friend void boost::serialization::load(Archive& ar, <#= c.name() #>& v, unsigned int version);

<#+
            }
#>

<#+
#>
};

<#+
        }
    }
#>

<#+
    return fa.make_file();
}

#>
