{
  "documentation": "Coding is the core Dogen meta-model representing software entities.\n\n@section coding_0 Overview\n\nCoding is a meta-model that provides a programming-language-neutral\ntype representation, designed for code generation. Intermediate models\nare obtained via frontends and post-processed until they form a\ncohesive whole. They are then suitable to be sent down the\npipeline for further processing.\n\n@section coding_1 Mission\n\nCoding's objectives are:\n\n@li to represent all high-level entities that exist across a number\nof technical spaces used in software engineering. These entities\nare not necessarily limited to programming language entities, though\nof course, these form the core set of elements we're interested in.\nAdditional entities such as build sytems and high-level patterns\nsuch as GoF and others are also captured.\n\n@li to provide the tooling required to combine multiple coding\nmodels together into a bigger model - called the @e merged model.\n\n@li to ensure the consistency of the merged model via validation\nrules (such as verifying that all types have a definitions,\netc.).\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "masd.dogen.coding",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "masd.dogen",
    "masd.injection.reference": "masd.dogen.annotations",
    "masd.injection.reference": "masd.dogen.tracing",
    "masd.injection.reference": "masd.dogen.extraction",
    "masd.injection.input_language": "cpp",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.cpp.enabled": "true",
    "masd.extraction.cpp.standard": "c++-17",
    "masd.extraction.cpp.msbuild.enabled": "false",
    "masd.extraction.cpp.visual_studio.project.enabled": "false",
    "masd.extraction.cpp.visual_studio.solution.enabled": "false",
    "masd.extraction.csharp.enabled": "false",
    "masd.annotations.profile": "dogen.disable_common_facets"
  },
  "elements": [
    {
      "name": "meta_model",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "meta_model::attribute",
      "documentation": "Represents an attribute in an object.\n",
      "stereotypes": [
        "Documentable",
        "Annotatable",
        "Nameable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "unparsed_type",
          "type": "std::string",
          "documentation": "Original type name as it appeared in the source, without any parsing.\n\nName must be in one of the supported notations.\n"
        },
        {
          "name": "parsed_type",
          "type": "name_tree",
          "documentation": "Tree of names that represent the type of the attribute, after suitable parsing.\n"
        },
        {
          "name": "is_immutable",
          "type": "bool",
          "documentation": "If true, the attribute can only be read but not set.\n"
        },
        {
          "name": "is_fluent",
          "type": "bool",
          "documentation": "If true, the attribute's setter will return the object iteself.\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<orm_attribute_properties>"
        }
      ]
    },
    {
      "name": "meta_model::name_tree",
      "documentation": "Adds support for name composition as a tree-like structure.\n\nA name tree has the responsibility of representing an instantiation of a generic\ntype with all of its type parameters, which themselves can also be generic types\nand so on. It may also represent the simpler case of a non-generic type, in which\ncase only the parent name is populated and there are no children.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "current",
          "type": "name",
          "documentation": "Name for the current level of the tree.\n"
        },
        {
          "name": "children",
          "type": "std::list<name_tree>",
          "documentation": "Names of the child elements.\n"
        },
        {
          "name": "are_children_opaque",
          "type": "bool",
          "documentation": "If true, the association with its children can be opaque.\n\nChildren are considered opaque when the parent does not require knowledge\nabout the childs' internal structure. This is the case, for example, with C and\nC++ pointers, references and so on.\n"
        },
        {
          "name": "is_circular_dependency",
          "type": "bool",
          "documentation": "If true, the presence of the current name causes a circular dependency.\n"
        },
        {
          "name": "qualified",
          "type": "std::map<languages, std::string>",
          "documentation": "Qualified name in a language specific representation.\n"
        },
        {
          "name": "identifiable",
          "type": "std::string",
          "documentation": "Representation of the named tree that can usable as an identifier across all\nsupported languages.\n"
        },
        {
          "name": "is_current_simple_type",
          "type": "bool",
          "documentation": "Returns true if @e current is a simple type such as a built-in or an enumeration.\n"
        },
        {
          "name": "is_floating_point",
          "type": "bool",
          "documentation": "If true, \"current\" stores a floating point type.\n"
        }
      ]
    },
    {
      "name": "meta_model::element",
      "documentation": "Represents a generic coding construct.\n\nAn element is anything of interest in a problem domain which needs to be\nexpressed in code generation. It covers both types (objects, enumerations, etc),\nmeta-types (object templates) and non-types (modules and backend specific entities).\n",
      "stereotypes": [
        "masd::visitable",
        "Element"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "is_element_extension",
          "type": "bool",
          "documentation": "If true, this element extends another element with the same id.\n"
        },
        {
          "name": "decoration_properties",
          "type": "extraction::decoration_properties"
        },
        {
          "name": "artefact_properties",
          "type": "std::unordered_map<std::string, artefact_properties>"
        },
        {
          "name": "archetype_location_properties",
          "type": "std::unordered_map<std::string, local_archetype_location_properties>"
        }
      ]
    },
    {
      "name": "meta_model::module",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Container for other coding elements.\n\nAggregates a group of logically related elements into a unit.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "members",
          "type": "std::list<std::string>",
          "documentation": "All the model elements contained in this module.\n"
        },
        {
          "name": "is_root",
          "type": "bool",
          "documentation": "If true, this module is thee root module of the model.\n"
        },
        {
          "name": "is_global_module",
          "type": "bool",
          "documentation": "If true, this module is the pseudo module that models the global namespace.\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<orm_module_properties>"
        }
      ]
    },
    {
      "name": "meta_model::object_template",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Represents a structural template for masd objects.\n",
      "stereotypes": [
        "Stateful"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "parents",
          "type": "std::list<name>",
          "documentation": "List of object templates that this object template inherits from, if any.\n"
        },
        {
          "name": "is_child",
          "type": "bool",
          "documentation": "If true, the object template has at least one parent.\n"
        }
      ]
    },
    {
      "name": "meta_model::Nameable",
      "documentation": "Ability to have a name.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "name",
          "documentation": "Fully qualified name.\n"
        }
      ]
    },
    {
      "name": "meta_model::Documentable",
      "documentation": "Ability to provide documentation.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "documentation",
          "type": "std::string",
          "documentation": "Code comments.\n\nThese are expected to follow the grammar of the comment processing tools\nof the programming language in question, e.g. Doxygen for C++, JavaDoc\nfor Java, etc.\n"
        }
      ]
    },
    {
      "name": "meta_model::Annotatable",
      "documentation": "Ability to have meta-data associated.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "annotation",
          "type": "annotations::annotation",
          "documentation": "Annotation for this element.\n"
        }
      ]
    },
    {
      "name": "meta_model::DeterminableOrigin",
      "documentation": "A unit of coding that can be code generated.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "origin_type",
          "type": "origin_types",
          "documentation": "How was this model element originated.\n"
        }
      ]
    },
    {
      "name": "meta_model::Containable",
      "documentation": "The ability to be contained inside a module.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "contained_by",
          "type": "boost::optional<name>",
          "documentation": "Name of the module in which we are contained.\n"
        },
        {
          "name": "in_global_module",
          "type": "bool",
          "documentation": "If true, the element is located in the global module.\n"
        }
      ]
    },
    {
      "name": "meta_model::Stereotypable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "static_stereotypes",
          "type": "std::list<static_stereotypes>",
          "documentation": "Stereotypes that are part of the dogen UML profile, and so are well-known to the\nmodel.\n"
        },
        {
          "name": "dynamic_stereotypes",
          "type": "std::list<std::string>",
          "documentation": "Stereotypes that are not part of the masd UML profile. These are user defined.\n"
        }
      ]
    },
    {
      "name": "meta_model::MetaNameable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "meta_name",
          "type": "name",
          "documentation": "Name of the element in the meta-model that this instance conforms to.\n"
        }
      ]
    },
    {
      "name": "meta_model::Element",
      "parents": [
        "meta_model::Nameable",
        "meta_model::Documentable",
        "meta_model::Annotatable",
        "meta_model::DeterminableOrigin",
        "meta_model::Containable",
        "meta_model::Stereotypable",
        "meta_model::MetaNameable"
      ],
      "documentation": "A unit of coding that can be code generated.\n\nWe define the Element object template purely to make our life easier\nwhen creating the element class. It is not required for any other\npurpose.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::builtin",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Represents a value type that is built-in at the hardware level.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "is_default_enumeration_type",
          "type": "bool",
          "documentation": "If true, this built-in is the default type to be used on enumerations.\n"
        },
        {
          "name": "is_floating_point",
          "type": "bool",
          "documentation": "If true, this built-in represents a floating point number.\n"
        },
        {
          "name": "can_be_enumeration_underlier",
          "type": "bool",
          "documentation": "If true, this element can be the underlying element of an enumeration.\n"
        },
        {
          "name": "can_be_primitive_underlier",
          "type": "bool",
          "documentation": "If true, this built-in can be the underlying element of a primitive.\n"
        }
      ]
    },
    {
      "name": "meta_model::enumeration",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Defines a bounded set of logically related values for a built-in type\nor a string.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "underlying_element",
          "type": "name",
          "documentation": "Underlying element of each instance of the enumeration.\n"
        },
        {
          "name": "enumerators",
          "type": "std::vector<enumerator>",
          "documentation": "Enumerators for this enumeration.\n"
        },
        {
          "name": "use_implementation_defined_underlying_element",
          "type": "bool",
          "documentation": "If true, we will use the implementation specific default enumeration type.\n"
        },
        {
          "name": "use_implementation_defined_enumerator_values",
          "type": "bool",
          "documentation": "If true, we will rely on compiler generated enumeration values.\n"
        },
        {
          "name": "add_invalid_enumerator",
          "type": "bool",
          "documentation": "If true, an enumerator for \"invalid\" will be added.\n"
        }
      ]
    },
    {
      "name": "meta_model::enumerator",
      "documentation": "One of a set of valid values that an enumeration can assume.\n\nThe enumerator defines an element in the domain of the enumeration.\n",
      "stereotypes": [
        "Documentable",
        "Nameable",
        "Annotatable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "value",
          "type": "std::string",
          "documentation": "Value for the enumerator.\n\nIt must be castable to instance of the type defined in the enumeration.\n"
        }
      ]
    },
    {
      "name": "meta_model::object",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Representation of the class notion in the OOP paradigm.\n\nThe @e object is equivalent to a meta-class, but we decided against this\nname because all elements should also have the prefix meta - after all, coding\nis ameta-model. Since the word class cannot be used in c++ to name types, we\ndecided instead to use the word object.\n",
      "stereotypes": [
        "Stateful",
        "Relatable",
        "Parameterisable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "is_associative_container",
          "type": "bool",
          "documentation": "Object is an associative container.\n"
        },
        {
          "name": "object_templates",
          "type": "std::list<name>",
          "documentation": "All object templates associated with this object.\n"
        },
        {
          "name": "associative_container_keys",
          "type": "std::list<name>",
          "documentation": "Elements that are keys in an associative container.\n"
        },
        {
          "name": "provides_opaqueness",
          "type": "bool",
          "documentation": "If true, this type provides opaqueness to any type parameters it may have.\n"
        },
        {
          "name": "can_be_primitive_underlier",
          "type": "bool",
          "documentation": "If true, this object can be the underlying element of a primitive.\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<orm_object_properties>"
        }
      ]
    },
    {
      "name": "meta_model::name",
      "documentation": "Name of an element in coding space.\n\nA name represents a point in coding space, and this point can only be\nused by one coding element. Names can be uniquely identified by their\nqualified ID.\n\nName has the following properties: a) two different points in element space\ncannot have the same name and b) the same point in element space can only\nhave one and only one name.\n\nNames are required in addition to just using the qualfied ID representation\nbecause we use them to infer all sorts of properties for an element (namespaces,\nnaming files, etc).\n",
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "id",
          "type": "std::string",
          "documentation": "Unique identifier representation for this name, using a well-defined notation.\n\nNote that the qualified ID itself should not be part of the address, but it is\nplaced here as an optimisation. The ID is a bijective function on the address,\nbut designed not to have the ability to split out its constituent parts. The ID\nis generated by combining all the constituents of the address, including the\nlocation (but not the ID itself, of course).\n"
        },
        {
          "name": "simple",
          "type": "std::string",
          "documentation": "Simple (non-qualified) name of the coding element at this address.\n\nThe simple name must be unique for a given location.\n"
        },
        {
          "name": "qualified",
          "type": "std::map<languages, std::string>",
          "documentation": "Qualified name in a language specific representation.\n"
        },
        {
          "name": "location",
          "type": "location",
          "documentation": "Where the name is located in element space.\n"
        },
        {
          "name": "identifiable",
          "type": "std::string",
          "documentation": "Representation of the name that can usable as an identifier on all of the supported\nlanguages, using the entire name structure.\n"
        }
      ]
    },
    {
      "name": "meta_model::origin_types",
      "documentation": "What originated the model element.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "target",
          "type": "",
          "documentation": "The element is part of the target model.\n"
        },
        {
          "name": "proxy_reference",
          "type": "",
          "documentation": "The element was part of a reference model which is a proxy model.\n\nProxy models expose types from existing code such as STL, boost, etc,\nproviding a way to expose third party code into Dogen so that we\ncan make use of these types.\n"
        },
        {
          "name": "non_proxy_reference",
          "type": "",
          "documentation": "The element was part of a reference model which is regular dogen model.\n"
        },
        {
          "name": "not_yet_determined",
          "type": "",
          "documentation": "The origin of the element is not yet known\n"
        }
      ]
    },
    {
      "name": "meta_model::Stateful",
      "documentation": "Ability to have a state.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "all_attributes",
          "type": "std::list<attribute>",
          "documentation": "All attributes associated with this type.\n\nThis is a union of the following sets:\n\n@li the set of all attributes obtained via inheritance relationships;\n@li the set of all attributes obtained via instantiating object templates,\n    including their inheritance tree;\n@li the set of all attributes directly associated with the type (local).\n\nThe first and third sets are cached in this object. The second isn't as we do\nnot have a need for it.\n"
        },
        {
          "name": "local_attributes",
          "type": "std::list<attribute>",
          "documentation": "The set of all attributes directly associated with the type.\n"
        },
        {
          "name": "inherited_attributes",
          "type": "std::unordered_map<name, std::list<attribute>>",
          "documentation": "The set of all attributes obtained via inheritance, by parent name.\n\nNote that we are using name as a key by design (instead of id); it is required for\nformatting.\n"
        },
        {
          "name": "is_immutable",
          "type": "bool",
          "documentation": "If true, do not generate setters for the element's attributes.\n"
        },
        {
          "name": "is_fluent",
          "type": "bool",
          "documentation": "If true, generate fluent setters.\n"
        }
      ]
    },
    {
      "name": "meta_model::location",
      "documentation": "Identifies a hierarchy of containment within the coding space.\n\nElements exist at unique points within the coding space called @e\naddresses.  However, certain elements have the ability to contain\nother elements, creating in effect new dimensions in coding space. The\nlocation class keeps track of these dimensions. Note that the\nattributes of this class are hierarchical, i.e.  external modules\ncontain model modules and so forth. These attributes are best thought\nof as a single linked list, where segments of that linked list have\ndifferent meaning. However, because we care about these meanings, we\nimplemented the type with a number of linked lists, one per meaning.\n\nA location is not necessarily connected to modules, although these are\nthe main model elements that provide containment. For example, inner\nclasses are contained within classes; in coding terms it means a\nlocation should also have an \"object\" attribute to represent this\nrelationship.\n\nAlso, note that the location class itself encodes the address of the\nelement that owns that location; returning to the linked list idea,\nthe tail of the linked list is the name of the element, and the\nremaining linked list provides the location of the element.\n",
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "external_modules",
          "type": "std::list<std::string>",
          "documentation": "All modules external to the model itself.\n\nIt is sometimes useful to create a model within a set of existing\nmodules. In this case, the model does not own the existing modules and\nthey are considered \"external\" to the model. This is useful, for\nexample, when declaring a model within a larger project such as @e\nmasd::dogen::coding. In this case, @e dogen is the external module.\n"
        },
        {
          "name": "model_modules",
          "type": "std::list<std::string>",
          "documentation": "Modules related to just the model itself.\n\nIt is only different from the model name if the model name is composite;\nthat is, if the model name has multiple fields separated by dots, e.g. @ a.b.\n"
        },
        {
          "name": "internal_modules",
          "type": "std::list<std::string>",
          "documentation": "Sub-modules within a model.\n"
        },
        {
          "name": "element",
          "type": "std::string",
          "documentation": "Name of the owning element, if any.\n\nFor coding elements which are located within other coding elements\nthat are not modules, such as attributes, inner classes, etc.\n"
        }
      ]
    },
    {
      "name": "meta_model::model",
      "documentation": "Intermediate representation of a masd model.\n",
      "stereotypes": [
        "Nameable",
        "MetaNameable",
        "DeterminableOrigin"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "references",
          "type": "std::unordered_map<name,origin_types>",
          "documentation": "All other intermediate models that this model depends on, mapped to their\norigin.\n"
        },
        {
          "name": "leaves",
          "type": "std::unordered_set<name>",
          "documentation": "All leaf types in this model.\n\nLeaves are types concrete types which have a parent.\n"
        },
        {
          "name": "modules",
          "type": "std::unordered_map<std::string, boost::shared_ptr<module>>",
          "documentation": "Modules contained in the model.\n"
        },
        {
          "name": "object_templates",
          "type": "std::unordered_map<std::string, boost::shared_ptr<object_template>>",
          "documentation": "All the object templates available in this model.\n"
        },
        {
          "name": "builtins",
          "type": "std::unordered_map<std::string, boost::shared_ptr<builtin>>",
          "documentation": "All built-ins contained in this model.\n"
        },
        {
          "name": "enumerations",
          "type": "std::unordered_map<std::string, boost::shared_ptr<enumeration>>",
          "documentation": "All enumerations contained in this model.\n"
        },
        {
          "name": "primitives",
          "type": "std::unordered_map<std::string, boost::shared_ptr<primitive>>",
          "documentation": "All primitives in this model.\n"
        },
        {
          "name": "objects",
          "type": "std::unordered_map<std::string, boost::shared_ptr<object>>",
          "documentation": "All objects contained in this model.\n"
        },
        {
          "name": "exceptions",
          "type": "std::unordered_map<std::string, boost::shared_ptr<exception>>",
          "documentation": "All exceptions in this model.\n"
        },
        {
          "name": "visitors",
          "type": "std::unordered_map<std::string, boost::shared_ptr<visitor>>",
          "documentation": "All visitors in this model.\n"
        },
        {
          "name": "root_module",
          "type": "boost::shared_ptr<module>"
        },
        {
          "name": "input_language",
          "type": "languages",
          "documentation": "Language in which this model was written.\n"
        },
        {
          "name": "output_languages",
          "type": "std::list<languages>",
          "documentation": "Languages in which to output the final model.\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<orm_model_properties>"
        },
        {
          "name": "extraction_properties",
          "type": "extraction_properties"
        }
      ]
    },
    {
      "name": "meta_model::elements_traversal",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::TraversalVisitor",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::Visitable",
      "documentation": "The ability to handle visitation.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "base_visitor",
          "type": "boost::optional<name>",
          "documentation": "Base class of the visitor that visits the current element, if any.\n"
        },
        {
          "name": "derived_visitor",
          "type": "boost::optional<name>",
          "documentation": "Derived class of the visitor that visits the current element, if any.\n"
        },
        {
          "name": "is_visitation_root",
          "type": "bool"
        },
        {
          "name": "is_visitation_leaf",
          "type": "bool"
        }
      ]
    },
    {
      "name": "meta_model::Associatable",
      "documentation": "The element has the ability to associate itself with other elements.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "transparent_associations",
          "type": "std::list<name>",
          "documentation": "Elements that are involved in aggregation or composition relationships.\n"
        },
        {
          "name": "opaque_associations",
          "type": "std::list<name>",
          "documentation": "Elements that are involved in aggregation or composition relationships via\nindirection.\n\nThis is used to break cycles where required.\n"
        }
      ]
    },
    {
      "name": "meta_model::Generalizable",
      "documentation": "The element has the ability to be part of a generalization relationship.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "is_parent",
          "type": "bool",
          "documentation": "True if this element is the parent of one or more elements, false otherwise.\n"
        },
        {
          "name": "is_child",
          "type": "bool",
          "documentation": "If true, the element has at least one parent.\n"
        },
        {
          "name": "is_leaf",
          "type": "bool",
          "documentation": "True if the type has a parent but no children.\n"
        },
        {
          "name": "is_final",
          "type": "bool",
          "documentation": "If true, the element cannot be inherited from.\n"
        },
        {
          "name": "is_abstract",
          "type": "bool",
          "documentation": "If true, the type is an abstract type.\n"
        },
        {
          "name": "in_inheritance_relationship",
          "type": "bool",
          "documentation": "True if the object is related to at least one other object as a parent or a child.\n"
        },
        {
          "name": "root_parents",
          "type": "std::list<name>",
          "documentation": "Top-most parents at the root of the inheritance hierarchy, if any.\n"
        },
        {
          "name": "parents",
          "type": "std::list<name>",
          "documentation": "Direct parent of this element, if any.\n"
        },
        {
          "name": "leaves",
          "type": "std::list<name>",
          "documentation": "Elements that are at the bottom of the inheritance tree.\n"
        }
      ]
    },
    {
      "name": "meta_model::Relatable",
      "parents": [
        "meta_model::Containable",
        "meta_model::Visitable",
        "meta_model::Associatable",
        "meta_model::Generalizable"
      ],
      "documentation": "Element has the ability to have relationships with other elements.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::visitor",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Represents a visitor in the GOF visitor design pattern.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "visits",
          "type": "std::list<name>",
          "documentation": "Elements that are visitable by the visitor.\n"
        },
        {
          "name": "parent",
          "type": "boost::optional<name>"
        }
      ]
    },
    {
      "name": "meta_model::exception",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Represents an exception which can be thrown.\n",
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::Parameterisable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "type_parameters",
          "type": "type_parameters"
        }
      ]
    },
    {
      "name": "meta_model::type_parameters",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "variable_number_of_parameters",
          "type": "bool"
        },
        {
          "name": "count",
          "type": "unsigned int"
        },
        {
          "name": "always_in_heap",
          "type": "bool"
        }
      ]
    },
    {
      "name": "traits",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::languages",
      "documentation": "Models need to declare upfront the programming language they will target.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "cpp",
          "type": ""
        },
        {
          "name": "csharp",
          "type": ""
        },
        {
          "name": "language_agnostic",
          "type": ""
        }
      ]
    },
    {
      "name": "meta_model::primitive",
      "parents": [
        "meta_model::element"
      ],
      "documentation": "Defines an element created by the user to wrap another element, most likely a built-in.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "is_nullable",
          "type": "bool",
          "documentation": "If true, this element can be null (empty).\n"
        },
        {
          "name": "value_attribute",
          "type": "attribute",
          "documentation": "Attribute that represents the value of the primitive.\n"
        },
        {
          "name": "use_type_aliasing",
          "type": "bool",
          "documentation": "If true and if the programming language supports it, it uses type aliases\n"
        },
        {
          "name": "is_immutable",
          "type": "bool",
          "documentation": "If true, do not generate a setter..\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<orm_primitive_properties>"
        }
      ]
    },
    {
      "name": "meta_model::orm_database_systems",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "mysql",
          "type": ""
        },
        {
          "name": "postgresql",
          "type": ""
        },
        {
          "name": "oracle",
          "type": ""
        },
        {
          "name": "sql_server",
          "type": ""
        },
        {
          "name": "sqlite",
          "type": ""
        }
      ]
    },
    {
      "name": "meta_model::orm_model_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "database_systems",
          "type": "std::vector<orm_database_systems>"
        },
        {
          "name": "schema_name",
          "type": "std::string"
        },
        {
          "name": "letter_case",
          "type": "boost::optional<letter_cases>"
        }
      ]
    },
    {
      "name": "meta_model::letter_cases",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "upper_case",
          "type": ""
        },
        {
          "name": "lower_case",
          "type": ""
        }
      ]
    },
    {
      "name": "meta_model::orm_object_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "generate_mapping",
          "type": "bool",
          "documentation": "If true, object-relational mapping will be generated for this element.\n"
        },
        {
          "name": "schema_name",
          "type": "std::string",
          "documentation": "Name of the database schema in which to place this element.\n"
        },
        {
          "name": "table_name",
          "type": "std::string",
          "documentation": "Name of the table to map this element to.\n"
        },
        {
          "name": "is_value",
          "type": "bool",
          "documentation": "If true, treat this object as a value type (e.g. simple type) rather than as an object.\n"
        },
        {
          "name": "has_primary_key",
          "type": "bool",
          "documentation": "True if the object has an attribute marked as a primary key, false otherwise.\n"
        },
        {
          "name": "letter_case",
          "type": "boost::optional<letter_cases>",
          "documentation": "What case to use for the database identifiers.\n"
        }
      ]
    },
    {
      "name": "meta_model::orm_attribute_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "column_name",
          "type": "std::string",
          "documentation": "Name of the column to use for this attribute. If populated, will override the attribute name.\n"
        },
        {
          "name": "is_primary_key",
          "type": "bool",
          "documentation": "If true, this attribute is a primary key for the relation.\n"
        },
        {
          "name": "is_nullable",
          "type": "boost::optional<bool>",
          "documentation": "If true, the attribute can be NULL.\n"
        },
        {
          "name": "type_overrides",
          "type": "std::unordered_map<orm_database_systems, std::string>",
          "documentation": "Override the default type for this attribute for a given database system.\n"
        },
        {
          "name": "is_composite",
          "type": "bool",
          "documentation": "If true, the value of this attribute is a composite value.\n"
        }
      ]
    },
    {
      "name": "meta_model::orm_module_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "schema_name",
          "type": "std::string",
          "documentation": "Name of the database schema in which elements contained by this module will placed in.\n"
        }
      ]
    },
    {
      "name": "meta_model::orm_primitive_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "generate_mapping",
          "type": "bool",
          "documentation": "If true, object-relational mapping will be generated for this element.\n"
        },
        {
          "name": "schema_name",
          "type": "std::string",
          "documentation": "Name of the database schema in which to place this element.\n"
        },
        {
          "name": "letter_case",
          "type": "boost::optional<letter_cases>",
          "documentation": "What case to use for the database identifiers.\n"
        }
      ]
    },
    {
      "name": "meta_model::artefact_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "enabled",
          "type": "bool"
        },
        {
          "name": "overwrite",
          "type": "bool"
        },
        {
          "name": "file_path",
          "type": "boost::filesystem::path"
        },
        {
          "name": "formatting_style",
          "type": "formatting_styles"
        },
        {
          "name": "formatting_input",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "meta_model::formatting_styles",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stock",
          "type": ""
        },
        {
          "name": "wale",
          "type": ""
        },
        {
          "name": "stitch",
          "type": ""
        }
      ]
    },
    {
      "name": "transforms",
      "documentation": "Houses all of the transformations supported by coding.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::context",
      "documentation": "\nContext for all coding transformations.\n\nContains all of the external data required for the transformations\nto execute. It's not ideal to have a huge \"global\" class, with lots\nof unrelated state; however, over time, we found that a number of\narguments were being supplied across the call graph, resulting in a\nlot of repetitive code. The context gathers together all of these.\n",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "tagged_values": {
        "masd.extraction.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "type_repository",
          "type": "boost::shared_ptr<annotations::type_repository>"
        },
        {
          "name": "archetype_location_repository",
          "type": "boost::shared_ptr<annotations::archetype_location_repository>"
        },
        {
          "name": "annotation_factory",
          "type": "boost::shared_ptr<annotations::annotation_factory>"
        },
        {
          "name": "annotation_expander",
          "type": "boost::shared_ptr<annotations::annotation_expander>"
        },
        {
          "name": "mapping_repository",
          "type": "boost::shared_ptr<helpers::mapping_set_repository>"
        },
        {
          "name": "tracer",
          "type": "boost::shared_ptr<tracing::tracer>"
        }
      ]
    },
    {
      "name": "transforms::model_set_pre_processing_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_production_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_assembly_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_post_processing_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::merge_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::modules_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::origin_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::language_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::type_params_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::parsing_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::primitives_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generalization_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::stereotypes_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::object_templates_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::containment_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::orm_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::resolver_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::attributes_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::associations_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::transformation_error",
      "documentation": "An error occurred whilst applying a transformation.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::enumerations_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "helpers::decomposition_result",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "names",
          "type": "std::list<std::pair<std::string, meta_model::name>>"
        },
        {
          "name": "meta_names",
          "type": "std::list<std::pair<std::string, meta_model::name>>"
        },
        {
          "name": "name_trees",
          "type": "std::list<std::pair<std::string, meta_model::name_tree>>"
        },
        {
          "name": "injected_names",
          "type": "std::list<std::pair<std::string, meta_model::name>>"
        }
      ]
    },
    {
      "name": "helpers::decomposer",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::model_post_processing_validator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::validation_error",
      "documentation": "An error occurred during validation.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::model_pre_processing_validator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::indices",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "objects_always_in_heap",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "elements_referable_by_attributes",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "primitive_underliers",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "enumeration_underliers",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "abstract_elements",
          "type": "std::unordered_set<std::string>"
        }
      ]
    },
    {
      "name": "helpers::indexing_error",
      "documentation": "A fatal error has occurred while indexing.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::indexer",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::resolver",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::resolution_error",
      "documentation": "An error occurred while trying to resolve a type.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::mapping_error",
      "documentation": "An error has occurred while mapping element names.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::mapper",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::mapping_context",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "translations",
          "type": "std::unordered_map<std::string, meta_model::name>"
        },
        {
          "name": "erasures",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "injections",
          "type": "std::unordered_map<std::string, meta_model::name>"
        }
      ]
    },
    {
      "name": "helpers::mapping_set",
      "documentation": "Consistent unit of mapping that can be used to translate a model from a language to\nanother.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string"
        },
        {
          "name": "by_language_agnostic_id",
          "type": "std::unordered_map<meta_model::languages, std::unordered_map<std::string, meta_model::name>>"
        },
        {
          "name": "erasures_by_language",
          "type": "std::unordered_map<meta_model::languages, std::unordered_set<std::string>>"
        }
      ]
    },
    {
      "name": "helpers::mapping_set_repository",
      "documentation": "Stores all available mapping sets.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "default_mapping_set",
          "type": "mapping_set"
        },
        {
          "name": "by_name",
          "type": "std::unordered_map<std::string, mapping_set>"
        }
      ]
    },
    {
      "name": "helpers::mapping_set_repository_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::mappings_validator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::mapping",
      "documentation": "Stores the mapping of a key (the element id) to its values, organised by language.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "lam_id",
          "type": "std::string",
          "documentation": "Language agnostic ID of the element we're mapping from.\n"
        },
        {
          "name": "by_language",
          "type": "std::unordered_map<meta_model::languages, mapping_value>",
          "documentation": "Values of the mapping, by language.\n"
        }
      ]
    },
    {
      "name": "helpers::mapping_value",
      "documentation": "Value of a mapping.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "mapping_action",
          "type": "mapping_actions"
        },
        {
          "name": "default_name",
          "type": "boost::optional<meta_model::name>"
        }
      ]
    },
    {
      "name": "helpers::mapping_actions",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "translate",
          "type": ""
        },
        {
          "name": "erase",
          "type": ""
        }
      ]
    },
    {
      "name": "helpers::mappings_hydrator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::hydration_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::mapping_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::printing_error",
      "documentation": "An error occurred whilst pretty printing.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::pretty_printer",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::separators",
      "documentation": "Available separators to be used by the pretty printer.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "angle_brackets",
          "type": "",
          "documentation": "Enclose name elements in '<' and '>'.\n"
        },
        {
          "name": "double_colons",
          "type": "",
          "documentation": "Separate name elements with a '::'.\n"
        },
        {
          "name": "dots",
          "type": "",
          "documentation": "Separate name elements with a '.'.\n"
        }
      ]
    },
    {
      "name": "helpers::node",
      "documentation": "Node in a tree of names.\n\nTemporary data structure used to build trees of names.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "parent",
          "type": "boost::shared_ptr<node>",
          "documentation": "Parent in a tree.\n"
        },
        {
          "name": "data",
          "type": "meta_model::name",
          "documentation": "Current node.\n"
        },
        {
          "name": "children",
          "type": "std::list<boost::shared_ptr<node>>",
          "documentation": "Child nodes in a tree.\n"
        }
      ]
    },
    {
      "name": "helpers::string_processor",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::building_error",
      "documentation": "An error occurred whilst building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::name_tree_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "top_level_modules_",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "model_location_",
          "type": "meta_model::location"
        },
        {
          "name": "names",
          "type": "std::list<std::string>"
        },
        {
          "name": "root",
          "type": "std::shared_ptr<node>"
        },
        {
          "name": "current",
          "type": "std::shared_ptr<node>"
        }
      ]
    },
    {
      "name": "helpers::legacy_name_tree_parser",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "modules",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "external_modules",
          "type": "std::list<std::string>"
        },
        {
          "name": "model_name",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "helpers::new_name_tree_parser",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::parsing_error",
      "documentation": "A fatal error has occurred while parsing.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::identifiable_and_qualified_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::name_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::name_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name_",
          "type": "meta_model::name"
        }
      ]
    },
    {
      "name": "helpers::name_flattener",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::meta_naming_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::meta_name_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::location_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "location_",
          "type": "meta_model::location"
        }
      ]
    },
    {
      "name": "meta_model::local_archetype_location_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "facet_enabled",
          "type": "boost::optional<bool>"
        },
        {
          "name": "archetype_enabled",
          "type": "boost::optional<bool>"
        },
        {
          "name": "facet_overwrite",
          "type": "boost::optional<bool>"
        },
        {
          "name": "archetype_overwrite",
          "type": "boost::optional<bool>"
        }
      ]
    },
    {
      "name": "meta_model::static_stereotypes",
      "documentation": "Lists all stereotypes defined in the masd UML profile.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "object",
          "type": ""
        },
        {
          "name": "object_template",
          "type": ""
        },
        {
          "name": "exception",
          "type": ""
        },
        {
          "name": "primitive",
          "type": ""
        },
        {
          "name": "enumeration",
          "type": ""
        },
        {
          "name": "module",
          "type": ""
        },
        {
          "name": "builtin",
          "type": ""
        },
        {
          "name": "visitable",
          "type": ""
        },
        {
          "name": "fluent",
          "type": ""
        },
        {
          "name": "immutable",
          "type": ""
        },
        {
          "name": "orm_object",
          "type": ""
        },
        {
          "name": "orm_value",
          "type": ""
        }
      ]
    },
    {
      "name": "meta_model::extraction_properties",
      "documentation": "Properties related to extraction.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "force_write",
          "type": "bool",
          "documentation": "Always write files, even when there are no differences.\n"
        },
        {
          "name": "delete_extra_files",
          "type": "bool",
          "documentation": "If true, deletes any files that are not known to Dogen .\n"
        },
        {
          "name": "ignore_files_matching_regex",
          "type": "std::vector<std::string>",
          "documentation": "Files matching the supplied regular expressions will be ignored by Dogen.\n\nOnly applicable when deleting extra files.\n"
        },
        {
          "name": "cpp_headers_output_directory",
          "type": "boost::filesystem::path",
          "documentation": "Directory in which to place C++ header files. Must be a relative path.\n"
        },
        {
          "name": "enabled_backends",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "enable_backend_directories",
          "type": "bool"
        }
      ]
    },
    {
      "name": "transforms::extraction_properties_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::model_set",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "target",
          "type": "model"
        },
        {
          "name": "references",
          "type": "std::list<model>"
        }
      ]
    }
  ]
}
