{
  "documentation": "The Annotations model is responsible for managing run-time typed data.\n\nThe idea is to allow the meta-models to carry data over to the\nformatting process without necessarily knowing about this data, but\nyet imposing some constraints on the shape of the data.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "masd.dogen.variability",
    "masd.injection.input_technical_space": "cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "masd",
    "masd.injection.reference": "masd.dogen.archetypes",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.delete_empty_directories": "true",
    "masd.generation.cpp.enabled": "true",
    "masd.generation.cpp.standard": "c++-17",
    "masd.generation.cpp.msbuild.enabled": "false",
    "masd.generation.cpp.visual_studio.project.enabled": "false",
    "masd.generation.cpp.visual_studio.solution.enabled": "false",
    "masd.generation.csharp.enabled": "false",
    "masd.annotations.profile": "dogen.disable_common_facets"
  },
  "elements": [
    {
      "name": "value",
      "documentation": "Base class of all value types.\n",
      "stereotypes": [
        "masd::visitable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "text",
      "parents": [
        "value"
      ],
      "documentation": "Field can hold text.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "std::string",
          "documentation": "Text value.\n"
        }
      ]
    },
    {
      "name": "text_collection",
      "parents": [
        "value"
      ],
      "documentation": "Field can hold a collection of text values.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "std::list<std::string>",
          "documentation": "Collection of text values.\n"
        }
      ]
    },
    {
      "name": "boolean",
      "parents": [
        "value"
      ],
      "documentation": "Field can hold a Boolean value.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "bool"
        }
      ]
    },
    {
      "name": "name",
      "documentation": "Name of the field description or field.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "simple",
          "type": "std::string",
          "documentation": "Non-qualified name of the field.\n"
        },
        {
          "name": "qualified",
          "type": "std::string",
          "documentation": "Qualified name of the field, using dots to separate the hierarchy.\n"
        }
      ]
    },
    {
      "name": "value_types",
      "documentation": "What values can a field hold.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "text",
          "type": ""
        },
        {
          "name": "text_collection",
          "type": ""
        },
        {
          "name": "number",
          "type": ""
        },
        {
          "name": "boolean",
          "type": ""
        },
        {
          "name": "key_value_pair",
          "type": ""
        }
      ]
    },
    {
      "name": "type",
      "documentation": "Defines the domain of values.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "name",
          "documentation": "Name of the field to which this definition applies.\n"
        },
        {
          "name": "value_type",
          "type": "value_types",
          "documentation": "Type of the field.\n"
        },
        {
          "name": "scope",
          "type": "scope_types",
          "documentation": "Valid scopes where the type may be present.\n"
        },
        {
          "name": "archetype_location",
          "type": "archetypes::location",
          "documentation": "The archetype location for this type.\n"
        },
        {
          "name": "default_value",
          "type": "boost::shared_ptr<value>",
          "documentation": "Default value for the field, if any.\n"
        },
        {
          "name": "is_partially_matchable",
          "type": "bool"
        }
      ]
    },
    {
      "name": "annotation",
      "documentation": "Represents an annotation that can be associated with an external object.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "tagged_values",
          "type": "std::unordered_map<std::string, boost::shared_ptr<value>>",
          "documentation": "All tagged values in this annotation. Each entry is a key-value-pair of id and value.\n"
        },
        {
          "name": "scope",
          "type": "scope_types"
        }
      ]
    },
    {
      "name": "scope_types",
      "documentation": "Where can a field appear.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "any",
          "type": "",
          "documentation": "Field can appear anywhere.\n"
        },
        {
          "name": "not_applicable",
          "type": "",
          "documentation": "The notion of scopes does not apply to field.\n"
        },
        {
          "name": "root_module",
          "type": "",
          "documentation": "Field can only appear in the root module.\n"
        },
        {
          "name": "any_module",
          "type": "",
          "documentation": "Field can appear in any module.\n"
        },
        {
          "name": "entity",
          "type": "",
          "documentation": "Field can only appear on an entity.\n"
        },
        {
          "name": "property",
          "type": "",
          "documentation": "Field can only appear on a property of an entity.\n"
        },
        {
          "name": "operation",
          "type": "",
          "documentation": "Field can only appear on an operation in an entity.\n"
        }
      ]
    },
    {
      "name": "building_error",
      "documentation": "An error occurred while the field factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "value_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "type_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "all_types",
          "type": "std::list<type>",
          "documentation": "All the types available, without categorisation.\n"
        },
        {
          "name": "types_by_name",
          "type": "std::unordered_map<std::string, type>",
          "documentation": "Types by qualified name.\n"
        },
        {
          "name": "types_by_facet_name",
          "type": "std::unordered_map<std::string, std::list<type>>",
          "documentation": "Types by facet names, for all models.\n"
        },
        {
          "name": "types_by_formatter_name",
          "type": "std::unordered_map<std::string,std::list<type>>",
          "documentation": "Types by formatter names, for all models.\n"
        },
        {
          "name": "types_by_backend_name",
          "type": "std::unordered_map<std::string, std::list<type>>",
          "documentation": "Types by backend name.\n"
        },
        {
          "name": "partially_matchable_types",
          "type": "std::unordered_map<std::string, type>",
          "documentation": "Types which can be partially matched.\n"
        }
      ]
    },
    {
      "name": "entry_selector",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "annotation_",
          "type": "annotation"
        }
      ]
    },
    {
      "name": "selection_error",
      "documentation": "An error occurred when attempting to select.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "hydration_error",
      "documentation": "An error occurred whilst trying to hydrate field definitions.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "type_templates_hydrator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "type_repository_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "template_kinds",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "instance",
          "type": ""
        },
        {
          "name": "recursive_template",
          "type": "",
          "documentation": "This field applies recursively, from the current level to all below.\n\nThe starting point of the recursion is the level supplied by an archetype location.\n"
        },
        {
          "name": "backend_template",
          "type": "",
          "documentation": "This field applies to all backends.\n"
        },
        {
          "name": "facet_template",
          "type": "",
          "documentation": "This field applies to all facets.\n"
        },
        {
          "name": "archetype_template",
          "type": "",
          "documentation": "This field applies to all archetypes.\n"
        }
      ]
    },
    {
      "name": "template_instantiator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "repository_",
          "type": "archetypes::location_repository"
        }
      ]
    },
    {
      "name": "instantiation_error",
      "documentation": "An error occurred whilst trying to instantiate a field definition template.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "type_repository_selector",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "repository_",
          "type": "type_repository"
        }
      ]
    },
    {
      "name": "number",
      "parents": [
        "value"
      ],
      "documentation": "Field can hold numbers.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "int"
        }
      ]
    },
    {
      "name": "profile",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string"
        },
        {
          "name": "parents",
          "type": "std::list<std::string>"
        },
        {
          "name": "labels",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "templates",
          "type": "std::list<entry_template>"
        }
      ]
    },
    {
      "name": "configuration_templates_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "by_name",
          "type": "std::unordered_map<std::string, profile>"
        }
      ]
    },
    {
      "name": "entry_template",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "name"
        },
        {
          "name": "archetype_location",
          "type": "archetypes::location"
        },
        {
          "name": "untyped_value",
          "type": "std::list<std::string>"
        },
        {
          "name": "kind",
          "type": "template_kinds"
        }
      ]
    },
    {
      "name": "profiler",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "profile_hydrator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "merger",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "type_template",
      "documentation": "Defines a template that can be used to instantiate types.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "name",
          "documentation": "Name of the field to which this definition applies.\n"
        },
        {
          "name": "value_type",
          "type": "value_types",
          "documentation": "Type of the field.\n"
        },
        {
          "name": "scope",
          "type": "scope_types",
          "documentation": "Valid scopes where the type may be present.\n"
        },
        {
          "name": "archetype_location",
          "type": "archetypes::location",
          "documentation": "The archetype location for this type.\n"
        },
        {
          "name": "default_value",
          "type": "boost::shared_ptr<value>",
          "documentation": "Default value for the field, if any.\n"
        },
        {
          "name": "kind",
          "type": "template_kinds",
          "documentation": "If the type is a template, defines the kind of template.\n"
        }
      ]
    },
    {
      "name": "profiling_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "profiler_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "profile",
          "type": "profile"
        },
        {
          "name": "annotation",
          "type": "annotation"
        },
        {
          "name": "merged",
          "type": "bool"
        }
      ]
    },
    {
      "name": "key_value_pair",
      "parents": [
        "value"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "std::unordered_map<std::string, std::string>"
        }
      ]
    },
    {
      "name": "annotation_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "tagged_values": {
        "masd.generation.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object"
    },
    {
      "name": "annotation_expander",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "tagged_values": {
        "masd.generation.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object"
    },
    {
      "name": "configuration_templates_repository_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "unbound_configurations_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "by_name",
          "type": "std::unordered_map<std::string, annotation>"
        }
      ]
    }
  ]
}
