{
  "documentation": "Provides the basic extraction primitives.\n\nThis model is the repository of all extraction related code which is\nnot language specific. Language-specific models can then make use of\nit.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "masd.dogen.extraction",
    "masd.injection.input_language": "cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "masd.dogen.tracing",
    "masd.injection.reference": "masd.dogen.annotations",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.cpp.enabled": "true",
    "masd.extraction.cpp.standard": "c++-17",
    "masd.extraction.cpp.msbuild.enabled": "false",
    "masd.extraction.cpp.visual_studio.project.enabled": "false",
    "masd.extraction.cpp.visual_studio.solution.enabled": "false",
    "masd.extraction.csharp.enabled": "false",
    "masd.annotations.profile": "dogen.disable_common_facets"
  },
  "elements": [
    {
      "name": "modeline",
      "documentation": "Fields representing editor variables for emacs, vi, etc.\n\nA field is a key-value pair (KVP), where name is the first element and its value\nthe second.\n\nExample: -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-\n\nIn this particular case, both prefix and postfix are @e -*-; @e mode is the first\nfield name and its value is @e c++; the KVP separator is @e : and the field\nseparator is @e ;.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string",
          "documentation": "Name of the modeline. Must be unique within a group.\n"
        },
        {
          "name": "editor",
          "type": "editors",
          "documentation": "The modeline will use the syntax for this editor.\n"
        },
        {
          "name": "location",
          "type": "modeline_locations",
          "documentation": "Where to place the modeline.\n"
        },
        {
          "name": "fields",
          "type": "std::list<modeline_field>",
          "documentation": "List of all the parameters in the preamble, in order of appearence.\n"
        }
      ]
    },
    {
      "name": "licence",
      "documentation": "Licence which the file is released under.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "copyright_notices",
          "type": "std::list<std::string>",
          "documentation": "All copyright notices for the current file.\n"
        },
        {
          "name": "text",
          "type": "std::string",
          "documentation": "Complete legal text for the licence.\n"
        }
      ]
    },
    {
      "name": "licence_text_hydrator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "code_generation_marker_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "modeline_group_hydrator",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "modeline_field",
      "documentation": "Entry in a modeline.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string",
          "documentation": "Name of the field.\n"
        },
        {
          "name": "value",
          "type": "std::string",
          "documentation": "Value for the field. Can be empty.\n"
        }
      ]
    },
    {
      "name": "modeline_group",
      "documentation": "Group of modelines, logically associated.\n\nFor example, one may choose to have a set of modelines for @e emacs , or for\n@e vi, etc.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string",
          "documentation": "Name of the modeline group. Must be unique\n"
        },
        {
          "name": "modelines",
          "type": "std::unordered_map<std::string,modeline>",
          "documentation": "All the modelines for this group.\n"
        }
      ]
    },
    {
      "name": "hydration_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "editors",
      "documentation": "Supported editors for modelines.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "emacs",
          "type": "",
          "documentation": "The emacs editor\n"
        },
        {
          "name": "vi",
          "type": "",
          "documentation": "The generic vi editor\n"
        },
        {
          "name": "vim",
          "type": "",
          "documentation": "The vi-like editor vim.\n"
        },
        {
          "name": "ex",
          "type": "",
          "documentation": "The old ex editor.\n"
        }
      ]
    },
    {
      "name": "modeline_locations",
      "documentation": "Location in the file to place the modeline.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "top",
          "type": "",
          "documentation": "Very first line in file.\n"
        },
        {
          "name": "bottom",
          "type": "",
          "documentation": "Very last line in file.\n"
        }
      ]
    },
    {
      "name": "repository_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "modeline_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formatting_error",
      "documentation": "An error has occurred while formatting.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "comment_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "comment_styles",
      "documentation": "Supported styles of comments.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "c_style",
          "type": "",
          "documentation": "Original C programming language style.\n"
        },
        {
          "name": "cpp_style",
          "type": "",
          "documentation": "One line, C++ style.\n"
        },
        {
          "name": "csharp_style",
          "type": "",
          "documentation": "C# programming language style.\n"
        },
        {
          "name": "shell_style",
          "type": "",
          "documentation": "Comments start with a hash.\n"
        },
        {
          "name": "sql_style",
          "type": "",
          "documentation": "Comments start with a double-dash.\n"
        },
        {
          "name": "xml_style",
          "type": ""
        }
      ]
    },
    {
      "name": "decoration_properties",
      "documentation": "Configuration pertaining to file decoration.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "generate_decoration",
          "type": "bool",
          "documentation": "If set to true, the decoration will be generated.\n"
        },
        {
          "name": "modeline",
          "type": "boost::optional<modeline>",
          "documentation": "Modeline to use in this file, if any.\n"
        },
        {
          "name": "licence",
          "type": "boost::optional<licence>",
          "documentation": "Licence to use in this file, if any.\n"
        },
        {
          "name": "code_generation_marker",
          "type": "std::string",
          "documentation": "Code generation marker to use in this file.\n"
        }
      ]
    },
    {
      "name": "indent_filter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "decoration_properties_factory",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "building_error",
      "documentation": "An error occurred while the factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "traits",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "modeline_groups",
          "type": "std::unordered_map<std::string,modeline_group>"
        },
        {
          "name": "licence_texts",
          "type": "std::unordered_map<std::string,std::string>"
        }
      ]
    },
    {
      "name": "utility_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostream"
        }
      ]
    },
    {
      "name": "quote_types",
      "documentation": "Types of quotes that can be used in streaming.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "single_quote",
          "type": ""
        },
        {
          "name": "double_quote",
          "type": ""
        }
      ]
    },
    {
      "name": "spacing_types",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "no_space",
          "type": ""
        },
        {
          "name": "left_space",
          "type": ""
        },
        {
          "name": "right_space",
          "type": ""
        },
        {
          "name": "left_and_right_space",
          "type": ""
        }
      ]
    },
    {
      "name": "cpp",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "cpp::boilerplate_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "cpp::include_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "cpp::header_guard_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "cpp::scoped_boilerplate_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostream"
        },
        {
          "name": "decoration_properties_",
          "type": "boost::optional<decoration_properties>"
        },
        {
          "name": "includes_",
          "type": "std::list<std::string>"
        },
        {
          "name": "header_guard_",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "cpp::namespace_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "cpp::scoped_namespace_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostream"
        },
        {
          "name": "namespaces_",
          "type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": "sequence_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "element_separator_",
          "type": "std::string"
        },
        {
          "name": "sequence_size_",
          "type": "unsigned int"
        }
      ]
    },
    {
      "name": "infix_configuration",
      "documentation": "Configuration to use for a given infix in sequence formatter.\n",
      "stereotypes": [
        "masd::fluent"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "first",
          "type": "std::string",
          "documentation": "Applicable only to the first element of a sequence, if the sequence has more\nthan one element.\n"
        },
        {
          "name": "not_first",
          "type": "std::string",
          "documentation": "Applicable to all elements other than the first.\n"
        },
        {
          "name": "not_last",
          "type": "std::string"
        },
        {
          "name": "last",
          "type": "std::string",
          "documentation": "Only applicable to the last element of a sequence.\n"
        }
      ]
    },
    {
      "name": "decoration_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "decoration_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "generate_decoration",
          "type": "boost::optional<bool>"
        },
        {
          "name": "copyright_notices",
          "type": "std::list<std::string>"
        },
        {
          "name": "licence_name",
          "type": "std::string"
        },
        {
          "name": "modeline_group_name",
          "type": "std::string"
        },
        {
          "name": "marker_add_date_time",
          "type": "boost::optional<bool>"
        },
        {
          "name": "marker_add_warning",
          "type": "boost::optional<bool>"
        },
        {
          "name": "marker_message",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "csharp",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "csharp::boilerplate_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "csharp::scoped_boilerplate_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "csharp::using_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "csharp::scoped_namespace_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "csharp::namespace_formatter",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "helpers::artefact_writer_interface",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::filesystem_writer",
      "parents": [
        "helpers::artefact_writer_interface"
      ],
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::stream_writer",
      "parents": [
        "helpers::artefact_writer_interface"
      ],
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostream"
        }
      ]
    },
    {
      "name": "helpers::writing_error",
      "documentation": "An error ocrurred whilst writing.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model",
      "documentation": "The extraction meta-model captures the entities required\nto transport information from the MASD technical space to\nexternal technical spaces.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "meta_model::model",
      "stereotypes": [
        "Annotatable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string"
        },
        {
          "name": "language",
          "type": "std::string"
        },
        {
          "name": "artefacts",
          "type": "std::list<artefact>"
        },
        {
          "name": "managed_directories",
          "type": "std::list<boost::filesystem::path>"
        },
        {
          "name": "outputting_properties",
          "type": "outputting_properties"
        }
      ]
    },
    {
      "name": "meta_model::artefact",
      "documentation": "Artefact in a text model.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "path",
          "type": "boost::filesystem::path",
          "documentation": "Absolute path to the file, indicating the location in the filesystem where it will be written.\n"
        },
        {
          "name": "content",
          "type": "std::string",
          "documentation": "Content of the file.\n"
        },
        {
          "name": "overwrite",
          "type": "bool",
          "documentation": "Determines when to write the file.\n\nIf true, the file will always be written to the filesystem; if false, the file will\nonly be written to the filesystem if it does not exist.\n"
        },
        {
          "name": "dependencies",
          "type": "std::vector<boost::filesystem::path>",
          "documentation": "Files in the project directory that this file depends on, but which are not generated.\n"
        },
        {
          "name": "unified_diff",
          "type": "std::string",
          "documentation": "Unified diff between the in-memory artefact and the file in the filesystem.\n"
        },
        {
          "name": "operation",
          "type": "operation"
        }
      ]
    },
    {
      "name": "helpers::file_status_collector",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::model_production_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::write_artefacts_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::gather_external_artefacts_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_diffs_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::context",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "tagged_values": {
        "masd.extraction.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "tracer",
          "type": "boost::shared_ptr<tracing::tracer>"
        },
        {
          "name": "diffing_configuration",
          "type": "boost::optional<diffing_configuration>"
        },
        {
          "name": "reporting",
          "type": "boost::optional<reporting_configuration>"
        },
        {
          "name": "dry_run_mode_enabled",
          "type": "bool"
        }
      ]
    },
    {
      "name": "meta_model::operation",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "type",
          "type": "operation_type"
        },
        {
          "name": "reason",
          "type": "operation_reason"
        }
      ]
    },
    {
      "name": "meta_model::operation_type",
      "documentation": "Operation to perform to a given artefact.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "create_only",
          "type": "",
          "documentation": "Creates a file from an artefact only if it does not yet exist.\n"
        },
        {
          "name": "write",
          "type": "",
          "documentation": "Unconditionally writes an artefact into file.\n"
        },
        {
          "name": "ignore",
          "type": "",
          "documentation": "Ingores an artefact.\n"
        },
        {
          "name": "remove",
          "type": "",
          "documentation": "Deletes a file.\n"
        }
      ]
    },
    {
      "name": "meta_model::operation_reason",
      "documentation": "Reasons for performing an operation.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.extraction.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "newly_generated",
          "type": "",
          "documentation": "Artefact will produce a new generated file.\n"
        },
        {
          "name": "changed_generated",
          "type": "",
          "documentation": "Artefact will produce a changed generated file.\n"
        },
        {
          "name": "unchanged_generated",
          "type": "",
          "documentation": "Generated artefact contents match file contents.\n"
        },
        {
          "name": "already_exists",
          "type": "",
          "documentation": "The file already exists and we we're asked to create only.\n"
        },
        {
          "name": "ignore_generated",
          "type": "",
          "documentation": "User requested artefact to be ignored.\n"
        },
        {
          "name": "force_write",
          "type": "",
          "documentation": "User requested to always write generated artefacts.\n"
        },
        {
          "name": "unexpected",
          "type": "",
          "documentation": "Artefact represents an unexpected file in project.\n"
        },
        {
          "name": "ignore_unexpected",
          "type": "",
          "documentation": "File is unexpected but the user asked us not to delete it.\n"
        },
        {
          "name": "ignore_regex",
          "type": "",
          "documentation": "File is unexpected but the user asked us to ignore it via regexes.\n"
        }
      ]
    },
    {
      "name": "transforms::operation_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::remove_files_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_patch_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::mock_content_filler_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::files_by_status",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "unexpected",
          "type": "std::list<boost::filesystem::path>"
        },
        {
          "name": "ignored",
          "type": "std::list<boost::filesystem::path>"
        }
      ]
    },
    {
      "name": "transforms::transform_exception",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::unified_differ",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_report_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::code_generation_chain",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::update_outputting_properties_transform",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::outputting_properties",
      "documentation": "Properties related to outputting.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "force_write",
          "type": "bool"
        },
        {
          "name": "delete_extra_files",
          "type": "bool"
        },
        {
          "name": "ignore_files_matching_regex",
          "type": "std::vector<std::string>"
        },
        {
          "name": "delete_empty_directories",
          "type": "bool"
        }
      ]
    },
    {
      "name": "meta_model::Annotatable",
      "documentation": "Ability to have meta-data associated.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "annotation",
          "type": "annotations::annotation",
          "documentation": "Annotation for this element.\n"
        }
      ]
    }
  ]
}
