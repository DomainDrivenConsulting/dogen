{
  "documentation": "The archetypes model defines the core entities that make up the \narchetype space.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "masd.dogen.archetypes",
    "masd.injection.input_technical_space": "cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "masd",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.delete_empty_directories": "true",
    "masd.generation.cpp.enabled": "true",
    "masd.generation.cpp.standard": "c++-17",
    "masd.generation.cpp.msbuild.enabled": "false",
    "masd.generation.cpp.visual_studio.project.enabled": "false",
    "masd.generation.cpp.visual_studio.solution.enabled": "false",
    "masd.generation.csharp.enabled": "false",
    "masd.annotations.profile": "dogen.disable_common_facets"
  },
  "elements": [
    {
      "name": "archetype_location",
      "documentation": "Location of an archetype or set of archetypes in the hierarchical artchetype space.\n\nThese must be populated in order, e.g. in order to have a backend we must have a\nkernel; in order to have a facet we must have a backend and in order to have a\nformatter we must have a facet. We may not have any.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "kernel",
          "type": "std::string",
          "documentation": "Name of the kernel that owns this field, if any.\n"
        },
        {
          "name": "backend",
          "type": "std::string",
          "documentation": "Name of the backend that owns this field, if any.\n"
        },
        {
          "name": "facet",
          "type": "std::string",
          "documentation": "Name of the facet that owns this field, if any.\n"
        },
        {
          "name": "archetype",
          "type": "std::string",
          "documentation": "Name of the archetype that owns this field, if any.\n"
        }
      ]
    },
    {
      "name": "archetype_location_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "archetype_locations",
          "type": "std::list<archetype_location>"
        },
        {
          "name": "facet_names_by_backend_name",
          "type": "std::unordered_map<std::string, std::unordered_set<std::string>>"
        },
        {
          "name": "formatter_names_by_backend_name",
          "type": "std::unordered_map<std::string, std::unordered_set<std::string>>"
        },
        {
          "name": "archetype_locations_by_meta_name",
          "type": "std::unordered_map<std::string, archetype_locations_group>"
        },
        {
          "name": "archetype_locations_by_family",
          "type": "std::unordered_map<std::string, std::list<archetype_location>>",
          "documentation": "All archetype locations for a given family.\n\nFamilies are backend specific sets of archetype locations, with associated\nproperties such as file extensions.\n"
        },
        {
          "name": "archetypes_by_backend_by_facet",
          "type": "std::unordered_map<std::string, std::unordered_map<std::string, std::list<std::string>>>"
        },
        {
          "name": "archetype_locations_by_intra_backend_segment",
          "type": "std::unordered_map<std::string, std::list<archetype_location>>",
          "documentation": "All archetype locations for a given intra-backend segment.\n\nIntra-backend segments are backend specific sets of archetype locations, with\nassociated properties.\n"
        }
      ]
    },
    {
      "name": "archetype_location_repository_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "archetype_locations_group",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "archetype_locations",
          "type": "std::list<archetype_location>",
          "documentation": "All archetype locations that belong to this group.\n"
        },
        {
          "name": "canonical_archetype_locations",
          "type": "std::unordered_map<std::string, std::string>",
          "documentation": "Maps a concrete archetype location to its canonical form, if the canonical\nform is supported. Otherwise no such mapping will exist.\n"
        }
      ]
    },
    {
      "name": "archetype_location_repository_parts",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "archetype_locations",
          "type": "std::list<archetype_location>",
          "documentation": "All archetype locations for the archetypes owned by this transform,\nlisting all available backends, facets and archetypes.\n"
        },
        {
          "name": "archetype_locations_by_meta_name",
          "type": "std::unordered_map<std::string, archetype_locations_group>",
          "documentation": "Returns the archetype locations for each meta name.\n"
        },
        {
          "name": "archetype_locations_by_family",
          "type": "std::unordered_map<std::string, std::list<archetype_location>>",
          "documentation": "All archetype locations for a given family.\n\nFamilies are backend specific sets of archetype locations, with associated\nproperties such as file extensions.\n"
        },
        {
          "name": "archetype_locations_by_intra_backend_segment",
          "type": "std::unordered_map<std::string, std::list<archetype_location>>",
          "documentation": "All archetype locations for a given intra-backend segment.\n\nIntra-backend segments are backend specific sets of archetype locations, with\nassociated properties.\n"
        }
      ]
    },
    {
      "name": "archetype_location_repository_parts_builder",
      "stereotypes": [
        "masd::handcrafted"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "building_error",
      "documentation": "An error occurred while the field factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    }
  ]
}
