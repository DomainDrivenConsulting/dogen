<#@ masd.stitch.stream_variable_name=a.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::m2t::csharp::transforms::types #>
<#@ masd.stitch.inclusion_dependency=<iostream> #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.csharp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.csharp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.csharp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.m2t.csharp/types/transforms/types/primitive_transform.hpp" #>
<#@ masd.stitch.wale.text_template=csharp_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

physical::entities::artefact primitive_transform::
apply(const context& ctx, const logical::entities::element& e) const {
    const auto id(e.name().qualified().dot());
    assistant a(ctx, e, archetype_location());
    const auto& p(a.as<logical::entities::structural::primitive>(static_id(), e));
    {
        const auto sn(e.name().simple());
        auto sbf(a.make_scoped_boilerplate_formatter(e));
        {
#>
using System;

<#+
            const auto ns(a.make_namespaces(e.name()));
            auto snf(a.make_scoped_namespace_formatter(ns));
            a.comment(e.documentation(), 1/*indent*/);
#>
    public sealed class <#= sn #>
    {
<#+
            if (!ctx.element_properties().helper_properties().empty())
                a.add_helper_methods(id);

            /*
             * Properties
             */
#>
        #region Properties
<#+
            const auto& attr(p.value_attribute());
            a.comment(attr.documentation(), 2/*indent*/);
#>
        public <#= a.get_qualified_name(attr.parsed_type()) #> <#= attr.name().simple() #> { get; <#= (p.is_immutable() ? "internal " : "") #>set; }
        #endregion

<#+
            /*
             * Constructors.
             */
#>
        #region Constructors
        public <#= sn #>() { }
        public <#= sn #>(<#= a.get_qualified_name(attr.parsed_type()) #> <#= a.make_argument_name(attr) #>)
        {
            <#= attr.name().simple() #> = <#= a.make_argument_name(attr) #>;
        }
        #endregion

<#+
            /*
             * Equals
             */
#>
        #region Equality
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;

            var value = obj as <#= sn #>;
            if (value == null) return false;
            return
<#+
             if (attr.parsed_type().is_current_simple_type()) {
                if (attr.parsed_type().is_floating_point()) {
#>
                NearlyEqual(<#= attr.name().simple() #>, value.<#= attr.name().simple() #>);
<#+
                } else {
#>
                <#= attr.name().simple() #> == value.<#= attr.name().simple() #>;
<#+
                }
           } else {
#>
                <#= attr.name().simple() #> != null && value.<#= attr.name().simple() #> != null &&
                <#= attr.name().simple() #>.Equals(value.<#= attr.name().simple() #>);
<#+
            }
#>
        }

        public static bool operator ==(<#= sn #> lhs, <#= sn #> rhs)
        {
            if (Object.ReferenceEquals(lhs, rhs))
                return true;

            return !Object.ReferenceEquals(null, lhs) && lhs.Equals(rhs);
        }

        public static bool operator !=(<#= sn #> lhs, <#= sn #> rhs)
        {
            return !(lhs == rhs);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                // Choose large primes to avoid hashing collisions
                const int HashingBase = (int) 2166136261;
                const int HashingMultiplier = 16777619;

                int hash = HashingBase;
<#+
                if (attr.parsed_type().is_current_simple_type()) {
#>
                hash = (hash * HashingMultiplier) ^ <#= attr.name().simple() #>.GetHashCode();
<#+
                } else {
#>
                hash = (hash * HashingMultiplier) ^
                    (!<#= a.reference_equals(attr) #>.ReferenceEquals(null, <#= attr.name().simple() #>) ? <#= attr.name().simple() #>.GetHashCode() : 0);
<#+
                }
#>
                return hash;
            }
        }
        #endregion
    }
<#+
        } // snf
    } // sbf
    return a.make_artefact();
}
#>
