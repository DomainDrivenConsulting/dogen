// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "dogen/test_models/database/odb/foreign_key-odb.hxx"

#include "dogen/test_models/database/odb/dogen/database/types/primary_key-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy

#include <odb/schema-catalog-impl.hxx>
#include <odb/details/shared-ptr.hxx>

#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/no-id-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/no-id-object-result.hxx>

namespace odb
{
  // foreign_key
  //

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::
  persist_statement_name[] = "dogen_database_foreign_key_persist";

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::
  query_statement_name[] = "dogen_database_foreign_key_query";

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::
  erase_query_statement_name[] = "dogen_database_foreign_key_erase_query";

  const unsigned int access::object_traits< ::dogen::test_models::database::foreign_key >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid
  };

  bool access::object_traits< ::dogen::test_models::database::foreign_key >::
  grow (image_type& i, bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // prop_0_
    //
    t[0UL] = 0;

    // prop_1_
    //
    t[1UL] = 0;

    return grew;
  }

  void access::object_traits< ::dogen::test_models::database::foreign_key >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // prop_0_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.prop_0_value;
    b[n].is_null = &i.prop_0_null;
    n++;

    // prop_1_
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.prop_1_value;
    b[n].is_null = &i.prop_1_null;
    n++;
  }

  bool access::object_traits< ::dogen::test_models::database::foreign_key >::
  init (image_type& i, const object_type& o, pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // prop_0_
    //
    {
      unsigned int const& v =
        o.prop_0 ();

      bool is_null (false);
      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_image (
        i.prop_0_value, is_null, v);
      i.prop_0_null = is_null;
    }

    // prop_1_
    //
    {
      ::boost::shared_ptr< ::dogen::test_models::database::primary_key > const& v =
        o.prop_1 ();

      typedef object_traits< ::dogen::test_models::database::primary_key > obj_traits;
      typedef odb::pointer_traits< ::boost::shared_ptr< ::dogen::test_models::database::primary_key > > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_integer >::set_image (
          i.prop_1_value, is_null, id);
        i.prop_1_null = is_null;
      }
      else
        i.prop_1_null = true;
    }

    return grew;
  }

  void access::object_traits< ::dogen::test_models::database::foreign_key >::
  init (object_type& o, const image_type& i, database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // prop_0_
    //
    {
      unsigned int v;

      pgsql::value_traits<
          unsigned int,
          pgsql::id_integer >::set_value (
        v,
        i.prop_0_value,
        i.prop_0_null);

      o.prop_0 (v);
    }

    // prop_1_
    //
    {
      ::boost::shared_ptr< ::dogen::test_models::database::primary_key >& v =
        o.prop_1 ();

      typedef object_traits< ::dogen::test_models::database::primary_key > obj_traits;
      typedef odb::pointer_traits< ::boost::shared_ptr< ::dogen::test_models::database::primary_key > > ptr_traits;

      if (i.prop_1_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_integer >::set_value (
          id,
          i.prop_1_value,
          i.prop_1_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          db->load< obj_traits::object_type > (id));
      }
    }
  }

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::persist_statement[] =
  "INSERT INTO \"kitanda\".\"foreign_key\" ("
  "\"prop_0\","
  "\"prop_1\")"
  " VALUES ($1,$2)";

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::query_statement[] =
  "SELECT "
  "\"kitanda\".\"foreign_key\".\"prop_0\","
  "\"kitanda\".\"foreign_key\".\"prop_1\""
  " FROM \"kitanda\".\"foreign_key\""
  " ";

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::erase_query_statement[] =
  "DELETE FROM \"kitanda\".\"foreign_key\""
  " ";

  const char access::object_traits< ::dogen::test_models::database::foreign_key >::table_name[] =
  "\"kitanda\".\"foreign_key\"";

  void access::object_traits< ::dogen::test_models::database::foreign_key >::
  persist (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              obj,
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    callback (db,
              obj,
              callback_event::post_persist);
  }

  result< access::object_traits< ::dogen::test_models::database::foreign_key >::object_type >
  access::object_traits< ::dogen::test_models::database::foreign_key >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        query_statement + q.clause (),
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::no_id_object_result_impl<object_type> > r (
      new (shared) pgsql::no_id_object_result_impl<object_type> (
        q, st, sts));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits< ::dogen::test_models::database::foreign_key >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    delete_statement st (
      conn,
      erase_query_statement_name,
      erase_query_statement + q.clause (),
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }

  bool access::object_traits< ::dogen::test_models::database::foreign_key >::
  create_schema (database& db, unsigned short pass, bool drop)
  {
    ODB_POTENTIALLY_UNUSED (db);
    ODB_POTENTIALLY_UNUSED (pass);
    ODB_POTENTIALLY_UNUSED (drop);

    if (drop)
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("DROP TABLE IF EXISTS \"kitanda\".\"foreign_key\" CASCADE");
          return false;
        }
      }
    }
    else
    {
      switch (pass)
      {
        case 1:
        {
          db.execute ("CREATE TABLE \"kitanda\".\"foreign_key\" (\n"
                      "  \"prop_0\" INTEGER NOT NULL,\n"
                      "  \"prop_1\" INTEGER)");
          return true;
        }
        case 2:
        {
          db.execute ("ALTER TABLE \"kitanda\".\"foreign_key\" ADD\n"
                      "  CONSTRAINT \"prop_1_fk\"\n"
                      "    FOREIGN KEY (\"prop_1\")\n"
                      "    REFERENCES \"kitanda\".\"primary_key\" (\"prop_0\")\n"
                      "    INITIALLY DEFERRED");
          return false;
        }
      }
    }

    return false;
  }

  static const schema_catalog_entry
  schema_catalog_entry_dogen_database_foreign_key_ (
    "",
    &access::object_traits< ::dogen::test_models::database::foreign_key >::create_schema);
}

#include <odb/post.hxx>
