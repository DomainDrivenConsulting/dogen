<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::visual_studio #>
<#@ masd.stitch.inclusion_dependency=<boost/make_shared.hpp> #>
<#@ masd.stitch.inclusion_dependency="dogen.utility/types/log/logger.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/visual_studio/msbuild_targets.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text/types/formatters/sequence_formatter.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/visual_studio/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/formatting_error.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/visual_studio/msbuild_targets_transform.hpp" #>
<#+

physical::entities::archetype msbuild_targets_transform::static_archetype() const {
    static physical::entities::archetype r([]() {
        physical::entities::archetype r;
        using pmnf = physical::helpers::meta_name_factory;
        r.meta_name(pmnf::make(cpp::traits::backend_sn(),
            traits::facet_sn(), traits::msbuild_targets_archetype_sn()));
        using lmnf = logical::helpers::meta_name_factory;
        r.logical_meta_element_id(lmnf::make_visual_studio_msbuild_targets_name().qualified().dot());
        return r;
    }());
    return r;
}

physical::entities::archetype msbuild_targets_transform::archetype() const {
    return static_archetype();
}

inclusion_support_types
msbuild_targets_transform::inclusion_support_type() const {
    return inclusion_support_types::not_supported;
}

boost::filesystem::path msbuild_targets_transform::inclusion_path(
    const formattables::locator& /*l*/, const logical::entities::name& n) const {

    using namespace dogen::utility::log;
    using namespace dogen::text::cpp::transforms;
    static logger lg(logger_factory(archetype().meta_name().qualified()));

    static const std::string not_supported("Inclusion path is not supported: ");

    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();
    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));
}

boost::filesystem::path msbuild_targets_transform::full_path(
    const formattables::locator& l, const logical::entities::name& n) const {
    return l.make_full_path_for_msbuild_targets(n, archetype().meta_name().qualified());
}

std::list<std::string> msbuild_targets_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& /*f*/,
    const logical::entities::element& /*e*/) const {
    static std::list<std::string> r;
    return r;
}

void msbuild_targets_transform::apply(const context& ctx, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    assistant ast(ctx, e, archetype().meta_name(), false/*requires_header_guard*/, a);
    using logical::entities::visual_studio::msbuild_targets;
    const auto& c(ast.as<msbuild_targets>(e));

    {
        const auto ts(logical::entities::technical_space::xml);
        ast.make_decoration_preamble(e, ts);
        const auto model_name(ast.get_identifiable_model_name(c.name()));
        const auto product_name(ast.get_product_name(c.name()));
        const auto targets(c.odb_targets());
#>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">

    <!--[
        .NAME: odb.targets

        .SYNOPSIS:
            Generates all of the ODB files for this project.

        .DESCRIPTION:
            Calls the ODB compiler against each of the files in this Dogen model that require
            ODB compilation. Also moves the generated files to their correct location.

        .INPUTS:

        .OUTPUTS:
    ]-->
    <Target Name="<#= targets.main_target_name() #>"
<#+
            text::formatters::sequence_formatter sf(targets.targets().size());
            sf.prefix_configuration().first("          DependsOnTargets=\"")
                                     .not_first("                            ");
            sf.postfix_configuration().last("\">");
            sf.element_separator(";");
            for (const auto& target : targets.targets()) {
#>
<#= sf.prefix() #><#= target.name() #><#= sf.postfix() #>
<#+
                sf.next();
            }
#>
        <Message Importance="high" Text="ODB <#= model_name #> "/>
    </Target>

<#+
            for (const auto& target : targets.targets()) {
#>
    <Target Name="<#= target.name() #>">
        <Message Importance="high" Text="<#= target.comment() #>"/>
        <Exec WorkingDirectory="$(OutputDirectory)" Command="&quot;$(OdbPath)&quot; -D_SECURE_SCL=0 $(OdbIncludeDirectories) --options-file $(MSBuildThisFileDirectory)<#= targets.common_odb_options() #> --options-file $(MSBuildThisFileDirectory)<#= target.object_odb_options() #> --output-dir $(MSBuildThisFileDirectory)<#= target.output_directory() #> $(MSBuildThisFileDirectory)<#= target.types_file() #>" />
<#+
                for (const auto& pair : target.move_parameters()) {
#>
        <Move
            SourceFiles="$(MSBuildThisFileDirectory)<#= pair.first #>"
            DestinationFolder="$(MSBuildThisFileDirectory)<#= pair.second #>" />
<#+
                }
#>
    </Target>
<#+
            }
#>
</Project>
<#+
    } // sbf
    ast.update_artefact();
}
#>
