<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::io #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/io/pair_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.helper.family=Pair #>
<#@ masd.stitch.wale.kvp.class.simple_name=pair_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void pair_helper::apply(assistant& ast, const logical::entities::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(ast.make_scoped_namespace_formatter(d.namespaces()));
        const auto first(hp.direct_descendants().front());
        const auto second(hp.direct_descendants().back());
#>

inline std::ostream& operator<<(std::ostream& s, const <#= nt_qn #>& v) {
    s << "{ " << "\"__type__\": " << "\"<#= n_qn #>\"" << ", ";

    s << "\"first\": " << <#= ast.streaming_for_type(first, "v.first") #> << ", ";
    s << "\"second\": " << <#= ast.streaming_for_type(second, "v.second") #>;
    s << " }";
    return s;
}

<#+
    }
#>

<#+
}
#>
