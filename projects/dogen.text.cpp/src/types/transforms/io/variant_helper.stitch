<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::io #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/io/variant_helper.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/io/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/formattables/helper_properties.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation.wale #>
<#@ masd.stitch.wale.kvp.helper.family=BoostVariant #>
<#@ masd.stitch.wale.kvp.class.simple_name=variant_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void variant_helper::apply(assistant& ast, const formattables::helper_properties& hp) const {
    {
        const auto d(hp.current());
        const auto nt_qn(d.name_tree_qualified());
        const auto n_qn(d.name_qualified());
        auto snf(ast.make_scoped_namespace_formatter(d.namespaces()));
#>

struct <#= d.name_tree_identifiable() #>_visitor : public boost::static_visitor<> {
    <#= d.name_tree_identifiable() #>_visitor(std::ostream& s) : stream_(s) {
        s << "{ " << "\"__type__\": " << "\"<#= d.name_qualified() #>\"" << ", ";
        s << "\"data\": ";
    }

    ~<#= d.name_tree_identifiable() #>_visitor() { stream_ << " }"; }
<#+
        for (const auto& dd : hp.direct_descendants()) {
#>

    void operator()(const <#= dd.name_qualified() #><#= (dd.is_simple_type() ? "" : "&") #> v) const {
<#+
            if (dd.is_simple_type()) {
#>
        stream_ << "{ " << "\"__type__\": " << "\"<#= dd.name_qualified() #>\"" << ", ";
        stream_ << "\"value\": ";
        stream_ << <#= ast.streaming_for_type(dd, "v") #>;
        stream_ << " }";
<#+
            } else
#>
        stream_ << <#= ast.streaming_for_type(dd, "v") #>;
    }
<#+
        }
#>

private:
    std::ostream& stream_;
};

inline std::ostream& operator<<(std::ostream& s, const <#= d.name_tree_qualified() #>& v) {
    boost::apply_visitor(<#= d.name_tree_identifiable() #>_visitor(s), v);
    return s;
}

<#+
    }
#>

<#+
}
#>
