<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::types #>
<#@ masd.stitch.inclusion_dependency="dogen.physical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/structural/primitive.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/helpers/meta_name_factory.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/types/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/serialization/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/inclusion_constants.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/types/primitive_header_transform.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_artefact_transform_implementation_header.wale #>
<#@ masd.stitch.wale.kvp.class.simple_name=primitive_header_transform #>
<#@ masd.stitch.wale.kvp.archetype.simple_name=primitive_header #>
<#@ masd.stitch.wale.kvp.class.inclusion_support_type=canonical_support #>
<#@ masd.stitch.wale.kvp.yarn_element=logical::entities::structural::primitive #>
<#@ masd.stitch.wale.kvp.meta_element=primitive #>
<#@ masd.stitch.wale.kvp.meta_name_factory=logical::helpers::meta_name_factory #>
<#$ stitch.wale.template_instantiation_result #>
<#+

std::list<std::string> primitive_header_transform::inclusion_dependencies(
    const formattables::dependencies_builder_factory& f,
    const logical::entities::element& e) const {

    using logical::entities::structural::primitive;
    const auto& p(assistant::as<primitive>(e));
    auto builder(f.make());

    // algorithm: domain headers need it for the swap function.
    builder.add(inclusion_constants::std::algorithm());

    using ser = transforms::serialization::traits;
    const auto ser_fwd_arch(ser::primitive_forward_declarations_archetype_qn());
    builder.add(p.name(), ser_fwd_arch);

    const auto carch(traits::canonical_archetype());
    builder.add(p.value_attribute().parsed_type().current(), carch);

    return builder.build();
}

void primitive_header_transform::apply(const context& ctx, const logical::entities::element& e,
    physical::entities::artefact& a) const {
    assistant ast(ctx, e, archetype().meta_name(), true/*requires_header_guard*/, a);
    const auto& p(ast.as<logical::entities::structural::primitive>(e));

    const auto sn(p.name().simple());
    const auto qn(ast.get_qualified_name(p.name()));
    {

        auto sbf(ast.make_scoped_boilerplate_formatter(e));
        {
            const auto ns(ast.make_namespaces(p.name()));
            auto snf(ast.make_scoped_namespace_formatter(ns));
            const auto attr(p.value_attribute());

            ast.comment(p.documentation());
#>
class <#= sn #> final {
public:
<#+
            /*
             * Compiler generated constructors and destructors.
             */
            if (!ast.requires_manual_default_constructor())
#>
    <#= sn #>() = default;
    <#= sn #>(const <#= sn #>&) = default;
<#+
            if (!ast.requires_manual_move_constructor())
#>
    <#= sn #>(<#= sn #>&&) = default;
    ~<#= sn #>() = default;
<#+
            if (p.is_immutable())
#>
    <#= sn #>& operator=(const <#= sn #>&) = delete;
<#+
            /*
             * Manually generated default constructor.
             */
            if (ast.requires_manual_default_constructor()) {
#>
public:
    <#= sn #>();

<#+
            }

            /*
             * Manually generated move constructor.
             */
            if (ast.requires_manual_move_constructor()) {
#>
public:
    <#= sn #>(<#= sn #>&& rhs);

<#+
            }

            /*
             * Manually generated complete constructor.
             */
#>
public:
    explicit <#= sn #>(const <#= ast.get_qualified_name(attr.parsed_type()) #><#= ast.make_by_ref_text(attr) #> <#= attr.name().simple() #>);

<#+
            /*
             * Serialisaton Friends
             */
            if (ast.is_serialization_enabled()) {
#>
private:
    template<typename Archive>
    friend void boost::serialization::save(Archive& ar, const <#= qn #>& v, unsigned int version);

    template<typename Archive>
    friend void boost::serialization::load(Archive& ar, <#= qn #>& v, unsigned int version);

<#+
            }

            /*
             * Getters and setters.
             */
#>
public:
<#+
            ast.comment_start_method_group(attr.documentation(), !attr.is_immutable());
            if (attr.parsed_type().is_current_simple_type()) {
#>
    <#= ast.get_qualified_name(attr.parsed_type()) #> <#= attr.name().simple() #>() const;
<#+
                if (attr.is_immutable()) {
#>

<#+

                } else {
#>
    <#= ast.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= ast.get_qualified_name(attr.parsed_type()) #><#= ast.make_by_ref_text(attr) #> v);
<#+
                }
            } else {
#>
    const <#= ast.get_qualified_name(attr.parsed_type()) #>& <#= attr.name().simple() #>() const;
<#+
                if (attr.is_immutable()) {
#>

<#+
                } else {
#>
    <#= ast.get_qualified_name(attr.parsed_type()) #><#= ast.make_by_ref_text(attr) #> <#= attr.name().simple() #>();
    <#= ast.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= ast.get_qualified_name(attr.parsed_type()) #><#= ast.make_by_ref_text(attr) #> v);
    <#= ast.make_setter_return_type(sn, attr) #> <#= attr.name().simple() #>(const <#= ast.get_qualified_name(attr.parsed_type()) #>&& v);
<#+
                }
            }
            ast.comment_end_method_group(attr.documentation(), !attr.is_immutable());

            /*
             * Explicit cast.
             */
#>

public:
    explicit operator <#= ast.get_qualified_name(attr.parsed_type()) #>() const {
        return <#= attr.member_variable_name() #>;
    }
<#+
            /*
             * Equality.
             */
#>

public:
    bool operator==(const <#= sn #>& rhs) const;
    bool operator!=(const <#= sn #>& rhs) const {
        return !this->operator==(rhs);
    }

<#+
            /*
             * Swap and assignment.
             */
#>
public:
    void swap(<#= sn #>& other)<#= ast.make_noexcept_keyword_text() #>;
<#+
            if (!p.is_immutable()) {
#>
    <#= sn #>& operator=(<#= sn #> other);
<#+
            }

            /*
             * Member variables.
             */
#>

private:
    <#= ast.get_qualified_name(attr.parsed_type()) #> <#= attr.member_variable_name() #>;
};

<#+
        } // snf

        if (!p.is_immutable()) {
#>

namespace std {

template<>
inline void swap(
    <#= qn #>& lhs,
    <#= qn #>& rhs) {
    lhs.swap(rhs);
}

}
<#+
        }
#>

<#+
    } //ah  sbf
    ast.update_artefact();
}

#>
