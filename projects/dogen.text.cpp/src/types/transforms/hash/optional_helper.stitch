<#@ masd.stitch.stream_variable_name=ast.stream() #>
<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::hash #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/hash/traits.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/assistant.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.logical/types/entities/helper_properties.hpp" #>
<#@ masd.stitch.inclusion_dependency="dogen.text.cpp/types/transforms/hash/optional_helper.hpp" #>
<#@ masd.stitch.wale.text_template=cpp_helper_transform_implementation_enabled.wale #>
<#@ masd.stitch.wale.kvp.helper.family=Optional #>
<#@ masd.stitch.wale.kvp.class.simple_name=optional_helper #>
<#$ stitch.wale.template_instantiation_result #>
<#+

void optional_helper::
apply(assistant& ast, const logical::entities::helper_properties& hp) const {
    const auto d(hp.current());
    const auto qn(d.name_tree_qualified());
    const auto ident(d.name_tree_identifiable());
    const auto containee(hp.direct_descendants().front());
#>

inline std::size_t hash_<#= ident #>(const <#= qn #>& v) {
    std::size_t seed(0);

    if (!v)
        return seed;

<#+
    if (!containee.requires_hashing_helper())
#>
    combine(seed, *v);
<#+
    else
#>
    combine(seed, hash_<#= containee.name_tree_identifiable() #>(*v));
    return seed;
}
<#+
}
#>
