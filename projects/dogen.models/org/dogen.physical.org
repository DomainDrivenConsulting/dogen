#+title: dogen.physical
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.physical
:masd.codec.input_technical_space: cpp
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.std
:masd.codec.reference: cpp.boost
:masd.codec.reference: dogen.tracing
:masd.codec.reference: dogen.variability
:masd.codec.reference: dogen
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

The pysical model defines the core entities that make up the
physical dimension of MASD conceptual space.

* main
:PROPERTIES:
:masd.codec.stereotypes: masd::entry_point, dogen::untypable
:END:
* CMakeLists
:PROPERTIES:
:masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
:END:
* helpers
:PROPERTIES:
:masd.codec.dia.comment: true
:END:

Helpers for the physical model.

** helpers::template_instantiation_domains_factory
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::building_error
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:

An error occurred while the field factory was building.

** helpers::path_generator
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::file_status_collector
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::files_by_status
*** unexpected
:PROPERTIES:
:masd.codec.type: std::list<boost::filesystem::path>
:END:
*** ignored
:PROPERTIES:
:masd.codec.type: std::list<boost::filesystem::path>
:END:
** helpers::unified_differ
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::meta_model_validator
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::validation_error
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:

An error occurred during validation.

* entities
:PROPERTIES:
:masd.codec.dia.comment: true
:END:

Defines the MASD physical space.

** entities::meta_model
:PROPERTIES:
:masd.codec.stereotypes: ContainingMetaElement
:END:

Describes the geomtry of physical space.

Provides details of the backends available in the current instance of Dogen.

*** template_instantiation_domains
:PROPERTIES:
:masd.codec.type: std::unordered_map<std::string, std::vector<std::string>>
:END:

Provides all of the domains to be used for template instantiation.

Example of a domain is "masd.facet" which contains the list of all available facets.
Templates (facet and profile) are then instantiated over this range, depending on
user choices.

*** backends
:PROPERTIES:
:masd.codec.type: std::list<backend>
:END:

All backends available in this meta-model.

*** indexed_names
:PROPERTIES:
:masd.codec.type: identification::entities::physical_meta_name_indices
:END:

Repository with all the meta-names in this meta-model, indexed appropriately.

** entities::backend
:PROPERTIES:
:masd.codec.stereotypes: ContainingMetaElement
:END:

Code generation backend, targeting a given technical space.

*** parts
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, part>
:END:
*** facets
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet>
:END:
*** archetypes
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
:END:
*** archetype_kinds
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype_kind>
:END:
** entities::part
:PROPERTIES:
:masd.codec.stereotypes: ContainingMetaElement
:END:
*** path_configuration
:PROPERTIES:
:masd.codec.type: path_configuration
:END:
*** facets
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet>
:END:
*** archetypes
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
:END:
*** requires_relative_path
:PROPERTIES:
:masd.codec.type: bool
:END:

If true, this part needs a path relative to its root.

** entities::path_configuration
Describes how paths are handled within a part.

*** external_modules
:PROPERTIES:
:masd.codec.type: path_contribution_type
:END:

What kind of contribution do the external modules make to the final path.

*** model_modules
:PROPERTIES:
:masd.codec.type: path_contribution_type
:END:

What kind of contribution do the model modules make to the final path.

*** facet
:PROPERTIES:
:masd.codec.type: path_contribution_type
:END:

What kind of contribution does the facet make to the final path.

*** internal_modules
:PROPERTIES:
:masd.codec.type: path_contribution_type
:END:

What kind of contribution do the internal modules make to the final path.

** entities::path_contribution_type
:PROPERTIES:
:masd.codec.stereotypes: masd::enumeration
:END:

Different kinds of contributions that can be made to the final path computation.

*** none
The item does not contribute at all to the path.

*** as_directories
The item contributes folders to the path.

*** as_path_components
The item contributes a single folder to the path, as a delimited string.

** entities::facet
:PROPERTIES:
:masd.codec.stereotypes: ContainingMetaElement, Postfixable
:END:
*** archetypes
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype>
:END:
*** default_archetype_for_logical_meta_model_id
:PROPERTIES:
:masd.codec.type: std::unordered_map<std::string, archetype>
:END:

Maps the logical model element ID to the default archetype for this facet.

Used to obtain the default archetype for referencing.

** entities::archetype
:PROPERTIES:
:masd.codec.stereotypes: MetaElement, Postfixable, Associatable
:END:

Represents a meta-artefact.

*** archetype_kind_id
:PROPERTIES:
:masd.codec.type: std::string
:END:

ID for the archetype kind that this archetype is an instance of.

*** logical_meta_element_id
:PROPERTIES:
:masd.codec.type: identification::entities::logical_meta_id
:END:

ID of the meta-element in the logical model this archetype binds to.

*** part
:PROPERTIES:
:masd.codec.type: identification::entities::physical_id
:END:

Part in which we are located.

*** relations
:PROPERTIES:
:masd.codec.type: relations
:END:

Properties of this archetype with regards to relations.

** entities::archetype_kind
:PROPERTIES:
:masd.codec.stereotypes: Describable
:END:
*** id
:PROPERTIES:
:masd.codec.type: std::string
:END:
*** file_extension
:PROPERTIES:
:masd.codec.type: std::string
:END:
** entities::model
:PROPERTIES:
:masd.codec.stereotypes: Element, ArtefactContainer
:END:

Collection of entities representing objects in physical space.

*** technical_space
:PROPERTIES:
:masd.codec.type: std::string
:END:

Primary technical space that this model belongs to.

*** managed_directories
:PROPERTIES:
:masd.codec.type: std::list<boost::filesystem::path>
:END:
*** outputting_properties
:PROPERTIES:
:masd.codec.type: outputting_properties
:END:
*** orphan_artefacts
:PROPERTIES:
:masd.codec.type: std::list<boost::shared_ptr<physical::entities::artefact>>
:END:

Artefacts that exist in the physical dimension only.

** entities::Describable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:
*** description
:PROPERTIES:
:masd.codec.type: std::string
:END:

Human readable description of the entity.

** entities::MetaNameable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

Ability to have a meta-name.

*** meta_name
:PROPERTIES:
:masd.codec.type: identification::entities::physical_meta_name
:END:

Meta-name for this meta-element.

** entities::Labelable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

The ability to attach labels to an element.

*** labels
:PROPERTIES:
:masd.codec.type: std::list<identification::entities::label>
:END:

All labels associated with this element.

** entities::MetaElement
:PROPERTIES:
:masd.codec.parent: entities::Describable, entities::MetaNameable, entities::Labelable
:masd.codec.stereotypes: masd::object_template
:END:
** entities::ContainingMetaElement
:PROPERTIES:
:masd.codec.parent: entities::MetaElement
:masd.codec.stereotypes: masd::object_template
:END:
*** default_directory_name
:PROPERTIES:
:masd.codec.type: std::string
:END:

Default directory name.

*** override_directory_name
:PROPERTIES:
:masd.codec.type: std::string
:END:

Override directory name, if any.

** entities::Postfixable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:
*** default_postfix
:PROPERTIES:
:masd.codec.type: std::string
:END:

Default postfix for the element.

*** override_postfix
:PROPERTIES:
:masd.codec.type: std::string
:END:

Overridden postfix, if any.

** entities::artefact
:PROPERTIES:
:masd.codec.stereotypes: Element
:END:

Represents an entity in physical space.

*** content
:PROPERTIES:
:masd.codec.type: std::string
:END:

#+begin_src mustache
Content of the file.

#+end_src
*** enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** overwrite
:PROPERTIES:
:masd.codec.type: bool
:END:
*** relative_paths
:PROPERTIES:
:masd.codec.type: std::unordered_map<std::string, boost::filesystem::path>
:END:

Paths relative to the path ID that keys the container.

*** dependencies
:PROPERTIES:
:masd.codec.type: std::vector<boost::filesystem::path>
:END:

Files in the project directory that this file depends on, but which are not generated.

*** relations
:PROPERTIES:
:masd.codec.type: std::list<std::string>
:END:

Artefacts that this artefact depends on.

The format used is dependent on the technical space the artefact belongs to.

*** unified_diff
:PROPERTIES:
:masd.codec.type: std::string
:END:

Unified diff between the in-memory artefact and the file in the filesystem.

*** operation
:PROPERTIES:
:masd.codec.type: operation
:END:
*** artefact_properties
:PROPERTIES:
:masd.codec.type: artefact_properties
:END:
*** enablement_properties
:PROPERTIES:
:masd.codec.type: enablement_properties
:END:
** entities::Configurable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

Ability to have meta-data associated.

*** configuration
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<variability::entities::configuration>
:END:

Configuration for this element.

** entities::Provenance
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

Properties related to the origin of the modeling element.

*** provenance
:PROPERTIES:
:masd.codec.type: identification::entities::logical_provenance
:END:

Details of the provenance of this model element.

** entities::Nameable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

Ability to have a name.

*** name
:PROPERTIES:
:masd.codec.type: identification::entities::physical_name
:END:

Name of the physical element.

** entities::Element
:PROPERTIES:
:masd.codec.parent: entities::MetaNameable, entities::Configurable, entities::Provenance, entities::Nameable
:masd.codec.stereotypes: masd::object_template
:END:
** entities::outputting_properties
Properties related to outputting.

*** force_write
:PROPERTIES:
:masd.codec.type: bool
:END:
*** delete_extra_files
:PROPERTIES:
:masd.codec.type: bool
:END:
*** ignore_files_matching_regex
:PROPERTIES:
:masd.codec.type: std::vector<std::string>
:END:
*** delete_empty_directories
:PROPERTIES:
:masd.codec.type: bool
:END:
** entities::operation
Operation to apply to an artefact.

*** type
:PROPERTIES:
:masd.codec.type: operation_type
:END:
*** reason
:PROPERTIES:
:masd.codec.type: operation_reason
:END:
** entities::operation_type
:PROPERTIES:
:masd.cpp.hash.enabled: true
:masd.codec.stereotypes: masd::enumeration
:END:

Operation to perform to a given artefact.

*** create_only
Creates a file from an artefact only if it does not yet exist.

*** write
Unconditionally writes an artefact into file.

*** ignore
Ingores an artefact.

*** remove
Deletes a file.

** entities::operation_reason
:PROPERTIES:
:masd.cpp.hash.enabled: true
:masd.codec.stereotypes: masd::enumeration
:END:

Reasons for performing an operation.

*** newly_generated
Artefact will produce a new generated file.

*** changed_generated
Artefact will produce a changed generated file.

*** unchanged_generated
Generated artefact contents match file contents.

*** already_exists
The file already exists and we we're asked to create only.

*** ignore_generated
User requested artefact to be ignored.

*** force_write
User requested to always write generated artefacts.

*** unexpected
Artefact represents an unexpected file in project.

*** ignore_unexpected
File is unexpected but the user asked us not to delete it.

*** ignore_regex
File is unexpected but the user asked us to ignore it via regexes.

** entities::Associatable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

The meta-element is associated with other meta-elements

*** depends
:PROPERTIES:
:masd.codec.type: std::list<std::string>
:END:

List of meta-elements this meta-element depends upon, if any.

*** generates
:PROPERTIES:
:masd.codec.type: std::list<std::string>
:END:

List of meta-elements this meta-element is used to generate, if any.

*** generated_by
:PROPERTIES:
:masd.codec.type: std::string
:END:

Meta-element used to generate this meta-element, if any.

** entities::model_set
:PROPERTIES:
:masd.codec.stereotypes: Nameable
:END:

Represents a set of related physical models.

*** models
:PROPERTIES:
:masd.codec.type: std::list<model>
:END:

All models that are a member of this set.

** entities::relation_status
:PROPERTIES:
:masd.codec.stereotypes: masd::enumeration
:END:

Status of a given archetype with regards to being related to other archetypes.

*** not_relatable
Archertype cannot be legally related to other archetypes.

*** relatable
Archetype can be related to archetypes.

*** facet_default
FIXME: hack for now

** entities::constant_relation
:PROPERTIES:
:masd.codec.stereotypes: Urnable, Labelable
:END:

Represents a relation between archetypes, fixed to a logical model element.

*** logical_model_element_id
:PROPERTIES:
:masd.codec.type: std::string
:END:

ID of the logical model element that the relation is fixed against.

Element must exist in the current loaded models.

** entities::variable_relation
:PROPERTIES:
:masd.codec.stereotypes: Urnable
:END:
*** type
:PROPERTIES:
:masd.codec.type: variable_relation_type
:END:

How these archetypes are related.

** entities::Urnable
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:
*** original_urn
:PROPERTIES:
:masd.codec.type: std::string
:END:

URN which may or may not be an archetype URN.

 It must have the form "archetype:" if pointing to an archetype, or  "label:" if 
pointing to a label, and then is followed by "KEY:VALUE". The label must resolve
to a unique archetype.

*** resolved_urn
:PROPERTIES:
:masd.codec.type: std::string
:END:

URN pointing to the archetype.

 It must have the form "archetype:".

** entities::variable_relation_type
:PROPERTIES:
:masd.codec.stereotypes: masd::enumeration
:END:

Lists all of the valid variable relation types.

*** self
Logical element is related to itself across different projections.

*** parent
Parent of logical element.

*** child
Child of logical element.

*** transparent
The relation with another logical element requires the element's full definition.

*** opaque
The relation with another logical element does not requires its full definition.

*** associative_key
The associated element is used as an associative key.

*** visitation
The associated element visits or is visited by the current element.

** entities::relations
Models relationships between archetypes.

*** status
:PROPERTIES:
:masd.codec.type: relation_status
:END:

Status of this archetype with regards to being related to archetypes.

*** constant
:PROPERTIES:
:masd.codec.type: std::list<constant_relation>
:END:

All archetypes this archetype is related to,  over a fixed logical meta-model
element.

*** variable
:PROPERTIES:
:masd.codec.type: std::list<variable_relation>
:END:

All archetypes this archetype is related to,  over a variable logical meta-model
element.

*** hard_coded
:PROPERTIES:
:masd.codec.type: std::list<hard_coded_relation>
:END:
** entities::hard_coded_relation
Relations against hard-coded values.

*** value
:PROPERTIES:
:masd.codec.type: std::string
:END:
** entities::artefact_set
:PROPERTIES:
:masd.codec.stereotypes: Configurable, Provenance
:END:

Represents a slice of logical-physical space fixed at one logical point.

*** artefacts_by_archetype
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, boost::shared_ptr<physical::entities::artefact>>
:END:

All artefacts that are contained within this set, organised by archetype.

*** archetype_for_role
:PROPERTIES:
:masd.codec.type: std::unordered_map<std::string, identification::entities::physical_meta_id>
:END:

Resolves a role into a concrete archetype, in the context of this logical element.

*** is_generatable
:PROPERTIES:
:masd.codec.type: bool
:END:

If false, the entire artefact set is not generatable.

** entities::artefact_properties
*** enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** overwrite
:PROPERTIES:
:masd.codec.type: bool
:END:
*** file_path
:PROPERTIES:
:masd.codec.type: boost::filesystem::path
:END:
*** formatting_style
:PROPERTIES:
:masd.codec.type: formatting_styles
:END:
*** formatting_input
:PROPERTIES:
:masd.codec.type: std::string
:END:
** entities::formatting_styles
:PROPERTIES:
:masd.codec.stereotypes: masd::enumeration
:END:
*** stock
*** wale
*** stitch
** entities::enablement_properties
*** facet_enabled
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
*** archetype_enabled
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
*** facet_overwrite
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
*** archetype_overwrite
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
** entities::artefact_repository
:PROPERTIES:
:masd.codec.stereotypes: ArtefactContainer
:END:
*** identifier
:PROPERTIES:
:masd.codec.type: std::string
:END:

Identifier for this repository. Used for logging and tracing only.

*** root_module_logical_id
:PROPERTIES:
:masd.codec.type: identification::entities::logical_id
:END:

Identifier of the artefact set containing the root module.

*** extraction_properties
:PROPERTIES:
:masd.codec.type: extraction_properties
:END:
*** global_enablement_properties
:PROPERTIES:
:masd.codec.type: global_enablement_properties
:END:
*** enabled_archetype_for_element
:PROPERTIES:
:masd.codec.type: std::unordered_set<identification::entities::logical_meta_physical_id>
:END:
*** managed_directories
:PROPERTIES:
:masd.codec.type: std::list<boost::filesystem::path>
:END:
*** has_generatable_artefacts
:PROPERTIES:
:masd.codec.type: bool
:END:

If true the repository has at least one generable artefact, false otherwise.

** entities::ArtefactContainer
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:
*** artefact_sets_by_logical_id
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::logical_id, artefact_set>
:END:

All atefact sets in this model, by logical ID.

** entities::extraction_properties
Properties related to extraction.

*** cpp_headers_output_directory
:PROPERTIES:
:masd.codec.type: boost::filesystem::path
:END:

Directory in which to place C++ header files. Must be a relative path.

*** enabled_backends
:PROPERTIES:
:masd.codec.type: std::unordered_set<std::string>
:END:
*** enable_backend_directories
:PROPERTIES:
:masd.codec.type: bool
:END:
** entities::global_enablement_properties
*** backend_properties
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, backend_properties>
:END:
*** facet_properties
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, facet_properties>
:END:
*** archetype_properties
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, archetype_properties>
:END:
*** denormalised_archetype_properties
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::physical_meta_id, denormalised_archetype_properties>
:END:
** entities::backend_properties
Properties related to the backend.

*** enabled
:PROPERTIES:
:masd.codec.type: bool
:END:

If true, this backend is enabled.

** entities::denormalised_archetype_properties
*** backend_enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** facet_enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** facet_overwrite
:PROPERTIES:
:masd.codec.type: bool
:END:
*** archetype_enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** archetype_overwrite
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
** entities::facet_properties
*** enabled
:PROPERTIES:
:masd.codec.type: bool
:END:

If true, this facet is enabled.

*** overwrite
:PROPERTIES:
:masd.codec.type: bool
:END:
** entities::archetype_properties
Archetype level properties, applicable to all instances of this archetype.

*** enabled
:PROPERTIES:
:masd.codec.type: bool
:END:

If false, will disable all instances of this archetype.

*** overwrite
:PROPERTIES:
:masd.codec.type: boost::optional<bool>
:END:
** entities::formatting_configuration
*** styles
:PROPERTIES:
:masd.codec.type: formatting_styles
:END:
*** input
:PROPERTIES:
:masd.codec.type: std::string
:END:
* features
:PROPERTIES:
:masd.codec.dia.comment: true
:END:

Features for the MASD physical model.

** features::facet_features
:PROPERTIES:
:masd.variability.instantiation_domain_name: masd.facet
:masd.codec.stereotypes: masd::variability::feature_template_bundle
:END:

Physical features common to all facets.

*** directory
:PROPERTIES:
:masd.variability.binding_point: global
:masd.variability.default_value_override.cpp.types: "types"
:masd.variability.default_value_override.cpp.hash: "hash"
:masd.variability.default_value_override.cpp.tests: "generated_tests"
:masd.variability.default_value_override.cpp.io: "io"
:masd.variability.default_value_override.cpp.lexical_cast: "lexical_cast"
:masd.variability.default_value_override.cpp.templates: "templates"
:masd.variability.default_value_override.cpp.odb: "odb"
:masd.variability.default_value_override.cpp.test_data: "test_data"
:masd.variability.default_value_override.cpp.serialization: "serialization"
:masd.variability.default_value_override.csharp.types: "Types"
:masd.variability.default_value_override.csharp.io: "Dumpers"
:masd.variability.default_value_override.csharp.test_data: "SequenceGenerators"
:masd.codec.type: masd::variability::text
:masd.codec.value: ""
:END:

Directory in which to place this facet.

*** postfix
:PROPERTIES:
:masd.variability.binding_point: global
:masd.variability.default_value_override.cpp.tests: "tests"
:masd.variability.default_value_override.cpp.hash: "hash"
:masd.variability.default_value_override.cpp.lexical_cast: "lc"
:masd.variability.default_value_override.cpp.io: "io"
:masd.variability.default_value_override.cpp.odb: "pragmas"
:masd.variability.default_value_override.cpp.test_data: "td"
:masd.variability.default_value_override.cpp.serialization: "ser"
:masd.variability.default_value_override.csharp.io: "Dumper"
:masd.variability.default_value_override.csharp.test_data: "SequenceGenerator"
:masd.codec.type: masd::variability::text
:masd.codec.value: ""
:END:

Postfix to use for all files that belong to this facet.

*** overwrite
:PROPERTIES:
:masd.variability.binding_point: element
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "true"
:END:

If true, the generated files will overwrite existing files.

** features::archetype_features
:PROPERTIES:
:masd.variability.instantiation_domain_name: masd.archetype
:masd.codec.stereotypes: masd::variability::feature_template_bundle
:END:

Features common to all archetypes.

*** postfix
:PROPERTIES:
:masd.variability.binding_point: global
:masd.variability.default_value_override.forward_declarations: "fwd"
:masd.variability.default_value_override.factory: "factory"
:masd.variability.default_value_override.transform: "transform"
:masd.codec.type: masd::variability::text
:masd.codec.value: ""
:END:

Postfix to use for all files that belong to this facet.

*** overwrite
:PROPERTIES:
:masd.variability.binding_point: element
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "true"
:END:

If true, the generated files will overwrite existing files.

** features::initializer
:PROPERTIES:
:masd.codec.stereotypes: masd::variability::initializer
:END:
** features::filesystem
:PROPERTIES:
:masd.variability.default_binding_point: global
:masd.variability.key_prefix: masd.physical
:masd.codec.stereotypes: masd::variability::feature_bundle
:END:

Features related to filesystem operations.

*** force_write
:PROPERTIES:
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "false"
:END:

If true, artefacts are always written to the filesystem.

If false, the system will check to see if writing is needed by performing a binary
diff. If no changes are detected, no writting is performed.

*** delete_extra_files
:PROPERTIES:
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "true"
:END:

If true, any files the code generator is not aware of are deleted.

If you'd like to skip the deletion of certain files, set  "ignore_files_matching_regex" accordingly.

*** ignore_files_matching_regex
:PROPERTIES:
:masd.variability.is_optional: true
:masd.codec.type: masd::variability::text_collection
:END:

Regular expressions to filter files prior to deletion.

Only applicable if "delete_extra_files" is enabled.

*** delete_empty_directories
:PROPERTIES:
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "false"
:END:

If true, all directories without any files will be deleted.

This setting is recursive: if a directory is composed of one or more directories that
are themselves empty, the entire directory tree is deleted.

*** enable_backend_directories
:PROPERTIES:
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "false"
:END:

If true, a directory is created for each technical space targeted.

Note that this setting is only relevant if you are targetting a single output technical
space. If you are targetting more than one, it will automatically be set to true.

** features::enablement
:PROPERTIES:
:masd.variability.default_binding_point: any
:masd.variability.generate_static_configuration: false
:masd.variability.instantiation_domain_name: masd
:masd.codec.stereotypes: masd::variability::feature_template_bundle
:END:

Enablement related properties.

*** enabled
:PROPERTIES:
:masd.codec.type: masd::variability::boolean
:masd.codec.value: "true"
:END:

If true, decorations are enabled on this modeling element.

** features::formatting
:PROPERTIES:
:masd.variability.default_binding_point: any
:masd.variability.instantiation_domain_name: masd.archetype
:masd.codec.stereotypes: masd::variability::feature_template_bundle
:END:

Features related to formatting.

*** formatting_style
:PROPERTIES:
:masd.codec.type: masd::variability::text
:END:

Style of formatting to use for this archetype.

*** formatting_input
:PROPERTIES:
:masd.codec.type: masd::variability::text
:END:

If the formatting style requires a template, the name of the template to use.

* transforms
:PROPERTIES:
:masd.codec.dia.comment: true
:END:

Contains all of the transforms needed to produce
models and meta-models for the physical model.

** transforms::context
:PROPERTIES:
:masd.cpp.types.class_forward_declarations.enabled: true
:masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
:END:
*** diffing_configuration
:PROPERTIES:
:masd.codec.type: boost::optional<diffing_configuration>
:END:
*** reporting_configuration
:PROPERTIES:
:masd.codec.type: boost::optional<reporting_configuration>
:END:
*** dry_run_mode_enabled
:PROPERTIES:
:masd.codec.type: bool
:END:
*** feature_model
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<variability::entities::feature_model>
:END:
*** meta_model
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<entities::meta_model>
:END:

Meta-model for the physical dimension.

*** tracer
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<tracing::tracer>
:END:
** transforms::transform_exception
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:
** transforms::file_generation_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::write_artefacts_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::update_outputting_properties_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::remove_files_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::generate_report_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::model_production_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::generate_diffs_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::gather_external_artefacts_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::generate_patch_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::mock_content_filler_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::operation_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::merge_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::meta_model_production_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::compute_name_indices_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::minimal_context
:PROPERTIES:
:masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
:END:

Smallest possible context required for bootstrapping purposes.

*** tracer
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<tracing::tracer>
:END:
** transforms::meta_model_assembly_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::compute_template_instantiation_domains
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::artefact_repository_population_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::global_enablement_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::local_enablement_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::formatting_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::generability_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::extraction_properties_transform
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
* registrar
:PROPERTIES:
:masd.codec.stereotypes: masd::serialization::type_registrar
:END:
