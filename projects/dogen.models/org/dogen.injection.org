#+title: dogen.injection
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
:PROPERTIES:
:masd.injection.dia.comment: true
:masd.injection.model_modules: dogen.injection
:masd.injection.input_technical_space: cpp
:masd.injection.reference: cpp.builtins
:masd.injection.reference: cpp.std
:masd.injection.reference: cpp.boost
:masd.injection.reference: dogen.variability
:masd.injection.reference: dogen.tracing
:masd.injection.reference: masd
:masd.injection.reference: masd.variability
:masd.injection.reference: dogen.profiles
:masd.injection.reference: dogen.identification
:masd.variability.profile: dogen.profiles.base.default_profile
:END:

Provides support for encoding and decoding of external models.

An external model is defined as:

@li a third-party format that is not owned or controlled by
    Dogen, such as Dia;
@li a Dogen format designed for interoperability (JSON).

External models are converted into an intermediate format called
the @e injection model, because it is the original entry point into
the dogen processing pipeline. It also reflects the notion that we
are injecting external technical spaces into the MASD technical
technical space.

A @e codec must be created for each external model that is to be
injected, providing a transformation between the native formats
and the injection model. The codecs are created in their own models,
following the naming convention injection.X for a given codec X.
They then register against the injection registrar. Note that for a
given file extension, there can only be one and only one codec to
manage it.

* transforms
** transforms::encoding_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable::header_only
:END:
** transforms::registrar
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::registrar_error
:PROPERTIES:
:masd.injection.stereotypes: masd::exception
:END:

A registration error has occurred.

** transforms::model_production_chain
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::model_to_model_chain
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::context
:PROPERTIES:
:masd.cpp.types.class_forward_declarations.enabled: true
:masd.injection.stereotypes: dogen::typeable, dogen::pretty_printable
:END:
*** data_directories
:PROPERTIES:
:masd.injection.type: std::vector<boost::filesystem::path>
:END:
*** feature_model
:PROPERTIES:
:masd.injection.type: boost::shared_ptr<variability::entities::feature_model>
:END:
*** tracer
:PROPERTIES:
:masd.injection.type: boost::shared_ptr<tracing::tracer>
:END:
*** compatibility_mode
:PROPERTIES:
:masd.injection.type: bool
:END:
*** variability_overrides
:PROPERTIES:
:masd.injection.type: std::vector<std::string>
:END:

Raw set of variability overrides.

** transforms::transformation_error
:PROPERTIES:
:masd.injection.stereotypes: masd::exception
:END:
** transforms::decoding_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable::header_only
:END:
** transforms::model_set_production_chain
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::input_technical_space_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::references_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::configuration_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::reference_graph_data_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::tagged_values_overrides_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::provenance_transform
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
* entities
** entities::model
:PROPERTIES:
:masd.injection.stereotypes: Element
:END:

Represents an external model.

*** elements
:PROPERTIES:
:masd.injection.type: std::list<element>
:END:
*** input_technical_space
:PROPERTIES:
:masd.injection.type: std::string
:END:

Technical space to which the model belongs, within the injection space.

*** references
:PROPERTIES:
:masd.injection.type: std::list<std::string>
:END:
*** processed_variability_overrides
:PROPERTIES:
:masd.injection.type: std::unordered_set<std::string>
:END:

All the variability overrides that were processed by this model.

** entities::element
:PROPERTIES:
:masd.injection.stereotypes: Element
:END:

Represents an element from an external model.

*** parents
:PROPERTIES:
:masd.injection.type: std::list<std::string>
:END:
*** attributes
:PROPERTIES:
:masd.injection.type: std::list<attribute>
:END:
*** fallback_element_type
:PROPERTIES:
:masd.injection.type: std::string
:END:

Stereotype conveying element type, to be used when none is provided with the
main stereotypes.

*** can_be_primitive_underlier
:PROPERTIES:
:masd.injection.type: bool
:END:
*** in_global_module
:PROPERTIES:
:masd.injection.type: bool
:END:
*** can_be_enumeration_underlier
:PROPERTIES:
:masd.injection.type: bool
:END:
*** is_default_enumeration_type
:PROPERTIES:
:masd.injection.type: bool
:END:
*** is_associative_container
:PROPERTIES:
:masd.injection.type: bool
:END:
*** is_floating_point
:PROPERTIES:
:masd.injection.type: bool
:END:
*** containing_element_id
:PROPERTIES:
:masd.injection.type: identification::entities::injection_id
:END:

ID of the containing element, if any.

** entities::attribute
:PROPERTIES:
:masd.injection.stereotypes: Element
:END:
*** type
:PROPERTIES:
:masd.injection.type: std::string
:END:
*** value
:PROPERTIES:
:masd.injection.type: std::string
:END:

Default value for this attribute, if any.

** entities::model_set
*** target
:PROPERTIES:
:masd.injection.type: model
:END:
*** references
:PROPERTIES:
:masd.injection.type: std::list<model>
:END:
*** reference_graph_data
:PROPERTIES:
:masd.injection.type: reference_graph_data
:END:

Stores the data required to build a graph of references for a model set.

** entities::Taggable
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Ability to contain tagged values.

*** tagged_values
:PROPERTIES:
:masd.injection.type: std::list<identification::entities::tagged_value>
:END:
*** tagged_values_overrides
:PROPERTIES:
:masd.injection.type: std::list<identification::entities::tagged_value>
:END:

Meta-data sourced externally that can be used to override meta-data in model.

** entities::Stereotypable
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Ability to have stereotypes.

*** stereotypes
:PROPERTIES:
:masd.injection.type: std::list<identification::entities::stereotype>
:END:
** entities::Documentable
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Ability to provide documentation.

*** documentation
:PROPERTIES:
:masd.injection.type: std::string
:END:

Code comments.

These are expected to follow the grammar of the comment processing tools
of the technical space in question, e.g. Doxygen for C++, JavaDoc for Java, etc.

** entities::Nameable
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Ability to have a name.

*** name
:PROPERTIES:
:masd.injection.type: identification::entities::name
:END:

Name of the injection element.

** entities::Configurable
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Ability to have meta-data associated.

*** configuration
:PROPERTIES:
:masd.injection.type: boost::shared_ptr<variability::entities::configuration>
:END:

Configuration for this element.

** entities::DeterminableOrigin
:PROPERTIES:
:masd.injection.stereotypes: masd::object_template
:END:

Properties related to the origin of the modeling element.

*** provenance
:PROPERTIES:
:masd.injection.type: identification::entities::injection_provenance
:END:

Provenance details of this injection element.

** entities::Element
:PROPERTIES:
:masd.injection.parent: entities::Taggable, entities::Stereotypable, entities::Documentable, entities::Nameable, entities::Configurable, entities::DeterminableOrigin
:masd.injection.stereotypes: masd::object_template
:END:

Consolidates a number of related object templates.

** entities::reference_graph_data
Contains all the data required to build the graph of references.

*** root
:PROPERTIES:
:masd.injection.type: std::string
:END:

Has the name of the target model, which is the entry point to the references
graph.

*** edges_per_model
:PROPERTIES:
:masd.injection.type: std::unordered_map<std::string, std::list<std::string>>
:END:

Contains the list of referenced models for a particular model name.

* helpers
** helpers::references_resolver
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::reference_resolution_exception
:PROPERTIES:
:masd.injection.stereotypes: masd::exception
:END:
** helpers::references_validator
:PROPERTIES:
:masd.injection.stereotypes: dogen::handcrafted::typeable
:END:
** helpers::reference_validation_error
:PROPERTIES:
:masd.injection.stereotypes: masd::exception
:END:

A cycle was detected in the references graph.

* features
:PROPERTIES:
:masd.injection.dia.comment: true
:END:

Defines all of the features and feature groups used by
the injection model.

** features::input_technical_space
:PROPERTIES:
:masd.variability.default_binding_point: global
:masd.variability.key_prefix: masd.injection
:masd.injection.stereotypes: masd::variability::feature_bundle
:END:

Feature bundle for the input technical space.

*** input_technical_space
:PROPERTIES:
:masd.injection.type: masd::variability::text
:masd.injection.value: "agnostic"
:END:

Input technical space for this model.

** features::reference
:PROPERTIES:
:masd.variability.default_binding_point: global
:masd.variability.key_prefix: masd.injection
:masd.injection.stereotypes: masd::variability::feature_bundle
:END:

Features related to model referencing.

*** reference
:PROPERTIES:
:masd.variability.is_optional: true
:masd.injection.type: masd::variability::text_collection
:END:

Imports an external model.

** features::initializer
:PROPERTIES:
:masd.injection.stereotypes: masd::variability::initializer
:END:
** features::uml
:PROPERTIES:
:masd.variability.default_binding_point: any
:masd.variability.generate_static_configuration: false
:masd.variability.key_prefix: masd.injection
:masd.injection.stereotypes: masd::variability::feature_bundle
:END:

Features related to all UML injectors.

*** dia.comment
:PROPERTIES:
:masd.injection.type: masd::variability::boolean
:END:

If true, the UML comment is linked to the containing package.

If the containing package is the model itself, it is linked to the model's module.

* registrar
:PROPERTIES:
:masd.injection.stereotypes: masd::serialization::type_registrar
:END:
* main
:PROPERTIES:
:masd.injection.stereotypes: masd::entry_point, dogen::untypable
:END:
* CMakeLists
:PROPERTIES:
:masd.injection.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
:END:
