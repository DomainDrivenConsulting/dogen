#+title: dogen.text
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.codec.model_modules: dogen.text
:masd.codec.reference: cpp.builtins
:masd.codec.reference: cpp.boost
:masd.codec.reference: cpp.std
:masd.codec.reference: dogen
:masd.codec.reference: dogen.variability
:masd.codec.reference: dogen.tracing
:masd.codec.reference: dogen.logical
:masd.codec.reference: masd
:masd.codec.reference: masd.variability
:masd.codec.reference: dogen.profiles
:masd.codec.input_technical_space: cpp
:masd.variability.profile: dogen.profiles.base.default_profile
:END:
* entities
** entities::model
:PROPERTIES:
:masd.codec.stereotypes: Provenance
:END:

Represents the combined logical-physical space.

*** logical
:PROPERTIES:
:masd.codec.type: logical::entities::model
:END:

The logical model representation in the logical-physical space.

*** physical
:PROPERTIES:
:masd.codec.type: physical::entities::model
:END:

The physical model representation in the logical-physical space.

*** logical_physical_regions
:PROPERTIES:
:masd.codec.type: std::list<logical_physical_region>
:END:

Contains all of the logical-physical regions that make up the logical physical space
for this model.

** entities::Provenance
:PROPERTIES:
:masd.codec.stereotypes: masd::object_template
:END:

Details of the origin of this model element.

*** provenance
:PROPERTIES:
:masd.codec.type: identification::entities::logical_provenance
:END:

Details of the provenance of this model element.

** entities::logical_physical_region
Represents a region of logical-physical space with a single logical element and
its associated physical elements.

*** logical_element
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<logical::entities::element>
:END:

Logical element that gives rise to the artefact.

*** physical_region
:PROPERTIES:
:masd.codec.type: physical::entities::region
:END:

Physical artefacts that will be produced from the logical element.

** entities::model_set
:PROPERTIES:
:masd.codec.stereotypes: Provenance
:END:

Represents a set of related models.

*** models
:PROPERTIES:
:masd.codec.type: std::list<model>
:END:

Models that belong to this set.

* transforms
** transforms::model_to_text_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::model_to_text_technical_space_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable::header_only, dogen::forward_declarable
:END:
** transforms::model_to_text_technical_space_chain_registrar
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable, dogen::forward_declarable
:END:
*** transforms_by_technical_space_
:PROPERTIES:
:masd.codec.type: std::unordered_map<identification::entities::technical_space, std::shared_ptr<model_to_text_technical_space_chain>>
:END:
** transforms::model_generation_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** transforms::context
:PROPERTIES:
:masd.cpp.types.class_forward_declarations.enabled: true
:masd.codec.stereotypes: dogen::typeable, dogen::pretty_printable
:END:
*** physical_meta_model
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<physical::entities::meta_model>
:END:

Meta-model for the physical dimension.

*** output_directory_path
:PROPERTIES:
:masd.codec.type: boost::filesystem::path
:END:

FIXME: to be removed

*** feature_model
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<variability::entities::feature_model>
:END:
*** tracer
:PROPERTIES:
:masd.codec.type: boost::shared_ptr<tracing::tracer>
:END:
*** generation_timestamp
:PROPERTIES:
:masd.codec.type: std::string
:END:

Human readable timestamp of when the generation took place.

** transforms::transformation_error
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:

An error occurred whilst applying a transformation.

** transforms::registrar_error
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:
** transforms::model_to_text_transform
:PROPERTIES:
:masd.cpp.types.class_forward_declarations.enabled: true
:masd.codec.stereotypes: dogen::handcrafted::typeable::header_only
:END:
** transforms::cpp
:PROPERTIES:
:masd.codec.dia.comment: true
:masd.physical.backend_name: cpp
:masd.physical.directory_name: cpp
:masd.physical.major_technical_space: cpp
:masd.physical.technical_space: cpp
:masd.label.test: lbl
:masd.codec.stereotypes: masd::physical::backend
:END:

Text transforms that implement the C++ backend.

Provides a set of M2T transforms that convert logical
model elements into a physical representation in the
C++ technical space, or associated minor technical spaces.

*** transforms::cpp::implementation
:PROPERTIES:
:masd.codec.stereotypes: masd::physical::part
:END:

Contains the implementation files.

**** external_modules_path_contribution
:PROPERTIES:
:masd.codec.value: none
:END:
**** model_modules_path_contribution
:PROPERTIES:
:masd.codec.value: as_path_components
:END:
**** facet_path_contribution
:PROPERTIES:
:masd.codec.value: as_directories
:END:
**** requires_relative_path
:PROPERTIES:
:masd.codec.value: false
:END:
**** directory_name
:PROPERTIES:
:masd.codec.value: src
:END:
*** transforms::cpp::public_headers
:PROPERTIES:
:masd.codec.stereotypes: masd::physical::part
:END:

Contains the header files that are publicly visible.

**** external_modules_path_contribution
:PROPERTIES:
:masd.codec.value: none
:END:
**** model_modules_path_contribution
:PROPERTIES:
:masd.codec.value: as_path_components
:END:
**** facet_path_contribution
:PROPERTIES:
:masd.codec.value: as_directories
:END:
**** requires_relative_path
:PROPERTIES:
:masd.codec.value: true
:END:
**** directory_name
:PROPERTIES:
:masd.codec.value: include
:END:
*** transforms::cpp::testing
:PROPERTIES:
:masd.codec.stereotypes: masd::physical::part
:END:

Contains the generated test files.

**** external_modules_path_contribution
:PROPERTIES:
:masd.codec.value: none
:END:
**** model_modules_path_contribution
:PROPERTIES:
:masd.codec.value: as_path_components
:END:
**** facet_path_contribution
:PROPERTIES:
:masd.codec.value: as_directories
:END:
**** requires_relative_path
:PROPERTIES:
:masd.codec.value: false
:END:
**** directory_name
:PROPERTIES:
:masd.codec.value: generated_tests
:END:
*** transforms::cpp::standard_header_file
:PROPERTIES:
:masd.codec.stereotypes: masd::physical::archetype_kind
:END:

Header file generated by Dogen.

**** file_extension
:PROPERTIES:
:masd.codec.value: hpp
:END:
*** transforms::cpp::model_to_text_cpp_chain
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
* formatters
** formatters::formatting_error
:PROPERTIES:
:masd.codec.stereotypes: masd::exception
:END:

An error has occurred while formatting.

** formatters::namespace_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::scoped_namespace_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::boilerplate_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::scoped_boilerplate_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::dependencies_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::header_guard_formatter
:PROPERTIES:
:masd.codec.stereotypes: dogen::handcrafted::typeable
:END:
** formatters::boilerplate_properties
*** preamble
:PROPERTIES:
:masd.codec.type: std::string
:END:
*** postamble
:PROPERTIES:
:masd.codec.type: std::string
:END:
*** dependencies
:PROPERTIES:
:masd.codec.type: std::list<std::string>
:END:
*** header_guard
:PROPERTIES:
:masd.codec.type: std::string
:END:
*** technical_space
:PROPERTIES:
:masd.codec.type: identification::entities::technical_space
:END:
*** generate_preamble
:PROPERTIES:
:masd.codec.type: bool
:END:
*** generate_header_guards
:PROPERTIES:
:masd.codec.type: bool
:END:
* registrar
:PROPERTIES:
:masd.codec.stereotypes: masd::serialization::type_registrar
:END:
* main
:PROPERTIES:
:masd.codec.stereotypes: masd::entry_point, dogen::untypable
:END:
* CMakeLists
:PROPERTIES:
:masd.codec.stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
:END:
* cpp_artefact_transform_implementation
:PROPERTIES:
:masd.codec.stereotypes: masd::templating::logic_less_templates
:END:
** content
#+begin_src mustache
namespace {

const std::string transform_id("{{containing_namespace}}.{{archetype.simple_name}}_transform");

using namespace dogen::utility::log;
auto lg(logger_factory(transform_id));

}

const physical::entities::archetype& {{archetype.simple_name}}_transform::static_archetype() {
    static auto r({{archetype.simple_name}}_factory::make());
    return r;
}

const physical::entities::archetype& {{archetype.simple_name}}_transform::archetype() const {
    return static_archetype();
}

#+end_src
* cpp_helper_transform_implementation
:PROPERTIES:
:masd.codec.stereotypes: masd::templating::logic_less_templates
:END:
** content
#+begin_src mustache
std::string {{class.simple_name}}::id() const {
    static auto r(std::string("<") + traits::facet_qn() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string {{class.simple_name}}::family() const {
    static std::string r("{{helper.family}}");
    return r;
}

std::list<std::string>
{{class.simple_name}}::owning_formatters() const {
    static auto r(std::list<std::string> {
        io::traits::class_implementation_archetype_qn(),
        io::traits::primitive_implementation_archetype_qn(),
        types::traits::class_implementation_archetype_qn(),
        types::traits::primitive_implementation_archetype_qn()
    });
    return r;
}

std::list<std::string>
{{class.simple_name}}::owning_facets() const {
    static auto r(std::list<std::string> {
        io::traits::facet_qn(), types::traits::facet_qn()
    });
    return r;
}

std::string {{class.simple_name}}::helper_name() const {
    static std::string r("{{class.simple_name}}");
    return r;
}

bool {{class.simple_name}}::is_enabled(const assistant& a,
    const logical::entities::helper_properties& hp) const {
    return a.is_streaming_enabled(hp);
}

#+end_src
* cpp_helper_transform_implementation_enabled
:PROPERTIES:
:masd.codec.stereotypes: masd::templating::logic_less_templates
:END:
** content
#+begin_src mustache
std::string {{class.simple_name}}::id() const {
    static auto r(std::string("<") + traits::facet_qn() + std::string(">") +
        std::string("<") + helper_name() + std::string(">"));
    return r;
}

std::string {{class.simple_name}}::family() const {
    static std::string r("{{helper.family}}");
    return r;
}

std::list<std::string>
{{class.simple_name}}::owning_formatters() const {
    static auto r(std::list<std::string> {
        traits::class_implementation_archetype_qn(),
        traits::primitive_implementation_archetype_qn()
    });
    return r;
}

std::list<std::string>
{{class.simple_name}}::owning_facets() const {
    static auto r(std::list<std::string> {
        traits::facet_qn()
    });
    return r;
}

std::string {{class.simple_name}}::helper_name() const {
    static std::string r("{{class.simple_name}}");
    return r;
}

bool {{class.simple_name}}::is_enabled(const assistant& /*a*/,
    const logical::entities::helper_properties& /*hp*/) const {
    return true;
}

#+end_src
