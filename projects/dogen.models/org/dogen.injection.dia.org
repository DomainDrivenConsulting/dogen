#+title: dogen.injection.dia
#+options: <:nil c:nil todo:nil ^:nil d:nil date:nil author:nil
:dogen-tagged-values:
:masd.injection.dia.comment: true
:masd.injection.model_modules: dogen.injection.dia
:masd.injection.reference: cpp.builtins
:masd.injection.reference: cpp.std
:masd.injection.reference: cpp.boost
:masd.injection.reference: dogen.dia
:masd.injection.reference: dogen.variability
:masd.injection.reference: dogen.tracing
:masd.injection.reference: dogen.injection
:masd.injection.reference: masd
:masd.injection.reference: masd.variability
:masd.injection.reference: dogen.profiles
:masd.injection.input_technical_space: cpp
:masd.variability.profile: dogen.profiles.base.default_profile
:end:
Injection.Dia is a unidirectional transformation model that transforms
a Dia @e diagram into an injection @e model.

By that we mean that it is a model designed to transform a representation of
a user model in Dia diagram format to its counterpart in the injection format,
taking into account any special masd meta-data which the user may have encoded
into the Dia diagram. Note that the Dia diagram format contains a representation
of UML. We pass that meta-data straight through into the injection model,
without any further processing.

@section injection_dia_0 Dia diagrams as DAGs

Dia diagrams are made up of @e objects, identified by IDs. These objects
contain a number of UML model elements, which we are interested in. For
instance:

@li UML class
@li UML generalisation
@li UML notes

and so on. Each of these objects will contribute to am injection element.
However, we need to be aware of object containment - e.g. if a class is
contained in a package. This is because the injection element names are scoped
by the packages. So, to make our life easier we created a DAG of Dia objects
that provides us with the information in dependency order. That is, we process
dia objects in such a way that when a dependency exists, we know that the object
in which we depend on has already been processed. Please note that to ensure no
cycles we had to ignore some of the UML objects such as UML aggregation -
but fortunately, these objects do not provide sufficient information as
required for dogen transformations, so not much was lost. Instead, one must
manually declare attributes in a class.

See @ref grapher for details on how the the DAG is built.

@section injection_dia_1 Intermediate processing

To make the code easier to read and maintain, we created a numeber of
intermediate stages between a Dia diagram and an injection model:

@li Dia object -> processed object -> profile -> injection element

This may look a bit excessive at first glance, but it was done because
the shape of the Dia objects is a bit too generic for our purposes, and
the resulting processing code was full of loops and look-ups. Instead,
we make the generic Dia object into a very concrete processed object -
still preserving most of the semantics of Dia - and then from those we
build a profile. A profile allows us to quickly scan for UML and masd
type information without getting lost in the intricacies of the generic
Dia structure. With these in hand, the @ref transformer is able to
create the corresponding masd entity, and the transformation code is
not obscured.

@section injection_dia_2 Dia meta-data

There are a couple of conventions on how to model in Dia that one
needs to follow in order to comply with Dogen:

@li any public attribute in a class is automatically converted into a
masd property rather than a member variable. This means that it is
expected that a getter and a setter will be generated.

@li a number of stereotypes were added, as per the definitions in the
MASD UML profile. For details, see the Dogen UML profile.

@li any type without any stereotype assumes a default stereotype, again
as per MASD UML profile.

@li any UML Note with the marker #DOGEN masd.injection.dia.comment=true will
be used as the documentation of the current package - or the model, if
place at the top-level. Only one such note is expected per containing
entity.

For details on the stereotypes see the MASD UML profile.

* adaptation_error
:dogen-properties:
:stereotypes: masd::exception
:end:
A fatal error has occurred while adapting a Dia model object
into its masd representation.

* grapher
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* graphing_error
:dogen-properties:
:stereotypes: masd::exception
:end:
An error has occurred while building the dia object graph.

* processed_comment_factory
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* processed_object_factory
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* processed_attribute
** name
:dogen-properties:
:type: std::string
:end:

Name of the property.

** type
:dogen-properties:
:type: std::string
:end:

Type of the property.

** comment
:dogen-properties:
:type: processed_comment
:end:

Any comments associated with the property.

** value
:dogen-properties:
:type: std::string
:end:

* processed_object
Representation of a dia object after first stage processing.

** id
:dogen-properties:
:type: std::string
:end:

Dia object id.

** name
:dogen-properties:
:type: std::string
:end:

Name of the object in dia format.

** dia_object_type
:dogen-properties:
:type: dia_object_types
:end:

Type of the dia object.

** stereotypes
:dogen-properties:
:type: std::string
:end:

** comment
:dogen-properties:
:type: processed_comment
:end:

Any comments associated with the object.

On the case of a UML note, represents the text of the note.

** child_node_id
:dogen-properties:
:type: std::string
:end:

If the object is contained in another object, its node id.

** connection
:dogen-properties:
:type: boost::optional<std::pair<std::string,std::string>>
:end:

Connections this object may have with other objects.

** attributes
:dogen-properties:
:type: std::list<processed_attribute>
:end:

All attributes associated with dia object.

* dia_object_types
:dogen-properties:
:stereotypes: masd::enumeration
:end:
Identifier for the type of Dia object.

** uml_large_package
:dogen-properties:
:end:

A UML package

** uml_class
:dogen-properties:
:end:

A UML class

** uml_generalization
:dogen-properties:
:end:

UML Inheritance

** uml_association
:dogen-properties:
:end:

UML Association

** uml_note
:dogen-properties:
:end:

UML Note

** uml_message
:dogen-properties:
:end:

UML Message

** uml_realization
:dogen-properties:
:end:

UML Realization

* validator
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* validation_error
:dogen-properties:
:stereotypes: masd::exception
:end:
The object profile is not valid.

* traits
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* processed_comment
Contains the same content as the original dia comment, but split by type of data.

** documentation
:dogen-properties:
:type: std::string
:end:

Text of the comment, excluding all Dogen instructions.

** tagged_values
:dogen-properties:
:type: std::list<std::pair<std::string,std::string>>
:end:

Dogen instructions, in the key-value-pair form.

** applicable_to_parent_object
:dogen-properties:
:type: bool
:end:

If true, the comment should be attached to the dia object containing it.

** original_content
:dogen-properties:
:type: std::string
:end:

Content of the field as it was read from the dia object.

* initializer
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* building_error
:dogen-properties:
:stereotypes: masd::exception
:end:
* visitor
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable::header_only
:end:
** builder_
:dogen-properties:
:type: builder
:end:

* builder
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* adapter
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* decoding_transform
:dogen-properties:
:stereotypes: dogen::handcrafted::typeable
:end:
* main
:dogen-properties:
:stereotypes: masd::entry_point, dogen::untypable
:end:
* CMakeLists
:dogen-properties:
:stereotypes: masd::build::cmakelists, dogen::handcrafted::cmake
:end:
