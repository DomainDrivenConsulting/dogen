@startuml
set namespaceSeparator ::
note as N1

Contains all of the M2T transforms for all supported backends.

end note

namespace entities #F2F2F2 {
        class model <<Provenance>> #F7E5FF {
                +{field} logical logical::entities::model
                +{field} physical physical::entities::model
                +{field} logical_physical_regions std::list<logical_physical_region>
}

        class Provenance <<masd::object_template>> #E3B6F6 {
                +{field} provenance identification::entities::logical_provenance
}

        class logical_physical_region #F7E5FF {
                +{field} logical_element boost::shared_ptr<logical::entities::element>
                +{field} physical_region physical::entities::region
}

        class model_set <<Provenance>> #F7E5FF {
                +{field} models std::list<model>
}

}

namespace transforms #F2F2F2 {
        class model_to_text_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class model_generation_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
                +{field} physical_meta_model boost::shared_ptr<physical::entities::meta_model>
                +{field} output_directory_path boost::filesystem::path
                +{field} tracer boost::shared_ptr<tracing::tracer>
                +{field} generation_timestamp std::string
}

        class transformation_error <<masd::exception>> #E8C2F8 {
}

        class registrar_error <<masd::exception>> #E8C2F8 {
}

        class model_to_text_transform <<dogen::handcrafted::typeable, dogen::pretty_printable>> #FFFACD {
}

        namespace cpp <<masd::physical::backend>> #F2F2F2 {
                class implementation <<masd::physical::part>> #43CD80 {
                        +{field} external_modules_path_contribution
                        +{field} model_modules_path_contribution
                        +{field} facet_path_contribution
                        +{field} requires_relative_path
                        +{field} directory_name
}

                class public_headers <<masd::physical::part>> #43CD80 {
                        +{field} external_modules_path_contribution
                        +{field} model_modules_path_contribution
                        +{field} facet_path_contribution
                        +{field} requires_relative_path
                        +{field} directory_name
}

                class testing <<masd::physical::part>> #43CD80 {
                        +{field} external_modules_path_contribution
                        +{field} model_modules_path_contribution
                        +{field} facet_path_contribution
                        +{field} requires_relative_path
                        +{field} directory_name
}

                class standard_header_file <<masd::physical::archetype_kind>> #68D799 {
                        +{field} file_extension
}

                namespace types <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class smart_pointer_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class archetype_class_header_transform <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class archetype_class_implementation_transform <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class archetype_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class archetype_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class facet_class_header_transform <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class facet_class_implementation_transform <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class facet_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class facet_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class backend_class_header_transform <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class backend_class_implementation_transform <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class backend_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class part_class_header_transform <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class part_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class helper_class_header_transform <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class helper_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class archetype_kind_class_header_factory <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class backend_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class part_class_implementation_transform <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class part_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class helper_class_implementation_transform <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class helper_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class archetype_kind_class_implementation_factory <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_forward_declarations <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class namespace_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class visitor_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_forward_declarations <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class feature_template_bundle_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class feature_bundle_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class variability_initializer_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class main <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_implementation <<masd::physical::archetype, dogen::object_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class exception_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class visitor_forward_declarations <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_implementation <<masd::physical::archetype, dogen::primitive_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class feature_template_bundle_implementation <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class feature_bundle_implementation <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class variability_initializer_implementation <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                class base_archetype_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.technical_space
}

                class tests_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.part_id
                        +{field} masd.physical.wale_template_reference
                        +{field} masd.physical.relation_status
}

transforms::cpp::base_archetype_configuration <|-- transforms::cpp::tests_configuration
                class header_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.part_id
                        +{field} masd.physical.wale_template_reference
}

transforms::cpp::base_archetype_configuration <|-- transforms::cpp::header_configuration
                class header_facet_default_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.relation_status
}

transforms::cpp::header_configuration <|-- transforms::cpp::header_facet_default_configuration
                class enumeration_header_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::header_facet_default_configuration <|-- transforms::cpp::enumeration_header_configuration
                class object_header_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::header_facet_default_configuration <|-- transforms::cpp::object_header_configuration
                class primitive_header_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::header_facet_default_configuration <|-- transforms::cpp::primitive_header_configuration
                class builtin_header_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::header_facet_default_configuration <|-- transforms::cpp::builtin_header_configuration
                class implementation_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.part_id
                        +{field} masd.physical.wale_template_reference
                        +{field} masd.physical.relation_status
}

transforms::cpp::base_archetype_configuration <|-- transforms::cpp::implementation_configuration
                class object_implementation_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::implementation_configuration <|-- transforms::cpp::object_implementation_configuration
                class primitive_implementation_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::implementation_configuration <|-- transforms::cpp::primitive_implementation_configuration
                class enumeration_implementation_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::cpp::implementation_configuration <|-- transforms::cpp::enumeration_implementation_configuration
                namespace hash <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class date_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class ptime_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class associative_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class optional_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class sequence_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class variant_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class time_duration_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class ptree_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class pair_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class smart_pointer_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class path_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_implementation <<masd::physical::archetype, dogen::object_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_implementation <<masd::physical::archetype, dogen::primitive_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace build <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class include_cmakelists <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class source_cmakelists <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace io <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class optional_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class pair_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class string_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class ptree_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class associative_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class sequence_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class smart_pointer_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class variant_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class inserter_implementation_helper <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_implementation <<masd::physical::archetype, dogen::object_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_implementation <<masd::physical::archetype, dogen::enumeration_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_implementation <<masd::physical::archetype, dogen::primitive_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace visual_studio <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class solution <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class msbuild_targets <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class project <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace serialization <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class path_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_forward_declarations <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_forward_declarations <<masd::physical::archetype, dogen::header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class type_registrar_header <<masd::physical::archetype, dogen::header_facet_default_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_implementation <<masd::physical::archetype, dogen::object_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_implementation <<masd::physical::archetype, dogen::primitive_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class type_registrar_implementation <<masd::physical::archetype, dogen::implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace test_data <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class date_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class bool_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class char_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class ptree_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class associative_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class pair_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class number_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class variant_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class path_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class ptime_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class optional_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class smart_pointer_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class sequence_container_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class string_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class domain_type_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class time_duration_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class class_implementation <<masd::physical::archetype, dogen::object_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_implementation <<masd::physical::archetype, dogen::enumeration_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_implementation <<masd::physical::archetype, dogen::primitive_implementation_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace tests <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class class_implementation <<masd::physical::archetype, dogen::tests_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class main <<masd::physical::archetype, dogen::tests_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_implementation <<masd::physical::archetype, dogen::tests_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class cmakelists <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace odb <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class class_header <<masd::physical::archetype, dogen::object_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin_header <<masd::physical::archetype, dogen::builtin_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_header <<masd::physical::archetype, dogen::primitive_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class object_odb_options <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive_odb_options <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class common_odb_options <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace lexical_cast <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class enum_header <<masd::physical::archetype, dogen::enumeration_header_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                class project <<masd::physical::part>> #43CD80 {
                        +{field} external_modules_path_contribution
                        +{field} model_modules_path_contribution
                        +{field} facet_path_contribution
                        +{field} requires_relative_path
}

}

        class helper_transform <<dogen::handcrafted::typeable, dogen::pretty_printable>> #FFFACD {
}

        class helper_chain <<dogen::handcrafted::typeable>> #FFFACD {
                +{field} physical_model physical::entities::meta_model
}

        class helper_repository <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
                +{field} helpers_by_family std::unordered_map<std::string, std::unordered_map<identification::entities::physical_meta_id, std::list<std::shared_ptr<helper_transform>>>>
}

        class helper_registrar <<dogen::handcrafted::typeable>> #FFFACD {
                +{field} repository helper_repository
}

        namespace csharp <<masd::physical::backend>> #F2F2F2 {
                class archetype_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.part_id
                        +{field} masd.physical.wale_template_reference
                        +{field} masd.physical.relation_status
                        +{field} masd.physical.technical_space
}

                class primitive_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::csharp::archetype_configuration <|-- transforms::csharp::primitive_configuration
                class enumeration_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::csharp::archetype_configuration <|-- transforms::csharp::enumeration_configuration
                class object_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::csharp::archetype_configuration <|-- transforms::csharp::object_configuration
                class exception_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::csharp::archetype_configuration <|-- transforms::csharp::exception_configuration
                class builtin_configuration <<masd::variability::profile>> #DDECEC {
                        +{field} masd.physical.logical_meta_element_id
                        +{field} masd.wale.kvp.archetype.simple_name
}

transforms::csharp::archetype_configuration <|-- transforms::csharp::builtin_configuration
                class implementation <<masd::physical::part>> #43CD80 {
                        +{field} external_modules_path_contribution
                        +{field} model_modules_path_contribution
                        +{field} facet_path_contribution
                        +{field} requires_relative_path
}

                namespace types <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class floating_point_number_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class class <<masd::physical::archetype, dogen::object_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class exception <<masd::physical::archetype, dogen::exception_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class builtin <<masd::physical::archetype, dogen::builtin_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum <<masd::physical::archetype, dogen::enumeration_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive <<masd::physical::archetype, dogen::primitive_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace io <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class enumerable_helper <<masd::physical::helper>> #F7E5FF {
                                +{field} stitch_template_content
}

                        class class <<masd::physical::archetype, dogen::object_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum <<masd::physical::archetype, dogen::enumeration_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive <<masd::physical::archetype, dogen::primitive_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class assistant <<masd::physical::archetype, dogen::archetype_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace test_data <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class class <<masd::physical::archetype, dogen::object_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class assistant <<masd::physical::archetype, dogen::archetype_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class enum <<masd::physical::archetype, dogen::enumeration_configuration>> #68D799 {
                                +{field} stitch_template_content
}

                        class primitive <<masd::physical::archetype, dogen::primitive_configuration>> #68D799 {
                                +{field} stitch_template_content
}

}

                namespace visual_studio <<masd::physical::facet>> #F2F2F2 {
                        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

                        class project <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

                        class solution <<masd::physical::archetype>> #68D799 {
                                +{field} stitch_template_content
}

}

                class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

}

        class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

        class text_transform_repository <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
                +{field} model_to_text_transforms_by_meta_name std::unordered_map<identification::entities::logical_meta_id, std::forward_list<std::shared_ptr<model_to_text_transform>>>
}

        class text_transform_registrar <<dogen::handcrafted::typeable>> #FFFACD {
}

}

namespace formatters #F2F2F2 {
        class formatting_error <<masd::exception>> #E8C2F8 {
}

        class namespace_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class scoped_namespace_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class boilerplate_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class scoped_boilerplate_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class dependencies_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class header_guard_formatter <<dogen::handcrafted::typeable>> #FFFACD {
}

        class boilerplate_properties #F7E5FF {
                +{field} preamble std::string
                +{field} postamble std::string
                +{field} dependencies std::list<std::string>
                +{field} header_guard std::string
                +{field} technical_space identification::entities::technical_space
                +{field} generate_preamble bool
                +{field} generate_header_guards bool
}

        class assistant <<dogen::handcrafted::typeable>> #FFFACD {
}

}

class registrar <<masd::serialization::type_registrar>> #00FF00 {
}

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

class cpp_artefact_transform_implementation <<masd::templating::logic_less_templates>> #FFC072 {
        +{field} content
}

class initializer <<dogen::handcrafted::typeable>> #FFFACD {
}

class csharp_transform_implementation <<masd::templating::logic_less_templates>> #FFC072 {
        +{field} content
}

class csharp_helper_transform_implementation <<masd::templating::logic_less_templates>> #FFC072 {
        +{field} content
}

class cpp_helper_transform_implementation <<masd::templating::logic_less_templates>> #FFC072 {
        +{field} content
}

class cpp_helper_transform_implementation_enabled <<masd::templating::logic_less_templates>> #FFC072 {
        +{field} content
}

@enduml
