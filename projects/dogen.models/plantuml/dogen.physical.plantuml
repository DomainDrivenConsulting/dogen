@startuml
set namespaceSeparator ::
note as N1

The pysical model defines the core entities that make up the
physical dimension of MASD conceptual space.

end note

class main <<masd::entry_point, dogen::untypable>> #DDA9F3 {
}

class CMakeLists <<masd::build::cmakelists, dogen::handcrafted::cmake>> #99CB99 {
}

namespace helpers #F2F2F2 {
        class template_instantiation_domains_factory <<dogen::handcrafted::typeable>> #FFFACD {
}

        class building_error <<masd::exception>> #E8C2F8 {
}

        class path_generator <<dogen::handcrafted::typeable>> #FFFACD {
}

        class file_status_collector <<dogen::handcrafted::typeable>> #FFFACD {
}

        class files_by_status #F7E5FF {
                +{field} unexpected std::list<boost::filesystem::path>
                +{field} ignored std::list<boost::filesystem::path>
}

        class unified_differ <<dogen::handcrafted::typeable>> #FFFACD {
}

        class meta_model_validator <<dogen::handcrafted::typeable>> #FFFACD {
}

        class validation_error <<masd::exception>> #E8C2F8 {
}

        class header_guard_factory <<dogen::handcrafted::typeable>> #FFFACD {
}

}

namespace entities #F2F2F2 {
        class meta_model <<ContainingMetaElement>> #F7E5FF {
                +{field} template_instantiation_domains std::unordered_map<std::string, std::vector<std::string>>
                +{field} backends std::list<backend>
                +{field} indexed_names identification::entities::physical_meta_name_indices
}

        class backend <<ContainingMetaElement, HasTechnicalSpace>> #F7E5FF {
                +{field} parts std::unordered_map<identification::entities::physical_meta_id, part>
                +{field} facets std::unordered_map<identification::entities::physical_meta_id, facet>
                +{field} archetypes std::unordered_map<identification::entities::physical_meta_id, archetype>
                +{field} archetype_kinds std::unordered_map<std::string, archetype_kind>
}

        class part <<ContainingMetaElement>> #F7E5FF {
                +{field} path_configuration path_configuration
                +{field} facets std::unordered_map<identification::entities::physical_meta_id, facet>
                +{field} archetypes std::unordered_map<identification::entities::physical_meta_id, archetype>
                +{field} requires_relative_path bool
}

        class path_configuration #F7E5FF {
                +{field} external_modules path_contribution_type
                +{field} model_modules path_contribution_type
                +{field} facet path_contribution_type
                +{field} internal_modules path_contribution_type
}

        enum path_contribution_type <<masd::enumeration>> #F2DAFD {
                +{field} none
                +{field} as_directories
                +{field} as_path_components
}

        class facet <<ContainingMetaElement, Postfixable>> #F7E5FF {
                +{field} archetypes std::unordered_map<identification::entities::physical_meta_id, archetype>
                +{field} helpers std::unordered_map<identification::entities::physical_meta_id, helper>
                +{field} default_archetype_for_logical_meta_model_id std::unordered_map<std::string, archetype>
}

        class archetype <<MetaElement, Postfixable, Associatable, HasTechnicalSpace>> #F7E5FF {
                +{field} archetype_kind_id std::string
                +{field} logical_meta_element_id identification::entities::logical_meta_id
                +{field} part identification::entities::physical_meta_id
                +{field} relations relations
}

        class archetype_kind <<Describable>> #F7E5FF {
                +{field} id std::string
                +{field} file_extension std::string
}

        class model <<Element>> #F7E5FF {
                +{field} technical_space std::string
                +{field} managed_directories std::list<boost::filesystem::path>
                +{field} outputting_properties outputting_properties
                +{field} orphan_artefacts std::list<boost::shared_ptr<physical::entities::artefact>>
                +{field} meta_model_properties meta_model_properties
                +{field} has_generatable_artefacts bool
                +{field} regions_by_logical_id std::unordered_map<identification::entities::logical_id, region>
}

        class Describable <<masd::object_template>> #E3B6F6 {
                +{field} description std::string
}

        class MetaNameable <<masd::object_template>> #E3B6F6 {
                +{field} meta_name identification::entities::physical_meta_name
}

        class Labelable <<masd::object_template>> #E3B6F6 {
                +{field} labels std::list<identification::entities::label>
}

        class MetaElement <<masd::object_template>> #E3B6F6 {
}

entities::Describable <|-- entities::MetaElement
entities::MetaNameable <|-- entities::MetaElement
entities::Labelable <|-- entities::MetaElement
        class ContainingMetaElement <<masd::object_template>> #E3B6F6 {
                +{field} directory_name std::string
}

entities::MetaElement <|-- entities::ContainingMetaElement
        class Postfixable <<masd::object_template>> #E3B6F6 {
                +{field} postfix std::string
}

        class artefact <<Element, HasTechnicalSpace>> #F7E5FF {
                +{field} file_path boost::filesystem::path
                +{field} content std::string
                +{field} path_properties path_properties
                +{field} dependencies std::vector<boost::filesystem::path>
                +{field} unified_diff std::string
                +{field} operation operation
                +{field} enablement_properties enablement_properties
                +{field} formatting_input std::string
                +{field} relations relation_properties
}

        class Configurable <<masd::object_template>> #E3B6F6 {
                +{field} configuration boost::shared_ptr<variability::entities::configuration>
}

        class Provenance <<masd::object_template>> #E3B6F6 {
                +{field} provenance identification::entities::logical_provenance
}

        class Nameable <<masd::object_template>> #E3B6F6 {
                +{field} name identification::entities::physical_name
}

        class LogicalPhysicalSpaceIdentity <<masd::object_template>> #E3B6F6 {
                +{field} id identification::entities::logical_meta_physical_id
}

        class Element <<masd::object_template>> #E3B6F6 {
}

entities::MetaNameable <|-- entities::Element
entities::Configurable <|-- entities::Element
entities::Provenance <|-- entities::Element
entities::Nameable <|-- entities::Element
entities::LogicalPhysicalSpaceIdentity <|-- entities::Element
        class outputting_properties #F7E5FF {
                +{field} force_write bool
                +{field} delete_extra_files bool
                +{field} ignore_files_matching_regex std::vector<std::string>
                +{field} delete_empty_directories bool
}

        class operation #F7E5FF {
                +{field} type operation_type
                +{field} reason operation_reason
}

        enum operation_type <<masd::enumeration>> #F2DAFD {
                +{field} create_only
                +{field} write
                +{field} ignore
                +{field} remove
}

        enum operation_reason <<masd::enumeration>> #F2DAFD {
                +{field} newly_generated
                +{field} changed_generated
                +{field} unchanged_generated
                +{field} already_exists
                +{field} ignore_generated
                +{field} force_write
                +{field} unexpected
                +{field} ignore_unexpected
                +{field} ignore_regex
}

        class Associatable <<masd::object_template>> #E3B6F6 {
                +{field} depends std::list<std::string>
                +{field} generates std::list<std::string>
                +{field} generated_by std::string
}

        class model_set <<Nameable>> #F7E5FF {
                +{field} models std::list<model>
}

        enum relation_status <<masd::enumeration, dogen::convertible>> #F2DAFD {
                +{field} not_relatable
                +{field} relatable
                +{field} facet_default
}

        class constant_relation <<Urnable, Labelable>> #F7E5FF {
                +{field} logical_model_element_id std::string
}

        class variable_relation <<Urnable>> #F7E5FF {
                +{field} type variable_relation_type
}

        class Urnable <<masd::object_template>> #E3B6F6 {
                +{field} original_urn std::string
                +{field} resolved_urn std::string
}

        enum variable_relation_type <<masd::enumeration>> #F2DAFD {
                +{field} self
                +{field} parent
                +{field} child
                +{field} transparent
                +{field} opaque
                +{field} associative_key
                +{field} visitation
}

        class relations #F7E5FF {
                +{field} status relation_status
                +{field} constant std::list<constant_relation>
                +{field} variable std::list<variable_relation>
                +{field} hard_coded std::list<hard_coded_relation>
}

        class hard_coded_relation #F7E5FF {
                +{field} value std::string
}

        class region <<Configurable, Provenance>> #F7E5FF {
                +{field} artefacts_by_archetype std::unordered_map<identification::entities::physical_meta_id, boost::shared_ptr<physical::entities::artefact>>
                +{field} archetype_for_role std::unordered_map<std::string, identification::entities::physical_meta_id>
                +{field} is_generatable bool
}

        class enablement_properties #F7E5FF {
                +{field} enabled bool
                +{field} overwrite bool
                +{field} facet_enabled boost::optional<bool>
                +{field} archetype_enabled boost::optional<bool>
                +{field} facet_overwrite boost::optional<bool>
                +{field} archetype_overwrite boost::optional<bool>
}

        class backend_properties <<MetaIdentifiable>> #F7E5FF {
                +{field} enabled bool
                +{field} file_path boost::filesystem::path
                +{field} technical_space_version std::string
                +{field} enable_backend_directories bool
                +{field} directory_name std::string
                +{field} computed_directory_name std::string
}

        class archetype_kind_properties <<MetaNameable>> #F7E5FF {
                +{field} file_extension std::string
}

        class facet_properties <<MetaIdentifiable>> #F7E5FF {
                +{field} enabled bool
                +{field} overwrite bool
                +{field} directory_name std::string
                +{field} computed_directory_name std::string
                +{field} postfix std::string
                +{field} computed_postfix std::string
}

        class archetype_properties <<MetaIdentifiable>> #F7E5FF {
                +{field} enabled bool
                +{field} overwrite boost::optional<bool>
                +{field} postfix std::string
                +{field} computed_postfix std::string
                +{field} backend_properties backend_properties
                +{field} facet_properties facet_properties
                +{field} part_properties part_properties
}

        class meta_model_properties #F7E5FF {
                +{field} output_directory_path boost::filesystem::path
                +{field} file_path boost::filesystem::path
                +{field} backend_properties std::unordered_map<identification::entities::physical_meta_id, backend_properties>
                +{field} facet_properties std::unordered_map<identification::entities::physical_meta_id, facet_properties>
                +{field} archetype_properties std::unordered_map<identification::entities::physical_meta_id, archetype_properties>
                +{field} archetype_kind_properties std::unordered_map<identification::entities::physical_meta_id, archetype_kind_properties>
                +{field} part_properties std::unordered_map<identification::entities::physical_meta_id, part_properties>
                +{field} enabled_backends std::unordered_set<identification::entities::physical_meta_id>
                +{field} enabled_archetype_for_element std::unordered_set<identification::entities::logical_meta_physical_id>
                +{field} project_path_properties project_path_properties
}

        class part_properties <<MetaIdentifiable>> #F7E5FF {
                +{field} file_path boost::filesystem::path
                +{field} relative_path boost::filesystem::path
                +{field} directory_name std::string
                +{field} computed_directory_name std::string
}

        class path_properties #F7E5FF {
                +{field} file_path boost::filesystem::path
                +{field} header_guard std::string
                +{field} inclusion_path boost::filesystem::path
                +{field} inclusion_directives inclusion_directives
                +{field} inclusion_dependencies std::list<std::string>
                +{field} using_dependencies std::list<std::string>
                +{field} relative_path boost::filesystem::path
}

        class project_path_properties #F7E5FF {
                +{field} include_directory_name std::string
                +{field} source_directory_name std::string
                +{field} disable_facet_directories bool
                +{field} header_file_extension std::string
                +{field} implementation_file_extension std::string
                +{field} tests_directory_name std::string
                +{field} templates_directory_name std::string
                +{field} templates_file_extension std::string
                +{field} enable_unique_file_names bool
                +{field} headers_output_directory std::string
                +{field} enable_backend_directories bool
                +{field} implementation_directory_full_path boost::filesystem::path
                +{field} include_directory_full_path boost::filesystem::path
                +{field} templates_directory_full_path boost::filesystem::path
}

        class MetaIdentifiable <<masd::object_template>> #E3B6F6 {
                +{field} meta_id identification::entities::physical_meta_id
}

        enum legacy_archetype_kind <<masd::enumeration>> #F2DAFD {
                +{field} visual_studio_solution
                +{field} visual_studio_project
                +{field} odb_options
                +{field} msbuild_targets
                +{field} tests_cmakelists
                +{field} source_cmakelists
                +{field} include_cmakelists
                +{field} cpp_header
                +{field} cpp_implementation
                +{field} tests_cpp_main
                +{field} tests_cpp_implementation
                +{field} templates
                +{field} csharp_implementation
}

        class relation_properties #F7E5FF {
                +{field} status relation_status
                +{field} relations std::list<std::string>
}

        class inclusion_directives #F7E5FF {
                +{field} primary std::string
                +{field} secondary std::list<std::string>
}

        class HasTechnicalSpace <<masd::object_template>> #E3B6F6 {
                +{field} technical_space identification::entities::technical_space
}

        class helper <<MetaElement, Associatable, HasTechnicalSpace>> #F7E5FF {
                +{field} relations relations
                +{field} part identification::entities::physical_meta_id
                +{field} family std::string
                +{field} owning_formatters std::list<identification::entities::physical_meta_id>
                +{field} owning_facets std::list<identification::entities::physical_meta_id>
}

}

namespace features #F2F2F2 {
        class facet_features <<masd::variability::feature_template_bundle>> #CCE2E2 {
                +{field} directory_name masd::variability::text
                +{field} postfix masd::variability::text
                +{field} overwrite masd::variability::boolean
}

        class archetype_features <<masd::variability::feature_template_bundle>> #CCE2E2 {
                +{field} postfix masd::variability::text
                +{field} overwrite masd::variability::boolean
}

        class initializer <<masd::variability::initializer>> #A9CDCD {
}

        class filesystem <<masd::variability::feature_bundle>> #BAD7D7 {
                +{field} force_write masd::variability::boolean
                +{field} delete_extra_files masd::variability::boolean
                +{field} ignore_files_matching_regex masd::variability::text_collection
                +{field} delete_empty_directories masd::variability::boolean
                +{field} enable_backend_directories masd::variability::boolean
}

        class enablement <<masd::variability::feature_template_bundle>> #CCE2E2 {
                +{field} enabled masd::variability::boolean
}

        class backend_features <<masd::variability::feature_template_bundle>> #CCE2E2 {
                +{field} directory_name masd::variability::text
}

        class path_features <<masd::variability::feature_bundle>> #BAD7D7 {
                +{field} headers_output_directory masd::variability::text
                +{field} source_directory_name masd::variability::text
                +{field} include_directory_name masd::variability::text
                +{field} tests_directory_name masd::variability::text
                +{field} templates_directory_name masd::variability::text
                +{field} header_file_extension masd::variability::text
                +{field} implementation_file_extension masd::variability::text
                +{field} templates_file_extension masd::variability::text
                +{field} enable_unique_file_names masd::variability::boolean
                +{field} disable_facet_directories masd::variability::boolean
}

        class directive_features <<masd::variability::feature_template_bundle>> #CCE2E2 {
                +{field} primary_inclusion_directive masd::variability::text
                +{field} secondary_inclusion_directive masd::variability::text_collection
}

        class inclusion_features <<masd::variability::feature_bundle>> #BAD7D7 {
                +{field} inclusion_required masd::variability::boolean
}

}

namespace transforms #F2F2F2 {
        class context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
                +{field} diffing_configuration boost::optional<diffing_configuration>
                +{field} reporting_configuration boost::optional<reporting_configuration>
                +{field} dry_run_mode_enabled bool
                +{field} feature_model boost::shared_ptr<variability::entities::feature_model>
                +{field} meta_model boost::shared_ptr<entities::meta_model>
                +{field} tracer boost::shared_ptr<tracing::tracer>
                +{field} output_directory_path boost::filesystem::path
}

        class transform_exception <<masd::exception>> #E8C2F8 {
}

        class file_generation_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class write_artefacts_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class update_outputting_properties_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class remove_files_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class generate_report_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class model_post_processing_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class generate_diffs_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class gather_external_artefacts_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class generate_patch_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class mock_content_filler_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class operation_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class merge_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class meta_model_production_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class compute_name_indices_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class minimal_context <<dogen::typeable, dogen::pretty_printable>> #F7E5FF {
                +{field} tracer boost::shared_ptr<tracing::tracer>
}

        class meta_model_assembly_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class compute_template_instantiation_domains <<dogen::handcrafted::typeable>> #FFFACD {
}

        class model_population_chain <<dogen::handcrafted::typeable>> #FFFACD {
}

        class meta_model_properties_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class enablement_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class generability_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class paths_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class remove_regions_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class legacy_paths_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

        class relations_transform <<dogen::handcrafted::typeable>> #FFFACD {
}

}

class registrar <<masd::serialization::type_registrar>> #00FF00 {
}

@enduml
