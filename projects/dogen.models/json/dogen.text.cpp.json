{
  "documentation": "CPP is the C++ backend in the default generation kernel.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "dogen.text.cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "dogen",
    "masd.injection.reference": "dogen.variability",
    "masd.injection.reference": "dogen.tracing",
    "masd.injection.reference": "dogen.logical",
    "masd.injection.reference": "dogen.text",
    "masd.injection.reference": "masd",
    "masd.injection.reference": "masd.variability",
    "masd.injection.reference": "dogen.profiles",
    "masd.injection.input_technical_space": "cpp",
    "masd.physical.ignore_files_matching_regex": ".*/test/.*",
    "masd.physical.ignore_files_matching_regex": ".*/tests/.*",
    "masd.variability.profile": "dogen.profiles.base.default_profile"
  },
  "elements": [
    {
      "name": "transforms",
      "documentation": "Formatters for the C++ model.\n\nTakes types in the C++ model and creates a file\nrepresentation of these types according to the\ngrammar of the C++ technical space.\n",
      "stereotypes": [
        "masd::physical::backend"
      ],
      "tagged_values": {
        "masd.injection.dia.comment": "true",
        "masd.physical.backend_name": "cpp"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::types",
      "documentation": "Formatters for the types facet of the\nC++ technical space.\n",
      "stereotypes": [
        "masd::physical::facet"
      ],
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::types::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_to_text_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable::header_only"
      ],
      "tagged_values": {
        "masd.cpp.types.class_forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object"
    },
    {
      "name": "model_to_text_cpp_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash",
      "documentation": "Formatters for the hash facet of the\nC++ technical space.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::hash::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::exception_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::namespace_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::visitor_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io",
      "documentation": "Formatters for the io facet of the\nC++ technical space.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::io::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::enum_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization",
      "documentation": "Formatters for the boost serialisation\nfacet of the C++ technical space.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::serialization::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data",
      "documentation": "Formatters for the test_data facet\nof the C++ technical space.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::test_data::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::enum_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb",
      "documentation": "Formatters for the odb facet of the\nC++ technical space.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::odb::class_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::registrar",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::registrar_error",
      "documentation": "There was an error in the registrar.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "workflow_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::formatting_error",
      "documentation": "An error occurred whilst formatting.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::repository",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "tagged_values": {
        "masd.cpp.io.enabled": "true",
        "masd.cpp.io.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stock_artefact_formatters_by_meta_name",
          "type": "std::unordered_map<std::string, std::forward_list<std::shared_ptr<transforms::model_to_text_transform>>>"
        },
        {
          "name": "stock_artefact_formatters_by_archetype",
          "type": "std::unordered_map<std::string, std::shared_ptr<transforms::model_to_text_transform>>"
        },
        {
          "name": "stock_artefact_formatters",
          "type": "std::forward_list<std::shared_ptr<transforms::model_to_text_transform>>"
        },
        {
          "name": "helper_formatters",
          "type": "std::unordered_map<std::string, std::unordered_map<std::string, std::list<std::shared_ptr<transforms::helper_transform>>>>"
        }
      ]
    },
    {
      "name": "transforms::workflow",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "registrar_",
          "type": "transforms::registrar"
        }
      ]
    },
    {
      "name": "transforms::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables",
      "documentation": "Formattables contains all types required by the formatters\nand those used to generate them.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "formattables::workflow",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::inclusion_constants",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::locator",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::dependencies_builder",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::building_error",
      "documentation": "An error occurred while the factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::artefact_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "file_path",
          "type": "boost::filesystem::path"
        },
        {
          "name": "header_guard",
          "type": "std::string"
        },
        {
          "name": "inclusion_dependencies",
          "type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": "formattables::dependencies_builder_factory",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::assistant",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "tagged_values": {
        "masd.cpp.types.class_forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostringstream"
        }
      ]
    },
    {
      "name": "transforms::serialization::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::context",
      "documentation": "Supplies additional information required for formatting.\n",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "model",
          "type": "formattables::model"
        },
        {
          "name": "element_properties",
          "type": "formattables::element_properties"
        },
        {
          "name": "helpers",
          "type": "std::unordered_map<std::string, std::unordered_map<std::string, std::list<std::shared_ptr<transforms::helper_transform>>>>"
        }
      ]
    },
    {
      "name": "transforms::helper_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "tagged_values": {
        "masd.cpp.types.class_forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::building_error",
      "documentation": "An error occurred whilst the factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::helper_descriptor",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "family",
          "type": "std::string"
        },
        {
          "name": "namespaces",
          "type": "std::list<std::string>"
        },
        {
          "name": "name_identifiable",
          "type": "std::string"
        },
        {
          "name": "name_qualified",
          "type": "std::string"
        },
        {
          "name": "name_tree_qualified",
          "type": "std::string"
        },
        {
          "name": "name_tree_identifiable",
          "type": "std::string"
        },
        {
          "name": "streaming_properties",
          "type": "boost::optional<formattables::streaming_properties>"
        },
        {
          "name": "is_simple_type",
          "type": "bool"
        },
        {
          "name": "requires_hashing_helper",
          "type": "bool"
        },
        {
          "name": "is_circular_dependency",
          "type": "bool"
        },
        {
          "name": "is_pointer",
          "type": "bool"
        }
      ]
    },
    {
      "name": "formattables::helper_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "current",
          "type": "formattables::helper_descriptor"
        },
        {
          "name": "direct_descendants",
          "type": "std::list<formattables::helper_descriptor>"
        },
        {
          "name": "in_inheritance_relationship",
          "type": "bool"
        }
      ]
    },
    {
      "name": "formattables::element_properties",
      "documentation": "All of the properties associated with an element.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "aspect_properties",
          "type": "formattables::aspect_properties"
        },
        {
          "name": "artefact_properties",
          "type": "std::unordered_map<std::string, formattables::artefact_properties>"
        },
        {
          "name": "helper_properties",
          "type": "std::list<formattables::helper_properties>"
        },
        {
          "name": "canonical_archetype_to_archetype",
          "type": "std::unordered_map<std::string, std::string>"
        },
        {
          "name": "attribute_level_test_data_properties",
          "type": "std::unordered_map<std::string, test_data_properties>"
        }
      ]
    },
    {
      "name": "formattables::aspect_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "requires_manual_default_constructor",
          "type": "bool"
        },
        {
          "name": "requires_manual_move_constructor",
          "type": "bool"
        },
        {
          "name": "requires_stream_manipulators",
          "type": "bool"
        }
      ]
    },
    {
      "name": "transforms::inclusion_support_types",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "not_supported",
          "type": "",
          "documentation": "This formatter does not export an inclusion directive.\n"
        },
        {
          "name": "regular_support",
          "type": "",
          "documentation": "This formatter exports a regular inclusion directive.\n"
        },
        {
          "name": "canonical_support",
          "type": "",
          "documentation": "This formatter exports a regular inclusion directive and is the default for its facet\nand element.\n"
        }
      ]
    },
    {
      "name": "transforms::types::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::builtin_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::formattable",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "element",
          "type": "boost::shared_ptr<logical::entities::element>"
        },
        {
          "name": "element_properties",
          "type": "formattables::element_properties"
        },
        {
          "name": "artefacts",
          "type": "std::unordered_map<std::string, boost::shared_ptr<physical::entities::artefact>>"
        }
      ]
    },
    {
      "name": "formattables::adapter",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::inclusion_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::reducer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::model_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::file_path_and_guard_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::aspect_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::helper_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::adaptation_error",
      "documentation": "An error occurred during adaptation.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::expansion_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::odb_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::model",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "logical::entities::name"
        },
        {
          "name": "streaming_properties",
          "type": "std::unordered_map<std::string, formattables::streaming_properties>"
        },
        {
          "name": "formattables",
          "type": "std::unordered_map<std::string, formattables::formattable>"
        },
        {
          "name": "facet_properties",
          "type": "std::unordered_map<std::string, formattables::facet_properties>"
        },
        {
          "name": "cpp_standard",
          "type": "formattables::cpp_standards"
        },
        {
          "name": "odb_databases",
          "type": "std::list<std::string>"
        },
        {
          "name": "odb_sql_name_case",
          "type": "std::string"
        },
        {
          "name": "project_items",
          "type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": "formattables::facet_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "directory",
          "type": "std::string"
        },
        {
          "name": "enabled",
          "type": "bool"
        }
      ]
    },
    {
      "name": "formattables::facet_directory_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::canonical_archetype_resolver",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::canonical_archetype_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::resolution_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::streaming_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "requires_quoting",
          "type": "bool"
        },
        {
          "name": "string_conversion_method",
          "type": "std::string"
        },
        {
          "name": "remove_unprintable_characters",
          "type": "bool"
        }
      ]
    },
    {
      "name": "formattables::streaming_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::locator_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "facet_configurations",
          "type": "std::unordered_map<std::string, formattables::locator_facet_configuration>"
        },
        {
          "name": "archetype_configurations",
          "type": "std::unordered_map<std::string, formattables::locator_archetype_configuration>"
        },
        {
          "name": "include_directory_name",
          "type": "std::string"
        },
        {
          "name": "source_directory_name",
          "type": "std::string"
        },
        {
          "name": "disable_facet_directories",
          "type": "bool"
        },
        {
          "name": "header_file_extension",
          "type": "std::string"
        },
        {
          "name": "implementation_file_extension",
          "type": "std::string"
        },
        {
          "name": "backend_directory_name",
          "type": "std::string"
        },
        {
          "name": "tests_directory_name",
          "type": "std::string"
        },
        {
          "name": "templates_directory_name",
          "type": "std::string"
        },
        {
          "name": "templates_file_extension",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "formattables::locator_facet_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "directory",
          "type": "std::string"
        },
        {
          "name": "postfix",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "formattables::locator_archetype_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "facet_directory",
          "type": "std::string"
        },
        {
          "name": "facet_postfix",
          "type": "std::string"
        },
        {
          "name": "archetype_postfix",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "transforms::wale_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::stitch_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::smart_pointer_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::smart_pointer_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::time_duration_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::ptree_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::associative_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::date_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::optional_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::path_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::pair_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::sequence_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::ptime_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::variant_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::associative_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::smart_pointer_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::ptree_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::optional_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::pair_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::sequence_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::variant_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::string_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::path_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::associative_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::char_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::bool_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::date_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::domain_type_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::number_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::optional_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::pair_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::path_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::ptime_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::ptree_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::sequence_container_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::smart_pointer_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::string_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::time_duration_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::variant_helper",
      "stereotypes": [
        "dogen::cpp::helper_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::inserter_implementation_helper",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "tagged_values": {
        "masd.cpp.types.class_implementation.formatting_style": "stitch",
        "masd.cpp.types.class_implementation.overwrite": "true"
      },
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::location_error",
      "documentation": "An error occurred while the locator was creating a path.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::helper_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "helper_families",
          "type": "std::unordered_map<std::string, std::string>"
        },
        {
          "name": "streaming_properties",
          "type": "std::unordered_map<std::string, formattables::streaming_properties>"
        }
      ]
    },
    {
      "name": "transforms::types::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::primitive_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::primitive_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::hash::primitive_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::io::primitive_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::test_data::primitive_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::primitive_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::directive_group_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "by_id",
          "type": "std::unordered_map<std::string, std::unordered_map<std::string, formattables::directive_group>>"
        }
      ]
    },
    {
      "name": "formattables::directive_group_repository_factory",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::directive_group",
      "documentation": "Represents the group of inclusion directives associated with a name and an archetype.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "primary",
          "type": "std::string",
          "documentation": "The main inclusion directive needed for this element.\n"
        },
        {
          "name": "secondary",
          "type": "std::list<std::string>",
          "documentation": "Any other directives that are also needed for this element.\n"
        }
      ]
    },
    {
      "name": "formattables::build_files_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::cpp_standards",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "cpp_98",
          "type": ""
        },
        {
          "name": "cpp_11",
          "type": ""
        },
        {
          "name": "cpp_14",
          "type": ""
        },
        {
          "name": "cpp_17",
          "type": ""
        }
      ]
    },
    {
      "name": "formattables::cpp_standard_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::header_guard_factory",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "formattables::test_data_properties",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "maximum_size",
          "type": "unsigned int"
        },
        {
          "name": "prefix",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "formattables::test_data_properties_expander",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::repository_factory",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests",
      "documentation": "Formatters that generate tests for generated\ncode.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::tests::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests::class_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests::enum_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::feature_template_bundle_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::feature_template_bundle_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::variability_initializer_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::variability_initializer_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "feature_initializer",
      "stereotypes": [
        "masd::variability::initializer"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::global_features",
      "stereotypes": [
        "masd::variability::feature_bundle"
      ],
      "tagged_values": {
        "masd.variability.generate_static_configuration": "false",
        "masd.variability.key_prefix": "masd.cpp"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "headers_output_directory",
          "type": "masd::variability::text",
          "documentation": "Override location of public c++ headers.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "directory",
          "type": "masd::variability::text",
          "value": "\"cpp\"",
          "documentation": "Directory in which to place code for the C++ backend.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "inclusion_required",
          "type": "masd::variability::boolean",
          "value": "\"true\"",
          "documentation": "If true, inclusion is required for this modeling element.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "source_directory_name",
          "type": "masd::variability::text",
          "value": "\"src\"",
          "documentation": "Directory in which to place C++ source files.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "include_directory_name",
          "type": "masd::variability::text",
          "value": "\"include\"",
          "documentation": "Directory in which to place include headers.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "tests_directory_name",
          "type": "masd::variability::text",
          "value": "\"generated_tests\"",
          "documentation": "Directory in which to place c++ tests.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "templates_directory_name",
          "type": "masd::variability::text",
          "value": "\"templates\"",
          "documentation": "Directory in which to place text templates.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "header_file_extension",
          "type": "masd::variability::text",
          "value": "\"hpp\"",
          "documentation": "Extension to use for C++ header files.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "implementation_file_extension",
          "type": "masd::variability::text",
          "value": "\"cpp\"",
          "documentation": "Extension to use for C++ implementation files.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "templates_file_extension",
          "type": "masd::variability::text",
          "value": "\"wale\"",
          "documentation": "Extension to use for text templates.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "enable_unique_file_names",
          "type": "masd::variability::boolean",
          "value": "\"true\"",
          "documentation": "If true, make all file names unique within a model.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "aspect.requires_manual_default_constructor",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, the modeling element requires a manual defaul constructor.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "aspect.requires_manual_move_constructor",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, the modeling element requires a manual move constructor.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "aspect.requires_stream_manipulators",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, the modeling element requires stream manipulators.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "disable_facet_directories",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, facet directories will not be used.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "standard",
          "type": "masd::variability::text",
          "value": "\"c++-14\"",
          "documentation": "Which version of C++ to use.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global"
          }
        },
        {
          "name": "helper.family",
          "type": "masd::variability::text",
          "value": "\"Default\"",
          "documentation": "Which family of helpers to use for this modeling element.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "streaming.string_conversion_method",
          "type": "masd::variability::text",
          "value": "\"\"",
          "documentation": "Which conversion method to use to convert strings.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "streaming.requires_quoting",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, streaming this type must be preceeded by quoting.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        },
        {
          "name": "streaming.remove_unprintable_characters",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, streaming this type requires removing unprintable characters.\n",
          "tagged_values": {
            "masd.variability.binding_point": "element"
          }
        }
      ]
    },
    {
      "name": "transforms::archetype_features",
      "stereotypes": [
        "masd::variability::feature_template_bundle"
      ],
      "tagged_values": {
        "masd.variability.default_binding_point": "element",
        "masd.variability.instantiation_domain_name": "masd.cpp.archetype"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "primary_inclusion_directive",
          "type": "masd::variability::text"
        },
        {
          "name": "secondary_inclusion_directive",
          "type": "masd::variability::text_collection"
        }
      ]
    },
    {
      "name": "transforms::lexical_cast",
      "documentation": "Formatters related to conversions from and to\nstring.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::lexical_cast::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::lexical_cast::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::lexical_cast::enum_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "cpp_artefact_transform_header",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "class {{class.simple_name}} final : public model_to_text_transform {\npublic:\n    physical::entities::archetype static_archetype() const;\n    physical::entities::archetype archetype() const override;\n\npublic:\n    std::list<std::string> inclusion_dependencies(\n        const formattables::dependencies_builder_factory& f,\n        const logical::entities::element& e) const override;\n\n    inclusion_support_types inclusion_support_type() const override;\n\n    boost::filesystem::path inclusion_path(\n        const formattables::locator& l,\n        const logical::entities::name& n) const override;\n\n    boost::filesystem::path full_path(\n        const formattables::locator& l,\n        const logical::entities::name& n) const override;\n\npublic:\n    void apply(const context& ctx, const logical::entities::element& e,\n        physical::entities::artefact& a) const override;\n};\n"
        }
      ]
    },
    {
      "name": "cpp_artefact_transform_implementation",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "physical::entities::archetype {{class.simple_name}}::static_archetype() const {\n    static physical::entities::archetype r([]() {\n        physical::entities::archetype r;\n        using pmnf = physical::helpers::meta_name_factory;\n        r.meta_name(pmnf::make(cpp::traits::backend_sn(),\n            traits::facet_sn(), traits::{{archetype.simple_name}}_archetype_sn()));\n        using lmnf = {{meta_name_factory}};\n        r.logical_meta_element_id(lmnf::make_{{meta_element}}_name().qualified().dot());\n        r.text_to_text_transform({{text_to_text_transform}});\n        return r;\n    }());\n    return r;\n}\n\nphysical::entities::archetype {{class.simple_name}}::archetype() const {\n    return static_archetype();\n}\n\ninclusion_support_types {{class.simple_name}}::inclusion_support_type() const {\n    return inclusion_support_types::not_supported;\n}\n\nboost::filesystem::path {{class.simple_name}}::inclusion_path(\n    const formattables::locator& /*l*/, const logical::entities::name& n) const {\n\n    using namespace dogen::utility::log;\n    static logger lg(logger_factory(archetype().meta_name().qualified()));\n    static const std::string not_supported(\"Inclusion path is not supported: \");\n\n    BOOST_LOG_SEV(lg, error) << not_supported << n.qualified().dot();\n    BOOST_THROW_EXCEPTION(formatting_error(not_supported + n.qualified().dot()));\n}\n\nboost::filesystem::path {{class.simple_name}}::full_path(\n    const formattables::locator& l, const logical::entities::name& n) const {\n    return l.make_full_path_for_cpp_implementation(n, archetype().meta_name().qualified());\n}\n"
        }
      ]
    },
    {
      "name": "cpp_artefact_transform_implementation_header",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "physical::entities::archetype {{class.simple_name}}::static_archetype() const {\n    static physical::entities::archetype r([]() {\n        physical::entities::archetype r;\n        using pmnf = physical::helpers::meta_name_factory;\n        r.meta_name(pmnf::make(cpp::traits::backend_sn(),\n            traits::facet_sn(), traits::{{archetype.simple_name}}_archetype_sn()));\n        using lmnf = {{meta_name_factory}};\n        r.logical_meta_element_id(lmnf::make_{{meta_element}}_name().qualified().dot());\n        r.text_to_text_transform({{text_to_text_transform}});\n        return r;\n    }());\n    return r;\n}\n\nphysical::entities::archetype {{class.simple_name}}::archetype() const {\n    return static_archetype();\n}\n\ninclusion_support_types {{class.simple_name}}::inclusion_support_type() const {\n    return inclusion_support_types::{{class.inclusion_support_type}};\n}\n\nboost::filesystem::path {{class.simple_name}}::inclusion_path(\n    const formattables::locator& l, const logical::entities::name& n) const {\n    return l.make_inclusion_path_for_cpp_header(n, archetype().meta_name().qualified());\n}\n\nboost::filesystem::path {{class.simple_name}}::full_path(\n    const formattables::locator& l, const logical::entities::name& n) const {\n    return l.make_full_path_for_cpp_header(n, archetype().meta_name().qualified());\n}\n"
        }
      ]
    },
    {
      "name": "cpp_helper_transform_header",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "class {{class.simple_name}} : public helper_transform {\npublic:\n    std::string id() const override;\n    std::string family() const override;\n    std::list<std::string> owning_formatters() const override;\n    std::list<std::string> owning_facets() const override;\n    std::string helper_name() const override;\n    bool is_enabled(const assistant& a,\n        const formattables::helper_properties& hc) const override;\n    void apply(assistant& a,\n        const formattables::helper_properties& hc) const override;\n};\n"
        }
      ]
    },
    {
      "name": "cpp_helper_transform_implementation",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "std::string {{class.simple_name}}::id() const {\n    static auto r(std::string(\"<\") + traits::facet_qn() + std::string(\">\") +\n        std::string(\"<\") + helper_name() + std::string(\">\"));\n    return r;\n}\n\nstd::string {{class.simple_name}}::family() const {\n    static std::string r(\"{{helper.family}}\");\n    return r;\n}\n\nstd::list<std::string>\n{{class.simple_name}}::owning_formatters() const {\n    static auto r(std::list<std::string> {\n        io::traits::class_implementation_archetype_qn(),\n        io::traits::primitive_implementation_archetype_qn(),\n        types::traits::class_implementation_archetype_qn(),\n        types::traits::primitive_implementation_archetype_qn()\n    });\n    return r;\n}\n\nstd::list<std::string>\n{{class.simple_name}}::owning_facets() const {\n    static auto r(std::list<std::string> {\n        io::traits::facet_qn(), types::traits::facet_qn()\n    });\n    return r;\n}\n\nstd::string {{class.simple_name}}::helper_name() const {\n    static std::string r(\"{{class.simple_name}}\");\n    return r;\n}\n\nbool {{class.simple_name}}::is_enabled(const assistant& a,\n    const formattables::helper_properties& hp) const {\n    return a.is_streaming_enabled(hp);\n}\n"
        }
      ]
    },
    {
      "name": "cpp_helper_transform_implementation_enabled",
      "stereotypes": [
        "masd::templating::logic_less_templates"
      ],
      "tagged_values": {
        "masd.cpp.templates.logic_less_template.overwrite": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "content",
          "type": "",
          "documentation": "std::string {{class.simple_name}}::id() const {\n    static auto r(std::string(\"<\") + traits::facet_qn() + std::string(\">\") +\n        std::string(\"<\") + helper_name() + std::string(\">\"));\n    return r;\n}\n\nstd::string {{class.simple_name}}::family() const {\n    static std::string r(\"{{helper.family}}\");\n    return r;\n}\n\nstd::list<std::string>\n{{class.simple_name}}::owning_formatters() const {\n    static auto r(std::list<std::string> {\n        traits::class_implementation_archetype_qn(),\n        traits::primitive_implementation_archetype_qn()\n    });\n    return r;\n}\n\nstd::list<std::string>\n{{class.simple_name}}::owning_facets() const {\n    static auto r(std::list<std::string> {\n        traits::facet_qn()\n    });\n    return r;\n}\n\nstd::string {{class.simple_name}}::helper_name() const {\n    static std::string r(\"{{class.simple_name}}\");\n    return r;\n}\n\nbool {{class.simple_name}}::is_enabled(const assistant& /*a*/,\n    const formattables::helper_properties& /*hp*/) const {\n    return true;\n}\n"
        }
      ]
    },
    {
      "name": "transforms::templates",
      "documentation": "Formatters related to templating.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::templates::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::templates::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::templates::logic_less_template_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::class_forward_declarations_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::visitor_forward_declarations_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::class_forward_declarations_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::primitive_forward_declarations_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::primitive_forward_declarations_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::type_registrar_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::serialization::type_registrar_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "registrar",
      "stereotypes": [
        "masd::serialization::type_registrar"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::visual_studio",
      "documentation": "Formatters related to Visual Studio support.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::visual_studio::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::visual_studio::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::visual_studio::project_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::visual_studio::solution_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests::main_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::object_odb_options_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::primitive_odb_options_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::main_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "main",
      "stereotypes": [
        "masd::entry_point",
        "dogen::untypable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::odb::common_odb_options_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::visual_studio::msbuild_targets_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::build",
      "documentation": "Formatters related to build files.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::build::source_cmakelists_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::build::include_cmakelists_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::build::initializer",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::build::traits",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::tests::cmakelists_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "CMakeLists",
      "stereotypes": [
        "masd::build::cmakelists",
        "dogen::handcrafted::cmake"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::feature_bundle_header_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::feature_bundle_implementation_transform",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::archetype_class_header_transform",
      "documentation": "A comment.\n",
      "stereotypes": [
        "masd::physical::archetype"
      ],
      "tagged_values": {
        "masd.physical.part_id": "masd.cpp.public_headers",
        "masd.physical.logical_meta_element_id": "dogen.logical.entities.physical_archetype",
        "masd.wale.kvp.class.simple_name": "archetype_class_header_transform",
        "masd.wale.kvp.archetype.simple_name": "archetype_class_header",
        "masd.wale.kvp.class.inclusion_support_type": "regular_support",
        "masd.wale.kvp.meta_element": "physical_archetype",
        "masd.wale.kvp.meta_name_factory": "logical::helpers::meta_name_factory",
        "masd.wale.kvp.text_to_text_transform": "\"dogen.text.transforms.stitch_transform\""
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stitch_template_content",
          "type": "",
          "documentation": "<#@ masd.stitch.stream_variable_name=ast.stream() #>\n<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::types #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.physical/types/helpers/meta_name_factory.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.logical/types/entities/physical/archetype.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.logical/types/helpers/meta_name_factory.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/assistant.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/types/archetype_class_header_transform.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/traits.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/types/traits.hpp\" #>\n<#$ stitch.wale.template_instantiation_result #>\n<#+\n\nstd::list<std::string> archetype_class_header_transform::inclusion_dependencies(\n    const formattables::dependencies_builder_factory& f,\n    const logical::entities::element& /*e*/) const {\n    static std::list<std::string> r;\n\n    auto builder(f.make());\n    builder.add_as_user(\"dogen.text.cpp/types/transforms/model_to_text_transform.hpp\");\n\n    return builder.build();\n}\n\nvoid archetype_class_header_transform::apply(const context& ctx, const logical::entities::element& e,\n    physical::entities::artefact& a) const {\n    assistant ast(ctx, e, archetype().meta_name(), true/*requires_header_guard*/, a);\n    const auto& o(ast.as<logical::entities::physical::archetype>(e));\n\n    {\n        auto sbf(ast.make_scoped_boilerplate_formatter(o));\n        {\n            const auto ns(ast.make_namespaces(o.name()));\n            auto snf(ast.make_scoped_namespace_formatter(ns));\n#>\nclass <#= o.name().simple() #> final : public model_to_text_transform {\npublic:\n    physical::entities::archetype static_archetype() const;\n    physical::entities::archetype archetype() const override;\n\npublic:\n    std::list<std::string> inclusion_dependencies(\n        const formattables::dependencies_builder_factory& f,\n        const logical::entities::element& e) const override;\n\n    inclusion_support_types inclusion_support_type() const override;\n\n    boost::filesystem::path inclusion_path(\n        const formattables::locator& l,\n        const logical::entities::name& n) const override;\n\n    boost::filesystem::path full_path(\n        const formattables::locator& l,\n        const logical::entities::name& n) const override;\n\npublic:\n    void apply(const context& ctx, const logical::entities::element& e,\n        physical::entities::artefact& a) const override;\n};\n<#+\n        } // snf\n#>\n\n<#+\n    } // sbf\n    ast.update_artefact();\n}\n\n#>\n"
        },
        {
          "name": "wale_template_reference",
          "type": "",
          "value": "cpp_artefact_transform_implementation_header"
        }
      ]
    },
    {
      "name": "transforms::public_headers",
      "documentation": "Contains the header files that are publicly visible.\n",
      "stereotypes": [
        "masd::physical::part"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "external_modules_path_contribution",
          "type": "",
          "value": "none"
        },
        {
          "name": "model_modules_path_contribution",
          "type": "",
          "value": "as_path_components"
        },
        {
          "name": "facet_path_contribution",
          "type": "",
          "value": "as_directories"
        },
        {
          "name": "internal_modules_path_contribution",
          "type": "",
          "value": "as_directories"
        },
        {
          "name": "requires_relative_path",
          "type": "",
          "value": "true"
        }
      ]
    },
    {
      "name": "transforms::standard_header_file",
      "documentation": "Header file generated by Dogen.\n",
      "stereotypes": [
        "masd::physical::archetype_kind"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "file_extension",
          "type": "",
          "value": "hpp"
        }
      ]
    },
    {
      "name": "transforms::types::archetype_class_header_transform_old",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::archetype_class_implementation_transform_old",
      "stereotypes": [
        "dogen::cpp::artefact_transform"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::types::archetype_class_implementation_transform",
      "documentation": "A comment.\n",
      "stereotypes": [
        "masd::physical::archetype"
      ],
      "tagged_values": {
        "masd.physical.part_id": "masd.cpp.public_headers",
        "masd.physical.logical_meta_element_id": "dogen.logical.entities.physical_archetype",
        "masd.wale.kvp.class.simple_name": "archetype_class_implementation_transform",
        "masd.wale.kvp.archetype.simple_name": "archetype_class_implementation",
        "masd.wale.kvp.meta_element": "physical_archetype",
        "masd.wale.kvp.meta_name_factory": "logical::helpers::meta_name_factory",
        "masd.wale.kvp.text_to_text_transform": "\"dogen.text.transforms.stitch_transform\""
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stitch_template_content",
          "type": "",
          "documentation": "<#@ masd.stitch.stream_variable_name=ast.stream() #>\n<#@ masd.stitch.containing_namespaces=dogen::text::cpp::transforms::types #>\n<#@ masd.stitch.inclusion_dependency=<boost/throw_exception.hpp> #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/formatting_error.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.utility/types/log/logger.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.physical/types/helpers/meta_name_factory.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.logical/types/entities/physical/archetype.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.logical/types/helpers/meta_name_factory.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/assistant.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/types/archetype_class_implementation_transform.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/traits.hpp\" #>\n<#@ masd.stitch.inclusion_dependency=\"dogen.text.cpp/types/transforms/types/traits.hpp\" #>\n<#$ stitch.wale.template_instantiation_result #>\n<#+\n\nstd::list<std::string> archetype_class_implementation_transform::inclusion_dependencies(\n    const formattables::dependencies_builder_factory& /*f*/,\n    const logical::entities::element& /*e*/) const {\n    static std::list<std::string> r;\n    return r;\n}\n\nvoid archetype_class_implementation_transform::apply(const context& ctx, const logical::entities::element& e,\n    physical::entities::artefact& a) const {\n    assistant ast(ctx, e, archetype().meta_name(), false/*requires_header_guard*/, a);\n    const auto& arch(ast.as<logical::entities::physical::archetype>(e));\n    a.overwrite(true);\n    ast.update_artefact();\n    a.content(arch.rendered_stitch_template());\n}\n\n#>\n"
        },
        {
          "name": "wale_template_reference",
          "type": "",
          "value": "cpp_artefact_transform_implementation"
        }
      ]
    }
  ]
}
