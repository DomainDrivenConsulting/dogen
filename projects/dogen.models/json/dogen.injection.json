{
  "documentation": "Provides support for encoding and decoding of external models.\n\nAn external model is defined as:\n\n- a third-party format that is not owned or controlled by\n  Dogen, such as Dia;\n- a Dogen format designed for interoperability (JSON).\n\nExternal models are converted into an intermediate format called\nthe @e injection model, because it is the original entry point into\nthe dogen processing pipeline. It also reflects the notion that we\nare injecting external technical spaces into the MASD technical\ntechnical space.\n\nA @e codec must be created for each external model that is to be\ninjected, providing a transformation between the native formats\nand the injection model. The codecs are created in their own models,\nfollowing the naming convention injection.X for a given codec X.\nThey then register against the injection registrar. Note that for a\ngiven file extension, there can only be one and only one codec to\nmanage it.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "dogen.injection",
    "masd.injection.input_technical_space": "cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "dogen.variability",
    "masd.injection.reference": "dogen.tracing",
    "masd.injection.reference": "masd",
    "masd.injection.reference": "masd.variability",
    "masd.injection.reference": "dogen.profiles",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.delete_empty_directories": "true",
    "masd.generation.cpp.enabled": "true",
    "masd.generation.cpp.standard": "c++-17",
    "masd.generation.cpp.msbuild.enabled": "false",
    "masd.generation.cpp.visual_studio.project.enabled": "false",
    "masd.generation.cpp.visual_studio.solution.enabled": "false",
    "masd.generation.csharp.enabled": "false",
    "masd.variability.profile": "dogen.profiles.base.default_profile"
  },
  "elements": [
    {
      "name": "transforms",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::encoding_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable::header_only"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::registrar",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::registrar_error",
      "documentation": "A registration error has occurred.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_production_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_to_model_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "meta_model::model",
      "documentation": "Represents an external model.\n",
      "stereotypes": [
        "Element"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "elements",
          "type": "std::list<element>"
        },
        {
          "name": "input_technical_space",
          "type": "std::string",
          "documentation": "Technical space to which the model belongs, within the injection space.\n"
        },
        {
          "name": "references",
          "type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": "meta_model::element",
      "documentation": "Represents an element from an external model.\n",
      "stereotypes": [
        "Element"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "parents",
          "type": "std::list<std::string>"
        },
        {
          "name": "attributes",
          "type": "std::list<attribute>"
        },
        {
          "name": "fallback_element_type",
          "type": "std::string",
          "documentation": "Stereotype conveying element type, to be used when none is provided with the\nmain stereotypes.\n"
        },
        {
          "name": "can_be_primitive_underlier",
          "type": "bool"
        },
        {
          "name": "in_global_module",
          "type": "bool"
        },
        {
          "name": "can_be_enumeration_underlier",
          "type": "bool"
        },
        {
          "name": "is_default_enumeration_type",
          "type": "bool"
        },
        {
          "name": "is_associative_container",
          "type": "bool"
        },
        {
          "name": "is_floating_point",
          "type": "bool"
        }
      ]
    },
    {
      "name": "meta_model::attribute",
      "stereotypes": [
        "Element"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "type",
          "type": "std::string"
        },
        {
          "name": "value",
          "type": "std::string",
          "documentation": "Default value for this attribute, if any.\n"
        }
      ]
    },
    {
      "name": "transforms::context",
      "stereotypes": [
        "dogen::typeable",
        "dogen::pretty_printable"
      ],
      "tagged_values": {
        "masd.generation.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "data_directories",
          "type": "std::vector<boost::filesystem::path>"
        },
        {
          "name": "feature_model",
          "type": "boost::shared_ptr<variability::meta_model::feature_model>"
        },
        {
          "name": "archetype_location_repository",
          "type": "boost::shared_ptr<archetypes::location_repository>"
        },
        {
          "name": "tracer",
          "type": "boost::shared_ptr<tracing::tracer>"
        },
        {
          "name": "compatibility_mode",
          "type": "bool"
        }
      ]
    },
    {
      "name": "transforms::transformation_error",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::decoding_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable::header_only"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::model_set",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "target",
          "type": "model"
        },
        {
          "name": "references",
          "type": "std::list<model>"
        }
      ]
    },
    {
      "name": "helpers",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "helpers::references_resolver",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::model_set_production_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::input_technical_space_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::references_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::reference_resolution_exception",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::Taggable",
      "documentation": "Ability to contain tagged values.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "tagged_values",
          "type": "std::list<std::pair<std::string, std::string>>"
        }
      ]
    },
    {
      "name": "meta_model::Stereotypable",
      "documentation": "Ability to have stereotypes.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "stereotypes",
          "type": "std::list<std::string>"
        }
      ]
    },
    {
      "name": "meta_model::Documentable",
      "documentation": "Ability to provide documentation.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "documentation",
          "type": "std::string",
          "documentation": "Code comments.\n\nThese are expected to follow the grammar of the comment processing tools\nof the technical space in question, e.g. Doxygen for C++, JavaDoc for Java, etc.\n"
        }
      ]
    },
    {
      "name": "meta_model::Nameable",
      "documentation": "Ability to have a name.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "meta_model::Configurable",
      "documentation": "Ability to have meta-data associated.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "configuration",
          "type": "boost::shared_ptr<variability::meta_model::configuration>",
          "documentation": "Configuration for this element.\n"
        }
      ]
    },
    {
      "name": "meta_model::Element",
      "parents": [
        "meta_model::Taggable",
        "meta_model::Stereotypable",
        "meta_model::Documentable",
        "meta_model::Nameable",
        "meta_model::Configurable"
      ],
      "documentation": "Consolidates a number of related object templates.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::configuration_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "features",
      "documentation": "Defines all of the features and feature groups used by\nthe injection model.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "features::input_technical_space",
      "documentation": "Feature bundle for the input technical space.\n",
      "stereotypes": [
        "masd::variability::feature_bundle"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "masd.injection.input_technical_space",
          "type": "masd::variability::text",
          "value": "\"agnostic\"",
          "documentation": "Input technical space for this model.\n",
          "tagged_values": {
            "masd.variability.archetype_location.kernel": "masd",
            "masd.variability.template_kind": "instance",
            "masd.variability.binding_point": "global",
            "masd.variability.qualified_name": "masd.injection.input_technical_space"
          }
        }
      ]
    },
    {
      "name": "features::reference",
      "stereotypes": [
        "masd::variability::feature_bundle"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "masd.injection.reference",
          "type": "masd::variability::text_collection",
          "documentation": "Imports an external model.\n",
          "tagged_values": {
            "masd.variability.archetype_location.kernel": "masd",
            "masd.variability.template_kind": "instance",
            "masd.variability.binding_point": "global",
            "masd.variability.qualified_name": "masd.injection.reference"
          }
        }
      ]
    },
    {
      "name": "features::initializer",
      "stereotypes": [
        "masd::variability::feature_template_initializer"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "features::uml",
      "documentation": "Features related to all UML injectors.\n",
      "stereotypes": [
        "masd::variability::feature_bundle"
      ],
      "tagged_values": {
        "masd.variability.generate_static_configuration": "false"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "masd.injection.dia.comment",
          "type": "masd::variability::boolean",
          "documentation": "If true, the UML comment is linked to the containing package.\n\nIf the containing package is the model itself, it is linked to the model's module.\n",
          "tagged_values": {
            "masd.variability.archetype_location.kernel": "masd",
            "masd.variability.template_kind": "instance",
            "masd.variability.binding_point": "any",
            "masd.variability.qualified_name": "masd.injection.dia.comment"
          }
        }
      ]
    }
  ]
}
