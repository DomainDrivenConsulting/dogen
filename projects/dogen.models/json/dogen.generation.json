{
  "tagged_values": {
    "yarn.dia.comment": "true",
    "yarn.model_modules": "dogen.generation",
    "yarn.reference": "dogen.generation.json",
    "yarn.reference": "dogen.annotations.json",
    "yarn.reference": "dogen.modeling.json",
    "yarn.reference": "dogen.probing.json",
    "yarn.reference": "dogen.formatting.json",
    "yarn.input_language": "cpp",
    "quilt.cpp.enabled": "true",
    "quilt.cpp.msbuild.enabled": "false",
    "quilt.cpp.visual_studio.project.enabled": "false",
    "quilt.cpp.visual_studio.solution.enabled": "false",
    "quilt.csharp.enabled": "false",
    "annotations.profile": "dogen.disable_odb_cmake"
  },
  "elements": [
    {
      "name": "meta_model",
      "fallback_element_type": "dogen::module"
    },
    {
      "name": "meta_model::model",
      "documentation": "Yarn model.\n",
      "stereotypes": [
        "Nameable",
        "MetaNameable"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "references",
          "type": "std::unordered_map<modeling::meta_model::name, modeling::meta_model::origin_types>",
          "documentation": "All other models that this model depends on, mapped to their origin.\n"
        },
        {
          "name": "leaves",
          "type": "std::unordered_set<modeling::meta_model::name>",
          "documentation": "All leaf types in this endomodel.\n\nLeaves are types concrete types which have a parent.\n"
        },
        {
          "name": "elements",
          "type": "std::vector<boost::shared_ptr<modeling::meta_model::element>>"
        },
        {
          "name": "root_module",
          "type": "boost::shared_ptr<modeling::meta_model::module>",
          "documentation": "The module that represents the model.\n"
        },
        {
          "name": "module_ids",
          "type": "std::unordered_set<std::string>",
          "documentation": "IDs of all of the model elements which are modules.\n"
        },
        {
          "name": "has_generatable_types",
          "type": "bool",
          "documentation": "If true the intermediate model has at least one generable type, false otherwise.\n"
        },
        {
          "name": "input_language",
          "type": "modeling::meta_model::languages",
          "documentation": "Language in which this model was written.\n"
        },
        {
          "name": "output_language",
          "type": "modeling::meta_model::languages",
          "documentation": "Language in which to output the model.\n"
        },
        {
          "name": "orm_properties",
          "type": "boost::optional<modeling::meta_model::orm_model_properties>"
        },
        {
          "name": "enabled_archetype_for_element",
          "type": "std::unordered_set<element_archetype>"
        },
        {
          "name": "locator_properties",
          "type": "locator_properties"
        },
        {
          "name": "global_archetype_location_properties",
          "type": "global_archetype_location_properties"
        }
      ]
    },
    {
      "name": "meta_model::artefact_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "enabled",
          "type": "bool"
        },
        {
          "name": "overwrite",
          "type": "bool"
        },
        {
          "name": "file_path",
          "type": "boost::filesystem::path"
        },
        {
          "name": "dependencies",
          "type": "std::list<std::string>"
        },
        {
          "name": "formatting_style",
          "type": "formatting_styles"
        },
        {
          "name": "formatting_input",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "meta_model::formatting_styles",
      "stereotypes": [
        "dogen::enumeration"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "stock",
          "type": ""
        },
        {
          "name": "wale",
          "type": ""
        },
        {
          "name": "stitch",
          "type": ""
        }
      ]
    },
    {
      "name": "meta_model::element_archetype",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "element",
          "type": "std::string"
        },
        {
          "name": "archetype",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "meta_model::text_model",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "artefacts",
          "type": "std::list<artefact>"
        },
        {
          "name": "managed_directories",
          "type": "std::list<boost::filesystem::path>"
        }
      ]
    },
    {
      "name": "meta_model::locator_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "directory_structure_style",
          "type": "directory_structure_styles"
        },
        {
          "name": "name_separator",
          "type": "std::string",
          "documentation": "Separator to use when concatenating sub-components of a path component.\n"
        },
        {
          "name": "model_segment_properties",
          "type": "model_segment_properties"
        },
        {
          "name": "intra_backend_segment_properties",
          "type": "std::unordered_map<std::string, intra_backend_segment_properties>"
        },
        {
          "name": "archetype_family_properties",
          "type": "std::unordered_map<std::string, archetype_family_properties>"
        },
        {
          "name": "force_backend_directory",
          "type": "bool",
          "documentation": "If true, the backend directory will be expressed, even when there is only one\nbackend enabled.\n"
        },
        {
          "name": "disable_facet_directories",
          "type": "bool",
          "documentation": "If true, directories for facets are not generated.\n"
        }
      ]
    },
    {
      "name": "meta_model::directory_structure_styles",
      "stereotypes": [
        "dogen::enumeration"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "structured",
          "type": "",
          "documentation": "Create the standard directory structure.\n"
        },
        {
          "name": "completely_flat",
          "type": "",
          "documentation": "Suppress the generation of all directories.\n"
        },
        {
          "name": "flatten_facets",
          "type": "",
          "documentation": "Flatten only the facets but preserve remaining structure.\n"
        }
      ]
    },
    {
      "name": "meta_model::model_segment_properties",
      "documentation": "Properties related to the model segment of the path.\n",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "directory",
          "type": "std::string",
          "documentation": "If supplied, the override directory name will take precedence and all other\nsettings will be ignored.\n\nIf not supplied the model path segment is computed from the remaining settings.\n"
        },
        {
          "name": "external_modules",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution do the external modules make to the final path.\n"
        },
        {
          "name": "model_modules",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution do the model modules make to the final path.\n"
        }
      ]
    },
    {
      "name": "meta_model::path_contribution_types",
      "documentation": "Different kinds of contributions that can be made to the final path computation.\n",
      "stereotypes": [
        "dogen::enumeration"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "none",
          "type": "",
          "documentation": "The item does not contribute at all to the path.\n"
        },
        {
          "name": "as_folders",
          "type": "",
          "documentation": "The itemcontributes folders to the path.\n"
        },
        {
          "name": "as_path_components",
          "type": "",
          "documentation": "The item contributes a single folder to the path, as a delimited string.\n"
        }
      ]
    },
    {
      "name": "meta_model::backend_properties",
      "documentation": "Properties related to the backend.\n",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "enabled",
          "type": "bool",
          "documentation": "If true, this backend is enabled.\n"
        },
        {
          "name": "directory",
          "type": "std::string",
          "documentation": "Backend specific directory name, if any.\n"
        }
      ]
    },
    {
      "name": "meta_model::intra_backend_segment_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "override_parent_path",
          "type": "boost::filesystem::path",
          "documentation": "If supplied, this path is used as the parent path instead of the output path.\n\nThis is useful for example when you want to place the include files outside of the\nmodel directory.\n"
        },
        {
          "name": "path_segment",
          "type": "boost::filesystem::path",
          "documentation": "Path segment to use for this intra-backend segment.\n"
        },
        {
          "name": "external_modules",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution do the external modules make to the final path.\n"
        },
        {
          "name": "model_modules",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution do the model modules make to the final path.\n"
        },
        {
          "name": "internal_modules",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution do the internal modules make to the final path.\n"
        },
        {
          "name": "facet",
          "type": "path_contribution_types",
          "documentation": "What kind of contribution does the facet make to the final path.\n"
        }
      ]
    },
    {
      "name": "meta_model::archetype_family_properties",
      "documentation": "Properties pertaining to families of archetypes, related to the path computation.\n",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "extension",
          "type": "std::string",
          "documentation": "Extension to use for files of this group. Includes the leading dot.\n"
        }
      ]
    },
    {
      "name": "meta_model::global_archetype_location_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "backend_properties",
          "type": "std::unordered_map<std::string, backend_properties>"
        },
        {
          "name": "facet_properties",
          "type": "std::unordered_map<std::string, facet_properties>"
        },
        {
          "name": "archetype_properties",
          "type": "std::unordered_map<std::string, archetype_properties>"
        },
        {
          "name": "denormalised_archetype_properties",
          "type": "std::unordered_map<std::string, denormalised_archetype_properties>"
        }
      ]
    },
    {
      "name": "meta_model::local_archetype_location_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "facet_enabled",
          "type": "boost::optional<bool>"
        },
        {
          "name": "archetype_enabled",
          "type": "boost::optional<bool>"
        },
        {
          "name": "facet_overwrite",
          "type": "boost::optional<bool>"
        },
        {
          "name": "archetype_overwrite",
          "type": "boost::optional<bool>"
        }
      ]
    },
    {
      "name": "meta_model::denormalised_archetype_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "backend_enabled",
          "type": "bool"
        },
        {
          "name": "backend_directory",
          "type": "std::string"
        },
        {
          "name": "facet_enabled",
          "type": "bool"
        },
        {
          "name": "facet_overwrite",
          "type": "bool"
        },
        {
          "name": "facet_directory",
          "type": "std::string"
        },
        {
          "name": "facet_postfix",
          "type": "std::string"
        },
        {
          "name": "archetype_enabled",
          "type": "bool"
        },
        {
          "name": "archetype_overwrite",
          "type": "boost::optional<bool>"
        },
        {
          "name": "archetype_postfix",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "meta_model::artefact",
      "documentation": "Artefact in a text model.\n",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "path",
          "type": "boost::filesystem::path",
          "documentation": "Absolute path to the file, indicating the location in the filesystem where it will be written.\n"
        },
        {
          "name": "content",
          "type": "std::string",
          "documentation": "Content of the file.\n"
        },
        {
          "name": "overwrite",
          "type": "bool",
          "documentation": "Determines when to write the file.\n\nIf true, the file will always be written to the filesystem; if false, the file will\nonly be written to the filesystem if it does not exist.\n"
        },
        {
          "name": "dependencies",
          "type": "std::vector<boost::filesystem::path>",
          "documentation": "Files in the project directory that this file depends on, but which are not generated.\n"
        }
      ]
    },
    {
      "name": "meta_model::facet_properties",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "enabled",
          "type": "bool",
          "documentation": "If true, this facet is enabled.\n"
        },
        {
          "name": "overwrite",
          "type": "bool"
        },
        {
          "name": "directory",
          "type": "std::string",
          "documentation": "Directory in which to place artefacts that belong to this facet.\n"
        },
        {
          "name": "postfix",
          "type": "std::string",
          "documentation": "Postfix to use in file names of artefacts that belong to this facet.\n"
        }
      ]
    },
    {
      "name": "meta_model::archetype_properties",
      "documentation": "Archetype level properties, applicable to all instances of this archetype.\n",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "enabled",
          "type": "bool",
          "documentation": "If false, will disable all instances of this archetype.\n"
        },
        {
          "name": "overwrite",
          "type": "boost::optional<bool>"
        },
        {
          "name": "postfix",
          "type": "std::string",
          "documentation": "Postfix to use for artefacts of this archetype.\n"
        }
      ]
    },
    {
      "name": "meta_model::Nameable",
      "stereotypes": [
        "dogen::object_template"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "name",
          "type": "modeling::meta_model::name"
        }
      ]
    },
    {
      "name": "meta_model::MetaNameable",
      "stereotypes": [
        "dogen::object_template"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "meta_name",
          "type": "modeling::meta_model::name"
        }
      ]
    },
    {
      "name": "meta_model::generatable_properties",
      "documentation": "Element properties related to code generation.\n",
      "tagged_values": {
        "yarn.generalization.parent": "modeling::meta_model::opaque_properties"
      },
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "decoration_properties",
          "type": "formatting::decoration_properties"
        },
        {
          "name": "artefact_properties",
          "type": "std::unordered_map<std::string, artefact_properties>"
        },
        {
          "name": "archetype_location_properties",
          "type": "std::unordered_map<std::string, local_archetype_location_properties>"
        }
      ]
    },
    {
      "name": "transforms",
      "fallback_element_type": "dogen::module"
    },
    {
      "name": "transforms::generability_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::dynamic_transforms_chain",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::dynamic_transform_interface",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::dynamic_transform_registrar",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::model_to_text_model_chain",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::model_to_text_model_transform_interface",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::model_to_text_model_transform_registrar",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "transforms_by_language_",
          "type": "std::unordered_map<modeling::meta_model::languages, std::shared_ptr<model_to_text_model_transform_interface>>"
        }
      ]
    },
    {
      "name": "transforms::configuration",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "enabled_backends",
          "type": "std::unordered_set<std::string>"
        },
        {
          "name": "enable_backend_directories",
          "type": "bool"
        }
      ]
    },
    {
      "name": "transforms::enablement_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::artefact_properties_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::formatting_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::formatting_configuration",
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "style",
          "type": "meta_model::formatting_styles"
        },
        {
          "name": "input",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "transforms::model_generation_chain",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::model_post_processing_chain",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::archetype_location_properties_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::locator_properties_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::text_model_generation_chain",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::context",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "type_repository",
          "type": "annotations::type_repository"
        },
        {
          "name": "archetype_location_repository",
          "type": "annotations::archetype_location_repository"
        },
        {
          "name": "formatting_repository",
          "type": "formatting::repository"
        },
        {
          "name": "prober",
          "type": "probing::prober"
        },
        {
          "name": "intra_backend_segment_properties",
          "type": "std::unordered_map<std::string, modeling::meta_model::intra_backend_segment_properties>"
        }
      ]
    },
    {
      "name": "transforms::modeling_model_to_generation_model_transform",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "helpers",
      "fallback_element_type": "dogen::module"
    },
    {
      "name": "helpers::artefact_writer_interface",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "helpers::filesystem_writer",
      "parents": [
        "helpers::artefact_writer_interface"
      ],
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "force_write_",
          "type": "bool"
        }
      ]
    },
    {
      "name": "helpers::stream_writer",
      "parents": [
        "helpers::artefact_writer_interface"
      ],
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object",
      "attributes": [
        {
          "name": "stream_",
          "type": "std::ostream"
        }
      ]
    },
    {
      "name": "helpers::writing_error",
      "documentation": "An error ocrurred whilst writing.\n",
      "stereotypes": [
        "dogen::exception"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "transforms::transformation_error",
      "documentation": "An error occurred whilst applying a transformation.\n",
      "stereotypes": [
        "dogen::exception"
      ],
      "fallback_element_type": "dogen::object"
    },
    {
      "name": "traits",
      "stereotypes": [
        "handcrafted"
      ],
      "fallback_element_type": "dogen::object"
    }
  ]
}
