{
  "documentation": "Provides the basic extraction primitives.\n\nThis model is the repository of all extraction related code which is\nnot technical space specific.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "dogen.extraction",
    "masd.injection.input_technical_space": "cpp",
    "masd.injection.reference": "cpp.builtins",
    "masd.injection.reference": "cpp.std",
    "masd.injection.reference": "cpp.boost",
    "masd.injection.reference": "dogen.tracing",
    "masd.injection.reference": "dogen.variability",
    "masd.injection.reference": "masd",
    "masd.injection.reference": "masd.variability",
    "masd.injection.reference": "dogen.profiles",
    "masd.injection.reference": "dogen",
    "masd.extraction.ignore_files_matching_regex": ".*/CMakeLists.txt",
    "masd.extraction.ignore_files_matching_regex": ".*/test/.*",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.extraction.delete_extra_files": "true",
    "masd.extraction.delete_empty_directories": "true",
    "masd.generation.cpp.enabled": "true",
    "masd.generation.cpp.standard": "c++-17",
    "masd.generation.cpp.msbuild.enabled": "false",
    "masd.generation.cpp.visual_studio.project.enabled": "false",
    "masd.generation.cpp.visual_studio.solution.enabled": "false",
    "masd.generation.csharp.enabled": "false",
    "masd.variability.profile": "dogen.profiles.base.default_profile"
  },
  "elements": [
    {
      "name": "meta_model",
      "documentation": "The extraction meta-model captures the entities required\nto transport information from the MASD technical space to\nexternal technical spaces.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "meta_model::model",
      "stereotypes": [
        "Configurable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "name",
          "type": "std::string"
        },
        {
          "name": "technical_space",
          "type": "std::string",
          "documentation": "Primary technical space that this model belongs to.\n"
        },
        {
          "name": "artefacts",
          "type": "std::list<artefact>"
        },
        {
          "name": "managed_directories",
          "type": "std::list<boost::filesystem::path>"
        },
        {
          "name": "outputting_properties",
          "type": "outputting_properties"
        }
      ]
    },
    {
      "name": "meta_model::artefact",
      "documentation": "Artefact in a text model.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "path",
          "type": "boost::filesystem::path",
          "documentation": "Absolute path to the file, indicating the location in the filesystem where it will be written.\n"
        },
        {
          "name": "content",
          "type": "std::string",
          "documentation": "Content of the file.\n"
        },
        {
          "name": "overwrite",
          "type": "bool",
          "documentation": "Determines when to write the file.\n\nIf true, the file will always be written to the filesystem; if false, the file will\nonly be written to the filesystem if it does not exist.\n"
        },
        {
          "name": "dependencies",
          "type": "std::vector<boost::filesystem::path>",
          "documentation": "Files in the project directory that this file depends on, but which are not generated.\n"
        },
        {
          "name": "unified_diff",
          "type": "std::string",
          "documentation": "Unified diff between the in-memory artefact and the file in the filesystem.\n"
        },
        {
          "name": "operation",
          "type": "operation"
        }
      ]
    },
    {
      "name": "helpers",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "helpers::file_status_collector",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "transforms::model_production_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::write_artefacts_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::gather_external_artefacts_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_diffs_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::context",
      "stereotypes": [
        "dogen::typeable",
        "dogen::pretty_printable"
      ],
      "tagged_values": {
        "masd.generation.cpp.types.forward_declarations.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "diffing_configuration",
          "type": "boost::optional<diffing_configuration>"
        },
        {
          "name": "reporting_configuration",
          "type": "boost::optional<reporting_configuration>"
        },
        {
          "name": "dry_run_mode_enabled",
          "type": "bool"
        },
        {
          "name": "feature_model",
          "type": "boost::shared_ptr<variability::meta_model::feature_model>"
        },
        {
          "name": "tracer",
          "type": "boost::shared_ptr<tracing::tracer>"
        }
      ]
    },
    {
      "name": "meta_model::operation",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "type",
          "type": "operation_type"
        },
        {
          "name": "reason",
          "type": "operation_reason"
        }
      ]
    },
    {
      "name": "meta_model::operation_type",
      "documentation": "Operation to perform to a given artefact.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.generation.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "create_only",
          "type": "",
          "documentation": "Creates a file from an artefact only if it does not yet exist.\n"
        },
        {
          "name": "write",
          "type": "",
          "documentation": "Unconditionally writes an artefact into file.\n"
        },
        {
          "name": "ignore",
          "type": "",
          "documentation": "Ingores an artefact.\n"
        },
        {
          "name": "remove",
          "type": "",
          "documentation": "Deletes a file.\n"
        }
      ]
    },
    {
      "name": "meta_model::operation_reason",
      "documentation": "Reasons for performing an operation.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "tagged_values": {
        "masd.generation.cpp.hash.enabled": "true"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "newly_generated",
          "type": "",
          "documentation": "Artefact will produce a new generated file.\n"
        },
        {
          "name": "changed_generated",
          "type": "",
          "documentation": "Artefact will produce a changed generated file.\n"
        },
        {
          "name": "unchanged_generated",
          "type": "",
          "documentation": "Generated artefact contents match file contents.\n"
        },
        {
          "name": "already_exists",
          "type": "",
          "documentation": "The file already exists and we we're asked to create only.\n"
        },
        {
          "name": "ignore_generated",
          "type": "",
          "documentation": "User requested artefact to be ignored.\n"
        },
        {
          "name": "force_write",
          "type": "",
          "documentation": "User requested to always write generated artefacts.\n"
        },
        {
          "name": "unexpected",
          "type": "",
          "documentation": "Artefact represents an unexpected file in project.\n"
        },
        {
          "name": "ignore_unexpected",
          "type": "",
          "documentation": "File is unexpected but the user asked us not to delete it.\n"
        },
        {
          "name": "ignore_regex",
          "type": "",
          "documentation": "File is unexpected but the user asked us to ignore it via regexes.\n"
        }
      ]
    },
    {
      "name": "transforms::operation_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::remove_files_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_patch_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::mock_content_filler_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::files_by_status",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "unexpected",
          "type": "std::list<boost::filesystem::path>"
        },
        {
          "name": "ignored",
          "type": "std::list<boost::filesystem::path>"
        }
      ]
    },
    {
      "name": "transforms::transform_exception",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::unified_differ",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::generate_report_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::code_generation_chain",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "transforms::update_outputting_properties_transform",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "meta_model::outputting_properties",
      "documentation": "Properties related to outputting.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "force_write",
          "type": "bool"
        },
        {
          "name": "delete_extra_files",
          "type": "bool"
        },
        {
          "name": "ignore_files_matching_regex",
          "type": "std::vector<std::string>"
        },
        {
          "name": "delete_empty_directories",
          "type": "bool"
        }
      ]
    },
    {
      "name": "meta_model::Configurable",
      "documentation": "Ability to have meta-data associated.\n",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "configuration",
          "type": "boost::shared_ptr<variability::meta_model::configuration>",
          "documentation": "Configuration for this element.\n"
        }
      ]
    },
    {
      "name": "features",
      "documentation": "Features for the extraction model.\n",
      "tagged_values": {
        "masd.injection.dia.comment": "true"
      },
      "fallback_element_type": "masd::module"
    },
    {
      "name": "features::initializer",
      "stereotypes": [
        "masd::variability::feature_template_initializer"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "features::filesystem",
      "documentation": "Features related to filesystem operations.\n",
      "stereotypes": [
        "masd::variability::feature_bundle"
      ],
      "tagged_values": {
        "masd.variability.default_binding_point": "global",
        "masd.variability.archetype_location.kernel": "masd",
        "masd.variability.template_kind": "instance"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "masd.extraction.force_write",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, artefacts are always written to the filesystem.\n\nIf false, the system will check to see if writing is needed by performing a binary\ndiff. If no changes are detected, no writting is performed.\n",
          "tagged_values": {
            "masd.variability.qualified_name": "masd.extraction.force_write"
          }
        },
        {
          "name": "masd.extraction.delete_extra_files",
          "type": "masd::variability::boolean",
          "value": "\"true\"",
          "documentation": "If true, any files the code generator is not aware of are deleted.\n\nIf you'd like to skip the deletion of certain files, set  \"ignore_files_matching_regex\" accordingly.\n",
          "tagged_values": {
            "masd.variability.qualified_name": "masd.extraction.delete_extra_files"
          }
        },
        {
          "name": "masd.extraction.ignore_files_matching_regex",
          "type": "masd::variability::text_collection",
          "documentation": "Regular expressions to filter files prior to deletion.\n\nOnly applicable if \"delete_extra_files\" is enabled.\n",
          "tagged_values": {
            "masd.variability.qualified_name": "masd.extraction.ignore_files_matching_regex",
            "masd.variability.is_optional": "true"
          }
        },
        {
          "name": "masd.extraction.delete_empty_directories",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, all directories without any files will be deleted.\n\nThis setting is recursive: if a directory is composed of one or more directories that\nare themselves empty, the entire directory tree is deleted.\n",
          "tagged_values": {
            "masd.variability.qualified_name": "masd.extraction.delete_empty_directories"
          }
        },
        {
          "name": "masd.extraction.enable_backend_directories",
          "type": "masd::variability::boolean",
          "value": "\"false\"",
          "documentation": "If true, a directory is created for each technical space targeted.\n\nNote that this setting is only relevant if you are targetting a single output technical\nspace. If you are targetting more than one, it will automatically be set to true.\n",
          "tagged_values": {
            "masd.variability.qualified_name": "masd.extraction.enable_backend_directories"
          }
        }
      ]
    }
  ]
}
