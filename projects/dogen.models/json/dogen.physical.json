{
  "documentation": "The pysical model defines the core entities that make up the\nphysical dimension of MASD conceptual space.\n",
  "tagged_values": {
    "masd.injection.dia.comment": "true",
    "masd.injection.model_modules": "dogen.physical",
    "masd.injection.input_technical_space": "cpp",
    "masd.injection.reference": "dogen.profiles",
    "masd.extraction.ignore_files_matching_regex": ".*/tests/.*",
    "masd.variability.profile": "dogen.profiles.base.default_profile"
  },
  "elements": [
    {
      "name": "main",
      "stereotypes": [
        "masd::entry_point",
        "dogen::untypable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "CMakeLists",
      "stereotypes": [
        "masd::build::cmakelists",
        "dogen::handcrafted::cmake"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "entities",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "entities::location",
      "documentation": "Location of an entity or set of entities in the hierarchical physical space.\n\nThese must be populated in order, e.g. in order to have a backend we must have a\nkernel; in order to have a facet we must have a backend and in order to have a\nformatter we must have a facet. We may not have any.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "kernel",
          "type": "std::string",
          "documentation": "Name of the kernel that owns this field, if any.\n"
        },
        {
          "name": "backend",
          "type": "std::string",
          "documentation": "Name of the backend that owns this field, if any.\n"
        },
        {
          "name": "facet",
          "type": "std::string",
          "documentation": "Name of the facet that owns this field, if any.\n"
        },
        {
          "name": "archetype",
          "type": "std::string",
          "documentation": "Name of the archetype that owns this field, if any.\n"
        }
      ]
    },
    {
      "name": "helpers",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "helpers::template_instantiation_domains_factory",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "entities::locations_group",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "locations",
          "type": "std::list<location>",
          "documentation": "All archetype locations that belong to this group.\n"
        },
        {
          "name": "canonical_locations",
          "type": "std::unordered_map<std::string, std::string>",
          "documentation": "Maps a concrete archetype location to its canonical form, if the canonical\nform is supported. Otherwise no such mapping will exist.\n"
        }
      ]
    },
    {
      "name": "entities::location_repository",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "all",
          "type": "std::list<location>"
        },
        {
          "name": "facet_names_by_backend_name",
          "type": "std::unordered_map<std::string, std::unordered_set<std::string>>"
        },
        {
          "name": "formatter_names_by_backend_name",
          "type": "std::unordered_map<std::string, std::unordered_set<std::string>>"
        },
        {
          "name": "by_meta_name",
          "type": "std::unordered_map<std::string, locations_group>"
        },
        {
          "name": "by_family",
          "type": "std::unordered_map<std::string, std::list<location>>",
          "documentation": "All archetype locations for a given family.\n\nFamilies are backend specific sets of archetype locations, with associated\nproperties such as file extensions.\n"
        },
        {
          "name": "by_backend_by_facet",
          "type": "std::unordered_map<std::string, std::unordered_map<std::string, std::list<std::string>>>"
        },
        {
          "name": "by_intra_backend_segment",
          "type": "std::unordered_map<std::string, std::list<location>>",
          "documentation": "All archetype locations for a given intra-backend segment.\n\nIntra-backend segments are backend specific sets of archetype locations, with\nassociated properties.\n"
        }
      ]
    },
    {
      "name": "entities::location_repository_parts",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "all",
          "type": "std::list<location>",
          "documentation": "All archetype locations for the archetypes owned by this transform,\nlisting all available backends, facets and archetypes.\n"
        },
        {
          "name": "by_meta_name",
          "type": "std::unordered_map<std::string, locations_group>",
          "documentation": "Returns the archetype locations for each meta name.\n"
        },
        {
          "name": "by_family",
          "type": "std::unordered_map<std::string, std::list<location>>",
          "documentation": "All archetype locations for a given family.\n\nFamilies are backend specific sets of archetype locations, with associated\nproperties such as file extensions.\n"
        },
        {
          "name": "by_intra_backend_segment",
          "type": "std::unordered_map<std::string, std::list<location>>",
          "documentation": "All archetype locations for a given intra-backend segment.\n\nIntra-backend segments are backend specific sets of archetype locations, with\nassociated properties.\n"
        }
      ]
    },
    {
      "name": "helpers::location_repository_builder",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::location_repository_parts_builder",
      "stereotypes": [
        "dogen::handcrafted::typeable"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "helpers::building_error",
      "documentation": "An error occurred while the field factory was building.\n",
      "stereotypes": [
        "masd::exception"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "entities::model",
      "documentation": "Describes the kernels available in the current instance of Dogen.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "kernels",
          "type": "std::unordered_map<std::string, kernel>",
          "documentation": "Lists all available kernels, by kernel id.\n"
        }
      ]
    },
    {
      "name": "entities::kernel",
      "stereotypes": [
        "Element"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "backends",
          "type": "std::list<backend>"
        }
      ]
    },
    {
      "name": "entities::backend",
      "documentation": "Code generation backend, targeting a given technical space.\n",
      "stereotypes": [
        "ContainingElement"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "parts",
          "type": "std::unordered_map<std::string, part>"
        },
        {
          "name": "facets",
          "type": "std::unordered_map<std::string, facet>"
        },
        {
          "name": "archetypes",
          "type": "std::unordered_map<std::string, archetype>"
        },
        {
          "name": "archetype_kinds",
          "type": "std::unordered_map<std::string, archetype_kind>"
        }
      ]
    },
    {
      "name": "entities::part",
      "stereotypes": [
        "ContainingElement"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "path_configuration",
          "type": "path_configuration"
        },
        {
          "name": "facets",
          "type": "std::unordered_map<std::string, facet>"
        },
        {
          "name": "archetypes",
          "type": "std::unordered_map<std::string, archetype>"
        },
        {
          "name": "requires_relative_path",
          "type": "bool",
          "documentation": "If true, this part needs a path relative to its root.\n"
        }
      ]
    },
    {
      "name": "entities::path_configuration",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "external_modules",
          "type": "path_contribution_type",
          "documentation": "What kind of contribution do the external modules make to the final path.\n"
        },
        {
          "name": "model_modules",
          "type": "path_contribution_type",
          "documentation": "What kind of contribution do the model modules make to the final path.\n"
        },
        {
          "name": "facet",
          "type": "path_contribution_type",
          "documentation": "What kind of contribution does the facet make to the final path.\n"
        },
        {
          "name": "internal_modules",
          "type": "path_contribution_type"
        }
      ]
    },
    {
      "name": "entities::path_contribution_type",
      "documentation": "Different kinds of contributions that can be made to the final path computation.\n",
      "stereotypes": [
        "masd::enumeration"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "none",
          "type": "",
          "documentation": "The item does not contribute at all to the path.\n"
        },
        {
          "name": "as_directories",
          "type": "",
          "documentation": "The item contributes folders to the path.\n"
        },
        {
          "name": "as_path_components",
          "type": "",
          "documentation": "The item contributes a single folder to the path, as a delimited string.\n"
        }
      ]
    },
    {
      "name": "entities::facet",
      "stereotypes": [
        "ContainingElement",
        "Postfixable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "archetypes",
          "type": "std::unordered_map<std::string, archetype>"
        }
      ]
    },
    {
      "name": "entities::archetype",
      "stereotypes": [
        "Element",
        "Postfixable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "archetype_kind_id",
          "type": "std::string"
        },
        {
          "name": "meta_element_id",
          "type": "std::string",
          "documentation": "Which types of the logical model this archetype supports.\n"
        }
      ]
    },
    {
      "name": "entities::archetype_kind",
      "stereotypes": [
        "Describable"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "id",
          "type": "std::string"
        },
        {
          "name": "file_extension",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "entities::element",
      "documentation": "Represents an entity which we would like to place in physical space.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "simple_name",
          "type": "std::string"
        },
        {
          "name": "qualified_name",
          "type": "std::string"
        },
        {
          "name": "external_modules",
          "type": "std::list<std::string>"
        },
        {
          "name": "model_modules",
          "type": "std::list<std::string>"
        },
        {
          "name": "internal_modules",
          "type": "std::list<std::string>"
        },
        {
          "name": "paths",
          "type": "std::unordered_map<std::string, paths>"
        }
      ]
    },
    {
      "name": "entities::element_model",
      "documentation": "Collection of entities that need placing in physical space.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "elements",
          "type": "std::unordered_map<std::string, element>"
        }
      ]
    },
    {
      "name": "entities::paths",
      "documentation": "Path information for a given element.\n",
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "absolute",
          "type": "boost::filesystem::path"
        },
        {
          "name": "relative",
          "type": "std::unordered_map<std::string, boost::filesystem::path>",
          "documentation": "Path relative to parts, which required it.\n"
        }
      ]
    },
    {
      "name": "entities::Locatable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "location",
          "type": "location",
          "documentation": "Position of this entity in physical space.\n"
        }
      ]
    },
    {
      "name": "entities::Describable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "description",
          "type": "std::string",
          "documentation": "Human readable description of the entity.\n"
        }
      ]
    },
    {
      "name": "entities::Element",
      "parents": [
        "entities::Locatable",
        "entities::Describable"
      ],
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object"
    },
    {
      "name": "entities::ContainingElement",
      "parents": [
        "entities::Element"
      ],
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "directory_name",
          "type": "std::string"
        }
      ]
    },
    {
      "name": "entities::Postfixable",
      "stereotypes": [
        "masd::object_template"
      ],
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "postfix",
          "type": "std::string",
          "documentation": "Postfix to apply to the element.\n"
        }
      ]
    },
    {
      "name": "features",
      "fallback_element_type": "masd::module"
    },
    {
      "name": "features::facet_features",
      "documentation": "Physical features common to all facets.\n",
      "stereotypes": [
        "masd::variability::feature_template_bundle"
      ],
      "tagged_values": {
        "masd.variability.instantiation_domain_name": "masd.facet"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "directory",
          "type": "masd::variability::text",
          "value": "\"\"",
          "documentation": "Directory in which to place this facet.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global",
            "masd.variability.default_value_override.cpp.types": "\"types\"",
            "masd.variability.default_value_override.cpp.hash": "\"hash\"",
            "masd.variability.default_value_override.cpp.tests": "\"generated_tests\"",
            "masd.variability.default_value_override.cpp.io": "\"io\"",
            "masd.variability.default_value_override.cpp.lexical_cast": "\"lexical_cast\"",
            "masd.variability.default_value_override.cpp.templates": "\"templates\"",
            "masd.variability.default_value_override.cpp.odb": "\"odb\"",
            "masd.variability.default_value_override.cpp.test_data": "\"test_data\"",
            "masd.variability.default_value_override.cpp.serialization": "\"serialization\"",
            "masd.variability.default_value_override.csharp.types": "\"Types\"",
            "masd.variability.default_value_override.csharp.io": "\"Dumpers\"",
            "masd.variability.default_value_override.csharp.test_data": "\"SequenceGenerators\""
          }
        },
        {
          "name": "postfix",
          "type": "masd::variability::text",
          "value": "\"\"",
          "documentation": "Postfix to use for all files that belong to this facet.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global",
            "masd.variability.default_value_override.cpp.tests": "\"tests\"",
            "masd.variability.default_value_override.cpp.hash": "\"hash\"",
            "masd.variability.default_value_override.cpp.lexical_cast": "\"lc\"",
            "masd.variability.default_value_override.cpp.io": "\"io\"",
            "masd.variability.default_value_override.cpp.odb": "\"pragmas\"",
            "masd.variability.default_value_override.cpp.test_data": "\"td\"",
            "masd.variability.default_value_override.cpp.serialization": "\"ser\"",
            "masd.variability.default_value_override.csharp.io": "\"Dumper\"",
            "masd.variability.default_value_override.csharp.test_data": "\"SequenceGenerator\""
          }
        }
      ]
    },
    {
      "name": "features::archetype_features",
      "documentation": "Features common to all archetypes.\n",
      "stereotypes": [
        "masd::variability::feature_template_bundle"
      ],
      "tagged_values": {
        "masd.variability.instantiation_domain_name": "masd.archetype"
      },
      "fallback_element_type": "masd::object",
      "attributes": [
        {
          "name": "postfix",
          "type": "masd::variability::text",
          "value": "\"\"",
          "documentation": "Postfix to use for all files that belong to this facet.\n",
          "tagged_values": {
            "masd.variability.binding_point": "global",
            "masd.variability.default_value_override.forward_declarations": "\"fwd\""
          }
        }
      ]
    },
    {
      "name": "features::initializer",
      "stereotypes": [
        "masd::variability::initializer"
      ],
      "fallback_element_type": "masd::object"
    }
  ]
}
