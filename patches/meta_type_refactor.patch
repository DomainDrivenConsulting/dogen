diff --git a/doc/agile/v1/sprint_backlog_03.org b/doc/agile/v1/sprint_backlog_03.org
index c640ff975..88a6de662 100644
--- a/doc/agile/v1/sprint_backlog_03.org
+++ b/doc/agile/v1/sprint_backlog_03.org
@@ -13,20 +13,20 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2017-07-23 Sun 18:30]
+#+CAPTION: Clock summary at [2017-07-23 Sun 19:36]
 | <75>                                                                        |         |       |      |       |
 | Headline                                                                    | Time    |       |      |     % |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| *Total time*                                                                | *12:23* |       |      | 100.0 |
+| *Total time*                                                                | *13:28* |       |      | 100.0 |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| Stories                                                                     | 12:23   |       |      | 100.0 |
-| Active                                                                      |         | 12:23 |      | 100.0 |
-| COMPLETED Edit release notes for previous sprint                            |         |       | 0:19 |   2.6 |
-| STARTED Sprint and product backlog grooming                                 |         |       | 1:18 |  10.5 |
+| Stories                                                                     | 13:28   |       |      | 100.0 |
+| Active                                                                      |         | 13:28 |      | 100.0 |
+| COMPLETED Edit release notes for previous sprint                            |         |       | 0:19 |   2.4 |
+| STARTED Sprint and product backlog grooming                                 |         |       | 1:18 |   9.7 |
 | COMPLETED Create a tagging checklist                                        |         |       | 0:07 |   0.9 |
-| COMPLETED Tidy-up post-processing validation                                |         |       | 3:41 |  29.7 |
-| STARTED Add meta-type support to yarn                                       |         |       | 6:11 |  49.9 |
-| STARTED Add canonical archetype support to yarn                             |         |       | 0:47 |   6.3 |
+| COMPLETED Tidy-up post-processing validation                                |         |       | 3:41 |  27.4 |
+| STARTED Add meta-type support to yarn                                       |         |       | 7:16 |  54.0 |
+| STARTED Add canonical archetype support to yarn                             |         |       | 0:47 |   5.8 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -123,6 +123,7 @@ Tasks:
 - add validation for meta-model types.
 
 *** STARTED Add meta-type support to yarn                             :story:
+    CLOCK: [2017-07-23 Sun 18:31]--[2017-07-23 Sun 19:36] =>  1:05
     CLOCK: [2017-07-23 Sun 18:12]--[2017-07-23 Sun 18:30] =>  0:18
     CLOCK: [2017-07-23 Sun 17:56]--[2017-07-23 Sun 18:11] =>  0:15
     CLOCK: [2017-07-23 Sun 17:35]--[2017-07-23 Sun 17:56] =>  0:21
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/directive_group_repository_factory.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/directive_group_repository_factory.hpp
index 021d29eda..7a8eb2e63 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/directive_group_repository_factory.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/directive_group_repository_factory.hpp
@@ -83,11 +83,8 @@ public:
     artefact_formatters_type remove_non_includible_formatters(
         const artefact_formatters_type& formatters) const;
 
-    typedef std::unordered_map<std::type_index, artefact_formatters_type>
-    artefact_formatters_by_type_index_type;
-
-    artefact_formatters_by_type_index_type includible_formatters_by_type_index(
-        const formatters::repository& frp) const;
+    std::unordered_map<std::string, artefact_formatters_type>
+    includible_formatters_by_meta_type(const formatters::repository& frp) const;
 
 private:
     void insert_inclusion_directive(const std::string& id,
@@ -100,7 +97,8 @@ private:
         const locator& l, directive_group_repository& dgrp) const;
 
     directive_group_repository make(const type_group& tg,
-        const artefact_formatters_by_type_index_type& afti, const locator& l,
+        const std::unordered_map<std::string, artefact_formatters_type>& afmt,
+        const locator& l,
         const std::unordered_map<std::string, formattable>& formattables) const;
 
 public:
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/enablement_expander.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/enablement_expander.hpp
index 2823a0cdf..31ccbaf7d 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/enablement_expander.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/enablement_expander.hpp
@@ -25,7 +25,6 @@
 #pragma once
 #endif
 
-#include <typeindex>
 #include <unordered_map>
 #include <boost/optional.hpp>
 #include "dogen/annotations/types/annotation.hpp"
@@ -98,8 +97,8 @@ private:
     make_local_type_group(const annotations::type_repository& atrp,
         const formatters::repository& frp) const;
 
-    std::unordered_map<std::type_index, local_type_group_type>
-    bucket_local_type_group_by_type_index(
+    std::unordered_map<std::string, local_type_group_type>
+    bucket_local_type_group_by_meta_type(
         const local_type_group_type& unbucketed_ltgs,
         const formatters::repository& frp) const;
 
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/registrar.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/registrar.hpp
index 572c28131..56d9986ea 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/registrar.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/registrar.hpp
@@ -26,8 +26,8 @@
 #endif
 
 #include <list>
+#include <string>
 #include <memory>
-#include <typeindex>
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/annotations/types/archetype_location.hpp"
@@ -73,12 +73,11 @@ public:
     archetype_locations() const;
 
     /**
-     * @brief Returns the archetype locations for each element type
-     * index.
+     * @brief Returns the archetype locations for each meta-type.
      */
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const;
+    archetype_locations_by_meta_type() const;
 
     /**
      * @brief Returns all of the available helper formatters.
@@ -93,9 +92,9 @@ public:
 private:
     repository formatter_repository_;
     std::forward_list<annotations::archetype_location> archetype_locations_;
-    std::unordered_map<std::type_index,
+    std::unordered_map<std::string,
                        std::list<annotations::archetype_location>>
-    archetype_locations_by_element_type_index_;
+    archetype_locations_by_meta_type_;
 };
 
 template<typename Formatter>
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/repository.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/repository.hpp
index 0637fa586..54804230b 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/repository.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/repository.hpp
@@ -27,7 +27,7 @@
 
 #include <list>
 #include <memory>
-#include <typeindex>
+#include <string>
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/quilt.cpp/types/formatters/helper_formatter_interface_fwd.hpp"
@@ -52,10 +52,10 @@ private:
      * @brief Returns all available file formatters by type indx.
      */
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<std::shared_ptr<artefact_formatter_interface>>
     >&
-    stock_artefact_formatters_by_type_index();
+    stock_artefact_formatters_by_meta_type();
 
     /**
      * @brief Returns all available file formatters by archetype name.
@@ -85,9 +85,9 @@ public:
      * @brief Returns all available file formatters by type indx.
      */
     const std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-    stock_artefact_formatters_by_type_index() const;
+    stock_artefact_formatters_by_meta_type() const;
 
     /**
      * @brief Returns all available file formatters by formatter name.
@@ -114,9 +114,9 @@ public:
 
 private:
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<std::shared_ptr<artefact_formatter_interface>>>
-    stock_artefact_formatters_by_type_index_;
+    stock_artefact_formatters_by_meta_type_;
     std::unordered_map<std::string,
                        std::shared_ptr<artefact_formatter_interface>>
     stock_artefact_formatters_by_archetype_;
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/kernel.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/kernel.hpp
index bf126bf1e..9dc072386 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/kernel.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/kernel.hpp
@@ -102,9 +102,9 @@ public:
     archetype_locations() const override;
 
     const std::unordered_map<
-        std::type_index,
+        std::string,
         std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const override;
+    archetype_locations_by_meta_type() const override;
 
     yarn::meta_model::languages language() const override;
 
diff --git a/projects/quilt.cpp/src/io/formatters/repository_io.cpp b/projects/quilt.cpp/src/io/formatters/repository_io.cpp
index 24b588389..052eee390 100644
--- a/projects/quilt.cpp/src/io/formatters/repository_io.cpp
+++ b/projects/quilt.cpp/src/io/formatters/repository_io.cpp
@@ -68,13 +68,13 @@ inline std::ostream& to_stream(std::ostream& s,
 }
 
 inline std::ostream& to_stream(std::ostream& s,
-    const std::unordered_map<std::type_index,
-    std::forward_list<std::shared_ptr<artefact_formatter_interface>>>& safti) {
-    s << "\"stock_artefact_formatters_by_type_index\": " << "[ ";
+    const std::unordered_map<std::string,
+    std::forward_list<std::shared_ptr<artefact_formatter_interface>>>& safmt) {
+    s << "\"stock_artefact_formatters_by_meta_type\": " << "[ ";
 
-    for(auto i(safti.begin()); i != safti.end(); ++i) {
-        if (i != safti.begin()) s << ", ";
-        s <<  "{ \"" << i->first.name() << "\":" << "[ ";
+    for(auto i(safmt.begin()); i != safmt.end(); ++i) {
+        if (i != safmt.begin()) s << ", ";
+        s <<  "{ \"" << i->first << "\":" << "[ ";
         for(auto j(i->second.begin()); j != i->second.end(); ++j) {
             if (j != i->second.begin()) s << ", ";
                 s <<  "\"" << (*j)->formatter_name() << "\"";
@@ -89,7 +89,7 @@ inline std::ostream& to_stream(std::ostream& s,
 std::ostream& operator<<(std::ostream& s, const repository& rp) {
     s << "{ " << "\"__type__\": "
       << "\"dogen::quilt::cpp::formatters::container\", ";
-    to_stream(s, rp.stock_artefact_formatters_by_type_index());
+    to_stream(s, rp.stock_artefact_formatters_by_meta_type());
     to_stream(s, "stock_artefact_formatters", rp.stock_artefact_formatters());
     to_stream(s, rp.helper_formatters());
     s << " }";
diff --git a/projects/quilt.cpp/src/types/fabric/master_header_factory.cpp b/projects/quilt.cpp/src/types/fabric/master_header_factory.cpp
index 0ea52d521..79eeabe63 100644
--- a/projects/quilt.cpp/src/types/fabric/master_header_factory.cpp
+++ b/projects/quilt.cpp/src/types/fabric/master_header_factory.cpp
@@ -60,8 +60,8 @@ public:
     generator(const yarn::meta_model::name& model_name,
         const formatters::repository& rp)
         : result_(create_master_header(model_name)),
-          file_formatters_by_type_index_(
-              filter_file_formatters_by_type_index(rp)) {}
+          file_formatters_by_meta_type_(
+              filter_file_formatters_by_meta_type(rp)) {}
 
 private:
     boost::shared_ptr<master_header>
@@ -73,11 +73,10 @@ private:
         formatters) const;
 
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<
             std::shared_ptr<formatters::artefact_formatter_interface>>>
-    filter_file_formatters_by_type_index(
-        const formatters::repository& rp) const;
+    filter_file_formatters_by_meta_type(const formatters::repository& rp) const;
 
     void process_element(const yarn::meta_model::element& e);
 
@@ -104,10 +103,10 @@ public:
 private:
     boost::shared_ptr<master_header> result_;
     const std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<
             std::shared_ptr<formatters::artefact_formatter_interface>>>
-    file_formatters_by_type_index_;
+    file_formatters_by_meta_type_;
 
 };
 
@@ -141,20 +140,20 @@ generator::filter_formatters(const std::forward_list<std::shared_ptr<
 }
 
 std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<
         std::shared_ptr<formatters::artefact_formatter_interface>>>
-generator::filter_file_formatters_by_type_index(
+generator::filter_file_formatters_by_meta_type(
     const formatters::repository& rp) const {
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<
             std::shared_ptr<formatters::artefact_formatter_interface>>> r;
 
-    for (const auto& pair : rp.stock_artefact_formatters_by_type_index()) {
-        const auto& ti(pair.first);
+    for (const auto& pair : rp.stock_artefact_formatters_by_meta_type()) {
+        const auto& mt(pair.first);
         const auto& fmts(pair.second);
-        r[ti] = filter_formatters(fmts);
+        r[mt] = filter_formatters(fmts);
     }
     return r;
 }
@@ -163,9 +162,9 @@ void generator::process_element(const yarn::meta_model::element& e) {
     if (e.origin_type() != yarn::meta_model::origin_types::target)
         return;
 
-    const auto ti(std::type_index(typeid(e)));
-    const auto i(file_formatters_by_type_index_.find(ti));
-    if (i == file_formatters_by_type_index_.end()) {
+    const auto mt(e.meta_name().id());
+    const auto i(file_formatters_by_meta_type_.find(mt));
+    if (i == file_formatters_by_meta_type_.end()) {
         const auto id(e.name().id());
         BOOST_LOG_SEV(lg, error) << formatter_not_found_for_type << id;
         BOOST_THROW_EXCEPTION(
diff --git a/projects/quilt.cpp/src/types/formattables/canonical_archetype_expander.cpp b/projects/quilt.cpp/src/types/formattables/canonical_archetype_expander.cpp
index 01ad464cf..d782dbf44 100644
--- a/projects/quilt.cpp/src/types/formattables/canonical_archetype_expander.cpp
+++ b/projects/quilt.cpp/src/types/formattables/canonical_archetype_expander.cpp
@@ -44,20 +44,20 @@ void canonical_archetype_expander::expand(const formatters::repository& frp,
     const yarn::meta_model::element& e) const {
     BOOST_LOG_SEV(lg, debug) << "Procesing element: " << e.name().id();
     const auto cs(formatters::inclusion_support_types::canonical_support);
-    const auto& safti(frp.stock_artefact_formatters_by_type_index());
+    const auto& safmt(frp.stock_artefact_formatters_by_meta_type());
 
     /*
      * For each element segment, find the corresponding formatters.
      */
-    const auto ti(std::type_index(typeid(e)));
-    BOOST_LOG_SEV(lg, debug) << "Type index: " << ti.name();
+    const auto mt(e.meta_name().id());
+    BOOST_LOG_SEV(lg, debug) << "Meta-type: " << mt;
 
     /*
      * Not all elements have formatters; for example, concepts don't
      * have any at present. If so, skip the element.
      */
-    const auto i(safti.find(ti));
-    if (i == safti.end()) {
+    const auto i(safmt.find(mt));
+    if (i == safmt.end()) {
         BOOST_LOG_SEV(lg, debug) << "Element has no formatters.";
         return;
     }
diff --git a/projects/quilt.cpp/src/types/formattables/directive_group_repository_factory.cpp b/projects/quilt.cpp/src/types/formattables/directive_group_repository_factory.cpp
index dfcb0feaf..4e4a40fab 100644
--- a/projects/quilt.cpp/src/types/formattables/directive_group_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/formattables/directive_group_repository_factory.cpp
@@ -211,16 +211,15 @@ directive_group_repository_factory::remove_non_includible_formatters(
     return r;
 }
 
+std::unordered_map<std::string,
+                   directive_group_repository_factory::artefact_formatters_type>
 directive_group_repository_factory::
-artefact_formatters_by_type_index_type
-directive_group_repository_factory::
-includible_formatters_by_type_index(const formatters::repository& frp) const {
-
-    artefact_formatters_by_type_index_type r;
-    for (const auto& pair : frp.stock_artefact_formatters_by_type_index()) {
-        const auto& ti(pair.first);
+includible_formatters_by_meta_type(const formatters::repository& frp) const {
+    std::unordered_map<std::string, artefact_formatters_type> r;
+    for (const auto& pair : frp.stock_artefact_formatters_by_meta_type()) {
+        const auto& mt(pair.first);
         const auto& fmts(pair.second);
-        r[ti] = remove_non_includible_formatters(fmts);
+        r[mt] = remove_non_includible_formatters(fmts);
     }
     return r;
 }
@@ -336,7 +335,8 @@ compute_directives(const type_group& tg, const yarn::meta_model::element& e,
 
 directive_group_repository
 directive_group_repository_factory::make(const type_group& tg,
-    const artefact_formatters_by_type_index_type& afti, const locator& l,
+    const std::unordered_map<std::string, artefact_formatters_type>& afmt,
+    const locator& l,
     const std::unordered_map<std::string, formattable>& formattables) const {
 
     /*
@@ -351,10 +351,10 @@ directive_group_repository_factory::make(const type_group& tg,
         for (const auto& segment : formattable.all_segments()) {
             const auto& e(*segment);
             const auto id(e.name().id());
-            const auto ti(std::type_index(typeid(e)));
+            const auto mt(e.meta_name().id());
 
-            const auto i(afti.find(ti));
-            if (i == afti.end() || i->second.empty()) {
+            const auto i(afmt.find(mt));
+            if (i == afmt.end() || i->second.empty()) {
                 BOOST_LOG_SEV(lg, debug) << formatter_not_found_for_type << id;
                 continue;
             }
@@ -379,9 +379,9 @@ make(const annotations::type_repository& atrp,
      * files that can be included via an include directive. Filter out
      * all of those that do not, and bucket them all by type index.
      */
-    const auto afti(includible_formatters_by_type_index(frp));
+    const auto afmt(includible_formatters_by_meta_type(frp));
     const auto tg(make_type_group(atrp, frp));
-    const auto r(make(tg, afti, l, formattables));
+    const auto r(make(tg, afmt, l, formattables));
 
     BOOST_LOG_SEV(lg, debug) << "Finished creating inclusion dependencies "
                              << "group repository.";
diff --git a/projects/quilt.cpp/src/types/formattables/enablement_expander.cpp b/projects/quilt.cpp/src/types/formattables/enablement_expander.cpp
index 4761d10e2..34d287b48 100644
--- a/projects/quilt.cpp/src/types/formattables/enablement_expander.cpp
+++ b/projects/quilt.cpp/src/types/formattables/enablement_expander.cpp
@@ -244,21 +244,21 @@ make_local_type_group(const annotations::type_repository& atrp,
     return r;
 }
 
-std::unordered_map<std::type_index, enablement_expander::local_type_group_type>
-enablement_expander::bucket_local_type_group_by_type_index(
+std::unordered_map<std::string, enablement_expander::local_type_group_type>
+enablement_expander::bucket_local_type_group_by_meta_type(
     const local_type_group_type& unbucketed_ltgs,
     const formatters::repository& frp) const {
 
     BOOST_LOG_SEV(lg, debug) << "Started bucketing local field definitions "
                              << "by type index.";
-    std::unordered_map<std::type_index,
+    std::unordered_map<std::string,
                        enablement_expander::local_type_group_type> r;
 
-    for (const auto& pair: frp.stock_artefact_formatters_by_type_index()) {
-        const auto& ti(pair.first);
+    for (const auto& pair: frp.stock_artefact_formatters_by_meta_type()) {
+        const auto& mt(pair.first);
         const auto& fmts(pair.second);
 
-        local_type_group_type& ltg(r[ti]);
+        local_type_group_type& ltg(r[mt]);
         for (const auto& fmt: fmts) {
             const auto arch(fmt->archetype_location().archetype());
             const auto i(unbucketed_ltgs.find(arch));
@@ -496,7 +496,7 @@ void enablement_expander::expand(const annotations::type_repository& atrp,
      * Bucket the local types by element - i.e., we only care about
      * those formatters which are valid for a particular element.
      */
-    const auto ltgti(bucket_local_type_group_by_type_index(ltg, frp));
+    const auto ltgmt(bucket_local_type_group_by_meta_type(ltg, frp));
 
     for (auto& pair : fm.formattables()) {
         const auto id(pair.first);
@@ -513,15 +513,15 @@ void enablement_expander::expand(const annotations::type_repository& atrp,
             if (is_element_disabled(e))
                 continue;
 
-            const auto ti(std::type_index(typeid(e)));
-            BOOST_LOG_SEV(lg, debug) << "Type index: " << ti.name();
+            const auto mt(e.meta_name().id());
+            BOOST_LOG_SEV(lg, debug) << "Meta-type: " << mt;
 
             /*
              * Not all elements have formatters; for example, concepts
              * don't have any at present. If so, skip the element.
              */
-            const auto i(ltgti.find(ti));
-            if (i == ltgti.end()) {
+            const auto i(ltgmt.find(mt));
+            if (i == ltgmt.end()) {
                 BOOST_LOG_SEV(lg, debug) << "Element has no formatters, "
                                          << " so nothing enable.";
                 continue;
diff --git a/projects/quilt.cpp/src/types/formattables/inclusion_expander.cpp b/projects/quilt.cpp/src/types/formattables/inclusion_expander.cpp
index 9a79f97c0..7e29c61eb 100644
--- a/projects/quilt.cpp/src/types/formattables/inclusion_expander.cpp
+++ b/projects/quilt.cpp/src/types/formattables/inclusion_expander.cpp
@@ -122,7 +122,7 @@ inclusion_expander::compute_inclusion_dependencies(
      * formatters' collection - for example, we do not have any
      * formatters for concepts at present. If so, we're done.
      *
-     * Note also that we must query the formatters by type index
+     * Note also that we must query the formatters by meta-type
      * rather than use the archetype configuration container
      * directly. This is due to element segmentation, as we may have
      * more than one element associated with an id. To generate the
@@ -130,10 +130,10 @@ inclusion_expander::compute_inclusion_dependencies(
      * element and the formatters that support it.
      */
     element_inclusion_dependencies_type r;
-    const auto ti(std::type_index(typeid(e)));
-    const auto i(frp.stock_artefact_formatters_by_type_index().find(ti));
-    if (i == frp.stock_artefact_formatters_by_type_index().end()) {
-        BOOST_LOG_SEV(lg, debug) << "No formatters for type: " << ti.name();
+    const auto mt(e.meta_name().id());
+    const auto i(frp.stock_artefact_formatters_by_meta_type().find(mt));
+    if (i == frp.stock_artefact_formatters_by_meta_type().end()) {
+        BOOST_LOG_SEV(lg, debug) << "No formatters for type: " << mt;
         return r;
     }
 
diff --git a/projects/quilt.cpp/src/types/formattables/transformer.cpp b/projects/quilt.cpp/src/types/formattables/transformer.cpp
index f1547e474..1a531963b 100644
--- a/projects/quilt.cpp/src/types/formattables/transformer.cpp
+++ b/projects/quilt.cpp/src/types/formattables/transformer.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <typeindex>
 #include <boost/lexical_cast.hpp>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
@@ -156,9 +155,9 @@ model transformer:: transform(const formatters::repository& frp,
          * elements such as concepts do not have formatters at
          * present.
          */
-        const auto ti(std::type_index(typeid(e)));
-        const auto j(frp.stock_artefact_formatters_by_type_index().find(ti));
-        if (j == frp.stock_artefact_formatters_by_type_index().end()) {
+        const auto mt(e.meta_name().id());
+        const auto j(frp.stock_artefact_formatters_by_meta_type().find(mt));
+        if (j == frp.stock_artefact_formatters_by_meta_type().end()) {
             BOOST_LOG_SEV(lg, debug) << "Element has no formatters: " << id;
             continue;
         }
diff --git a/projects/quilt.cpp/src/types/formatters/registrar.cpp b/projects/quilt.cpp/src/types/formatters/registrar.cpp
index ed3db3166..d24cd1eb4 100644
--- a/projects/quilt.cpp/src/types/formatters/registrar.cpp
+++ b/projects/quilt.cpp/src/types/formatters/registrar.cpp
@@ -67,7 +67,7 @@ void registrar::validate() const {
      * way of troubleshooting validation errors.
      */
     const auto& frp(formatter_repository_);
-    if (frp.stock_artefact_formatters_by_type_index().empty()) {
+    if (frp.stock_artefact_formatters_by_meta_type().empty()) {
         BOOST_LOG_SEV(lg, error) << no_file_formatters_by_type_index;
         BOOST_THROW_EXCEPTION(
             registrar_error(no_file_formatters_by_type_index));
@@ -77,10 +77,10 @@ void registrar::validate() const {
      * Validate the registered canonical formatters.
      */
     const auto cs(inclusion_support_types::canonical_support);
-    for (const auto& pair : frp.stock_artefact_formatters_by_type_index()) {
-        BOOST_LOG_SEV(lg, debug) << "Processing type: " << pair.first.name();
+    for (const auto& pair : frp.stock_artefact_formatters_by_meta_type()) {
+        const auto mt(pair.first);
+        BOOST_LOG_SEV(lg, debug) << "Processing type: " << mt;
 
-        const auto& ti(pair.first);
         const auto& formatters(pair.second);
         std::set<std::string> facets_found;
         std::set<std::string> all_facets;
@@ -100,7 +100,7 @@ void registrar::validate() const {
                 const auto arch(al.archetype());
                 BOOST_LOG_SEV(lg, error) << more_than_one_canonical_archetype
                                          << fct << " archetype: " << arch
-                                         << " type: " << ti.name();
+                                         << " meta_type: " << mt;
                 BOOST_THROW_EXCEPTION(registrar_error(
                         more_than_one_canonical_archetype + fct));
             }
@@ -165,14 +165,14 @@ register_formatter(std::shared_ptr<artefact_formatter_interface> f) {
      * Add the formatter to the archetype location stores.
      */
     archetype_locations_.push_front(al);
-    const auto ti(f->element_type_index());
-    archetype_locations_by_element_type_index_[ti].push_back(al);
+    const auto mt(f->meta_name().id());
+    archetype_locations_by_meta_type_[mt].push_back(al);
 
     /*
      * Add the formatter to the index by element type index.
      */
-    auto& ffti(formatter_repository_.stock_artefact_formatters_by_type_index());
-    ffti[ti].push_front(f);
+    auto& safbmt(formatter_repository_.stock_artefact_formatters_by_meta_type());
+    safbmt[mt].push_front(f);
 
     /*
      * Add formatter to the index by archetype name. Inserting the
@@ -213,10 +213,10 @@ registrar::archetype_locations() const {
     return archetype_locations_;
 }
 
-const std::unordered_map<std::type_index,
+const std::unordered_map<std::string,
                          std::list<annotations::archetype_location>>&
-registrar::archetype_locations_by_element_type_index() const {
-    return archetype_locations_by_element_type_index_;
+registrar::archetype_locations_by_meta_type() const {
+    return archetype_locations_by_meta_type_;
 }
 
 const std::unordered_map<
diff --git a/projects/quilt.cpp/src/types/formatters/repository.cpp b/projects/quilt.cpp/src/types/formatters/repository.cpp
index dccaa3999..9e23ee988 100644
--- a/projects/quilt.cpp/src/types/formatters/repository.cpp
+++ b/projects/quilt.cpp/src/types/formatters/repository.cpp
@@ -28,10 +28,10 @@ namespace cpp {
 namespace formatters {
 
 std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-repository::stock_artefact_formatters_by_type_index() {
-    return stock_artefact_formatters_by_type_index_;
+repository::stock_artefact_formatters_by_meta_type() {
+    return stock_artefact_formatters_by_meta_type_;
 }
 
 std::unordered_map<std::string, std::shared_ptr<artefact_formatter_interface>>&
@@ -45,10 +45,10 @@ repository::stock_artefact_formatters() {
 }
 
 const std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-repository::stock_artefact_formatters_by_type_index() const {
-    return stock_artefact_formatters_by_type_index_;
+repository::stock_artefact_formatters_by_meta_type() const {
+    return stock_artefact_formatters_by_meta_type_;
 }
 
 std::unordered_map<
diff --git a/projects/quilt.cpp/src/types/formatters/workflow.cpp b/projects/quilt.cpp/src/types/formatters/workflow.cpp
index cc1dced22..2a234e265 100644
--- a/projects/quilt.cpp/src/types/formatters/workflow.cpp
+++ b/projects/quilt.cpp/src/types/formatters/workflow.cpp
@@ -92,14 +92,14 @@ workflow::format(const formattables::model& fm,
     const auto id(e.name().id());
     BOOST_LOG_SEV(lg, debug) << "Procesing element: " << id;
 
-    const auto ti(std::type_index(typeid(e)));
-    BOOST_LOG_SEV(lg, debug) << "Type index: " << ti.name();
+    const auto mt(e.meta_name().id());
+    BOOST_LOG_SEV(lg, debug) << "Meta-type: " << mt;
 
     std::list<dogen::formatters::artefact> r;
     const auto& frp(registrar().formatter_repository());
-    const auto i(frp.stock_artefact_formatters_by_type_index().find(ti));
-    if (i == frp.stock_artefact_formatters_by_type_index().end()) {
-        BOOST_LOG_SEV(lg, debug) << "No formatters for type: " << ti.name();
+    const auto i(frp.stock_artefact_formatters_by_meta_type().find(mt));
+    if (i == frp.stock_artefact_formatters_by_meta_type().end()) {
+        BOOST_LOG_SEV(lg, debug) << "No formatters for meta-type: " << mt;
         return r;
     }
 
diff --git a/projects/quilt.cpp/src/types/kernel.cpp b/projects/quilt.cpp/src/types/kernel.cpp
index 130398926..5884ef8a5 100644
--- a/projects/quilt.cpp/src/types/kernel.cpp
+++ b/projects/quilt.cpp/src/types/kernel.cpp
@@ -101,11 +101,11 @@ kernel::archetype_locations() const {
     return rg.archetype_locations();
 }
 
-const std::unordered_map<std::type_index,
+const std::unordered_map<std::string,
                          std::list<annotations::archetype_location>>&
-kernel::archetype_locations_by_element_type_index() const {
+kernel::archetype_locations_by_meta_type() const {
     const auto& rg(formatters::workflow::registrar());
-    return rg.archetype_locations_by_element_type_index();
+    return rg.archetype_locations_by_meta_type();
 }
 
 yarn::meta_model::languages kernel::language() const {
diff --git a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formattables/project_items_expander.hpp b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formattables/project_items_expander.hpp
index eb2e37f44..f1dff0b32 100644
--- a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formattables/project_items_expander.hpp
+++ b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formattables/project_items_expander.hpp
@@ -25,7 +25,8 @@
 #pragma once
 #endif
 
-#include <typeindex>
+#include <string>
+#include <unordered_set>
 #include "dogen/quilt.csharp/types/formattables/model.hpp"
 
 namespace dogen {
@@ -35,7 +36,8 @@ namespace formattables {
 
 class project_items_expander final {
 private:
-    bool is_project_item(const std::type_index& ti) const;
+    static std::unordered_set<std::string> meta_types_project_items();
+    bool is_project_item(const std::string& mt) const;
 
 public:
     void expand(model& fm) const;
diff --git a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/registrar.hpp b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/registrar.hpp
index 553970285..3712843a4 100644
--- a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/registrar.hpp
+++ b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/registrar.hpp
@@ -27,7 +27,6 @@
 
 #include <list>
 #include <memory>
-#include <typeindex>
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/annotations/types/archetype_location.hpp"
@@ -73,19 +72,18 @@ public:
     archetype_locations() const;
 
     /**
-     * @brief Returns the archetype locations for each element type
-     * index.
+     * @brief Returns the archetype locations for each meta-type.
      */
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const;
+    archetype_locations_by_meta_type() const;
 
 private:
     repository formatter_repository_;
     std::forward_list<annotations::archetype_location> archetype_locations_;
-    std::unordered_map<std::type_index,
+    std::unordered_map<std::string,
                        std::list<annotations::archetype_location>>
-    archetype_locations_by_element_type_index_;
+    archetype_locations_by_meta_type_;
 };
 
 template<typename Formatter>
diff --git a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/repository.hpp b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/repository.hpp
index c3826821b..7141378f7 100644
--- a/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/repository.hpp
+++ b/projects/quilt.csharp/include/dogen/quilt.csharp/types/formatters/repository.hpp
@@ -28,7 +28,6 @@
 #include <list>
 #include <string>
 #include <memory>
-#include <typeindex>
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/quilt.csharp/types/formatters/helper_formatter_interface_fwd.hpp"
@@ -51,10 +50,10 @@ private:
      * @brief Returns all available file formatters by type indx.
      */
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<std::shared_ptr<artefact_formatter_interface>>
     >&
-    stock_artefact_formatters_by_type_index();
+    stock_artefact_formatters_by_meta_type();
 
     /**
      * @brief Returns all available file formatters by archetype name.
@@ -84,9 +83,9 @@ public:
      * @brief Returns all available file formatters by type indx.
      */
     const std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-    stock_artefact_formatters_by_type_index() const;
+    stock_artefact_formatters_by_meta_type() const;
 
     /**
      * @brief Returns all available file formatters by formatter name.
@@ -113,9 +112,9 @@ public:
 
 private:
     std::unordered_map<
-        std::type_index,
+        std::string,
         std::forward_list<std::shared_ptr<artefact_formatter_interface>>>
-    stock_artefact_formatters_by_type_index_;
+    stock_artefact_formatters_by_meta_type_;
     std::unordered_map<std::string,
                        std::shared_ptr<artefact_formatter_interface>>
     stock_artefact_formatters_by_archetype_;
diff --git a/projects/quilt.csharp/include/dogen/quilt.csharp/types/kernel.hpp b/projects/quilt.csharp/include/dogen/quilt.csharp/types/kernel.hpp
index 5ed990a0a..82717c3e9 100644
--- a/projects/quilt.csharp/include/dogen/quilt.csharp/types/kernel.hpp
+++ b/projects/quilt.csharp/include/dogen/quilt.csharp/types/kernel.hpp
@@ -77,9 +77,9 @@ public:
     std::forward_list<annotations::archetype_location>
         archetype_locations() const override;
 
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const override;
+    archetype_locations_by_meta_type() const override;
 
 
     yarn::meta_model::languages language() const override;
diff --git a/projects/quilt.csharp/src/io/formatters/repository_io.cpp b/projects/quilt.csharp/src/io/formatters/repository_io.cpp
index 781d08729..da7a57bf9 100644
--- a/projects/quilt.csharp/src/io/formatters/repository_io.cpp
+++ b/projects/quilt.csharp/src/io/formatters/repository_io.cpp
@@ -68,13 +68,13 @@ inline std::ostream& to_stream(std::ostream& s,
 }
 
 inline std::ostream& to_stream(std::ostream& s,
-    const std::unordered_map<std::type_index,
-    std::forward_list<std::shared_ptr<artefact_formatter_interface>>>& safti) {
-    s << "\"stock_artefact_formatters_by_type_index\": " << "[ ";
+    const std::unordered_map<std::string,
+    std::forward_list<std::shared_ptr<artefact_formatter_interface>>>& safmt) {
+    s << "\"stock_artefact_formatters_by_meta_type\": " << "[ ";
 
-    for(auto i(safti.begin()); i != safti.end(); ++i) {
-        if (i != safti.begin()) s << ", ";
-        s <<  "{ \"" << i->first.name() << "\":" << "[ ";
+    for(auto i(safmt.begin()); i != safmt.end(); ++i) {
+        if (i != safmt.begin()) s << ", ";
+        s <<  "{ \"" << i->first << "\":" << "[ ";
         for(auto j(i->second.begin()); j != i->second.end(); ++j) {
             if (j != i->second.begin()) s << ", ";
                 s <<  "\"" << (*j)->formatter_name() << "\"";
@@ -89,7 +89,7 @@ inline std::ostream& to_stream(std::ostream& s,
 std::ostream& operator<<(std::ostream& s, const repository& rp) {
     s << "{ " << "\"__type__\": "
       << "\"dogen::quilt::cpp::formatters::container\", ";
-    to_stream(s, rp.stock_artefact_formatters_by_type_index());
+    to_stream(s, rp.stock_artefact_formatters_by_meta_type());
     to_stream(s, "stock_artefact_formatters", rp.stock_artefact_formatters());
     to_stream(s, rp.helper_formatters());
     s << " }";
diff --git a/projects/quilt.csharp/src/types/formattables/project_items_expander.cpp b/projects/quilt.csharp/src/types/formattables/project_items_expander.cpp
index 976a327c9..ffe4df081 100644
--- a/projects/quilt.csharp/src/types/formattables/project_items_expander.cpp
+++ b/projects/quilt.csharp/src/types/formattables/project_items_expander.cpp
@@ -20,6 +20,7 @@
  */
 #include <set>
 #include <algorithm>
+#include"dogen/yarn/types/helpers/meta_name_factory.hpp"
 #include"dogen/yarn/types/meta_model/object.hpp"
 #include"dogen/yarn/types/meta_model/visitor.hpp"
 #include"dogen/yarn/types/meta_model/builtin.hpp"
@@ -27,6 +28,7 @@
 #include"dogen/yarn/types/meta_model/enumeration.hpp"
 #include"dogen/yarn/types/meta_model/primitive.hpp"
 #include "dogen/quilt.csharp/types/fabric/assistant.hpp"
+#include "dogen/quilt.csharp/types/fabric/meta_name_factory.hpp"
 #include "dogen/quilt.csharp/types/formattables/project_items_expander.hpp"
 
 namespace dogen {
@@ -34,15 +36,27 @@ namespace quilt {
 namespace csharp {
 namespace formattables {
 
-bool project_items_expander::is_project_item(const std::type_index& ti) const {
-    return
-        ti == std::type_index(typeid(fabric::assistant)) ||
-        ti == std::type_index(typeid(yarn::meta_model::enumeration)) ||
-        ti == std::type_index(typeid(yarn::meta_model::primitive)) ||
-        ti == std::type_index(typeid(yarn::meta_model::exception)) ||
-        ti == std::type_index(typeid(yarn::meta_model::object)) ||
-        ti == std::type_index(typeid(yarn::meta_model::builtin)) ||
-        ti == std::type_index(typeid(yarn::meta_model::visitor));
+std::unordered_set<std::string>
+project_items_expander::meta_types_project_items() {
+    std::unordered_set<std::string> r;
+
+    using ymnf = yarn::helpers::meta_name_factory;
+    r.insert(ymnf::make_enumeration_name().id());
+    r.insert(ymnf::make_primitive_name().id());
+    r.insert(ymnf::make_exception_name().id());
+    r.insert(ymnf::make_object_name().id());
+    r.insert(ymnf::make_builtin_name().id());
+    r.insert(ymnf::make_visitor_name().id());
+
+    r.insert(fabric::meta_name_factory::make_assistant_name().id());
+    return r;
+}
+
+
+bool project_items_expander::is_project_item(const std::string& mt) const {
+    static const auto mtpi(meta_types_project_items());
+    const auto i(mtpi.find(mt));
+    return i != mtpi.end();
 }
 
 void project_items_expander::expand(model& fm) const {
@@ -51,8 +65,8 @@ void project_items_expander::expand(model& fm) const {
         const auto& formattable(pair.second);
         const auto& e(*formattable.element());
 
-        const auto ti(std::type_index(typeid(e)));
-        if (!is_project_item(ti))
+        const auto mt(e.meta_name().id());
+        if (!is_project_item(mt))
             continue;
 
         const auto& eprops(formattable.element_properties());
diff --git a/projects/quilt.csharp/src/types/formattables/transformer.cpp b/projects/quilt.csharp/src/types/formattables/transformer.cpp
index ed8743f83..ab832d239 100644
--- a/projects/quilt.csharp/src/types/formattables/transformer.cpp
+++ b/projects/quilt.csharp/src/types/formattables/transformer.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <typeindex>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/quilt.csharp/types/formattables/artefact_properties.hpp"
@@ -62,9 +61,9 @@ std::unordered_map<std::string, formattable> transformer::transform(
         /*
          * Check to see if the element has any formatters.
          */
-        const auto ti(std::type_index(typeid(e)));
-        const auto j(frp.stock_artefact_formatters_by_type_index().find(ti));
-        if (j == frp.stock_artefact_formatters_by_type_index().end()) {
+        const auto mt(e.meta_name().id());
+        const auto j(frp.stock_artefact_formatters_by_meta_type().find(mt));
+        if (j == frp.stock_artefact_formatters_by_meta_type().end()) {
             BOOST_LOG_SEV(lg, debug) << "Element has no formatters: " << id;
             continue;
         }
diff --git a/projects/quilt.csharp/src/types/formatters/registrar.cpp b/projects/quilt.csharp/src/types/formatters/registrar.cpp
index 93a0c214d..224aea117 100644
--- a/projects/quilt.csharp/src/types/formatters/registrar.cpp
+++ b/projects/quilt.csharp/src/types/formatters/registrar.cpp
@@ -32,8 +32,8 @@ using namespace dogen::utility::log;
 static logger lg(logger_factory("quilt.csharp.formatters.registrar"));
 
 const std::string no_file_formatters("File formatters repository is empty.");
-const std::string no_file_formatters_by_type_index(
-    "No file formatters by type index provided.");
+const std::string no_file_formatters_by_meta_type(
+    "No file formatters by meta-type provided.");
 
 const std::string null_formatter_helper("Formatter helper supplied is null");
 const std::string null_formatter("Formatter supplied is null.");
@@ -56,10 +56,9 @@ void registrar::validate() const {
      * way of troubleshooting validation errors.
      */
     const auto& frp(formatter_repository_);
-    if (frp.stock_artefact_formatters_by_type_index().empty()) {
-        BOOST_LOG_SEV(lg, error) << no_file_formatters_by_type_index;
-        BOOST_THROW_EXCEPTION(
-            registrar_error(no_file_formatters_by_type_index));
+    if (frp.stock_artefact_formatters_by_meta_type().empty()) {
+        BOOST_LOG_SEV(lg, error) << no_file_formatters_by_meta_type;
+        BOOST_THROW_EXCEPTION(registrar_error(no_file_formatters_by_meta_type));
     }
 
     if (frp.stock_artefact_formatters().empty()) {
@@ -94,14 +93,14 @@ register_formatter(std::shared_ptr<artefact_formatter_interface> f) {
      * Add the formatter to the archetype location stores.
      */
     archetype_locations_.push_front(al);
-    const auto ti(f->element_type_index());
-    archetype_locations_by_element_type_index_[ti].push_back(al);
+    const auto mt(f->meta_name().id());
+    archetype_locations_by_meta_type_[mt].push_back(al);
 
     /*
      * Add the formatter to the index by element type index.
      */
-    auto& ffti(formatter_repository_.stock_artefact_formatters_by_type_index());
-    ffti[ti].push_front(f);
+    auto& safmt(formatter_repository_.stock_artefact_formatters_by_meta_type());
+    safmt[mt].push_front(f);
 
     /*
      * Add formatter to the index by archetype name. Inserting the
@@ -140,10 +139,10 @@ registrar::archetype_locations() const {
     return archetype_locations_;
 }
 
-const std::unordered_map<std::type_index,
+const std::unordered_map<std::string,
                          std::list<annotations::archetype_location>>&
-registrar::archetype_locations_by_element_type_index() const {
-    return archetype_locations_by_element_type_index_;
+registrar::archetype_locations_by_meta_type() const {
+    return archetype_locations_by_meta_type_;
 }
 
 } } } }
diff --git a/projects/quilt.csharp/src/types/formatters/repository.cpp b/projects/quilt.csharp/src/types/formatters/repository.cpp
index 006910eac..ac295436d 100644
--- a/projects/quilt.csharp/src/types/formatters/repository.cpp
+++ b/projects/quilt.csharp/src/types/formatters/repository.cpp
@@ -27,10 +27,10 @@ namespace csharp {
 namespace formatters {
 
 std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-repository::stock_artefact_formatters_by_type_index() {
-    return stock_artefact_formatters_by_type_index_;
+repository::stock_artefact_formatters_by_meta_type() {
+    return stock_artefact_formatters_by_meta_type_;
 }
 
 std::unordered_map<std::string, std::shared_ptr<artefact_formatter_interface>>&
@@ -53,10 +53,10 @@ std::unordered_map<
 }
 
 const std::unordered_map<
-    std::type_index,
+    std::string,
     std::forward_list<std::shared_ptr<artefact_formatter_interface>>>&
-repository::stock_artefact_formatters_by_type_index() const {
-    return stock_artefact_formatters_by_type_index_;
+repository::stock_artefact_formatters_by_meta_type() const {
+    return stock_artefact_formatters_by_meta_type_;
 }
 
 const std::unordered_map<std::string,
diff --git a/projects/quilt.csharp/src/types/formatters/workflow.cpp b/projects/quilt.csharp/src/types/formatters/workflow.cpp
index 32220f0fc..d024c72f1 100644
--- a/projects/quilt.csharp/src/types/formatters/workflow.cpp
+++ b/projects/quilt.csharp/src/types/formatters/workflow.cpp
@@ -58,13 +58,13 @@ workflow::execute(const formattables::model& fm) const {
         const auto id(e.name().id());
         BOOST_LOG_SEV(lg, debug) << "Procesing element: " << id;
 
-        const auto ti(std::type_index(typeid(e)));
-        BOOST_LOG_SEV(lg, debug) << "Type index: " << ti.name();
+        const auto mt(e.meta_name().id());
+        BOOST_LOG_SEV(lg, debug) << "Meta-type: " << mt;
 
         const auto& frp(registrar().formatter_repository());
-        const auto i(frp.stock_artefact_formatters_by_type_index().find(ti));
-        if (i == frp.stock_artefact_formatters_by_type_index().end()) {
-            BOOST_LOG_SEV(lg, debug) << "No formatters for type: " << ti.name();
+        const auto i(frp.stock_artefact_formatters_by_meta_type().find(mt));
+        if (i == frp.stock_artefact_formatters_by_meta_type().end()) {
+            BOOST_LOG_SEV(lg, debug) << "No formatters for meta-type: " << mt;
             return r;
         }
 
diff --git a/projects/quilt.csharp/src/types/kernel.cpp b/projects/quilt.csharp/src/types/kernel.cpp
index af0af70e0..ee2a491d6 100644
--- a/projects/quilt.csharp/src/types/kernel.cpp
+++ b/projects/quilt.csharp/src/types/kernel.cpp
@@ -71,11 +71,11 @@ kernel::archetype_locations() const {
 }
 
 const std::unordered_map<
-    std::type_index,
+    std::string,
     std::list<annotations::archetype_location>>&
-kernel::archetype_locations_by_element_type_index() const {
+kernel::archetype_locations_by_meta_type() const {
     const auto& rg(formatters::workflow::registrar());
-    return rg.archetype_locations_by_element_type_index();
+    return rg.archetype_locations_by_meta_type();
 }
 
 yarn::meta_model::languages kernel::language() const {
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/context.hpp b/projects/yarn/include/dogen/yarn/types/transforms/context.hpp
index 2690cc1cb..a2a196d0d 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/context.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/context.hpp
@@ -27,7 +27,7 @@
 
 #include <list>
 #include <vector>
-#include <typeindex>
+#include <string>
 #include <boost/filesystem/path.hpp>
 #include "dogen/options/types/knitting_options.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
@@ -59,8 +59,8 @@ public:
         const std::vector<boost::filesystem::path>& data_directories,
         const options::knitting_options& options,
         const std::unordered_map<
-        std::type_index, std::list<annotations::archetype_location>>&
-        als_by_type,
+        std::string, std::list<annotations::archetype_location>>&
+        als_by_meta_type,
         const annotations::archetype_location_repository& alrp,
         const annotations::type_repository& atrp,
         const helpers::mapping_set_repository& msrp,
@@ -85,12 +85,11 @@ public:
     archetype_location_repository() const;
 
     /**
-     * @brief Returns the archetype locations for each element type
-     * index.
+     * @brief Returns the archetype locations for each meta-type.
      */
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const;
+    archetype_locations_by_meta_type() const;
 
     /**
      * @brief Repository with annotation types, used to validate and
@@ -117,9 +116,9 @@ public:
 private:
     const std::vector<boost::filesystem::path> data_directories_;
     const dogen::options::knitting_options options_;
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index_;
+    archetype_locations_by_meta_type_;
     const annotations::archetype_location_repository
     archetype_location_repository_;
     const annotations::type_repository type_repository_;
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
index d14ed4d22..7b31b88b2 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
@@ -25,6 +25,7 @@
 #pragma once
 #endif
 
+#include <string>
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/local_enablement_configuration.hpp"
 #include "dogen/yarn/types/transforms/global_enablement_configuration.hpp"
@@ -88,12 +89,12 @@ private:
     make_local_type_group(const annotations::type_repository& atrp,
         const std::list<annotations::archetype_location>& als);
 
-    static std::unordered_map<std::type_index, local_type_group_type>
-    bucket_local_type_group_by_type_index(
+    static std::unordered_map<std::string, local_type_group_type>
+    bucket_local_type_group_by_meta_type(
         const local_type_group_type& unbucketed_ltgs,
-        const std::unordered_map<std::type_index,
+        const std::unordered_map<std::string,
         std::list<annotations::archetype_location>>&
-        archetype_locations_by_element_type_index);
+        archetype_locations_by_meta_type);
 
 private:
     typedef std::unordered_map<std::string, local_enablement_configuration>
@@ -114,7 +115,7 @@ private:
 
     static void compute_enablement_for_element(
         const global_enablement_configurations_type& gcs,
-        const std::unordered_map<std::type_index, local_type_group_type>& ltgti,
+        const std::unordered_map<std::string, local_type_group_type>& ltgmt,
         meta_model::element& e);
 
 public:
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/kernel_interface.hpp b/projects/yarn/include/dogen/yarn/types/transforms/kernel_interface.hpp
index 9eced0d0b..168d826b1 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/kernel_interface.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/kernel_interface.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <list>
-#include <typeindex>
+#include <string>
 #include <forward_list>
 #include <boost/filesystem/path.hpp>
 #include "dogen/annotations/types/archetype_location.hpp"
@@ -65,13 +65,11 @@ public:
     archetype_locations() const = 0;
 
     /**
-     * @brief Returns the archetype locations for each element type
-     * index.
+     * @brief Returns the archetype locations for each meta-type.
      */
     virtual const std::unordered_map<
-        std::type_index,
-        std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const = 0;
+        std::string, std::list<annotations::archetype_location>>&
+    archetype_locations_by_meta_type() const = 0;
 
     /**
      * @brief Language supported by this kernel.
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/kernel_registrar.hpp b/projects/yarn/include/dogen/yarn/types/transforms/kernel_registrar.hpp
index b3dac9a16..04e1a7b52 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/kernel_registrar.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/kernel_registrar.hpp
@@ -29,7 +29,6 @@
 #include <list>
 #include <string>
 #include <memory>
-#include <typeindex>
 #include <unordered_map>
 #include "dogen/annotations/types/archetype_location.hpp"
 #include "dogen/yarn/types/meta_model/languages.hpp"
@@ -81,15 +80,15 @@ public:
      * @brief Returns the archetype locations for each element type
      * index.
      */
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
                              std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index() const;
+    archetype_locations_by_meta_type() const;
 
 private:
     std::list<annotations::archetype_location> archetype_locations_;
-    std::unordered_map<std::type_index,
+    std::unordered_map<std::string,
                        std::list<annotations::archetype_location>>
-    archetype_locations_by_element_type_index_;
+    archetype_locations_by_meta_type_;
     std::unordered_map<yarn::meta_model::languages,
                        std::shared_ptr<kernel_interface>> kernels_by_language_;
 };
diff --git a/projects/yarn/src/types/transforms/artefact_properties_transform.cpp b/projects/yarn/src/types/transforms/artefact_properties_transform.cpp
index 88431f5d6..38fd56d01 100644
--- a/projects/yarn/src/types/transforms/artefact_properties_transform.cpp
+++ b/projects/yarn/src/types/transforms/artefact_properties_transform.cpp
@@ -46,9 +46,9 @@ update_element(const context& ctx, meta_model::element& e) {
      * such as concepts do not have any at present.
      */
     const auto id(e.name().id());
-    const auto ti(std::type_index(typeid(e)));
-    const auto& c(ctx.archetype_locations_by_element_type_index());
-    const auto i(c.find(ti));
+    const auto mt(e.meta_name().id());
+    const auto& c(ctx.archetype_locations_by_meta_type());
+    const auto i(c.find(mt));
     if (i == c.end()) {
         BOOST_LOG_SEV(lg, debug) << "Element has no archetypes: " << id;
         return;
diff --git a/projects/yarn/src/types/transforms/context.cpp b/projects/yarn/src/types/transforms/context.cpp
index 54c7edf6d..ec9d2b584 100644
--- a/projects/yarn/src/types/transforms/context.cpp
+++ b/projects/yarn/src/types/transforms/context.cpp
@@ -28,14 +28,14 @@ context::context(
         const std::vector<boost::filesystem::path>& data_directories,
         const options::knitting_options& options,
         const std::unordered_map<
-        std::type_index, std::list<annotations::archetype_location>>&
-        als_by_type,
+        std::string, std::list<annotations::archetype_location>>&
+        als_by_meta_type,
         const annotations::archetype_location_repository& alrp,
         const annotations::type_repository& atrp,
         const helpers::mapping_set_repository& msrp,
         const dogen::formatters::repository& frp) :
     data_directories_(data_directories), options_(options),
-    archetype_locations_by_element_type_index_(als_by_type),
+    archetype_locations_by_meta_type_(als_by_meta_type),
     archetype_location_repository_(alrp), type_repository_(atrp),
     groups_factory_(data_directories, archetype_location_repository_,
         type_repository_),
@@ -54,10 +54,10 @@ context::archetype_location_repository() const {
     return archetype_location_repository_;
 }
 
-const std::unordered_map<std::type_index,
+const std::unordered_map<std::string,
                          std::list<annotations::archetype_location>>&
-context::archetype_locations_by_element_type_index() const {
-    return archetype_locations_by_element_type_index_;
+context::archetype_locations_by_meta_type() const {
+    return archetype_locations_by_meta_type_;
 }
 
 const annotations::type_repository& context::type_repository() const {
diff --git a/projects/yarn/src/types/transforms/context_factory.cpp b/projects/yarn/src/types/transforms/context_factory.cpp
index 0145645cf..5c905aea1 100644
--- a/projects/yarn/src/types/transforms/context_factory.cpp
+++ b/projects/yarn/src/types/transforms/context_factory.cpp
@@ -58,8 +58,8 @@ context context_factory::make(const options::knitting_options& o) {
 
     formatters::repository_factory frpf;
     const auto frp(frpf.make(data_dirs));
-    const auto& albeti(rg.archetype_locations_by_element_type_index());
-    const context r(data_dirs, o, albeti, alrp, atrp, msrp, frp);
+    const auto& albmt(rg.archetype_locations_by_meta_type());
+    const context r(data_dirs, o, albmt, alrp, atrp, msrp, frp);
 
     BOOST_LOG_SEV(lg, debug) << "Created the context.";
     return r;
diff --git a/projects/yarn/src/types/transforms/enablement_transform.cpp b/projects/yarn/src/types/transforms/enablement_transform.cpp
index 548d37273..3955fed63 100644
--- a/projects/yarn/src/types/transforms/enablement_transform.cpp
+++ b/projects/yarn/src/types/transforms/enablement_transform.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <typeindex>
 #include <functional>
 #include <unordered_map>
 #include <boost/optional.hpp>
@@ -224,22 +223,22 @@ make_local_type_group(const annotations::type_repository& atrp,
     return r;
 }
 
-std::unordered_map<std::type_index, enablement_transform::local_type_group_type>
-enablement_transform::bucket_local_type_group_by_type_index(
+std::unordered_map<std::string, enablement_transform::local_type_group_type>
+enablement_transform::bucket_local_type_group_by_meta_type(
     const local_type_group_type& unbucketed_ltgs,
-    const std::unordered_map<std::type_index,
+    const std::unordered_map<std::string,
     std::list<annotations::archetype_location>>&
-    archetype_locations_by_element_type_index) {
+    archetype_locations_by_meta_type) {
 
     BOOST_LOG_SEV(lg, debug) << "Started bucketing local field definitions "
-                             << "by type index.";
-    std::unordered_map<std::type_index, local_type_group_type> r;
+                             << "by meta-type.";
+    std::unordered_map<std::string, local_type_group_type> r;
 
-    for (const auto& pair: archetype_locations_by_element_type_index) {
-        const auto& ti(pair.first);
+    for (const auto& pair: archetype_locations_by_meta_type) {
+        const auto& mt(pair.first);
         const auto& als(pair.second);
 
-        local_type_group_type& ltg(r[ti]);
+        local_type_group_type& ltg(r[mt]);
         for (const auto& al : als) {
             const auto arch(al.archetype());
             const auto i(unbucketed_ltgs.find(arch));
@@ -439,7 +438,7 @@ void enablement_transform::compute_enablement_for_artefact_properties(
 
 void enablement_transform::compute_enablement_for_element(
     const global_enablement_configurations_type& gcs,
-    const std::unordered_map<std::type_index, local_type_group_type>& ltgti,
+    const std::unordered_map<std::string, local_type_group_type>& ltgmt,
     meta_model::element& e) {
 
     const auto id(e.name().id());
@@ -452,15 +451,15 @@ void enablement_transform::compute_enablement_for_element(
     if (is_element_disabled(e))
         return;
 
-    const auto ti(std::type_index(typeid(e)));
-    BOOST_LOG_SEV(lg, debug) << "Type index: " << ti.name();
+    const auto mt(e.meta_name().id());
+    BOOST_LOG_SEV(lg, debug) << "Meta-type: " << mt;
 
     /*
      * Not all elements have formatters; for example, concepts don't
      * have any at present. If so, skip the element.
      */
-    const auto i(ltgti.find(ti));
-    if (i == ltgti.end()) {
+    const auto i(ltgmt.find(mt));
+    if (i == ltgmt.end()) {
         BOOST_LOG_SEV(lg, debug) << "Element has no formatters, "
                                  << " so nothing enable.";
         return;
@@ -519,12 +518,12 @@ transform(const context& ctx, meta_model::intermediate_model& im) {
      * Bucket the local types by element - i.e., we only care about
      * those formatters which are valid for a particular element.
      */
-    const auto& albeti(ctx.archetype_locations_by_element_type_index());
-    const auto ltgti(bucket_local_type_group_by_type_index(ltg, albeti));
+    const auto& albmt(ctx.archetype_locations_by_meta_type());
+    const auto ltgmt(bucket_local_type_group_by_meta_type(ltg, albmt));
 
     using namespace std::placeholders;
     const auto f(enablement_transform::compute_enablement_for_element);
-    const auto v(std::bind(f, gcs, ltgti, _1));
+    const auto v(std::bind(f, gcs, ltgmt, _1));
     const bool include_injected_elements(true);
     meta_model::elements_traversal(im, v, include_injected_elements);
 
diff --git a/projects/yarn/src/types/transforms/kernel_registrar.cpp b/projects/yarn/src/types/transforms/kernel_registrar.cpp
index 50bb839da..218551f0d 100644
--- a/projects/yarn/src/types/transforms/kernel_registrar.cpp
+++ b/projects/yarn/src/types/transforms/kernel_registrar.cpp
@@ -57,11 +57,11 @@ void kernel_registrar::register_kernel(std::shared_ptr<kernel_interface> k) {
     for (const auto al : k->archetype_locations())
         archetype_locations_.push_back(al);
 
-    for (const auto& pair : k->archetype_locations_by_element_type_index()) {
-        const auto& ti(pair.first);
-        auto& alsti(archetype_locations_by_element_type_index_[ti]);
+    for (const auto& pair : k->archetype_locations_by_meta_type()) {
+        const auto& mt(pair.first);
+        auto& albmt(archetype_locations_by_meta_type_[mt]);
         for (const auto& al : pair.second)
-            alsti.push_back(al);
+            albmt.push_back(al);
     }
 }
 
@@ -93,10 +93,10 @@ kernel_registrar::archetype_locations() const {
     return archetype_locations_;
 }
 
-const std::unordered_map<std::type_index,
+const std::unordered_map<std::string,
                          std::list<annotations::archetype_location>>&
-kernel_registrar::archetype_locations_by_element_type_index() const {
-    return archetype_locations_by_element_type_index_;
+kernel_registrar::archetype_locations_by_meta_type() const {
+    return archetype_locations_by_meta_type_;
 }
 
 } } }
