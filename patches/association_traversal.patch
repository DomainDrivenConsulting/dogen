diff --git a/doc/agile/release_notes_sprint_37.org b/doc/agile/release_notes_sprint_37.org
index 3639350..38744ca 100644
--- a/doc/agile/release_notes_sprint_37.org
+++ b/doc/agile/release_notes_sprint_37.org
@@ -10,13 +10,13 @@ This file contains all stories that were closed during sprint 37.
 ** Development Stories Implemented
 
 #+begin: clocktable :maxlevel 3 :scope subtree
-Clock summary at [2013-10-28 Mon 19:15]
+Clock summary at [2013-10-28 Mon 22:02]
 
 | Headline                                                                 | Time    |       |      |
 |--------------------------------------------------------------------------+---------+-------+------|
-| *Total time*                                                             | *15:11* |       |      |
+| *Total time*                                                             | *16:42* |       |      |
 |--------------------------------------------------------------------------+---------+-------+------|
-| Development Stories Implemented                                          |         | 15:11 |      |
+| Development Stories Implemented                                          |         | 16:42 |      |
 | IMPLEMENTATION Release notes and backlog grooming                        |         |       | 0:06 |
 | COMPLETED Add types header formatter to workflow                         |         |       | 4:14 |
 | COMPLETED Add support for =boost::property_tree::ptree=                  |         |       | 1:43 |
@@ -24,6 +24,7 @@ Clock summary at [2013-10-28 Mon 19:15]
 | COMPLETED ODB pragma generation was broken with =ptree= change           |         |       | 1:14 |
 | COMPLETED Refactor tags, router, adaptor, etc                            |         |       | 1:57 |
 | COMPLETED Implement formatter factory and plug it into workflow          |         |       | 0:39 |
+| IMPLEMENTATION Add include file support to tagger                        |         |       | 1:31 |
 | IMPLEMENTATION Add module support to types header formatter              |         |       | 2:12 |
 | IMPLEMENTATION Add tests for properties and compiler generated functions |         |       | 0:30 |
 #+end:
@@ -177,6 +178,10 @@ how to best rewrite existing code in terms of =ptree=.
     CLOSED: [2013-10-28 Mon 19:15]
     CLOCK: [2013-10-28 Mon 18:35]--[2013-10-28 Mon 19:14] =>  0:39
 
+*** IMPLEMENTATION Add include file support to tagger                 :story:
+    CLOCK: [2013-10-28 Mon 21:05]--[2013-10-28 Mon 21:40] =>  0:35
+    CLOCK: [2013-10-28 Mon 20:09]--[2013-10-28 Mon 21:05] =>  0:56
+
 *** IMPLEMENTATION Add module support to types header formatter       :story:
 **** Add test for module in model
 **** COMPLETED Generic module support                                  :task:
diff --git a/projects/sml/include/dogen/sml/types/association_traversal.hpp b/projects/sml/include/dogen/sml/types/association_traversal.hpp
index 3d92b5b..c31039d 100644
--- a/projects/sml/include/dogen/sml/types/association_traversal.hpp
+++ b/projects/sml/include/dogen/sml/types/association_traversal.hpp
@@ -26,44 +26,26 @@
 #endif
 
 #include "dogen/sml/types/model.hpp"
+#include "dogen/sml/types/type_visitor.hpp"
 
 namespace dogen {
 namespace sml {
 
 /**
- * @brief Performs a traversal across all types in a domain model.
+ * @brief Performs a traversal of the association graph of a given
+ * type.
+ *
+ * The association graph is composed by all types directly associated
+ * with the type via properties or operations. However, it only takes
+ * into account properties or operations that either belong directly
+ * to the type or belong to concepts that the type models.
  */
 /**@{*/
-// template<typename EventVisitor>
-// void association_traversal(const model& m, const abstract_object& o,
-//     const EventVisitor& ev) {
-//     for (const auto& c : m.concepts())
-//         ev.on_next_type(c);
-
-//     for (const auto& p : m.primitives())
-//         ev.on_next_type(p);
-
-//     for (const auto& e : m.enumerations())
-//         ev.on_next_type(e);
-
-//     for (const auto& o : m.objects())
-//         ev.on_next_type(o);
-// }
-
-// template<typename EventVisitor>
-// void association_traversal(model& m, EventVisitor& ev) {
-//     for (const auto& c : m.concepts())
-//         ev.on_next_type(c);
-
-//     for (const auto& p : m.primitives())
-//         ev.on_next_type(p);
-
-//     for (const auto& e : m.enumerations())
-//         ev.on_next_type(e);
+void association_traversal(const model& m, const abstract_object& o,
+    const type_visitor& v);
 
-//     for (const auto& o : m.objects())
-//         ev.on_next_type(o);
-// }
+void association_traversal(const model& m, const abstract_object& o,
+    type_visitor& v);
 /**@}*/
 
 } }
diff --git a/projects/sml/src/types/association_traversal.cpp b/projects/sml/src/types/association_traversal.cpp
index bd4d04b..bd323fd 100644
--- a/projects/sml/src/types/association_traversal.cpp
+++ b/projects/sml/src/types/association_traversal.cpp
@@ -1,2 +1,46 @@
-// dummy function to suppress ranlib warnings
-void association_traversal() { }
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/sml/types/association_traversal.hpp"
+
+namespace dogen {
+namespace sml {
+
+template<typename TypeVisitor>
+class association_extractor {
+public:
+    association_extractor(const model& m, TypeVisitor v) : model_(m) { }
+
+public:
+    void extract
+
+private:
+    const model& model_;
+};
+
+void association_traversal(const model& m, const abstract_object& o,
+    const type_visitor& v) {
+}
+
+void association_traversal(const model& m, const abstract_object& o,
+    type_visitor& v) {
+}
+
+} }
