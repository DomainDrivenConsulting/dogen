diff --git a/diagrams/CMakeLists.txt b/diagrams/CMakeLists.txt
index bbee003..51c7365 100644
--- a/diagrams/CMakeLists.txt
+++ b/diagrams/CMakeLists.txt
@@ -415,3 +415,30 @@ if(use_latest_knitter)
     add_dependencies(codegen_${target} knitter)
 endif()
 add_dependencies(codegen codegen_${target})
+
+set(target stitch)
+add_custom_target(codegen_${target}
+    COMMENT "Generating Stitch model" VERBATIM
+    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
+    COMMAND ${dogen_binary}
+    --target ${CMAKE_SOURCE_DIR}/diagrams/${target}.dia
+    --reference ${CMAKE_SOURCE_DIR}/diagrams/schema.dia,dogen::dynamic
+    --reference ${CMAKE_SOURCE_DIR}/diagrams/formatters.dia,dogen
+    --cpp-project-dir ${CMAKE_SOURCE_DIR}/projects/
+    --cpp-enable-facet domain
+    --cpp-enable-facet io
+    --cpp-enable-facet hash
+    --cpp-enable-facet serialization
+    --cpp-enable-facet test_data
+    --cpp-disable-cmakelists
+    --cpp-disable-eos-serialization
+    --ignore-files-matching-regex .*/CMakeLists.txt
+    --ignore-files-matching-regex .*/spec/.*
+    --ignore-files-matching-regex .*/test/.*
+    --verbose
+    --delete-extra-files
+    --external-module-path dogen::dynamic)
+if(use_latest_knitter)
+    add_dependencies(codegen_${target} knitter)
+endif()
+add_dependencies(codegen codegen_${target})
diff --git a/diagrams/stitch.dia b/diagrams/stitch.dia
new file mode 100644
index 0000000..5b6532e
--- /dev/null
+++ b/diagrams/stitch.dia
@@ -0,0 +1,2961 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<dia:diagram xmlns:dia="http://www.lysator.liu.se/~alla/dia/">
+  <dia:diagramdata>
+    <dia:attribute name="background">
+      <dia:color val="#ffffff"/>
+    </dia:attribute>
+    <dia:attribute name="pagebreak">
+      <dia:color val="#000099"/>
+    </dia:attribute>
+    <dia:attribute name="paper">
+      <dia:composite type="paper">
+        <dia:attribute name="name">
+          <dia:string>#A4#</dia:string>
+        </dia:attribute>
+        <dia:attribute name="tmargin">
+          <dia:real val="2.8222000598907471"/>
+        </dia:attribute>
+        <dia:attribute name="bmargin">
+          <dia:real val="2.8222000598907471"/>
+        </dia:attribute>
+        <dia:attribute name="lmargin">
+          <dia:real val="2.8222000598907471"/>
+        </dia:attribute>
+        <dia:attribute name="rmargin">
+          <dia:real val="2.8222000598907471"/>
+        </dia:attribute>
+        <dia:attribute name="is_portrait">
+          <dia:boolean val="true"/>
+        </dia:attribute>
+        <dia:attribute name="scaling">
+          <dia:real val="1"/>
+        </dia:attribute>
+        <dia:attribute name="fitto">
+          <dia:boolean val="false"/>
+        </dia:attribute>
+      </dia:composite>
+    </dia:attribute>
+    <dia:attribute name="grid">
+      <dia:composite type="grid">
+        <dia:attribute name="width_x">
+          <dia:real val="1"/>
+        </dia:attribute>
+        <dia:attribute name="width_y">
+          <dia:real val="1"/>
+        </dia:attribute>
+        <dia:attribute name="visible_x">
+          <dia:int val="1"/>
+        </dia:attribute>
+        <dia:attribute name="visible_y">
+          <dia:int val="1"/>
+        </dia:attribute>
+        <dia:composite type="color"/>
+      </dia:composite>
+    </dia:attribute>
+    <dia:attribute name="color">
+      <dia:color val="#dadada"/>
+    </dia:attribute>
+    <dia:attribute name="guides">
+      <dia:composite type="guides">
+        <dia:attribute name="hguides"/>
+        <dia:attribute name="vguides"/>
+      </dia:composite>
+    </dia:attribute>
+  </dia:diagramdata>
+  <dia:layer name="Background" visible="true" active="true">
+    <dia:object type="UML - Class" version="0" id="O0">
+      <dia:attribute name="obj_pos">
+        <dia:point val="42,-19"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="41.95,-19.05;49.3275,-15.95"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="42,-19"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="7.2775000000000007"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#workflow_error#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#exception#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O1">
+      <dia:attribute name="obj_pos">
+        <dia:point val="28,-6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="27.95,-6.05;49.725,-1.55"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="28,-6"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="21.675000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="4.4000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#workflow#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#service#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations">
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#execute#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#p#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#const boost::filesystem::path&amp;#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#execute#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#s#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#const std::string#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O2">
+      <dia:attribute name="obj_pos">
+        <dia:point val="56,8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="55.95,7.95;73.105,11.65"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="56,8"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="17.055"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3.6000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#parser#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#service#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations">
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#parse#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#text_template#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#s#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#const std::string&amp;#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O3">
+      <dia:attribute name="obj_pos">
+        <dia:point val="43,59"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="42.95,58.95;54.715,61.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="43,59"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="11.665000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#mixed_content_line#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#segments#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;segment&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O4">
+      <dia:attribute name="obj_pos">
+        <dia:point val="33,71"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="32.95,70.95;44.33,74.65"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="33,71"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="11.279999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3.6000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#segment#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#segment_type#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#segment_types#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O5">
+      <dia:attribute name="obj_pos">
+        <dia:point val="35,46"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="34.95,45.95;50.565,48.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="35,46"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="15.515000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#mixed_content_block#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;mixed_content_line&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O6">
+      <dia:attribute name="obj_pos">
+        <dia:point val="27,84"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="26.95,83.95;34.3625,88.45"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="27,84"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="7.3125"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="4.4000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#segment_types#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#enumeration#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#text#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#scriptlet#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O7">
+      <dia:attribute name="obj_pos">
+        <dia:point val="70,59"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="69.95,58.95;78.635,61.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="70,59"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="8.5849999999999991"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#scriptlet_line#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O8">
+      <dia:attribute name="obj_pos">
+        <dia:point val="34,21"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="33.95,20.95;51.875,24.65"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="34,21"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="17.824999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3.6000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#text_template#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#extensions#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#schema::object#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;boost::shared_ptr&lt;block&gt;&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O9">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="64.5275,11.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="51.775,10.85;65.2775,22.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="64.5275,11.6"/>
+        <dia:point val="64.5275,16"/>
+        <dia:point val="51.825,16"/>
+        <dia:point val="51.825,21"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O2" connection="6"/>
+        <dia:connection handle="1" to="O8" connection="2"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O10">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="48.8325,61.8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="38.59,61.05;49.5825,72.55"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="48.8325,61.8"/>
+        <dia:point val="48.8325,67"/>
+        <dia:point val="38.64,67"/>
+        <dia:point val="38.64,70.95"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O3" connection="6"/>
+        <dia:connection handle="1" to="O4" connection="12"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O11">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="38.64,74.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="30.6062,73.85;39.39,85.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="38.64,74.6"/>
+        <dia:point val="38.64,80"/>
+        <dia:point val="30.6562,80"/>
+        <dia:point val="30.6562,84"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O4" connection="6"/>
+        <dia:connection handle="1" to="O6" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O12">
+      <dia:attribute name="obj_pos">
+        <dia:point val="60,46"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="59.95,45.95;74.025,48.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="60,46"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="13.975"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#scriptlet_block#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;scriptlet_line&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O13">
+      <dia:attribute name="obj_pos">
+        <dia:point val="38,34"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="37.95,33.95;43.555,37.05"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="38,34"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="5.5049999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#block#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#visitable#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O14">
+      <dia:attribute name="obj_pos">
+        <dia:point val="40.7525,37"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="39.9025,36.95;42.8075,46.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="40.7525,37"/>
+        <dia:point val="40.7525,41"/>
+        <dia:point val="42.7575,41"/>
+        <dia:point val="42.7575,46"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O13" connection="6"/>
+        <dia:connection handle="1" to="O5" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O15">
+      <dia:attribute name="obj_pos">
+        <dia:point val="40.7525,37"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="39.9025,36.95;67.0375,46.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="40.7525,37"/>
+        <dia:point val="40.7525,41"/>
+        <dia:point val="66.9875,41"/>
+        <dia:point val="66.9875,46"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O13" connection="6"/>
+        <dia:connection handle="1" to="O12" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O16">
+      <dia:attribute name="obj_pos">
+        <dia:point val="42.9125,24.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="40.7025,24.55;43.7625,34.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="42.9125,24.6"/>
+        <dia:point val="42.9125,30"/>
+        <dia:point val="40.7525,30"/>
+        <dia:point val="40.7525,34"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O8" connection="6"/>
+        <dia:connection handle="1" to="O13" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O17">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="42.7575,48.8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="42.0075,48.05;49.0325,60.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="42.7575,48.8"/>
+        <dia:point val="42.7575,54"/>
+        <dia:point val="48.8325,54"/>
+        <dia:point val="48.8325,59"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O5" connection="6"/>
+        <dia:connection handle="1" to="O3" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O18">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="66.9875,48.8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="66.2375,48.05;74.4925,60.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="66.9875,48.8"/>
+        <dia:point val="66.9875,54"/>
+        <dia:point val="74.2925,54"/>
+        <dia:point val="74.2925,59"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O12" connection="6"/>
+        <dia:connection handle="1" to="O7" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O19">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="49.675,-1.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="48.925,-2.35;64.7275,9.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="49.675,-1.6"/>
+        <dia:point val="49.675,3"/>
+        <dia:point val="64.5275,3"/>
+        <dia:point val="64.5275,8"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O1" connection="7"/>
+        <dia:connection handle="1" to="O2" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O20">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="38.8375,-6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="38.0875,-16.05;45.8388,-4.4"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="38.8375,-6"/>
+        <dia:point val="38.8375,-11"/>
+        <dia:point val="45.6388,-11"/>
+        <dia:point val="45.6388,-16"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O1" connection="1"/>
+        <dia:connection handle="1" to="O0" connection="6"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O21">
+      <dia:attribute name="obj_pos">
+        <dia:point val="12,8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="11.95,7.95;28.72,10.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="12,8"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="16.669999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#formatter#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations">
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#format#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#formatters::file#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#t#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#text_template#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O22">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="20.335,10.8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="19.585,10.05;34.2,22.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="20.335,10.8"/>
+        <dia:point val="20.335,16"/>
+        <dia:point val="34,16"/>
+        <dia:point val="34,21"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O21" connection="6"/>
+        <dia:connection handle="1" to="O8" connection="0"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O23">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="28,-1.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="20.285,-2.35;28.75,9.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="28,-1.6"/>
+        <dia:point val="28,3"/>
+        <dia:point val="20.335,3"/>
+        <dia:point val="20.335,8"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O1" connection="5"/>
+        <dia:connection handle="1" to="O21" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O24">
+      <dia:attribute name="obj_pos">
+        <dia:point val="14,46"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="13.95,45.95;26.1,48.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="14,46"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="12.050000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#text_block#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;text_line&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O25">
+      <dia:attribute name="obj_pos">
+        <dia:point val="24,59"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="23.95,58.95;32.635,61.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="24,59"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="8.5849999999999991"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#text_line#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#content#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O26">
+      <dia:attribute name="obj_pos">
+        <dia:point val="40.7525,37.0502"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="19.975,37.0002;41.6025,46.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="40.7525,37.0502"/>
+        <dia:point val="40.7525,41"/>
+        <dia:point val="20.025,41"/>
+        <dia:point val="20.025,46"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O13" connection="8"/>
+        <dia:connection handle="1" to="O24" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O27">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="20.025,48.8"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="19.275,48.05;28.4925,60.6"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="20.025,48.8"/>
+        <dia:point val="20.025,54"/>
+        <dia:point val="28.2925,54"/>
+        <dia:point val="28.2925,59"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O24" connection="6"/>
+        <dia:connection handle="1" to="O25" connection="1"/>
+      </dia:connections>
+    </dia:object>
+  </dia:layer>
+</dia:diagram>
diff --git a/doc/agile/sprint_backlog_63.org b/doc/agile/sprint_backlog_63.org
index 1070084..dc80e59 100644
--- a/doc/agile/sprint_backlog_63.org
+++ b/doc/agile/sprint_backlog_63.org
@@ -296,16 +296,40 @@ the root object. This could be done in =managed_directories=, by
 having an SML model as input.
 
 *** STARTED Create the stitch and stitcher projects                   :story:
+    CLOCK: [2015-04-10 Fri 16:51]--[2015-04-10 Fri 17:59] =>  1:08
     CLOCK: [2015-04-10 Fri 16:47]--[2015-04-10 Fri 16:50] =>  0:03
 
 We need to create a simple model for stitch and a command line utility
-around it.
+around it. [[https://msdn.microsoft.com/en-us/library/ff697256.aspx][T4 terminology]]:
+
+#+begin_quote
+A T4 template consists of declarations, enclosed in <#@...#> angle
+brackets, followed by a sequence of text strings and
+scriptlets. Scriptlets are fragments of C# or Visual Basic contained
+in <#= …#> or <#+ …#> angle brackets. T4 templates follow the
+following overall syntax:
+
+- A declaration of the language used by the scriptlets. All scriptlets
+  in a template must be written in the same language.
+- A sequence of so called “property processor” declarations that
+  define template properties use to pass parameters to the template.
+- A series of arbitrary text strings and scriptlets. The scriptlets
+  are interspersed with the text, with scriptlets used to dynamically
+  generate specific text as defined by the scriptlet expression.
+- A sequence of declarations of template-specific methods. These
+  methods can be called from scriptlets within the template.
+#+end_quote
 
 *** Add basic functionality to stitch                                 :story:
 
 We need to implement stitch as per analysis in backlog, with a few
 simple unit tests.
 
+We could make use of the meta-data to build the copyright etc
+information when instantiating a stitch template. We need to split the
+fields into knitter and stitch fields so that we do not load the wrong
+fields.
+
 *** Create a forward declarations formatter using stitch              :story:
 
 We need to start making use of stitch in dogen. To start off with, we
diff --git a/dogen.ede b/dogen.ede
index e8d982a..725f1d4 100644
--- a/dogen.ede
+++ b/dogen.ede
@@ -21,6 +21,7 @@
    "/projects/utility/include"
    "/projects/dynamic/schema/include"
    "/projects/dynamic/expansion/include"
+   "/projects/stitch/include"
 
    "/projects/test_models/all_primitives/include"
    "/projects/test_models/class_in_a_package/include"
diff --git a/projects/CMakeLists.txt b/projects/CMakeLists.txt
index a661400..b92d874 100644
--- a/projects/CMakeLists.txt
+++ b/projects/CMakeLists.txt
@@ -152,12 +152,13 @@ include_directories(
     ${CMAKE_SOURCE_DIR}/projects/knitter/include
     ${CMAKE_SOURCE_DIR}/projects/dynamic/schema/include
     ${CMAKE_SOURCE_DIR}/projects/dynamic/expansion/include
+    ${CMAKE_SOURCE_DIR}/projects/stitch/include
     )
 
 #
 # add all other projects
 #
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dia)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dia/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dia/spec)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dia_to_sml/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dia_to_sml/spec)
@@ -165,25 +166,30 @@ add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/frontend/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/frontend/spec)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/backend/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/backend/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/config)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/config/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/config/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp_formatters)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp_formatters/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/cpp_formatters/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml_to_cpp)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml_to_cpp/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/sml_to_cpp/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/formatters)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/formatters/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/formatters/spec)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/utility)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knit)
-add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knitter)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/utility/src)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/utility/spec)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knit/src)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knit/spec)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knitter/src)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/knitter/spec)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dynamic/schema/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dynamic/schema/spec)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dynamic/expansion/src)
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/dynamic/expansion/spec)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/stitch/src)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/stitch/spec)
 
 # test models
 add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/test_models)
diff --git a/projects/stitch/CMakeLists.txt b/projects/stitch/CMakeLists.txt
new file mode 100644
index 0000000..910389a
--- /dev/null
+++ b/projects/stitch/CMakeLists.txt
@@ -0,0 +1,27 @@
+# -*- mode: cmake; tab-width: 4; indent-tabs-mode: nil -*-
+#
+# Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+# MA 02110-1301, USA.
+#
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/src)
+add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/spec)
+
+install(
+    DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/
+    DESTINATION include/
+    COMPONENT headers
+    FILES_MATCHING PATTERN "*.hpp")
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/all_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/all_hash.hpp
new file mode 100644
index 0000000..193b708
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/all_hash.hpp
@@ -0,0 +1,31 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/segment_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/formatter_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/segment_types_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_template_hash.hpp"
+#include "dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/scriptlet_block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/mixed_content_block_hash.hpp"
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/block_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/block_hash.hpp
new file mode 100644
index 0000000..0bfbe63
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/block_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_BLOCK_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_BLOCK_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct block_hasher {
+public:
+    static std::size_t hash(const block& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::block> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::block& v) const {
+        return dogen::dynamic::stitch::block_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/formatter_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/formatter_hash.hpp
new file mode 100644
index 0000000..794ffb9
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/formatter_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_FORMATTER_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_FORMATTER_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct formatter_hasher {
+public:
+    static std::size_t hash(const formatter& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::formatter> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::formatter& v) const {
+        return dogen::dynamic::stitch::formatter_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_block_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_block_hash.hpp
new file mode 100644
index 0000000..50f8cad
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_block_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_MIXED_CONTENT_BLOCK_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_MIXED_CONTENT_BLOCK_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct mixed_content_block_hasher {
+public:
+    static std::size_t hash(const mixed_content_block& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::mixed_content_block> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::mixed_content_block& v) const {
+        return dogen::dynamic::stitch::mixed_content_block_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp
new file mode 100644
index 0000000..14c6b96
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_MIXED_CONTENT_LINE_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_MIXED_CONTENT_LINE_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct mixed_content_line_hasher {
+public:
+    static std::size_t hash(const mixed_content_line& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::mixed_content_line> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::mixed_content_line& v) const {
+        return dogen::dynamic::stitch::mixed_content_line_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_block_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_block_hash.hpp
new file mode 100644
index 0000000..15bd266
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_block_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_SCRIPTLET_BLOCK_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_SCRIPTLET_BLOCK_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct scriptlet_block_hasher {
+public:
+    static std::size_t hash(const scriptlet_block& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::scriptlet_block> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::scriptlet_block& v) const {
+        return dogen::dynamic::stitch::scriptlet_block_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp
new file mode 100644
index 0000000..cadcc71
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_SCRIPTLET_LINE_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_SCRIPTLET_LINE_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct scriptlet_line_hasher {
+public:
+    static std::size_t hash(const scriptlet_line& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::scriptlet_line> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::scriptlet_line& v) const {
+        return dogen::dynamic::stitch::scriptlet_line_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/segment_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/segment_hash.hpp
new file mode 100644
index 0000000..3d26244
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/segment_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_SEGMENT_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_SEGMENT_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/segment.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct segment_hasher {
+public:
+    static std::size_t hash(const segment& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::segment> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::segment& v) const {
+        return dogen::dynamic::stitch::segment_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/segment_types_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/segment_types_hash.hpp
new file mode 100644
index 0000000..79b07f4
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/segment_types_hash.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_SEGMENT_TYPES_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_SEGMENT_TYPES_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::segment_types> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::segment_types& v) const {
+        return std::hash<unsigned int>()(static_cast<unsigned int>(v));
+    }
+};
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/text_block_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/text_block_hash.hpp
new file mode 100644
index 0000000..7087b7a
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/text_block_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_TEXT_BLOCK_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_TEXT_BLOCK_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct text_block_hasher {
+public:
+    static std::size_t hash(const text_block& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::text_block> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::text_block& v) const {
+        return dogen::dynamic::stitch::text_block_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/text_line_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/text_line_hash.hpp
new file mode 100644
index 0000000..86d8650
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/text_line_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_TEXT_LINE_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_TEXT_LINE_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct text_line_hasher {
+public:
+    static std::size_t hash(const text_line& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::text_line> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::text_line& v) const {
+        return dogen::dynamic::stitch::text_line_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/hash/text_template_hash.hpp b/projects/stitch/include/dogen/dynamic/stitch/hash/text_template_hash.hpp
new file mode 100644
index 0000000..aed7b17
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/hash/text_template_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_HASH_TEXT_TEMPLATE_HASH_HPP
+#define DOGEN_DYNAMIC_STITCH_HASH_TEXT_TEMPLATE_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+struct text_template_hasher {
+public:
+    static std::size_t hash(const text_template& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::dynamic::stitch::text_template> {
+public:
+    size_t operator()(const dogen::dynamic::stitch::text_template& v) const {
+        return dogen::dynamic::stitch::text_template_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/all_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/all_io.hpp
new file mode 100644
index 0000000..7be3ce5
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/all_io.hpp
@@ -0,0 +1,31 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/segment_io.hpp"
+#include "dogen/dynamic/stitch/io/text_line_io.hpp"
+#include "dogen/dynamic/stitch/io/formatter_io.hpp"
+#include "dogen/dynamic/stitch/io/text_block_io.hpp"
+#include "dogen/dynamic/stitch/io/segment_types_io.hpp"
+#include "dogen/dynamic/stitch/io/text_template_io.hpp"
+#include "dogen/dynamic/stitch/io/scriptlet_line_io.hpp"
+#include "dogen/dynamic/stitch/io/scriptlet_block_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_line_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_block_io.hpp"
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/block_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/block_io.hpp
new file mode 100644
index 0000000..d4846ba
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/block_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_BLOCK_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_BLOCK_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::block& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/formatter_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/formatter_io.hpp
new file mode 100644
index 0000000..06369c7
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/formatter_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_FORMATTER_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_FORMATTER_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::formatter& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_block_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_block_io.hpp
new file mode 100644
index 0000000..3e4c553
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_block_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_MIXED_CONTENT_BLOCK_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_MIXED_CONTENT_BLOCK_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::mixed_content_block& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_line_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_line_io.hpp
new file mode 100644
index 0000000..d14a8ce
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/mixed_content_line_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_MIXED_CONTENT_LINE_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_MIXED_CONTENT_LINE_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::mixed_content_line& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_block_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_block_io.hpp
new file mode 100644
index 0000000..0203f42
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_block_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_SCRIPTLET_BLOCK_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_SCRIPTLET_BLOCK_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::scriptlet_block& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_line_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_line_io.hpp
new file mode 100644
index 0000000..7a1750c
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/scriptlet_line_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_SCRIPTLET_LINE_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_SCRIPTLET_LINE_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::scriptlet_line& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/segment_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/segment_io.hpp
new file mode 100644
index 0000000..69859d0
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/segment_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_SEGMENT_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_SEGMENT_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/segment.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::segment& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/segment_types_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/segment_types_io.hpp
new file mode 100644
index 0000000..6a3de29
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/segment_types_io.hpp
@@ -0,0 +1,39 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_SEGMENT_TYPES_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_SEGMENT_TYPES_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const segment_types& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/text_block_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/text_block_io.hpp
new file mode 100644
index 0000000..3c4badc
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/text_block_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_TEXT_BLOCK_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_TEXT_BLOCK_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::text_block& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/text_line_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/text_line_io.hpp
new file mode 100644
index 0000000..02bc855
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/text_line_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_TEXT_LINE_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_TEXT_LINE_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::text_line& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/io/text_template_io.hpp b/projects/stitch/include/dogen/dynamic/stitch/io/text_template_io.hpp
new file mode 100644
index 0000000..40bcfd1
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/io/text_template_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_IO_TEXT_TEMPLATE_IO_HPP
+#define DOGEN_DYNAMIC_STITCH_IO_TEXT_TEMPLATE_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::dynamic::stitch::text_template& v);
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/all_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/all_ser.hpp
new file mode 100644
index 0000000..60abd4e
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/all_ser.hpp
@@ -0,0 +1,32 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/segment_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/formatter_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/registrar_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/segment_types_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_template_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp"
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/block_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/block_fwd_ser.hpp
new file mode 100644
index 0000000..2842088
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/block_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_BLOCK_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_BLOCK_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/block_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/block_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/block_ser.hpp
new file mode 100644
index 0000000..064b735
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/block_ser.hpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_BLOCK_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_BLOCK_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/serialization/assume_abstract.hpp>
+#include "dogen/dynamic/stitch/types/block.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::block)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::dynamic::stitch::block)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_fwd_ser.hpp
new file mode 100644
index 0000000..a490f3f
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_FORMATTER_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_FORMATTER_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/formatter_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_ser.hpp
new file mode 100644
index 0000000..7bb6547
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/formatter_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_FORMATTER_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_FORMATTER_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::formatter)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_fwd_ser.hpp
new file mode 100644
index 0000000..48d3e37
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_BLOCK_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_BLOCK_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/mixed_content_block_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp
new file mode 100644
index 0000000..04280ee
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_BLOCK_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_BLOCK_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::dynamic::stitch::block,
+    dogen::dynamic::stitch::mixed_content_block
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::mixed_content_block)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_fwd_ser.hpp
new file mode 100644
index 0000000..eae0bdc
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_LINE_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_LINE_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/mixed_content_line_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp
new file mode 100644
index 0000000..3ea21f3
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_LINE_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_MIXED_CONTENT_LINE_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::mixed_content_line)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/registrar_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/registrar_ser.hpp
new file mode 100644
index 0000000..323e98f
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/registrar_ser.hpp
@@ -0,0 +1,28 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+template<typename Archive>
+void register_types(Archive& ar);
+
+} } }
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_fwd_ser.hpp
new file mode 100644
index 0000000..56a733a
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_BLOCK_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_BLOCK_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/scriptlet_block_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp
new file mode 100644
index 0000000..4aa6a50
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_BLOCK_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_BLOCK_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::dynamic::stitch::block,
+    dogen::dynamic::stitch::scriptlet_block
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::scriptlet_block)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_fwd_ser.hpp
new file mode 100644
index 0000000..9888d21
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_LINE_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_LINE_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/scriptlet_line_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp
new file mode 100644
index 0000000..62c41d9
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_LINE_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SCRIPTLET_LINE_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::scriptlet_line)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_fwd_ser.hpp
new file mode 100644
index 0000000..115fc96
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/segment_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_ser.hpp
new file mode 100644
index 0000000..f7dd0db
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/dynamic/stitch/types/segment.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::segment)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_types_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_types_ser.hpp
new file mode 100644
index 0000000..d9e7649
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/segment_types_ser.hpp
@@ -0,0 +1,37 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_TYPES_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_SEGMENT_TYPES_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/nvp.hpp>
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+
+template<class Archive>
+void serialize(Archive& ar, dogen::dynamic::stitch::segment_types& v, unsigned int /*version*/){
+    using boost::serialization::make_nvp;
+    ar & make_nvp("segment_types", v);
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_fwd_ser.hpp
new file mode 100644
index 0000000..1fd694e
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_BLOCK_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_BLOCK_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_block_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_ser.hpp
new file mode 100644
index 0000000..37907ed
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_block_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_BLOCK_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_BLOCK_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::dynamic::stitch::block,
+    dogen::dynamic::stitch::text_block
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::text_block)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_fwd_ser.hpp
new file mode 100644
index 0000000..4c322da
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_LINE_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_LINE_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_line_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_ser.hpp
new file mode 100644
index 0000000..000fc3f
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_line_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_LINE_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_LINE_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::text_line)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_fwd_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_fwd_ser.hpp
new file mode 100644
index 0000000..70f3b93
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_TEMPLATE_FWD_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_TEMPLATE_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_template_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_ser.hpp b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_ser.hpp
new file mode 100644
index 0000000..63e496c
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/serialization/text_template_ser.hpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_TEMPLATE_SER_HPP
+#define DOGEN_DYNAMIC_STITCH_SERIALIZATION_TEXT_TEMPLATE_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/serialization/assume_abstract.hpp>
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::dynamic::stitch::text_template)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::dynamic::stitch::text_template)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/all_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/all_td.hpp
new file mode 100644
index 0000000..d8c330a
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/all_td.hpp
@@ -0,0 +1,31 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/segment_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/formatter_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/segment_types_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_template_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp"
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/block_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/block_td.hpp
new file mode 100644
index 0000000..5360683
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/block_td.hpp
@@ -0,0 +1,49 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_BLOCK_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_BLOCK_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class block_generator {
+public:
+    block_generator();
+
+public:
+    typedef dogen::dynamic::stitch::block result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/formatter_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/formatter_td.hpp
new file mode 100644
index 0000000..332705c
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/formatter_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_FORMATTER_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_FORMATTER_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class formatter_generator {
+public:
+    formatter_generator();
+
+public:
+    typedef dogen::dynamic::stitch::formatter result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp
new file mode 100644
index 0000000..e7dac47
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_MIXED_CONTENT_BLOCK_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_MIXED_CONTENT_BLOCK_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_block_generator {
+public:
+    mixed_content_block_generator();
+
+public:
+    typedef dogen::dynamic::stitch::mixed_content_block result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp
new file mode 100644
index 0000000..1f0b9e4
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_MIXED_CONTENT_LINE_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_MIXED_CONTENT_LINE_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_line_generator {
+public:
+    mixed_content_line_generator();
+
+public:
+    typedef dogen::dynamic::stitch::mixed_content_line result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp
new file mode 100644
index 0000000..fda8e8a
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_SCRIPTLET_BLOCK_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_SCRIPTLET_BLOCK_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_block_generator {
+public:
+    scriptlet_block_generator();
+
+public:
+    typedef dogen::dynamic::stitch::scriptlet_block result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp
new file mode 100644
index 0000000..b7cf9a4
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_SCRIPTLET_LINE_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_SCRIPTLET_LINE_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_line_generator {
+public:
+    scriptlet_line_generator();
+
+public:
+    typedef dogen::dynamic::stitch::scriptlet_line result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_td.hpp
new file mode 100644
index 0000000..b07ac83
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_SEGMENT_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_SEGMENT_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/segment.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class segment_generator {
+public:
+    segment_generator();
+
+public:
+    typedef dogen::dynamic::stitch::segment result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_types_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_types_td.hpp
new file mode 100644
index 0000000..87302cc
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/segment_types_td.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_SEGMENT_TYPES_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_SEGMENT_TYPES_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class segment_types_generator {
+public:
+    segment_types_generator();
+
+public:
+    typedef dogen::dynamic::stitch::segment_types result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/text_block_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_block_td.hpp
new file mode 100644
index 0000000..83509c1
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_block_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_BLOCK_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_BLOCK_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_block_generator {
+public:
+    text_block_generator();
+
+public:
+    typedef dogen::dynamic::stitch::text_block result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/text_line_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_line_td.hpp
new file mode 100644
index 0000000..341cbf4
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_line_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_LINE_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_LINE_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_line_generator {
+public:
+    text_line_generator();
+
+public:
+    typedef dogen::dynamic::stitch::text_line result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/test_data/text_template_td.hpp b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_template_td.hpp
new file mode 100644
index 0000000..fc8b5bb
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/test_data/text_template_td.hpp
@@ -0,0 +1,49 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_TEMPLATE_TD_HPP
+#define DOGEN_DYNAMIC_STITCH_TEST_DATA_TEXT_TEMPLATE_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_template_generator {
+public:
+    text_template_generator();
+
+public:
+    typedef dogen::dynamic::stitch::text_template result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/all.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/all.hpp
new file mode 100644
index 0000000..e792b9e
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/all.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/stitch/types/parser.hpp"
+#include "dogen/dynamic/stitch/types/segment.hpp"
+#include "dogen/dynamic/stitch/types/workflow.hpp"
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+#include "dogen/dynamic/stitch/types/block_visitor.hpp"
+#include "dogen/dynamic/stitch/types/workflow_error.hpp"
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/block.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/block.hpp
new file mode 100644
index 0000000..53b1b31
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/block.hpp
@@ -0,0 +1,86 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+#include "dogen/dynamic/stitch/serialization/block_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class block : public dogen::dynamic::stitch::text_template {
+public:
+    block() = default;
+    block(const block&) = default;
+    block(block&&) = default;
+
+    virtual ~block() noexcept = 0;
+
+public:
+    block(
+        const dogen::dynamic::schema::object& extensions,
+        const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const block& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, block& v, unsigned int version);
+
+public:
+    virtual void accept(const block_visitor& v) const = 0;
+    virtual void accept(block_visitor& v) const = 0;
+    virtual void accept(const block_visitor& v) = 0;
+    virtual void accept(block_visitor& v) = 0;
+
+public:
+    virtual void to_stream(std::ostream& s) const;
+
+protected:
+    bool compare(const block& rhs) const;
+public:
+    virtual bool equals(const dogen::dynamic::stitch::text_template& other) const = 0;
+
+protected:
+    void swap(block& other) noexcept;
+
+};
+
+inline block::~block() noexcept { }
+
+inline bool operator==(const block& lhs, const block& rhs) {
+    return lhs.equals(rhs);
+}
+
+} } }
+
+
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/block_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/block_fwd.hpp
new file mode 100644
index 0000000..4b60135
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/block_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class block;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/block_visitor.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/block_visitor.hpp
new file mode 100644
index 0000000..ac73acc
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/block_visitor.hpp
@@ -0,0 +1,76 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_VISITOR_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_BLOCK_VISITOR_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/dynamic/stitch/types/text_block_fwd.hpp"
+#include "dogen/dynamic/stitch/types/scriptlet_block_fwd.hpp"
+#include "dogen/dynamic/stitch/types/mixed_content_block_fwd.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class block_visitor {
+public:
+    virtual ~block_visitor() noexcept = 0;
+
+public:
+    /**
+     * @brief Accept visits for type dogen::dynamic::stitch::mixed_content_block
+     */
+    /**@{*/
+    virtual void visit(const dogen::dynamic::stitch::mixed_content_block&) const { }
+    virtual void visit(const dogen::dynamic::stitch::mixed_content_block&) { }
+    virtual void visit(dogen::dynamic::stitch::mixed_content_block&) const { }
+    virtual void visit(dogen::dynamic::stitch::mixed_content_block&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::dynamic::stitch::scriptlet_block
+     */
+    /**@{*/
+    virtual void visit(const dogen::dynamic::stitch::scriptlet_block&) const { }
+    virtual void visit(const dogen::dynamic::stitch::scriptlet_block&) { }
+    virtual void visit(dogen::dynamic::stitch::scriptlet_block&) const { }
+    virtual void visit(dogen::dynamic::stitch::scriptlet_block&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::dynamic::stitch::text_block
+     */
+    /**@{*/
+    virtual void visit(const dogen::dynamic::stitch::text_block&) const { }
+    virtual void visit(const dogen::dynamic::stitch::text_block&) { }
+    virtual void visit(dogen::dynamic::stitch::text_block&) const { }
+    virtual void visit(dogen::dynamic::stitch::text_block&) { }
+    /**@}*/
+};
+
+inline block_visitor::~block_visitor() noexcept { }
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/formatter.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/formatter.hpp
new file mode 100644
index 0000000..1f537de
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/formatter.hpp
@@ -0,0 +1,60 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_FORMATTER_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_FORMATTER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include "dogen/dynamic/stitch/serialization/formatter_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class formatter final {
+public:
+    formatter() = default;
+    formatter(const formatter&) = default;
+    formatter(formatter&&) = default;
+    ~formatter() = default;
+    formatter& operator=(const formatter&) = default;
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const formatter& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, formatter& v, unsigned int version);
+
+public:
+    bool operator==(const formatter& rhs) const;
+    bool operator!=(const formatter& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/formatter_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/formatter_fwd.hpp
new file mode 100644
index 0000000..d437379
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/formatter_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_FORMATTER_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_FORMATTER_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class formatter;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block.hpp
new file mode 100644
index 0000000..743a41f
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block.hpp
@@ -0,0 +1,99 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_BLOCK_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_BLOCK_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <iosfwd>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_block final : public dogen::dynamic::stitch::block {
+public:
+    mixed_content_block() = default;
+    mixed_content_block(const mixed_content_block&) = default;
+    mixed_content_block(mixed_content_block&&) = default;
+
+    virtual ~mixed_content_block() noexcept { }
+
+public:
+    mixed_content_block(
+        const dogen::dynamic::schema::object& extensions,
+        const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+        const std::list<dogen::dynamic::stitch::mixed_content_line>& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const mixed_content_block& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, mixed_content_block& v, unsigned int version);
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    const std::list<dogen::dynamic::stitch::mixed_content_line>& content() const;
+    std::list<dogen::dynamic::stitch::mixed_content_line>& content();
+    void content(const std::list<dogen::dynamic::stitch::mixed_content_line>& v);
+    void content(const std::list<dogen::dynamic::stitch::mixed_content_line>&& v);
+
+public:
+    bool operator==(const mixed_content_block& rhs) const;
+    bool operator!=(const mixed_content_block& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::dynamic::stitch::text_template& other) const override;
+
+public:
+    void swap(mixed_content_block& other) noexcept;
+    mixed_content_block& operator=(mixed_content_block other);
+
+private:
+    std::list<dogen::dynamic::stitch::mixed_content_line> content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::mixed_content_block& lhs,
+    dogen::dynamic::stitch::mixed_content_block& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block_fwd.hpp
new file mode 100644
index 0000000..ff604c2
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_block_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_BLOCK_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_BLOCK_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_block;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line.hpp
new file mode 100644
index 0000000..a47d455
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line.hpp
@@ -0,0 +1,87 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_LINE_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_LINE_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/segment.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_line_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_line final {
+public:
+    mixed_content_line() = default;
+    mixed_content_line(const mixed_content_line&) = default;
+    mixed_content_line(mixed_content_line&&) = default;
+    ~mixed_content_line() = default;
+
+public:
+    explicit mixed_content_line(const std::list<dogen::dynamic::stitch::segment>& segments);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const mixed_content_line& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, mixed_content_line& v, unsigned int version);
+
+public:
+    const std::list<dogen::dynamic::stitch::segment>& segments() const;
+    std::list<dogen::dynamic::stitch::segment>& segments();
+    void segments(const std::list<dogen::dynamic::stitch::segment>& v);
+    void segments(const std::list<dogen::dynamic::stitch::segment>&& v);
+
+public:
+    bool operator==(const mixed_content_line& rhs) const;
+    bool operator!=(const mixed_content_line& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(mixed_content_line& other) noexcept;
+    mixed_content_line& operator=(mixed_content_line other);
+
+private:
+    std::list<dogen::dynamic::stitch::segment> segments_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::mixed_content_line& lhs,
+    dogen::dynamic::stitch::mixed_content_line& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line_fwd.hpp
new file mode 100644
index 0000000..137c7c3
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/mixed_content_line_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_LINE_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_MIXED_CONTENT_LINE_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class mixed_content_line;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/parser.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/parser.hpp
new file mode 100644
index 0000000..e69de29
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/parser_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/parser_fwd.hpp
new file mode 100644
index 0000000..814eaef
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/parser_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_PARSER_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_PARSER_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class parser;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block.hpp
new file mode 100644
index 0000000..78ea305
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block.hpp
@@ -0,0 +1,99 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_BLOCK_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_BLOCK_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <iosfwd>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_block final : public dogen::dynamic::stitch::block {
+public:
+    scriptlet_block() = default;
+    scriptlet_block(const scriptlet_block&) = default;
+    scriptlet_block(scriptlet_block&&) = default;
+
+    virtual ~scriptlet_block() noexcept { }
+
+public:
+    scriptlet_block(
+        const dogen::dynamic::schema::object& extensions,
+        const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+        const std::list<dogen::dynamic::stitch::scriptlet_line>& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const scriptlet_block& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, scriptlet_block& v, unsigned int version);
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    const std::list<dogen::dynamic::stitch::scriptlet_line>& content() const;
+    std::list<dogen::dynamic::stitch::scriptlet_line>& content();
+    void content(const std::list<dogen::dynamic::stitch::scriptlet_line>& v);
+    void content(const std::list<dogen::dynamic::stitch::scriptlet_line>&& v);
+
+public:
+    bool operator==(const scriptlet_block& rhs) const;
+    bool operator!=(const scriptlet_block& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::dynamic::stitch::text_template& other) const override;
+
+public:
+    void swap(scriptlet_block& other) noexcept;
+    scriptlet_block& operator=(scriptlet_block other);
+
+private:
+    std::list<dogen::dynamic::stitch::scriptlet_line> content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::scriptlet_block& lhs,
+    dogen::dynamic::stitch::scriptlet_block& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block_fwd.hpp
new file mode 100644
index 0000000..74f9685
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_block_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_BLOCK_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_BLOCK_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_block;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line.hpp
new file mode 100644
index 0000000..b14f752
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line.hpp
@@ -0,0 +1,86 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_LINE_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_LINE_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <algorithm>
+#include "dogen/dynamic/stitch/serialization/scriptlet_line_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_line final {
+public:
+    scriptlet_line() = default;
+    scriptlet_line(const scriptlet_line&) = default;
+    scriptlet_line(scriptlet_line&&) = default;
+    ~scriptlet_line() = default;
+
+public:
+    explicit scriptlet_line(const std::string& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const scriptlet_line& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, scriptlet_line& v, unsigned int version);
+
+public:
+    const std::string& content() const;
+    std::string& content();
+    void content(const std::string& v);
+    void content(const std::string&& v);
+
+public:
+    bool operator==(const scriptlet_line& rhs) const;
+    bool operator!=(const scriptlet_line& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(scriptlet_line& other) noexcept;
+    scriptlet_line& operator=(scriptlet_line other);
+
+private:
+    std::string content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::scriptlet_line& lhs,
+    dogen::dynamic::stitch::scriptlet_line& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line_fwd.hpp
new file mode 100644
index 0000000..17832f2
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/scriptlet_line_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_LINE_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SCRIPTLET_LINE_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class scriptlet_line;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/segment.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/segment.hpp
new file mode 100644
index 0000000..bcf458a
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/segment.hpp
@@ -0,0 +1,95 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/segment_types.hpp"
+#include "dogen/dynamic/stitch/serialization/segment_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class segment final {
+public:
+    segment(const segment&) = default;
+    segment(segment&&) = default;
+    ~segment() = default;
+
+public:
+    segment();
+
+public:
+    segment(
+        const dogen::dynamic::stitch::segment_types& segment_type,
+        const std::string& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const segment& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, segment& v, unsigned int version);
+
+public:
+    dogen::dynamic::stitch::segment_types segment_type() const;
+    void segment_type(const dogen::dynamic::stitch::segment_types& v);
+
+    const std::string& content() const;
+    std::string& content();
+    void content(const std::string& v);
+    void content(const std::string&& v);
+
+public:
+    bool operator==(const segment& rhs) const;
+    bool operator!=(const segment& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(segment& other) noexcept;
+    segment& operator=(segment other);
+
+private:
+    dogen::dynamic::stitch::segment_types segment_type_;
+    std::string content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::segment& lhs,
+    dogen::dynamic::stitch::segment& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/segment_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/segment_fwd.hpp
new file mode 100644
index 0000000..7173c1c
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/segment_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class segment;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/segment_types.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/segment_types.hpp
new file mode 100644
index 0000000..bfbe683
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/segment_types.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_TYPES_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_TYPES_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+enum class segment_types : unsigned int {
+    invalid = 0, ///< Represents an uninitialised enum
+    text = 1,
+    scriptlet = 2
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/segment_types_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/segment_types_fwd.hpp
new file mode 100644
index 0000000..3712871
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/segment_types_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_TYPES_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_SEGMENT_TYPES_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+enum class segment_types : unsigned int;
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_block.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_block.hpp
new file mode 100644
index 0000000..85525b0
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_block.hpp
@@ -0,0 +1,99 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_BLOCK_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_BLOCK_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <iosfwd>
+#include <algorithm>
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_block final : public dogen::dynamic::stitch::block {
+public:
+    text_block() = default;
+    text_block(const text_block&) = default;
+    text_block(text_block&&) = default;
+
+    virtual ~text_block() noexcept { }
+
+public:
+    text_block(
+        const dogen::dynamic::schema::object& extensions,
+        const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+        const std::list<dogen::dynamic::stitch::text_line>& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const text_block& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, text_block& v, unsigned int version);
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    const std::list<dogen::dynamic::stitch::text_line>& content() const;
+    std::list<dogen::dynamic::stitch::text_line>& content();
+    void content(const std::list<dogen::dynamic::stitch::text_line>& v);
+    void content(const std::list<dogen::dynamic::stitch::text_line>&& v);
+
+public:
+    bool operator==(const text_block& rhs) const;
+    bool operator!=(const text_block& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::dynamic::stitch::text_template& other) const override;
+
+public:
+    void swap(text_block& other) noexcept;
+    text_block& operator=(text_block other);
+
+private:
+    std::list<dogen::dynamic::stitch::text_line> content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::text_block& lhs,
+    dogen::dynamic::stitch::text_block& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_block_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_block_fwd.hpp
new file mode 100644
index 0000000..9fe49f8
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_block_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_BLOCK_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_BLOCK_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_block;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_line.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_line.hpp
new file mode 100644
index 0000000..b457381
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_line.hpp
@@ -0,0 +1,86 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_LINE_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_LINE_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <algorithm>
+#include "dogen/dynamic/stitch/serialization/text_line_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_line final {
+public:
+    text_line() = default;
+    text_line(const text_line&) = default;
+    text_line(text_line&&) = default;
+    ~text_line() = default;
+
+public:
+    explicit text_line(const std::string& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const text_line& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, text_line& v, unsigned int version);
+
+public:
+    const std::string& content() const;
+    std::string& content();
+    void content(const std::string& v);
+    void content(const std::string&& v);
+
+public:
+    bool operator==(const text_line& rhs) const;
+    bool operator!=(const text_line& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(text_line& other) noexcept;
+    text_line& operator=(text_line other);
+
+private:
+    std::string content_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::dynamic::stitch::text_line& lhs,
+    dogen::dynamic::stitch::text_line& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_line_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_line_fwd.hpp
new file mode 100644
index 0000000..44dd2ff
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_line_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_LINE_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_LINE_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_line;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_template.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_template.hpp
new file mode 100644
index 0000000..c6f6c48
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_template.hpp
@@ -0,0 +1,97 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_TEMPLATE_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_TEMPLATE_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <iosfwd>
+#include <algorithm>
+#include <boost/shared_ptr.hpp>
+#include "dogen/dynamic/schema/types/object.hpp"
+#include "dogen/dynamic/stitch/types/block_fwd.hpp"
+#include "dogen/dynamic/stitch/serialization/text_template_fwd_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_template {
+public:
+    text_template() = default;
+    text_template(const text_template&) = default;
+    text_template(text_template&&) = default;
+
+    virtual ~text_template() noexcept = 0;
+
+public:
+    text_template(
+        const dogen::dynamic::schema::object& extensions,
+        const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const text_template& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, text_template& v, unsigned int version);
+
+public:
+    virtual void to_stream(std::ostream& s) const;
+
+public:
+    const dogen::dynamic::schema::object& extensions() const;
+    dogen::dynamic::schema::object& extensions();
+    void extensions(const dogen::dynamic::schema::object& v);
+    void extensions(const dogen::dynamic::schema::object&& v);
+
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content() const;
+    std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content();
+    void content(const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& v);
+    void content(const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >&& v);
+
+protected:
+    bool compare(const text_template& rhs) const;
+public:
+    virtual bool equals(const text_template& other) const = 0;
+
+protected:
+    void swap(text_template& other) noexcept;
+
+private:
+    dogen::dynamic::schema::object extensions_;
+    std::list<boost::shared_ptr<dogen::dynamic::stitch::block> > content_;
+};
+
+inline text_template::~text_template() noexcept { }
+
+inline bool operator==(const text_template& lhs, const text_template& rhs) {
+    return lhs.equals(rhs);
+}
+
+} } }
+
+
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/text_template_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/text_template_fwd.hpp
new file mode 100644
index 0000000..0f898ab
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/text_template_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_TEXT_TEMPLATE_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_TEXT_TEMPLATE_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class text_template;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/workflow.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/workflow.hpp
new file mode 100644
index 0000000..e69de29
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error.hpp
new file mode 100644
index 0000000..f5c55bc
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_ERROR_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_ERROR_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <boost/exception/info.hpp>
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class workflow_error : public virtual std::exception, public virtual boost::exception {
+public:
+    workflow_error() = default;
+    ~workflow_error() noexcept = default;
+
+public:
+    workflow_error(const std::string& message) : message_(message) { }
+
+public:
+    const char* what() const noexcept { return(message_.c_str()); }
+
+private:
+    const std::string message_;
+};
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error_fwd.hpp
new file mode 100644
index 0000000..a904ff9
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_error_fwd.hpp
@@ -0,0 +1,39 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_ERROR_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_ERROR_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <boost/exception/info.hpp>
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class workflow_error;
+
+} } }
+
+#endif
diff --git a/projects/stitch/include/dogen/dynamic/stitch/types/workflow_fwd.hpp b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_fwd.hpp
new file mode 100644
index 0000000..37da177
--- /dev/null
+++ b/projects/stitch/include/dogen/dynamic/stitch/types/workflow_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_FWD_HPP
+#define DOGEN_DYNAMIC_STITCH_TYPES_WORKFLOW_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+class workflow;
+
+} } }
+
+#endif
diff --git a/projects/stitch/spec/CMakeLists.txt b/projects/stitch/spec/CMakeLists.txt
new file mode 100644
index 0000000..e6ce6a6
--- /dev/null
+++ b/projects/stitch/spec/CMakeLists.txt
@@ -0,0 +1,54 @@
+# -*- mode: cmake; tab-width: 4; indent-tabs-mode: nil -*-
+#
+# Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+# MA 02110-1301, USA.
+#
+set(stitch_spec_files "")
+file(GLOB_RECURSE stitch_spec_files RELATIVE
+    "${CMAKE_CURRENT_SOURCE_DIR}/"
+    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
+
+add_executable(stitch_spec ${stitch_spec_files})
+set(binary_name "dogen_stitch_spec")
+set_target_properties(stitch_spec PROPERTIES OUTPUT_NAME ${binary_name})
+
+target_link_libraries(stitch_spec
+    spec
+    utility
+    cpp
+    cpp_formatters
+    sml_to_cpp
+    dia
+    sml
+    config
+    frontend
+    backend
+    ${LIBXML2_LIBRARIES}
+    ${Boost_LIBRARIES}
+    ${PQXX_LIBRARIES}
+    ${CMAKE_THREAD_LIBS_INIT})
+
+set(stitch_spec_cmd ${stage_bin_dir}/${binary_name} ${boost_test_parameters})
+
+add_custom_target(run_stitch_spec
+    COMMAND ${stitch_spec_cmd}
+    WORKING_DIRECTORY ${stage_bin_dir}
+    DEPENDS stitch_spec)
+add_dependencies(run_all_specs run_stitch_spec)
+
+add_boost_tests(spec ${stitch_spec_files})
+install(TARGETS stitch_spec RUNTIME DESTINATION bin COMPONENT tests)
diff --git a/projects/stitch/spec/main.cpp b/projects/stitch/spec/main.cpp
new file mode 100644
index 0000000..fc55df3
--- /dev/null
+++ b/projects/stitch/spec/main.cpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#define BOOST_TEST_DYN_LINK
+#define BOOST_TEST_MODULE spec_spec
+#include <iostream>
+#include <boost/test/included/unit_test.hpp>
+#include <boost/test/unit_test_monitor.hpp>
+#include <boost/exception/diagnostic_information.hpp>
+
+namespace  {
+
+const std::string error_msg("Error during test");
+
+inline void translate(const boost::exception& e) {
+    std::cerr << std::endl << boost::diagnostic_information(e);
+    throw std::runtime_error(error_msg);
+}
+
+struct exception_fixture {
+    exception_fixture() {
+        ::boost::unit_test::unit_test_monitor.register_exception_translator<
+            boost::exception>(&translate);
+    }
+};
+
+}
+
+BOOST_GLOBAL_FIXTURE(exception_fixture)
diff --git a/projects/stitch/spec/test_spec.cpp b/projects/stitch/spec/test_spec.cpp
new file mode 100644
index 0000000..ebeff42
--- /dev/null
+++ b/projects/stitch/spec/test_spec.cpp
@@ -0,0 +1,38 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/test/unit_test.hpp>
+#include "dogen/utility/test/logging.hpp"
+
+namespace {
+
+const std::string empty;
+const std::string test_module("stitch");
+const std::string test_suite("test_spec");
+
+}
+
+BOOST_AUTO_TEST_SUITE(test)
+
+BOOST_AUTO_TEST_CASE(test) {
+    SETUP_TEST_LOG("test");
+}
+
+BOOST_AUTO_TEST_SUITE_END()
diff --git a/projects/stitch/src/CMakeLists.txt b/projects/stitch/src/CMakeLists.txt
new file mode 100644
index 0000000..fa10a53
--- /dev/null
+++ b/projects/stitch/src/CMakeLists.txt
@@ -0,0 +1,38 @@
+# -*- mode: cmake; tab-width: 4; indent-tabs-mode: nil -*-
+#
+# Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+# MA 02110-1301, USA.
+#
+set(stitch_files "")
+file(GLOB_RECURSE stitch_files RELATIVE
+    "${CMAKE_CURRENT_SOURCE_DIR}/"
+    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
+
+add_library(stitch STATIC ${stitch_files})
+target_link_libraries(stitch
+    dynamic_schema
+    utility
+    formatters
+    ${LIBXML2_LIBRARIES}
+    ${Boost_LIBRARIES})
+
+set_target_properties(stitch
+    PROPERTIES OUTPUT_NAME dogen_stitch)
+set_target_properties(stitch
+    PROPERTIES VERSION ${DOGEN_VERSION} SOVERSION ${DOGEN_MAJOR_VERSION})
+
+install(TARGETS stitch ARCHIVE DESTINATION lib COMPONENT libraries)
diff --git a/projects/stitch/src/hash/block_hash.cpp b/projects/stitch/src/hash/block_hash.cpp
new file mode 100644
index 0000000..29d01cf
--- /dev/null
+++ b/projects/stitch/src/hash/block_hash.cpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_template_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t block_hasher::hash(const block&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::dynamic::stitch::text_template&>(v));
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/formatter_hash.cpp b/projects/stitch/src/hash/formatter_hash.cpp
new file mode 100644
index 0000000..1f019a4
--- /dev/null
+++ b/projects/stitch/src/hash/formatter_hash.cpp
@@ -0,0 +1,37 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/formatter_hash.hpp"
+
+namespace {
+
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t formatter_hasher::hash(const formatter&) {
+    std::size_t seed(0);
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/mixed_content_block_hash.cpp b/projects/stitch/src/hash/mixed_content_block_hash.cpp
new file mode 100644
index 0000000..2e0f8c7
--- /dev/null
+++ b/projects/stitch/src/hash/mixed_content_block_hash.cpp
@@ -0,0 +1,57 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/mixed_content_block_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_list_dogen_dynamic_stitch_mixed_content_line(const std::list<dogen::dynamic::stitch::mixed_content_line>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t mixed_content_block_hasher::hash(const mixed_content_block&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::dynamic::stitch::block&>(v));
+
+    combine(seed, hash_std_list_dogen_dynamic_stitch_mixed_content_line(v.content()));
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/mixed_content_line_hash.cpp b/projects/stitch/src/hash/mixed_content_line_hash.cpp
new file mode 100644
index 0000000..67a22e1
--- /dev/null
+++ b/projects/stitch/src/hash/mixed_content_line_hash.cpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/segment_hash.hpp"
+#include "dogen/dynamic/stitch/hash/mixed_content_line_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_list_dogen_dynamic_stitch_segment(const std::list<dogen::dynamic::stitch::segment>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t mixed_content_line_hasher::hash(const mixed_content_line&v) {
+    std::size_t seed(0);
+
+    combine(seed, hash_std_list_dogen_dynamic_stitch_segment(v.segments()));
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/scriptlet_block_hash.cpp b/projects/stitch/src/hash/scriptlet_block_hash.cpp
new file mode 100644
index 0000000..e8aafd8
--- /dev/null
+++ b/projects/stitch/src/hash/scriptlet_block_hash.cpp
@@ -0,0 +1,57 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/scriptlet_block_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_list_dogen_dynamic_stitch_scriptlet_line(const std::list<dogen::dynamic::stitch::scriptlet_line>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t scriptlet_block_hasher::hash(const scriptlet_block&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::dynamic::stitch::block&>(v));
+
+    combine(seed, hash_std_list_dogen_dynamic_stitch_scriptlet_line(v.content()));
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/scriptlet_line_hash.cpp b/projects/stitch/src/hash/scriptlet_line_hash.cpp
new file mode 100644
index 0000000..052d564
--- /dev/null
+++ b/projects/stitch/src/hash/scriptlet_line_hash.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/scriptlet_line_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t scriptlet_line_hasher::hash(const scriptlet_line&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.content());
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/segment_hash.cpp b/projects/stitch/src/hash/segment_hash.cpp
new file mode 100644
index 0000000..54dd396
--- /dev/null
+++ b/projects/stitch/src/hash/segment_hash.cpp
@@ -0,0 +1,48 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/segment_hash.hpp"
+#include "dogen/dynamic/stitch/hash/segment_types_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t segment_hasher::hash(const segment&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.segment_type());
+    combine(seed, v.content());
+
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/text_block_hash.cpp b/projects/stitch/src/hash/text_block_hash.cpp
new file mode 100644
index 0000000..8beab87
--- /dev/null
+++ b/projects/stitch/src/hash/text_block_hash.cpp
@@ -0,0 +1,57 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_line_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_block_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_list_dogen_dynamic_stitch_text_line(const std::list<dogen::dynamic::stitch::text_line>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t text_block_hasher::hash(const text_block&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::dynamic::stitch::block&>(v));
+
+    combine(seed, hash_std_list_dogen_dynamic_stitch_text_line(v.content()));
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/text_line_hash.cpp b/projects/stitch/src/hash/text_line_hash.cpp
new file mode 100644
index 0000000..2e1664e
--- /dev/null
+++ b/projects/stitch/src/hash/text_line_hash.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/text_line_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t text_line_hasher::hash(const text_line&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.content());
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/hash/text_template_hash.cpp b/projects/stitch/src/hash/text_template_hash.cpp
new file mode 100644
index 0000000..a40ffe7
--- /dev/null
+++ b/projects/stitch/src/hash/text_template_hash.cpp
@@ -0,0 +1,63 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/hash/block_hash.hpp"
+#include "dogen/dynamic/schema/hash/object_hash.hpp"
+#include "dogen/dynamic/stitch/hash/text_template_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_boost_shared_ptr_dogen_dynamic_stitch_block(const boost::shared_ptr<dogen::dynamic::stitch::block>& v){
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_list_boost_shared_ptr_dogen_dynamic_stitch_block_(const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, hash_boost_shared_ptr_dogen_dynamic_stitch_block(i));
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::size_t text_template_hasher::hash(const text_template&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.extensions());
+    combine(seed, hash_std_list_boost_shared_ptr_dogen_dynamic_stitch_block_(v.content()));
+
+    return seed;
+}
+
+} } }
diff --git a/projects/stitch/src/io/block_io.cpp b/projects/stitch/src/io/block_io.cpp
new file mode 100644
index 0000000..ed27706
--- /dev/null
+++ b/projects/stitch/src/io/block_io.cpp
@@ -0,0 +1,34 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/text_template_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const block& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/formatter_io.cpp b/projects/stitch/src/io/formatter_io.cpp
new file mode 100644
index 0000000..e4231ed
--- /dev/null
+++ b/projects/stitch/src/io/formatter_io.cpp
@@ -0,0 +1,34 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/formatter_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const formatter&) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::formatter\"" << " }";
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/mixed_content_block_io.cpp b/projects/stitch/src/io/mixed_content_block_io.cpp
new file mode 100644
index 0000000..dd4cb0b
--- /dev/null
+++ b/projects/stitch/src/io/mixed_content_block_io.cpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_line_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_block_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const mixed_content_block& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/mixed_content_line_io.cpp b/projects/stitch/src/io/mixed_content_line_io.cpp
new file mode 100644
index 0000000..c495faa
--- /dev/null
+++ b/projects/stitch/src/io/mixed_content_line_io.cpp
@@ -0,0 +1,51 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/segment_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_line_io.hpp"
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::dynamic::stitch::segment>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const mixed_content_line& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::mixed_content_line\"" << ", "
+      << "\"segments\": " << v.segments()
+      << " }";
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/scriptlet_block_io.cpp b/projects/stitch/src/io/scriptlet_block_io.cpp
new file mode 100644
index 0000000..64a61f9
--- /dev/null
+++ b/projects/stitch/src/io/scriptlet_block_io.cpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/scriptlet_line_io.hpp"
+#include "dogen/dynamic/stitch/io/scriptlet_block_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const scriptlet_block& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/scriptlet_line_io.cpp b/projects/stitch/src/io/scriptlet_line_io.cpp
new file mode 100644
index 0000000..a6ad36c
--- /dev/null
+++ b/projects/stitch/src/io/scriptlet_line_io.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include <boost/algorithm/string.hpp>
+#include "dogen/dynamic/stitch/io/scriptlet_line_io.hpp"
+
+
+inline std::string tidy_up_string(std::string s) {
+    boost::replace_all(s, "\r\n", "<new_line>");
+    boost::replace_all(s, "\n", "<new_line>");
+    boost::replace_all(s, "\"", "<quote>");
+    return s;
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const scriptlet_line& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::scriptlet_line\"" << ", "
+      << "\"content\": " << "\"" << tidy_up_string(v.content()) << "\""
+      << " }";
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/segment_io.cpp b/projects/stitch/src/io/segment_io.cpp
new file mode 100644
index 0000000..df2f67c
--- /dev/null
+++ b/projects/stitch/src/io/segment_io.cpp
@@ -0,0 +1,47 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include <boost/algorithm/string.hpp>
+#include "dogen/dynamic/stitch/io/segment_io.hpp"
+#include "dogen/dynamic/stitch/io/segment_types_io.hpp"
+
+
+inline std::string tidy_up_string(std::string s) {
+    boost::replace_all(s, "\r\n", "<new_line>");
+    boost::replace_all(s, "\n", "<new_line>");
+    boost::replace_all(s, "\"", "<quote>");
+    return s;
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const segment& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::segment\"" << ", "
+      << "\"segment_type\": " << v.segment_type() << ", "
+      << "\"content\": " << "\"" << tidy_up_string(v.content()) << "\""
+      << " }";
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/segment_types_io.cpp b/projects/stitch/src/io/segment_types_io.cpp
new file mode 100644
index 0000000..0a64727
--- /dev/null
+++ b/projects/stitch/src/io/segment_types_io.cpp
@@ -0,0 +1,50 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include <stdexcept>
+#include "dogen/dynamic/stitch/io/segment_types_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const segment_types& v) {
+    s << "{ " << "\"__type__\": " << "\"segment_types\", " << "\"value\": ";
+
+    std::string attr;
+    switch (v) {
+    case segment_types::invalid:
+        attr = "\"invalid\"";
+        break;
+    case segment_types::text:
+        attr = "\"text\"";
+        break;
+    case segment_types::scriptlet:
+        attr = "\"scriptlet\"";
+        break;
+    default:
+        throw std::invalid_argument("Invalid value for segment_types");
+    }
+    s << attr << " }";
+    return s;
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/text_block_io.cpp b/projects/stitch/src/io/text_block_io.cpp
new file mode 100644
index 0000000..f50af06
--- /dev/null
+++ b/projects/stitch/src/io/text_block_io.cpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/text_line_io.hpp"
+#include "dogen/dynamic/stitch/io/text_block_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const text_block& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/text_line_io.cpp b/projects/stitch/src/io/text_line_io.cpp
new file mode 100644
index 0000000..8d2971e
--- /dev/null
+++ b/projects/stitch/src/io/text_line_io.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include <boost/algorithm/string.hpp>
+#include "dogen/dynamic/stitch/io/text_line_io.hpp"
+
+
+inline std::string tidy_up_string(std::string s) {
+    boost::replace_all(s, "\r\n", "<new_line>");
+    boost::replace_all(s, "\n", "<new_line>");
+    boost::replace_all(s, "\"", "<quote>");
+    return s;
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const text_line& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::text_line\"" << ", "
+      << "\"content\": " << "\"" << tidy_up_string(v.content()) << "\""
+      << " }";
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/io/text_template_io.cpp b/projects/stitch/src/io/text_template_io.cpp
new file mode 100644
index 0000000..beef4be
--- /dev/null
+++ b/projects/stitch/src/io/text_template_io.cpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/schema/io/object_io.hpp"
+#include "dogen/dynamic/stitch/io/text_template_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+std::ostream& operator<<(std::ostream& s, const text_template& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/block_ser.cpp b/projects/stitch/src/serialization/block_ser.cpp
new file mode 100644
index 0000000..08a59a2
--- /dev/null
+++ b/projects/stitch/src/serialization/block_ser.cpp
@@ -0,0 +1,75 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_template_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::dynamic::stitch::block,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::block& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("text_template", base_object<dogen::dynamic::stitch::text_template>(v));
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::block& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("text_template", base_object<dogen::dynamic::stitch::text_template>(v));
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::block& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::block& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/formatter_ser.cpp b/projects/stitch/src/serialization/formatter_ser.cpp
new file mode 100644
index 0000000..0a0cc0b
--- /dev/null
+++ b/projects/stitch/src/serialization/formatter_ser.cpp
@@ -0,0 +1,65 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/formatter_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& /*ar*/,
+    const dogen::dynamic::stitch::formatter& /*v*/,
+    const unsigned int /*version*/) {
+}
+
+template<typename Archive>
+void load(Archive& /*ar*/,
+    dogen::dynamic::stitch::formatter& /*v*/,
+    const unsigned int /*version*/) {
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::formatter& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::formatter& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/mixed_content_block_ser.cpp b/projects/stitch/src/serialization/mixed_content_block_ser.cpp
new file mode 100644
index 0000000..3847435
--- /dev/null
+++ b/projects/stitch/src/serialization/mixed_content_block_ser.cpp
@@ -0,0 +1,78 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::dynamic::stitch::mixed_content_block,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::mixed_content_block& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::mixed_content_block& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::mixed_content_block& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/mixed_content_line_ser.cpp b/projects/stitch/src/serialization/mixed_content_line_ser.cpp
new file mode 100644
index 0000000..6d4cec8
--- /dev/null
+++ b/projects/stitch/src/serialization/mixed_content_line_ser.cpp
@@ -0,0 +1,69 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/segment_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_line_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::mixed_content_line& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("segments", v.segments_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::mixed_content_line& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("segments", v.segments_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::mixed_content_line& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/registrar_ser.cpp b/projects/stitch/src/serialization/registrar_ser.cpp
new file mode 100644
index 0000000..0e59a9a
--- /dev/null
+++ b/projects/stitch/src/serialization/registrar_ser.cpp
@@ -0,0 +1,60 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/schema/serialization/registrar_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+template<typename Archive>
+void register_types(Archive& ar) {
+    dogen::dynamic::schema::register_types(ar);
+
+    ar.template register_type<dogen::dynamic::stitch::mixed_content_block>();
+    ar.template register_type<dogen::dynamic::stitch::scriptlet_block>();
+    ar.template register_type<dogen::dynamic::stitch::text_block>();
+}
+
+template void register_types(boost::archive::polymorphic_oarchive& ar);
+template void register_types(boost::archive::polymorphic_iarchive& ar);
+
+template void register_types(boost::archive::text_oarchive& ar);
+template void register_types(boost::archive::text_iarchive& ar);
+
+template void register_types(boost::archive::binary_oarchive& ar);
+template void register_types(boost::archive::binary_iarchive& ar);
+
+template void register_types(boost::archive::xml_oarchive& ar);
+template void register_types(boost::archive::xml_iarchive& ar);
+
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/scriptlet_block_ser.cpp b/projects/stitch/src/serialization/scriptlet_block_ser.cpp
new file mode 100644
index 0000000..418efde
--- /dev/null
+++ b/projects/stitch/src/serialization/scriptlet_block_ser.cpp
@@ -0,0 +1,78 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::dynamic::stitch::scriptlet_block,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::scriptlet_block& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::scriptlet_block& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::scriptlet_block& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/scriptlet_line_ser.cpp b/projects/stitch/src/serialization/scriptlet_line_ser.cpp
new file mode 100644
index 0000000..c40396e
--- /dev/null
+++ b/projects/stitch/src/serialization/scriptlet_line_ser.cpp
@@ -0,0 +1,68 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/string.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/scriptlet_line_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::scriptlet_line& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::scriptlet_line& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::scriptlet_line& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/segment_ser.cpp b/projects/stitch/src/serialization/segment_ser.cpp
new file mode 100644
index 0000000..4fe3229
--- /dev/null
+++ b/projects/stitch/src/serialization/segment_ser.cpp
@@ -0,0 +1,71 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/string.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/segment_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/segment_types_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::segment& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("segment_type", v.segment_type_);
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::segment& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("segment_type", v.segment_type_);
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::segment& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::segment& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/text_block_ser.cpp b/projects/stitch/src/serialization/text_block_ser.cpp
new file mode 100644
index 0000000..2b69791
--- /dev/null
+++ b/projects/stitch/src/serialization/text_block_ser.cpp
@@ -0,0 +1,78 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_line_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::dynamic::stitch::text_block,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::text_block& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::text_block& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("block", base_object<dogen::dynamic::stitch::block>(v));
+
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::text_block& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::text_block& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/text_line_ser.cpp b/projects/stitch/src/serialization/text_line_ser.cpp
new file mode 100644
index 0000000..e2231e9
--- /dev/null
+++ b/projects/stitch/src/serialization/text_line_ser.cpp
@@ -0,0 +1,68 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/string.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/text_line_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::text_line& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::text_line& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::text_line& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::text_line& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/serialization/text_template_ser.cpp b/projects/stitch/src/serialization/text_template_ser.cpp
new file mode 100644
index 0000000..f58856c
--- /dev/null
+++ b/projects/stitch/src/serialization/text_template_ser.cpp
@@ -0,0 +1,80 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/serialization/shared_ptr.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/dynamic/stitch/serialization/block_ser.hpp"
+#include "dogen/dynamic/schema/serialization/object_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/text_template_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/scriptlet_block_ser.hpp"
+#include "dogen/dynamic/stitch/serialization/mixed_content_block_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::dynamic::stitch::text_template,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::dynamic::stitch::text_template& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("extensions", v.extensions_);
+    ar << make_nvp("content", v.content_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::dynamic::stitch::text_template& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("extensions", v.extensions_);
+    ar >> make_nvp("content", v.content_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::dynamic::stitch::text_template& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::dynamic::stitch::text_template& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/stitch/src/test_data/block_td.cpp b/projects/stitch/src/test_data/block_td.cpp
new file mode 100644
index 0000000..26c33ac
--- /dev/null
+++ b/projects/stitch/src/test_data/block_td.cpp
@@ -0,0 +1,49 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_template_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp"
+
+
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+
+void block_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::dynamic::stitch::text_template_generator::populate(position, v);
+}
+
+block_generator::result_type*
+block_generator::create_ptr(const unsigned int position) {
+    if ((position % 2) == 0)
+        return dogen::dynamic::stitch::scriptlet_block_generator::create_ptr(position);
+    if ((position % 2) == 1)
+        return dogen::dynamic::stitch::text_block_generator::create_ptr(position);
+    return dogen::dynamic::stitch::mixed_content_block_generator::create_ptr(position);
+}
+
+
+} } }
diff --git a/projects/stitch/src/test_data/formatter_td.cpp b/projects/stitch/src/test_data/formatter_td.cpp
new file mode 100644
index 0000000..dd2f146
--- /dev/null
+++ b/projects/stitch/src/test_data/formatter_td.cpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/formatter_td.hpp"
+
+
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+formatter_generator::formatter_generator() : position_(0) { }
+
+void formatter_generator::
+populate(const unsigned int /*position*/, result_type& /*v*/) {
+}
+
+formatter_generator::result_type
+formatter_generator::create(const unsigned int/*position*/) {
+    formatter r;
+    return r;
+}
+formatter_generator::result_type*
+formatter_generator::create_ptr(const unsigned int position) {
+    formatter* p = new formatter();
+    formatter_generator::populate(position, *p);
+    return p;
+}
+
+formatter_generator::result_type
+formatter_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/mixed_content_block_td.cpp b/projects/stitch/src/test_data/mixed_content_block_td.cpp
new file mode 100644
index 0000000..36981f0
--- /dev/null
+++ b/projects/stitch/src/test_data/mixed_content_block_td.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp"
+
+namespace {
+
+dogen::dynamic::stitch::mixed_content_line
+create_dogen_dynamic_stitch_mixed_content_line(const unsigned int position) {
+    return dogen::dynamic::stitch::mixed_content_line_generator::create(position);
+}
+
+std::list<dogen::dynamic::stitch::mixed_content_line> create_std_list_dogen_dynamic_stitch_mixed_content_line(unsigned int position) {
+    std::list<dogen::dynamic::stitch::mixed_content_line> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_dynamic_stitch_mixed_content_line(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+mixed_content_block_generator::mixed_content_block_generator() : position_(0) { }
+
+void mixed_content_block_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::dynamic::stitch::block_generator::populate(position, v);
+    v.content(create_std_list_dogen_dynamic_stitch_mixed_content_line(position + 0));
+}
+
+mixed_content_block_generator::result_type
+mixed_content_block_generator::create(const unsigned int position) {
+    mixed_content_block r;
+    mixed_content_block_generator::populate(position, r);
+    return r;
+}
+mixed_content_block_generator::result_type*
+mixed_content_block_generator::create_ptr(const unsigned int position) {
+    mixed_content_block* p = new mixed_content_block();
+    mixed_content_block_generator::populate(position, *p);
+    return p;
+}
+
+mixed_content_block_generator::result_type
+mixed_content_block_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/mixed_content_line_td.cpp b/projects/stitch/src/test_data/mixed_content_line_td.cpp
new file mode 100644
index 0000000..ce60cad
--- /dev/null
+++ b/projects/stitch/src/test_data/mixed_content_line_td.cpp
@@ -0,0 +1,70 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/segment_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_line_td.hpp"
+
+namespace {
+
+dogen::dynamic::stitch::segment
+create_dogen_dynamic_stitch_segment(const unsigned int position) {
+    return dogen::dynamic::stitch::segment_generator::create(position);
+}
+
+std::list<dogen::dynamic::stitch::segment> create_std_list_dogen_dynamic_stitch_segment(unsigned int position) {
+    std::list<dogen::dynamic::stitch::segment> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_dynamic_stitch_segment(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+mixed_content_line_generator::mixed_content_line_generator() : position_(0) { }
+
+void mixed_content_line_generator::
+populate(const unsigned int position, result_type& v) {
+    v.segments(create_std_list_dogen_dynamic_stitch_segment(position + 0));
+}
+
+mixed_content_line_generator::result_type
+mixed_content_line_generator::create(const unsigned int position) {
+    mixed_content_line r;
+    mixed_content_line_generator::populate(position, r);
+    return r;
+}
+mixed_content_line_generator::result_type*
+mixed_content_line_generator::create_ptr(const unsigned int position) {
+    mixed_content_line* p = new mixed_content_line();
+    mixed_content_line_generator::populate(position, *p);
+    return p;
+}
+
+mixed_content_line_generator::result_type
+mixed_content_line_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/scriptlet_block_td.cpp b/projects/stitch/src/test_data/scriptlet_block_td.cpp
new file mode 100644
index 0000000..2bb6a9d
--- /dev/null
+++ b/projects/stitch/src/test_data/scriptlet_block_td.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp"
+
+namespace {
+
+dogen::dynamic::stitch::scriptlet_line
+create_dogen_dynamic_stitch_scriptlet_line(const unsigned int position) {
+    return dogen::dynamic::stitch::scriptlet_line_generator::create(position);
+}
+
+std::list<dogen::dynamic::stitch::scriptlet_line> create_std_list_dogen_dynamic_stitch_scriptlet_line(unsigned int position) {
+    std::list<dogen::dynamic::stitch::scriptlet_line> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_dynamic_stitch_scriptlet_line(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+scriptlet_block_generator::scriptlet_block_generator() : position_(0) { }
+
+void scriptlet_block_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::dynamic::stitch::block_generator::populate(position, v);
+    v.content(create_std_list_dogen_dynamic_stitch_scriptlet_line(position + 0));
+}
+
+scriptlet_block_generator::result_type
+scriptlet_block_generator::create(const unsigned int position) {
+    scriptlet_block r;
+    scriptlet_block_generator::populate(position, r);
+    return r;
+}
+scriptlet_block_generator::result_type*
+scriptlet_block_generator::create_ptr(const unsigned int position) {
+    scriptlet_block* p = new scriptlet_block();
+    scriptlet_block_generator::populate(position, *p);
+    return p;
+}
+
+scriptlet_block_generator::result_type
+scriptlet_block_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/scriptlet_line_td.cpp b/projects/stitch/src/test_data/scriptlet_line_td.cpp
new file mode 100644
index 0000000..93cf7e7
--- /dev/null
+++ b/projects/stitch/src/test_data/scriptlet_line_td.cpp
@@ -0,0 +1,63 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/dynamic/stitch/test_data/scriptlet_line_td.hpp"
+
+namespace {
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+scriptlet_line_generator::scriptlet_line_generator() : position_(0) { }
+
+void scriptlet_line_generator::
+populate(const unsigned int position, result_type& v) {
+    v.content(create_std_string(position + 0));
+}
+
+scriptlet_line_generator::result_type
+scriptlet_line_generator::create(const unsigned int position) {
+    scriptlet_line r;
+    scriptlet_line_generator::populate(position, r);
+    return r;
+}
+scriptlet_line_generator::result_type*
+scriptlet_line_generator::create_ptr(const unsigned int position) {
+    scriptlet_line* p = new scriptlet_line();
+    scriptlet_line_generator::populate(position, *p);
+    return p;
+}
+
+scriptlet_line_generator::result_type
+scriptlet_line_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/segment_td.cpp b/projects/stitch/src/test_data/segment_td.cpp
new file mode 100644
index 0000000..7350e8f
--- /dev/null
+++ b/projects/stitch/src/test_data/segment_td.cpp
@@ -0,0 +1,70 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/dynamic/stitch/test_data/segment_td.hpp"
+#include "dogen/dynamic/stitch/test_data/segment_types_td.hpp"
+
+namespace {
+
+dogen::dynamic::stitch::segment_types
+create_dogen_dynamic_stitch_segment_types(const unsigned int position) {
+    return dogen::dynamic::stitch::segment_types_generator::create(position);
+}
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+segment_generator::segment_generator() : position_(0) { }
+
+void segment_generator::
+populate(const unsigned int position, result_type& v) {
+    v.segment_type(create_dogen_dynamic_stitch_segment_types(position + 0));
+    v.content(create_std_string(position + 1));
+}
+
+segment_generator::result_type
+segment_generator::create(const unsigned int position) {
+    segment r;
+    segment_generator::populate(position, r);
+    return r;
+}
+segment_generator::result_type*
+segment_generator::create_ptr(const unsigned int position) {
+    segment* p = new segment();
+    segment_generator::populate(position, *p);
+    return p;
+}
+
+segment_generator::result_type
+segment_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/segment_types_td.cpp b/projects/stitch/src/test_data/segment_types_td.cpp
new file mode 100644
index 0000000..10a3ad3
--- /dev/null
+++ b/projects/stitch/src/test_data/segment_types_td.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/segment_types_td.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+segment_types_generator::segment_types_generator() : position_(0) { }
+void segment_types_generator::
+populate(const unsigned int position, result_type& v) {
+    v = static_cast<segment_types>(position % 3);
+}
+
+segment_types_generator::result_type
+segment_types_generator::create(const unsigned int  position) {
+    result_type r;
+    segment_types_generator::populate(position, r);
+    return r;
+}
+
+segment_types_generator::result_type
+segment_types_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/test_data/text_block_td.cpp b/projects/stitch/src/test_data/text_block_td.cpp
new file mode 100644
index 0000000..72c6acf
--- /dev/null
+++ b/projects/stitch/src/test_data/text_block_td.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_line_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_block_td.hpp"
+
+namespace {
+
+dogen::dynamic::stitch::text_line
+create_dogen_dynamic_stitch_text_line(const unsigned int position) {
+    return dogen::dynamic::stitch::text_line_generator::create(position);
+}
+
+std::list<dogen::dynamic::stitch::text_line> create_std_list_dogen_dynamic_stitch_text_line(unsigned int position) {
+    std::list<dogen::dynamic::stitch::text_line> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_dynamic_stitch_text_line(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+text_block_generator::text_block_generator() : position_(0) { }
+
+void text_block_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::dynamic::stitch::block_generator::populate(position, v);
+    v.content(create_std_list_dogen_dynamic_stitch_text_line(position + 0));
+}
+
+text_block_generator::result_type
+text_block_generator::create(const unsigned int position) {
+    text_block r;
+    text_block_generator::populate(position, r);
+    return r;
+}
+text_block_generator::result_type*
+text_block_generator::create_ptr(const unsigned int position) {
+    text_block* p = new text_block();
+    text_block_generator::populate(position, *p);
+    return p;
+}
+
+text_block_generator::result_type
+text_block_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/text_line_td.cpp b/projects/stitch/src/test_data/text_line_td.cpp
new file mode 100644
index 0000000..a9a1aa7
--- /dev/null
+++ b/projects/stitch/src/test_data/text_line_td.cpp
@@ -0,0 +1,63 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/dynamic/stitch/test_data/text_line_td.hpp"
+
+namespace {
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+text_line_generator::text_line_generator() : position_(0) { }
+
+void text_line_generator::
+populate(const unsigned int position, result_type& v) {
+    v.content(create_std_string(position + 0));
+}
+
+text_line_generator::result_type
+text_line_generator::create(const unsigned int position) {
+    text_line r;
+    text_line_generator::populate(position, r);
+    return r;
+}
+text_line_generator::result_type*
+text_line_generator::create_ptr(const unsigned int position) {
+    text_line* p = new text_line();
+    text_line_generator::populate(position, *p);
+    return p;
+}
+
+text_line_generator::result_type
+text_line_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/stitch/src/test_data/text_template_td.cpp b/projects/stitch/src/test_data/text_template_td.cpp
new file mode 100644
index 0000000..5c0c298
--- /dev/null
+++ b/projects/stitch/src/test_data/text_template_td.cpp
@@ -0,0 +1,78 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/test_data/block_td.hpp"
+#include "dogen/dynamic/schema/test_data/object_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/text_template_td.hpp"
+#include "dogen/dynamic/stitch/test_data/scriptlet_block_td.hpp"
+#include "dogen/dynamic/stitch/test_data/mixed_content_block_td.hpp"
+
+namespace {
+
+dogen::dynamic::schema::object
+create_dogen_dynamic_schema_object(const unsigned int position) {
+    return dogen::dynamic::schema::object_generator::create(position);
+}
+
+dogen::dynamic::stitch::block*
+create_dogen_dynamic_stitch_block_ptr(const unsigned int position) {
+    return dogen::dynamic::stitch::block_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::dynamic::stitch::block>
+create_boost_shared_ptr_dogen_dynamic_stitch_block(unsigned int position) {
+    boost::shared_ptr<dogen::dynamic::stitch::block> r(
+        create_dogen_dynamic_stitch_block_ptr(position));
+    return r;
+}
+
+std::list<boost::shared_ptr<dogen::dynamic::stitch::block> > create_std_list_boost_shared_ptr_dogen_dynamic_stitch_block_(unsigned int position) {
+    std::list<boost::shared_ptr<dogen::dynamic::stitch::block> > r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_boost_shared_ptr_dogen_dynamic_stitch_block(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+
+void text_template_generator::
+populate(const unsigned int position, result_type& v) {
+    v.extensions(create_dogen_dynamic_schema_object(position + 0));
+    v.content(create_std_list_boost_shared_ptr_dogen_dynamic_stitch_block_(position + 1));
+}
+
+text_template_generator::result_type*
+text_template_generator::create_ptr(const unsigned int position) {
+    if ((position % 2) == 0)
+        return dogen::dynamic::stitch::scriptlet_block_generator::create_ptr(position);
+    if ((position % 2) == 1)
+        return dogen::dynamic::stitch::text_block_generator::create_ptr(position);
+    return dogen::dynamic::stitch::mixed_content_block_generator::create_ptr(position);
+}
+
+
+} } }
diff --git a/projects/stitch/src/types/block.cpp b/projects/stitch/src/types/block.cpp
new file mode 100644
index 0000000..480d298
--- /dev/null
+++ b/projects/stitch/src/types/block.cpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/stitch/io/text_template_io.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+block::block(
+    const dogen::dynamic::schema::object& extensions,
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content)
+    : dogen::dynamic::stitch::text_template(extensions,
+      content) { }
+
+void block::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::block\"" << ", "
+      << "\"__parent_0__\": ";
+    text_template::to_stream(s);
+    s << " }";
+}
+
+void block::swap(block& other) noexcept {
+    text_template::swap(other);
+
+}
+
+bool block::compare(const block& rhs) const {
+    return text_template::compare(rhs);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/formatter.cpp b/projects/stitch/src/types/formatter.cpp
new file mode 100644
index 0000000..d70f285
--- /dev/null
+++ b/projects/stitch/src/types/formatter.cpp
@@ -0,0 +1,31 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/formatter.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+bool formatter::operator==(const formatter& /*rhs*/) const {
+    return true;
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/mixed_content_block.cpp b/projects/stitch/src/types/mixed_content_block.cpp
new file mode 100644
index 0000000..c4cb259
--- /dev/null
+++ b/projects/stitch/src/types/mixed_content_block.cpp
@@ -0,0 +1,102 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/mixed_content_line_io.hpp"
+#include "dogen/dynamic/stitch/types/mixed_content_block.hpp"
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::dynamic::stitch::mixed_content_line>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+mixed_content_block::mixed_content_block(
+    const dogen::dynamic::schema::object& extensions,
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+    const std::list<dogen::dynamic::stitch::mixed_content_line>& content)
+    : dogen::dynamic::stitch::block(extensions,
+      content),
+      content_(content) { }
+
+void mixed_content_block::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::mixed_content_block\"" << ", "
+      << "\"__parent_0__\": ";
+    block::to_stream(s);
+    s << ", "
+      << "\"content\": " << content_
+      << " }";
+}
+
+void mixed_content_block::swap(mixed_content_block& other) noexcept {
+    block::swap(other);
+
+    using std::swap;
+    swap(content_, other.content_);
+}
+
+bool mixed_content_block::equals(const dogen::dynamic::stitch::text_template& other) const {
+    const mixed_content_block* const p(dynamic_cast<const mixed_content_block* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool mixed_content_block::operator==(const mixed_content_block& rhs) const {
+    return block::compare(rhs) &&
+        content_ == rhs.content_;
+}
+
+mixed_content_block& mixed_content_block::operator=(mixed_content_block other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::list<dogen::dynamic::stitch::mixed_content_line>& mixed_content_block::content() const {
+    return content_;
+}
+
+std::list<dogen::dynamic::stitch::mixed_content_line>& mixed_content_block::content() {
+    return content_;
+}
+
+void mixed_content_block::content(const std::list<dogen::dynamic::stitch::mixed_content_line>& v) {
+    content_ = v;
+}
+
+void mixed_content_block::content(const std::list<dogen::dynamic::stitch::mixed_content_line>&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/mixed_content_line.cpp b/projects/stitch/src/types/mixed_content_line.cpp
new file mode 100644
index 0000000..899f574
--- /dev/null
+++ b/projects/stitch/src/types/mixed_content_line.cpp
@@ -0,0 +1,61 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/mixed_content_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+mixed_content_line::mixed_content_line(const std::list<dogen::dynamic::stitch::segment>& segments)
+    : segments_(segments) { }
+
+void mixed_content_line::swap(mixed_content_line& other) noexcept {
+    using std::swap;
+    swap(segments_, other.segments_);
+}
+
+bool mixed_content_line::operator==(const mixed_content_line& rhs) const {
+    return segments_ == rhs.segments_;
+}
+
+mixed_content_line& mixed_content_line::operator=(mixed_content_line other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::list<dogen::dynamic::stitch::segment>& mixed_content_line::segments() const {
+    return segments_;
+}
+
+std::list<dogen::dynamic::stitch::segment>& mixed_content_line::segments() {
+    return segments_;
+}
+
+void mixed_content_line::segments(const std::list<dogen::dynamic::stitch::segment>& v) {
+    segments_ = v;
+}
+
+void mixed_content_line::segments(const std::list<dogen::dynamic::stitch::segment>&& v) {
+    segments_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/parser.cpp b/projects/stitch/src/types/parser.cpp
new file mode 100644
index 0000000..f31693b
--- /dev/null
+++ b/projects/stitch/src/types/parser.cpp
@@ -0,0 +1,2 @@
+// dummy function to suppress ranlib warnings
+void parser() { }
diff --git a/projects/stitch/src/types/scriptlet_block.cpp b/projects/stitch/src/types/scriptlet_block.cpp
new file mode 100644
index 0000000..123df85
--- /dev/null
+++ b/projects/stitch/src/types/scriptlet_block.cpp
@@ -0,0 +1,102 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/scriptlet_line_io.hpp"
+#include "dogen/dynamic/stitch/types/scriptlet_block.hpp"
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::dynamic::stitch::scriptlet_line>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+scriptlet_block::scriptlet_block(
+    const dogen::dynamic::schema::object& extensions,
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+    const std::list<dogen::dynamic::stitch::scriptlet_line>& content)
+    : dogen::dynamic::stitch::block(extensions,
+      content),
+      content_(content) { }
+
+void scriptlet_block::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::scriptlet_block\"" << ", "
+      << "\"__parent_0__\": ";
+    block::to_stream(s);
+    s << ", "
+      << "\"content\": " << content_
+      << " }";
+}
+
+void scriptlet_block::swap(scriptlet_block& other) noexcept {
+    block::swap(other);
+
+    using std::swap;
+    swap(content_, other.content_);
+}
+
+bool scriptlet_block::equals(const dogen::dynamic::stitch::text_template& other) const {
+    const scriptlet_block* const p(dynamic_cast<const scriptlet_block* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool scriptlet_block::operator==(const scriptlet_block& rhs) const {
+    return block::compare(rhs) &&
+        content_ == rhs.content_;
+}
+
+scriptlet_block& scriptlet_block::operator=(scriptlet_block other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::list<dogen::dynamic::stitch::scriptlet_line>& scriptlet_block::content() const {
+    return content_;
+}
+
+std::list<dogen::dynamic::stitch::scriptlet_line>& scriptlet_block::content() {
+    return content_;
+}
+
+void scriptlet_block::content(const std::list<dogen::dynamic::stitch::scriptlet_line>& v) {
+    content_ = v;
+}
+
+void scriptlet_block::content(const std::list<dogen::dynamic::stitch::scriptlet_line>&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/scriptlet_line.cpp b/projects/stitch/src/types/scriptlet_line.cpp
new file mode 100644
index 0000000..6c425c1
--- /dev/null
+++ b/projects/stitch/src/types/scriptlet_line.cpp
@@ -0,0 +1,61 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/scriptlet_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+scriptlet_line::scriptlet_line(const std::string& content)
+    : content_(content) { }
+
+void scriptlet_line::swap(scriptlet_line& other) noexcept {
+    using std::swap;
+    swap(content_, other.content_);
+}
+
+bool scriptlet_line::operator==(const scriptlet_line& rhs) const {
+    return content_ == rhs.content_;
+}
+
+scriptlet_line& scriptlet_line::operator=(scriptlet_line other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::string& scriptlet_line::content() const {
+    return content_;
+}
+
+std::string& scriptlet_line::content() {
+    return content_;
+}
+
+void scriptlet_line::content(const std::string& v) {
+    content_ = v;
+}
+
+void scriptlet_line::content(const std::string&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/segment.cpp b/projects/stitch/src/types/segment.cpp
new file mode 100644
index 0000000..95ad809
--- /dev/null
+++ b/projects/stitch/src/types/segment.cpp
@@ -0,0 +1,77 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/segment.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+segment::segment()
+    : segment_type_(static_cast<dogen::dynamic::stitch::segment_types>(0)) { }
+
+segment::segment(
+    const dogen::dynamic::stitch::segment_types& segment_type,
+    const std::string& content)
+    : segment_type_(segment_type),
+      content_(content) { }
+
+void segment::swap(segment& other) noexcept {
+    using std::swap;
+    swap(segment_type_, other.segment_type_);
+    swap(content_, other.content_);
+}
+
+bool segment::operator==(const segment& rhs) const {
+    return segment_type_ == rhs.segment_type_ &&
+        content_ == rhs.content_;
+}
+
+segment& segment::operator=(segment other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+dogen::dynamic::stitch::segment_types segment::segment_type() const {
+    return segment_type_;
+}
+
+void segment::segment_type(const dogen::dynamic::stitch::segment_types& v) {
+    segment_type_ = v;
+}
+
+const std::string& segment::content() const {
+    return content_;
+}
+
+std::string& segment::content() {
+    return content_;
+}
+
+void segment::content(const std::string& v) {
+    content_ = v;
+}
+
+void segment::content(const std::string&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/text_block.cpp b/projects/stitch/src/types/text_block.cpp
new file mode 100644
index 0000000..d130f2b
--- /dev/null
+++ b/projects/stitch/src/types/text_block.cpp
@@ -0,0 +1,102 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/io/text_line_io.hpp"
+#include "dogen/dynamic/stitch/types/text_block.hpp"
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::dynamic::stitch::text_line>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+text_block::text_block(
+    const dogen::dynamic::schema::object& extensions,
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content,
+    const std::list<dogen::dynamic::stitch::text_line>& content)
+    : dogen::dynamic::stitch::block(extensions,
+      content),
+      content_(content) { }
+
+void text_block::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::text_block\"" << ", "
+      << "\"__parent_0__\": ";
+    block::to_stream(s);
+    s << ", "
+      << "\"content\": " << content_
+      << " }";
+}
+
+void text_block::swap(text_block& other) noexcept {
+    block::swap(other);
+
+    using std::swap;
+    swap(content_, other.content_);
+}
+
+bool text_block::equals(const dogen::dynamic::stitch::text_template& other) const {
+    const text_block* const p(dynamic_cast<const text_block* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool text_block::operator==(const text_block& rhs) const {
+    return block::compare(rhs) &&
+        content_ == rhs.content_;
+}
+
+text_block& text_block::operator=(text_block other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::list<dogen::dynamic::stitch::text_line>& text_block::content() const {
+    return content_;
+}
+
+std::list<dogen::dynamic::stitch::text_line>& text_block::content() {
+    return content_;
+}
+
+void text_block::content(const std::list<dogen::dynamic::stitch::text_line>& v) {
+    content_ = v;
+}
+
+void text_block::content(const std::list<dogen::dynamic::stitch::text_line>&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/text_line.cpp b/projects/stitch/src/types/text_line.cpp
new file mode 100644
index 0000000..8e2d41a
--- /dev/null
+++ b/projects/stitch/src/types/text_line.cpp
@@ -0,0 +1,61 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/dynamic/stitch/types/text_line.hpp"
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+text_line::text_line(const std::string& content)
+    : content_(content) { }
+
+void text_line::swap(text_line& other) noexcept {
+    using std::swap;
+    swap(content_, other.content_);
+}
+
+bool text_line::operator==(const text_line& rhs) const {
+    return content_ == rhs.content_;
+}
+
+text_line& text_line::operator=(text_line other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const std::string& text_line::content() const {
+    return content_;
+}
+
+std::string& text_line::content() {
+    return content_;
+}
+
+void text_line::content(const std::string& v) {
+    content_ = v;
+}
+
+void text_line::content(const std::string&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/text_template.cpp b/projects/stitch/src/types/text_template.cpp
new file mode 100644
index 0000000..194f4e7
--- /dev/null
+++ b/projects/stitch/src/types/text_template.cpp
@@ -0,0 +1,127 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/dynamic/stitch/io/block_io.hpp"
+#include "dogen/dynamic/stitch/types/block.hpp"
+#include "dogen/dynamic/schema/io/object_io.hpp"
+#include "dogen/dynamic/stitch/types/text_template.hpp"
+
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::dynamic::stitch::block>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<empty>\"";
+    s<< " }";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::dynamic::stitch::block>& lhs,
+const boost::shared_ptr<dogen::dynamic::stitch::block>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace dogen {
+namespace dynamic {
+namespace stitch {
+
+text_template::text_template(
+    const dogen::dynamic::schema::object& extensions,
+    const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& content)
+    : extensions_(extensions),
+      content_(content) { }
+
+void text_template::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::dynamic::stitch::text_template\"" << ", "
+      << "\"extensions\": " << extensions_ << ", "
+      << "\"content\": " << content_
+      << " }";
+}
+
+void text_template::swap(text_template& other) noexcept {
+    using std::swap;
+    swap(extensions_, other.extensions_);
+    swap(content_, other.content_);
+}
+
+bool text_template::compare(const text_template& rhs) const {
+    return extensions_ == rhs.extensions_ &&
+        content_ == rhs.content_;
+}
+
+const dogen::dynamic::schema::object& text_template::extensions() const {
+    return extensions_;
+}
+
+dogen::dynamic::schema::object& text_template::extensions() {
+    return extensions_;
+}
+
+void text_template::extensions(const dogen::dynamic::schema::object& v) {
+    extensions_ = v;
+}
+
+void text_template::extensions(const dogen::dynamic::schema::object&& v) {
+    extensions_ = std::move(v);
+}
+
+const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& text_template::content() const {
+    return content_;
+}
+
+std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& text_template::content() {
+    return content_;
+}
+
+void text_template::content(const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >& v) {
+    content_ = v;
+}
+
+void text_template::content(const std::list<boost::shared_ptr<dogen::dynamic::stitch::block> >&& v) {
+    content_ = std::move(v);
+}
+
+} } }
\ No newline at end of file
diff --git a/projects/stitch/src/types/workflow.cpp b/projects/stitch/src/types/workflow.cpp
new file mode 100644
index 0000000..bad4c24
--- /dev/null
+++ b/projects/stitch/src/types/workflow.cpp
@@ -0,0 +1,2 @@
+// dummy function to suppress ranlib warnings
+void workflow() { }
