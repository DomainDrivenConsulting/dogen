diff --git a/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
index 3bb211b..5b725ab 100644
--- a/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
@@ -69,27 +69,29 @@ private:
         const yarn::name& n) {
 
         BOOST_LOG_SEV(lg, debug) << "Processing name: " << n;
-        auto& pd(result_.by_name());
-        const auto pair(std::make_pair(n, factory_.make(n)));
-        const auto result(pd.insert(pair));
-        const bool inserted(result.second);
-        if (!inserted) {
-            BOOST_LOG_SEV(lg, error) << duplicate_name << n.id();
-            BOOST_THROW_EXCEPTION(building_error(duplicate_name + n.id()));
-        }
+        std::unordered_map<std::string, path_derivatives> pd_for_fmt;
 
         for (const auto& p : providers) {
-            BOOST_LOG_SEV(lg, debug) << "Provider: "
-                                     << p->formatter_name();
-            const auto i(pair.second.find(p->formatter_name()));
-            if (i != pair.second.end()) {
-                BOOST_LOG_SEV(lg, debug) << "Old path derivatives: "
-                                         << i->second;
-            }
+            const auto fmt_n(p->formatter_name());
+            BOOST_LOG_SEV(lg, debug) << "Provider: " << fmt_n;
 
             const auto pd(p->provide_path_derivatives(factory_, n));
-            BOOST_LOG_SEV(lg, debug) << "New Path derivatives: " << pd;
+            BOOST_LOG_SEV(lg, debug) << "Path derivatives: " << pd;
 
+            const auto result(pd_for_fmt.insert(std::make_pair(fmt_n, pd)));
+            const bool inserted(result.second);
+            if (!inserted) {
+                BOOST_LOG_SEV(lg, error) << duplicate_name << n.id();
+                BOOST_THROW_EXCEPTION(building_error(duplicate_name + n.id()));
+            }
+        }
+
+        const auto pair(std::make_pair(n, pd_for_fmt));
+        const auto result(result_.by_name().insert(pair));
+        const bool inserted(result.second);
+        if (!inserted) {
+            BOOST_LOG_SEV(lg, error) << duplicate_name << n.id();
+            BOOST_THROW_EXCEPTION(building_error(duplicate_name + n.id()));
         }
     }
 
