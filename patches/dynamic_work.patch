diff --git a/diagrams/dynamic.dia b/diagrams/dynamic.dia
index 272b437..f8f8ec8 100644
--- a/diagrams/dynamic.dia
+++ b/diagrams/dynamic.dia
@@ -4849,16 +4849,16 @@ shape of this data.
     </dia:object>
     <dia:object type="UML - Note" version="0" id="O45">
       <dia:attribute name="obj_pos">
-        <dia:point val="59,50"/>
+        <dia:point val="64,50"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="58.95,49.95;80.355,54.95"/>
+        <dia:rectangle val="63.95,49.95;85.355,54.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="59,50"/>
+        <dia:point val="64,50"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="21.305000000000003"/>
@@ -4891,7 +4891,7 @@ want client code to have to look up by complete name.#</dia:string>
             <dia:real val="0.80000000000000004"/>
           </dia:attribute>
           <dia:attribute name="pos">
-            <dia:point val="59.35,51.245"/>
+            <dia:point val="64.35,51.245"/>
           </dia:attribute>
           <dia:attribute name="color">
             <dia:color val="#000000"/>
@@ -4943,7 +4943,7 @@ want client code to have to look up by complete name.#</dia:string>
         <dia:point val="95.2975,51"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="94.5475,37.75;105.305,52.6"/>
+        <dia:rectangle val="94.5475,37.75;105.305,51.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -4975,16 +4975,16 @@ want client code to have to look up by complete name.#</dia:string>
     </dia:object>
     <dia:object type="UML - Message" version="0" id="O47">
       <dia:attribute name="obj_pos">
-        <dia:point val="80.305,52.45"/>
+        <dia:point val="85.305,52.45"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="80.2534,51.6986;91.0631,52.975"/>
+        <dia:rectangle val="85.252,51.6977;91.0744,52.975"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="conn_endpoints">
-        <dia:point val="80.305,52.45"/>
+        <dia:point val="85.305,52.45"/>
         <dia:point val="91,52.1"/>
       </dia:attribute>
       <dia:attribute name="text_colour">
@@ -5000,12 +5000,193 @@ want client code to have to look up by complete name.#</dia:string>
         <dia:enum val="0"/>
       </dia:attribute>
       <dia:attribute name="text_pos">
-        <dia:point val="85.6525,52.775"/>
+        <dia:point val="88.1525,52.775"/>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O45" connection="4"/>
         <dia:connection handle="1" to="O44" connection="3"/>
       </dia:connections>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O48">
+      <dia:attribute name="obj_pos">
+        <dia:point val="102,64"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="101.95,63.95;110.593,67.05"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="102,64"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="8.5425000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#field_access_error#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#exception#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#An error occurred while trying to acces a field.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O49">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="95.2975,54"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="94.5475,53.25;106.471,64.8"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="95.2975,54"/>
+        <dia:point val="95.2975,59"/>
+        <dia:point val="106.271,59"/>
+        <dia:point val="106.271,64"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O44" connection="6"/>
+        <dia:connection handle="1" to="O48" connection="1"/>
+      </dia:connections>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
diff --git a/doc/agile/product_backlog.org b/doc/agile/product_backlog.org
index 07e0aec..a72b0fd 100644
--- a/doc/agile/product_backlog.org
+++ b/doc/agile/product_backlog.org
@@ -8,6 +8,14 @@
 
 Stories that we intend to look at, at some point.
 
+*** Consider c++ itself as a front-end                                :story:
+
+One can imagine a clang-based front-end that reads C++ code suitably
+annotated, perhaps with =Generatable= or some such attributes -
+basically all attributes required to build a sensible SML model. The
+frontend will parse the code and generate SML. We can then generate
+serialisation, hashing etc for the hand-crafted code.
+
 *** Consider adding issues emblem                                     :story:
 
 Boost.DI seems to have a new emblem for issues:
diff --git a/doc/agile/sprint_backlog_59.org b/doc/agile/sprint_backlog_59.org
index ee614c0..4361097 100644
--- a/doc/agile/sprint_backlog_59.org
+++ b/doc/agile/sprint_backlog_59.org
@@ -178,6 +178,8 @@ and in the mean time, every time we rebuild, we need to re-link the
 work. Remove this until we have a use case.
 
 *** STARTED Add annotation fields and remove meta-data usage in formatters :story:
+    CLOCK: [2015-01-15 Thu 12:10]
+    CLOCK: [2015-01-14 Wed 21:23]--[2015-01-14 Wed 21:46] =>  0:23
     CLOCK: [2015-01-13 Tue 22:20]--[2015-01-13 Tue 23:54] =>  1:34
 
 Add all required field definitions for the formatters field; rename
@@ -262,4 +264,15 @@ cope with it being called several times.
 Once we are done with all of the meta-data refactoring, we need to
 update the manual.
 
+*** Add field definition description                                  :story:
+
+It would be useful to have a description of the purpose of the field
+so that we could print it to the command line.
+
+*** Add field definition group                                        :story:
+
+Fields should be grouped. This could conceivably be achieved by the
+owner, or maybe we need a high-level entity to do this
+aggregation. This is useful when printing fields out to the shell.
+
 ** Deprecated
diff --git a/projects/dynamic/include/dogen/dynamic/types/all.hpp b/projects/dynamic/include/dogen/dynamic/types/all.hpp
index 48038af..18b44da 100644
--- a/projects/dynamic/include/dogen/dynamic/types/all.hpp
+++ b/projects/dynamic/include/dogen/dynamic/types/all.hpp
@@ -24,6 +24,7 @@
 #include "dogen/dynamic/types/building_error.hpp"
 #include "dogen/dynamic/types/dynamic.hpp"
 #include "dogen/dynamic/types/field.hpp"
+#include "dogen/dynamic/types/field_access_error.hpp"
 #include "dogen/dynamic/types/field_definition.hpp"
 #include "dogen/dynamic/types/field_factory.hpp"
 #include "dogen/dynamic/types/merger.hpp"
diff --git a/projects/dynamic/include/dogen/dynamic/types/field_access_error.hpp b/projects/dynamic/include/dogen/dynamic/types/field_access_error.hpp
new file mode 100644
index 0000000..b54aea8
--- /dev/null
+++ b/projects/dynamic/include/dogen/dynamic/types/field_access_error.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_TYPES_FIELD_ACCESS_ERROR_HPP
+#define DOGEN_DYNAMIC_TYPES_FIELD_ACCESS_ERROR_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/exception/info.hpp>
+#include <string>
+
+namespace dogen {
+namespace dynamic {
+
+/**
+ * @brief An error occurred while trying to acces a field.
+ */
+class field_access_error : public virtual std::exception, public virtual boost::exception {
+public:
+    field_access_error() = default;
+    ~field_access_error() noexcept = default;
+
+public:
+    field_access_error(const std::string& message) : message_(message) { }
+
+public:
+    const char* what() const noexcept { return(message_.c_str()); }
+
+private:
+    const std::string message_;
+};
+
+} }
+
+#endif
diff --git a/projects/dynamic/include/dogen/dynamic/types/field_access_error_fwd.hpp b/projects/dynamic/include/dogen/dynamic/types/field_access_error_fwd.hpp
new file mode 100644
index 0000000..781cbfd
--- /dev/null
+++ b/projects/dynamic/include/dogen/dynamic/types/field_access_error_fwd.hpp
@@ -0,0 +1,38 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_DYNAMIC_TYPES_FIELD_ACCESS_ERROR_FWD_HPP
+#define DOGEN_DYNAMIC_TYPES_FIELD_ACCESS_ERROR_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/exception/info.hpp>
+#include <string>
+
+namespace dogen {
+namespace dynamic {
+
+class field_access_error;
+
+} }
+
+#endif
diff --git a/projects/dynamic/include/dogen/dynamic/types/object_extensions.hpp b/projects/dynamic/include/dogen/dynamic/types/object_extensions.hpp
index d7c2948..7335bb8 100644
--- a/projects/dynamic/include/dogen/dynamic/types/object_extensions.hpp
+++ b/projects/dynamic/include/dogen/dynamic/types/object_extensions.hpp
@@ -27,6 +27,7 @@
 
 #include "dogen/dynamic/types/field_definition.hpp"
 #include "dogen/dynamic/types/object.hpp"
+#include "dogen/dynamic/types/field.hpp"
 
 namespace dogen {
 namespace dynamic {
@@ -36,6 +37,22 @@ namespace dynamic {
  */
 bool has_field(const object& o, const field_definition& fd);
 
+/**
+ * @brief Returns a field from an object.
+ *
+ * @pre has_field must be true.
+ */
+const field& get_field(const object& o, const field_definition& fd);
+
+/**
+ * @brief Returns the content for the field, assuming it is a text field.
+ *
+ * @pre has_field must be true.
+ * @pre Field value type must match be text.
+ */
+std::string get_text_field_content(const object& o, const field_definition& fd);
+
 } }
 
 #endif
+
diff --git a/projects/dynamic/src/types/object_extensions.cpp b/projects/dynamic/src/types/object_extensions.cpp
index 78f47a5..359c988 100644
--- a/projects/dynamic/src/types/object_extensions.cpp
+++ b/projects/dynamic/src/types/object_extensions.cpp
@@ -18,8 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
+#include <string>
+#include <boost/throw_exception.hpp>
+#include "dogen/utility/log/logger.hpp"
+#include "dogen/dynamic/types/text.hpp"
+#include "dogen/dynamic/types/field_access_error.hpp"
 #include "dogen/dynamic/types/object_extensions.hpp"
 
+namespace {
+
+using namespace dogen::utility::log;
+auto lg(logger_factory("dynamic.object_extensions.cpp"));
+
+const std::string field_not_found("Field not found: ");
+const std::string unexpected_field_type("Field has an unexpected type: ");
+
+}
+
 namespace dogen {
 namespace dynamic {
 
@@ -28,4 +43,31 @@ bool has_field(const object& o, const field_definition& fd) {
     return (i != o.fields().end());
 }
 
+const field& get_field(const object& o, const field_definition& fd) {
+    const auto n(fd.name().complete_name());
+    const auto i(o.fields().find(n));
+
+    if (i == o.fields().end()) {
+        BOOST_LOG_SEV(lg, error) << field_not_found << n;
+        BOOST_THROW_EXCEPTION(field_access_error(field_not_found + n));
+    }
+
+    return i->second;
+}
+
+std::string
+get_text_field_content(const object& o, const field_definition& fd) {
+    const auto& f(get_field(o, fd));
+    const auto& v(*f.value());
+
+    try {
+        const auto& t(dynamic_cast<const text&>(v));
+        return t.content();
+    } catch(const std::bad_cast& e) {
+        const auto n(fd.name().complete_name());
+        BOOST_LOG_SEV(lg, error) << unexpected_field_type << n;
+        BOOST_THROW_EXCEPTION(field_access_error(unexpected_field_type + n));
+    }
+}
+
 } }
diff --git a/projects/formatters/include/dogen/formatters/types/meta_data/general_settings_factory.hpp b/projects/formatters/include/dogen/formatters/types/meta_data/general_settings_factory.hpp
index 217a199..f21d8a5 100644
--- a/projects/formatters/include/dogen/formatters/types/meta_data/general_settings_factory.hpp
+++ b/projects/formatters/include/dogen/formatters/types/meta_data/general_settings_factory.hpp
@@ -31,6 +31,7 @@
 #include <boost/optional.hpp>
 #include <boost/filesystem/path.hpp>
 #include <boost/property_tree/ptree.hpp>
+#include "dogen/dynamic/types/object.hpp"
 #include "dogen/formatters/types/general_settings.hpp"
 #include "dogen/formatters/types/modeline_group.hpp"
 #include "dogen/formatters/types/licence.hpp"
@@ -65,27 +66,43 @@ private:
      */
     void throw_missing_item(const std::string& msg, const std::string& n) const;
 
+private:
     /**
-     * @brief Extracts a licence using meta-data in the Taggable.
+     * @brief Extracts a licence from the meta-data.
      */
     boost::optional<licence> extract_licence(
         const boost::property_tree::ptree& md) const;
 
     /**
-     * @brief Extracts a modeline using meta-data in the Taggable.
+     * @brief Extracts a modeline from the meta-data.
      */
     boost::optional<modeline> extract_modeline(
         const boost::property_tree::ptree& meta_data) const;
 
     /**
-     * @brief Extracts a code generation marker using meta-data in the
-     * Taggable.
+     * @brief Extracts a code generation marker from the meta-data.
      */
     std::string extract_marker(
         const boost::property_tree::ptree& meta_data) const;
 
 private:
     /**
+     * @brief Extracts a licence from the dynamic object.
+     */
+    boost::optional<licence> extract_licence(const dynamic::object& o) const;
+
+    /**
+     * @brief Extracts a modeline the dynamic object.
+     */
+    boost::optional<modeline> extract_modeline(const dynamic::object& o) const;
+
+    /**
+     * @brief Extracts a code generation marker the dynamic object.
+     */
+    std::string extract_marker(const dynamic::object& o) const;
+
+private:
+    /**
      * @brief Creates the actual list of directories used by hydrators
      * to load data.
      */
@@ -102,11 +119,6 @@ private:
      */
     void hydrate_licences();
 
-    /**
-     * @brief Creates the code generation marker.
-     */
-    void create_marker(const boost::property_tree::ptree& meta_data);
-
 public:
     /**
      * @brief Returns true if there is any reference data at all in the
@@ -129,6 +141,13 @@ public:
      */
     general_settings build(const boost::property_tree::ptree& meta_data) const;
 
+    /**
+     * @brief Generates general settings from the dynamic object.
+     *
+     * @pre load reference data must have been called.
+     */
+    general_settings build(const dynamic::object& o) const;
+
 private:
     const std::forward_list<boost::filesystem::path>& data_files_directories_;
     std::unordered_map<std::string, modeline_group> modeline_groups_;
diff --git a/projects/formatters/src/types/meta_data/general_settings_factory.cpp b/projects/formatters/src/types/meta_data/general_settings_factory.cpp
index 8677204..99b442a 100644
--- a/projects/formatters/src/types/meta_data/general_settings_factory.cpp
+++ b/projects/formatters/src/types/meta_data/general_settings_factory.cpp
@@ -18,9 +18,13 @@
  * MA 02110-1301, USA.
  *
  */
+#include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/unordered_map_io.hpp"
 #include "dogen/sml/types/meta_data/reader.hpp"
+#include "dogen/dynamic/types/text.hpp"
+#include "dogen/dynamic/types/object_extensions.hpp"
+#include "dogen/formatters/types/meta_data/field_definitions.hpp"
 #include "dogen/formatters/types/meta_data/traits.hpp"
 #include "dogen/formatters/types/hydration_workflow.hpp"
 #include "dogen/formatters/io/modeline_group_io.hpp"
@@ -111,6 +115,62 @@ extract_marker(const boost::property_tree::ptree& meta_data) const {
     return f.build();
 }
 
+boost::optional<licence>
+general_settings_factory::extract_licence(const dynamic::object& o) const {
+    const auto& fd(field_definitions::licence_name());
+    using namespace dynamic;
+    if (!has_field(o, fd))
+        return boost::optional<licence>();
+
+    const auto licence_name(get_text_field_content(o, fd));
+    const auto i(licences_.find(licence_name));
+    if (i == licences_.end())
+        throw_missing_item("Licence not found: ", licence_name);
+
+    licence l(i->second);
+    if (reader.has_key(traits::copyright_holder())) {
+        const auto copyright_holder(reader.get(traits::copyright_holder()));
+        l.copyright_holders().push_back(copyright_holder);
+    }
+    return l;
+}
+
+/*
+boost::optional<modeline>
+general_settings_factory::extract_modeline(const dynamic::object& o) const {
+    sml::meta_data::reader reader(meta_data);
+    if (!reader.has_key(traits::modeline_group_name()))
+        return boost::optional<modeline>();
+
+    const auto name(reader.get(traits::modeline_group_name()));
+    const auto i(modeline_groups_.find(name));
+    if (i == modeline_groups_.end())
+        throw_missing_item("Modeline group not found: ", name);
+
+    const auto modeline_group(i->second);
+    const auto j(modeline_group.modelines().find("c++"));
+    if (j == modeline_group.modelines().end())
+        throw_missing_item("Modeline not found: ", name);
+
+    return j->second;
+}
+
+std::string
+general_settings_factory::extract_marker(const dynamic::object& o) const {
+    sml::meta_data::reader reader(meta_data);
+
+    using cgm = traits::code_generation_marker;
+    const std::string message(reader.get(cgm::message()));
+    if (message.empty())
+        return std::string();
+
+    const bool add_date_time(reader.is_true(cgm::add_date_time()));
+    const bool add_warning(reader.is_true(cgm::add_warning()));
+    code_generation_marker_factory f(add_date_time, add_warning, message);
+
+    return f.build();
+}
+*/
 std::forward_list<boost::filesystem::path> general_settings_factory::
 create_directory_list(const std::string& for_whom) const {
     std::forward_list<boost::filesystem::path> r;
@@ -170,4 +230,15 @@ build(const boost::property_tree::ptree& meta_data) const {
     return general_settings(generate_preamble, a);
 }
 
+general_settings
+general_settings_factory::build(const dynamic::object& o) const {
+    const auto modeline(extract_modeline(o));
+    const auto licence(extract_licence(o));
+    const auto marker(extract_marker(o));
+    const annotation a(modeline, licence, marker);
+
+    const bool generate_preamble(false); // FIXME: read from meta_data
+    return general_settings(generate_preamble, a);
+}
+
 } } }
