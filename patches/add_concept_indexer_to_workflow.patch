diff --git a/doc/agile/release_notes_sprint_40.org b/doc/agile/release_notes_sprint_40.org
index cad1142..456d4e0 100644
--- a/doc/agile/release_notes_sprint_40.org
+++ b/doc/agile/release_notes_sprint_40.org
@@ -10,15 +10,16 @@ This file contains all stories that were closed during sprint 40.
 ** Development Stories Implemented
 
 #+begin: clocktable :maxlevel 3 :scope subtree
-Clock summary at [2013-12-05 Thu 18:10]
-
-| Headline                                          | Time   |      |      |
-|---------------------------------------------------+--------+------+------|
-| *Total time*                                      | *3:27* |      |      |
-|---------------------------------------------------+--------+------+------|
-| Development Stories Implemented                   |        | 3:27 |      |
-| IMPLEMENTATION Release notes and backlog grooming |        |      | 0:05 |
-| COMPLETED Add more tests to =concept_indexer=     |        |      | 3:22 |
+Clock summary at [2013-12-05 Thu 19:09]
+
+| Headline                                            | Time   |      |      |
+|-----------------------------------------------------+--------+------+------|
+| *Total time*                                        | *3:50* |      |      |
+|-----------------------------------------------------+--------+------+------|
+| Development Stories Implemented                     |        | 3:50 |      |
+| IMPLEMENTATION Release notes and backlog grooming   |        |      | 0:05 |
+| COMPLETED Add more tests to =concept_indexer=       |        |      | 3:22 |
+| IMPLEMENTATION Plug =concept_indexer= into workflow |        |      | 0:23 |
 #+end:
 
 *** IMPLEMENTATION Release notes and backlog grooming                  :task:
@@ -47,7 +48,9 @@ Use compilation downtime to update the manual.
 - object that models non-existing concept
 - object with non-existing parent
 
-*** Plug =concept_indexer= into workflow                              :story:
+*** IMPLEMENTATION Plug =concept_indexer= into workflow               :story:
+    CLOCK: [2013-12-05 Thu 18:12]--[2013-12-05 Thu 18:35] =>  0:23
+
 *** Populate new concept properties in dia to sml transformer         :story:
 
 - populate =is_parent= and =is_child=
diff --git a/projects/sml/include/dogen/sml/types/workflow.hpp b/projects/sml/include/dogen/sml/types/workflow.hpp
index 2f8f3fc..dd596f2 100644
--- a/projects/sml/include/dogen/sml/types/workflow.hpp
+++ b/projects/sml/include/dogen/sml/types/workflow.hpp
@@ -53,17 +53,22 @@ private:
 
 private:
     /**
-     * @brief Add any additional models to the original list of
-     * references passed in by user.
+     * @brief Returns all models available in the system library.
      */
-    std::list<model> augment_references_activity(
-        const std::list<model>& references) const;
+    std::list<model> library_models_activity() const;
+
+    /**
+     * @brief Injects system types into model.
+     */
+    void inject_types_activity(model& target,
+        std::list<model>& references) const;
 
     /**
      * @brief Create the merged model.
      */
     model create_merged_model_activity(const model& target,
-        const std::list<model>& references) const;
+        const std::list<model>& library_models,
+        const std::list<model>& user_models) const;
 
     /**
      * @brief Resolve all types.
@@ -84,7 +89,7 @@ private:
 
 public:
     std::pair<bool, model>
-    execute(const model& target, const std::list<model>& references) const;
+    execute(model target, std::list<model> references) const;
 
 private:
     const bool add_system_models_;
diff --git a/projects/sml/src/types/workflow.cpp b/projects/sml/src/types/workflow.cpp
index 6d4cfcf..56029a2 100644
--- a/projects/sml/src/types/workflow.cpp
+++ b/projects/sml/src/types/workflow.cpp
@@ -68,22 +68,29 @@ bool workflow::has_generatable_types(const sml::model& m) const {
     return false;
 }
 
-std::list<model> workflow::
-augment_references_activity(const std::list<model>& references) const {
-    std::list<model> r(references);
-    if (add_system_models_) {
-        using namespace dogen::utility::filesystem;
-        const auto dir(data_files_directory() / library_dir);
-        const auto files(find_files(dir));
-        dogen::sml::json_hydrator h;
-        for (const auto& f : files) {
-            boost::filesystem::ifstream s(f);
-            r.push_back(h.hydrate(s));
-        }
+std::list<model> workflow::library_models_activity() const {
+    std::list<model> r;
+    using namespace dogen::utility::filesystem;
+    const auto dir(data_files_directory() / library_dir);
+    const auto files(find_files(dir));
+    dogen::sml::json_hydrator h;
+    for (const auto& f : files) {
+        boost::filesystem::ifstream s(f);
+        r.push_back(h.hydrate(s));
     }
     return r;
 }
 
+void workflow::inject_types_activity(model& target,
+    std::list<model>& references) const {
+
+    injector i;
+    i.inject(target);
+
+    for (auto& r : references)
+        i.inject(r);
+}
+
 model workflow::create_merged_model_activity(const model& target,
     const std::list<model>& references) const {
 
@@ -112,9 +119,10 @@ void workflow::resolve_types_activity(model& merged_model) const {
 }
 
 std::pair<bool, model> workflow::
-execute(const model& target, const std::list<model>& references) const {
-    const auto augment_references(augment_references_activity(references));
-    auto r(create_merged_model_activity(target, augment_references));
+execute(const model target, std::list<model> references) const {
+    const auto lm(library_models_activity());
+    inject_types_activity(target, references);
+    auto r(create_merged_model_activity(target, references));
     resolve_types_activity(r);
     tag_model_activity(r);
     return std::pair<bool, model> { has_generatable_types(r), r };
