diff --git a/data/library/cpp.boost.json b/data/library/cpp.boost.json
index 2b07f42..9a3aa41 100644
--- a/data/library/cpp.boost.json
+++ b/data/library/cpp.boost.json
@@ -71,7 +71,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "io_service",
-            "module_path" : [
+            "internal_module_path" : [
                 "asio"
             ],
             "extensions" : {
@@ -81,7 +81,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "socket",
-            "module_path" : [
+            "internal_module_path" : [
                 "asio", "ip", "tcp"
             ],
             "extensions" : {
@@ -91,7 +91,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "acceptor",
-            "module_path" : [
+            "internal_module_path" : [
                 "asio", "ip", "tcp"
             ],
             "extensions" : {
@@ -101,7 +101,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "path",
-            "module_path" : [
+            "internal_module_path" : [
                 "filesystem"
             ],
             "extensions" : {
@@ -117,7 +117,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "date",
-            "module_path" : [
+            "internal_module_path" : [
                 "gregorian"
             ],
             "extensions" : {
@@ -133,7 +133,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "ptime",
-            "module_path" : [
+            "internal_module_path" : [
                 "posix_time"
             ],
             "extensions" : {
@@ -149,7 +149,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "time_duration",
-            "module_path" : [
+            "internal_module_path" : [
                 "posix_time"
             ],
             "extensions" : {
@@ -165,7 +165,7 @@
         {
             "meta_type" : "object",
             "simple_name" : "ptree",
-            "module_path" : [
+            "internal_module_path" : [
                 "property_tree"
             ],
             "extensions" : {
diff --git a/diagrams/yarn.dia b/diagrams/yarn.dia
index 7adecdd..89c0225 100644
--- a/diagrams/yarn.dia
+++ b/diagrams/yarn.dia
@@ -3539,7 +3539,7 @@ for Java, etc.#</dia:string>
         <dia:point val="-46.5525,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-90.6825,2.55;-45.7025,14.0004"/>
+        <dia:rectangle val="-88.795,2.55;-45.7025,14.0002"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -3547,8 +3547,8 @@ for Java, etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-46.5525,2.6"/>
         <dia:point val="-46.5525,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,13.9504"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,13.9502"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3572,7 +3572,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O27" connection="6"/>
-        <dia:connection handle="1" to="O33" connection="8"/>
+        <dia:connection handle="1" to="O33" connection="10"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O31">
@@ -3580,7 +3580,7 @@ for Java, etc.#</dia:string>
         <dia:point val="-69.36,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-90.6825,2.55;-68.51,14.05"/>
+        <dia:rectangle val="-88.795,2.55;-68.51,14.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -3588,8 +3588,8 @@ for Java, etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-69.36,2.6"/>
         <dia:point val="-69.36,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,14"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,14"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3621,7 +3621,7 @@ for Java, etc.#</dia:string>
         <dia:point val="-58.4925,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-90.6825,2.55;-57.6425,14.05"/>
+        <dia:rectangle val="-88.795,2.55;-57.6425,14.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -3629,8 +3629,8 @@ for Java, etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-58.4925,2.6"/>
         <dia:point val="-58.4925,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,14"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,14"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3659,19 +3659,19 @@ for Java, etc.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O33">
       <dia:attribute name="obj_pos">
-        <dia:point val="-93,14"/>
+        <dia:point val="-94,14"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-93.05,13.95;-88.215,17.05"/>
+        <dia:rectangle val="-94.05,13.95;-83.44,17.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-93,14"/>
+        <dia:point val="-94,14"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7350000000000003"/>
+        <dia:real val="10.51"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="3"/>
+        <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
         <dia:string>#Element#</dia:string>
@@ -3760,7 +3760,31 @@ for Java, etc.#</dia:string>
       <dia:attribute name="comment_font_height">
         <dia:real val="0.69999999999999996"/>
       </dia:attribute>
-      <dia:attribute name="attributes"/>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#in_global_namespace#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, the type is located in the global namespace.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
       <dia:attribute name="operations"/>
       <dia:attribute name="template">
         <dia:boolean val="false"/>
@@ -3772,7 +3796,7 @@ for Java, etc.#</dia:string>
         <dia:point val="-84.205,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-90.6825,2.55;-83.355,14.05"/>
+        <dia:rectangle val="-88.795,2.55;-83.355,14.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -3780,8 +3804,8 @@ for Java, etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-84.205,2.6"/>
         <dia:point val="-84.205,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,14"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,14"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3961,17 +3985,17 @@ for Java, etc.#</dia:string>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O37">
       <dia:attribute name="obj_pos">
-        <dia:point val="-90.6325,17"/>
+        <dia:point val="-88.745,17.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-91.4825,16.95;-75.5825,30.05"/>
+        <dia:rectangle val="-89.595,17.55;-75.5825,30.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-90.6325,17"/>
-        <dia:point val="-90.6325,25"/>
+        <dia:point val="-88.745,17.6"/>
+        <dia:point val="-88.745,25"/>
         <dia:point val="-75.6325,25"/>
         <dia:point val="-75.6325,30"/>
       </dia:attribute>
@@ -7654,7 +7678,7 @@ etc.#</dia:string>
         <dia:point val="-99.745,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-100.595,2.55;-90.5825,14.05"/>
+        <dia:rectangle val="-100.595,2.55;-88.695,14.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -7662,8 +7686,8 @@ etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-99.745,2.6"/>
         <dia:point val="-99.745,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,14"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,14"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -7829,7 +7853,7 @@ etc.#</dia:string>
         <dia:point val="-116.858,2.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-117.708,2.55;-90.5825,14.05"/>
+        <dia:rectangle val="-117.708,2.55;-88.695,14.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -7837,8 +7861,8 @@ etc.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-116.858,2.6"/>
         <dia:point val="-116.858,9"/>
-        <dia:point val="-90.6325,9"/>
-        <dia:point val="-90.6325,14"/>
+        <dia:point val="-88.745,9"/>
+        <dia:point val="-88.745,14"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
diff --git a/doc/agile/sprint_backlog_74.org b/doc/agile/sprint_backlog_74.org
index 891137f..d53968e 100644
--- a/doc/agile/sprint_backlog_74.org
+++ b/doc/agile/sprint_backlog_74.org
@@ -15,18 +15,18 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
-#+CAPTION: Clock summary at [2015-11-11 Wed 22:51]
+#+CAPTION: Clock summary at [2015-11-16 Mon 22:47]
 | <75>                                                                        |        |      |      |
 | Headline                                                                    | Time   |      |      |
 |-----------------------------------------------------------------------------+--------+------+------|
-| *Total time*                                                                | *6:07* |      |      |
+| *Total time*                                                                | *8:10* |      |      |
 |-----------------------------------------------------------------------------+--------+------+------|
-| Stories                                                                     | 6:07   |      |      |
-| Active                                                                      |        | 6:07 |      |
+| Stories                                                                     | 8:10   |      |      |
+| Active                                                                      |        | 8:10 |      |
 | STARTED Sprint and product backlog grooming                                 |        |      | 1:29 |
 | COMPLETED Write the next interesting instalment                             |        |      | 1:05 |
 | STARTED SML json hydrator =read_module_path= needs refactoring              |        |      | 1:21 |
-| STARTED Generate all yarn names using name factory                          |        |      | 2:12 |
+| STARTED Generate all yarn names using name factory                          |        |      | 4:15 |
 #+end:
 
 *** STARTED Sprint and product backlog grooming                       :story:
@@ -63,6 +63,7 @@ this into a =read= function without side-effects and a =create=
 function that creates the missing modules.
 
 *** STARTED Generate all yarn names using name factory                :story:
+    CLOCK: [2015-11-16 Mon 20:44]--[2015-11-16 Mon 22:47] =>  2:03
     CLOCK: [2015-11-11 Wed 21:26]--[2015-11-11 Wed 21:29] =>  0:03
     CLOCK: [2015-11-10 Tue 23:22]--[2015-11-10 Tue 23:32] =>  0:10
     CLOCK: [2015-11-10 Tue 23:02]--[2015-11-10 Tue 23:21] =>  0:19
@@ -78,6 +79,8 @@ one. This includes:
 - resolver
 - cpp
 
+- add in global namespace to primitve JSON model.
+
 *** Update name factory to compute qualified name                     :story:
 
 We started off by disabling the qualified name to make resolution
diff --git a/projects/yarn/include/dogen/yarn/types/expander.hpp b/projects/yarn/include/dogen/yarn/types/expander.hpp
index db293ad..1e5dec0 100644
--- a/projects/yarn/include/dogen/yarn/types/expander.hpp
+++ b/projects/yarn/include/dogen/yarn/types/expander.hpp
@@ -31,21 +31,12 @@ namespace dogen {
 namespace yarn {
 
 class expander {
-public:
-    expander();
-
-public:
-    void create_missing_modules(const bool v);
-
 private:
     void expand_modules(intermediate_model& m) const;
     void expand_properties(intermediate_model& m) const;
 
 public:
     void expand(intermediate_model& m) const;
-
-private:
-    bool create_missing_modules_;
 };
 
 } }
diff --git a/projects/yarn/include/dogen/yarn/types/modules_expander.hpp b/projects/yarn/include/dogen/yarn/types/modules_expander.hpp
index 6ae8ed0..7dec40e 100644
--- a/projects/yarn/include/dogen/yarn/types/modules_expander.hpp
+++ b/projects/yarn/include/dogen/yarn/types/modules_expander.hpp
@@ -31,21 +31,12 @@ namespace dogen {
 namespace yarn {
 
 class modules_expander {
-public:
-    modules_expander();
-
-public:
-    void create_missing_modules(const bool v);
-
 private:
     void create_missing_modules(intermediate_model& m) const;
     void expand_containing_module(intermediate_model& m) const;
 
 public:
     void expand(intermediate_model& m) const;
-
-private:
-    bool create_missing_modules_;
 };
 
 } }
diff --git a/projects/yarn/include/dogen/yarn/types/name_factory.hpp b/projects/yarn/include/dogen/yarn/types/name_factory.hpp
index d7a75ab..8cd5d27 100644
--- a/projects/yarn/include/dogen/yarn/types/name_factory.hpp
+++ b/projects/yarn/include/dogen/yarn/types/name_factory.hpp
@@ -61,6 +61,14 @@ public:
     name build_element_in_module(const name& module_name,
         const std::string& simple_name) const;
 
+
+    /**
+     * @brief Builds a module name, given the model name and an
+     * internal module path. Uses the back of the module path to name
+     * the module.
+     */
+    name build_module_name(const name& model_name,
+        const std::list<std::string>& internal_module_path) const;
 };
 
 } }
diff --git a/projects/yarn/spec/expander_spec.cpp b/projects/yarn/spec/expander_spec.cpp
new file mode 100644
index 0000000..fb6f729
--- /dev/null
+++ b/projects/yarn/spec/expander_spec.cpp
@@ -0,0 +1,104 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <array>
+#include <boost/test/unit_test.hpp>
+#include <boost/algorithm/string/predicate.hpp>
+#include "dogen/utility/test/logging.hpp"
+#include "dogen/utility/test/asserter.hpp"
+#include "dogen/utility/test/exception_checkers.hpp"
+#include "dogen/utility/io/list_io.hpp"
+#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/io/intermediate_model_io.hpp"
+#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/io/object_io.hpp"
+#include "dogen/yarn/types/expansion_error.hpp"
+#include "dogen/yarn/test/mock_intermediate_model_factory.hpp"
+#include "dogen/yarn/types/modules_expander.hpp"
+#include "dogen/yarn/types/expander.hpp"
+
+/*
+using dogen::yarn::relationship_types;
+using dogen::yarn::object_types;
+
+namespace {
+
+using dogen::yarn::test::mock_intermediate_model_factory;
+const mock_intermediate_model_factory::flags flags;
+const mock_intermediate_model_factory factory(flags);
+
+const std::string test_module("yarn");
+const std::string test_suite("injector_spec");
+
+}
+
+using dogen::utility::test::contains_checker;
+using dogen::yarn::expansion_error;
+using dogen::utility::test::asserter;
+
+BOOST_AUTO_TEST_SUITE(expander)
+
+BOOST_AUTO_TEST_CASE(model_with_type_with_missing_modules_gets_correctly_expanded) {
+    SETUP_TEST_LOG_SOURCE("model_with_type_with_missing_modules_gets_correctly_expanded");
+
+    auto m(factory.make_single_type_model());
+    BOOST_REQUIRE(m.objects().size() == 3);
+    BOOST_REQUIRE(m.modules().empty());
+    BOOST_REQUIRE(m.primitives().empty());
+    BOOST_REQUIRE(m.enumerations().empty());
+    BOOST_REQUIRE(m.concepts().empty());
+
+    dogen::yarn::modules_expander me;
+    me.expand(m);
+
+    BOOST_CHECK(m.objects().size() == 3);
+    BOOST_CHECK(m.modules().size() == 3);
+
+    for (const auto& pair : m.objects()) {
+        const auto& o(pair.second);
+        const auto n(o.name());
+
+        if (!n.location().internal_module_path().empty()) {
+            bool module_found(false);
+            for (const auto& pair : m.modules()) {
+                const auto mod(pair.second);
+                auto pp(mod.name().location().internal_module_path());
+                pp.push_back(mod.name().simple());
+                BOOST_LOG_SEV(lg, info) << "Converted path: " << pp;
+                if (n.location().internal_module_path() == pp) {
+                    module_found = true;
+                    break;
+                }
+            }
+
+            if (!module_found)
+                BOOST_LOG_SEV(lg, error) << "Object has undefined module: "
+                                         << n.qualified();
+            BOOST_CHECK(module_found);
+        }
+    }
+
+    BOOST_CHECK(m.primitives().empty());
+    BOOST_CHECK(m.enumerations().empty());
+    BOOST_CHECK(m.concepts().empty());
+}
+
+}
+*/
diff --git a/projects/yarn/src/types/expander.cpp b/projects/yarn/src/types/expander.cpp
index e78c363..bfd9e6d 100644
--- a/projects/yarn/src/types/expander.cpp
+++ b/projects/yarn/src/types/expander.cpp
@@ -25,15 +25,8 @@
 namespace dogen {
 namespace yarn {
 
-expander::expander() : create_missing_modules_(false) { }
-
-void expander::create_missing_modules(const bool v) {
-    create_missing_modules_ = v;
-}
-
 void expander::expand_modules(intermediate_model& m) const {
     modules_expander e;
-    e.create_missing_modules(create_missing_modules_);
     e.expand(m);
 }
 
diff --git a/projects/yarn/src/types/modules_expander.cpp b/projects/yarn/src/types/modules_expander.cpp
index 8d77959..24a2b3c 100644
--- a/projects/yarn/src/types/modules_expander.cpp
+++ b/projects/yarn/src/types/modules_expander.cpp
@@ -21,6 +21,7 @@
 #include <boost/throw_exception.hpp>
 #include <boost/algorithm/string.hpp>
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/name_factory.hpp"
 #include "dogen/yarn/types/expansion_error.hpp"
 #include "dogen/yarn/types/all_model_items_traversal.hpp"
 #include "dogen/yarn/types/modules_expander.hpp"
@@ -61,12 +62,17 @@ public:
 };
 
 void internal_module_path_builder::process(const name& n) {
-    const auto& ipp(n.location().internal_module_path());
-    if (ipp.empty())
-        return;
+    auto ipp(n.location().internal_module_path());
+    while (!ipp.empty()) {
+        const std::string key(boost::join(ipp, separator));
+        distinct_internal_module_paths_.insert(std::make_pair(key, ipp));
+        ipp.pop_back();
+    }
+}
 
-    const std::string key(boost::join(ipp, separator));
-    distinct_internal_module_paths_.insert(std::make_pair(key, ipp));
+const std::unordered_map<std::string, std::list<std::string>>&
+    internal_module_path_builder::result() {
+    return distinct_internal_module_paths_;
 }
 
 class updater {
@@ -143,44 +149,23 @@ void updater::update(element& e) {
 
 }
 
-modules_expander::modules_expander() : create_missing_modules_(false) { }
-
-void modules_expander::create_missing_modules(const bool v) {
-    create_missing_modules_ = v;
-}
-
 void modules_expander::create_missing_modules(intermediate_model& m) const {
-    if (!create_missing_modules_)
-        return;
-
     internal_module_path_builder b;
     yarn::all_model_items_traversal(m, b);
 
-    /*
     for (const auto& pair : b.result()) {
+        yarn::name_factory f;
         const auto& ipp(pair.second);
-        for (auto i(ipp.begin()); i = ipp.end(); ++i) {
-            const auto module_name(j->second.get_value<std::string>());
-            n.location().internal_module_path().push_back(module_name);
-
-            yarn::name module_n;
-            module_n.simple(module_name);
-            module_n.location().original_model_name(model_name(m));
-            auto mp(n.location().internal_module_path());
-            mp.pop_back();
-            module_n.location().internal_module_path(mp);
-
-            const auto i(m.modules().find(module_n));
-            if (i == m.modules().end()) {
-                yarn::module mod;
-                mod.name(module_n);
-                mod.origin_type(m.origin_type());
-                mod.generation_type(m.generation_type());
-                m.modules().insert(std::make_pair(module_n, mod));
-            }
+        const auto module_n(f.build_module_name(m.name(), ipp));
+        const auto i(m.modules().find(module_n));
+        if (i == m.modules().end()) {
+            yarn::module mod;
+            mod.name(module_n);
+            mod.origin_type(m.origin_type());
+            mod.generation_type(m.generation_type());
+            m.modules().insert(std::make_pair(module_n, mod));
         }
     }
-    */
 }
 
 void modules_expander::expand_containing_module(intermediate_model& m) const {
diff --git a/projects/yarn/src/types/name_factory.cpp b/projects/yarn/src/types/name_factory.cpp
index f8bd5fd..b199ef4 100644
--- a/projects/yarn/src/types/name_factory.cpp
+++ b/projects/yarn/src/types/name_factory.cpp
@@ -31,6 +31,9 @@ namespace {
 using namespace dogen::utility::log;
 auto lg(logger_factory("yarn.name_factory"));
 
+const std::string empty_internal_module_path(
+    "Internal module path cannot be empty.");
+
 }
 
 namespace dogen {
@@ -86,5 +89,27 @@ name name_factory::build_element_in_module(const name& module_name,
     return n;
 }
 
+name name_factory::build_module_name(const name& model_name,
+    const std::list<std::string>& internal_module_path) const {
+
+    if (internal_module_path.empty()) {
+        BOOST_LOG_SEV(lg, error) << empty_internal_module_path;
+        BOOST_THROW_EXCEPTION(building_error(empty_internal_module_path));
+    }
+
+    yarn::name n;
+    n.simple(internal_module_path.back());
+
+    const auto& l(model_name.location());
+    n.location().original_model_name(l.original_model_name());
+    // n.location().model_module_path(l.model_module_path());
+    n.location().external_module_path(l.external_module_path());
+
+    auto ipp(internal_module_path);
+    ipp.pop_back();
+    n.location().internal_module_path(ipp);
+
+    return n;
+}
 
 } }
diff --git a/projects/yarn_json/include/dogen/yarn_json/types/hydrator.hpp b/projects/yarn_json/include/dogen/yarn_json/types/hydrator.hpp
index 2670a36..824a3a1 100644
--- a/projects/yarn_json/include/dogen/yarn_json/types/hydrator.hpp
+++ b/projects/yarn_json/include/dogen/yarn_json/types/hydrator.hpp
@@ -66,16 +66,6 @@ private:
     std::string model_name(const yarn::intermediate_model& m) const;
 
     /**
-     * @brief Reads a module path from the property tree and uses it
-     * to populate the name.
-     *
-     * If the model does not contain all modules implied by the module
-     * path, it adds them to the model.
-     */
-    void read_module_path(const boost::property_tree::ptree& pt,
-        yarn::intermediate_model& m, yarn::name& n) const;
-
-    /**
      * @brief Creates the dynamic object by reading meta-data from the
      * property tree.
      */
diff --git a/projects/yarn_json/spec/hydrator_spec.cpp b/projects/yarn_json/spec/hydrator_spec.cpp
index 32724c3..abe8955 100644
--- a/projects/yarn_json/spec/hydrator_spec.cpp
+++ b/projects/yarn_json/spec/hydrator_spec.cpp
@@ -38,7 +38,7 @@
 
 namespace {
 
-const std::string test_module("yarn");
+const std::string test_module("yarn_json");
 const std::string test_suite("hydrator_spec");
 
 const std::string model_name("a_model");
@@ -50,10 +50,10 @@ const std::string some_key("some_key");
 const std::string some_value("some_value");
 const std::string type_key("type_key");
 const bool type_value(true);
-const std::string module_path_key("module_path");
-const std::string module_path_value_1("module_1");
-const std::string module_path_value_2("module_2");
-const std::string module_path_value_3("module_3");
+const std::string internal_module_path_key("module_path");
+const std::string internal_module_path_value_1("module_1");
+const std::string internal_module_path_value_2("module_2");
+const std::string internal_module_path_value_3("module_3");
 
 const std::string cpp_std_model_path("library/cpp.std.json");
 const std::string cpp_std_model_name("std");
@@ -66,11 +66,9 @@ const std::string missing_model_name("model_name");
 const std::string missing_type_name("simple_name");
 const std::string missing_origin("origin");
 const std::string missing_elements("elements");
-const std::string missing_is_expandable("is_expandable");
 
 const std::string trivial_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "documentation" : "a_doc",
     "origin" : "system",
     "elements" : [
@@ -85,7 +83,6 @@ const std::string trivial_model(R"({
 
 const std::string tagged_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "documentation" : "a_doc",
     "origin" : "system",
     "extensions" : {
@@ -108,7 +105,6 @@ const std::string tagged_model(R"({
 
 const std::string no_documentation_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "origin" : "system",
     "elements" : [
         {
@@ -120,7 +116,6 @@ const std::string no_documentation_model(R"({
 )");
 
 const std::string no_name_model(R"({
-    "is_expandable" : false,
     "origin" : "system",
     "elements" : [
         {
@@ -133,7 +128,6 @@ const std::string no_name_model(R"({
 
 const std::string no_type_name_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "origin" : "system",
     "elements" : [
         {
@@ -145,7 +139,6 @@ const std::string no_type_name_model(R"({
 
 const std::string no_origin_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "elements" : [
         {
             "meta_type" : "object",
@@ -157,48 +150,30 @@ const std::string no_origin_model(R"({
 
 const std::string no_elements_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "origin" : "system"
   }
 )");
 
 const std::string empty_elements_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "origin" : "system",
     "elements" : [ ]
   }
 )");
 
-const std::string module_path_model(R"({
+const std::string internal_module_path_model(R"({
     "model_name" : "a_model",
-    "is_expandable" : false,
     "origin" : "system",
-    "module_path" : [ "module_1", "module_2", "module_3" ],
     "elements" : [
         {
             "meta_type" : "object",
             "simple_name" : "a_type",
-            "module_path" : [ "module_1" ]
+            "internal_module_path" : [ "module_1", "module_2", "module_3" ]
         }
      ]
   }
 )");
 
-const std::string missing_is_expandable_model(R"({
-    "model_name" : "a_model",
-    "origin" : "system",
-    "elements" : [
-        {
-            "meta_type" : "object",
-            "simple_name" : "a_type",
-            "module_path" : [ "module_1" ]
-        }
-     ]
-  }
-)");
-
-
 dogen::dynamic::repository create_repository() {
     using namespace dogen::dynamic;
     test::mock_field_definition_factory f;
@@ -354,18 +329,13 @@ BOOST_AUTO_TEST_CASE(empty_elements_model_throws) {
     BOOST_CHECK_EXCEPTION(hydrate(empty_elements_model), hydration_error, c);
 }
 
-BOOST_AUTO_TEST_CASE(module_path_model_hydrates_into_expected_model) {
-    SETUP_TEST_LOG_SOURCE("module_path_model_hydrates_into_expected_model");
-    const auto m(hydrate(module_path_model));
+BOOST_AUTO_TEST_CASE(internal_module_path_model_hydrates_into_expected_model) {
+    SETUP_TEST_LOG_SOURCE("internal_module_path_model_hydrates_into_expected_model");
+    const auto m(hydrate(internal_module_path_model));
     BOOST_LOG_SEV(lg, debug) << "model: " << m;
 
     {
-        const auto mp(m.name().location().internal_module_path());
-        BOOST_REQUIRE(mp.size() == 3);
-        auto i(mp.begin());
-        BOOST_CHECK(*i == module_path_value_1);
-        BOOST_CHECK((*(++i)) == module_path_value_2);
-        BOOST_CHECK((*(++i)) == module_path_value_3);
+        BOOST_CHECK(m.name().location().internal_module_path().empty());
         BOOST_CHECK(m.name().location().external_module_path().empty());
     }
 
@@ -376,9 +346,13 @@ BOOST_AUTO_TEST_CASE(module_path_model_hydrates_into_expected_model) {
     BOOST_CHECK(pair.first == n);
     {
         const auto mp(n.location().internal_module_path());
-        BOOST_REQUIRE(mp.size() == 1);
+        BOOST_REQUIRE(mp.size() == 3);
+
         auto i(mp.begin());
-        BOOST_CHECK(*i == module_path_value_1);
+        BOOST_CHECK(*i == internal_module_path_value_1);
+        BOOST_CHECK((*(++i)) == internal_module_path_value_2);
+        BOOST_CHECK((*(++i)) == internal_module_path_value_3);
+
         BOOST_CHECK(n.location().external_module_path().empty());
     }
 }
@@ -451,25 +425,6 @@ BOOST_AUTO_TEST_CASE(cpp_boost_model_hydrates_into_expected_model) {
         using dogen::yarn::object_types;
         const auto ot(o.object_type());
         BOOST_CHECK(ot != object_types::invalid);
-
-        if (!n.location().internal_module_path().empty()) {
-            bool module_found(false);
-            for (const auto& pair : m.modules()) {
-                const auto mod(pair.second);
-                auto pp(mod.name().location().internal_module_path());
-                pp.push_back(mod.name().simple());
-                BOOST_LOG_SEV(lg, info) << "Converted path: " << pp;
-                if (n.location().internal_module_path() == pp) {
-                    module_found = true;
-                    break;
-                }
-            }
-
-            if (!module_found)
-                BOOST_LOG_SEV(lg, error) << "Object has undefined module: "
-                                         << n.qualified();
-            BOOST_CHECK(module_found);
-        }
     }
     BOOST_CHECK(m.primitives().empty());
     BOOST_CHECK(m.enumerations().empty());
diff --git a/projects/yarn_json/src/types/hydrator.cpp b/projects/yarn_json/src/types/hydrator.cpp
index 09f7330..357912e 100644
--- a/projects/yarn_json/src/types/hydrator.cpp
+++ b/projects/yarn_json/src/types/hydrator.cpp
@@ -37,7 +37,7 @@ using namespace dogen::utility::log;
 auto lg(logger_factory("yarn_json.hydrator"));
 
 const std::string empty;
-const std::string hardware_model_name("hardware");
+const std::string in_global_namespace_key("in_global_namespace");
 const std::string model_name_key("model_name");
 const std::string bool_true("true");
 const std::string bool_false("false");
@@ -53,7 +53,7 @@ const std::string meta_type_object_value("object");
 const std::string meta_type_primitive_value("primitive");
 
 const std::string simple_name_key("simple_name");
-const std::string module_path_key("module_path");
+const std::string internal_module_path_key("internal_module_path");
 const std::string extensions_key("extensions");
 
 const std::string object_type_key("object_type");
@@ -81,46 +81,12 @@ namespace yarn_json {
 hydrator::hydrator(const dynamic::workflow& w)
     : dynamic_workflow_(w) { }
 
-std::string hydrator::model_name(const yarn::intermediate_model& m) const {
-    if (m.name().location().original_model_name() == hardware_model_name)
-        return empty;
-    return m.name().location().original_model_name();
-}
-
 yarn::generation_types hydrator::generation_type(const bool is_target) const {
     return is_target ?
         yarn::generation_types::full_generation :
         yarn::generation_types::no_generation;
 }
 
-void hydrator::read_module_path(const boost::property_tree::ptree& pt,
-    yarn::intermediate_model& m, yarn::name& n) const {
-    const auto i(pt.find(module_path_key));
-    if (i == pt.not_found())
-        return;
-
-    for (auto j(i->second.begin()); j != i->second.end(); ++j) {
-        const auto module_name(j->second.get_value<std::string>());
-        n.location().internal_module_path().push_back(module_name);
-
-        yarn::name module_n;
-        module_n.simple(module_name);
-        module_n.location().original_model_name(model_name(m));
-        auto mp(n.location().internal_module_path());
-        mp.pop_back();
-        module_n.location().internal_module_path(mp);
-
-        const auto i(m.modules().find(module_n));
-        if (i == m.modules().end()) {
-            yarn::module mod;
-            mod.name(module_n);
-            mod.origin_type(m.origin_type());
-            mod.generation_type(m.generation_type());
-            m.modules().insert(std::make_pair(module_n, mod));
-        }
-    }
-}
-
 dynamic::object hydrator::
 create_dynamic_extensions(const boost::property_tree::ptree& pt,
     const dynamic::scope_types st) const {
@@ -140,13 +106,37 @@ create_dynamic_extensions(const boost::property_tree::ptree& pt,
 
 void hydrator::read_element(const boost::property_tree::ptree& pt,
     yarn::intermediate_model& m) const {
-    yarn::name n;
-    n.location().original_model_name(model_name(m));
-    read_module_path(pt, m, n);
+
+    bool in_global_namespace(false);
+    const auto in_global_namespace_value(
+        pt.get_optional<bool>(in_global_namespace_key));
+    if (in_global_namespace_value)
+        in_global_namespace = *in_global_namespace_value;
+
+    yarn::name_builder b;
+    b.compute_qualifed_name(false); // FIXME
+
+    if (!in_global_namespace)
+        b.model_name(m.name().location());
 
     const auto simple_name_value(pt.get<std::string>(simple_name_key));
-    n.simple(simple_name_value);
+    b.simple_name(simple_name_value);
+
+    const auto i(pt.find(internal_module_path_key));
+    if (i != pt.not_found()) {
+        std::list<std::string> ipp;
+        for (auto& item : pt.get_child(internal_module_path_key))
+            ipp.push_back(item.second.get_value<std::string>());
+
+        if (!ipp.empty())
+            b.internal_module_path(ipp);
+        else {
+            BOOST_LOG_SEV(lg, debug) << "Ignoring empty internal module path. "
+                                     << "Type: " << simple_name_value;
+        }
+    }
 
+    yarn::name n(b.build());
     const auto documentation(pt.get_optional<std::string>(documentation_key));
 
     const auto lambda([&](yarn::element& e) {
@@ -195,7 +185,6 @@ yarn::intermediate_model hydrator::read_stream(
     r.name(nf.build_model_name(pt.get<std::string>(model_name_key)));
     BOOST_LOG_SEV(lg, debug) << "Processing model: " << r.name().qualified();
 
-    read_module_path(pt, r, r.name());
     const auto scope(dynamic::scope_types::root_module);
     r.extensions(create_dynamic_extensions(pt, scope));
 
@@ -213,6 +202,7 @@ yarn::intermediate_model hydrator::read_stream(
         BOOST_THROW_EXCEPTION(hydration_error(invalid_origin + origin_value));
     }
 
+    // FIXME
     if (!model_name(r).empty()) {
         yarn::module m;
         const auto omn(r.name().location().original_model_name());
