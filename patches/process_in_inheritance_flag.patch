diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/properties/helper_properties_factory.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/properties/helper_properties_factory.hpp
index 7f163c2..0717eee 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/properties/helper_properties_factory.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/properties/helper_properties_factory.hpp
@@ -58,12 +58,13 @@ private:
 
 private:
     boost::optional<helper_descriptor>
-    make(const yarn::name_tree& nt, const bool is_top_level,
-        std::list<helper_properties>& properties) const;
+    make(const bool in_inheritance_relationship, const yarn::name_tree& nt,
+        const bool is_top_level, std::list<helper_properties>& properties) const;
 
 public:
     std::list<helper_properties>
-    make(const std::list<yarn::attribute>& attributes) const;
+    make(const bool in_inheritance_relationship,
+        const std::list<yarn::attribute>& attributes) const;
 
 private:
     const std::unordered_set<std::string>& primitive_ids_;
diff --git a/projects/quilt.cpp/src/types/properties/helper_properties_factory.cpp b/projects/quilt.cpp/src/types/properties/helper_properties_factory.cpp
index fc18672..a165f04 100644
--- a/projects/quilt.cpp/src/types/properties/helper_properties_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/helper_properties_factory.cpp
@@ -87,7 +87,7 @@ streaming_settings_for_id(const std::string& id) const {
 }
 
 boost::optional<helper_descriptor>
-helper_properties_factory::make(
+helper_properties_factory::make(const bool in_inheritance_relationship,
     const yarn::name_tree& nt, const bool is_top_level,
     std::list<helper_properties>& properties) const {
     const auto id(nt.current().id());
@@ -142,7 +142,9 @@ helper_properties_factory::make(
     r.name_tree_qualified(p2.second);
 
     helper_properties hp;
-    hp.current(r);
+
+    const auto iir(in_inheritance_relationship);
+    hp.in_inheritance_relationship(iir);
 
     /*
      * Note that we are processing the children even though the parent
@@ -158,7 +160,7 @@ helper_properties_factory::make(
          * descendants (and just the direct descendants, not its
          * children). If we have a child, we must have a descriptor.
          */
-        const auto dd(make(c, false /*is_top_level*/, properties));
+        const auto dd(make(iir, c, false /*is_top_level*/, properties));
         if (!dd) {
             BOOST_LOG_SEV(lg, error) << descriptor_expected;
             BOOST_THROW_EXCEPTION(building_error(descriptor_expected));
@@ -192,7 +194,8 @@ helper_properties_factory::make(
 }
 
 std::list<helper_properties> helper_properties_factory::
-make(const std::list<yarn::attribute>& attributes) const {
+make(const bool in_inheritance_relationship,
+    const std::list<yarn::attribute>& attributes) const {
     if (attributes.empty()) {
         BOOST_LOG_SEV(lg, debug) << "No properties found.";
         return std::list<helper_properties>();
@@ -200,8 +203,10 @@ make(const std::list<yarn::attribute>& attributes) const {
 
     BOOST_LOG_SEV(lg, debug) << "Properties found: " << attributes.size();
     std::list<helper_properties> properties;
-    for (const auto a : attributes)
-        make(a.parsed_type(), true/*is_top_level*/, properties);
+    for (const auto a : attributes) {
+        const auto iir(in_inheritance_relationship);
+        make(iir, a.parsed_type(), true/*is_top_level*/, properties);
+    }
 
     std::list<helper_properties> r;
     if (properties.empty()) {
diff --git a/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
index 09f288d..2ebde91 100644
--- a/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
@@ -79,31 +79,9 @@ class generator final : public yarn::element_visitor {
 public:
     explicit generator(const helper_properties_factory& f) : factory_(f) {}
 
-private:
-    template<typename YarnStateful>
-    void generate(const YarnStateful& s) {
-        if (s.generation_type() == yarn::generation_types::no_generation)
-            return;
-
-        const auto id(s.name().id());
-        BOOST_LOG_SEV(lg, debug) << "Creating helper instances for" << id;
-
-
-        const auto hi(factory_.make(s.local_attributes()));
-        const auto pair(std::make_pair(id, hi));
-        auto& hibn(result_.by_id());
-        const auto res(hibn.insert(pair));
-        if (!res.second) {
-            BOOST_LOG_SEV(lg, error) << duplicate_name << id;
-            BOOST_THROW_EXCEPTION(building_error(duplicate_name + id));
-        }
-        BOOST_LOG_SEV(lg, debug) << "Done creating helper instances for" << id;
-    }
-
 public:
     using yarn::element_visitor::visit;
-    void visit(const dogen::yarn::concept& c) { generate(c); }
-    void visit(const dogen::yarn::object& o) { generate(o); }
+    void visit(const dogen::yarn::object& o);
 
 public:
     const helper_properties_repository& result() const { return result_; }
@@ -113,6 +91,24 @@ private:
     helper_properties_repository result_;
 };
 
+void generator::visit(const dogen::yarn::object& o) {
+    if (o.generation_type() == yarn::generation_types::no_generation)
+        return;
+
+    const auto id(o.name().id());
+    BOOST_LOG_SEV(lg, debug) << "Creating helper instances for" << id;
+
+    const auto iir(o.in_inheritance_relationship());
+    const auto hp(factory_.make(iir, o.local_attributes()));
+    const auto pair(std::make_pair(id, hp));
+    auto& hpbn(result_.by_id());
+    if (!hpbn.insert(pair).second) {
+        BOOST_LOG_SEV(lg, error) << duplicate_name << id;
+        BOOST_THROW_EXCEPTION(building_error(duplicate_name + id));
+    }
+    BOOST_LOG_SEV(lg, debug) << "Done creating helper instances for" << id;
+}
+
 }
 
 helper_properties_repository
