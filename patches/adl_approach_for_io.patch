diff --git a/projects/needle/include/dogen/needle/core/io/jsonify.hpp b/projects/needle/include/dogen/needle/core/io/jsonify.hpp
index cf6baf9..f16693b 100644
--- a/projects/needle/include/dogen/needle/core/io/jsonify.hpp
+++ b/projects/needle/include/dogen/needle/core/io/jsonify.hpp
@@ -222,15 +222,6 @@ jsonify(const std::string& v) {
     return detail::quoted_tidied_formatting<const std::string&>(v);
 }
 
-/**
- * @brief Object handling.
- */
-template<typename Value>
-inline detail::no_op_formatting<const Value&>
-jsonify(const Value& v) {
-    return detail::no_op_formatting<const Value&>(v);
-}
-
 namespace detail {
 
 template<typename Value>
diff --git a/projects/needle/include/dogen/needle/std/io/pair_io.hpp b/projects/needle/include/dogen/needle/std/io/pair_io.hpp
index aa6c963..290cbbb 100644
--- a/projects/needle/include/dogen/needle/std/io/pair_io.hpp
+++ b/projects/needle/include/dogen/needle/std/io/pair_io.hpp
@@ -32,6 +32,14 @@
 namespace std {
 
 template<typename Key, typename Value>
+inline dogen::needle::core::io::detail::
+no_op_formatting<const std::pair<Key, Value> >
+jsonify(const std::pair<Key, Value> v) {
+    return dogen::needle::core::io::detail::
+        no_op_formatting<const std::pair<Key, Value> >(v);
+}
+
+template<typename Key, typename Value>
 inline ostream& operator<<(ostream& s, const pair<Key, Value>& v) {
     // not using constants as this is slightly more efficient.
     using namespace dogen::needle::core::io;
diff --git a/projects/needle/spec/io_spec.cpp b/projects/needle/spec/io_spec.cpp
index 4af10da..9cf2987 100644
--- a/projects/needle/spec/io_spec.cpp
+++ b/projects/needle/spec/io_spec.cpp
@@ -58,6 +58,12 @@ struct test_object {
     unsigned int i;
 };
 
+inline dogen::needle::core::io::detail::no_op_formatting<const test_object>
+jsonify(const test_object& v) {
+    return dogen::needle::core::io::detail::
+        no_op_formatting<const test_object>(v);
+}
+
 inline std::ostream& operator<<(std::ostream& s, const test_object& to) {
     using namespace dogen::needle::core::io;
     s << constants::open_object()
