diff --git a/projects/cpp/include/dogen/cpp/types/meta_data/facet_settings_factory.hpp b/projects/cpp/include/dogen/cpp/types/meta_data/facet_settings_factory.hpp
index e69de29..42a824a 100644
--- a/projects/cpp/include/dogen/cpp/types/meta_data/facet_settings_factory.hpp
+++ b/projects/cpp/include/dogen/cpp/types/meta_data/facet_settings_factory.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_META_DATA_FACET_SETTINGS_FACTORY_HPP
+#define DOGEN_CPP_TYPES_META_DATA_FACET_SETTINGS_FACTORY_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <boost/property_tree/ptree.hpp>
+#include "dogen/cpp/types/facet_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace meta_data {
+
+class facet_settings_factory {
+public:
+    facet_settings_factory() = delete;
+    facet_settings_factory(const facet_settings_factory&) = default;
+    facet_settings_factory(facet_settings_factory&&) = default;
+    ~facet_settings_factory() = default;
+
+public:
+    /**
+     * @brief Builds the facet settings for facet from the meta data.
+     */
+    facet_settings build(const std::string& facet_id,
+        const boost::property_tree::ptree& meta_data) const;
+};
+
+} } }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/workflow.hpp b/projects/cpp/include/dogen/cpp/types/workflow.hpp
index 87b7b78..79ec3b8 100644
--- a/projects/cpp/include/dogen/cpp/types/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/workflow.hpp
@@ -88,6 +88,12 @@ private:
 
 private:
     /**
+     * @brief Determines all the available facets given the registered
+     * formatters.
+     */
+    std::forward_list<std::string> obtain_available_facets_activity() const;
+
+    /**
      * @brief Create a settings bundle
      */
     settings_bundle create_settings_bundle_activity(
diff --git a/projects/cpp/src/types/meta_data/facet_settings_factory.cpp b/projects/cpp/src/types/meta_data/facet_settings_factory.cpp
index 9e462cb..776c8cc 100644
--- a/projects/cpp/src/types/meta_data/facet_settings_factory.cpp
+++ b/projects/cpp/src/types/meta_data/facet_settings_factory.cpp
@@ -1,2 +1,41 @@
-// dummy function to suppress ranlib warnings
-void facet_settings_factory() { }
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/utility/log/logger.hpp"
+#include "dogen/sml/types/meta_data/reader.hpp"
+#include "dogen/cpp/types/meta_data/traits.hpp"
+#include "dogen/cpp/types/meta_data/facet_settings_factory.hpp"
+
+namespace {
+
+using namespace dogen::utility::log;
+auto lg(logger_factory("cpp.meta_data.facet_settings_factory"));
+
+}
+
+namespace dogen {
+namespace cpp {
+namespace meta_data {
+
+facet_settings facet_settings_factory::build(const std::string& facet_id,
+    const boost::property_tree::ptree& meta_data) const {
+}
+
+} } }
diff --git a/projects/cpp/src/types/workflow.cpp b/projects/cpp/src/types/workflow.cpp
index 5dcffaf..5d0b6cf 100644
--- a/projects/cpp/src/types/workflow.cpp
+++ b/projects/cpp/src/types/workflow.cpp
@@ -18,6 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
+#include <unordered_set>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/cpp/types/formatter_dispatcher.hpp"
 #include "dogen/cpp/types/workflow.hpp"
@@ -56,6 +57,15 @@ std::forward_list<dogen::formatters::file> workflow::format_entity(
     return d.format(e);
 }
 
+std::forward_list<std::string> workflow::
+obtain_available_facets_activity() const {
+    std::unordered_set<std::string> s;
+    for (const auto f : registrar_->class_formatters())
+        s.insert(f->formatter_id());
+
+    return std::forward_list<std::string>(s.begin(), s.end());
+}
+
 settings_bundle workflow::create_settings_bundle_activity(
     const dogen::formatters::general_settings& gs) const {
     settings_bundle r;
