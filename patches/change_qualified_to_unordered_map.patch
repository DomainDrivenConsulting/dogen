diff --git a/projects/input_models/yarn.dia b/projects/input_models/yarn.dia
index aade1be..51a2f13 100644
--- a/projects/input_models/yarn.dia
+++ b/projects/input_models/yarn.dia
@@ -383,13 +383,13 @@ Name must be in one of the supported notations.#</dia:string>
         <dia:point val="-40,-1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-40.05,-1.05;-22.51,6.65"/>
+        <dia:rectangle val="-40.05,-1.05;-18.66,6.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="-40,-1"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="17.440000000000001"/>
+        <dia:real val="21.289999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="7.5999999999999996"/>
@@ -588,7 +588,7 @@ C++ pointers, references and so on.#</dia:string>
             <dia:string>#qualified#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::map&lt;languages, std::string&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;languages, std::string&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -701,7 +701,7 @@ supported languages.#</dia:string>
         <dia:point val="-39.2425,16"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-39.9925,6.55;-22.36,16.8"/>
+        <dia:rectangle val="-39.9925,6.55;-18.51,16.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -709,8 +709,8 @@ supported languages.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-39.2425,16"/>
         <dia:point val="-39.2425,12"/>
-        <dia:point val="-22.56,12"/>
-        <dia:point val="-22.56,6.6"/>
+        <dia:point val="-18.71,12"/>
+        <dia:point val="-18.71,6.6"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -1619,7 +1619,7 @@ intermediate merged model.#</dia:string>
         <dia:point val="-40,-1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-58.61,-9.05;-39.25,-0.2"/>
+        <dia:rectangle val="-54.76,-9.05;-39.25,-0.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -1627,8 +1627,8 @@ intermediate merged model.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-40,-1"/>
         <dia:point val="-40,-6"/>
-        <dia:point val="-58.56,-6"/>
-        <dia:point val="-58.56,-9"/>
+        <dia:point val="-54.71,-6"/>
+        <dia:point val="-54.71,-9"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -4345,13 +4345,13 @@ decided instead to use the word object.#</dia:string>
         <dia:point val="-76,-15"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-76.05,-15.05;-58.51,-8.95"/>
+        <dia:rectangle val="-76.05,-15.05;-54.66,-8.95"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="-76,-15"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="17.440000000000001"/>
+        <dia:real val="21.289999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="6"/>
@@ -4515,7 +4515,7 @@ The simple name must be unique for a given location.#</dia:string>
             <dia:string>#qualified#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::map&lt;languages, std::string&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;languages, std::string&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5649,16 +5649,16 @@ the object or concept is involved in.#</dia:string>
     </dia:object>
     <dia:object type="UML - Note" version="0" id="O49">
       <dia:attribute name="obj_pos">
-        <dia:point val="-20,-9"/>
+        <dia:point val="-16,-12"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-20.05,-9.05;-7.5,-5.65"/>
+        <dia:rectangle val="-16.05,-12.05;-3.5,-8.65"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-20,-9"/>
+        <dia:point val="-16,-12"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="12.450000000000001"/>
@@ -5689,7 +5689,7 @@ expansion.#</dia:string>
             <dia:real val="0.80000000000000004"/>
           </dia:attribute>
           <dia:attribute name="pos">
-            <dia:point val="-19.65,-7.755"/>
+            <dia:point val="-15.65,-10.755"/>
           </dia:attribute>
           <dia:attribute name="color">
             <dia:color val="#000000"/>
@@ -5702,16 +5702,16 @@ expansion.#</dia:string>
     </dia:object>
     <dia:object type="UML - Message" version="0" id="O50">
       <dia:attribute name="obj_pos">
-        <dia:point val="-13.775,-5.7"/>
+        <dia:point val="-9.775,-8.7"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-13.8435,-5.76848;-10.6301,-0.753576"/>
+        <dia:rectangle val="-11.4029,-8.75723;-9.71777,-0.887775"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="conn_endpoints">
-        <dia:point val="-13.775,-5.7"/>
+        <dia:point val="-9.775,-8.7"/>
         <dia:point val="-11,-1"/>
       </dia:attribute>
       <dia:attribute name="text_colour">
@@ -5727,7 +5727,7 @@ expansion.#</dia:string>
         <dia:enum val="0"/>
       </dia:attribute>
       <dia:attribute name="text_pos">
-        <dia:point val="-12.3875,-2.8501"/>
+        <dia:point val="-10.3875,-4.3501"/>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O49" connection="6"/>
@@ -9408,7 +9408,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-32.12,-32.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-32.87,-33.15;-22.36,-0.2"/>
+        <dia:rectangle val="-32.87,-33.15;-18.51,-0.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -9416,8 +9416,8 @@ Temporary data structure used to build trees of names.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-32.12,-32.4"/>
         <dia:point val="-32.12,-19"/>
-        <dia:point val="-22.56,-19"/>
-        <dia:point val="-22.56,-1"/>
+        <dia:point val="-18.71,-19"/>
+        <dia:point val="-18.71,-1"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -9479,7 +9479,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-47,-32.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-58.61,-33.15;-46.25,-14.2"/>
+        <dia:rectangle val="-54.76,-33.15;-46.25,-14.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -9487,8 +9487,8 @@ Temporary data structure used to build trees of names.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-47,-32.4"/>
         <dia:point val="-47,-19"/>
-        <dia:point val="-58.56,-19"/>
-        <dia:point val="-58.56,-15"/>
+        <dia:point val="-54.71,-19"/>
+        <dia:point val="-54.71,-15"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -11106,18 +11106,18 @@ are not modules, such as attributes, inner classes, etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-58.56,-13.1"/>
+        <dia:point val="-54.71,-13.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-59.31,-13.85;-47.0003,-11.55"/>
+        <dia:rectangle val="-55.46,-13.85;-47.0003,-11.55"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-58.56,-13.1"/>
-        <dia:point val="-52.4551,-13.1"/>
-        <dia:point val="-52.4551,-12.4"/>
+        <dia:point val="-54.71,-13.1"/>
+        <dia:point val="-50.5301,-13.1"/>
+        <dia:point val="-50.5301,-12.4"/>
         <dia:point val="-47.0503,-12.4"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
@@ -16848,7 +16848,7 @@ but the module does not yet exist.#</dia:string>
         <dia:point val="-73,-1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-73.75,-9.05;-67.08,-0.2"/>
+        <dia:rectangle val="-73.75,-9.05;-65.155,-0.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -16856,8 +16856,8 @@ but the module does not yet exist.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-73,-1"/>
         <dia:point val="-73,-6"/>
-        <dia:point val="-67.28,-6"/>
-        <dia:point val="-67.28,-9"/>
+        <dia:point val="-65.355,-6"/>
+        <dia:point val="-65.355,-9"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -17170,7 +17170,7 @@ but the module does not yet exist.#</dia:string>
         <dia:point val="-72.0025,-25"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-72.7525,-25.75;-67.08,-14.2"/>
+        <dia:rectangle val="-72.7525,-25.75;-65.155,-14.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -17178,8 +17178,8 @@ but the module does not yet exist.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-72.0025,-25"/>
         <dia:point val="-72.0025,-19"/>
-        <dia:point val="-67.28,-19"/>
-        <dia:point val="-67.28,-15"/>
+        <dia:point val="-65.355,-19"/>
+        <dia:point val="-65.355,-15"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -23053,19 +23053,19 @@ space.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O194">
       <dia:attribute name="obj_pos">
-        <dia:point val="-125,-29"/>
+        <dia:point val="-128,-29"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-125.05,-29.05;-104.43,-22.15"/>
+        <dia:rectangle val="-128.05,-29.05;-99.73,-21.35"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-125,-29"/>
+        <dia:point val="-128,-29"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="20.52"/>
+        <dia:real val="28.219999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="6.8000000000000007"/>
+        <dia:real val="7.5999999999999996"/>
       </dia:attribute>
       <dia:attribute name="name">
         <dia:string>#identifiable_and_qualified_builder#</dia:string>
@@ -23260,7 +23260,7 @@ space.#</dia:string>
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::pair&lt;std::string, std::map&lt;languages, std::string&gt;&gt;#</dia:string>
+            <dia:string>#std::pair&lt;std::string, std::unordered_map&lt;languages, std::string&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -23290,7 +23290,7 @@ space.#</dia:string>
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>##</dia:string>
+            <dia:string>#std::pair&lt;std::string, std::unordered_map&lt;languages, std::string&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -23394,7 +23394,7 @@ space.#</dia:string>
         <dia:point val="-124,-36.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-124.75,-37.15;-114.54,-27.4"/>
+        <dia:rectangle val="-124.75,-37.15;-113.69,-27.4"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23402,8 +23402,8 @@ space.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-124,-36.4"/>
         <dia:point val="-124,-33"/>
-        <dia:point val="-114.74,-33"/>
-        <dia:point val="-114.74,-29"/>
+        <dia:point val="-113.89,-33"/>
+        <dia:point val="-113.89,-29"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
diff --git a/projects/knit/src/serialization/registrar_ser.cpp b/projects/knit/src/serialization/registrar_ser.cpp
index c73e2ad..2d638dd 100644
--- a/projects/knit/src/serialization/registrar_ser.cpp
+++ b/projects/knit/src/serialization/registrar_ser.cpp
@@ -39,10 +39,10 @@ namespace knit {
 template<typename Archive>
 void register_types(Archive& ar) {
     dogen::quilt::cpp::register_types(ar);
+    dogen::yarn::register_types(ar);
     dogen::annotations::register_types(ar);
     dogen::options::register_types(ar);
     dogen::formatters::register_types(ar);
-    dogen::yarn::register_types(ar);
 }
 
 template void register_types(boost::archive::polymorphic_oarchive& ar);
diff --git a/projects/quilt.cpp/src/serialization/registrar_ser.cpp b/projects/quilt.cpp/src/serialization/registrar_ser.cpp
index 50b64d7..7e26d7a 100644
--- a/projects/quilt.cpp/src/serialization/registrar_ser.cpp
+++ b/projects/quilt.cpp/src/serialization/registrar_ser.cpp
@@ -43,8 +43,8 @@ namespace cpp {
 
 template<typename Archive>
 void register_types(Archive& ar) {
-    dogen::options::register_types(ar);
     dogen::yarn::register_types(ar);
+    dogen::options::register_types(ar);
     dogen::formatters::register_types(ar);
     dogen::annotations::register_types(ar);
 
diff --git a/projects/quilt.csharp/src/serialization/registrar_ser.cpp b/projects/quilt.csharp/src/serialization/registrar_ser.cpp
index 2cea618..cef999d 100644
--- a/projects/quilt.csharp/src/serialization/registrar_ser.cpp
+++ b/projects/quilt.csharp/src/serialization/registrar_ser.cpp
@@ -42,9 +42,9 @@ namespace csharp {
 template<typename Archive>
 void register_types(Archive& ar) {
     dogen::yarn::register_types(ar);
+    dogen::options::register_types(ar);
     dogen::formatters::register_types(ar);
     dogen::annotations::register_types(ar);
-    dogen::options::register_types(ar);
 
     ar.template register_type<dogen::quilt::csharp::fabric::assembly_info>();
     ar.template register_type<dogen::quilt::csharp::fabric::visual_studio_project>();
diff --git a/projects/quilt/src/serialization/registrar_ser.cpp b/projects/quilt/src/serialization/registrar_ser.cpp
index 422cf9c..a067f03 100644
--- a/projects/quilt/src/serialization/registrar_ser.cpp
+++ b/projects/quilt/src/serialization/registrar_ser.cpp
@@ -37,9 +37,9 @@ namespace quilt {
 
 template<typename Archive>
 void register_types(Archive& ar) {
-    dogen::options::register_types(ar);
-    dogen::annotations::register_types(ar);
     dogen::yarn::register_types(ar);
+    dogen::annotations::register_types(ar);
+    dogen::options::register_types(ar);
     dogen::formatters::register_types(ar);
 }
 
diff --git a/projects/yarn.dia/src/serialization/registrar_ser.cpp b/projects/yarn.dia/src/serialization/registrar_ser.cpp
index 7d05a47..e3d1000 100644
--- a/projects/yarn.dia/src/serialization/registrar_ser.cpp
+++ b/projects/yarn.dia/src/serialization/registrar_ser.cpp
@@ -37,9 +37,9 @@ namespace dia {
 
 template<typename Archive>
 void register_types(Archive& ar) {
-    dogen::annotations::register_types(ar);
-    dogen::yarn::register_types(ar);
     dogen::dia::register_types(ar);
+    dogen::yarn::register_types(ar);
+    dogen::annotations::register_types(ar);
 }
 
 template void register_types(boost::archive::polymorphic_oarchive& ar);
diff --git a/projects/yarn/include/dogen/yarn/types/identifiable_and_qualified_builder.hpp b/projects/yarn/include/dogen/yarn/types/identifiable_and_qualified_builder.hpp
index 2b88d99..4b5aba9 100644
--- a/projects/yarn/include/dogen/yarn/types/identifiable_and_qualified_builder.hpp
+++ b/projects/yarn/include/dogen/yarn/types/identifiable_and_qualified_builder.hpp
@@ -25,6 +25,7 @@
 #pragma once
 #endif
 
+#include <unordered_map>
 #include "dogen/yarn/types/name.hpp"
 #include "dogen/yarn/types/name_tree.hpp"
 #include "dogen/yarn/types/separators.hpp"
@@ -38,7 +39,8 @@ public:
     identifiable_and_qualified_builder();
 
 private:
-    std::string obtain_qualified(const std::map<languages, std::string>& map,
+    std::string obtain_qualified(
+        const std::unordered_map<languages, std::string>& map,
         const languages& l) const;
 
 public:
@@ -46,8 +48,8 @@ public:
     void add(const name_tree& nt);
 
 public:
-    std::pair<std::string, std::map<languages, std::string>> build();
-    std::pair<std::string, std::map<languages, std::string>>
+    std::pair<std::string, std::unordered_map<languages, std::string>> build();
+    std::pair<std::string, std::unordered_map<languages, std::string>>
     build(const name& n, const bool model_name_mode);
 
 private:
diff --git a/projects/yarn/include/dogen/yarn/types/name.hpp b/projects/yarn/include/dogen/yarn/types/name.hpp
index 48a1b40..f52a2fb 100644
--- a/projects/yarn/include/dogen/yarn/types/name.hpp
+++ b/projects/yarn/include/dogen/yarn/types/name.hpp
@@ -27,7 +27,7 @@
 
 #include <string>
 #include <algorithm>
-#include <map>
+#include <unordered_map>
 #include "dogen/yarn/types/location.hpp"
 #include "dogen/yarn/types/languages.hpp"
 #include "dogen/yarn/hash/languages_hash.hpp"
@@ -62,7 +62,7 @@ public:
     name(
         const std::string& id,
         const std::string& simple,
-        const std::map<dogen::yarn::languages, std::string>& qualified,
+        const std::unordered_map<dogen::yarn::languages, std::string>& qualified,
         const dogen::yarn::location& location,
         const std::string& identifiable);
 
@@ -106,10 +106,10 @@ public:
      * @brief Qualified name in a language specific representation.
      */
     /**@{*/
-    const std::map<dogen::yarn::languages, std::string>& qualified() const;
-    std::map<dogen::yarn::languages, std::string>& qualified();
-    void qualified(const std::map<dogen::yarn::languages, std::string>& v);
-    void qualified(const std::map<dogen::yarn::languages, std::string>&& v);
+    const std::unordered_map<dogen::yarn::languages, std::string>& qualified() const;
+    std::unordered_map<dogen::yarn::languages, std::string>& qualified();
+    void qualified(const std::unordered_map<dogen::yarn::languages, std::string>& v);
+    void qualified(const std::unordered_map<dogen::yarn::languages, std::string>&& v);
     /**@}*/
 
     /**
@@ -146,7 +146,7 @@ public:
 private:
     std::string id_;
     std::string simple_;
-    std::map<dogen::yarn::languages, std::string> qualified_;
+    std::unordered_map<dogen::yarn::languages, std::string> qualified_;
     dogen::yarn::location location_;
     std::string identifiable_;
 };
diff --git a/projects/yarn/include/dogen/yarn/types/name_tree.hpp b/projects/yarn/include/dogen/yarn/types/name_tree.hpp
index b4776c5..883a813 100644
--- a/projects/yarn/include/dogen/yarn/types/name_tree.hpp
+++ b/projects/yarn/include/dogen/yarn/types/name_tree.hpp
@@ -28,7 +28,7 @@
 #include <list>
 #include <string>
 #include <algorithm>
-#include <map>
+#include <unordered_map>
 #include "dogen/yarn/types/name.hpp"
 #include "dogen/yarn/types/languages.hpp"
 #include "dogen/yarn/types/name_tree.hpp"
@@ -61,7 +61,7 @@ public:
         const std::list<dogen::yarn::name_tree>& children,
         const bool are_children_opaque,
         const bool is_circular_dependency,
-        const std::map<dogen::yarn::languages, std::string>& qualified,
+        const std::unordered_map<dogen::yarn::languages, std::string>& qualified,
         const std::string& identifiable,
         const bool is_current_simple_type);
 
@@ -117,10 +117,10 @@ public:
      * @brief Qualified name in a language specific representation.
      */
     /**@{*/
-    const std::map<dogen::yarn::languages, std::string>& qualified() const;
-    std::map<dogen::yarn::languages, std::string>& qualified();
-    void qualified(const std::map<dogen::yarn::languages, std::string>& v);
-    void qualified(const std::map<dogen::yarn::languages, std::string>&& v);
+    const std::unordered_map<dogen::yarn::languages, std::string>& qualified() const;
+    std::unordered_map<dogen::yarn::languages, std::string>& qualified();
+    void qualified(const std::unordered_map<dogen::yarn::languages, std::string>& v);
+    void qualified(const std::unordered_map<dogen::yarn::languages, std::string>&& v);
     /**@}*/
 
     /**
@@ -157,7 +157,7 @@ private:
     std::list<dogen::yarn::name_tree> children_;
     bool are_children_opaque_;
     bool is_circular_dependency_;
-    std::map<dogen::yarn::languages, std::string> qualified_;
+    std::unordered_map<dogen::yarn::languages, std::string> qualified_;
     std::string identifiable_;
     bool is_current_simple_type_;
 };
diff --git a/projects/yarn/src/hash/name_hash.cpp b/projects/yarn/src/hash/name_hash.cpp
index 0e1cc2d..b3d7629 100644
--- a/projects/yarn/src/hash/name_hash.cpp
+++ b/projects/yarn/src/hash/name_hash.cpp
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_languages_std_string(const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -49,7 +49,7 @@ std::size_t name_hasher::hash(const name& v) {
 
     combine(seed, v.id());
     combine(seed, v.simple());
-    combine(seed, hash_std_map_dogen_yarn_languages_std_string(v.qualified()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_languages_std_string(v.qualified()));
     combine(seed, v.location());
     combine(seed, v.identifiable());
 
diff --git a/projects/yarn/src/hash/name_tree_hash.cpp b/projects/yarn/src/hash/name_tree_hash.cpp
index 9194bbc..cc76a05 100644
--- a/projects/yarn/src/hash/name_tree_hash.cpp
+++ b/projects/yarn/src/hash/name_tree_hash.cpp
@@ -38,7 +38,7 @@ inline std::size_t hash_std_list_dogen_yarn_name_tree(const std::list<dogen::yar
     return seed;
 }
 
-inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_languages_std_string(const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -59,7 +59,7 @@ std::size_t name_tree_hasher::hash(const name_tree& v) {
     combine(seed, hash_std_list_dogen_yarn_name_tree(v.children()));
     combine(seed, v.are_children_opaque());
     combine(seed, v.is_circular_dependency());
-    combine(seed, hash_std_map_dogen_yarn_languages_std_string(v.qualified()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_languages_std_string(v.qualified()));
     combine(seed, v.identifiable());
     combine(seed, v.is_current_simple_type());
 
diff --git a/projects/yarn/src/io/name_io.cpp b/projects/yarn/src/io/name_io.cpp
index e1ca107..c6b33cc 100644
--- a/projects/yarn/src/io/name_io.cpp
+++ b/projects/yarn/src/io/name_io.cpp
@@ -33,7 +33,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/name_tree_io.cpp b/projects/yarn/src/io/name_tree_io.cpp
index d711c50..b3f1cb3 100644
--- a/projects/yarn/src/io/name_tree_io.cpp
+++ b/projects/yarn/src/io/name_tree_io.cpp
@@ -48,7 +48,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/serialization/name_ser.cpp b/projects/yarn/src/serialization/name_ser.cpp
index f1a4c0b..4337aac 100644
--- a/projects/yarn/src/serialization/name_ser.cpp
+++ b/projects/yarn/src/serialization/name_ser.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <boost/serialization/map.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
@@ -27,6 +26,7 @@
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>
+#include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
 #include "dogen/yarn/serialization/name_ser.hpp"
diff --git a/projects/yarn/src/serialization/name_tree_ser.cpp b/projects/yarn/src/serialization/name_tree_ser.cpp
index 21a8171..759e35d 100644
--- a/projects/yarn/src/serialization/name_tree_ser.cpp
+++ b/projects/yarn/src/serialization/name_tree_ser.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <boost/serialization/map.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/list.hpp>
 #include <boost/archive/xml_iarchive.hpp>
@@ -28,6 +27,7 @@
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>
+#include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
 #include "dogen/yarn/serialization/name_ser.hpp"
diff --git a/projects/yarn/src/test_data/name_td.cpp b/projects/yarn/src/test_data/name_td.cpp
index cdd1a6a..5b36408 100644
--- a/projects/yarn/src/test_data/name_td.cpp
+++ b/projects/yarn/src/test_data/name_td.cpp
@@ -36,8 +36,8 @@ create_dogen_yarn_languages(const unsigned int position) {
     return dogen::yarn::languages_generator::create(position);
 }
 
-std::map<dogen::yarn::languages, std::string> create_std_map_dogen_yarn_languages_std_string(unsigned int position) {
-    std::map<dogen::yarn::languages, std::string> r;
+std::unordered_map<dogen::yarn::languages, std::string> create_std_unordered_map_dogen_yarn_languages_std_string(unsigned int position) {
+    std::unordered_map<dogen::yarn::languages, std::string> r;
     for (unsigned int i(0); i < 4; ++i) {
         r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_string(position + i)));
     }
@@ -60,7 +60,7 @@ void name_generator::
 populate(const unsigned int position, result_type& v) {
     v.id(create_std_string(position + 0));
     v.simple(create_std_string(position + 1));
-    v.qualified(create_std_map_dogen_yarn_languages_std_string(position + 2));
+    v.qualified(create_std_unordered_map_dogen_yarn_languages_std_string(position + 2));
     v.location(create_dogen_yarn_location(position + 3));
     v.identifiable(create_std_string(position + 4));
 }
diff --git a/projects/yarn/src/test_data/name_tree_td.cpp b/projects/yarn/src/test_data/name_tree_td.cpp
index 2d6b47a..8f8872d 100644
--- a/projects/yarn/src/test_data/name_tree_td.cpp
+++ b/projects/yarn/src/test_data/name_tree_td.cpp
@@ -58,8 +58,8 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-std::map<dogen::yarn::languages, std::string> create_std_map_dogen_yarn_languages_std_string(unsigned int position) {
-    std::map<dogen::yarn::languages, std::string> r;
+std::unordered_map<dogen::yarn::languages, std::string> create_std_unordered_map_dogen_yarn_languages_std_string(unsigned int position) {
+    std::unordered_map<dogen::yarn::languages, std::string> r;
     for (unsigned int i(0); i < 4; ++i) {
         r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_string(position + i)));
     }
@@ -79,7 +79,7 @@ populate(const unsigned int position, result_type& v) {
     v.children(create_std_list_dogen_yarn_name_tree(position + 1));
     v.are_children_opaque(create_bool(position + 2));
     v.is_circular_dependency(create_bool(position + 3));
-    v.qualified(create_std_map_dogen_yarn_languages_std_string(position + 4));
+    v.qualified(create_std_unordered_map_dogen_yarn_languages_std_string(position + 4));
     v.identifiable(create_std_string(position + 5));
     v.is_current_simple_type(create_bool(position + 6));
 }
diff --git a/projects/yarn/src/types/identifiable_and_qualified_builder.cpp b/projects/yarn/src/types/identifiable_and_qualified_builder.cpp
index 36a8d97..bffb68cf 100644
--- a/projects/yarn/src/types/identifiable_and_qualified_builder.cpp
+++ b/projects/yarn/src/types/identifiable_and_qualified_builder.cpp
@@ -43,7 +43,8 @@ identifiable_and_qualified_builder() : csharp_pp_(separators::dots),
                                        cpp_pp_(separators::double_colons) {}
 
 std::string identifiable_and_qualified_builder::obtain_qualified(
-    const std::map<languages, std::string>& map, const languages& l) const {
+    const std::unordered_map<languages, std::string>& map,
+    const languages& l) const {
     const auto i(map.find(l));
     if (i == map.end()) {
         BOOST_LOG_SEV(lg, error) << qn_missing << l;
@@ -62,10 +63,10 @@ void identifiable_and_qualified_builder::add(const name_tree& nt) {
     cpp_pp_.add_child(obtain_qualified(nt.qualified(), languages::cpp));
 }
 
-std::pair<std::string, std::map<languages, std::string> >
+std::pair<std::string, std::unordered_map<languages, std::string> >
 identifiable_and_qualified_builder::build() {
     const auto cpp_qn(cpp_pp_.print());
-    const auto qualified(std::map<languages, std::string> {
+    const auto qualified(std::unordered_map<languages, std::string> {
             { languages::csharp, csharp_pp_.print() },
             { languages::cpp, cpp_qn }
         });
@@ -80,7 +81,7 @@ identifiable_and_qualified_builder::build() {
     return r;
 }
 
-std::pair<std::string, std::map<languages, std::string> >
+std::pair<std::string, std::unordered_map<languages, std::string> >
 identifiable_and_qualified_builder::
 build(const name& n, const bool model_name_mode) {
     csharp_pp_.add(n, model_name_mode);
diff --git a/projects/yarn/src/types/name.cpp b/projects/yarn/src/types/name.cpp
index f4a5101..ad63858 100644
--- a/projects/yarn/src/types/name.cpp
+++ b/projects/yarn/src/types/name.cpp
@@ -26,7 +26,7 @@ namespace yarn {
 name::name(
     const std::string& id,
     const std::string& simple,
-    const std::map<dogen::yarn::languages, std::string>& qualified,
+    const std::unordered_map<dogen::yarn::languages, std::string>& qualified,
     const dogen::yarn::location& location,
     const std::string& identifiable)
     : id_(id),
@@ -90,19 +90,19 @@ void name::simple(const std::string&& v) {
     simple_ = std::move(v);
 }
 
-const std::map<dogen::yarn::languages, std::string>& name::qualified() const {
+const std::unordered_map<dogen::yarn::languages, std::string>& name::qualified() const {
     return qualified_;
 }
 
-std::map<dogen::yarn::languages, std::string>& name::qualified() {
+std::unordered_map<dogen::yarn::languages, std::string>& name::qualified() {
     return qualified_;
 }
 
-void name::qualified(const std::map<dogen::yarn::languages, std::string>& v) {
+void name::qualified(const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     qualified_ = v;
 }
 
-void name::qualified(const std::map<dogen::yarn::languages, std::string>&& v) {
+void name::qualified(const std::unordered_map<dogen::yarn::languages, std::string>&& v) {
     qualified_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/name_tree.cpp b/projects/yarn/src/types/name_tree.cpp
index e00a489..b9b71e9 100644
--- a/projects/yarn/src/types/name_tree.cpp
+++ b/projects/yarn/src/types/name_tree.cpp
@@ -33,7 +33,7 @@ name_tree::name_tree(
     const std::list<dogen::yarn::name_tree>& children,
     const bool are_children_opaque,
     const bool is_circular_dependency,
-    const std::map<dogen::yarn::languages, std::string>& qualified,
+    const std::unordered_map<dogen::yarn::languages, std::string>& qualified,
     const std::string& identifiable,
     const bool is_current_simple_type)
     : current_(current),
@@ -119,19 +119,19 @@ void name_tree::is_circular_dependency(const bool v) {
     is_circular_dependency_ = v;
 }
 
-const std::map<dogen::yarn::languages, std::string>& name_tree::qualified() const {
+const std::unordered_map<dogen::yarn::languages, std::string>& name_tree::qualified() const {
     return qualified_;
 }
 
-std::map<dogen::yarn::languages, std::string>& name_tree::qualified() {
+std::unordered_map<dogen::yarn::languages, std::string>& name_tree::qualified() {
     return qualified_;
 }
 
-void name_tree::qualified(const std::map<dogen::yarn::languages, std::string>& v) {
+void name_tree::qualified(const std::unordered_map<dogen::yarn::languages, std::string>& v) {
     qualified_ = v;
 }
 
-void name_tree::qualified(const std::map<dogen::yarn::languages, std::string>&& v) {
+void name_tree::qualified(const std::unordered_map<dogen::yarn::languages, std::string>&& v) {
     qualified_ = std::move(v);
 }
 
