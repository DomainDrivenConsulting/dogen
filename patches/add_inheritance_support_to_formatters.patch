diff --git a/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_class_declaration.hpp b/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_class_declaration.hpp
index c48b460..bcf7af6 100644
--- a/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_class_declaration.hpp
+++ b/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_class_declaration.hpp
@@ -57,11 +57,12 @@ protected:
     void compiler_generated_constuctors(const class_view_model& vm);
     void default_constructor(const class_view_model& vm);
     void complete_constructor(const class_view_model& vm);
+    void destructor(const class_view_model& vm);
     void friends(const class_view_model& vm);
     void getters_and_setters(const class_view_model& vm);
     void member_variables(const class_view_model& vm);
     void equality(const class_view_model& vm);
-    void to_stream();
+    void to_stream(const class_view_model& vm);
     void swap_and_assignment(const class_view_model& vm);
 
 public:
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_class_declaration.cpp b/projects/generator/src/backends/cpp/formatters/cpp_class_declaration.cpp
index 25a4b80..3513362 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_class_declaration.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_class_declaration.cpp
@@ -77,6 +77,15 @@ void cpp_class_declaration::complete_constructor(const class_view_model& vm) {
     utility_.blank_line();
 }
 
+void cpp_class_declaration::destructor(const class_view_model& vm) {
+    // need to define a destructor for derived classes due to strange
+    // clang errors
+    if (!vm.is_parent() && !vm.parents().empty()) {
+        stream_ << indenter_ << "virtual ~" << vm.name()
+                << "() noexcept { }" << std::endl;
+    }
+}
+
 void cpp_class_declaration::compiler_generated_constuctors(const class_view_model& vm) {
     utility_.public_access_specifier();
 
@@ -85,10 +94,17 @@ void cpp_class_declaration::compiler_generated_constuctors(const class_view_mode
 
     stream_ << indenter_ << vm.name() << "(const " << vm.name()
             << "&) = default;" << std::endl
-            << indenter_ << "~" << vm.name() << "() = default;" << std::endl
             << indenter_ << vm.name() << "(" << vm.name() << "&&) = default;"
             << std::endl;
 
+    if (vm.is_parent()) {
+        stream_ << indenter_ << "virtual ~" << vm.name()
+                << "() noexcept = default;" << std::endl;
+    } else if (vm.parents().empty()) {
+        stream_ << indenter_ << "~" << vm.name() << "() = default;"
+                << std::endl;
+    }
+
     if (vm.properties().empty()) {
         stream_ << indenter_ << vm.name() << "& operator=(const " << vm.name()
                 << "&) = default;" << std::endl;
@@ -175,10 +191,20 @@ void cpp_class_declaration::equality(const class_view_model& vm) {
     utility_.blank_line();
 }
 
-void cpp_class_declaration::to_stream() {
+void cpp_class_declaration::to_stream(const class_view_model& vm) {
+    if (!vm.is_parent() && vm.parents().empty())
+        return;
+
     utility_.public_access_specifier();
-    stream_ << indenter_ << "void to_stream(std::ostream& stream) const;"
-            << std::endl;
+    if (vm.is_parent()) {
+        stream_ << indenter_
+                << "virtual void to_stream(std::ostream& stream) const;"
+                << std::endl;
+    } else {
+        stream_ << indenter_
+                << "void to_stream(std::ostream& stream) const override;"
+                << std::endl;
+    }
     utility_.blank_line();
 }
 
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_class_implementation.cpp b/projects/generator/src/backends/cpp/formatters/cpp_class_implementation.cpp
index e4e7b25..f001fe4 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_class_implementation.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_class_implementation.cpp
@@ -19,14 +19,15 @@
  *
  */
 #include <ostream>
+#include <sstream>
 #include "dogen/generator/backends/cpp/formatters/cpp_class_implementation.hpp"
 
 namespace {
 
 // FIXME: until we add support to indenter.
 const std::string special_indent("       ");
-const std::string jsonify_using("using dogen::utility::streaming::jsonify;");
 const std::string type("__type__");
+const std::string std_string("std::string");
 const std::string inserter("<< ");
 const std::string space_inserter(" << ");
 const std::string open_bracket(" {");
@@ -114,25 +115,28 @@ void cpp_class_implementation::complete_constructor(const class_view_model& vm)
 }
 
 void cpp_class_implementation::to_stream(const class_view_model& vm) {
+    if (!vm.is_parent() || vm.parents().empty())
+        return;
+
     stream_ << "void " << vm.name()
             << "::to_stream(std::ostream& stream) const ";
 
     utility_.open_scope();
     {
         cpp_positive_indenter_scope s(indenter_);
-
         if (vm.has_boolean_properties()) {
-            stream_ << indenter_ << "boost::io::ios_flags_saver ifs(stream);"
+            stream_ << indenter_
+                    << "boost::io::ios_flags_saver ifs(stream);"
+                    << std::endl;
+            stream_ << indenter_ << "stream << std::boolalpha;"
                     << std::endl;
-            stream_ << indenter_ << "stream << std::boolalpha;" << std::endl;
             utility_.blank_line();
         }
 
-        stream_ << indenter_ << jsonify_using << std::endl;
         utility_.blank_line();
 
         stream_ << indenter_ << "stream " << inserter
-                << utility_.quote(open_bracket)
+                << utility_.quote(" { ")
                 << std::endl;
 
         stream_ << indenter_ << special_indent << inserter
@@ -140,19 +144,40 @@ void cpp_class_implementation::to_stream(const class_view_model& vm) {
                 << space_inserter
                 << utility_.quote(utility_.quote_escaped(vm.name()));
 
+        // FIXME: find a valid JSON representation of inheritance
+        for (const auto p : vm.parents()) {
+            stream_ << indenter_ << p.name() << "::to_stream(stream);"
+                    << std::endl;
+        }
+
         for (const auto p : vm.properties()) {
             stream_ << space_inserter << utility_.quote(comma) << std::endl;
 
             stream_ << indenter_ << special_indent << inserter
-                    << utility_.quote(utility_.quote_escaped(p.name())
-                        + colon) << space_inserter
-                    << "jsonify(" << utility_.as_member_variable(p.name())
-                    << ")";
+                    << utility_.quote(utility_.quote_escaped(p.name()) + colon)
+                    << space_inserter;
+
+            std::ostringstream ss;
+            ss << "value." << utility_.as_member_variable(p.name());
+            if (p.is_primitive())
+                stream_ << ss.str();
+            else if (p.type() == std_string)
+                stream_ << utility_.quote(ss.str());
+            else {
+                stream_ << utility_.quote(" { ") << space_inserter
+                        << ss.str() << space_inserter
+                        << utility_.quote(" } ");
+            }
         }
         stream_ << std::endl;
         stream_ << indenter_ << special_indent << inserter
                 << utility_.quote(close_bracket) << semi_colon << std::endl;
+        stream_ << indenter_ << "return(stream);" << std::endl;
     }
+    stream_ << std::endl;
+    stream_ << indenter_ << special_indent << inserter
+            << utility_.quote(close_bracket) << semi_colon << std::endl;
+
     utility_.close_scope();
     utility_.blank_line();
 }
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_domain_class_declaration.cpp b/projects/generator/src/backends/cpp/formatters/cpp_domain_class_declaration.cpp
index eaa7d5f..3892999 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_domain_class_declaration.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_domain_class_declaration.cpp
@@ -36,6 +36,7 @@ cpp_domain_class_declaration(std::ostream& stream,
 void cpp_domain_class_declaration::
 hand_crafted_constructors(const class_view_model& vm) {
     default_constructor(vm);
+    destructor(vm);
     if (!disable_complete_constructor_)
         complete_constructor(vm);
 }
@@ -48,7 +49,7 @@ void cpp_domain_class_declaration::format(const class_view_model& vm) {
         hand_crafted_constructors(vm);
         friends(vm);
         if (!disable_io_)
-            to_stream();
+            to_stream(vm);
         getters_and_setters(vm);
         equality(vm);
         swap_and_assignment(vm);
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_domain_implementation.cpp b/projects/generator/src/backends/cpp/formatters/cpp_domain_implementation.cpp
index 115e661..a4f3842 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_domain_implementation.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_domain_implementation.cpp
@@ -38,9 +38,6 @@ const bool is_system(true);
 const bool is_user(false);
 const std::string ostream("ostream");
 const std::string state_saver("boost/io/ios_state.hpp");
-const std::string jsonify_include("dogen/utility/io/jsonify_io.hpp");
-const std::string jsonify_using("using dogen::utility::streaming::jsonify;");
-const std::string type("__type__");
 const std::string inserter("<< ");
 const std::string space_inserter(" << ");
 const std::string open_bracket(" {");
@@ -141,7 +138,6 @@ void domain_implementation::format(const file_view_model& vm) {
         system_dependencies.push_back(state_saver);
 
     auto user_dependencies(vm.user_dependencies());
-    user_dependencies.push_back(jsonify_include);
 
     cpp_includes includes(stream_);
     includes.format(system_dependencies, is_system);
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_io_implementation.cpp b/projects/generator/src/backends/cpp/formatters/cpp_io_implementation.cpp
index 43a0382..d4f3762 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_io_implementation.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_io_implementation.cpp
@@ -19,6 +19,7 @@
  *
  */
 #include <ostream>
+#include <sstream>
 #include "dogen/generator/generation_failure.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_io_implementation.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_qualified_name.hpp"
@@ -34,7 +35,18 @@ namespace {
 
 const bool is_system(true);
 const bool is_user(false);
+const std::string std_string("std::string");
 const std::string ostream("ostream");
+const std::string inserter("<< ");
+const std::string open_bracket(" {");
+const std::string close_bracket(" }");
+const std::string special_indent("       ");
+const std::string space_inserter(" << ");
+const std::string type("__type__");
+const std::string colon(": ");
+const std::string semi_colon(";");
+const std::string space(" ");
+const std::string comma(", ");
 
 const std::string missing_class_view_model(
     "File view model must contain a class view model");
@@ -84,8 +96,54 @@ void io_implementation::format(const file_view_model& vm) {
         stream_ << cvm.name() << " value) ";
         utility_.open_scope();
 
-        stream_ << indenter_ << "value.to_stream(stream);" << std::endl
-                << indenter_ << "return(stream);" << std::endl;
+        if (cvm.is_parent() || !cvm.parents().empty()) {
+            stream_ << indenter_ << "value.to_stream(stream);" << std::endl
+                    << indenter_ << "return(stream);" << std::endl;
+        } else {
+            if (cvm.has_boolean_properties()) {
+                stream_ << indenter_
+                        << "boost::io::ios_flags_saver ifs(stream);"
+                        << std::endl;
+                stream_ << indenter_ << "stream << std::boolalpha;"
+                        << std::endl;
+                utility_.blank_line();
+            }
+
+            utility_.blank_line();
+
+            stream_ << indenter_ << "stream " << inserter
+                    << utility_.quote(" { ")
+                    << std::endl;
+
+            stream_ << indenter_ << special_indent << inserter
+                    << utility_.quote(utility_.quote_escaped(type) + colon)
+                    << space_inserter
+                    << utility_.quote(utility_.quote_escaped(cvm.name()));
+
+            for (const auto p : cvm.properties()) {
+                stream_ << space_inserter << utility_.quote(comma) << std::endl;
+
+                stream_ << indenter_ << special_indent << inserter
+                        << utility_.quote(utility_.quote_escaped(p.name())
+                            + colon) << space_inserter;
+
+                std::ostringstream ss;
+                ss << "value." << utility_.as_getter(p.name());
+                if (p.is_primitive())
+                    stream_ << ss.str();
+                else if (p.type() == std_string)
+                    stream_ << utility_.quote(ss.str());
+                else {
+                    stream_ << utility_.quote(" { ") << space_inserter
+                            << ss.str() << space_inserter
+                            << utility_.quote(" } ");
+                }
+            }
+            stream_ << std::endl;
+            stream_ << indenter_ << special_indent << inserter
+                    << utility_.quote(close_bracket) << semi_colon << std::endl;
+            stream_ << indenter_ << "return(stream);" << std::endl;
+        }
     }
     utility_.close_scope();
     utility_.blank_line();
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_key_class_declaration.cpp b/projects/generator/src/backends/cpp/formatters/cpp_key_class_declaration.cpp
index c209658..9a90918 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_key_class_declaration.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_key_class_declaration.cpp
@@ -37,6 +37,7 @@ cpp_key_class_declaration(std::ostream& stream,
 void cpp_key_class_declaration::
 hand_crafted_constructors(const class_view_model& vm) {
     default_constructor(vm);
+    destructor(vm);
     if (!disable_complete_constructor_)
         complete_constructor(vm);
 }
@@ -59,7 +60,7 @@ void cpp_key_class_declaration::format(const class_view_model& vm) {
         hand_crafted_constructors(vm);
         friends(vm);
         if (!disable_io_)
-            to_stream();
+            to_stream(vm);
         to_unversioned_key();
         getters_and_setters(vm);
         equality(vm);
