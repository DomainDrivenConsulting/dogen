diff --git a/data/library/csharp.system.collections.generic.json b/data/library/csharp.system.collections.generic.json
new file mode 100644
index 000000000..8c4c945d0
--- /dev/null
+++ b/data/library/csharp.system.collections.generic.json
@@ -0,0 +1,69 @@
+{
+  "model_name": "System.Collections.Generic",
+  "documentation": "Basic generic collection types.",
+  "annotation": {
+    "yarn.language": "csharp",
+    "yarn.is_proxy_model": true
+  },
+  "elements": [
+    {
+      "name": {
+        "simple_name": "IEnumerable"
+      },
+      "meta_type": "object",
+      "annotation": {
+        "yarn.type_parameters.count": 1,
+        "quilt.csharp.aspect.requires_static_reference_equals": true,
+        "quilt.csharp.helper.family": "Enumerable"
+      }
+    },
+    {
+      "name": {
+        "simple_name": "ICollection"
+      },
+      "parents": [
+        {
+          "simple_name": "IEnumerable"
+        }
+      ],
+      "meta_type": "object",
+      "annotation": {
+        "yarn.type_parameters.count": 1,
+        "quilt.csharp.aspect.requires_static_reference_equals": true,
+        "quilt.csharp.helper.family": "Enumerable"
+      }
+    },
+    {
+      "name": {
+        "simple_name": "IList"
+      },
+      "parents": [
+        {
+          "simple_name": "ICollection"
+        }
+      ],
+      "meta_type": "object",
+      "annotation": {
+        "yarn.type_parameters.count": 1,
+        "quilt.csharp.aspect.requires_static_reference_equals": true,
+        "quilt.csharp.helper.family": "Enumerable"
+      }
+    },
+    {
+      "name": {
+        "simple_name": "List"
+      },
+      "parents": [
+        {
+          "simple_name": "ICollection"
+        }
+      ],
+      "meta_type": "object",
+      "annotation": {
+        "yarn.type_parameters.count": 1,
+        "quilt.csharp.aspect.requires_static_reference_equals": true,
+        "quilt.csharp.helper.family": "Enumerable"
+      }
+    }
+  ]
+}
diff --git a/doc/agile/sprint_backlog_95.org b/doc/agile/sprint_backlog_95.org
index 0e958bba0..f0a4da977 100644
--- a/doc/agile/sprint_backlog_95.org
+++ b/doc/agile/sprint_backlog_95.org
@@ -12,26 +12,27 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2017-01-07 Sat 15:36]
+#+CAPTION: Clock summary at [2017-01-07 Sat 21:14]
 | <75>                                                                        |         |       |      |       |
 | Headline                                                                    | Time    |       |      |     % |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| *Total time*                                                                | *39:08* |       |      | 100.0 |
+| *Total time*                                                                | *40:24* |       |      | 100.0 |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| Stories                                                                     | 39:08   |       |      | 100.0 |
-| Active                                                                      |         | 39:08 |      | 100.0 |
-| STARTED Sprint and product backlog grooming                                 |         |       | 0:35 |   1.5 |
+| Stories                                                                     | 40:24   |       |      | 100.0 |
+| Active                                                                      |         | 40:24 |      | 100.0 |
+| STARTED Sprint and product backlog grooming                                 |         |       | 0:35 |   1.4 |
 | COMPLETED Edit release notes for previous sprint                            |         |       | 0:57 |   2.4 |
-| COMPLETED Consider supporting multiple inheritance on non-proxy models      |         |       | 3:24 |   8.7 |
-| COMPLETED Add basic validation infrastructure                               |         |       | 8:40 |  22.1 |
+| COMPLETED Consider supporting multiple inheritance on non-proxy models      |         |       | 3:24 |   8.4 |
+| COMPLETED Add basic validation infrastructure                               |         |       | 8:40 |  21.5 |
 | COMPLETED Fix borked windows build                                          |         |       | 0:26 |   1.1 |
-| COMPLETED Clean up enumerator implementation                                |         |       | 1:05 |   2.8 |
-| COMPLETED Measure validation slowdown                                       |         |       | 6:38 |  17.0 |
-| COMPLETED Parsing should support dot notation                               |         |       | 2:54 |   7.4 |
-| COMPLETED Add internal object dumper resolution                             |         |       | 4:51 |  12.4 |
-| COMPLETED Analysis for changes required in order to support containers      |         |       | 3:15 |   8.3 |
-| COMPLETED Add support for object based container types in C#                |         |       | 5:48 |  14.8 |
-| STARTED Add support for generic parents in yarn                             |         |       | 0:35 |   1.5 |
+| COMPLETED Clean up enumerator implementation                                |         |       | 1:05 |   2.7 |
+| COMPLETED Measure validation slowdown                                       |         |       | 6:38 |  16.4 |
+| COMPLETED Parsing should support dot notation                               |         |       | 2:54 |   7.2 |
+| COMPLETED Analysis for changes required in order to support containers      |         |       | 3:15 |   8.0 |
+| COMPLETED Add support for object based container types in C#                |         |       | 5:48 |  14.4 |
+| STARTED Add support for generic parents in yarn                             |         |       | 0:35 |   1.4 |
+| STARTED Add internal object dumper resolution                               |         |       | 4:51 |  12.0 |
+| STARTED Add support for generic container types to C#                       |         |       | 1:16 |   3.1 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -393,35 +394,6 @@ Notes:
   name via file name (name builder) c) external module path via
   meta-data (name builder).
 
-*** COMPLETED Add internal object dumper resolution                   :story:
-    CLOSED: [2017-01-06 Fri 12:55]
-    CLOCK: [2017-01-06 Fri 11:10]--[2017-01-06 Fri 12:55] =>  1:45
-    CLOCK: [2017-01-05 Thu 17:38]--[2017-01-05 Thu 18:01] =>  0:23
-    CLOCK: [2017-01-05 Thu 14:54]--[2017-01-05 Thu 17:37] =>  2:43
-
-We should try to resolve an object to a local dumper, if one exists;
-for all model types and primitives. Add a registrar for local dumpers.
-
-: using System;
-: using System.Collections.Generic;
-:
-: namespace Dogen.TestModels.CSharpModel
-: {
-:     static public class DynamicDumperRegistrar
-:     {
-:         public interface IDynamicDumper
-:         {
-:             void Dump(AssistantDumper assistant, object value);
-:         }
-:
-:         static private IDictionary<Type, IDynamicDumper> _dumpers = new Dictionary<Type, IDynamicDumper>();
-:
-:         static void RegisterDumper(Type type, IDynamicDumper dumper)
-:         {
-:         }
-:     }
-: }
-
 *** COMPLETED Analysis for changes required in order to support containers :story:
     CLOSED: [2017-01-07 Sat 13:43]
     CLOCK: [2017-01-05 Thu 10:05]--[2017-01-05 Thu 12:22] =>  2:17
@@ -684,7 +656,37 @@ not be considered.
 We should attempt to implement generic collections with the existing
 yarn infrastructure first and see where/if it breaks.
 
-*** Add support for generic container types to C#                     :story:
+*** STARTED Add internal object dumper resolution                     :story:
+    CLOCK: [2017-01-06 Fri 11:10]--[2017-01-06 Fri 12:55] =>  1:45
+    CLOCK: [2017-01-05 Thu 17:38]--[2017-01-05 Thu 18:01] =>  0:23
+    CLOCK: [2017-01-05 Thu 14:54]--[2017-01-05 Thu 17:37] =>  2:43
+
+We should try to resolve an object to a local dumper, if one exists;
+for all model types and primitives. Add a registrar for local dumpers.
+
+: using System;
+: using System.Collections.Generic;
+:
+: namespace Dogen.TestModels.CSharpModel
+: {
+:     static public class DynamicDumperRegistrar
+:     {
+:         public interface IDynamicDumper
+:         {
+:             void Dump(AssistantDumper assistant, object value);
+:         }
+:
+:         static private IDictionary<Type, IDynamicDumper> _dumpers = new Dictionary<Type, IDynamicDumper>();
+:
+:         static void RegisterDumper(Type type, IDynamicDumper dumper)
+:         {
+:         }
+:     }
+: }
+
+*** STARTED Add support for generic container types to C#             :story:
+    CLOCK: [2017-01-07 Sat 20:43]--[2017-01-07 Sat 21:08] =>  0:25
+    CLOCK: [2017-01-07 Sat 18:05]--[2017-01-07 Sat 18:56] =>  0:51
 
 We should add all major container types and tests for them.
 
@@ -699,6 +701,18 @@ We should add all major container types and tests for them.
 : ConcurrentDictionary<TKey, TValue>
 : KeyedCollection<TKey, TItem>
 
+Notes:
+
+- we need a way to determine if we are using a helper, the assistant
+  or a sequence generator directly.
+- the difference in implementation between C++ and C# is that we
+  always call the helpers in C++, and the decision on whether to call
+  another helper or to use the class generator is made within the
+  helper. Helpers already contain all the information required to make
+  this decision (helper descriptor etc). In C# we are trying to decide
+  whether to call the assistant, or the class sequence generator or
+  the helper.
+
 *** Add support for boxed types                                       :story:
 
 At present we support built-in types such as =int= but not
diff --git a/projects/input_models/quilt.csharp.dia b/projects/input_models/quilt.csharp.dia
index ceb4437fc..46963c90d 100644
--- a/projects/input_models/quilt.csharp.dia
+++ b/projects/input_models/quilt.csharp.dia
@@ -4942,13 +4942,13 @@
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O43">
       <dia:attribute name="obj_pos">
-        <dia:point val="-6,-64"/>
+        <dia:point val="-9,-64"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-6.05,-64.05;14.955,-60.35"/>
+        <dia:rectangle val="-9.05,-64.05;11.955,-60.35"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-6,-64"/>
+        <dia:point val="-9,-64"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="20.905000000000001"/>
@@ -5320,7 +5320,7 @@
         <dia:point val="7,-51"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="4.4025,-60.45;7.75,-50.2"/>
+        <dia:rectangle val="1.4025,-60.45;7.75,-50.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -5328,8 +5328,8 @@
       <dia:attribute name="orth_points">
         <dia:point val="7,-51"/>
         <dia:point val="7,-56"/>
-        <dia:point val="4.4525,-56"/>
-        <dia:point val="4.4525,-60.4"/>
+        <dia:point val="1.4525,-56"/>
+        <dia:point val="1.4525,-60.4"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -5389,17 +5389,17 @@
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="4.4525,-64.0498"/>
+        <dia:point val="1.4525,-64.0498"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-6.05,-73.65;5.2025,-63.2498"/>
+        <dia:rectangle val="-6.05,-73.65;2.2025,-63.2498"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="4.4525,-64.0498"/>
-        <dia:point val="4.4525,-69"/>
+        <dia:point val="1.4525,-64.0498"/>
+        <dia:point val="1.4525,-69"/>
         <dia:point val="-6,-69"/>
         <dia:point val="-6,-73.6"/>
       </dia:attribute>
@@ -6116,13 +6116,13 @@
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O50">
       <dia:attribute name="obj_pos">
-        <dia:point val="4,-35"/>
+        <dia:point val="0,-35"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="3.95,-35.05;14.0325,-31.95"/>
+        <dia:rectangle val="-0.05,-35.05;10.0325,-31.95"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="4,-35"/>
+        <dia:point val="0,-35"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="9.9824999999999999"/>
@@ -7371,17 +7371,17 @@
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="29.7625,-35"/>
+        <dia:point val="17,-35"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="24.525,-45.05;30.5125,-34.2"/>
+        <dia:rectangle val="16.25,-45.05;24.775,-34.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="29.7625,-35"/>
-        <dia:point val="29.7625,-40"/>
+        <dia:point val="17,-35"/>
+        <dia:point val="17,-40"/>
         <dia:point val="24.575,-40"/>
         <dia:point val="24.575,-45"/>
       </dia:attribute>
@@ -7400,7 +7400,7 @@
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O49" connection="1"/>
+        <dia:connection handle="0" to="O49" connection="0"/>
         <dia:connection handle="1" to="O41" connection="6"/>
       </dia:connections>
       <dia:childnode parent="O40"/>
@@ -7443,19 +7443,19 @@
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="17,-35"/>
+        <dia:point val="29.7625,-29.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="8.94125,-40.75;17.75,-34.2"/>
+        <dia:rectangle val="4.94125,-32.05;30.5125,-24.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="17,-35"/>
-        <dia:point val="17,-40"/>
-        <dia:point val="8.99125,-40"/>
-        <dia:point val="8.99125,-35"/>
+        <dia:point val="29.7625,-29.8"/>
+        <dia:point val="29.7625,-25"/>
+        <dia:point val="4.99125,-25"/>
+        <dia:point val="4.99125,-32"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -7472,8 +7472,8 @@
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O49" connection="0"/>
-        <dia:connection handle="1" to="O50" connection="1"/>
+        <dia:connection handle="0" to="O49" connection="6"/>
+        <dia:connection handle="1" to="O50" connection="6"/>
       </dia:connections>
       <dia:childnode parent="O40"/>
     </dia:object>
diff --git a/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.cpp b/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.cpp
new file mode 100644
index 000000000..652f237d6
--- /dev/null
+++ b/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.cpp
@@ -0,0 +1,77 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/quilt.csharp/types/formatters/io/enumerable_helper.hpp"
+#include "dogen/quilt.csharp/types/formattables/helper_properties.hpp"
+#include "dogen/quilt.csharp/types/formatters/io/traits.hpp"
+#include "dogen/quilt.csharp/types/formatters/assistant.hpp"
+#include "dogen/formatters/types/csharp/scoped_namespace_formatter.hpp"
+
+namespace dogen {
+namespace quilt {
+namespace csharp {
+namespace formatters {
+namespace io {
+
+std::string enumerable_helper::formatter_name() const {
+    static auto r(std::string("<") + traits::facet() + std::string(">") +
+        std::string("<") + helper_name() + std::string(">"));
+    return r;
+}
+
+std::string enumerable_helper::family() const {
+    static std::string r("Enumerable");
+    return r;
+}
+
+std::list<std::string>
+enumerable_helper::owning_formatters() const {
+    static auto r(std::list<std::string> {
+        traits::class_archetype()
+    });
+    return r;
+}
+
+std::list<std::string>
+enumerable_helper::owning_facets() const {
+    static auto r(std::list<std::string> {
+        traits::facet()
+    });
+    return r;
+}
+
+std::string enumerable_helper::helper_name() const {
+    static std::string r("enumerable_helper");
+    return r;
+}
+
+void enumerable_helper::
+format(assistant& a, const formattables::helper_properties& hp) const {
+    const auto d(hp.current());
+    const auto qn(d.name_tree_qualified());
+a.stream() << "        /// <summary>" << std::endl;
+a.stream() << "        /// </summary>" << std::endl;
+a.stream() << "        static private bool NearlyEqual(" << qn << " lhs, " << qn << " rhs)" << std::endl;
+a.stream() << "        {" << std::endl;
+a.stream() << "            " << qn << " epsilon = Math.Max(Math.Abs(lhs), Math.Abs(rhs)) * " << qn << ".Epsilon;" << std::endl;
+a.stream() << "            return Math.Abs(lhs - rhs) <= epsilon;" << std::endl;
+a.stream() << "        }" << std::endl;
+}
+} } } } }
diff --git a/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.stitch b/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.stitch
new file mode 100644
index 000000000..ea9723a4d
--- /dev/null
+++ b/projects/quilt.csharp/src/types/formatters/io/enumerable_helper.stitch
@@ -0,0 +1,28 @@
+<#@ annotations.profile=dogen.stitch #>
+<#@ stitch.containing_namespaces=dogen::quilt::csharp::formatters::io #>
+<#@ stitch.inclusion_dependency="dogen/formatters/types/csharp/scoped_namespace_formatter.hpp" #>
+<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/assistant.hpp" #>
+<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/io/traits.hpp" #>
+<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formattables/helper_properties.hpp" #>
+<#@ stitch.inclusion_dependency="dogen/quilt.csharp/types/formatters/io/enumerable_helper.hpp" #>
+<#@ stitch.wale.template=csharp_helper_formatter_implementation.wale #>
+<#@ stitch.wale.kvp.helper.family=Enumerable #>
+<#@ stitch.wale.kvp.class.simple_name=enumerable_helper #>
+<#$ stitch.wale.template_instantiation_result #>
+<#+
+
+void enumerable_helper::
+format(assistant& a, const formattables::helper_properties& hp) const {
+    const auto d(hp.current());
+    const auto qn(d.name_tree_qualified());
+#>
+        /// <summary>
+        /// </summary>
+        static private bool NearlyEqual(<#= qn #> lhs, <#= qn #> rhs)
+        {
+            <#= qn #> epsilon = Math.Max(Math.Abs(lhs), Math.Abs(rhs)) * <#= qn #>.Epsilon;
+            return Math.Abs(lhs - rhs) <= epsilon;
+        }
+<#+
+}
+#>
diff --git a/projects/quilt.csharp/src/types/formatters/io/initializer.cpp b/projects/quilt.csharp/src/types/formatters/io/initializer.cpp
index 6e6798119..bbe3c9325 100644
--- a/projects/quilt.csharp/src/types/formatters/io/initializer.cpp
+++ b/projects/quilt.csharp/src/types/formatters/io/initializer.cpp
@@ -19,6 +19,7 @@
  *
  */
 #include "dogen/quilt.csharp/types/formatters/registrar.hpp"
+#include "dogen/quilt.csharp/types/formatters/io/enumerable_helper.hpp"
 #include "dogen/quilt.csharp/types/formatters/io/class_formatter.hpp"
 #include "dogen/quilt.csharp/types/formatters/io/enum_formatter.hpp"
 #include "dogen/quilt.csharp/types/formatters/io/assistant_formatter.hpp"
@@ -34,6 +35,7 @@ void initializer::initialize(registrar& rg) {
     register_formatter<class_formatter>(rg);
     register_formatter<enum_formatter>(rg);
     register_formatter<assistant_formatter>(rg);
+    register_formatter_helper<enumerable_helper>(rg);
 }
 
 } } } } }
diff --git a/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj b/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
index 9cdec7098..484b2676b 100644
--- a/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
+++ b/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
@@ -30,6 +30,7 @@
     <Reference Include="System" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Dumpers\AllGenericCollectionsDumper.cs" />
     <Compile Include="Dumpers\AllObjectCollectionsDumper.cs" />
     <Compile Include="Dumpers\AssistantDumper.cs" />
     <Compile Include="Dumpers\AssociationDumper.cs" />
@@ -71,6 +72,7 @@
     <Compile Include="Dumpers\PrimitiveBuiltinsDumper.cs" />
     <Compile Include="Dumpers\SecondChildWithoutMembersDumper.cs" />
     <Compile Include="Dumpers\ThirdChildWithMembersDumper.cs" />
+    <Compile Include="SequenceGenerators\AllGenericCollectionsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AllObjectCollectionsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AssistantSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AssociationSequenceGenerator.cs" />
@@ -112,6 +114,7 @@
     <Compile Include="SequenceGenerators\PrimitiveBuiltinsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\SecondChildWithoutMembersSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\ThirdChildWithMembersSequenceGenerator.cs" />
+    <Compile Include="Types\AllGenericCollections.cs" />
     <Compile Include="Types\AllObjectCollections.cs" />
     <Compile Include="Types\Association.cs" />
     <Compile Include="Types\Base.cs" />
diff --git a/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs b/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs
new file mode 100644
index 000000000..1086c953e
--- /dev/null
+++ b/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs
@@ -0,0 +1,64 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    /// <summary>
+    /// Generates sequences of AllGenericCollections.
+    /// </summary>
+    public static class AllGenericCollectionsDumper
+    {
+        static internal void Dump(AssistantDumper assistant, AllGenericCollections value, bool withSeparator = false)
+        {
+            assistant.IncrementDepth();
+            if (assistant.MaximumDepthExceeded())
+                return;
+
+            assistant.AddStartObject();
+            assistant.AddType("Dogen.TestModels.CSharpModel.AllGenericCollections", true/*withSeparator*/);
+            if (value == null)
+            {
+                assistant.Add("data", "<null>");
+                assistant.AddEndObject();
+                return;
+            }
+
+            assistant.AddKey("data");
+            assistant.AddPairSeparator();
+            assistant.AddStartObject();
+            assistant.AddKey("Prop0");
+            assistant.AddPairSeparator();
+            System.Collections.Generic.ListDumper.Dump(assistant, value.Prop0);
+            assistant.AddEndObject(); // data
+            assistant.AddEndObject(); // main object
+            assistant.HandleMemberSeparator(withSeparator);
+
+            assistant.DecrementDepth();
+        }
+
+        public static string Dump(AllGenericCollections value)
+        {
+            var assistant = new AssistantDumper();
+            Dump(assistant, value);
+            return assistant.ToString();
+        }
+    }
+}
diff --git a/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs b/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs
new file mode 100644
index 000000000..604459eb1
--- /dev/null
+++ b/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs
@@ -0,0 +1,131 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+using System.Collections;
+using System.Collections.Generic;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    /// <summary>
+    /// Generates sequences of AllGenericCollections.
+    /// </summary>
+    public static class AllGenericCollectionsSequenceGenerator
+    {
+        static internal List<int> CreateListInt(uint position)
+        {
+            var result = new List<int>();
+            for (uint i = 0; i < AssistantSequenceGenerator.SequenceSize; ++i)
+            {
+                result.Add(AssistantSequenceGenerator.CreateInt(position + i));
+            }
+            return result;
+        }
+
+        static internal void Populate(AllGenericCollections value, uint position)
+        {
+            value.Prop0 = CreateListInt(position + 0);
+        }
+
+        static internal AllGenericCollections Create(uint position)
+        {
+            var result = new AllGenericCollections();
+            Populate(result, position);
+            return result;
+        }
+
+        #region Enumerator
+        private class AllGenericCollectionsEnumerator : IEnumerator, IEnumerator<AllGenericCollections>, IDisposable
+        {
+            #region Properties
+            private uint _position;
+            private AllGenericCollections _current;
+            #endregion
+
+            private void PopulateCurrent()
+            {
+                _current = AllGenericCollectionsSequenceGenerator.Create(_position);
+            }
+
+            #region IDisposable
+            public void Dispose()
+            {
+            }
+            #endregion
+
+            #region IEnumerator implementation
+            public bool MoveNext()
+            {
+                ++_position;
+                PopulateCurrent();
+                return true;
+            }
+
+            public void Reset()
+            {
+                _position = 0;
+                PopulateCurrent();
+            }
+
+            public object Current {
+                get
+                {
+                    return _current;
+                }
+            }
+
+            AllGenericCollections IEnumerator<AllGenericCollections>.Current
+            {
+                get
+                {
+                    return _current;
+                }
+            }
+            #endregion
+
+            public AllGenericCollectionsEnumerator()
+            {
+                PopulateCurrent();
+            }
+        }
+        #endregion
+
+        #region Enumerable
+        private class AllGenericCollectionsEnumerable : IEnumerable, IEnumerable<AllGenericCollections>
+        {
+            #region IEnumerable implementation
+            public IEnumerator GetEnumerator()
+            {
+                return new AllGenericCollectionsEnumerator();
+            }
+
+            IEnumerator<AllGenericCollections> IEnumerable<AllGenericCollections>.GetEnumerator()
+            {
+                return new AllGenericCollectionsEnumerator();
+            }
+            #endregion
+        }
+        #endregion
+
+        static public IEnumerable<AllGenericCollections> Sequence()
+        {
+            return new AllGenericCollectionsEnumerable();
+        }
+    }
+}
diff --git a/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs b/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
index 6cff0b104..a0eca9c32 100644
--- a/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
+++ b/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
@@ -28,7 +28,7 @@ namespace Dogen.TestModels.CSharpModel
     /// </summary>
     static class AssistantSequenceGenerator
     {
-        private const int SequenceSize = 10;
+        public const int SequenceSize = 10;
 
         public static object CreateObject(uint position)
         {
diff --git a/projects/test_models/CSharpModel/Types/AllGenericCollections.cs b/projects/test_models/CSharpModel/Types/AllGenericCollections.cs
new file mode 100644
index 000000000..c23a47b4c
--- /dev/null
+++ b/projects/test_models/CSharpModel/Types/AllGenericCollections.cs
@@ -0,0 +1,82 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    public sealed class AllGenericCollections
+    {
+        #region Properties
+        public System.Collections.Generic.List<int> Prop0 { get; set; }
+        #endregion
+
+        #region Constructors
+        public AllGenericCollections() { }
+        public AllGenericCollections(System.Collections.Generic.List<int> prop0)
+        {
+            Prop0 = prop0;
+        }
+        #endregion
+
+        #region Equality
+        public override bool Equals(object obj)
+        {
+            if (ReferenceEquals(null, obj)) return false;
+            if (ReferenceEquals(this, obj)) return true;
+            if (obj.GetType() != GetType()) return false;
+
+            var value = obj as AllGenericCollections;
+            if (value == null) return false;
+
+            return
+                Prop0 != null && value.Prop0 != null &&
+                Prop0.Equals(value.Prop0);
+        }
+
+        public static bool operator ==(AllGenericCollections lhs, AllGenericCollections rhs)
+        {
+            if (Object.ReferenceEquals(lhs, rhs))
+                return true;
+
+            return !Object.ReferenceEquals(null, lhs) && lhs.Equals(rhs);
+        }
+
+        public static bool operator !=(AllGenericCollections lhs, AllGenericCollections rhs)
+        {
+            return !(lhs == rhs);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked
+            {
+                // Choose large primes to avoid hashing collisions
+                const int HashingBase = (int) 2166136261;
+                const int HashingMultiplier = 16777619;
+
+                int hash = HashingBase;
+                hash = (hash * HashingMultiplier) ^
+                    (!object.ReferenceEquals(null, Prop0) ? Prop0.GetHashCode() : 0);
+                return hash;
+            }
+        }
+        #endregion
+    }
+}
diff --git a/test_data/yarn.dia/input/CSharpModel.dia b/test_data/yarn.dia/input/CSharpModel.dia
index 0c71d2aba..0725a5d48 100644
--- a/test_data/yarn.dia/input/CSharpModel.dia
+++ b/test_data/yarn.dia/input/CSharpModel.dia
@@ -7212,5 +7212,139 @@ this is a long comment#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O59">
+      <dia:attribute name="obj_pos">
+        <dia:point val="29,111"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="28.95,110.95;46.49,113.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="29,111"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="17.440000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#AllGenericCollections#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#Prop0#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#System.Collections.Generic.List&lt;int&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
