diff --git a/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj b/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
index 9cdec7098..484b2676b 100644
--- a/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
+++ b/projects/test_models/CSharpModel/Dogen.TestModels.CSharpModel.csproj
@@ -30,6 +30,7 @@
     <Reference Include="System" />
   </ItemGroup>
   <ItemGroup>
+    <Compile Include="Dumpers\AllGenericCollectionsDumper.cs" />
     <Compile Include="Dumpers\AllObjectCollectionsDumper.cs" />
     <Compile Include="Dumpers\AssistantDumper.cs" />
     <Compile Include="Dumpers\AssociationDumper.cs" />
@@ -71,6 +72,7 @@
     <Compile Include="Dumpers\PrimitiveBuiltinsDumper.cs" />
     <Compile Include="Dumpers\SecondChildWithoutMembersDumper.cs" />
     <Compile Include="Dumpers\ThirdChildWithMembersDumper.cs" />
+    <Compile Include="SequenceGenerators\AllGenericCollectionsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AllObjectCollectionsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AssistantSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\AssociationSequenceGenerator.cs" />
@@ -112,6 +114,7 @@
     <Compile Include="SequenceGenerators\PrimitiveBuiltinsSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\SecondChildWithoutMembersSequenceGenerator.cs" />
     <Compile Include="SequenceGenerators\ThirdChildWithMembersSequenceGenerator.cs" />
+    <Compile Include="Types\AllGenericCollections.cs" />
     <Compile Include="Types\AllObjectCollections.cs" />
     <Compile Include="Types\Association.cs" />
     <Compile Include="Types\Base.cs" />
diff --git a/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs b/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs
new file mode 100644
index 000000000..1086c953e
--- /dev/null
+++ b/projects/test_models/CSharpModel/Dumpers/AllGenericCollectionsDumper.cs
@@ -0,0 +1,64 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    /// <summary>
+    /// Generates sequences of AllGenericCollections.
+    /// </summary>
+    public static class AllGenericCollectionsDumper
+    {
+        static internal void Dump(AssistantDumper assistant, AllGenericCollections value, bool withSeparator = false)
+        {
+            assistant.IncrementDepth();
+            if (assistant.MaximumDepthExceeded())
+                return;
+
+            assistant.AddStartObject();
+            assistant.AddType("Dogen.TestModels.CSharpModel.AllGenericCollections", true/*withSeparator*/);
+            if (value == null)
+            {
+                assistant.Add("data", "<null>");
+                assistant.AddEndObject();
+                return;
+            }
+
+            assistant.AddKey("data");
+            assistant.AddPairSeparator();
+            assistant.AddStartObject();
+            assistant.AddKey("Prop0");
+            assistant.AddPairSeparator();
+            System.Collections.Generic.ListDumper.Dump(assistant, value.Prop0);
+            assistant.AddEndObject(); // data
+            assistant.AddEndObject(); // main object
+            assistant.HandleMemberSeparator(withSeparator);
+
+            assistant.DecrementDepth();
+        }
+
+        public static string Dump(AllGenericCollections value)
+        {
+            var assistant = new AssistantDumper();
+            Dump(assistant, value);
+            return assistant.ToString();
+        }
+    }
+}
diff --git a/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs b/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs
new file mode 100644
index 000000000..604459eb1
--- /dev/null
+++ b/projects/test_models/CSharpModel/SequenceGenerators/AllGenericCollectionsSequenceGenerator.cs
@@ -0,0 +1,131 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+using System.Collections;
+using System.Collections.Generic;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    /// <summary>
+    /// Generates sequences of AllGenericCollections.
+    /// </summary>
+    public static class AllGenericCollectionsSequenceGenerator
+    {
+        static internal List<int> CreateListInt(uint position)
+        {
+            var result = new List<int>();
+            for (uint i = 0; i < AssistantSequenceGenerator.SequenceSize; ++i)
+            {
+                result.Add(AssistantSequenceGenerator.CreateInt(position + i));
+            }
+            return result;
+        }
+
+        static internal void Populate(AllGenericCollections value, uint position)
+        {
+            value.Prop0 = CreateListInt(position + 0);
+        }
+
+        static internal AllGenericCollections Create(uint position)
+        {
+            var result = new AllGenericCollections();
+            Populate(result, position);
+            return result;
+        }
+
+        #region Enumerator
+        private class AllGenericCollectionsEnumerator : IEnumerator, IEnumerator<AllGenericCollections>, IDisposable
+        {
+            #region Properties
+            private uint _position;
+            private AllGenericCollections _current;
+            #endregion
+
+            private void PopulateCurrent()
+            {
+                _current = AllGenericCollectionsSequenceGenerator.Create(_position);
+            }
+
+            #region IDisposable
+            public void Dispose()
+            {
+            }
+            #endregion
+
+            #region IEnumerator implementation
+            public bool MoveNext()
+            {
+                ++_position;
+                PopulateCurrent();
+                return true;
+            }
+
+            public void Reset()
+            {
+                _position = 0;
+                PopulateCurrent();
+            }
+
+            public object Current {
+                get
+                {
+                    return _current;
+                }
+            }
+
+            AllGenericCollections IEnumerator<AllGenericCollections>.Current
+            {
+                get
+                {
+                    return _current;
+                }
+            }
+            #endregion
+
+            public AllGenericCollectionsEnumerator()
+            {
+                PopulateCurrent();
+            }
+        }
+        #endregion
+
+        #region Enumerable
+        private class AllGenericCollectionsEnumerable : IEnumerable, IEnumerable<AllGenericCollections>
+        {
+            #region IEnumerable implementation
+            public IEnumerator GetEnumerator()
+            {
+                return new AllGenericCollectionsEnumerator();
+            }
+
+            IEnumerator<AllGenericCollections> IEnumerable<AllGenericCollections>.GetEnumerator()
+            {
+                return new AllGenericCollectionsEnumerator();
+            }
+            #endregion
+        }
+        #endregion
+
+        static public IEnumerable<AllGenericCollections> Sequence()
+        {
+            return new AllGenericCollectionsEnumerable();
+        }
+    }
+}
diff --git a/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs b/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
index 6cff0b104..a0eca9c32 100644
--- a/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
+++ b/projects/test_models/CSharpModel/SequenceGenerators/AssistantSequenceGenerator.cs
@@ -28,7 +28,7 @@ namespace Dogen.TestModels.CSharpModel
     /// </summary>
     static class AssistantSequenceGenerator
     {
-        private const int SequenceSize = 10;
+        public const int SequenceSize = 10;
 
         public static object CreateObject(uint position)
         {
diff --git a/projects/test_models/CSharpModel/Types/AllGenericCollections.cs b/projects/test_models/CSharpModel/Types/AllGenericCollections.cs
new file mode 100644
index 000000000..c23a47b4c
--- /dev/null
+++ b/projects/test_models/CSharpModel/Types/AllGenericCollections.cs
@@ -0,0 +1,82 @@
+// -*- mode: csharp; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+//
+// Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+//
+// This program is free software; you can redistribute it and/or modify
+// it under the terms of the GNU General Public License as published by
+// the Free Software Foundation; either version 3 of the License, or
+// (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+// GNU General Public License for more details.
+//
+// You should have received a copy of the GNU General Public License
+// along with this program; if not, write to the Free Software
+// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+// MA 02110-1301, USA.
+//
+using System;
+
+namespace Dogen.TestModels.CSharpModel
+{
+    public sealed class AllGenericCollections
+    {
+        #region Properties
+        public System.Collections.Generic.List<int> Prop0 { get; set; }
+        #endregion
+
+        #region Constructors
+        public AllGenericCollections() { }
+        public AllGenericCollections(System.Collections.Generic.List<int> prop0)
+        {
+            Prop0 = prop0;
+        }
+        #endregion
+
+        #region Equality
+        public override bool Equals(object obj)
+        {
+            if (ReferenceEquals(null, obj)) return false;
+            if (ReferenceEquals(this, obj)) return true;
+            if (obj.GetType() != GetType()) return false;
+
+            var value = obj as AllGenericCollections;
+            if (value == null) return false;
+
+            return
+                Prop0 != null && value.Prop0 != null &&
+                Prop0.Equals(value.Prop0);
+        }
+
+        public static bool operator ==(AllGenericCollections lhs, AllGenericCollections rhs)
+        {
+            if (Object.ReferenceEquals(lhs, rhs))
+                return true;
+
+            return !Object.ReferenceEquals(null, lhs) && lhs.Equals(rhs);
+        }
+
+        public static bool operator !=(AllGenericCollections lhs, AllGenericCollections rhs)
+        {
+            return !(lhs == rhs);
+        }
+
+        public override int GetHashCode()
+        {
+            unchecked
+            {
+                // Choose large primes to avoid hashing collisions
+                const int HashingBase = (int) 2166136261;
+                const int HashingMultiplier = 16777619;
+
+                int hash = HashingBase;
+                hash = (hash * HashingMultiplier) ^
+                    (!object.ReferenceEquals(null, Prop0) ? Prop0.GetHashCode() : 0);
+                return hash;
+            }
+        }
+        #endregion
+    }
+}
diff --git a/test_data/yarn.dia/input/CSharpModel.dia b/test_data/yarn.dia/input/CSharpModel.dia
index 0c71d2aba..0725a5d48 100644
--- a/test_data/yarn.dia/input/CSharpModel.dia
+++ b/test_data/yarn.dia/input/CSharpModel.dia
@@ -7212,5 +7212,139 @@ this is a long comment#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O59">
+      <dia:attribute name="obj_pos">
+        <dia:point val="29,111"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="28.95,110.95;46.49,113.85"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="29,111"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="17.440000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#AllGenericCollections#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#Prop0#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#System.Collections.Generic.List&lt;int&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
