diff --git a/doc/agile/sprint_backlog_85.org b/doc/agile/sprint_backlog_85.org
index d35ef6e..86e9046 100644
--- a/doc/agile/sprint_backlog_85.org
+++ b/doc/agile/sprint_backlog_85.org
@@ -344,7 +344,7 @@ this.
 
 At present we are not setting is fluent on yarn properties. Fix this.
 
-*** COMPLETED Implement class header types in terms of =yarn::object= :story:
+*** COMPLETED Implement type' class header in terms of =yarn::object= :story:
     CLOSED: [2016-07-28 Thu 08:10]
     CLOCK: [2016-07-28 Thu 08:06]--[2016-07-28 Thu 08:10] =>  0:04
     CLOCK: [2016-07-28 Thu 07:57]--[2016-07-28 Thu 08:05] =>  0:08
@@ -362,7 +362,8 @@ At present we are not setting is fluent on yarn properties. Fix this.
     CLOCK: [2016-07-23 Sat 21:47]--[2016-07-23 Sat 21:54] =>  0:07
     CLOCK: [2016-07-23 Sat 15:10]--[2016-07-23 Sat 15:27] =>  0:17
 
-Time to have a go at moving the type's class templates to yarn types.
+Time to have a go at moving the type's class header stitch template
+from class info to yarn types.
 
 - we need to enable some side-by-side infrastructure so we can
   refactor the class info formatters one at the time, without breaking
@@ -376,6 +377,11 @@ Time to have a go at moving the type's class templates to yarn types.
 - "is primitive" in helper is the same as "is simple type". update
   helper to match. Remove primitive id generation.
 
+*** STARTED Implement types' class implementation in terms of =yarn::object= :story:
+
+Move type's class implementation stitch template from class info to
+yarn object.
+
 *** Element properties includes non-target types                      :story:
 
 We seem to be generating a lot of element properties and formatter
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter.hpp
index 46d9a6d..ceb4638 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <string>
-#include "dogen/quilt.cpp/types/formatters/class_formatter_interface.hpp"
+#include "dogen/quilt.cpp/types/formatters/new_class_formatter_interface.hpp"
 
 namespace dogen {
 namespace quilt {
@@ -37,7 +37,7 @@ namespace types {
 /**
  * @brief Creates the C++ domain representation for a class.
  */
-class class_implementation_formatter final : public class_formatter_interface {
+class class_implementation_formatter final : public new_class_formatter_interface {
 public:
     class_implementation_formatter() = default;
     class_implementation_formatter(
@@ -65,7 +65,7 @@ public:
         properties::registrar& rg) const override;
 
     dogen::formatters::file format(const context& ctx,
-        const properties::class_info& c) const override;
+        const yarn::object& o) const override;
 };
 
 } } } } }
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter_stitch.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter_stitch.hpp
index b439fb2..07b1e34 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter_stitch.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/types/class_implementation_formatter_stitch.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
-#include "dogen/quilt.cpp/types/properties/class_info.hpp"
+#include "dogen/yarn/types/object.hpp"
 #include "dogen/quilt.cpp/types/formatters/assistant.hpp"
 
 namespace dogen {
@@ -35,8 +35,8 @@ namespace cpp {
 namespace formatters {
 namespace types {
 
-dogen::formatters::file class_implementation_formatter_stitch(
-    assistant& a, const properties::class_info& fd);
+dogen::formatters::file
+class_implementation_formatter_stitch(assistant& a, const yarn::object& o);
 
 } } } } }
 
diff --git a/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.cpp b/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.cpp
index 70d75bc..f5b5f2c 100644
--- a/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.cpp
+++ b/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.cpp
@@ -134,9 +134,9 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const context& ctx, const properties::class_info& c) const {
-    assistant a(ctx, ownership_hierarchy(), file_type(), c.id());
-    const auto r(class_implementation_formatter_stitch(a, c));
+format(const context& ctx, const yarn::object& o) const {
+    assistant a(ctx, ownership_hierarchy(), file_type(), o.id());
+    const auto r(class_implementation_formatter_stitch(a, o));
     return r;
 }
 
diff --git a/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.stitch b/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.stitch
index 7e90af0..4098de7 100644
--- a/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/types/class_implementation_formatter.stitch
@@ -9,36 +9,39 @@
 <#+
 
 dogen::formatters::file class_implementation_formatter_stitch(
-    assistant& a, const properties::class_info& c) {
+    assistant& a, const yarn::object& o) {
 
     {
+        const auto sn(o.name().simple());
+        const auto qn(a.get_qualified_name(o.name()));
         auto sbf(a.make_scoped_boilerplate_formatter());
         a.add_helper_methods();
 
         {
-            auto snf(a.make_scoped_namespace_formatter(c.namespaces()));
+            const auto ns(a.make_namespaces(o.name()));
+            auto snf(a.make_scoped_namespace_formatter(ns));
 
             /*
              * Default constructor.
              */
-            if (c.requires_manual_default_constructor()) {
+            if (a.requires_manual_default_constructor()) {
 #>
 
-<#= c.name() #>::<#= c.name() #>()
+<#= sn #>::<#= sn #>()
 <#+
                 // FIXME: this was just too hard to hack with a sequence.
                 // FIXME: indentation is all off too.
                 std::ostringstream ss;
                 bool is_first(true);
-                for (const auto p : c.properties()) {
-                    if (!p.type().is_primitive() && !p.type().is_enumeration())
+                for (const auto attr : o.all_attributes()) {
+                    if (!attr.parsed_type().is_current_simple_type())
                         continue;
 
                     if (!is_first)
                         ss << "," << std::endl << "      ";
 
-                    ss << a.make_member_variable_name(p)
-                       << "(static_cast<" << p.type().complete_name()
+                    ss << a.make_member_variable_name(attr)
+                       << "(static_cast<" << a.get_qualified_name(attr.parsed_type())
                        << ">(0))";
 
                     is_first = false;
@@ -53,17 +56,17 @@ dogen::formatters::file class_implementation_formatter_stitch(
             /*
              * Move constructor.
              */
-            if (c.requires_manual_move_constructor()) {
+            if (a.requires_manual_move_constructor()) {
 #>
 
-<#= c.name() #>::<#= c.name() #>(<#= c.name() #>&& rhs)
+<#= sn #>::<#= sn #>(<#= sn #>&& rhs)
 <#+
-                unsigned int size(c.parents().size() + c.properties().size());
+                unsigned int size(o.parents().size() + o.all_attributes().size());
 
                 dogen::formatters::sequence_formatter sf(size);
                 sf.prefix_configuration().first(": ").not_first("  ");
                 sf.postfix_configuration().last(" { }");
-                for (const auto p : c.parents()) {
+                for (const auto p : o.parents()) {
 #>
     <#= sf.prefix() #><#= p.qualified_name() #>(
         std::forward<<#= p.qualified_name() #>>(rhs))<#= sf.postfix() #>
