diff --git a/diagrams/cpp.dia b/diagrams/cpp.dia
index b9df8c9..bbc9836 100644
--- a/diagrams/cpp.dia
+++ b/diagrams/cpp.dia
@@ -550,13 +550,13 @@ components a facet has, which we choose to call @e aspects.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O4">
       <dia:attribute name="obj_pos">
-        <dia:point val="28,101"/>
+        <dia:point val="24.4167,80"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="27.95,100.95;53.575,119.05"/>
+        <dia:rectangle val="24.3667,79.95;49.9917,98.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="28,101"/>
+        <dia:point val="24.4167,80"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="25.524999999999999"/>
@@ -1335,13 +1335,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O6">
       <dia:attribute name="obj_pos">
-        <dia:point val="72,87"/>
+        <dia:point val="68.4167,66"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="71.95,86.95;87.95,90.65"/>
+        <dia:rectangle val="68.3667,65.95;84.3667,69.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="72,87"/>
+        <dia:point val="68.4167,66"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="15.9"/>
@@ -1492,13 +1492,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O7">
       <dia:attribute name="obj_pos">
-        <dia:point val="68,101"/>
+        <dia:point val="64.4167,80"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="67.95,100.95;78.56,104.65"/>
+        <dia:rectangle val="64.3667,79.95;74.9767,83.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="68,101"/>
+        <dia:point val="64.4167,80"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.51"/>
@@ -1662,19 +1662,19 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="79.95,90.6"/>
+        <dia:point val="76.3667,69.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="73.205,89.85;80.7,101.8"/>
+        <dia:rectangle val="69.6217,68.85;77.1167,80.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="79.95,90.6"/>
-        <dia:point val="79.95,97"/>
-        <dia:point val="73.255,97"/>
-        <dia:point val="73.255,101"/>
+        <dia:point val="76.3667,69.6"/>
+        <dia:point val="76.3667,76"/>
+        <dia:point val="69.6717,76"/>
+        <dia:point val="69.6717,80"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -1697,13 +1697,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O9">
       <dia:attribute name="obj_pos">
-        <dia:point val="90,95"/>
+        <dia:point val="86.4167,74"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="89.95,94.95;97.1175,97.25"/>
+        <dia:rectangle val="86.3667,73.95;93.5342,76.25"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="90,95"/>
+        <dia:point val="86.4167,74"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="7.0674999999999999"/>
@@ -1807,13 +1807,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O10">
       <dia:attribute name="obj_pos">
-        <dia:point val="56,47"/>
+        <dia:point val="57,47"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="55.95,46.95;71.565,54.65"/>
+        <dia:rectangle val="56.95,46.95;72.565,54.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="56,47"/>
+        <dia:point val="57,47"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="15.515000000000001"/>
@@ -1825,7 +1825,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:string>#file_info#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#Documentable#</dia:string>
+        <dia:string>#visitable, Nameable, Documentable#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
         <dia:string>#Represents a file containing C++ source code.#</dia:string>
@@ -2026,16 +2026,16 @@ descend from it. Names are in identifiable name format.#</dia:string>
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#entity#</dia:string>
+            <dia:string>#namespaces#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#boost::shared_ptr&lt;cpp::entity&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::string&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#Entity contained in this file, if any.#</dia:string>
+            <dia:string>#List of all namespaces containing the type. Last namespace is the target.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -2056,13 +2056,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O11">
       <dia:attribute name="obj_pos">
-        <dia:point val="7.9167,145"/>
+        <dia:point val="4.33337,124"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="7.8667,144.95;23.8667,164.65"/>
+        <dia:rectangle val="4.28337,123.95;20.2834,143.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="7.9167,145"/>
+        <dia:point val="4.33337,124"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="15.9"/>
@@ -2652,13 +2652,13 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O12">
       <dia:attribute name="obj_pos">
-        <dia:point val="40.9167,145"/>
+        <dia:point val="33,107"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="40.8667,144.95;55.7117,149.45"/>
+        <dia:rectangle val="32.95,106.95;47.795,111.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="40.9167,145"/>
+        <dia:point val="33,107"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="14.744999999999999"/>
@@ -2809,13 +2809,13 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O13">
       <dia:attribute name="obj_pos">
-        <dia:point val="6.9167,128"/>
+        <dia:point val="-6,107"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="6.8667,127.95;32.4917,134.05"/>
+        <dia:rectangle val="-6.05,106.95;19.575,113.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="6.9167,128"/>
+        <dia:point val="-6,107"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="25.524999999999999"/>
@@ -3048,19 +3048,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="28,119"/>
+        <dia:point val="24.4167,98"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="19.6292,118.25;28.75,128.75"/>
+        <dia:rectangle val="6.7125,97.25;25.1667,107.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="28,119"/>
-        <dia:point val="28,122"/>
-        <dia:point val="19.6792,122"/>
-        <dia:point val="19.6792,127.95"/>
+        <dia:point val="24.4167,98"/>
+        <dia:point val="24.4167,103"/>
+        <dia:point val="6.7625,103"/>
+        <dia:point val="6.7625,107"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3078,7 +3078,7 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O4" connection="5"/>
-        <dia:connection handle="1" to="O13" connection="16"/>
+        <dia:connection handle="1" to="O13" connection="1"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Association" version="2" id="O15">
@@ -3119,19 +3119,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="48.2892,145"/>
+        <dia:point val="40.3725,107"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="32.3917,133.95;49.0392,145.8"/>
+        <dia:rectangle val="37.1292,97.95;41.1225,107.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="48.2892,145"/>
-        <dia:point val="48.2892,140"/>
-        <dia:point val="32.4417,140"/>
-        <dia:point val="32.4417,134"/>
+        <dia:point val="40.3725,107"/>
+        <dia:point val="40.3725,103"/>
+        <dia:point val="37.1792,103"/>
+        <dia:point val="37.1792,98"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3149,7 +3149,7 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O12" connection="1"/>
-        <dia:connection handle="1" to="O13" connection="7"/>
+        <dia:connection handle="1" to="O4" connection="6"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Association" version="2" id="O16">
@@ -3190,19 +3190,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="6.9167,134"/>
+        <dia:point val="6.7625,113"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="6.1667,133.25;16.0667,145.8"/>
+        <dia:rectangle val="6.0125,112.25;12.4834,124.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="6.9167,134"/>
-        <dia:point val="6.9167,140"/>
-        <dia:point val="15.8667,140"/>
-        <dia:point val="15.8667,145"/>
+        <dia:point val="6.7625,113"/>
+        <dia:point val="6.7625,119"/>
+        <dia:point val="12.2834,119"/>
+        <dia:point val="12.2834,124"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -3219,19 +3219,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O13" connection="5"/>
+        <dia:connection handle="0" to="O13" connection="6"/>
         <dia:connection handle="1" to="O11" connection="1"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O17">
       <dia:attribute name="obj_pos">
-        <dia:point val="99.9167,87"/>
+        <dia:point val="96.3334,66"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="99.8667,86.95;117.022,90.65"/>
+        <dia:rectangle val="96.2834,65.95;113.438,69.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="99.9167,87"/>
+        <dia:point val="96.3334,66"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="17.055"/>
@@ -3608,13 +3608,13 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O19">
       <dia:attribute name="obj_pos">
-        <dia:point val="26,87"/>
+        <dia:point val="14,66"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="25.95,86.95;33.7825,89.25"/>
+        <dia:rectangle val="13.95,65.95;21.7825,68.25"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="26,87"/>
+        <dia:point val="14,66"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="7.7324999999999999"/>
@@ -3718,13 +3718,13 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O20">
       <dia:attribute name="obj_pos">
-        <dia:point val="49,87"/>
+        <dia:point val="45.4167,66"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="48.95,86.95;61.1,89.85"/>
+        <dia:rectangle val="45.3667,65.95;57.5167,68.85"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="49,87"/>
+        <dia:point val="45.4167,66"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="12.050000000000001"/>
@@ -4268,7 +4268,7 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:point val="112,47"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="12.620000000000001"/>
+        <dia:real val="12.619999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -4476,16 +4476,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="26,32.2"/>
+        <dia:point val="26,37.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="14.9375,31.45;26.75,47.8"/>
+        <dia:rectangle val="14.9375,37.05;26.75,47.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="26,32.2"/>
+        <dia:point val="26,37.8"/>
         <dia:point val="26,40"/>
         <dia:point val="14.9875,40"/>
         <dia:point val="14.9875,47"/>
@@ -4547,17 +4547,17 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="36.4525,32.2"/>
+        <dia:point val="37.415,37.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="35.7025,31.45;39.1875,47.8"/>
+        <dia:rectangle val="36.665,37.05;39.1875,47.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="36.4525,32.2"/>
-        <dia:point val="36.4525,40"/>
+        <dia:point val="37.415,37.8"/>
+        <dia:point val="37.415,40"/>
         <dia:point val="38.9875,40"/>
         <dia:point val="38.9875,47"/>
       </dia:attribute>
@@ -4618,19 +4618,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="46.905,32.2"/>
+        <dia:point val="48.83,37.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="46.155,31.45;56.2,47.8"/>
+        <dia:rectangle val="48.08,37.05;57.2,47.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="46.905,32.2"/>
-        <dia:point val="46.905,40"/>
-        <dia:point val="56,40"/>
-        <dia:point val="56,47"/>
+        <dia:point val="48.83,37.8"/>
+        <dia:point val="48.83,40"/>
+        <dia:point val="57,40"/>
+        <dia:point val="57,47"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -4653,13 +4653,13 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O29">
       <dia:attribute name="obj_pos">
-        <dia:point val="58.9167,128"/>
+        <dia:point val="55.3334,107"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="58.8667,127.95;65.6267,134.05"/>
+        <dia:rectangle val="55.2834,106.95;62.0434,113.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="58.9167,128"/>
+        <dia:point val="55.3334,107"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="6.6600000000000001"/>
@@ -4892,19 +4892,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="53.525,119"/>
+        <dia:point val="49.9417,98"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="52.775,118.25;62.4467,128.8"/>
+        <dia:rectangle val="49.1917,97.25;58.8634,107.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="53.525,119"/>
-        <dia:point val="53.525,122"/>
-        <dia:point val="62.2467,122"/>
-        <dia:point val="62.2467,128"/>
+        <dia:point val="49.9417,98"/>
+        <dia:point val="49.9417,103"/>
+        <dia:point val="58.6634,103"/>
+        <dia:point val="58.6634,107"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -4927,16 +4927,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O31">
       <dia:attribute name="obj_pos">
-        <dia:point val="92,47"/>
+        <dia:point val="91.8333,43.25"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="91.95,46.95;100.635,62.65"/>
+        <dia:rectangle val="91.7833,43.2;100.468,58.9"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="92,47"/>
+        <dia:point val="91.8333,43.25"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="8.5849999999999991"/>
+        <dia:real val="8.5850000000000009"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="15.600000000000003"/>
@@ -5442,17 +5442,17 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="96.2925,47"/>
+        <dia:point val="96.1258,43.25"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="91.43,32.25;96.4925,47.8"/>
+        <dia:rectangle val="91.43,32.25;96.3258,44.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="96.2925,47"/>
-        <dia:point val="96.2925,40"/>
+        <dia:point val="96.1258,43.25"/>
+        <dia:point val="96.1258,40"/>
         <dia:point val="92.18,40"/>
         <dia:point val="92.18,33"/>
       </dia:attribute>
@@ -5480,16 +5480,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:point val="26,27"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="25.95,26.95;46.955,32.25"/>
+        <dia:rectangle val="25.95,26.95;48.88,37.85"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="26,27"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="20.905000000000001"/>
+        <dia:real val="22.829999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="5.2000000000000011"/>
+        <dia:real val="10.800000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
         <dia:string>#project#</dia:string>
@@ -5581,16 +5581,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
       <dia:attribute name="attributes">
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#files#</dia:string>
+            <dia:string>#odb_options#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;file_info&gt;#</dia:string>
+            <dia:string>#odb_options_info#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#All C++ files, interfaces and implementation.#</dia:string>
+            <dia:string>#The ODB options file.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -5604,16 +5604,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#odb_options#</dia:string>
+            <dia:string>#src_cmakelists#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#odb_options_info#</dia:string>
+            <dia:string>#cmakelists_info#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#The ODB options file.#</dia:string>
+            <dia:string>#The CMake makefile for the source directory.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -5627,16 +5627,16 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#src_cmakelists#</dia:string>
+            <dia:string>#include_cmakelists#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#cmakelists_info#</dia:string>
+            <dia:string>#boost::optional&lt;cmakelists_info&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#The CMake makefile for the source directory.#</dia:string>
+            <dia:string>#The CMake makefile for the include directory.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -5650,16 +5650,177 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#include_cmakelists#</dia:string>
+            <dia:string>#namespaces#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#boost::optional&lt;cmakelists_info&gt;#</dia:string>
+            <dia:string>#std::list&lt;namespace_info&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#The CMake makefile for the include directory.#</dia:string>
+            <dia:string>#All namespaces.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#visitors#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;visitor_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All visitors.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#enumerations#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;enum_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All enumerations.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#classes#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;class_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All classes.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#exceptions#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;exception_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All exceptions.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#registrars#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;registrar_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All registrars.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#forward_declarations#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;forward_declaration_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#includers#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;includer_info&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -5818,28 +5979,28 @@ for Java, etc.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O35">
       <dia:attribute name="obj_pos">
-        <dia:point val="60,72"/>
+        <dia:point val="-21,87"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="59.95,71.95;74.795,75.65"/>
+        <dia:rectangle val="-21.05,86.95;-13.52,90.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="60,72"/>
+        <dia:point val="-21,87"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="14.744999999999999"/>
+        <dia:real val="7.4299999999999997"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#entity#</dia:string>
+        <dia:string>#Nameable#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#visitable, Nameable, Documentable#</dia:string>
+        <dia:string>#concept#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#Top-level entity in the model.#</dia:string>
+        <dia:string>#Represents an entity with a name.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -5922,16 +6083,18 @@ for Java, etc.#</dia:string>
       <dia:attribute name="attributes">
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#namespaces#</dia:string>
+            <dia:string>#name#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::string&gt;#</dia:string>
+            <dia:string>#std::string#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#List of all namespaces containing the type. Last namespace is the target.#</dia:string>
+            <dia:string>#Name of the entity.
+
+Must be valid according to the rules for C++ names.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -5950,198 +6113,103 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O36">
+    <dia:object type="UML - Generalization" version="1" id="O36">
       <dia:attribute name="obj_pos">
-        <dia:point val="-21,87"/>
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-21.05,86.95;-13.52,90.65"/>
+        <dia:rectangle val="17.8163,54.55;65.6075,65.9999"/>
       </dia:attribute>
-      <dia:attribute name="elem_corner">
-        <dia:point val="-21,87"/>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
       </dia:attribute>
-      <dia:attribute name="elem_width">
-        <dia:real val="7.4299999999999997"/>
+      <dia:attribute name="orth_points">
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="17.8663,61"/>
+        <dia:point val="17.8663,65.9499"/>
       </dia:attribute>
-      <dia:attribute name="elem_height">
-        <dia:real val="3.6000000000000001"/>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#Nameable#</dia:string>
+        <dia:string>##</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#concept#</dia:string>
-      </dia:attribute>
-      <dia:attribute name="comment">
-        <dia:string>#Represents an entity with a name.#</dia:string>
+        <dia:string>##</dia:string>
       </dia:attribute>
-      <dia:attribute name="abstract">
-        <dia:boolean val="false"/>
+      <dia:connections>
+        <dia:connection handle="0" to="O10" connection="6"/>
+        <dia:connection handle="1" to="O19" connection="8"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O37">
+      <dia:attribute name="obj_pos">
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
-      <dia:attribute name="suppress_attributes">
-        <dia:boolean val="false"/>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="51.3917,54.55;65.6075,66.05"/>
       </dia:attribute>
-      <dia:attribute name="suppress_operations">
-        <dia:boolean val="false"/>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
       </dia:attribute>
-      <dia:attribute name="visible_attributes">
-        <dia:boolean val="true"/>
+      <dia:attribute name="orth_points">
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="51.4417,61"/>
+        <dia:point val="51.4417,66"/>
       </dia:attribute>
-      <dia:attribute name="visible_operations">
-        <dia:boolean val="true"/>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
       </dia:attribute>
-      <dia:attribute name="visible_comments">
+      <dia:attribute name="orth_autoroute">
         <dia:boolean val="false"/>
       </dia:attribute>
-      <dia:attribute name="wrap_operations">
-        <dia:boolean val="true"/>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
       </dia:attribute>
-      <dia:attribute name="wrap_after_char">
-        <dia:int val="40"/>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
       </dia:attribute>
-      <dia:attribute name="comment_line_length">
-        <dia:int val="17"/>
-      </dia:attribute>
-      <dia:attribute name="comment_tagging">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="line_width">
-        <dia:real val="0.10000000000000001"/>
-      </dia:attribute>
-      <dia:attribute name="line_color">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="fill_color">
-        <dia:color val="#ffffff"/>
-      </dia:attribute>
-      <dia:attribute name="text_color">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="normal_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_font">
-        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
-      </dia:attribute>
-      <dia:attribute name="polymorphic_font">
-        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
-      </dia:attribute>
-      <dia:attribute name="classname_font">
-        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_classname_font">
-        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
-      </dia:attribute>
-      <dia:attribute name="comment_font">
-        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
-      </dia:attribute>
-      <dia:attribute name="normal_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="polymorphic_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="classname_font_height">
-        <dia:real val="1"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_classname_font_height">
-        <dia:real val="1"/>
-      </dia:attribute>
-      <dia:attribute name="comment_font_height">
-        <dia:real val="0.69999999999999996"/>
-      </dia:attribute>
-      <dia:attribute name="attributes">
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#name#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>#std::string#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Name of the entity.
-
-Must be valid according to the rules for C++ names.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-      </dia:attribute>
-      <dia:attribute name="operations"/>
-      <dia:attribute name="template">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="templates"/>
-    </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O37">
-      <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="29.8163,75.55;68.2225,86.9999"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="29.8663,82"/>
-        <dia:point val="29.8663,86.9499"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
-        <dia:connection handle="1" to="O19" connection="8"/>
+        <dia:connection handle="0" to="O10" connection="6"/>
+        <dia:connection handle="1" to="O20" connection="1"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O38">
       <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="54.975,75.55;68.2225,87.05"/>
+        <dia:rectangle val="63.9075,54.55;76.4167,66.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="55.025,82"/>
-        <dia:point val="55.025,87"/>
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="76.3667,61"/>
+        <dia:point val="76.3667,66"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -6164,137 +6232,25 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
-        <dia:connection handle="1" to="O20" connection="1"/>
-      </dia:connections>
-    </dia:object>
-    <dia:object type="UML - Association" version="2" id="O39">
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="direction">
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="show_direction">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="assoc_type">
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="role_a">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="multipicity_a">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="visibility_a">
-        <dia:enum val="3"/>
-      </dia:attribute>
-      <dia:attribute name="show_arrow_a">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="role_b">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="multipicity_b">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="visibility_b">
-        <dia:enum val="3"/>
-      </dia:attribute>
-      <dia:attribute name="show_arrow_b">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="obj_pos">
-        <dia:point val="63.7575,54.6"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="63.0075,53.85;67.5725,72.8"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="63.7575,54.6"/>
-        <dia:point val="63.7575,63"/>
-        <dia:point val="67.3725,63"/>
-        <dia:point val="67.3725,72"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:connections>
         <dia:connection handle="0" to="O10" connection="6"/>
-        <dia:connection handle="1" to="O35" connection="1"/>
-      </dia:connections>
-    </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O40">
-      <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="66.5225,75.55;80,87.05"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="79.95,82"/>
-        <dia:point val="79.95,87"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="stereotype">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
         <dia:connection handle="1" to="O6" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O41">
+    <dia:object type="UML - Generalization" version="1" id="O39">
       <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="66.5225,75.55;108.494,87.05"/>
+        <dia:rectangle val="63.9075,54.55;104.911,66.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="108.444,82"/>
-        <dia:point val="108.444,87"/>
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="104.861,61"/>
+        <dia:point val="104.861,66"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -6317,25 +6273,25 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
+        <dia:connection handle="0" to="O10" connection="6"/>
         <dia:connection handle="1" to="O17" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O42">
+    <dia:object type="UML - Generalization" version="1" id="O40">
       <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="66.5225,75.55;93.5837,95.05"/>
+        <dia:rectangle val="63.9075,54.55;90.0004,74.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="93.5337,82"/>
-        <dia:point val="93.5337,95"/>
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="89.9504,61"/>
+        <dia:point val="89.9504,74"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -6358,25 +6314,25 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
+        <dia:connection handle="0" to="O10" connection="6"/>
         <dia:connection handle="1" to="O9" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O43">
+    <dia:object type="UML - Generalization" version="1" id="O41">
       <dia:attribute name="obj_pos">
-        <dia:point val="67.3725,75.6"/>
+        <dia:point val="64.7575,54.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="40.7125,75.55;68.2225,101.013"/>
+        <dia:rectangle val="37.1292,54.55;65.6075,80.0129"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="67.3725,75.6"/>
-        <dia:point val="67.3725,82"/>
-        <dia:point val="40.7625,82"/>
-        <dia:point val="40.7625,100.963"/>
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="37.1792,61"/>
+        <dia:point val="37.1792,79.9629"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -6399,11 +6355,11 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O35" connection="6"/>
+        <dia:connection handle="0" to="O10" connection="6"/>
         <dia:connection handle="1" to="O4" connection="48"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O44">
+    <dia:object type="UML - Association" version="2" id="O42">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -6441,17 +6397,17 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="71.515,47"/>
+        <dia:point val="72.515,47"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="70.765,32.95;85.2,47.8"/>
+        <dia:rectangle val="71.765,32.95;85.2,47.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="71.515,47"/>
-        <dia:point val="71.515,40"/>
+        <dia:point val="72.515,47"/>
+        <dia:point val="72.515,40"/>
         <dia:point val="85,40"/>
         <dia:point val="85,33"/>
       </dia:attribute>
@@ -6474,7 +6430,7 @@ Must be valid according to the rules for C++ names.#</dia:string>
         <dia:connection handle="1" to="O21" connection="5"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O45">
+    <dia:object type="UML - Class" version="0" id="O43">
       <dia:attribute name="obj_pos">
         <dia:point val="56,27"/>
       </dia:attribute>
@@ -6645,7 +6601,7 @@ These are expected to use quotes and be on the user path.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O46">
+    <dia:object type="UML - Association" version="2" id="O44">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -6683,17 +6639,17 @@ These are expected to use quotes and be on the user path.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="63.7575,47"/>
+        <dia:point val="64.7575,47"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="63.0075,30.55;64.7275,47.8"/>
+        <dia:rectangle val="64.0075,30.55;65.5075,47.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="63.7575,47"/>
-        <dia:point val="63.7575,40"/>
+        <dia:point val="64.7575,47"/>
+        <dia:point val="64.7575,40"/>
         <dia:point val="64.5275,40"/>
         <dia:point val="64.5275,30.6"/>
       </dia:attribute>
@@ -6713,10 +6669,10 @@ These are expected to use quotes and be on the user path.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O10" connection="1"/>
-        <dia:connection handle="1" to="O45" connection="6"/>
+        <dia:connection handle="1" to="O43" connection="6"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Note" version="0" id="O47">
+    <dia:object type="UML - Note" version="0" id="O45">
       <dia:attribute name="obj_pos">
         <dia:point val="-28,26"/>
       </dia:attribute>
@@ -6730,7 +6686,7 @@ These are expected to use quotes and be on the user path.#</dia:string>
         <dia:point val="-28,26"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="30.545000000000002"/>
+        <dia:real val="30.544999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="40.100000000000001"/>
@@ -6815,5 +6771,307 @@ seems like the least bad approach.
         </dia:composite>
       </dia:attribute>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O46">
+      <dia:attribute name="obj_pos">
+        <dia:point val="18,72"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="17.95,71.95;29.75,74.25"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="18,72"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="11.699999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.1999999999999997"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#forward_declaration_info#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O47">
+      <dia:attribute name="obj_pos">
+        <dia:point val="26,67"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="25.95,66.95;32.3675,69.25"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="26,67"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="6.3174999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.1999999999999997"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#includer_info#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O48">
+      <dia:attribute name="obj_pos">
+        <dia:point val="64.7575,54.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="23.8,54.55;65.6075,72.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="23.85,61"/>
+        <dia:point val="23.85,72"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O10" connection="6"/>
+        <dia:connection handle="1" to="O46" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O49">
+      <dia:attribute name="obj_pos">
+        <dia:point val="64.7575,54.6"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="29.1088,54.55;65.6075,67.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="64.7575,54.6"/>
+        <dia:point val="64.7575,61"/>
+        <dia:point val="29.1588,61"/>
+        <dia:point val="29.1588,67"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O10" connection="6"/>
+        <dia:connection handle="1" to="O47" connection="1"/>
+      </dia:connections>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
diff --git a/doc/agile/sprint_backlog_50.org b/doc/agile/sprint_backlog_50.org
index c41da34..c810343 100644
--- a/doc/agile/sprint_backlog_50.org
+++ b/doc/agile/sprint_backlog_50.org
@@ -13,23 +13,27 @@ and running again, after a long break.
 ** Development Stories Implemented
 
 #+begin: clocktable :maxlevel 3 :scope subtree
-Clock summary at [2014-08-24 Sun 19:47]
-
-| Headline                                                | Time   |      |      |
-|---------------------------------------------------------+--------+------+------|
-| *Total time*                                            | *9:22* |      |      |
-|---------------------------------------------------------+--------+------+------|
-| Development Stories Implemented                         |        | 9:22 |      |
-| IMPLEMENTATION Sprint and product backlog grooming      |        |      | 1:15 |
-| IMPLEMENTATION Updates to the manual and readme files   |        |      | 0:38 |
-| COMPLETED Update instructions in manual for Postgres    |        |      | 0:50 |
-| COMPLETED Tidy-up test model folder structure           |        |      | 6:01 |
-| COMPLETED Review where we are with the last refactoring |        |      | 0:21 |
-| COMPLETED Check that dogen builds on C++-14             |        |      | 0:10 |
-| COMPLETED Add a build number to dogen                   |        |      | 0:07 |
+Clock summary at [2014-08-26 Tue 08:34]
+
+| Headline                                                | Time    |       |      |
+|---------------------------------------------------------+---------+-------+------|
+| *Total time*                                            | *12:29* |       |      |
+|---------------------------------------------------------+---------+-------+------|
+| Development Stories Implemented                         |         | 12:29 |      |
+| IMPLEMENTATION Sprint and product backlog grooming      |         |       | 1:26 |
+| IMPLEMENTATION Updates to the manual and readme files   |         |       | 0:38 |
+| COMPLETED Update instructions in manual for Postgres    |         |       | 0:50 |
+| COMPLETED Tidy-up test model folder structure           |         |       | 6:01 |
+| COMPLETED Review where we are with the last refactoring |         |       | 0:21 |
+| COMPLETED Check that dogen builds on C++-14             |         |       | 0:10 |
+| COMPLETED Add a build number to dogen                   |         |       | 0:07 |
+| COMPLETED Analyse formatters architecture               |         |       | 0:39 |
+| IMPLEMENTATION Merge entity with file info              |         |       | 1:10 |
+| IMPLEMENTATION Refactor types header formatter          |         |       | 1:07 |
 #+end:
 
 *** IMPLEMENTATION Sprint and product backlog grooming                 :task:
+    CLOCK: [2014-08-26 Tue 07:51]--[2014-08-26 Tue 08:02] =>  0:11
     CLOCK: [2014-08-23 Sat 11:31]--[2014-08-23 Sat 11:56] =>  0:25
     CLOCK: [2014-08-23 Sat 10:56]--[2014-08-23 Sat 11:07] =>  0:11
     CLOCK: [2014-08-22 Fri 12:39]--[2014-08-22 Fri 12:49] =>  0:10
@@ -213,6 +217,137 @@ This does mean we now always rebuild because the build number keeps on
 changing. We should try this approach for a bit and see how well it
 works.
 
+*** COMPLETED Analyse formatters architecture                         :story:
+    CLOSED: [2014-08-25 Mon 13:24]
+    CLOCK: [2014-08-25 Mon 12:44]--[2014-08-25 Mon 13:23] =>  0:39
+
+At present we do a lot of formatter related decisions during the SML
+to C++ conversion. In reality, we should allow the formatters model to
+do these.
+
+- move generation of includer files into SML to C++
+  transformation. its in workflow at the moment.
+- every formatter model needs to have a formatter registrar on the
+  basis of type.
+- we need to create interfaces for each of the formatters,
+  e.g. =visitor_formatter=, etc. each of these takes in formatter
+  settings and the type to format. they return an optional file
+  (e.g. nothing to do given the settings). or we could have a "can
+  format" method that needs to be called first.
+- there is a registration function that the formatters use to
+  register with the registrar.
+- cpp model will no longer use composition for file infos, but just
+  plain inheritance.
+- main workflow in cpp formatters simply goes through every type,
+  dispatches it to a concrete type, then loops through all the
+  registered formatters for that type. If a file is generated, it is
+  added to the file list.
+- sample names: =types_class_main_header_file_formatter=,
+  =types_enumeration_main_header_file_formatter=, etc.
+- cpp projects should be split on type again. this way we avoid type
+  dispatching, visitors etc.
+- file name and includes must be computed using a pair of strings:
+  (facet, aspect). these are supplied at run time via the registration
+  of the formatters. Each entity in the C++ model also has these pair
+  of strings. Formatters register against an interface
+  (=class_formatter_interface= say) using this pair. Formatting is
+  just a case of looking for the right formatter for triplet (type,
+  facet, aspect). includes are computed dynamically using a key that
+  contains the pair (feature, aspect).
+
+These changes are very hard to do incrementally, so we will have to
+work off of a patch until we get it all to work.
+
+*** IMPLEMENTATION Merge entity with file info                        :story:
+    CLOCK: [2014-08-26 Tue 18:08]--[2014-08-26 Tue 18:55] =>  0:47
+    CLOCK: [2014-08-26 Tue 08:02]--[2014-08-26 Tue 08:34] =>  0:32
+    CLOCK: [2014-08-25 Mon 13:32]--[2014-08-25 Mon 14:10] =>  0:38
+
+As part of the formatters refactoring, we need a single top-level
+entity against which we can create formatter interfaces. In order to
+achieve that we need to remove the file info composition.
+
+We have reached the usual limitations:
+
+- if we merge file info with class info, etc. we now have to take a
+  instance of a type with half of the fields un-populated, make copies
+  of it and populate each copy with the correct values. This is very
+  smelly.
+- if we continue using composition via inheritance, we can no longer
+  distinguish the file formatter interfaces
+  (e.g. =class_formatter_interface= and so on).
+
+We have two options to solve this:
+
+- make file info a template class with the Entity as a
+  concept. Instantiate it with each of the infos (=class_info=,
+  etc.). This means we can now use the type system again in the
+  interfaces.
+- create a loser aggregation of the file details with the infos. For
+  example, we could have a map with a key of (facet, aspect, ) and a
+  value of file info. Each info is associated with one such map at the
+  project level. The formatter interface then takes the file details
+  and the info as two separate parameters.
+
+Rule: takes as an input a triplet, and returns:
+
+- the file name
+- the path to dependent files including forward declarations or not
+
+: types.main.header_file
+: types.main.implementation_file
+: types.forward_declaration.header_file
+: types.includers.header_file
+: ...
+: boost_serialization.main.header_file
+: boost_serialization.main.implementation_file
+
+
+*** IMPLEMENTATION Refactor types header formatter                    :story:
+    CLOCK: [2014-08-25 Mon 12:01]--[2014-08-25 Mon 12:40] =>  0:39
+    CLOCK: [2014-08-25 Mon 11:56]--[2014-08-25 Mon 11:57] =>  0:01
+    CLOCK: [2014-08-25 Mon 11:35]--[2014-08-25 Mon 11:43] =>  0:08
+
+Make the main types header formatters look like the =om= types
+formatter. This model was deleted around commit 10157ad.
+
+This is still not quite right. We need to drive the formatting from
+two things:
+
+- user options
+- available formatters
+
+**** IMPLEMENTATION Tidy-up =types_main_header_file_formatter=         :task:
+     CLOCK: [2014-08-25 Mon 11:57]--[2014-08-25 Mon 12:16] =>  0:19
+
+Clean up internal functions in file and add documentation.
+
+**** Make use of boilerplate                                           :task:
+
+Generate the licence, etc using boilerplate formatter.
+
+**** Copy across documentation from =om=                               :task:
+
+We did a lot of doxygen comments that are readily applicable, copy
+them across.
+
+**** Make use of indenting stream                                      :task:
+
+Remove uses of old indenter.
+
+**** Copy across =om= types formatter tests                            :task:
+
+Not sure how applicable this would be, but we may be able to scavenge
+some tests.
+
+*** C++ formatters use of =headers_for_facet_=                        :story:
+
+We seem to be creating a local variable =headers_for_facet_= in
+function =format_file_infos_activity= but not really making use of
+it. We need to investigate what was that we were trying to do here,
+the name of the variable seems to imply it should have been a member
+variable. Probably a remnant from some old refactoring.
+
 *** Move includes and header guard into entity                        :story:
 
 With this a formatter can now rely only on entities rather than
@@ -304,28 +439,6 @@ dependencies inside of the formatters.
 - remove relationships from transformer
 - remove helper models boost and std
 
-*** Refactor types header formatter                                   :story:
-
-Make the main types header formatters look like the =om= types formatter.
-
-**** Tidy-up =types_main_header_file_formatter=                        :task:
-
-Clean up internal functions in file and add documentation.
-
-**** Copy across documentation from =om=                               :task:
-
-We did a lot of doxygen comments that are readily applicable, copy
-them across.
-
-**** Make use of indenting stream                                      :task:
-
-Remove uses of old indenter.
-
-**** Copy across =om= types formatter tests                            :task:
-
-Not sure how applicable this would be, but we may be able to scavenge
-some tests.
-
 *** Add warning =-Wunused-private-field=                              :story:
 
 Seems like this warning is not part of =-Wall
diff --git a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
index 9b293e2..e78c92c 100644
--- a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
+++ b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
@@ -24,12 +24,13 @@
 #include "dogen/cpp/hash/cmakelists_info_hash.hpp"
 #include "dogen/cpp/hash/content_descriptor_hash.hpp"
 #include "dogen/cpp/hash/content_types_hash.hpp"
-#include "dogen/cpp/hash/entity_hash.hpp"
 #include "dogen/cpp/hash/enum_info_hash.hpp"
 #include "dogen/cpp/hash/enumerator_info_hash.hpp"
 #include "dogen/cpp/hash/exception_info_hash.hpp"
 #include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/file_types_hash.hpp"
+#include "dogen/cpp/hash/forward_declaration_info_hash.hpp"
+#include "dogen/cpp/hash/includer_info_hash.hpp"
 #include "dogen/cpp/hash/includes_hash.hpp"
 #include "dogen/cpp/hash/namespace_info_hash.hpp"
 #include "dogen/cpp/hash/nested_type_info_hash.hpp"
diff --git a/projects/cpp/include/dogen/cpp/hash/entity_hash.hpp b/projects/cpp/include/dogen/cpp/hash/entity_hash.hpp
deleted file mode 100644
index 6d5756a..0000000
--- a/projects/cpp/include/dogen/cpp/hash/entity_hash.hpp
+++ /dev/null
@@ -1,52 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_HASH_ENTITY_HASH_HPP
-#define DOGEN_CPP_HASH_ENTITY_HASH_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <functional>
-#include "dogen/cpp/types/entity.hpp"
-
-namespace dogen {
-namespace cpp {
-
-struct entity_hasher {
-public:
-    static std::size_t hash(const entity& v);
-};
-
-} }
-
-namespace std {
-
-template<>
-struct hash<dogen::cpp::entity> {
-public:
-    size_t operator()(const dogen::cpp::entity& v) const {
-        return dogen::cpp::entity_hasher::hash(v);
-    }
-};
-
-}
-#endif
diff --git a/projects/cpp/include/dogen/cpp/hash/forward_declaration_info_hash.hpp b/projects/cpp/include/dogen/cpp/hash/forward_declaration_info_hash.hpp
new file mode 100644
index 0000000..75217b2
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/hash/forward_declaration_info_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_HASH_FORWARD_DECLARATION_INFO_HASH_HPP
+#define DOGEN_CPP_HASH_FORWARD_DECLARATION_INFO_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+struct forward_declaration_info_hasher {
+public:
+    static std::size_t hash(const forward_declaration_info& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+struct hash<dogen::cpp::forward_declaration_info> {
+public:
+    size_t operator()(const dogen::cpp::forward_declaration_info& v) const {
+        return dogen::cpp::forward_declaration_info_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/cpp/include/dogen/cpp/hash/includer_info_hash.hpp b/projects/cpp/include/dogen/cpp/hash/includer_info_hash.hpp
new file mode 100644
index 0000000..69814c7
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/hash/includer_info_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_HASH_INCLUDER_INFO_HASH_HPP
+#define DOGEN_CPP_HASH_INCLUDER_INFO_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/cpp/types/includer_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+struct includer_info_hasher {
+public:
+    static std::size_t hash(const includer_info& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+struct hash<dogen::cpp::includer_info> {
+public:
+    size_t operator()(const dogen::cpp::includer_info& v) const {
+        return dogen::cpp::includer_info_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/cpp/include/dogen/cpp/io/all_io.hpp b/projects/cpp/include/dogen/cpp/io/all_io.hpp
index 4a6941d..9f86012 100644
--- a/projects/cpp/include/dogen/cpp/io/all_io.hpp
+++ b/projects/cpp/include/dogen/cpp/io/all_io.hpp
@@ -24,12 +24,13 @@
 #include "dogen/cpp/io/cmakelists_info_io.hpp"
 #include "dogen/cpp/io/content_descriptor_io.hpp"
 #include "dogen/cpp/io/content_types_io.hpp"
-#include "dogen/cpp/io/entity_io.hpp"
 #include "dogen/cpp/io/enum_info_io.hpp"
 #include "dogen/cpp/io/enumerator_info_io.hpp"
 #include "dogen/cpp/io/exception_info_io.hpp"
 #include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/file_types_io.hpp"
+#include "dogen/cpp/io/forward_declaration_info_io.hpp"
+#include "dogen/cpp/io/includer_info_io.hpp"
 #include "dogen/cpp/io/includes_io.hpp"
 #include "dogen/cpp/io/namespace_info_io.hpp"
 #include "dogen/cpp/io/nested_type_info_io.hpp"
diff --git a/projects/cpp/include/dogen/cpp/io/entity_io.hpp b/projects/cpp/include/dogen/cpp/io/entity_io.hpp
deleted file mode 100644
index a4c436d..0000000
--- a/projects/cpp/include/dogen/cpp/io/entity_io.hpp
+++ /dev/null
@@ -1,40 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_IO_ENTITY_IO_HPP
-#define DOGEN_CPP_IO_ENTITY_IO_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <iosfwd>
-#include "dogen/cpp/types/entity.hpp"
-
-namespace dogen {
-namespace cpp {
-
-std::ostream&
-operator<<(std::ostream& s,
-     const dogen::cpp::entity& v);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/io/forward_declaration_info_io.hpp b/projects/cpp/include/dogen/cpp/io/forward_declaration_info_io.hpp
new file mode 100644
index 0000000..fae44cc
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/io/forward_declaration_info_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_IO_FORWARD_DECLARATION_INFO_IO_HPP
+#define DOGEN_CPP_IO_FORWARD_DECLARATION_INFO_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::cpp::forward_declaration_info& v);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/io/includer_info_io.hpp b/projects/cpp/include/dogen/cpp/io/includer_info_io.hpp
new file mode 100644
index 0000000..6ceb19b
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/io/includer_info_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_IO_INCLUDER_INFO_IO_HPP
+#define DOGEN_CPP_IO_INCLUDER_INFO_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/cpp/types/includer_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::cpp::includer_info& v);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
index 7a121a1..ccf1046 100644
--- a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
@@ -24,12 +24,13 @@
 #include "dogen/cpp/serialization/cmakelists_info_ser.hpp"
 #include "dogen/cpp/serialization/content_descriptor_ser.hpp"
 #include "dogen/cpp/serialization/content_types_ser.hpp"
-#include "dogen/cpp/serialization/entity_ser.hpp"
 #include "dogen/cpp/serialization/enum_info_ser.hpp"
 #include "dogen/cpp/serialization/enumerator_info_ser.hpp"
 #include "dogen/cpp/serialization/exception_info_ser.hpp"
 #include "dogen/cpp/serialization/file_info_ser.hpp"
 #include "dogen/cpp/serialization/file_types_ser.hpp"
+#include "dogen/cpp/serialization/forward_declaration_info_ser.hpp"
+#include "dogen/cpp/serialization/includer_info_ser.hpp"
 #include "dogen/cpp/serialization/includes_ser.hpp"
 #include "dogen/cpp/serialization/namespace_info_ser.hpp"
 #include "dogen/cpp/serialization/nested_type_info_ser.hpp"
diff --git a/projects/cpp/include/dogen/cpp/serialization/class_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/class_info_ser.hpp
index fc70a9d..83dfdc6 100644
--- a/projects/cpp/include/dogen/cpp/serialization/class_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/class_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::class_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/entity_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/entity_fwd_ser.hpp
deleted file mode 100644
index 71341c5..0000000
--- a/projects/cpp/include/dogen/cpp/serialization/entity_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_SERIALIZATION_ENTITY_FWD_SER_HPP
-#define DOGEN_CPP_SERIALIZATION_ENTITY_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/cpp/types/entity_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::cpp::entity& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::cpp::entity& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/entity_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/entity_ser.hpp
deleted file mode 100644
index 4ffa3e7..0000000
--- a/projects/cpp/include/dogen/cpp/serialization/entity_ser.hpp
+++ /dev/null
@@ -1,46 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_SERIALIZATION_ENTITY_SER_HPP
-#define DOGEN_CPP_SERIALIZATION_ENTITY_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <boost/serialization/assume_abstract.hpp>
-#include <boost/serialization/split_free.hpp>
-#include "dogen/cpp/types/entity.hpp"
-
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::entity)
-BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::cpp::entity)
-
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar, const dogen::cpp::entity& v, unsigned int version);
-
-template<typename Archive>
-void load(Archive& ar, dogen::cpp::entity& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/enum_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/enum_info_ser.hpp
index 52e2951..9e6c793 100644
--- a/projects/cpp/include/dogen/cpp/serialization/enum_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/enum_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::enum_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/exception_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/exception_info_ser.hpp
index ad86897..facef5c 100644
--- a/projects/cpp/include/dogen/cpp/serialization/exception_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/exception_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::exception_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/file_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/file_info_ser.hpp
index 8c371d4..e33d583 100644
--- a/projects/cpp/include/dogen/cpp/serialization/file_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/file_info_ser.hpp
@@ -25,10 +25,13 @@
 #pragma once
 #endif
 
+#include <boost/serialization/assume_abstract.hpp>
 #include <boost/serialization/split_free.hpp>
 #include "dogen/cpp/types/file_info.hpp"
 
 BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::file_info)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::cpp::file_info)
+
 namespace boost {
 namespace serialization {
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_fwd_ser.hpp
new file mode 100644
index 0000000..d7f1377
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_FORWARD_DECLARATION_INFO_FWD_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_FORWARD_DECLARATION_INFO_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/forward_declaration_info_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_ser.hpp
new file mode 100644
index 0000000..44f888e
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/forward_declaration_info_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_FORWARD_DECLARATION_INFO_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_FORWARD_DECLARATION_INFO_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::cpp::file_info,
+    dogen::cpp::forward_declaration_info
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::forward_declaration_info)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/includer_info_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/includer_info_fwd_ser.hpp
new file mode 100644
index 0000000..5ca0174
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/includer_info_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_INCLUDER_INFO_FWD_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_INCLUDER_INFO_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/includer_info_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/includer_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/includer_info_ser.hpp
new file mode 100644
index 0000000..0487437
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/includer_info_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_INCLUDER_INFO_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_INCLUDER_INFO_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/cpp/types/includer_info.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::cpp::file_info,
+    dogen::cpp::includer_info
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::includer_info)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/namespace_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/namespace_info_ser.hpp
index 58452bd..bfc4ef7 100644
--- a/projects/cpp/include/dogen/cpp/serialization/namespace_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/namespace_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::namespace_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/registrar_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/registrar_info_ser.hpp
index e49be00..222ed30 100644
--- a/projects/cpp/include/dogen/cpp/serialization/registrar_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/registrar_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::registrar_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/serialization/visitor_info_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/visitor_info_ser.hpp
index 87407cd..e246f83 100644
--- a/projects/cpp/include/dogen/cpp/serialization/visitor_info_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/visitor_info_ser.hpp
@@ -33,7 +33,7 @@ namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::cpp::entity,
+    dogen::cpp::file_info,
     dogen::cpp::visitor_info
 > : public mpl::true_ {};
 
diff --git a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
index d4801c5..4ed593d 100644
--- a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
+++ b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
@@ -24,12 +24,13 @@
 #include "dogen/cpp/test_data/cmakelists_info_td.hpp"
 #include "dogen/cpp/test_data/content_descriptor_td.hpp"
 #include "dogen/cpp/test_data/content_types_td.hpp"
-#include "dogen/cpp/test_data/entity_td.hpp"
 #include "dogen/cpp/test_data/enum_info_td.hpp"
 #include "dogen/cpp/test_data/enumerator_info_td.hpp"
 #include "dogen/cpp/test_data/exception_info_td.hpp"
 #include "dogen/cpp/test_data/file_info_td.hpp"
 #include "dogen/cpp/test_data/file_types_td.hpp"
+#include "dogen/cpp/test_data/forward_declaration_info_td.hpp"
+#include "dogen/cpp/test_data/includer_info_td.hpp"
 #include "dogen/cpp/test_data/includes_td.hpp"
 #include "dogen/cpp/test_data/namespace_info_td.hpp"
 #include "dogen/cpp/test_data/nested_type_info_td.hpp"
diff --git a/projects/cpp/include/dogen/cpp/test_data/entity_td.hpp b/projects/cpp/include/dogen/cpp/test_data/entity_td.hpp
deleted file mode 100644
index c9851c1..0000000
--- a/projects/cpp/include/dogen/cpp/test_data/entity_td.hpp
+++ /dev/null
@@ -1,48 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TEST_DATA_ENTITY_TD_HPP
-#define DOGEN_CPP_TEST_DATA_ENTITY_TD_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/cpp/types/entity.hpp"
-
-namespace dogen {
-namespace cpp {
-
-class entity_generator {
-public:
-    entity_generator();
-
-public:
-    typedef dogen::cpp::entity result_type;
-
-public:
-    static void populate(const unsigned int position, result_type& v);
-public:
-    static result_type* create_ptr(const unsigned int position);
-};
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/test_data/file_info_td.hpp b/projects/cpp/include/dogen/cpp/test_data/file_info_td.hpp
index 875fd10..9308ff3 100644
--- a/projects/cpp/include/dogen/cpp/test_data/file_info_td.hpp
+++ b/projects/cpp/include/dogen/cpp/test_data/file_info_td.hpp
@@ -39,11 +39,6 @@ public:
 
 public:
     static void populate(const unsigned int position, result_type& v);
-    static result_type create(const unsigned int position);
-    result_type operator()();
-
-private:
-    unsigned int position_;
 public:
     static result_type* create_ptr(const unsigned int position);
 };
diff --git a/projects/cpp/include/dogen/cpp/test_data/forward_declaration_info_td.hpp b/projects/cpp/include/dogen/cpp/test_data/forward_declaration_info_td.hpp
new file mode 100644
index 0000000..d7fb7f9
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/test_data/forward_declaration_info_td.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TEST_DATA_FORWARD_DECLARATION_INFO_TD_HPP
+#define DOGEN_CPP_TEST_DATA_FORWARD_DECLARATION_INFO_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class forward_declaration_info_generator {
+public:
+    forward_declaration_info_generator();
+
+public:
+    typedef dogen::cpp::forward_declaration_info result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/test_data/includer_info_td.hpp b/projects/cpp/include/dogen/cpp/test_data/includer_info_td.hpp
new file mode 100644
index 0000000..2dc9dc3
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/test_data/includer_info_td.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TEST_DATA_INCLUDER_INFO_TD_HPP
+#define DOGEN_CPP_TEST_DATA_INCLUDER_INFO_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/includer_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class includer_info_generator {
+public:
+    includer_info_generator();
+
+public:
+    typedef dogen::cpp::includer_info result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/all.hpp b/projects/cpp/include/dogen/cpp/types/all.hpp
index 32a00fb..76c064c 100644
--- a/projects/cpp/include/dogen/cpp/types/all.hpp
+++ b/projects/cpp/include/dogen/cpp/types/all.hpp
@@ -27,13 +27,14 @@
 #include "dogen/cpp/types/content_descriptor_factory.hpp"
 #include "dogen/cpp/types/content_types.hpp"
 #include "dogen/cpp/types/cpp.hpp"
-#include "dogen/cpp/types/entity.hpp"
-#include "dogen/cpp/types/entity_visitor.hpp"
 #include "dogen/cpp/types/enum_info.hpp"
 #include "dogen/cpp/types/enumerator_info.hpp"
 #include "dogen/cpp/types/exception_info.hpp"
 #include "dogen/cpp/types/file_info.hpp"
+#include "dogen/cpp/types/file_info_visitor.hpp"
 #include "dogen/cpp/types/file_types.hpp"
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+#include "dogen/cpp/types/includer_info.hpp"
 #include "dogen/cpp/types/includes.hpp"
 #include "dogen/cpp/types/namespace_info.hpp"
 #include "dogen/cpp/types/nested_type_info.hpp"
diff --git a/projects/cpp/include/dogen/cpp/types/class_info.hpp b/projects/cpp/include/dogen/cpp/types/class_info.hpp
index 9973a1b..6d69d24 100644
--- a/projects/cpp/include/dogen/cpp/types/class_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/class_info.hpp
@@ -32,7 +32,7 @@
 #include <utility>
 #include "dogen/cpp/serialization/class_info_fwd_ser.hpp"
 #include "dogen/cpp/types/class_types.hpp"
-#include "dogen/cpp/types/entity.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 #include "dogen/cpp/types/parent_info.hpp"
 #include "dogen/cpp/types/property_info.hpp"
 #include "dogen/sml/types/generation_types.hpp"
@@ -43,7 +43,7 @@ namespace cpp {
 /**
  * @brief Represents a C++ class.
  */
-class class_info final : public dogen::cpp::entity {
+class class_info final : public dogen::cpp::file_info {
 public:
     class_info(const class_info&) = default;
     class_info(class_info&&) = default;
@@ -57,6 +57,11 @@ public:
     class_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces,
         const std::list<dogen::cpp::property_info>& properties,
         const std::list<dogen::cpp::property_info>& all_properties,
@@ -87,19 +92,19 @@ private:
     friend void boost::serialization::load(Archive& ar, class_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -293,7 +298,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(class_info& other) noexcept;
diff --git a/projects/cpp/include/dogen/cpp/types/entity.hpp b/projects/cpp/include/dogen/cpp/types/entity.hpp
deleted file mode 100644
index d844f63..0000000
--- a/projects/cpp/include/dogen/cpp/types/entity.hpp
+++ /dev/null
@@ -1,132 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_ENTITY_HPP
-#define DOGEN_CPP_TYPES_ENTITY_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <algorithm>
-#include <iosfwd>
-#include <list>
-#include <string>
-#include "dogen/cpp/serialization/entity_fwd_ser.hpp"
-#include "dogen/cpp/types/entity_visitor.hpp"
-
-namespace dogen {
-namespace cpp {
-
-/**
- * @brief Top-level entity in the model.
- */
-class entity {
-public:
-    entity() = default;
-    entity(const entity&) = default;
-    entity(entity&&) = default;
-
-    virtual ~entity() noexcept = 0;
-
-public:
-    entity(
-        const std::string& name,
-        const std::string& documentation,
-        const std::list<std::string>& namespaces);
-
-private:
-    template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const entity& v, unsigned int version);
-
-    template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, entity& v, unsigned int version);
-
-public:
-    virtual void accept(const entity_visitor& v) const = 0;
-    virtual void accept(entity_visitor& v) const = 0;
-    virtual void accept(const entity_visitor& v) = 0;
-    virtual void accept(entity_visitor& v) = 0;
-
-public:
-    virtual void to_stream(std::ostream& s) const;
-
-public:
-    /**
-     * @brief Name of the entity.
-     *
-     * Must be valid according to the rules for C++ names.
-     */
-    /**@{*/
-    const std::string& name() const;
-    std::string& name();
-    void name(const std::string& v);
-    void name(const std::string&& v);
-    /**@}*/
-
-    /**
-     * @brief Code comments.
-     *
-     * These are expected to follow the grammar of the comment processing tools
-     * of the programming language in question, e.g. Doxygen for C++, JavaDoc
-     * for Java, etc.
-     */
-    /**@{*/
-    const std::string& documentation() const;
-    std::string& documentation();
-    void documentation(const std::string& v);
-    void documentation(const std::string&& v);
-    /**@}*/
-
-    /**
-     * @brief List of all namespaces containing the type. Last namespace is the target.
-     */
-    /**@{*/
-    const std::list<std::string>& namespaces() const;
-    std::list<std::string>& namespaces();
-    void namespaces(const std::list<std::string>& v);
-    void namespaces(const std::list<std::string>&& v);
-    /**@}*/
-
-protected:
-    bool compare(const entity& rhs) const;
-public:
-    virtual bool equals(const entity& other) const = 0;
-
-protected:
-    void swap(entity& other) noexcept;
-
-private:
-    std::string name_;
-    std::string documentation_;
-    std::list<std::string> namespaces_;
-};
-
-inline entity::~entity() noexcept { }
-
-inline bool operator==(const entity& lhs, const entity& rhs) {
-    return lhs.equals(rhs);
-}
-
-} }
-
-
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/entity_fwd.hpp b/projects/cpp/include/dogen/cpp/types/entity_fwd.hpp
deleted file mode 100644
index a13954e..0000000
--- a/projects/cpp/include/dogen/cpp/types/entity_fwd.hpp
+++ /dev/null
@@ -1,35 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_ENTITY_FWD_HPP
-#define DOGEN_CPP_TYPES_ENTITY_FWD_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-namespace dogen {
-namespace cpp {
-
-class entity;
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/entity_visitor.hpp b/projects/cpp/include/dogen/cpp/types/entity_visitor.hpp
deleted file mode 100644
index 03aab8a..0000000
--- a/projects/cpp/include/dogen/cpp/types/entity_visitor.hpp
+++ /dev/null
@@ -1,108 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_ENTITY_VISITOR_HPP
-#define DOGEN_CPP_TYPES_ENTITY_VISITOR_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/cpp/types/class_info_fwd.hpp"
-#include "dogen/cpp/types/enum_info_fwd.hpp"
-#include "dogen/cpp/types/exception_info_fwd.hpp"
-#include "dogen/cpp/types/namespace_info_fwd.hpp"
-#include "dogen/cpp/types/registrar_info_fwd.hpp"
-#include "dogen/cpp/types/visitor_info_fwd.hpp"
-
-namespace dogen {
-namespace cpp {
-
-class entity_visitor {
-public:
-    virtual ~entity_visitor() noexcept = 0;
-
-public:
-    /**
-     * @brief Accept visits for type dogen::cpp::class_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::class_info&) const { }
-    virtual void visit(const dogen::cpp::class_info&) { }
-    virtual void visit(dogen::cpp::class_info&) const { }
-    virtual void visit(dogen::cpp::class_info&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::cpp::enum_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::enum_info&) const { }
-    virtual void visit(const dogen::cpp::enum_info&) { }
-    virtual void visit(dogen::cpp::enum_info&) const { }
-    virtual void visit(dogen::cpp::enum_info&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::cpp::exception_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::exception_info&) const { }
-    virtual void visit(const dogen::cpp::exception_info&) { }
-    virtual void visit(dogen::cpp::exception_info&) const { }
-    virtual void visit(dogen::cpp::exception_info&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::cpp::registrar_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::registrar_info&) const { }
-    virtual void visit(const dogen::cpp::registrar_info&) { }
-    virtual void visit(dogen::cpp::registrar_info&) const { }
-    virtual void visit(dogen::cpp::registrar_info&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::cpp::namespace_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::namespace_info&) const { }
-    virtual void visit(const dogen::cpp::namespace_info&) { }
-    virtual void visit(dogen::cpp::namespace_info&) const { }
-    virtual void visit(dogen::cpp::namespace_info&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::cpp::visitor_info
-     */
-    /**@{*/
-    virtual void visit(const dogen::cpp::visitor_info&) const { }
-    virtual void visit(const dogen::cpp::visitor_info&) { }
-    virtual void visit(dogen::cpp::visitor_info&) const { }
-    virtual void visit(dogen::cpp::visitor_info&) { }
-    /**@}*/
-};
-
-inline entity_visitor::~entity_visitor() noexcept { }
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/enum_info.hpp b/projects/cpp/include/dogen/cpp/types/enum_info.hpp
index 643d9de..0d8009f 100644
--- a/projects/cpp/include/dogen/cpp/types/enum_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/enum_info.hpp
@@ -30,8 +30,8 @@
 #include <list>
 #include <string>
 #include "dogen/cpp/serialization/enum_info_fwd_ser.hpp"
-#include "dogen/cpp/types/entity.hpp"
 #include "dogen/cpp/types/enumerator_info.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -39,7 +39,7 @@ namespace cpp {
 /**
  * @brief Represents a C++ enum.
  */
-class enum_info final : public dogen::cpp::entity {
+class enum_info final : public dogen::cpp::file_info {
 public:
     enum_info() = default;
     enum_info(const enum_info&) = default;
@@ -51,6 +51,11 @@ public:
     enum_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces,
         const std::list<dogen::cpp::enumerator_info>& enumerators,
         const std::string& type);
@@ -63,19 +68,19 @@ private:
     friend void boost::serialization::load(Archive& ar, enum_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -110,7 +115,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(enum_info& other) noexcept;
diff --git a/projects/cpp/include/dogen/cpp/types/exception_info.hpp b/projects/cpp/include/dogen/cpp/types/exception_info.hpp
index c19ba91..4bcbb68 100644
--- a/projects/cpp/include/dogen/cpp/types/exception_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/exception_info.hpp
@@ -28,7 +28,7 @@
 #include <algorithm>
 #include <iosfwd>
 #include "dogen/cpp/serialization/exception_info_fwd_ser.hpp"
-#include "dogen/cpp/types/entity.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -36,7 +36,7 @@ namespace cpp {
 /**
  * @brief Represents a C++ exception.
  */
-class exception_info final : public dogen::cpp::entity {
+class exception_info final : public dogen::cpp::file_info {
 public:
     exception_info() = default;
     exception_info(const exception_info&) = default;
@@ -48,6 +48,11 @@ public:
     exception_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces);
 
 private:
@@ -58,19 +63,19 @@ private:
     friend void boost::serialization::load(Archive& ar, exception_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -84,7 +89,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(exception_info& other) noexcept;
diff --git a/projects/cpp/include/dogen/cpp/types/file_info.hpp b/projects/cpp/include/dogen/cpp/types/file_info.hpp
index 6974fb4..b38eec7 100644
--- a/projects/cpp/include/dogen/cpp/types/file_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/file_info.hpp
@@ -27,11 +27,12 @@
 
 #include <algorithm>
 #include <boost/filesystem/path.hpp>
-#include <boost/shared_ptr.hpp>
+#include <iosfwd>
+#include <list>
 #include <string>
 #include "dogen/cpp/serialization/file_info_fwd_ser.hpp"
 #include "dogen/cpp/types/content_descriptor.hpp"
-#include "dogen/cpp/types/entity_fwd.hpp"
+#include "dogen/cpp/types/file_info_visitor.hpp"
 #include "dogen/cpp/types/includes.hpp"
 
 namespace dogen {
@@ -40,24 +41,26 @@ namespace cpp {
 /**
  * @brief Represents a file containing C++ source code.
  */
-class file_info final {
+class file_info {
 public:
     file_info() = default;
     file_info(const file_info&) = default;
-    ~file_info() = default;
+
+    virtual ~file_info() noexcept = 0;
 
 public:
     file_info(file_info&& rhs);
 
 public:
     file_info(
+        const std::string& name,
         const std::string& documentation,
         const dogen::cpp::includes& includes,
         const dogen::cpp::content_descriptor& descriptor,
         const std::string& header_guard,
         const boost::filesystem::path& file_path,
         const boost::filesystem::path& relative_path,
-        const boost::shared_ptr<dogen::cpp::entity>& entity);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
@@ -67,6 +70,27 @@ private:
     friend void boost::serialization::load(Archive& ar, file_info& v, unsigned int version);
 
 public:
+    virtual void accept(const file_info_visitor& v) const = 0;
+    virtual void accept(file_info_visitor& v) const = 0;
+    virtual void accept(const file_info_visitor& v) = 0;
+    virtual void accept(file_info_visitor& v) = 0;
+
+public:
+    virtual void to_stream(std::ostream& s) const;
+
+public:
+    /**
+     * @brief Name of the entity.
+     *
+     * Must be valid according to the rules for C++ names.
+     */
+    /**@{*/
+    const std::string& name() const;
+    std::string& name();
+    void name(const std::string& v);
+    void name(const std::string&& v);
+    /**@}*/
+
     /**
      * @brief Code comments.
      *
@@ -132,46 +156,42 @@ public:
     /**@}*/
 
     /**
-     * @brief Entity contained in this file, if any.
+     * @brief List of all namespaces containing the type. Last namespace is the target.
      */
     /**@{*/
-    const boost::shared_ptr<dogen::cpp::entity>& entity() const;
-    boost::shared_ptr<dogen::cpp::entity>& entity();
-    void entity(const boost::shared_ptr<dogen::cpp::entity>& v);
-    void entity(const boost::shared_ptr<dogen::cpp::entity>&& v);
+    const std::list<std::string>& namespaces() const;
+    std::list<std::string>& namespaces();
+    void namespaces(const std::list<std::string>& v);
+    void namespaces(const std::list<std::string>&& v);
     /**@}*/
 
+protected:
+    bool compare(const file_info& rhs) const;
 public:
-    bool operator==(const file_info& rhs) const;
-    bool operator!=(const file_info& rhs) const {
-        return !this->operator==(rhs);
-    }
+    virtual bool equals(const file_info& other) const = 0;
 
-public:
+protected:
     void swap(file_info& other) noexcept;
-    file_info& operator=(file_info other);
 
 private:
+    std::string name_;
     std::string documentation_;
     dogen::cpp::includes includes_;
     dogen::cpp::content_descriptor descriptor_;
     std::string header_guard_;
     boost::filesystem::path file_path_;
     boost::filesystem::path relative_path_;
-    boost::shared_ptr<dogen::cpp::entity> entity_;
+    std::list<std::string> namespaces_;
 };
 
-} }
-
-namespace std {
+inline file_info::~file_info() noexcept { }
 
-template<>
-inline void swap(
-    dogen::cpp::file_info& lhs,
-    dogen::cpp::file_info& rhs) {
-    lhs.swap(rhs);
+inline bool operator==(const file_info& lhs, const file_info& rhs) {
+    return lhs.equals(rhs);
 }
 
-}
+} }
+
+
 
 #endif
diff --git a/projects/cpp/include/dogen/cpp/types/file_info_visitor.hpp b/projects/cpp/include/dogen/cpp/types/file_info_visitor.hpp
new file mode 100644
index 0000000..a9ec02e
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/file_info_visitor.hpp
@@ -0,0 +1,130 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_FILE_INFO_VISITOR_HPP
+#define DOGEN_CPP_TYPES_FILE_INFO_VISITOR_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/class_info_fwd.hpp"
+#include "dogen/cpp/types/enum_info_fwd.hpp"
+#include "dogen/cpp/types/exception_info_fwd.hpp"
+#include "dogen/cpp/types/forward_declaration_info_fwd.hpp"
+#include "dogen/cpp/types/includer_info_fwd.hpp"
+#include "dogen/cpp/types/namespace_info_fwd.hpp"
+#include "dogen/cpp/types/registrar_info_fwd.hpp"
+#include "dogen/cpp/types/visitor_info_fwd.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class file_info_visitor {
+public:
+    virtual ~file_info_visitor() noexcept = 0;
+
+public:
+    /**
+     * @brief Accept visits for type dogen::cpp::class_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::class_info&) const { }
+    virtual void visit(const dogen::cpp::class_info&) { }
+    virtual void visit(dogen::cpp::class_info&) const { }
+    virtual void visit(dogen::cpp::class_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::enum_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::enum_info&) const { }
+    virtual void visit(const dogen::cpp::enum_info&) { }
+    virtual void visit(dogen::cpp::enum_info&) const { }
+    virtual void visit(dogen::cpp::enum_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::exception_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::exception_info&) const { }
+    virtual void visit(const dogen::cpp::exception_info&) { }
+    virtual void visit(dogen::cpp::exception_info&) const { }
+    virtual void visit(dogen::cpp::exception_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::registrar_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::registrar_info&) const { }
+    virtual void visit(const dogen::cpp::registrar_info&) { }
+    virtual void visit(dogen::cpp::registrar_info&) const { }
+    virtual void visit(dogen::cpp::registrar_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::namespace_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::namespace_info&) const { }
+    virtual void visit(const dogen::cpp::namespace_info&) { }
+    virtual void visit(dogen::cpp::namespace_info&) const { }
+    virtual void visit(dogen::cpp::namespace_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::visitor_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::visitor_info&) const { }
+    virtual void visit(const dogen::cpp::visitor_info&) { }
+    virtual void visit(dogen::cpp::visitor_info&) const { }
+    virtual void visit(dogen::cpp::visitor_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::forward_declaration_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::forward_declaration_info&) const { }
+    virtual void visit(const dogen::cpp::forward_declaration_info&) { }
+    virtual void visit(dogen::cpp::forward_declaration_info&) const { }
+    virtual void visit(dogen::cpp::forward_declaration_info&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::cpp::includer_info
+     */
+    /**@{*/
+    virtual void visit(const dogen::cpp::includer_info&) const { }
+    virtual void visit(const dogen::cpp::includer_info&) { }
+    virtual void visit(dogen::cpp::includer_info&) const { }
+    virtual void visit(dogen::cpp::includer_info&) { }
+    /**@}*/
+};
+
+inline file_info_visitor::~file_info_visitor() noexcept { }
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/forward_declaration_info.hpp b/projects/cpp/include/dogen/cpp/types/forward_declaration_info.hpp
new file mode 100644
index 0000000..0bbc695
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/forward_declaration_info.hpp
@@ -0,0 +1,110 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_FORWARD_DECLARATION_INFO_HPP
+#define DOGEN_CPP_TYPES_FORWARD_DECLARATION_INFO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include <iosfwd>
+#include "dogen/cpp/serialization/forward_declaration_info_fwd_ser.hpp"
+#include "dogen/cpp/types/file_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class forward_declaration_info final : public dogen::cpp::file_info {
+public:
+    forward_declaration_info() = default;
+    forward_declaration_info(const forward_declaration_info&) = default;
+    forward_declaration_info(forward_declaration_info&&) = default;
+
+    virtual ~forward_declaration_info() noexcept { }
+
+public:
+    forward_declaration_info(
+        const std::string& name,
+        const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
+        const std::list<std::string>& namespaces);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const forward_declaration_info& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, forward_declaration_info& v, unsigned int version);
+
+public:
+    virtual void accept(const file_info_visitor& v) const override {
+        v.visit(*this);
+    }
+
+    virtual void accept(file_info_visitor& v) const override {
+        v.visit(*this);
+    }
+
+    virtual void accept(const file_info_visitor& v) override {
+        v.visit(*this);
+    }
+
+    virtual void accept(file_info_visitor& v) override {
+        v.visit(*this);
+    }
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    bool operator==(const forward_declaration_info& rhs) const;
+    bool operator!=(const forward_declaration_info& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::cpp::file_info& other) const override;
+
+public:
+    void swap(forward_declaration_info& other) noexcept;
+    forward_declaration_info& operator=(forward_declaration_info other);
+
+};
+
+} }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::cpp::forward_declaration_info& lhs,
+    dogen::cpp::forward_declaration_info& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/forward_declaration_info_fwd.hpp b/projects/cpp/include/dogen/cpp/types/forward_declaration_info_fwd.hpp
new file mode 100644
index 0000000..f1e46ca
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/forward_declaration_info_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_FORWARD_DECLARATION_INFO_FWD_HPP
+#define DOGEN_CPP_TYPES_FORWARD_DECLARATION_INFO_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace cpp {
+
+class forward_declaration_info;
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/includer_info.hpp b/projects/cpp/include/dogen/cpp/types/includer_info.hpp
new file mode 100644
index 0000000..5deeffa
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/includer_info.hpp
@@ -0,0 +1,110 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_INCLUDER_INFO_HPP
+#define DOGEN_CPP_TYPES_INCLUDER_INFO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include <iosfwd>
+#include "dogen/cpp/serialization/includer_info_fwd_ser.hpp"
+#include "dogen/cpp/types/file_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class includer_info final : public dogen::cpp::file_info {
+public:
+    includer_info() = default;
+    includer_info(const includer_info&) = default;
+    includer_info(includer_info&&) = default;
+
+    virtual ~includer_info() noexcept { }
+
+public:
+    includer_info(
+        const std::string& name,
+        const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
+        const std::list<std::string>& namespaces);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const includer_info& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, includer_info& v, unsigned int version);
+
+public:
+    virtual void accept(const file_info_visitor& v) const override {
+        v.visit(*this);
+    }
+
+    virtual void accept(file_info_visitor& v) const override {
+        v.visit(*this);
+    }
+
+    virtual void accept(const file_info_visitor& v) override {
+        v.visit(*this);
+    }
+
+    virtual void accept(file_info_visitor& v) override {
+        v.visit(*this);
+    }
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    bool operator==(const includer_info& rhs) const;
+    bool operator!=(const includer_info& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::cpp::file_info& other) const override;
+
+public:
+    void swap(includer_info& other) noexcept;
+    includer_info& operator=(includer_info other);
+
+};
+
+} }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::cpp::includer_info& lhs,
+    dogen::cpp::includer_info& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/includer_info_fwd.hpp b/projects/cpp/include/dogen/cpp/types/includer_info_fwd.hpp
new file mode 100644
index 0000000..baf09f1
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/includer_info_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_INCLUDER_INFO_FWD_HPP
+#define DOGEN_CPP_TYPES_INCLUDER_INFO_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace cpp {
+
+class includer_info;
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/namespace_info.hpp b/projects/cpp/include/dogen/cpp/types/namespace_info.hpp
index d482503..7a9e1f6 100644
--- a/projects/cpp/include/dogen/cpp/types/namespace_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/namespace_info.hpp
@@ -28,7 +28,7 @@
 #include <algorithm>
 #include <iosfwd>
 #include "dogen/cpp/serialization/namespace_info_fwd_ser.hpp"
-#include "dogen/cpp/types/entity.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -36,7 +36,7 @@ namespace cpp {
 /**
  * @brief Represents a C++ namespace.
  */
-class namespace_info final : public dogen::cpp::entity {
+class namespace_info final : public dogen::cpp::file_info {
 public:
     namespace_info() = default;
     namespace_info(const namespace_info&) = default;
@@ -48,6 +48,11 @@ public:
     namespace_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces);
 
 private:
@@ -58,19 +63,19 @@ private:
     friend void boost::serialization::load(Archive& ar, namespace_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -84,7 +89,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(namespace_info& other) noexcept;
diff --git a/projects/cpp/include/dogen/cpp/types/project.hpp b/projects/cpp/include/dogen/cpp/types/project.hpp
index 05762ed..b7f9072 100644
--- a/projects/cpp/include/dogen/cpp/types/project.hpp
+++ b/projects/cpp/include/dogen/cpp/types/project.hpp
@@ -29,9 +29,16 @@
 #include <boost/optional.hpp>
 #include <list>
 #include "dogen/cpp/serialization/project_fwd_ser.hpp"
+#include "dogen/cpp/types/class_info.hpp"
 #include "dogen/cpp/types/cmakelists_info.hpp"
-#include "dogen/cpp/types/file_info.hpp"
+#include "dogen/cpp/types/enum_info.hpp"
+#include "dogen/cpp/types/exception_info.hpp"
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+#include "dogen/cpp/types/includer_info.hpp"
+#include "dogen/cpp/types/namespace_info.hpp"
 #include "dogen/cpp/types/odb_options_info.hpp"
+#include "dogen/cpp/types/registrar_info.hpp"
+#include "dogen/cpp/types/visitor_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -50,10 +57,17 @@ public:
 
 public:
     project(
-        const std::list<dogen::cpp::file_info>& files,
         const dogen::cpp::odb_options_info& odb_options,
         const dogen::cpp::cmakelists_info& src_cmakelists,
-        const boost::optional<dogen::cpp::cmakelists_info>& include_cmakelists);
+        const boost::optional<dogen::cpp::cmakelists_info>& include_cmakelists,
+        const std::list<dogen::cpp::namespace_info>& namespaces,
+        const std::list<dogen::cpp::visitor_info>& visitors,
+        const std::list<dogen::cpp::enum_info>& enumerations,
+        const std::list<dogen::cpp::class_info>& classes,
+        const std::list<dogen::cpp::exception_info>& exceptions,
+        const std::list<dogen::cpp::registrar_info>& registrars,
+        const std::list<dogen::cpp::forward_declaration_info>& forward_declarations,
+        const std::list<dogen::cpp::includer_info>& includers);
 
 private:
     template<typename Archive>
@@ -64,16 +78,6 @@ private:
 
 public:
     /**
-     * @brief All C++ files, interfaces and implementation.
-     */
-    /**@{*/
-    const std::list<dogen::cpp::file_info>& files() const;
-    std::list<dogen::cpp::file_info>& files();
-    void files(const std::list<dogen::cpp::file_info>& v);
-    void files(const std::list<dogen::cpp::file_info>&& v);
-    /**@}*/
-
-    /**
      * @brief The ODB options file.
      */
     /**@{*/
@@ -103,6 +107,76 @@ public:
     void include_cmakelists(const boost::optional<dogen::cpp::cmakelists_info>&& v);
     /**@}*/
 
+    /**
+     * @brief All namespaces.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::namespace_info>& namespaces() const;
+    std::list<dogen::cpp::namespace_info>& namespaces();
+    void namespaces(const std::list<dogen::cpp::namespace_info>& v);
+    void namespaces(const std::list<dogen::cpp::namespace_info>&& v);
+    /**@}*/
+
+    /**
+     * @brief All visitors.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::visitor_info>& visitors() const;
+    std::list<dogen::cpp::visitor_info>& visitors();
+    void visitors(const std::list<dogen::cpp::visitor_info>& v);
+    void visitors(const std::list<dogen::cpp::visitor_info>&& v);
+    /**@}*/
+
+    /**
+     * @brief All enumerations.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::enum_info>& enumerations() const;
+    std::list<dogen::cpp::enum_info>& enumerations();
+    void enumerations(const std::list<dogen::cpp::enum_info>& v);
+    void enumerations(const std::list<dogen::cpp::enum_info>&& v);
+    /**@}*/
+
+    /**
+     * @brief All classes.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::class_info>& classes() const;
+    std::list<dogen::cpp::class_info>& classes();
+    void classes(const std::list<dogen::cpp::class_info>& v);
+    void classes(const std::list<dogen::cpp::class_info>&& v);
+    /**@}*/
+
+    /**
+     * @brief All exceptions.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::exception_info>& exceptions() const;
+    std::list<dogen::cpp::exception_info>& exceptions();
+    void exceptions(const std::list<dogen::cpp::exception_info>& v);
+    void exceptions(const std::list<dogen::cpp::exception_info>&& v);
+    /**@}*/
+
+    /**
+     * @brief All registrars.
+     */
+    /**@{*/
+    const std::list<dogen::cpp::registrar_info>& registrars() const;
+    std::list<dogen::cpp::registrar_info>& registrars();
+    void registrars(const std::list<dogen::cpp::registrar_info>& v);
+    void registrars(const std::list<dogen::cpp::registrar_info>&& v);
+    /**@}*/
+
+    const std::list<dogen::cpp::forward_declaration_info>& forward_declarations() const;
+    std::list<dogen::cpp::forward_declaration_info>& forward_declarations();
+    void forward_declarations(const std::list<dogen::cpp::forward_declaration_info>& v);
+    void forward_declarations(const std::list<dogen::cpp::forward_declaration_info>&& v);
+
+    const std::list<dogen::cpp::includer_info>& includers() const;
+    std::list<dogen::cpp::includer_info>& includers();
+    void includers(const std::list<dogen::cpp::includer_info>& v);
+    void includers(const std::list<dogen::cpp::includer_info>&& v);
+
 public:
     bool operator==(const project& rhs) const;
     bool operator!=(const project& rhs) const {
@@ -114,10 +188,17 @@ public:
     project& operator=(project other);
 
 private:
-    std::list<dogen::cpp::file_info> files_;
     dogen::cpp::odb_options_info odb_options_;
     dogen::cpp::cmakelists_info src_cmakelists_;
     boost::optional<dogen::cpp::cmakelists_info> include_cmakelists_;
+    std::list<dogen::cpp::namespace_info> namespaces_;
+    std::list<dogen::cpp::visitor_info> visitors_;
+    std::list<dogen::cpp::enum_info> enumerations_;
+    std::list<dogen::cpp::class_info> classes_;
+    std::list<dogen::cpp::exception_info> exceptions_;
+    std::list<dogen::cpp::registrar_info> registrars_;
+    std::list<dogen::cpp::forward_declaration_info> forward_declarations_;
+    std::list<dogen::cpp::includer_info> includers_;
 };
 
 } }
diff --git a/projects/cpp/include/dogen/cpp/types/registrar_info.hpp b/projects/cpp/include/dogen/cpp/types/registrar_info.hpp
index 30d8767..9b81038 100644
--- a/projects/cpp/include/dogen/cpp/types/registrar_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/registrar_info.hpp
@@ -30,7 +30,7 @@
 #include <list>
 #include <string>
 #include "dogen/cpp/serialization/registrar_info_fwd_ser.hpp"
-#include "dogen/cpp/types/entity.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -38,7 +38,7 @@ namespace cpp {
 /**
  * @brief Represents a serialisation registrar for boost serialisation.
  */
-class registrar_info final : public dogen::cpp::entity {
+class registrar_info final : public dogen::cpp::file_info {
 public:
     registrar_info() = default;
     registrar_info(const registrar_info&) = default;
@@ -50,6 +50,11 @@ public:
     registrar_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces,
         const std::list<std::string>& leaves,
         const std::list<std::string>& model_dependencies);
@@ -62,19 +67,19 @@ private:
     friend void boost::serialization::load(Archive& ar, registrar_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -109,7 +114,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(registrar_info& other) noexcept;
diff --git a/projects/cpp/include/dogen/cpp/types/visitor_info.hpp b/projects/cpp/include/dogen/cpp/types/visitor_info.hpp
index 754286a..2083bcb 100644
--- a/projects/cpp/include/dogen/cpp/types/visitor_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/visitor_info.hpp
@@ -30,7 +30,7 @@
 #include <list>
 #include <string>
 #include "dogen/cpp/serialization/visitor_info_fwd_ser.hpp"
-#include "dogen/cpp/types/entity.hpp"
+#include "dogen/cpp/types/file_info.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -38,7 +38,7 @@ namespace cpp {
 /**
  * @brief Represents a C++ class modeling the visitor pattern.
  */
-class visitor_info final : public dogen::cpp::entity {
+class visitor_info final : public dogen::cpp::file_info {
 public:
     visitor_info() = default;
     visitor_info(const visitor_info&) = default;
@@ -50,6 +50,11 @@ public:
     visitor_info(
         const std::string& name,
         const std::string& documentation,
+        const dogen::cpp::includes& includes,
+        const dogen::cpp::content_descriptor& descriptor,
+        const std::string& header_guard,
+        const boost::filesystem::path& file_path,
+        const boost::filesystem::path& relative_path,
         const std::list<std::string>& namespaces,
         const std::list<std::string>& types);
 
@@ -61,19 +66,19 @@ private:
     friend void boost::serialization::load(Archive& ar, visitor_info& v, unsigned int version);
 
 public:
-    virtual void accept(const entity_visitor& v) const override {
+    virtual void accept(const file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) const override {
+    virtual void accept(file_info_visitor& v) const override {
         v.visit(*this);
     }
 
-    virtual void accept(const entity_visitor& v) override {
+    virtual void accept(const file_info_visitor& v) override {
         v.visit(*this);
     }
 
-    virtual void accept(entity_visitor& v) override {
+    virtual void accept(file_info_visitor& v) override {
         v.visit(*this);
     }
 
@@ -98,7 +103,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::cpp::entity& other) const override;
+    bool equals(const dogen::cpp::file_info& other) const override;
 
 public:
     void swap(visitor_info& other) noexcept;
diff --git a/projects/cpp/src/hash/class_info_hash.cpp b/projects/cpp/src/hash/class_info_hash.cpp
index 8292a94..68c9bae 100644
--- a/projects/cpp/src/hash/class_info_hash.cpp
+++ b/projects/cpp/src/hash/class_info_hash.cpp
@@ -20,7 +20,7 @@
  */
 #include "dogen/cpp/hash/class_info_hash.hpp"
 #include "dogen/cpp/hash/class_types_hash.hpp"
-#include "dogen/cpp/hash/entity_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/parent_info_hash.hpp"
 #include "dogen/cpp/hash/property_info_hash.hpp"
 #include "dogen/sml/hash/generation_types_hash.hpp"
@@ -82,7 +82,7 @@ namespace cpp {
 std::size_t class_info_hasher::hash(const class_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
 
     combine(seed, hash_std_list_dogen_cpp_property_info(v.properties()));
     combine(seed, hash_std_list_dogen_cpp_property_info(v.all_properties()));
diff --git a/projects/cpp/src/hash/entity_hash.cpp b/projects/cpp/src/hash/entity_hash.cpp
deleted file mode 100644
index e5aed40..0000000
--- a/projects/cpp/src/hash/entity_hash.cpp
+++ /dev/null
@@ -1,55 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/cpp/hash/entity_hash.hpp"
-
-namespace {
-
-template <typename HashableType>
-inline void combine(std::size_t& seed, const HashableType& value)
-{
-    std::hash<HashableType> hasher;
-    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-}
-
-inline std::size_t hash_std_list_std_string(const std::list<std::string>& v){
-    std::size_t seed(0);
-    for (const auto i : v) {
-        combine(seed, i);
-    }
-    return seed;
-}
-
-}
-
-namespace dogen {
-namespace cpp {
-
-std::size_t entity_hasher::hash(const entity&v) {
-    std::size_t seed(0);
-
-    combine(seed, v.name());
-    combine(seed, v.documentation());
-    combine(seed, hash_std_list_std_string(v.namespaces()));
-
-    return seed;
-}
-
-} }
diff --git a/projects/cpp/src/hash/enum_info_hash.cpp b/projects/cpp/src/hash/enum_info_hash.cpp
index da4e0c3..01017cc 100644
--- a/projects/cpp/src/hash/enum_info_hash.cpp
+++ b/projects/cpp/src/hash/enum_info_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/entity_hash.hpp"
 #include "dogen/cpp/hash/enum_info_hash.hpp"
 #include "dogen/cpp/hash/enumerator_info_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 
 namespace {
 
@@ -47,7 +47,7 @@ namespace cpp {
 std::size_t enum_info_hasher::hash(const enum_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
 
     combine(seed, hash_std_list_dogen_cpp_enumerator_info(v.enumerators()));
     combine(seed, v.type());
diff --git a/projects/cpp/src/hash/exception_info_hash.cpp b/projects/cpp/src/hash/exception_info_hash.cpp
index 0a70d5c..47b53fc 100644
--- a/projects/cpp/src/hash/exception_info_hash.cpp
+++ b/projects/cpp/src/hash/exception_info_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/entity_hash.hpp"
 #include "dogen/cpp/hash/exception_info_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 
 namespace {
 
@@ -38,7 +38,7 @@ namespace cpp {
 std::size_t exception_info_hasher::hash(const exception_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
     return seed;
 }
 
diff --git a/projects/cpp/src/hash/file_info_hash.cpp b/projects/cpp/src/hash/file_info_hash.cpp
index 69d139a..9f90f13 100644
--- a/projects/cpp/src/hash/file_info_hash.cpp
+++ b/projects/cpp/src/hash/file_info_hash.cpp
@@ -19,7 +19,6 @@
  *
  */
 #include "dogen/cpp/hash/content_descriptor_hash.hpp"
-#include "dogen/cpp/hash/entity_hash.hpp"
 #include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/includes_hash.hpp"
 
@@ -38,9 +37,11 @@ inline std::size_t hash_boost_filesystem_path(const boost::filesystem::path& v)
     return seed;
 }
 
-inline std::size_t hash_boost_shared_ptr_dogen_cpp_entity(const boost::shared_ptr<dogen::cpp::entity>& v){
+inline std::size_t hash_std_list_std_string(const std::list<std::string>& v){
     std::size_t seed(0);
-    combine(seed, *v);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
     return seed;
 }
 
@@ -52,13 +53,14 @@ namespace cpp {
 std::size_t file_info_hasher::hash(const file_info&v) {
     std::size_t seed(0);
 
+    combine(seed, v.name());
     combine(seed, v.documentation());
     combine(seed, v.includes());
     combine(seed, v.descriptor());
     combine(seed, v.header_guard());
     combine(seed, hash_boost_filesystem_path(v.file_path()));
     combine(seed, hash_boost_filesystem_path(v.relative_path()));
-    combine(seed, hash_boost_shared_ptr_dogen_cpp_entity(v.entity()));
+    combine(seed, hash_std_list_std_string(v.namespaces()));
 
     return seed;
 }
diff --git a/projects/cpp/src/hash/forward_declaration_info_hash.cpp b/projects/cpp/src/hash/forward_declaration_info_hash.cpp
new file mode 100644
index 0000000..cb18375
--- /dev/null
+++ b/projects/cpp/src/hash/forward_declaration_info_hash.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/hash/file_info_hash.hpp"
+#include "dogen/cpp/hash/forward_declaration_info_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+
+std::size_t forward_declaration_info_hasher::hash(const forward_declaration_info&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
+    return seed;
+}
+
+} }
diff --git a/projects/cpp/src/hash/includer_info_hash.cpp b/projects/cpp/src/hash/includer_info_hash.cpp
new file mode 100644
index 0000000..bcd75bc
--- /dev/null
+++ b/projects/cpp/src/hash/includer_info_hash.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/hash/file_info_hash.hpp"
+#include "dogen/cpp/hash/includer_info_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+
+std::size_t includer_info_hasher::hash(const includer_info&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
+    return seed;
+}
+
+} }
diff --git a/projects/cpp/src/hash/namespace_info_hash.cpp b/projects/cpp/src/hash/namespace_info_hash.cpp
index 9fb22f4..6e7ebd5 100644
--- a/projects/cpp/src/hash/namespace_info_hash.cpp
+++ b/projects/cpp/src/hash/namespace_info_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/entity_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/namespace_info_hash.hpp"
 
 namespace {
@@ -38,7 +38,7 @@ namespace cpp {
 std::size_t namespace_info_hasher::hash(const namespace_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
     return seed;
 }
 
diff --git a/projects/cpp/src/hash/project_hash.cpp b/projects/cpp/src/hash/project_hash.cpp
index 10a9b93..63c090a 100644
--- a/projects/cpp/src/hash/project_hash.cpp
+++ b/projects/cpp/src/hash/project_hash.cpp
@@ -18,10 +18,17 @@
  * MA 02110-1301, USA.
  *
  */
+#include "dogen/cpp/hash/class_info_hash.hpp"
 #include "dogen/cpp/hash/cmakelists_info_hash.hpp"
-#include "dogen/cpp/hash/file_info_hash.hpp"
+#include "dogen/cpp/hash/enum_info_hash.hpp"
+#include "dogen/cpp/hash/exception_info_hash.hpp"
+#include "dogen/cpp/hash/forward_declaration_info_hash.hpp"
+#include "dogen/cpp/hash/includer_info_hash.hpp"
+#include "dogen/cpp/hash/namespace_info_hash.hpp"
 #include "dogen/cpp/hash/odb_options_info_hash.hpp"
 #include "dogen/cpp/hash/project_hash.hpp"
+#include "dogen/cpp/hash/registrar_info_hash.hpp"
+#include "dogen/cpp/hash/visitor_info_hash.hpp"
 
 namespace {
 
@@ -32,7 +39,17 @@ inline void combine(std::size_t& seed, const HashableType& value)
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_list_dogen_cpp_file_info(const std::list<dogen::cpp::file_info>& v){
+inline std::size_t hash_boost_optional_dogen_cpp_cmakelists_info(const boost::optional<dogen::cpp::cmakelists_info>& v){
+    std::size_t seed(0);
+
+    if (!v)
+        return seed;
+
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_cpp_namespace_info(const std::list<dogen::cpp::namespace_info>& v){
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -40,13 +57,59 @@ inline std::size_t hash_std_list_dogen_cpp_file_info(const std::list<dogen::cpp:
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_cpp_cmakelists_info(const boost::optional<dogen::cpp::cmakelists_info>& v){
+inline std::size_t hash_std_list_dogen_cpp_visitor_info(const std::list<dogen::cpp::visitor_info>& v){
     std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
 
-    if (!v)
-        return seed;
+inline std::size_t hash_std_list_dogen_cpp_enum_info(const std::list<dogen::cpp::enum_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
 
-    combine(seed, *v);
+inline std::size_t hash_std_list_dogen_cpp_class_info(const std::list<dogen::cpp::class_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_cpp_exception_info(const std::list<dogen::cpp::exception_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_cpp_registrar_info(const std::list<dogen::cpp::registrar_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_cpp_forward_declaration_info(const std::list<dogen::cpp::forward_declaration_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_cpp_includer_info(const std::list<dogen::cpp::includer_info>& v){
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
     return seed;
 }
 
@@ -58,10 +121,17 @@ namespace cpp {
 std::size_t project_hasher::hash(const project&v) {
     std::size_t seed(0);
 
-    combine(seed, hash_std_list_dogen_cpp_file_info(v.files()));
     combine(seed, v.odb_options());
     combine(seed, v.src_cmakelists());
     combine(seed, hash_boost_optional_dogen_cpp_cmakelists_info(v.include_cmakelists()));
+    combine(seed, hash_std_list_dogen_cpp_namespace_info(v.namespaces()));
+    combine(seed, hash_std_list_dogen_cpp_visitor_info(v.visitors()));
+    combine(seed, hash_std_list_dogen_cpp_enum_info(v.enumerations()));
+    combine(seed, hash_std_list_dogen_cpp_class_info(v.classes()));
+    combine(seed, hash_std_list_dogen_cpp_exception_info(v.exceptions()));
+    combine(seed, hash_std_list_dogen_cpp_registrar_info(v.registrars()));
+    combine(seed, hash_std_list_dogen_cpp_forward_declaration_info(v.forward_declarations()));
+    combine(seed, hash_std_list_dogen_cpp_includer_info(v.includers()));
 
     return seed;
 }
diff --git a/projects/cpp/src/hash/registrar_info_hash.cpp b/projects/cpp/src/hash/registrar_info_hash.cpp
index 28d472f..bf55d6a 100644
--- a/projects/cpp/src/hash/registrar_info_hash.cpp
+++ b/projects/cpp/src/hash/registrar_info_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/entity_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/registrar_info_hash.hpp"
 
 namespace {
@@ -46,7 +46,7 @@ namespace cpp {
 std::size_t registrar_info_hasher::hash(const registrar_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
 
     combine(seed, hash_std_list_std_string(v.leaves()));
     combine(seed, hash_std_list_std_string(v.model_dependencies()));
diff --git a/projects/cpp/src/hash/visitor_info_hash.cpp b/projects/cpp/src/hash/visitor_info_hash.cpp
index 37212d8..a32889a 100644
--- a/projects/cpp/src/hash/visitor_info_hash.cpp
+++ b/projects/cpp/src/hash/visitor_info_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/entity_hash.hpp"
+#include "dogen/cpp/hash/file_info_hash.hpp"
 #include "dogen/cpp/hash/visitor_info_hash.hpp"
 
 namespace {
@@ -46,7 +46,7 @@ namespace cpp {
 std::size_t visitor_info_hasher::hash(const visitor_info&v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::cpp::entity&>(v));
+    combine(seed, dynamic_cast<const dogen::cpp::file_info&>(v));
 
     combine(seed, hash_std_list_std_string(v.types()));
     return seed;
diff --git a/projects/cpp/src/io/class_info_io.cpp b/projects/cpp/src/io/class_info_io.cpp
index 126157b..86d059a 100644
--- a/projects/cpp/src/io/class_info_io.cpp
+++ b/projects/cpp/src/io/class_info_io.cpp
@@ -23,7 +23,7 @@
 #include <ostream>
 #include "dogen/cpp/io/class_info_io.hpp"
 #include "dogen/cpp/io/class_types_io.hpp"
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/parent_info_io.hpp"
 #include "dogen/cpp/io/property_info_io.hpp"
 #include "dogen/sml/io/generation_types_io.hpp"
diff --git a/projects/cpp/src/io/entity_io.cpp b/projects/cpp/src/io/entity_io.cpp
deleted file mode 100644
index 4190a10..0000000
--- a/projects/cpp/src/io/entity_io.cpp
+++ /dev/null
@@ -1,33 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <boost/algorithm/string.hpp>
-#include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
-
-namespace dogen {
-namespace cpp {
-
-std::ostream& operator<<(std::ostream& s, const entity& v) {
-    v.to_stream(s);
-    return(s);
-}
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/io/enum_info_io.cpp b/projects/cpp/src/io/enum_info_io.cpp
index 733ca28..5bbe2d7 100644
--- a/projects/cpp/src/io/enum_info_io.cpp
+++ b/projects/cpp/src/io/enum_info_io.cpp
@@ -20,9 +20,9 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
 #include "dogen/cpp/io/enum_info_io.hpp"
 #include "dogen/cpp/io/enumerator_info_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 
 namespace dogen {
 namespace cpp {
diff --git a/projects/cpp/src/io/exception_info_io.cpp b/projects/cpp/src/io/exception_info_io.cpp
index f83504c..fc3d392 100644
--- a/projects/cpp/src/io/exception_info_io.cpp
+++ b/projects/cpp/src/io/exception_info_io.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
 #include "dogen/cpp/io/exception_info_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 
 namespace dogen {
 namespace cpp {
diff --git a/projects/cpp/src/io/file_info_io.cpp b/projects/cpp/src/io/file_info_io.cpp
index 3f55d89..9fcea17 100644
--- a/projects/cpp/src/io/file_info_io.cpp
+++ b/projects/cpp/src/io/file_info_io.cpp
@@ -21,48 +21,14 @@
 #include <boost/algorithm/string.hpp>
 #include <ostream>
 #include "dogen/cpp/io/content_descriptor_io.hpp"
-#include "dogen/cpp/io/entity_io.hpp"
 #include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/includes_io.hpp"
 
-
-inline std::string tidy_up_string(std::string s) {
-    boost::replace_all(s, "\r\n", "<new_line>");
-    boost::replace_all(s, "\n", "<new_line>");
-    boost::replace_all(s, "\"", "<quote>");
-    return s;
-}
-
-namespace boost {
-
-inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::cpp::entity>& v) {
-    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
-      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
-
-    if (v)
-        s << "\"data\": " << *v;
-    else
-        s << "\"data\": ""\"<empty>\"";
-    s<< " }";
-    return s;
-}
-
-}
-
 namespace dogen {
 namespace cpp {
 
 std::ostream& operator<<(std::ostream& s, const file_info& v) {
-    s << " { "
-      << "\"__type__\": " << "\"dogen::cpp::file_info\"" << ", "
-      << "\"documentation\": " << "\"" << tidy_up_string(v.documentation()) << "\"" << ", "
-      << "\"includes\": " << v.includes() << ", "
-      << "\"descriptor\": " << v.descriptor() << ", "
-      << "\"header_guard\": " << "\"" << tidy_up_string(v.header_guard()) << "\"" << ", "
-      << "\"file_path\": " << "\"" << v.file_path().generic_string() << "\"" << ", "
-      << "\"relative_path\": " << "\"" << v.relative_path().generic_string() << "\"" << ", "
-      << "\"entity\": " << v.entity()
-      << " }";
+    v.to_stream(s);
     return(s);
 }
 
diff --git a/projects/cpp/src/io/forward_declaration_info_io.cpp b/projects/cpp/src/io/forward_declaration_info_io.cpp
new file mode 100644
index 0000000..c3afae2
--- /dev/null
+++ b/projects/cpp/src/io/forward_declaration_info_io.cpp
@@ -0,0 +1,33 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/cpp/io/file_info_io.hpp"
+#include "dogen/cpp/io/forward_declaration_info_io.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream& operator<<(std::ostream& s, const forward_declaration_info& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/io/includer_info_io.cpp b/projects/cpp/src/io/includer_info_io.cpp
new file mode 100644
index 0000000..15ce32e
--- /dev/null
+++ b/projects/cpp/src/io/includer_info_io.cpp
@@ -0,0 +1,33 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/cpp/io/file_info_io.hpp"
+#include "dogen/cpp/io/includer_info_io.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream& operator<<(std::ostream& s, const includer_info& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/io/namespace_info_io.cpp b/projects/cpp/src/io/namespace_info_io.cpp
index 737370d..a5b2ac3 100644
--- a/projects/cpp/src/io/namespace_info_io.cpp
+++ b/projects/cpp/src/io/namespace_info_io.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/namespace_info_io.hpp"
 
 namespace dogen {
diff --git a/projects/cpp/src/io/project_io.cpp b/projects/cpp/src/io/project_io.cpp
index 16c884c..c842ebd 100644
--- a/projects/cpp/src/io/project_io.cpp
+++ b/projects/cpp/src/io/project_io.cpp
@@ -19,14 +19,36 @@
  *
  */
 #include <ostream>
+#include "dogen/cpp/io/class_info_io.hpp"
 #include "dogen/cpp/io/cmakelists_info_io.hpp"
-#include "dogen/cpp/io/file_info_io.hpp"
+#include "dogen/cpp/io/enum_info_io.hpp"
+#include "dogen/cpp/io/exception_info_io.hpp"
+#include "dogen/cpp/io/forward_declaration_info_io.hpp"
+#include "dogen/cpp/io/includer_info_io.hpp"
+#include "dogen/cpp/io/namespace_info_io.hpp"
 #include "dogen/cpp/io/odb_options_info_io.hpp"
 #include "dogen/cpp/io/project_io.hpp"
+#include "dogen/cpp/io/registrar_info_io.hpp"
+#include "dogen/cpp/io/visitor_info_io.hpp"
+
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::cpp::cmakelists_info>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<empty>\"";
+    s << " }";
+    return s;
+}
+
+}
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::file_info>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::namespace_info>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -38,16 +60,99 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::fil
 
 }
 
-namespace boost {
+namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::cpp::cmakelists_info>& v) {
-    s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::visitor_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
 
-    if (v)
-        s << "\"data\": " << *v;
-    else
-        s << "\"data\": ""\"<empty>\"";
-    s << " }";
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::enum_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::class_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::exception_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::registrar_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::forward_declaration_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
+    return s;
+}
+
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::cpp::includer_info>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << *i;
+    }
+    s << "] ";
     return s;
 }
 
@@ -59,10 +164,17 @@ namespace cpp {
 std::ostream& operator<<(std::ostream& s, const project& v) {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::project\"" << ", "
-      << "\"files\": " << v.files() << ", "
       << "\"odb_options\": " << v.odb_options() << ", "
       << "\"src_cmakelists\": " << v.src_cmakelists() << ", "
-      << "\"include_cmakelists\": " << v.include_cmakelists()
+      << "\"include_cmakelists\": " << v.include_cmakelists() << ", "
+      << "\"namespaces\": " << v.namespaces() << ", "
+      << "\"visitors\": " << v.visitors() << ", "
+      << "\"enumerations\": " << v.enumerations() << ", "
+      << "\"classes\": " << v.classes() << ", "
+      << "\"exceptions\": " << v.exceptions() << ", "
+      << "\"registrars\": " << v.registrars() << ", "
+      << "\"forward_declarations\": " << v.forward_declarations() << ", "
+      << "\"includers\": " << v.includers()
       << " }";
     return(s);
 }
diff --git a/projects/cpp/src/io/registrar_info_io.cpp b/projects/cpp/src/io/registrar_info_io.cpp
index 1b0d35e..b4fd900 100644
--- a/projects/cpp/src/io/registrar_info_io.cpp
+++ b/projects/cpp/src/io/registrar_info_io.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/registrar_info_io.hpp"
 
 namespace dogen {
diff --git a/projects/cpp/src/io/visitor_info_io.cpp b/projects/cpp/src/io/visitor_info_io.cpp
index d164b4a..027ccf1 100644
--- a/projects/cpp/src/io/visitor_info_io.cpp
+++ b/projects/cpp/src/io/visitor_info_io.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/visitor_info_io.hpp"
 
 namespace dogen {
diff --git a/projects/cpp/src/serialization/class_info_ser.cpp b/projects/cpp/src/serialization/class_info_ser.cpp
index 6806af8..8954488 100644
--- a/projects/cpp/src/serialization/class_info_ser.cpp
+++ b/projects/cpp/src/serialization/class_info_ser.cpp
@@ -32,7 +32,7 @@
 #include <boost/serialization/utility.hpp>
 #include "dogen/cpp/serialization/class_info_ser.hpp"
 #include "dogen/cpp/serialization/class_types_ser.hpp"
-#include "dogen/cpp/serialization/entity_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 #include "dogen/cpp/serialization/parent_info_ser.hpp"
 #include "dogen/cpp/serialization/property_info_ser.hpp"
 #include "dogen/sml/serialization/generation_types_ser.hpp"
@@ -49,7 +49,7 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::class_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar << make_nvp("properties", v.properties_);
     ar << make_nvp("all_properties", v.all_properties_);
@@ -77,7 +77,7 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::class_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar >> make_nvp("properties", v.properties_);
     ar >> make_nvp("all_properties", v.all_properties_);
diff --git a/projects/cpp/src/serialization/entity_ser.cpp b/projects/cpp/src/serialization/entity_ser.cpp
deleted file mode 100644
index 8053fce..0000000
--- a/projects/cpp/src/serialization/entity_ser.cpp
+++ /dev/null
@@ -1,83 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <boost/archive/binary_iarchive.hpp>
-#include <boost/archive/binary_oarchive.hpp>
-#include <boost/archive/polymorphic_iarchive.hpp>
-#include <boost/archive/polymorphic_oarchive.hpp>
-#include <boost/archive/text_iarchive.hpp>
-#include <boost/archive/text_oarchive.hpp>
-#include <boost/archive/xml_iarchive.hpp>
-#include <boost/archive/xml_oarchive.hpp>
-#include <boost/serialization/list.hpp>
-#include <boost/serialization/nvp.hpp>
-#include <boost/serialization/string.hpp>
-#include "dogen/cpp/serialization/class_info_ser.hpp"
-#include "dogen/cpp/serialization/entity_ser.hpp"
-#include "dogen/cpp/serialization/enum_info_ser.hpp"
-#include "dogen/cpp/serialization/exception_info_ser.hpp"
-#include "dogen/cpp/serialization/namespace_info_ser.hpp"
-#include "dogen/cpp/serialization/registrar_info_ser.hpp"
-#include "dogen/cpp/serialization/visitor_info_ser.hpp"
-
-
-BOOST_CLASS_TRACKING(
-    dogen::cpp::entity,
-    boost::serialization::track_selectively)
-
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar,
-    const dogen::cpp::entity& v,
-    const unsigned int /*version*/) {
-    ar << make_nvp("name", v.name_);
-    ar << make_nvp("documentation", v.documentation_);
-    ar << make_nvp("namespaces", v.namespaces_);
-}
-
-template<typename Archive>
-void load(Archive& ar,
-    dogen::cpp::entity& v,
-    const unsigned int /*version*/) {
-    ar >> make_nvp("name", v.name_);
-    ar >> make_nvp("documentation", v.documentation_);
-    ar >> make_nvp("namespaces", v.namespaces_);
-}
-
-} }
-
-namespace boost {
-namespace serialization {
-
-template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::entity& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::cpp::entity& v, unsigned int version);
-
-template void save(archive::text_oarchive& ar, const dogen::cpp::entity& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::cpp::entity& v, unsigned int version);
-
-template void save(archive::binary_oarchive& ar, const dogen::cpp::entity& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::cpp::entity& v, unsigned int version);
-
-template void save(archive::xml_oarchive& ar, const dogen::cpp::entity& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::cpp::entity& v, unsigned int version);
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/serialization/enum_info_ser.cpp b/projects/cpp/src/serialization/enum_info_ser.cpp
index 31d0814..12e6a95 100644
--- a/projects/cpp/src/serialization/enum_info_ser.cpp
+++ b/projects/cpp/src/serialization/enum_info_ser.cpp
@@ -29,9 +29,9 @@
 #include <boost/serialization/list.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/string.hpp>
-#include "dogen/cpp/serialization/entity_ser.hpp"
 #include "dogen/cpp/serialization/enum_info_ser.hpp"
 #include "dogen/cpp/serialization/enumerator_info_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 
 
 BOOST_CLASS_TRACKING(
@@ -45,7 +45,7 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::enum_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar << make_nvp("enumerators", v.enumerators_);
     ar << make_nvp("type", v.type_);
@@ -55,7 +55,7 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::enum_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar >> make_nvp("enumerators", v.enumerators_);
     ar >> make_nvp("type", v.type_);
diff --git a/projects/cpp/src/serialization/exception_info_ser.cpp b/projects/cpp/src/serialization/exception_info_ser.cpp
index 754e45a..977af8f 100644
--- a/projects/cpp/src/serialization/exception_info_ser.cpp
+++ b/projects/cpp/src/serialization/exception_info_ser.cpp
@@ -27,8 +27,8 @@
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
 #include <boost/serialization/nvp.hpp>
-#include "dogen/cpp/serialization/entity_ser.hpp"
 #include "dogen/cpp/serialization/exception_info_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 
 
 BOOST_CLASS_TRACKING(
@@ -42,14 +42,14 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::exception_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 }
 
 template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::exception_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 }
 
 } }
diff --git a/projects/cpp/src/serialization/file_info_ser.cpp b/projects/cpp/src/serialization/file_info_ser.cpp
index aa8f06a..3566e1f 100644
--- a/projects/cpp/src/serialization/file_info_ser.cpp
+++ b/projects/cpp/src/serialization/file_info_ser.cpp
@@ -26,16 +26,27 @@
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/list.hpp>
 #include <boost/serialization/nvp.hpp>
-#include <boost/serialization/shared_ptr.hpp>
 #include <boost/serialization/string.hpp>
+#include "dogen/cpp/serialization/class_info_ser.hpp"
 #include "dogen/cpp/serialization/content_descriptor_ser.hpp"
-#include "dogen/cpp/serialization/entity_ser.hpp"
+#include "dogen/cpp/serialization/enum_info_ser.hpp"
+#include "dogen/cpp/serialization/exception_info_ser.hpp"
 #include "dogen/cpp/serialization/file_info_ser.hpp"
+#include "dogen/cpp/serialization/forward_declaration_info_ser.hpp"
+#include "dogen/cpp/serialization/includer_info_ser.hpp"
 #include "dogen/cpp/serialization/includes_ser.hpp"
+#include "dogen/cpp/serialization/namespace_info_ser.hpp"
+#include "dogen/cpp/serialization/registrar_info_ser.hpp"
+#include "dogen/cpp/serialization/visitor_info_ser.hpp"
 #include "dogen/utility/serialization/path.hpp"
 
 
+BOOST_CLASS_TRACKING(
+    dogen::cpp::file_info,
+    boost::serialization::track_selectively)
+
 namespace boost {
 namespace serialization {
 
@@ -43,19 +54,21 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::file_info& v,
     const unsigned int /*version*/) {
+    ar << make_nvp("name", v.name_);
     ar << make_nvp("documentation", v.documentation_);
     ar << make_nvp("includes", v.includes_);
     ar << make_nvp("descriptor", v.descriptor_);
     ar << make_nvp("header_guard", v.header_guard_);
     ar << make_nvp("file_path", v.file_path_.generic_string());
     ar << make_nvp("relative_path", v.relative_path_.generic_string());
-    ar << make_nvp("entity", v.entity_);
+    ar << make_nvp("namespaces", v.namespaces_);
 }
 
 template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::file_info& v,
     const unsigned int /*version*/) {
+    ar >> make_nvp("name", v.name_);
     ar >> make_nvp("documentation", v.documentation_);
     ar >> make_nvp("includes", v.includes_);
     ar >> make_nvp("descriptor", v.descriptor_);
@@ -66,7 +79,7 @@ void load(Archive& ar,
     std::string relative_path_tmp;
     ar >> make_nvp("relative_path", relative_path_tmp);
     v.relative_path_ = relative_path_tmp;
-    ar >> make_nvp("entity", v.entity_);
+    ar >> make_nvp("namespaces", v.namespaces_);
 }
 
 } }
diff --git a/projects/cpp/src/serialization/forward_declaration_info_ser.cpp b/projects/cpp/src/serialization/forward_declaration_info_ser.cpp
new file mode 100644
index 0000000..5f851a0
--- /dev/null
+++ b/projects/cpp/src/serialization/forward_declaration_info_ser.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/cpp/serialization/file_info_ser.hpp"
+#include "dogen/cpp/serialization/forward_declaration_info_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::cpp::forward_declaration_info,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::cpp::forward_declaration_info& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::cpp::forward_declaration_info& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::cpp::forward_declaration_info& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::cpp::forward_declaration_info& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/serialization/includer_info_ser.cpp b/projects/cpp/src/serialization/includer_info_ser.cpp
new file mode 100644
index 0000000..97a799c
--- /dev/null
+++ b/projects/cpp/src/serialization/includer_info_ser.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/cpp/serialization/file_info_ser.hpp"
+#include "dogen/cpp/serialization/includer_info_ser.hpp"
+
+
+BOOST_CLASS_TRACKING(
+    dogen::cpp::includer_info,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::cpp::includer_info& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::cpp::includer_info& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::cpp::includer_info& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::cpp::includer_info& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/serialization/namespace_info_ser.cpp b/projects/cpp/src/serialization/namespace_info_ser.cpp
index e9baf1a..3619017 100644
--- a/projects/cpp/src/serialization/namespace_info_ser.cpp
+++ b/projects/cpp/src/serialization/namespace_info_ser.cpp
@@ -27,7 +27,7 @@
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
 #include <boost/serialization/nvp.hpp>
-#include "dogen/cpp/serialization/entity_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 #include "dogen/cpp/serialization/namespace_info_ser.hpp"
 
 
@@ -42,14 +42,14 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::namespace_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 }
 
 template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::namespace_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 }
 
 } }
diff --git a/projects/cpp/src/serialization/project_ser.cpp b/projects/cpp/src/serialization/project_ser.cpp
index 420ddb5..5c09356 100644
--- a/projects/cpp/src/serialization/project_ser.cpp
+++ b/projects/cpp/src/serialization/project_ser.cpp
@@ -29,10 +29,17 @@
 #include <boost/serialization/list.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/optional.hpp>
+#include "dogen/cpp/serialization/class_info_ser.hpp"
 #include "dogen/cpp/serialization/cmakelists_info_ser.hpp"
-#include "dogen/cpp/serialization/file_info_ser.hpp"
+#include "dogen/cpp/serialization/enum_info_ser.hpp"
+#include "dogen/cpp/serialization/exception_info_ser.hpp"
+#include "dogen/cpp/serialization/forward_declaration_info_ser.hpp"
+#include "dogen/cpp/serialization/includer_info_ser.hpp"
+#include "dogen/cpp/serialization/namespace_info_ser.hpp"
 #include "dogen/cpp/serialization/odb_options_info_ser.hpp"
 #include "dogen/cpp/serialization/project_ser.hpp"
+#include "dogen/cpp/serialization/registrar_info_ser.hpp"
+#include "dogen/cpp/serialization/visitor_info_ser.hpp"
 
 
 namespace boost {
@@ -42,20 +49,34 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::project& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("files", v.files_);
     ar << make_nvp("odb_options", v.odb_options_);
     ar << make_nvp("src_cmakelists", v.src_cmakelists_);
     ar << make_nvp("include_cmakelists", v.include_cmakelists_);
+    ar << make_nvp("namespaces", v.namespaces_);
+    ar << make_nvp("visitors", v.visitors_);
+    ar << make_nvp("enumerations", v.enumerations_);
+    ar << make_nvp("classes", v.classes_);
+    ar << make_nvp("exceptions", v.exceptions_);
+    ar << make_nvp("registrars", v.registrars_);
+    ar << make_nvp("forward_declarations", v.forward_declarations_);
+    ar << make_nvp("includers", v.includers_);
 }
 
 template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::project& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("files", v.files_);
     ar >> make_nvp("odb_options", v.odb_options_);
     ar >> make_nvp("src_cmakelists", v.src_cmakelists_);
     ar >> make_nvp("include_cmakelists", v.include_cmakelists_);
+    ar >> make_nvp("namespaces", v.namespaces_);
+    ar >> make_nvp("visitors", v.visitors_);
+    ar >> make_nvp("enumerations", v.enumerations_);
+    ar >> make_nvp("classes", v.classes_);
+    ar >> make_nvp("exceptions", v.exceptions_);
+    ar >> make_nvp("registrars", v.registrars_);
+    ar >> make_nvp("forward_declarations", v.forward_declarations_);
+    ar >> make_nvp("includers", v.includers_);
 }
 
 } }
diff --git a/projects/cpp/src/serialization/registrar_info_ser.cpp b/projects/cpp/src/serialization/registrar_info_ser.cpp
index b1e1e05..d0cb993 100644
--- a/projects/cpp/src/serialization/registrar_info_ser.cpp
+++ b/projects/cpp/src/serialization/registrar_info_ser.cpp
@@ -29,7 +29,7 @@
 #include <boost/serialization/list.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/string.hpp>
-#include "dogen/cpp/serialization/entity_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 #include "dogen/cpp/serialization/registrar_info_ser.hpp"
 
 
@@ -44,7 +44,7 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::registrar_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar << make_nvp("leaves", v.leaves_);
     ar << make_nvp("model_dependencies", v.model_dependencies_);
@@ -54,7 +54,7 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::registrar_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar >> make_nvp("leaves", v.leaves_);
     ar >> make_nvp("model_dependencies", v.model_dependencies_);
diff --git a/projects/cpp/src/serialization/registrar_ser.cpp b/projects/cpp/src/serialization/registrar_ser.cpp
index 9513b13..dff95b4 100644
--- a/projects/cpp/src/serialization/registrar_ser.cpp
+++ b/projects/cpp/src/serialization/registrar_ser.cpp
@@ -30,6 +30,8 @@
 #include "dogen/cpp/serialization/class_info_ser.hpp"
 #include "dogen/cpp/serialization/enum_info_ser.hpp"
 #include "dogen/cpp/serialization/exception_info_ser.hpp"
+#include "dogen/cpp/serialization/forward_declaration_info_ser.hpp"
+#include "dogen/cpp/serialization/includer_info_ser.hpp"
 #include "dogen/cpp/serialization/namespace_info_ser.hpp"
 #include "dogen/cpp/serialization/registrar_info_ser.hpp"
 #include "dogen/cpp/serialization/visitor_info_ser.hpp"
@@ -46,6 +48,8 @@ void register_types(Archive& ar) {
     ar.template register_type<dogen::cpp::class_info>();
     ar.template register_type<dogen::cpp::enum_info>();
     ar.template register_type<dogen::cpp::exception_info>();
+    ar.template register_type<dogen::cpp::forward_declaration_info>();
+    ar.template register_type<dogen::cpp::includer_info>();
     ar.template register_type<dogen::cpp::namespace_info>();
     ar.template register_type<dogen::cpp::registrar_info>();
     ar.template register_type<dogen::cpp::visitor_info>();
diff --git a/projects/cpp/src/serialization/visitor_info_ser.cpp b/projects/cpp/src/serialization/visitor_info_ser.cpp
index 221f99e..7e9a462 100644
--- a/projects/cpp/src/serialization/visitor_info_ser.cpp
+++ b/projects/cpp/src/serialization/visitor_info_ser.cpp
@@ -29,7 +29,7 @@
 #include <boost/serialization/list.hpp>
 #include <boost/serialization/nvp.hpp>
 #include <boost/serialization/string.hpp>
-#include "dogen/cpp/serialization/entity_ser.hpp"
+#include "dogen/cpp/serialization/file_info_ser.hpp"
 #include "dogen/cpp/serialization/visitor_info_ser.hpp"
 
 
@@ -44,7 +44,7 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::cpp::visitor_info& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar << make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar << make_nvp("types", v.types_);
 }
@@ -53,7 +53,7 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::cpp::visitor_info& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("entity", base_object<dogen::cpp::entity>(v));
+    ar >> make_nvp("file_info", base_object<dogen::cpp::file_info>(v));
 
     ar >> make_nvp("types", v.types_);
 }
diff --git a/projects/cpp/src/test_data/class_info_td.cpp b/projects/cpp/src/test_data/class_info_td.cpp
index a604a40..222d036 100644
--- a/projects/cpp/src/test_data/class_info_td.cpp
+++ b/projects/cpp/src/test_data/class_info_td.cpp
@@ -21,7 +21,7 @@
 #include <sstream>
 #include "dogen/cpp/test_data/class_info_td.hpp"
 #include "dogen/cpp/test_data/class_types_td.hpp"
-#include "dogen/cpp/test_data/entity_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 #include "dogen/cpp/test_data/parent_info_td.hpp"
 #include "dogen/cpp/test_data/property_info_td.hpp"
 #include "dogen/sml/test_data/generation_types_td.hpp"
@@ -107,7 +107,7 @@ class_info_generator::class_info_generator() : position_(0) { }
 
 void class_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
     v.properties(create_std_list_dogen_cpp_property_info(position + 0));
     v.all_properties(create_std_list_dogen_cpp_property_info(position + 1));
     v.has_primitive_properties(create_bool(position + 2));
diff --git a/projects/cpp/src/test_data/entity_td.cpp b/projects/cpp/src/test_data/entity_td.cpp
deleted file mode 100644
index 5c5fb28..0000000
--- a/projects/cpp/src/test_data/entity_td.cpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <sstream>
-#include "dogen/cpp/test_data/class_info_td.hpp"
-#include "dogen/cpp/test_data/entity_td.hpp"
-#include "dogen/cpp/test_data/enum_info_td.hpp"
-#include "dogen/cpp/test_data/exception_info_td.hpp"
-#include "dogen/cpp/test_data/namespace_info_td.hpp"
-#include "dogen/cpp/test_data/registrar_info_td.hpp"
-#include "dogen/cpp/test_data/visitor_info_td.hpp"
-
-namespace {
-
-std::string create_std_string(const unsigned int position) {
-    std::ostringstream s;
-    s << "a_string_" << position;
-    return s.str();
-}
-
-std::list<std::string> create_std_list_std_string(unsigned int position) {
-    std::list<std::string> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_string(position + i));
-    }
-    return r;
-}
-
-}
-
-namespace dogen {
-namespace cpp {
-
-
-void entity_generator::
-populate(const unsigned int position, result_type& v) {
-    v.name(create_std_string(position + 0));
-    v.documentation(create_std_string(position + 1));
-    v.namespaces(create_std_list_std_string(position + 2));
-}
-
-entity_generator::result_type*
-entity_generator::create_ptr(const unsigned int position) {
-    if ((position % 5) == 0)
-        return dogen::cpp::enum_info_generator::create_ptr(position);
-    if ((position % 5) == 1)
-        return dogen::cpp::exception_info_generator::create_ptr(position);
-    if ((position % 5) == 2)
-        return dogen::cpp::registrar_info_generator::create_ptr(position);
-    if ((position % 5) == 3)
-        return dogen::cpp::namespace_info_generator::create_ptr(position);
-    if ((position % 5) == 4)
-        return dogen::cpp::visitor_info_generator::create_ptr(position);
-    return dogen::cpp::class_info_generator::create_ptr(position);
-}
-
-
-} }
diff --git a/projects/cpp/src/test_data/enum_info_td.cpp b/projects/cpp/src/test_data/enum_info_td.cpp
index 4eea187..f15d193 100644
--- a/projects/cpp/src/test_data/enum_info_td.cpp
+++ b/projects/cpp/src/test_data/enum_info_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/cpp/test_data/entity_td.hpp"
 #include "dogen/cpp/test_data/enum_info_td.hpp"
 #include "dogen/cpp/test_data/enumerator_info_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 
 namespace {
 
@@ -53,7 +53,7 @@ enum_info_generator::enum_info_generator() : position_(0) { }
 
 void enum_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
     v.enumerators(create_std_list_dogen_cpp_enumerator_info(position + 0));
     v.type(create_std_string(position + 1));
 }
diff --git a/projects/cpp/src/test_data/exception_info_td.cpp b/projects/cpp/src/test_data/exception_info_td.cpp
index f249a84..a856358 100644
--- a/projects/cpp/src/test_data/exception_info_td.cpp
+++ b/projects/cpp/src/test_data/exception_info_td.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/test_data/entity_td.hpp"
 #include "dogen/cpp/test_data/exception_info_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 
 
 
@@ -30,7 +30,7 @@ exception_info_generator::exception_info_generator() : position_(0) { }
 
 void exception_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
 }
 
 exception_info_generator::result_type
diff --git a/projects/cpp/src/test_data/file_info_td.cpp b/projects/cpp/src/test_data/file_info_td.cpp
index 11e95bf..1ea7970 100644
--- a/projects/cpp/src/test_data/file_info_td.cpp
+++ b/projects/cpp/src/test_data/file_info_td.cpp
@@ -19,10 +19,17 @@
  *
  */
 #include <sstream>
+#include "dogen/cpp/test_data/class_info_td.hpp"
 #include "dogen/cpp/test_data/content_descriptor_td.hpp"
-#include "dogen/cpp/test_data/entity_td.hpp"
+#include "dogen/cpp/test_data/enum_info_td.hpp"
+#include "dogen/cpp/test_data/exception_info_td.hpp"
 #include "dogen/cpp/test_data/file_info_td.hpp"
+#include "dogen/cpp/test_data/forward_declaration_info_td.hpp"
+#include "dogen/cpp/test_data/includer_info_td.hpp"
 #include "dogen/cpp/test_data/includes_td.hpp"
+#include "dogen/cpp/test_data/namespace_info_td.hpp"
+#include "dogen/cpp/test_data/registrar_info_td.hpp"
+#include "dogen/cpp/test_data/visitor_info_td.hpp"
 
 namespace {
 
@@ -49,15 +56,11 @@ create_boost_filesystem_path(const unsigned int position) {
     return boost::filesystem::path(s.str());
 }
 
-dogen::cpp::entity*
-create_dogen_cpp_entity_ptr(const unsigned int position) {
-    return dogen::cpp::entity_generator::create_ptr(position);
-}
-
-boost::shared_ptr<dogen::cpp::entity>
-create_boost_shared_ptr_dogen_cpp_entity(unsigned int position) {
-    boost::shared_ptr<dogen::cpp::entity> r(
-        create_dogen_cpp_entity_ptr(position));
+std::list<std::string> create_std_list_std_string(unsigned int position) {
+    std::list<std::string> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_std_string(position + i));
+    }
     return r;
 }
 
@@ -66,35 +69,37 @@ create_boost_shared_ptr_dogen_cpp_entity(unsigned int position) {
 namespace dogen {
 namespace cpp {
 
-file_info_generator::file_info_generator() : position_(0) { }
 
 void file_info_generator::
 populate(const unsigned int position, result_type& v) {
-    v.documentation(create_std_string(position + 0));
-    v.includes(create_dogen_cpp_includes(position + 1));
-    v.descriptor(create_dogen_cpp_content_descriptor(position + 2));
-    v.header_guard(create_std_string(position + 3));
-    v.file_path(create_boost_filesystem_path(position + 4));
-    v.relative_path(create_boost_filesystem_path(position + 5));
-    v.entity(create_boost_shared_ptr_dogen_cpp_entity(position + 6));
+    v.name(create_std_string(position + 0));
+    v.documentation(create_std_string(position + 1));
+    v.includes(create_dogen_cpp_includes(position + 2));
+    v.descriptor(create_dogen_cpp_content_descriptor(position + 3));
+    v.header_guard(create_std_string(position + 4));
+    v.file_path(create_boost_filesystem_path(position + 5));
+    v.relative_path(create_boost_filesystem_path(position + 6));
+    v.namespaces(create_std_list_std_string(position + 7));
 }
 
-file_info_generator::result_type
-file_info_generator::create(const unsigned int position) {
-    file_info r;
-    file_info_generator::populate(position, r);
-    return r;
-}
 file_info_generator::result_type*
 file_info_generator::create_ptr(const unsigned int position) {
-    file_info* p = new file_info();
-    file_info_generator::populate(position, *p);
-    return p;
+    if ((position % 7) == 0)
+        return dogen::cpp::enum_info_generator::create_ptr(position);
+    if ((position % 7) == 1)
+        return dogen::cpp::exception_info_generator::create_ptr(position);
+    if ((position % 7) == 2)
+        return dogen::cpp::registrar_info_generator::create_ptr(position);
+    if ((position % 7) == 3)
+        return dogen::cpp::namespace_info_generator::create_ptr(position);
+    if ((position % 7) == 4)
+        return dogen::cpp::visitor_info_generator::create_ptr(position);
+    if ((position % 7) == 5)
+        return dogen::cpp::forward_declaration_info_generator::create_ptr(position);
+    if ((position % 7) == 6)
+        return dogen::cpp::includer_info_generator::create_ptr(position);
+    return dogen::cpp::class_info_generator::create_ptr(position);
 }
 
-file_info_generator::result_type
-file_info_generator::operator()() {
-    return create(position_++);
-}
 
 } }
diff --git a/projects/cpp/src/test_data/forward_declaration_info_td.cpp b/projects/cpp/src/test_data/forward_declaration_info_td.cpp
new file mode 100644
index 0000000..5c6acb8
--- /dev/null
+++ b/projects/cpp/src/test_data/forward_declaration_info_td.cpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/test_data/file_info_td.hpp"
+#include "dogen/cpp/test_data/forward_declaration_info_td.hpp"
+
+
+
+namespace dogen {
+namespace cpp {
+
+forward_declaration_info_generator::forward_declaration_info_generator() : position_(0) { }
+
+void forward_declaration_info_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::cpp::file_info_generator::populate(position, v);
+}
+
+forward_declaration_info_generator::result_type
+forward_declaration_info_generator::create(const unsigned int position) {
+    forward_declaration_info r;
+    forward_declaration_info_generator::populate(position, r);
+    return r;
+}
+forward_declaration_info_generator::result_type*
+forward_declaration_info_generator::create_ptr(const unsigned int position) {
+    forward_declaration_info* p = new forward_declaration_info();
+    forward_declaration_info_generator::populate(position, *p);
+    return p;
+}
+
+forward_declaration_info_generator::result_type
+forward_declaration_info_generator::operator()() {
+    return create(position_++);
+}
+
+} }
diff --git a/projects/cpp/src/test_data/includer_info_td.cpp b/projects/cpp/src/test_data/includer_info_td.cpp
new file mode 100644
index 0000000..e567fe3
--- /dev/null
+++ b/projects/cpp/src/test_data/includer_info_td.cpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/test_data/file_info_td.hpp"
+#include "dogen/cpp/test_data/includer_info_td.hpp"
+
+
+
+namespace dogen {
+namespace cpp {
+
+includer_info_generator::includer_info_generator() : position_(0) { }
+
+void includer_info_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::cpp::file_info_generator::populate(position, v);
+}
+
+includer_info_generator::result_type
+includer_info_generator::create(const unsigned int position) {
+    includer_info r;
+    includer_info_generator::populate(position, r);
+    return r;
+}
+includer_info_generator::result_type*
+includer_info_generator::create_ptr(const unsigned int position) {
+    includer_info* p = new includer_info();
+    includer_info_generator::populate(position, *p);
+    return p;
+}
+
+includer_info_generator::result_type
+includer_info_generator::operator()() {
+    return create(position_++);
+}
+
+} }
diff --git a/projects/cpp/src/test_data/namespace_info_td.cpp b/projects/cpp/src/test_data/namespace_info_td.cpp
index 3930522..340e834 100644
--- a/projects/cpp/src/test_data/namespace_info_td.cpp
+++ b/projects/cpp/src/test_data/namespace_info_td.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/test_data/entity_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 #include "dogen/cpp/test_data/namespace_info_td.hpp"
 
 
@@ -30,7 +30,7 @@ namespace_info_generator::namespace_info_generator() : position_(0) { }
 
 void namespace_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
 }
 
 namespace_info_generator::result_type
diff --git a/projects/cpp/src/test_data/project_td.cpp b/projects/cpp/src/test_data/project_td.cpp
index 1149a86..71b8ea3 100644
--- a/projects/cpp/src/test_data/project_td.cpp
+++ b/projects/cpp/src/test_data/project_td.cpp
@@ -18,26 +18,20 @@
  * MA 02110-1301, USA.
  *
  */
+#include "dogen/cpp/test_data/class_info_td.hpp"
 #include "dogen/cpp/test_data/cmakelists_info_td.hpp"
-#include "dogen/cpp/test_data/file_info_td.hpp"
+#include "dogen/cpp/test_data/enum_info_td.hpp"
+#include "dogen/cpp/test_data/exception_info_td.hpp"
+#include "dogen/cpp/test_data/forward_declaration_info_td.hpp"
+#include "dogen/cpp/test_data/includer_info_td.hpp"
+#include "dogen/cpp/test_data/namespace_info_td.hpp"
 #include "dogen/cpp/test_data/odb_options_info_td.hpp"
 #include "dogen/cpp/test_data/project_td.hpp"
+#include "dogen/cpp/test_data/registrar_info_td.hpp"
+#include "dogen/cpp/test_data/visitor_info_td.hpp"
 
 namespace {
 
-dogen::cpp::file_info
-create_dogen_cpp_file_info(const unsigned int position) {
-    return dogen::cpp::file_info_generator::create(position);
-}
-
-std::list<dogen::cpp::file_info> create_std_list_dogen_cpp_file_info(unsigned int position) {
-    std::list<dogen::cpp::file_info> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_cpp_file_info(position + i));
-    }
-    return r;
-}
-
 dogen::cpp::odb_options_info
 create_dogen_cpp_odb_options_info(const unsigned int position) {
     return dogen::cpp::odb_options_info_generator::create(position);
@@ -55,6 +49,110 @@ create_boost_optional_dogen_cpp_cmakelists_info(unsigned int position) {
     return r;
 }
 
+dogen::cpp::namespace_info
+create_dogen_cpp_namespace_info(const unsigned int position) {
+    return dogen::cpp::namespace_info_generator::create(position);
+}
+
+std::list<dogen::cpp::namespace_info> create_std_list_dogen_cpp_namespace_info(unsigned int position) {
+    std::list<dogen::cpp::namespace_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_namespace_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::visitor_info
+create_dogen_cpp_visitor_info(const unsigned int position) {
+    return dogen::cpp::visitor_info_generator::create(position);
+}
+
+std::list<dogen::cpp::visitor_info> create_std_list_dogen_cpp_visitor_info(unsigned int position) {
+    std::list<dogen::cpp::visitor_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_visitor_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::enum_info
+create_dogen_cpp_enum_info(const unsigned int position) {
+    return dogen::cpp::enum_info_generator::create(position);
+}
+
+std::list<dogen::cpp::enum_info> create_std_list_dogen_cpp_enum_info(unsigned int position) {
+    std::list<dogen::cpp::enum_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_enum_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::class_info
+create_dogen_cpp_class_info(const unsigned int position) {
+    return dogen::cpp::class_info_generator::create(position);
+}
+
+std::list<dogen::cpp::class_info> create_std_list_dogen_cpp_class_info(unsigned int position) {
+    std::list<dogen::cpp::class_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_class_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::exception_info
+create_dogen_cpp_exception_info(const unsigned int position) {
+    return dogen::cpp::exception_info_generator::create(position);
+}
+
+std::list<dogen::cpp::exception_info> create_std_list_dogen_cpp_exception_info(unsigned int position) {
+    std::list<dogen::cpp::exception_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_exception_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::registrar_info
+create_dogen_cpp_registrar_info(const unsigned int position) {
+    return dogen::cpp::registrar_info_generator::create(position);
+}
+
+std::list<dogen::cpp::registrar_info> create_std_list_dogen_cpp_registrar_info(unsigned int position) {
+    std::list<dogen::cpp::registrar_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_registrar_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::forward_declaration_info
+create_dogen_cpp_forward_declaration_info(const unsigned int position) {
+    return dogen::cpp::forward_declaration_info_generator::create(position);
+}
+
+std::list<dogen::cpp::forward_declaration_info> create_std_list_dogen_cpp_forward_declaration_info(unsigned int position) {
+    std::list<dogen::cpp::forward_declaration_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_forward_declaration_info(position + i));
+    }
+    return r;
+}
+
+dogen::cpp::includer_info
+create_dogen_cpp_includer_info(const unsigned int position) {
+    return dogen::cpp::includer_info_generator::create(position);
+}
+
+std::list<dogen::cpp::includer_info> create_std_list_dogen_cpp_includer_info(unsigned int position) {
+    std::list<dogen::cpp::includer_info> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_cpp_includer_info(position + i));
+    }
+    return r;
+}
+
 }
 
 namespace dogen {
@@ -64,10 +162,17 @@ project_generator::project_generator() : position_(0) { }
 
 void project_generator::
 populate(const unsigned int position, result_type& v) {
-    v.files(create_std_list_dogen_cpp_file_info(position + 0));
-    v.odb_options(create_dogen_cpp_odb_options_info(position + 1));
-    v.src_cmakelists(create_dogen_cpp_cmakelists_info(position + 2));
-    v.include_cmakelists(create_boost_optional_dogen_cpp_cmakelists_info(position + 3));
+    v.odb_options(create_dogen_cpp_odb_options_info(position + 0));
+    v.src_cmakelists(create_dogen_cpp_cmakelists_info(position + 1));
+    v.include_cmakelists(create_boost_optional_dogen_cpp_cmakelists_info(position + 2));
+    v.namespaces(create_std_list_dogen_cpp_namespace_info(position + 3));
+    v.visitors(create_std_list_dogen_cpp_visitor_info(position + 4));
+    v.enumerations(create_std_list_dogen_cpp_enum_info(position + 5));
+    v.classes(create_std_list_dogen_cpp_class_info(position + 6));
+    v.exceptions(create_std_list_dogen_cpp_exception_info(position + 7));
+    v.registrars(create_std_list_dogen_cpp_registrar_info(position + 8));
+    v.forward_declarations(create_std_list_dogen_cpp_forward_declaration_info(position + 9));
+    v.includers(create_std_list_dogen_cpp_includer_info(position + 10));
 }
 
 project_generator::result_type
diff --git a/projects/cpp/src/test_data/registrar_info_td.cpp b/projects/cpp/src/test_data/registrar_info_td.cpp
index e0e26ba..ac2a70e 100644
--- a/projects/cpp/src/test_data/registrar_info_td.cpp
+++ b/projects/cpp/src/test_data/registrar_info_td.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <sstream>
-#include "dogen/cpp/test_data/entity_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 #include "dogen/cpp/test_data/registrar_info_td.hpp"
 
 namespace {
@@ -47,7 +47,7 @@ registrar_info_generator::registrar_info_generator() : position_(0) { }
 
 void registrar_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
     v.leaves(create_std_list_std_string(position + 0));
     v.model_dependencies(create_std_list_std_string(position + 1));
 }
diff --git a/projects/cpp/src/test_data/visitor_info_td.cpp b/projects/cpp/src/test_data/visitor_info_td.cpp
index ffcbd12..b74e2b4 100644
--- a/projects/cpp/src/test_data/visitor_info_td.cpp
+++ b/projects/cpp/src/test_data/visitor_info_td.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <sstream>
-#include "dogen/cpp/test_data/entity_td.hpp"
+#include "dogen/cpp/test_data/file_info_td.hpp"
 #include "dogen/cpp/test_data/visitor_info_td.hpp"
 
 namespace {
@@ -47,7 +47,7 @@ visitor_info_generator::visitor_info_generator() : position_(0) { }
 
 void visitor_info_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::cpp::entity_generator::populate(position, v);
+    dogen::cpp::file_info_generator::populate(position, v);
     v.types(create_std_list_std_string(position + 0));
 }
 
diff --git a/projects/cpp/src/types/class_info.cpp b/projects/cpp/src/types/class_info.cpp
index 9d8e2f0..5ad096c 100644
--- a/projects/cpp/src/types/class_info.cpp
+++ b/projects/cpp/src/types/class_info.cpp
@@ -22,7 +22,7 @@
 #include <boost/io/ios_state.hpp>
 #include <ostream>
 #include "dogen/cpp/io/class_types_io.hpp"
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/io/parent_info_io.hpp"
 #include "dogen/cpp/io/property_info_io.hpp"
 #include "dogen/cpp/types/class_info.hpp"
@@ -126,6 +126,11 @@ class_info::class_info()
 class_info::class_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces,
     const std::list<dogen::cpp::property_info>& properties,
     const std::list<dogen::cpp::property_info>& all_properties,
@@ -147,8 +152,13 @@ class_info::class_info(
     const dogen::sml::generation_types& generation_type,
     const bool generate_complete_constructor,
     const bool enable_integrated_io)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces),
       properties_(properties),
       all_properties_(all_properties),
@@ -181,7 +191,7 @@ void class_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::class_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << ", "
       << "\"properties\": " << properties_ << ", "
       << "\"all_properties\": " << all_properties_ << ", "
@@ -207,7 +217,7 @@ void class_info::to_stream(std::ostream& s) const {
 }
 
 void class_info::swap(class_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
     using std::swap;
     swap(properties_, other.properties_);
@@ -232,14 +242,14 @@ void class_info::swap(class_info& other) noexcept {
     swap(enable_integrated_io_, other.enable_integrated_io_);
 }
 
-bool class_info::equals(const dogen::cpp::entity& other) const {
+bool class_info::equals(const dogen::cpp::file_info& other) const {
     const class_info* const p(dynamic_cast<const class_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool class_info::operator==(const class_info& rhs) const {
-    return entity::compare(rhs) &&
+    return file_info::compare(rhs) &&
         properties_ == rhs.properties_ &&
         all_properties_ == rhs.all_properties_ &&
         has_primitive_properties_ == rhs.has_primitive_properties_ &&
diff --git a/projects/cpp/src/types/entity.cpp b/projects/cpp/src/types/entity.cpp
deleted file mode 100644
index 52e9218..0000000
--- a/projects/cpp/src/types/entity.cpp
+++ /dev/null
@@ -1,128 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <boost/algorithm/string.hpp>
-#include <ostream>
-#include "dogen/cpp/types/entity.hpp"
-
-
-inline std::string tidy_up_string(std::string s) {
-    boost::replace_all(s, "\r\n", "<new_line>");
-    boost::replace_all(s, "\n", "<new_line>");
-    boost::replace_all(s, "\"", "<quote>");
-    return s;
-}
-
-namespace std {
-
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v) {
-    s << "[ ";
-    for (auto i(v.begin()); i != v.end(); ++i) {
-        if (i != v.begin()) s << ", ";
-        s << "\"" << tidy_up_string(*i) << "\"";
-    }
-    s << "] ";
-    return s;
-}
-
-}
-
-namespace dogen {
-namespace cpp {
-
-entity::entity(
-    const std::string& name,
-    const std::string& documentation,
-    const std::list<std::string>& namespaces)
-    : name_(name),
-      documentation_(documentation),
-      namespaces_(namespaces) { }
-
-void entity::to_stream(std::ostream& s) const {
-    s << " { "
-      << "\"__type__\": " << "\"dogen::cpp::entity\"" << ", "
-      << "\"name\": " << "\"" << tidy_up_string(name_) << "\"" << ", "
-      << "\"documentation\": " << "\"" << tidy_up_string(documentation_) << "\"" << ", "
-      << "\"namespaces\": " << namespaces_
-      << " }";
-}
-
-void entity::swap(entity& other) noexcept {
-    using std::swap;
-    swap(name_, other.name_);
-    swap(documentation_, other.documentation_);
-    swap(namespaces_, other.namespaces_);
-}
-
-bool entity::compare(const entity& rhs) const {
-    return name_ == rhs.name_ &&
-        documentation_ == rhs.documentation_ &&
-        namespaces_ == rhs.namespaces_;
-}
-
-const std::string& entity::name() const {
-    return name_;
-}
-
-std::string& entity::name() {
-    return name_;
-}
-
-void entity::name(const std::string& v) {
-    name_ = v;
-}
-
-void entity::name(const std::string&& v) {
-    name_ = std::move(v);
-}
-
-const std::string& entity::documentation() const {
-    return documentation_;
-}
-
-std::string& entity::documentation() {
-    return documentation_;
-}
-
-void entity::documentation(const std::string& v) {
-    documentation_ = v;
-}
-
-void entity::documentation(const std::string&& v) {
-    documentation_ = std::move(v);
-}
-
-const std::list<std::string>& entity::namespaces() const {
-    return namespaces_;
-}
-
-std::list<std::string>& entity::namespaces() {
-    return namespaces_;
-}
-
-void entity::namespaces(const std::list<std::string>& v) {
-    namespaces_ = v;
-}
-
-void entity::namespaces(const std::list<std::string>&& v) {
-    namespaces_ = std::move(v);
-}
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/types/enum_info.cpp b/projects/cpp/src/types/enum_info.cpp
index 2c99302..9edab40 100644
--- a/projects/cpp/src/types/enum_info.cpp
+++ b/projects/cpp/src/types/enum_info.cpp
@@ -20,8 +20,8 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
 #include "dogen/cpp/io/enumerator_info_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/types/enum_info.hpp"
 
 namespace std {
@@ -52,11 +52,21 @@ namespace cpp {
 enum_info::enum_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces,
     const std::list<dogen::cpp::enumerator_info>& enumerators,
     const std::string& type)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces),
       enumerators_(enumerators),
       type_(type) { }
@@ -65,7 +75,7 @@ void enum_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::enum_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << ", "
       << "\"enumerators\": " << enumerators_ << ", "
       << "\"type\": " << "\"" << tidy_up_string(type_) << "\""
@@ -73,21 +83,21 @@ void enum_info::to_stream(std::ostream& s) const {
 }
 
 void enum_info::swap(enum_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
     using std::swap;
     swap(enumerators_, other.enumerators_);
     swap(type_, other.type_);
 }
 
-bool enum_info::equals(const dogen::cpp::entity& other) const {
+bool enum_info::equals(const dogen::cpp::file_info& other) const {
     const enum_info* const p(dynamic_cast<const enum_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool enum_info::operator==(const enum_info& rhs) const {
-    return entity::compare(rhs) &&
+    return file_info::compare(rhs) &&
         enumerators_ == rhs.enumerators_ &&
         type_ == rhs.type_;
 }
diff --git a/projects/cpp/src/types/exception_info.cpp b/projects/cpp/src/types/exception_info.cpp
index 87843bf..0fe3d3c 100644
--- a/projects/cpp/src/types/exception_info.cpp
+++ b/projects/cpp/src/types/exception_info.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/types/exception_info.hpp"
 
 namespace dogen {
@@ -28,32 +28,42 @@ namespace cpp {
 exception_info::exception_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces) { }
 
 void exception_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::exception_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << " }";
 }
 
 void exception_info::swap(exception_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
 }
 
-bool exception_info::equals(const dogen::cpp::entity& other) const {
+bool exception_info::equals(const dogen::cpp::file_info& other) const {
     const exception_info* const p(dynamic_cast<const exception_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool exception_info::operator==(const exception_info& rhs) const {
-    return entity::compare(rhs);
+    return file_info::compare(rhs);
 }
 
 exception_info& exception_info::operator=(exception_info other) {
diff --git a/projects/cpp/src/types/file_info.cpp b/projects/cpp/src/types/file_info.cpp
index e375025..92257f8 100644
--- a/projects/cpp/src/types/file_info.cpp
+++ b/projects/cpp/src/types/file_info.cpp
@@ -18,14 +18,30 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/types/entity.hpp"
+#include <boost/algorithm/string.hpp>
+#include <ostream>
+#include "dogen/cpp/io/content_descriptor_io.hpp"
+#include "dogen/cpp/io/includes_io.hpp"
 #include "dogen/cpp/types/file_info.hpp"
 
-namespace boost {
 
-inline bool operator==(const boost::shared_ptr<dogen::cpp::entity>& lhs,
-const boost::shared_ptr<dogen::cpp::entity>& rhs) {
-    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+inline std::string tidy_up_string(std::string s) {
+    boost::replace_all(s, "\r\n", "<new_line>");
+    boost::replace_all(s, "\n", "<new_line>");
+    boost::replace_all(s, "\"", "<quote>");
+    return s;
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v) {
+    s << "[ ";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << "\"" << tidy_up_string(*i) << "\"";
+    }
+    s << "] ";
+    return s;
 }
 
 }
@@ -34,55 +50,84 @@ namespace dogen {
 namespace cpp {
 
 file_info::file_info(file_info&& rhs)
-    : documentation_(std::move(rhs.documentation_)),
+    : name_(std::move(rhs.name_)),
+      documentation_(std::move(rhs.documentation_)),
       includes_(std::move(rhs.includes_)),
       descriptor_(std::move(rhs.descriptor_)),
       header_guard_(std::move(rhs.header_guard_)),
       file_path_(std::move(rhs.file_path_)),
       relative_path_(std::move(rhs.relative_path_)),
-      entity_(std::move(rhs.entity_)) { }
+      namespaces_(std::move(rhs.namespaces_)) { }
 
 file_info::file_info(
+    const std::string& name,
     const std::string& documentation,
     const dogen::cpp::includes& includes,
     const dogen::cpp::content_descriptor& descriptor,
     const std::string& header_guard,
     const boost::filesystem::path& file_path,
     const boost::filesystem::path& relative_path,
-    const boost::shared_ptr<dogen::cpp::entity>& entity)
-    : documentation_(documentation),
+    const std::list<std::string>& namespaces)
+    : name_(name),
+      documentation_(documentation),
       includes_(includes),
       descriptor_(descriptor),
       header_guard_(header_guard),
       file_path_(file_path),
       relative_path_(relative_path),
-      entity_(entity) { }
+      namespaces_(namespaces) { }
+
+void file_info::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::cpp::file_info\"" << ", "
+      << "\"name\": " << "\"" << tidy_up_string(name_) << "\"" << ", "
+      << "\"documentation\": " << "\"" << tidy_up_string(documentation_) << "\"" << ", "
+      << "\"includes\": " << includes_ << ", "
+      << "\"descriptor\": " << descriptor_ << ", "
+      << "\"header_guard\": " << "\"" << tidy_up_string(header_guard_) << "\"" << ", "
+      << "\"file_path\": " << "\"" << file_path_.generic_string() << "\"" << ", "
+      << "\"relative_path\": " << "\"" << relative_path_.generic_string() << "\"" << ", "
+      << "\"namespaces\": " << namespaces_
+      << " }";
+}
 
 void file_info::swap(file_info& other) noexcept {
     using std::swap;
+    swap(name_, other.name_);
     swap(documentation_, other.documentation_);
     swap(includes_, other.includes_);
     swap(descriptor_, other.descriptor_);
     swap(header_guard_, other.header_guard_);
     swap(file_path_, other.file_path_);
     swap(relative_path_, other.relative_path_);
-    swap(entity_, other.entity_);
+    swap(namespaces_, other.namespaces_);
 }
 
-bool file_info::operator==(const file_info& rhs) const {
-    return documentation_ == rhs.documentation_ &&
+bool file_info::compare(const file_info& rhs) const {
+    return name_ == rhs.name_ &&
+        documentation_ == rhs.documentation_ &&
         includes_ == rhs.includes_ &&
         descriptor_ == rhs.descriptor_ &&
         header_guard_ == rhs.header_guard_ &&
         file_path_ == rhs.file_path_ &&
         relative_path_ == rhs.relative_path_ &&
-        entity_ == rhs.entity_;
+        namespaces_ == rhs.namespaces_;
 }
 
-file_info& file_info::operator=(file_info other) {
-    using std::swap;
-    swap(*this, other);
-    return *this;
+const std::string& file_info::name() const {
+    return name_;
+}
+
+std::string& file_info::name() {
+    return name_;
+}
+
+void file_info::name(const std::string& v) {
+    name_ = v;
+}
+
+void file_info::name(const std::string&& v) {
+    name_ = std::move(v);
 }
 
 const std::string& file_info::documentation() const {
@@ -181,20 +226,20 @@ void file_info::relative_path(const boost::filesystem::path&& v) {
     relative_path_ = std::move(v);
 }
 
-const boost::shared_ptr<dogen::cpp::entity>& file_info::entity() const {
-    return entity_;
+const std::list<std::string>& file_info::namespaces() const {
+    return namespaces_;
 }
 
-boost::shared_ptr<dogen::cpp::entity>& file_info::entity() {
-    return entity_;
+std::list<std::string>& file_info::namespaces() {
+    return namespaces_;
 }
 
-void file_info::entity(const boost::shared_ptr<dogen::cpp::entity>& v) {
-    entity_ = v;
+void file_info::namespaces(const std::list<std::string>& v) {
+    namespaces_ = v;
 }
 
-void file_info::entity(const boost::shared_ptr<dogen::cpp::entity>&& v) {
-    entity_ = std::move(v);
+void file_info::namespaces(const std::list<std::string>&& v) {
+    namespaces_ = std::move(v);
 }
 
 } }
\ No newline at end of file
diff --git a/projects/cpp/src/types/forward_declaration_info.cpp b/projects/cpp/src/types/forward_declaration_info.cpp
new file mode 100644
index 0000000..dc2a9ff
--- /dev/null
+++ b/projects/cpp/src/types/forward_declaration_info.cpp
@@ -0,0 +1,75 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/cpp/io/file_info_io.hpp"
+#include "dogen/cpp/types/forward_declaration_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+forward_declaration_info::forward_declaration_info(
+    const std::string& name,
+    const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
+    const std::list<std::string>& namespaces)
+    : dogen::cpp::file_info(name,
+      documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
+      namespaces) { }
+
+void forward_declaration_info::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::cpp::forward_declaration_info\"" << ", "
+      << "\"__parent_0__\": ";
+    file_info::to_stream(s);
+    s << " }";
+}
+
+void forward_declaration_info::swap(forward_declaration_info& other) noexcept {
+    file_info::swap(other);
+
+}
+
+bool forward_declaration_info::equals(const dogen::cpp::file_info& other) const {
+    const forward_declaration_info* const p(dynamic_cast<const forward_declaration_info* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool forward_declaration_info::operator==(const forward_declaration_info& rhs) const {
+    return file_info::compare(rhs);
+}
+
+forward_declaration_info& forward_declaration_info::operator=(forward_declaration_info other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/types/includer_info.cpp b/projects/cpp/src/types/includer_info.cpp
new file mode 100644
index 0000000..879ca6b
--- /dev/null
+++ b/projects/cpp/src/types/includer_info.cpp
@@ -0,0 +1,75 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/cpp/io/file_info_io.hpp"
+#include "dogen/cpp/types/includer_info.hpp"
+
+namespace dogen {
+namespace cpp {
+
+includer_info::includer_info(
+    const std::string& name,
+    const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
+    const std::list<std::string>& namespaces)
+    : dogen::cpp::file_info(name,
+      documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
+      namespaces) { }
+
+void includer_info::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::cpp::includer_info\"" << ", "
+      << "\"__parent_0__\": ";
+    file_info::to_stream(s);
+    s << " }";
+}
+
+void includer_info::swap(includer_info& other) noexcept {
+    file_info::swap(other);
+
+}
+
+bool includer_info::equals(const dogen::cpp::file_info& other) const {
+    const includer_info* const p(dynamic_cast<const includer_info* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool includer_info::operator==(const includer_info& rhs) const {
+    return file_info::compare(rhs);
+}
+
+includer_info& includer_info::operator=(includer_info other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/types/namespace_info.cpp b/projects/cpp/src/types/namespace_info.cpp
index 36ec8c8..fcc4562 100644
--- a/projects/cpp/src/types/namespace_info.cpp
+++ b/projects/cpp/src/types/namespace_info.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/types/namespace_info.hpp"
 
 namespace dogen {
@@ -28,32 +28,42 @@ namespace cpp {
 namespace_info::namespace_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces) { }
 
 void namespace_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::namespace_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << " }";
 }
 
 void namespace_info::swap(namespace_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
 }
 
-bool namespace_info::equals(const dogen::cpp::entity& other) const {
+bool namespace_info::equals(const dogen::cpp::file_info& other) const {
     const namespace_info* const p(dynamic_cast<const namespace_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool namespace_info::operator==(const namespace_info& rhs) const {
-    return entity::compare(rhs);
+    return file_info::compare(rhs);
 }
 
 namespace_info& namespace_info::operator=(namespace_info other) {
diff --git a/projects/cpp/src/types/project.cpp b/projects/cpp/src/types/project.cpp
index 1a3a1e5..d5e9df1 100644
--- a/projects/cpp/src/types/project.cpp
+++ b/projects/cpp/src/types/project.cpp
@@ -24,34 +24,69 @@ namespace dogen {
 namespace cpp {
 
 project::project(project&& rhs)
-    : files_(std::move(rhs.files_)),
-      odb_options_(std::move(rhs.odb_options_)),
+    : odb_options_(std::move(rhs.odb_options_)),
       src_cmakelists_(std::move(rhs.src_cmakelists_)),
-      include_cmakelists_(std::move(rhs.include_cmakelists_)) { }
+      include_cmakelists_(std::move(rhs.include_cmakelists_)),
+      namespaces_(std::move(rhs.namespaces_)),
+      visitors_(std::move(rhs.visitors_)),
+      enumerations_(std::move(rhs.enumerations_)),
+      classes_(std::move(rhs.classes_)),
+      exceptions_(std::move(rhs.exceptions_)),
+      registrars_(std::move(rhs.registrars_)),
+      forward_declarations_(std::move(rhs.forward_declarations_)),
+      includers_(std::move(rhs.includers_)) { }
 
 project::project(
-    const std::list<dogen::cpp::file_info>& files,
     const dogen::cpp::odb_options_info& odb_options,
     const dogen::cpp::cmakelists_info& src_cmakelists,
-    const boost::optional<dogen::cpp::cmakelists_info>& include_cmakelists)
-    : files_(files),
-      odb_options_(odb_options),
+    const boost::optional<dogen::cpp::cmakelists_info>& include_cmakelists,
+    const std::list<dogen::cpp::namespace_info>& namespaces,
+    const std::list<dogen::cpp::visitor_info>& visitors,
+    const std::list<dogen::cpp::enum_info>& enumerations,
+    const std::list<dogen::cpp::class_info>& classes,
+    const std::list<dogen::cpp::exception_info>& exceptions,
+    const std::list<dogen::cpp::registrar_info>& registrars,
+    const std::list<dogen::cpp::forward_declaration_info>& forward_declarations,
+    const std::list<dogen::cpp::includer_info>& includers)
+    : odb_options_(odb_options),
       src_cmakelists_(src_cmakelists),
-      include_cmakelists_(include_cmakelists) { }
+      include_cmakelists_(include_cmakelists),
+      namespaces_(namespaces),
+      visitors_(visitors),
+      enumerations_(enumerations),
+      classes_(classes),
+      exceptions_(exceptions),
+      registrars_(registrars),
+      forward_declarations_(forward_declarations),
+      includers_(includers) { }
 
 void project::swap(project& other) noexcept {
     using std::swap;
-    swap(files_, other.files_);
     swap(odb_options_, other.odb_options_);
     swap(src_cmakelists_, other.src_cmakelists_);
     swap(include_cmakelists_, other.include_cmakelists_);
+    swap(namespaces_, other.namespaces_);
+    swap(visitors_, other.visitors_);
+    swap(enumerations_, other.enumerations_);
+    swap(classes_, other.classes_);
+    swap(exceptions_, other.exceptions_);
+    swap(registrars_, other.registrars_);
+    swap(forward_declarations_, other.forward_declarations_);
+    swap(includers_, other.includers_);
 }
 
 bool project::operator==(const project& rhs) const {
-    return files_ == rhs.files_ &&
-        odb_options_ == rhs.odb_options_ &&
+    return odb_options_ == rhs.odb_options_ &&
         src_cmakelists_ == rhs.src_cmakelists_ &&
-        include_cmakelists_ == rhs.include_cmakelists_;
+        include_cmakelists_ == rhs.include_cmakelists_ &&
+        namespaces_ == rhs.namespaces_ &&
+        visitors_ == rhs.visitors_ &&
+        enumerations_ == rhs.enumerations_ &&
+        classes_ == rhs.classes_ &&
+        exceptions_ == rhs.exceptions_ &&
+        registrars_ == rhs.registrars_ &&
+        forward_declarations_ == rhs.forward_declarations_ &&
+        includers_ == rhs.includers_;
 }
 
 project& project::operator=(project other) {
@@ -60,22 +95,6 @@ project& project::operator=(project other) {
     return *this;
 }
 
-const std::list<dogen::cpp::file_info>& project::files() const {
-    return files_;
-}
-
-std::list<dogen::cpp::file_info>& project::files() {
-    return files_;
-}
-
-void project::files(const std::list<dogen::cpp::file_info>& v) {
-    files_ = v;
-}
-
-void project::files(const std::list<dogen::cpp::file_info>&& v) {
-    files_ = std::move(v);
-}
-
 const dogen::cpp::odb_options_info& project::odb_options() const {
     return odb_options_;
 }
@@ -124,4 +143,132 @@ void project::include_cmakelists(const boost::optional<dogen::cpp::cmakelists_in
     include_cmakelists_ = std::move(v);
 }
 
+const std::list<dogen::cpp::namespace_info>& project::namespaces() const {
+    return namespaces_;
+}
+
+std::list<dogen::cpp::namespace_info>& project::namespaces() {
+    return namespaces_;
+}
+
+void project::namespaces(const std::list<dogen::cpp::namespace_info>& v) {
+    namespaces_ = v;
+}
+
+void project::namespaces(const std::list<dogen::cpp::namespace_info>&& v) {
+    namespaces_ = std::move(v);
+}
+
+const std::list<dogen::cpp::visitor_info>& project::visitors() const {
+    return visitors_;
+}
+
+std::list<dogen::cpp::visitor_info>& project::visitors() {
+    return visitors_;
+}
+
+void project::visitors(const std::list<dogen::cpp::visitor_info>& v) {
+    visitors_ = v;
+}
+
+void project::visitors(const std::list<dogen::cpp::visitor_info>&& v) {
+    visitors_ = std::move(v);
+}
+
+const std::list<dogen::cpp::enum_info>& project::enumerations() const {
+    return enumerations_;
+}
+
+std::list<dogen::cpp::enum_info>& project::enumerations() {
+    return enumerations_;
+}
+
+void project::enumerations(const std::list<dogen::cpp::enum_info>& v) {
+    enumerations_ = v;
+}
+
+void project::enumerations(const std::list<dogen::cpp::enum_info>&& v) {
+    enumerations_ = std::move(v);
+}
+
+const std::list<dogen::cpp::class_info>& project::classes() const {
+    return classes_;
+}
+
+std::list<dogen::cpp::class_info>& project::classes() {
+    return classes_;
+}
+
+void project::classes(const std::list<dogen::cpp::class_info>& v) {
+    classes_ = v;
+}
+
+void project::classes(const std::list<dogen::cpp::class_info>&& v) {
+    classes_ = std::move(v);
+}
+
+const std::list<dogen::cpp::exception_info>& project::exceptions() const {
+    return exceptions_;
+}
+
+std::list<dogen::cpp::exception_info>& project::exceptions() {
+    return exceptions_;
+}
+
+void project::exceptions(const std::list<dogen::cpp::exception_info>& v) {
+    exceptions_ = v;
+}
+
+void project::exceptions(const std::list<dogen::cpp::exception_info>&& v) {
+    exceptions_ = std::move(v);
+}
+
+const std::list<dogen::cpp::registrar_info>& project::registrars() const {
+    return registrars_;
+}
+
+std::list<dogen::cpp::registrar_info>& project::registrars() {
+    return registrars_;
+}
+
+void project::registrars(const std::list<dogen::cpp::registrar_info>& v) {
+    registrars_ = v;
+}
+
+void project::registrars(const std::list<dogen::cpp::registrar_info>&& v) {
+    registrars_ = std::move(v);
+}
+
+const std::list<dogen::cpp::forward_declaration_info>& project::forward_declarations() const {
+    return forward_declarations_;
+}
+
+std::list<dogen::cpp::forward_declaration_info>& project::forward_declarations() {
+    return forward_declarations_;
+}
+
+void project::forward_declarations(const std::list<dogen::cpp::forward_declaration_info>& v) {
+    forward_declarations_ = v;
+}
+
+void project::forward_declarations(const std::list<dogen::cpp::forward_declaration_info>&& v) {
+    forward_declarations_ = std::move(v);
+}
+
+const std::list<dogen::cpp::includer_info>& project::includers() const {
+    return includers_;
+}
+
+std::list<dogen::cpp::includer_info>& project::includers() {
+    return includers_;
+}
+
+void project::includers(const std::list<dogen::cpp::includer_info>& v) {
+    includers_ = v;
+}
+
+void project::includers(const std::list<dogen::cpp::includer_info>&& v) {
+    includers_ = std::move(v);
+}
+
 } }
\ No newline at end of file
diff --git a/projects/cpp/src/types/registrar_info.cpp b/projects/cpp/src/types/registrar_info.cpp
index 2b7c1c5..ccf2030 100644
--- a/projects/cpp/src/types/registrar_info.cpp
+++ b/projects/cpp/src/types/registrar_info.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/types/registrar_info.hpp"
 
 
@@ -51,11 +51,21 @@ namespace cpp {
 registrar_info::registrar_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces,
     const std::list<std::string>& leaves,
     const std::list<std::string>& model_dependencies)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces),
       leaves_(leaves),
       model_dependencies_(model_dependencies) { }
@@ -64,7 +74,7 @@ void registrar_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::registrar_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << ", "
       << "\"leaves\": " << leaves_ << ", "
       << "\"model_dependencies\": " << model_dependencies_
@@ -72,21 +82,21 @@ void registrar_info::to_stream(std::ostream& s) const {
 }
 
 void registrar_info::swap(registrar_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
     using std::swap;
     swap(leaves_, other.leaves_);
     swap(model_dependencies_, other.model_dependencies_);
 }
 
-bool registrar_info::equals(const dogen::cpp::entity& other) const {
+bool registrar_info::equals(const dogen::cpp::file_info& other) const {
     const registrar_info* const p(dynamic_cast<const registrar_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool registrar_info::operator==(const registrar_info& rhs) const {
-    return entity::compare(rhs) &&
+    return file_info::compare(rhs) &&
         leaves_ == rhs.leaves_ &&
         model_dependencies_ == rhs.model_dependencies_;
 }
diff --git a/projects/cpp/src/types/visitor_info.cpp b/projects/cpp/src/types/visitor_info.cpp
index eba4446..53ef07f 100644
--- a/projects/cpp/src/types/visitor_info.cpp
+++ b/projects/cpp/src/types/visitor_info.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/algorithm/string.hpp>
 #include <ostream>
-#include "dogen/cpp/io/entity_io.hpp"
+#include "dogen/cpp/io/file_info_io.hpp"
 #include "dogen/cpp/types/visitor_info.hpp"
 
 
@@ -51,10 +51,20 @@ namespace cpp {
 visitor_info::visitor_info(
     const std::string& name,
     const std::string& documentation,
+    const dogen::cpp::includes& includes,
+    const dogen::cpp::content_descriptor& descriptor,
+    const std::string& header_guard,
+    const boost::filesystem::path& file_path,
+    const boost::filesystem::path& relative_path,
     const std::list<std::string>& namespaces,
     const std::list<std::string>& types)
-    : dogen::cpp::entity(name,
+    : dogen::cpp::file_info(name,
       documentation,
+      includes,
+      descriptor,
+      header_guard,
+      file_path,
+      relative_path,
       namespaces),
       types_(types) { }
 
@@ -62,27 +72,27 @@ void visitor_info::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::visitor_info\"" << ", "
       << "\"__parent_0__\": ";
-    entity::to_stream(s);
+    file_info::to_stream(s);
     s << ", "
       << "\"types\": " << types_
       << " }";
 }
 
 void visitor_info::swap(visitor_info& other) noexcept {
-    entity::swap(other);
+    file_info::swap(other);
 
     using std::swap;
     swap(types_, other.types_);
 }
 
-bool visitor_info::equals(const dogen::cpp::entity& other) const {
+bool visitor_info::equals(const dogen::cpp::file_info& other) const {
     const visitor_info* const p(dynamic_cast<const visitor_info* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool visitor_info::operator==(const visitor_info& rhs) const {
-    return entity::compare(rhs) &&
+    return file_info::compare(rhs) &&
         types_ == rhs.types_;
 }
 
diff --git a/projects/cpp_formatters/include/dogen/cpp_formatters/types/types_main_header_file_formatter.hpp b/projects/cpp_formatters/include/dogen/cpp_formatters/types/types_main_header_file_formatter.hpp
index 01a3fe4..d6cb8ca 100644
--- a/projects/cpp_formatters/include/dogen/cpp_formatters/types/types_main_header_file_formatter.hpp
+++ b/projects/cpp_formatters/include/dogen/cpp_formatters/types/types_main_header_file_formatter.hpp
@@ -33,7 +33,7 @@
 #include "dogen/cpp_formatters/types/indenter.hpp"
 #include "dogen/cpp_formatters/types/utility.hpp"
 #include "dogen/cpp_formatters/types/file_formatter.hpp"
-#include "dogen/cpp/types/entity_visitor.hpp"
+#include "dogen/cpp/types/file_info_visitor.hpp"
 
 namespace dogen {
 namespace cpp_formatters {
@@ -43,7 +43,7 @@ namespace cpp_formatters {
  * aspect.
  */
 class types_main_header_file_formatter : public file_formatter,
-                                         private cpp::entity_visitor {
+                                         private cpp::file_info_visitor {
 public:
     types_main_header_file_formatter() = delete;
     types_main_header_file_formatter(
@@ -72,7 +72,7 @@ private:
     void swap_method(const cpp::class_info& ci);
 
 private:
-    using cpp::entity_visitor::visit;
+    using cpp::file_info_visitor::visit;
     virtual void visit(dogen::cpp::class_info& ci) override;
     virtual void visit(dogen::cpp::enum_info& ei) override;
     virtual void visit(dogen::cpp::exception_info& ei) override;
diff --git a/projects/cpp_formatters/include/dogen/cpp_formatters/types/workflow.hpp b/projects/cpp_formatters/include/dogen/cpp_formatters/types/workflow.hpp
index 36f7479..3a00654 100644
--- a/projects/cpp_formatters/include/dogen/cpp_formatters/types/workflow.hpp
+++ b/projects/cpp_formatters/include/dogen/cpp_formatters/types/workflow.hpp
@@ -69,6 +69,11 @@ private:
     result_entry_type format_odb_options_activity(const cpp::project& p) const;
 
     /**
+     * @brief Generate a given C++ file.
+     */
+    result_type::value_type format_file_info(const cpp::file_info& f) const;
+
+    /**
      * @brief Generate all C++ files.
      */
     result_type format_file_infos_activity(const cpp::project& p) const;
diff --git a/projects/cpp_formatters/src/types/domain_implementation.cpp b/projects/cpp_formatters/src/types/domain_implementation.cpp
index 0b0e1da..80123e2 100644
--- a/projects/cpp_formatters/src/types/domain_implementation.cpp
+++ b/projects/cpp_formatters/src/types/domain_implementation.cpp
@@ -199,7 +199,7 @@ class_implementation(const cpp::content_descriptor& cd,
 }
 
 void domain_implementation::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/facet_includer.cpp b/projects/cpp_formatters/src/types/facet_includer.cpp
index a4b39f0..3776ef1 100644
--- a/projects/cpp_formatters/src/types/facet_includer.cpp
+++ b/projects/cpp_formatters/src/types/facet_includer.cpp
@@ -45,7 +45,7 @@ create(std::ostream& stream) {
 }
 
 void facet_includer::format(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (o)
         BOOST_THROW_EXCEPTION(formatting_error(unexpected_class_info));
 
diff --git a/projects/cpp_formatters/src/types/forward_declarations_header.cpp b/projects/cpp_formatters/src/types/forward_declarations_header.cpp
index ab924ec..d751e42 100644
--- a/projects/cpp_formatters/src/types/forward_declarations_header.cpp
+++ b/projects/cpp_formatters/src/types/forward_declarations_header.cpp
@@ -104,7 +104,7 @@ format_domain_class(const cpp::class_info& ci) {
 }
 
 void forward_declarations_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
@@ -125,7 +125,7 @@ void forward_declarations_header::format_class(const cpp::file_info& f) {
 
 void forward_declarations_header::
 format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
@@ -144,7 +144,7 @@ format_enumeration(const cpp::file_info& f) {
 }
 
 void forward_declarations_header::format_exception(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::exception_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::exception_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_exception_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_exception_info));
diff --git a/projects/cpp_formatters/src/types/generator_header.cpp b/projects/cpp_formatters/src/types/generator_header.cpp
index 4e12b91..8b6e60e 100644
--- a/projects/cpp_formatters/src/types/generator_header.cpp
+++ b/projects/cpp_formatters/src/types/generator_header.cpp
@@ -151,7 +151,7 @@ void generator_header::generator_class(const cpp::class_info& ci) {
 }
 
 void generator_header::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
@@ -170,7 +170,7 @@ void generator_header::format_enumeration(const cpp::file_info& f) {
 }
 
 void generator_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/generator_implementation.cpp b/projects/cpp_formatters/src/types/generator_implementation.cpp
index 927096a..f7859d0 100644
--- a/projects/cpp_formatters/src/types/generator_implementation.cpp
+++ b/projects/cpp_formatters/src/types/generator_implementation.cpp
@@ -808,7 +808,7 @@ void generator_implementation::default_constructor(const cpp::class_info& ci) {
 }
 
 void generator_implementation::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
@@ -838,7 +838,7 @@ void generator_implementation::format_class(const cpp::file_info& f) {
 }
 
 void generator_implementation::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
diff --git a/projects/cpp_formatters/src/types/hash_header.cpp b/projects/cpp_formatters/src/types/hash_header.cpp
index 6e33fdd..b23a623 100644
--- a/projects/cpp_formatters/src/types/hash_header.cpp
+++ b/projects/cpp_formatters/src/types/hash_header.cpp
@@ -113,7 +113,7 @@ void hash_header::hash_class(const cpp::class_info& ci) {
 }
 
 void hash_header::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
@@ -154,7 +154,7 @@ void hash_header::format_enumeration(const cpp::file_info& f) {
 }
 
 void hash_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/hash_implementation.cpp b/projects/cpp_formatters/src/types/hash_implementation.cpp
index 2cfd748..62c3c57 100644
--- a/projects/cpp_formatters/src/types/hash_implementation.cpp
+++ b/projects/cpp_formatters/src/types/hash_implementation.cpp
@@ -635,7 +635,7 @@ void hash_implementation::hasher_hash_method(const cpp::class_info& ci) {
 }
 
 void hash_implementation::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/io_header.cpp b/projects/cpp_formatters/src/types/io_header.cpp
index 64e0ce6..cf603f7 100644
--- a/projects/cpp_formatters/src/types/io_header.cpp
+++ b/projects/cpp_formatters/src/types/io_header.cpp
@@ -59,7 +59,7 @@ file_formatter::shared_ptr io_header::create(std::ostream& stream) {
 }
 
 void io_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
@@ -88,7 +88,7 @@ void io_header::format_class(const cpp::file_info& f) {
 }
 
 void io_header::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
diff --git a/projects/cpp_formatters/src/types/io_implementation.cpp b/projects/cpp_formatters/src/types/io_implementation.cpp
index 28bc064..5273539 100644
--- a/projects/cpp_formatters/src/types/io_implementation.cpp
+++ b/projects/cpp_formatters/src/types/io_implementation.cpp
@@ -76,7 +76,7 @@ void io_implementation::io_helper_methods(const cpp::class_info& ci) {
 }
 
 void io_implementation::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
@@ -140,7 +140,7 @@ void io_implementation::format_enumeration(const cpp::file_info& f) {
 }
 
 void io_implementation::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/namespace_documentation.cpp b/projects/cpp_formatters/src/types/namespace_documentation.cpp
index 5f0db8f..d334653 100644
--- a/projects/cpp_formatters/src/types/namespace_documentation.cpp
+++ b/projects/cpp_formatters/src/types/namespace_documentation.cpp
@@ -58,7 +58,7 @@ namespace_documentation::create(std::ostream& stream) {
 }
 
 void namespace_documentation::format_namespace(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::namespace_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::namespace_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_namespace_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_namespace_info));
diff --git a/projects/cpp_formatters/src/types/odb_header.cpp b/projects/cpp_formatters/src/types/odb_header.cpp
index 3583a7d..ab9bda9 100644
--- a/projects/cpp_formatters/src/types/odb_header.cpp
+++ b/projects/cpp_formatters/src/types/odb_header.cpp
@@ -63,7 +63,7 @@ file_formatter::shared_ptr odb_header::create(std::ostream& stream) {
 }
 
 void odb_header::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
@@ -83,7 +83,7 @@ void odb_header::format_enumeration(const cpp::file_info& f) {
 }
 
 void odb_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/registrar_header.cpp b/projects/cpp_formatters/src/types/registrar_header.cpp
index 7bdd718..490643a 100644
--- a/projects/cpp_formatters/src/types/registrar_header.cpp
+++ b/projects/cpp_formatters/src/types/registrar_header.cpp
@@ -53,7 +53,7 @@ create(std::ostream& stream) {
 }
 
 void registrar_header::format(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::registrar_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::registrar_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << expected_registrar_info;
         BOOST_THROW_EXCEPTION(formatting_error(expected_registrar_info));
diff --git a/projects/cpp_formatters/src/types/registrar_implementation.cpp b/projects/cpp_formatters/src/types/registrar_implementation.cpp
index 287908e..bed3c84 100644
--- a/projects/cpp_formatters/src/types/registrar_implementation.cpp
+++ b/projects/cpp_formatters/src/types/registrar_implementation.cpp
@@ -61,7 +61,7 @@ create(std::ostream& stream, const bool disable_xml_serialization,
 }
 
 void registrar_implementation::format(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::registrar_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::registrar_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << expected_registrar_info;
         BOOST_THROW_EXCEPTION(formatting_error(expected_registrar_info));
diff --git a/projects/cpp_formatters/src/types/serialization_header.cpp b/projects/cpp_formatters/src/types/serialization_header.cpp
index a0e4747..597343f 100644
--- a/projects/cpp_formatters/src/types/serialization_header.cpp
+++ b/projects/cpp_formatters/src/types/serialization_header.cpp
@@ -80,7 +80,7 @@ void serialization_header::load_and_save_functions(const cpp::class_info& ci) {
 }
 
 void serialization_header::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
@@ -138,7 +138,7 @@ void serialization_header::format_class(const cpp::file_info& f) {
 }
 
 void serialization_header::format_enumeration(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::enum_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_enum_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_enum_info));
diff --git a/projects/cpp_formatters/src/types/serialization_implementation.cpp b/projects/cpp_formatters/src/types/serialization_implementation.cpp
index 68c2f85..c14a1d6 100644
--- a/projects/cpp_formatters/src/types/serialization_implementation.cpp
+++ b/projects/cpp_formatters/src/types/serialization_implementation.cpp
@@ -266,7 +266,7 @@ template_instantiations(const cpp::class_info& ci) {
 }
 
 void serialization_implementation::format_class(const cpp::file_info& f) {
-    auto o(boost::dynamic_pointer_cast<cpp::class_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::class_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_class_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_class_info));
diff --git a/projects/cpp_formatters/src/types/types_main_header_file_formatter.cpp b/projects/cpp_formatters/src/types/types_main_header_file_formatter.cpp
index 8e41ba2..6b9e271 100644
--- a/projects/cpp_formatters/src/types/types_main_header_file_formatter.cpp
+++ b/projects/cpp_formatters/src/types/types_main_header_file_formatter.cpp
@@ -184,12 +184,7 @@ void types_main_header_file_formatter::format(const cpp::file_info& f) {
     includes includes(stream_);
     includes.format(f);
 
-    if (!f.entity()) {
-        BOOST_LOG_SEV(lg, error) << missing_entity;
-        BOOST_THROW_EXCEPTION(formatting_error(missing_entity));
-    }
-
-    f.entity()->accept(*this);
+    f.accept(*this);
 
     guards.format_end();
 }
diff --git a/projects/cpp_formatters/src/types/visitor.cpp b/projects/cpp_formatters/src/types/visitor.cpp
index 7701201..41b6389 100644
--- a/projects/cpp_formatters/src/types/visitor.cpp
+++ b/projects/cpp_formatters/src/types/visitor.cpp
@@ -118,7 +118,7 @@ void visitor::format(const cpp::file_info& f) {
     includes includes(stream_);
     includes.format(f);
 
-    auto o(boost::dynamic_pointer_cast<cpp::visitor_info>(f.entity()));
+    auto o(boost::dynamic_pointer_cast<cpp::visitor_info>(&f));
     if (!o) {
         BOOST_LOG_SEV(lg, error) << missing_visitor_info;
         BOOST_THROW_EXCEPTION(formatting_error(missing_visitor_info));
diff --git a/projects/cpp_formatters/src/types/workflow.cpp b/projects/cpp_formatters/src/types/workflow.cpp
index db61da9..7bc0273 100644
--- a/projects/cpp_formatters/src/types/workflow.cpp
+++ b/projects/cpp_formatters/src/types/workflow.cpp
@@ -87,6 +87,18 @@ workflow::format_odb_options_activity(const cpp::project& p) const {
     return std::make_pair(path, s.str());
 }
 
+workflow::result_type::value_type
+workflow::format_file_info(const cpp::file_info& f) const {
+    BOOST_LOG_SEV(lg, debug) << "Formatting:" << f.file_path().string();
+    BOOST_LOG_SEV(lg, debug) << "Descriptor:" << f.descriptor();
+    cpp_formatters::factory factory(settings_);
+    cpp_formatters::file_formatter::shared_ptr ff;
+    std::ostringstream s;
+    ff = factory.create(s, f.descriptor());
+    ff->format(f);
+    return std::make_pair(f.file_path(), s.str());
+}
+
 workflow::result_type
 workflow::format_file_infos_activity(const cpp::project& p) const {
     workflow::result_type r;
@@ -94,20 +106,20 @@ workflow::format_file_infos_activity(const cpp::project& p) const {
     std::map<config::cpp_facet_types, std::list<std::string> >
         headers_for_facet_;
 
-    for (const auto f : p.files()) {
-        if (f.descriptor().file_type() == cpp::file_types::header)
-            headers_for_facet_[f.descriptor().facet_type()].
-                push_back(f.relative_path().generic_string());
-
-        BOOST_LOG_SEV(lg, debug) << "Formatting:" << f.file_path().string();
-        BOOST_LOG_SEV(lg, debug) << "Descriptor:" << f.descriptor();
-        cpp_formatters::factory factory(settings_);
-        cpp_formatters::file_formatter::shared_ptr ff;
-        std::ostringstream s;
-        ff = factory.create(s, f.descriptor());
-        ff->format(f);
-        r.insert(std::make_pair(f.file_path(), s.str()));
-    }
+    auto lambda([&](const cpp::file_info& f) {
+            if (f.descriptor().file_type() == cpp::file_types::header)
+                headers_for_facet_[f.descriptor().facet_type()].
+                    push_back(f.relative_path().generic_string());
+            r.insert(format_file_info(f));
+        });
+
+    for (const auto& e : p.enumerations()) lambda(e);
+    for (const auto& e : p.exceptions()) lambda(e);
+    for (const auto& c : p.classes()) lambda(c);
+    for (const auto& n : p.namespaces()) lambda(n);
+    for (const auto& r : p.registrars()) lambda(r);
+    for (const auto& v : p.visitors()) lambda(v);
+    for (const auto& i : p.includers()) lambda(i);
 
     return r;
 }
diff --git a/projects/sml_to_cpp/include/dogen/sml_to_cpp/types/workflow.hpp b/projects/sml_to_cpp/include/dogen/sml_to_cpp/types/workflow.hpp
index 82b5058..7fad4eb 100644
--- a/projects/sml_to_cpp/include/dogen/sml_to_cpp/types/workflow.hpp
+++ b/projects/sml_to_cpp/include/dogen/sml_to_cpp/types/workflow.hpp
@@ -109,13 +109,13 @@ private:
     /**
      * @brief Generate C++ files for classes.
      */
-    std::list<cpp::file_info>
+    std::list<cpp::namespace_info>
         generate_file_infos_for_namespaces_activity() const;
 
     /**
      * @brief Generate C++ files for registrars.
      */
-    std::list<cpp::file_info> generate_registrars_activity() const;
+    std::list<cpp::registrar_info> generate_registrars_activity() const;
 
     /**
      * @brief Generate C++ files for includers.
@@ -125,7 +125,7 @@ private:
     /**
      * @brief Generate C++ files for visitors.
      */
-    std::list<cpp::file_info> generate_visitors_activity() const;
+    std::list<cpp::includers_info> generate_visitors_activity() const;
 
     /**
      * @brief Generate C++ files for enumerations.
diff --git a/projects/sml_to_cpp/src/types/workflow.cpp b/projects/sml_to_cpp/src/types/workflow.cpp
index 66ab563..daf0e5f 100644
--- a/projects/sml_to_cpp/src/types/workflow.cpp
+++ b/projects/sml_to_cpp/src/types/workflow.cpp
@@ -361,21 +361,13 @@ std::list<cpp::file_info> workflow::generate_exceptions_activity() const {
 }
 
 void workflow::generate_file_infos_activity(cpp::project& p) const {
-    const auto a(generate_enums_activity());
-    const auto b(generate_exceptions_activity());
-    const auto c(generate_file_infos_for_classes_activity());
-    const auto d(generate_file_infos_for_namespaces_activity());
-    const auto e(generate_registrars_activity());
-    const auto f(generate_visitors_activity());
-    const auto g(generate_includers_activity());
-
-    p.files().insert(p.files().end(), a.begin(), a.end());
-    p.files().insert(p.files().end(), b.begin(), b.end());
-    p.files().insert(p.files().end(), c.begin(), c.end());
-    p.files().insert(p.files().end(), d.begin(), d.end());
-    p.files().insert(p.files().end(), e.begin(), e.end());
-    p.files().insert(p.files().end(), f.begin(), f.end());
-    p.files().insert(p.files().end(), g.begin(), g.end());
+    p.enumerations(generate_enums_activity());
+    p.exceptions(generate_exceptions_activity());
+    p.classes(generate_file_infos_for_classes_activity());
+    p.namespaces(generate_file_infos_for_namespaces_activity());
+    p.registrars(generate_registrars_activity());
+    p.visitors(generate_visitors_activity());
+    p.includers(generate_includers_activity());
 }
 
 void workflow::generate_cmakelists_activity(cpp::project& p) const {
