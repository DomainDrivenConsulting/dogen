diff --git a/diagrams/cpp.dia b/diagrams/cpp.dia
index ce86433..54e4833 100644
--- a/diagrams/cpp.dia
+++ b/diagrams/cpp.dia
@@ -4268,7 +4268,7 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:point val="112,47"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="12.620000000000001"/>
+        <dia:real val="12.619999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -4936,7 +4936,7 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
         <dia:point val="92,47"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="8.5849999999999991"/>
+        <dia:real val="8.5850000000000009"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="15.600000000000003"/>
@@ -6776,7 +6776,7 @@ These are expected to use quotes and be on the user path.#</dia:string>
         <dia:point val="-28,26"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="30.545000000000002"/>
+        <dia:real val="30.544999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="42.5"/>
@@ -7457,7 +7457,7 @@ variables.#</dia:string>
         <dia:point val="375,105"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="16.685000000000002"/>
+        <dia:real val="16.684999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.3000000000000003"/>
@@ -7935,7 +7935,7 @@ factories.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -8484,7 +8484,7 @@ factories.#</dia:string>
         <dia:point val="238.667,168"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="24.755000000000003"/>
+        <dia:real val="24.754999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="4.4000000000000004"/>
@@ -10742,7 +10742,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -10919,7 +10919,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -11096,7 +11096,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -11273,7 +11273,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -11450,7 +11450,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -11499,7 +11499,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="119,95"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="6.7924999999999995"/>
+        <dia:real val="6.7925000000000004"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -11801,7 +11801,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="72.6667,168.083"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="13.254999999999999"/>
+        <dia:real val="13.255000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -12134,7 +12134,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="93.6667,174.083"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="18.580000000000002"/>
+        <dia:real val="18.579999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -12245,7 +12245,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="72.6667,180.083"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="13.919999999999998"/>
+        <dia:real val="13.92"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -12467,7 +12467,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="93.6667,180.083"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="15.684999999999999"/>
+        <dia:real val="15.685"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -12706,7 +12706,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -12883,7 +12883,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -13265,7 +13265,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="138.667,168"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="18.580000000000002"/>
+        <dia:real val="18.579999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -13859,7 +13859,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="185.667,168"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="18.580000000000002"/>
+        <dia:real val="18.579999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -14453,7 +14453,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="233.667,194"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="18.580000000000002"/>
+        <dia:real val="18.579999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -15353,7 +15353,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="138.667,195"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="18.580000000000002"/>
+        <dia:real val="18.579999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -15836,7 +15836,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="209,135"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="22.830000000000002"/>
+        <dia:real val="22.829999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.6000000000000001"/>
@@ -15964,7 +15964,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -16141,7 +16141,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -16721,7 +16721,7 @@ descend from it. Names are in identifiable name format.#</dia:string>
         <dia:point val="71,121.333"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="19.380000000000003"/>
+        <dia:real val="19.379999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="6.5"/>
@@ -16782,7 +16782,7 @@ grammar of the C++-11 programming language.
         <dia:real val="15.145"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -16837,7 +16837,7 @@ C++ language.
         <dia:real val="14.76"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -16892,7 +16892,7 @@ C++ language.
         <dia:real val="13.99"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -16947,7 +16947,7 @@ of the C++ language.
         <dia:real val="13.99"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -17002,7 +17002,7 @@ C++ language.
         <dia:real val="14.375"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -17057,7 +17057,7 @@ C++ language.
         <dia:real val="15.530000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -19510,7 +19510,7 @@ main.#</dia:string>
         <dia:point val="363,112"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="9.807500000000001"/>
+        <dia:real val="9.8074999999999992"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -19732,7 +19732,7 @@ main.#</dia:string>
         <dia:point val="227,77"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="32.839999999999996"/>
+        <dia:real val="32.840000000000003"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="15.400000000000002"/>
@@ -20536,7 +20536,7 @@ main.#</dia:string>
         <dia:point val="326,57"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="35.535000000000004"/>
+        <dia:real val="35.534999999999997"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="10.6"/>
@@ -21083,7 +21083,7 @@ main.#</dia:string>
         <dia:point val="343.767,57"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="343.017,45.55;355.197,57.8"/>
+        <dia:rectangle val="343.017,45.55;355.198,57.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -21130,13 +21130,13 @@ main.#</dia:string>
         <dia:real val="4.4000000000000004"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#settings_bundle#</dia:string>
+        <dia:string>#global_settings#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>##</dia:string>
+        <dia:string>#Settings applicable to all entities.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -21882,7 +21882,7 @@ main.#</dia:string>
         <dia:point val="93.6667,186.083"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -21993,7 +21993,7 @@ main.#</dia:string>
         <dia:point val="118.667,173"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22104,7 +22104,7 @@ main.#</dia:string>
         <dia:point val="118.667,200"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22215,7 +22215,7 @@ main.#</dia:string>
         <dia:point val="163.667,199"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22326,7 +22326,7 @@ main.#</dia:string>
         <dia:point val="164.667,173"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22437,7 +22437,7 @@ main.#</dia:string>
         <dia:point val="212.667,199"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22548,7 +22548,7 @@ main.#</dia:string>
         <dia:point val="287,199"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="4.7700000000000005"/>
+        <dia:real val="4.7699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -22659,7 +22659,7 @@ main.#</dia:string>
         <dia:point val="309,63"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="7.2775000000000007"/>
+        <dia:real val="7.2774999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3"/>
@@ -23295,7 +23295,7 @@ C++ model type.#</dia:string>
         <dia:point val="352.84,72"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="343.548,67.2183;352.907,72.0668"/>
+        <dia:rectangle val="343.547,67.2183;352.907,72.0668"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23375,7 +23375,7 @@ C++ model type.#</dia:string>
         <dia:real val="13.220000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -23423,7 +23423,7 @@ data such as the facet settings.#</dia:string>
         <dia:point val="389,57"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="31.685000000000002"/>
+        <dia:real val="31.684999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="5.2000000000000002"/>
@@ -24263,7 +24263,7 @@ data such as the facet settings.#</dia:string>
         <dia:real val="16.300000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.0999999999999996"/>
+        <dia:real val="4.1000000000000005"/>
       </dia:attribute>
       <dia:attribute name="line_width">
         <dia:real val="0.10000000000000001"/>
@@ -24440,7 +24440,7 @@ the meta-data.
                 <dia:string>#b#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const settings_bundle&amp;#</dia:string>
+                <dia:string>#const global_settings&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -24600,7 +24600,7 @@ the meta-data.
         <dia:point val="270,181"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="12.434999999999999"/>
+        <dia:real val="12.435"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="10.799999999999999"/>
@@ -25019,7 +25019,7 @@ the meta-data.
         <dia:real val="10"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#bundler#</dia:string>
+        <dia:string>#global_settings_factory#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>#service#</dia:string>
@@ -25222,13 +25222,13 @@ the meta-data.
         </dia:composite>
         <dia:composite type="umloperation">
           <dia:attribute name="name">
-            <dia:string>#bundle#</dia:string>
+            <dia:string>#build#</dia:string>
           </dia:attribute>
           <dia:attribute name="stereotype">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, settings_bundle&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, global_settings&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -26034,7 +26034,7 @@ the meta-data.
         <dia:point val="265,125"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="32.839999999999996"/>
+        <dia:real val="32.840000000000003"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="6"/>
@@ -26176,10 +26176,10 @@ the meta-data.
             </dia:composite>
             <dia:composite type="umlparameter">
               <dia:attribute name="name">
-                <dia:string>#settings_bundle_for_facet#</dia:string>
+                <dia:string>#global_settings_for_facet#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const std::unordered_map&lt;std::string, settings_bundle&gt;&amp;#</dia:string>
+                <dia:string>#const std::unordered_map&lt;std::string, global_settings&gt;&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -26631,10 +26631,10 @@ for a given C++ entity.#</dia:string>
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#bundle#</dia:string>
+            <dia:string>#gs#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#settings_bundle#</dia:string>
+            <dia:string>#global_settings#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -26813,10 +26813,10 @@ for a given C++ entity.#</dia:string>
             </dia:composite>
             <dia:composite type="umlparameter">
               <dia:attribute name="name">
-                <dia:string>#settings_bundle_for_face#</dia:string>
+                <dia:string>#global_settings_for_face#</dia:string>
               </dia:attribute>
               <dia:attribute name="type">
-                <dia:string>#const std::unordered_map&lt;std::string, settings_bundle&gt;&amp;#</dia:string>
+                <dia:string>#const std::unordered_map&lt;std::string, global_settings&gt;&amp;#</dia:string>
               </dia:attribute>
               <dia:attribute name="value">
                 <dia:string>##</dia:string>
@@ -27022,7 +27022,7 @@ for a given C++ entity.#</dia:string>
         <dia:point val="340.765,78.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="340.015,60.55;375.957,79.7"/>
+        <dia:rectangle val="340.015,60.55;375.957,78.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
diff --git a/doc/agile/sprint_backlog_56.org b/doc/agile/sprint_backlog_56.org
index 8b42d1c..8129a4d 100644
--- a/doc/agile/sprint_backlog_56.org
+++ b/doc/agile/sprint_backlog_56.org
@@ -255,6 +255,8 @@ expected to be configured at the model module level.
   because we no longer require the qname.
 
 *** IMPLEMENTATION Rename bundle to global settings           :task:refactor:
+    CLOCK: [2014-11-27 Thu 19:11]--[2014-11-27 Thu 19:39] =>  0:28
+    CLOCK: [2014-11-27 Thu 18:51]--[2014-11-27 Thu 19:02] =>  0:22
     CLOCK: [2014-11-27 Thu 08:19]--[2014-11-27 Thu 08:30] =>  0:11
 
 - rename settings bundle to global settings
diff --git a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
index 5834507..a5809c2 100644
--- a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
+++ b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
@@ -38,6 +38,7 @@
 #include "dogen/cpp/hash/formatters/formatter_types_hash.hpp"
 #include "dogen/cpp/hash/formatters/odb/settings_hash.hpp"
 #include "dogen/cpp/hash/formatters/serialization/settings_hash.hpp"
+#include "dogen/cpp/hash/global_settings_hash.hpp"
 #include "dogen/cpp/hash/includes_hash.hpp"
 #include "dogen/cpp/hash/inheritance_hash.hpp"
 #include "dogen/cpp/hash/namespace_info_hash.hpp"
@@ -50,6 +51,5 @@
 #include "dogen/cpp/hash/project_hash.hpp"
 #include "dogen/cpp/hash/property_info_hash.hpp"
 #include "dogen/cpp/hash/registrar_info_hash.hpp"
-#include "dogen/cpp/hash/settings_bundle_hash.hpp"
 #include "dogen/cpp/hash/state_hash.hpp"
 #include "dogen/cpp/hash/visitor_info_hash.hpp"
diff --git a/projects/cpp/include/dogen/cpp/hash/global_settings_hash.hpp b/projects/cpp/include/dogen/cpp/hash/global_settings_hash.hpp
new file mode 100644
index 0000000..b8a6105
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/hash/global_settings_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_HASH_GLOBAL_SETTINGS_HASH_HPP
+#define DOGEN_CPP_HASH_GLOBAL_SETTINGS_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/cpp/types/global_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+struct global_settings_hasher {
+public:
+    static std::size_t hash(const global_settings& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+struct hash<dogen::cpp::global_settings> {
+public:
+    size_t operator()(const dogen::cpp::global_settings& v) const {
+        return dogen::cpp::global_settings_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/cpp/include/dogen/cpp/hash/settings_bundle_hash.hpp b/projects/cpp/include/dogen/cpp/hash/settings_bundle_hash.hpp
deleted file mode 100644
index c43b46e..0000000
--- a/projects/cpp/include/dogen/cpp/hash/settings_bundle_hash.hpp
+++ /dev/null
@@ -1,52 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_HASH_SETTINGS_BUNDLE_HASH_HPP
-#define DOGEN_CPP_HASH_SETTINGS_BUNDLE_HASH_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <functional>
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-namespace dogen {
-namespace cpp {
-
-struct settings_bundle_hasher {
-public:
-    static std::size_t hash(const settings_bundle& v);
-};
-
-} }
-
-namespace std {
-
-template<>
-struct hash<dogen::cpp::settings_bundle> {
-public:
-    size_t operator()(const dogen::cpp::settings_bundle& v) const {
-        return dogen::cpp::settings_bundle_hasher::hash(v);
-    }
-};
-
-}
-#endif
diff --git a/projects/cpp/include/dogen/cpp/io/all_io.hpp b/projects/cpp/include/dogen/cpp/io/all_io.hpp
index 45f52bd..2db2d4a 100644
--- a/projects/cpp/include/dogen/cpp/io/all_io.hpp
+++ b/projects/cpp/include/dogen/cpp/io/all_io.hpp
@@ -38,6 +38,7 @@
 #include "dogen/cpp/io/formatters/formatter_types_io.hpp"
 #include "dogen/cpp/io/formatters/odb/settings_io.hpp"
 #include "dogen/cpp/io/formatters/serialization/settings_io.hpp"
+#include "dogen/cpp/io/global_settings_io.hpp"
 #include "dogen/cpp/io/includes_io.hpp"
 #include "dogen/cpp/io/inheritance_io.hpp"
 #include "dogen/cpp/io/namespace_info_io.hpp"
@@ -50,6 +51,5 @@
 #include "dogen/cpp/io/project_io.hpp"
 #include "dogen/cpp/io/property_info_io.hpp"
 #include "dogen/cpp/io/registrar_info_io.hpp"
-#include "dogen/cpp/io/settings_bundle_io.hpp"
 #include "dogen/cpp/io/state_io.hpp"
 #include "dogen/cpp/io/visitor_info_io.hpp"
diff --git a/projects/cpp/include/dogen/cpp/io/global_settings_io.hpp b/projects/cpp/include/dogen/cpp/io/global_settings_io.hpp
new file mode 100644
index 0000000..5b5cb23
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/io/global_settings_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_IO_GLOBAL_SETTINGS_IO_HPP
+#define DOGEN_CPP_IO_GLOBAL_SETTINGS_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/cpp/types/global_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::cpp::global_settings& v);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/io/settings_bundle_io.hpp b/projects/cpp/include/dogen/cpp/io/settings_bundle_io.hpp
deleted file mode 100644
index d032cc2..0000000
--- a/projects/cpp/include/dogen/cpp/io/settings_bundle_io.hpp
+++ /dev/null
@@ -1,40 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_IO_SETTINGS_BUNDLE_IO_HPP
-#define DOGEN_CPP_IO_SETTINGS_BUNDLE_IO_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <iosfwd>
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-namespace dogen {
-namespace cpp {
-
-std::ostream&
-operator<<(std::ostream& s,
-     const dogen::cpp::settings_bundle& v);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
index a7946b3..5d238ad 100644
--- a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
@@ -38,6 +38,7 @@
 #include "dogen/cpp/serialization/formatters/formatter_types_ser.hpp"
 #include "dogen/cpp/serialization/formatters/odb/settings_ser.hpp"
 #include "dogen/cpp/serialization/formatters/serialization/settings_ser.hpp"
+#include "dogen/cpp/serialization/global_settings_ser.hpp"
 #include "dogen/cpp/serialization/includes_ser.hpp"
 #include "dogen/cpp/serialization/inheritance_ser.hpp"
 #include "dogen/cpp/serialization/namespace_info_ser.hpp"
@@ -51,6 +52,5 @@
 #include "dogen/cpp/serialization/property_info_ser.hpp"
 #include "dogen/cpp/serialization/registrar_info_ser.hpp"
 #include "dogen/cpp/serialization/registrar_ser.hpp"
-#include "dogen/cpp/serialization/settings_bundle_ser.hpp"
 #include "dogen/cpp/serialization/state_ser.hpp"
 #include "dogen/cpp/serialization/visitor_info_ser.hpp"
diff --git a/projects/cpp/include/dogen/cpp/serialization/global_settings_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/global_settings_fwd_ser.hpp
new file mode 100644
index 0000000..2d525fe
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/global_settings_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_GLOBAL_SETTINGS_FWD_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_GLOBAL_SETTINGS_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/global_settings_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/global_settings_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/global_settings_ser.hpp
new file mode 100644
index 0000000..f42c227
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/global_settings_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_GLOBAL_SETTINGS_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_GLOBAL_SETTINGS_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/cpp/types/global_settings.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::global_settings)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/settings_bundle_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/settings_bundle_fwd_ser.hpp
deleted file mode 100644
index c71a79e..0000000
--- a/projects/cpp/include/dogen/cpp/serialization/settings_bundle_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_SERIALIZATION_SETTINGS_BUNDLE_FWD_SER_HPP
-#define DOGEN_CPP_SERIALIZATION_SETTINGS_BUNDLE_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/cpp/types/settings_bundle_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/settings_bundle_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/settings_bundle_ser.hpp
deleted file mode 100644
index 15e8b7b..0000000
--- a/projects/cpp/include/dogen/cpp/serialization/settings_bundle_ser.hpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_SERIALIZATION_SETTINGS_BUNDLE_SER_HPP
-#define DOGEN_CPP_SERIALIZATION_SETTINGS_BUNDLE_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <boost/serialization/split_free.hpp>
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::settings_bundle)
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-
-template<typename Archive>
-void load(Archive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
index 5663c54..8c63a37 100644
--- a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
+++ b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
@@ -38,6 +38,7 @@
 #include "dogen/cpp/test_data/formatters/formatter_types_td.hpp"
 #include "dogen/cpp/test_data/formatters/odb/settings_td.hpp"
 #include "dogen/cpp/test_data/formatters/serialization/settings_td.hpp"
+#include "dogen/cpp/test_data/global_settings_td.hpp"
 #include "dogen/cpp/test_data/includes_td.hpp"
 #include "dogen/cpp/test_data/inheritance_td.hpp"
 #include "dogen/cpp/test_data/namespace_info_td.hpp"
@@ -50,6 +51,5 @@
 #include "dogen/cpp/test_data/project_td.hpp"
 #include "dogen/cpp/test_data/property_info_td.hpp"
 #include "dogen/cpp/test_data/registrar_info_td.hpp"
-#include "dogen/cpp/test_data/settings_bundle_td.hpp"
 #include "dogen/cpp/test_data/state_td.hpp"
 #include "dogen/cpp/test_data/visitor_info_td.hpp"
diff --git a/projects/cpp/include/dogen/cpp/test_data/global_settings_td.hpp b/projects/cpp/include/dogen/cpp/test_data/global_settings_td.hpp
new file mode 100644
index 0000000..7406766
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/test_data/global_settings_td.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TEST_DATA_GLOBAL_SETTINGS_TD_HPP
+#define DOGEN_CPP_TEST_DATA_GLOBAL_SETTINGS_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/global_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+class global_settings_generator {
+public:
+    global_settings_generator();
+
+public:
+    typedef dogen::cpp::global_settings result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/test_data/settings_bundle_td.hpp b/projects/cpp/include/dogen/cpp/test_data/settings_bundle_td.hpp
deleted file mode 100644
index 493a00d..0000000
--- a/projects/cpp/include/dogen/cpp/test_data/settings_bundle_td.hpp
+++ /dev/null
@@ -1,53 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TEST_DATA_SETTINGS_BUNDLE_TD_HPP
-#define DOGEN_CPP_TEST_DATA_SETTINGS_BUNDLE_TD_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-namespace dogen {
-namespace cpp {
-
-class settings_bundle_generator {
-public:
-    settings_bundle_generator();
-
-public:
-    typedef dogen::cpp::settings_bundle result_type;
-
-public:
-    static void populate(const unsigned int position, result_type& v);
-    static result_type create(const unsigned int position);
-    result_type operator()();
-
-private:
-    unsigned int position_;
-public:
-    static result_type* create_ptr(const unsigned int position);
-};
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/all.hpp b/projects/cpp/include/dogen/cpp/types/all.hpp
index 48539e4..0e6a90e 100644
--- a/projects/cpp/include/dogen/cpp/types/all.hpp
+++ b/projects/cpp/include/dogen/cpp/types/all.hpp
@@ -21,7 +21,6 @@
 #include "dogen/cpp/types/abilities.hpp"
 #include "dogen/cpp/types/aspect_types.hpp"
 #include "dogen/cpp/types/building_error.hpp"
-#include "dogen/cpp/types/bundler.hpp"
 #include "dogen/cpp/types/class_aspects.hpp"
 #include "dogen/cpp/types/class_info.hpp"
 #include "dogen/cpp/types/class_types.hpp"
@@ -125,6 +124,8 @@
 #include "dogen/cpp/types/formatters/visitor_formatter_interface.hpp"
 #include "dogen/cpp/types/formatters/workflow.hpp"
 #include "dogen/cpp/types/forward_declarations_info.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
+#include "dogen/cpp/types/global_settings_factory.hpp"
 #include "dogen/cpp/types/includers_info.hpp"
 #include "dogen/cpp/types/includes.hpp"
 #include "dogen/cpp/types/includes_builder_interface.hpp"
@@ -148,7 +149,6 @@
 #include "dogen/cpp/types/registrar.hpp"
 #include "dogen/cpp/types/registrar_error.hpp"
 #include "dogen/cpp/types/registrar_info.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
 #include "dogen/cpp/types/state.hpp"
 #include "dogen/cpp/types/transformation_error.hpp"
 #include "dogen/cpp/types/transformer.hpp"
diff --git a/projects/cpp/include/dogen/cpp/types/bundler.hpp b/projects/cpp/include/dogen/cpp/types/bundler.hpp
deleted file mode 100644
index a2fd383..0000000
--- a/projects/cpp/include/dogen/cpp/types/bundler.hpp
+++ /dev/null
@@ -1,69 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_BUNDLER_HPP
-#define DOGEN_CPP_TYPES_BUNDLER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <string>
-#include <unordered_map>
-#include "dogen/sml/types/module.hpp"
-#include "dogen/formatters/types/general_settings.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-namespace dogen {
-namespace cpp {
-
-/**
- * @brief Creates all the settings bundles for all facets.
- */
-class bundler {
-private:
-    /**
-     * @brief Create the facet settings
-     */
-    std::unordered_map<std::string, facet_settings>
-    create_facet_settings(
-        const std::unordered_map<std::string, facet_settings>&
-        default_facet_settings_by_facet_id,
-        const sml::module& model_module) const;
-
-    /**
-     * @brief Create the c++ settings
-     */
-    cpp_settings create_cpp_settings(const sml::module& m) const;
-
-public:
-    /**
-     * @brief Builds the bundle of settings for all facets.
-     */
-    std::unordered_map<std::string, settings_bundle>
-    bundle(const std::unordered_map<std::string, facet_settings>&
-        default_facet_settings_by_facet_id,
-        const dogen::formatters::general_settings& gs,
-        const sml::module& model_module) const;
-};
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/bundler_fwd.hpp b/projects/cpp/include/dogen/cpp/types/bundler_fwd.hpp
deleted file mode 100644
index 07a425d..0000000
--- a/projects/cpp/include/dogen/cpp/types/bundler_fwd.hpp
+++ /dev/null
@@ -1,35 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_BUNDLER_FWD_HPP
-#define DOGEN_CPP_TYPES_BUNDLER_FWD_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-namespace dogen {
-namespace cpp {
-
-class bundler;
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
index c63cae1..0f0d712 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 #include "dogen/cpp/types/class_info.hpp"
 
 namespace dogen {
@@ -45,7 +45,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const settings_bundle& sb, const class_info& c) const = 0;
+    format(const global_settings& sb, const class_info& c) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/facet.hpp b/projects/cpp/include/dogen/cpp/types/formatters/facet.hpp
index ade164c..23e6059 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/facet.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/facet.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <string>
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 #include "dogen/cpp/types/formatters/container.hpp"
 
 namespace dogen {
@@ -47,11 +47,11 @@ public:
     /**@}*/
 
     /**
-     * @brief Bundle of settings for this facet.
+     * @brief Global settings for this facet.
      */
     /**@{*/
-    settings_bundle bundle() const;
-    void bundle(const settings_bundle& v);
+    cpp::global_settings global_settings() const;
+    void global_settings(const cpp::global_settings& v);
     /**@}*/
 
     /**
@@ -62,7 +62,7 @@ public:
 
 private:
     std::string id_;
-    settings_bundle bundle_;
+    cpp::global_settings global_settings_;
     formatters::container container_;
 };
 
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/facet_factory.hpp b/projects/cpp/include/dogen/cpp/types/formatters/facet_factory.hpp
index f01ec3b..2a250a1 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/facet_factory.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/facet_factory.hpp
@@ -28,7 +28,7 @@
 #include <string>
 #include <forward_list>
 #include <unordered_map>
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 #include "dogen/cpp/types/formatters/facet.hpp"
 #include "dogen/cpp/types/formatters/container.hpp"
 
@@ -46,8 +46,8 @@ public:
      */
     std::forward_list<facet> build(
         const std::unordered_map<std::string, container>& formatters_by_facet,
-        const std::unordered_map<std::string, settings_bundle>&
-        settings_bundle_for_facet) const;
+        const std::unordered_map<std::string, global_settings>&
+        global_settings_for_facet) const;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/formatter_interface.hpp
index 953ee89..cc6208b 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/formatter_interface.hpp
@@ -31,7 +31,7 @@
 #include <boost/filesystem/path.hpp>
 #include "dogen/sml/types/qname.hpp"
 #include "dogen/formatters/types/file.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 #include "dogen/cpp/types/includes_builder_interface.hpp"
 
 namespace dogen {
@@ -61,7 +61,7 @@ public:
      * qualified name and the current settings.
      */
     virtual boost::filesystem::path
-    make_file_name(const settings_bundle& sb, const sml::qname& qn) const = 0;
+    make_file_name(const global_settings& gs, const sml::qname& qn) const = 0;
 
     /**
      * @brief Creates an instance of the path spec builder for this
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
index a8c0f57..3d2f1b7 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
@@ -54,7 +54,7 @@ public:
 
     std::string formatter_id() const override;
 
-    boost::filesystem::path make_file_name(const settings_bundle& sb,
+    boost::filesystem::path make_file_name(const global_settings& gs,
         const sml::qname& qn) const override;
 
     std::shared_ptr<includes_builder_interface>
@@ -62,7 +62,7 @@ public:
 
 public:
     dogen::formatters::file
-    format(const settings_bundle& sb, const class_info& c) const override;
+    format(const global_settings& gs, const class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp b/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
index f285054..05c396c 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
@@ -29,7 +29,6 @@
 #include <forward_list>
 #include <unordered_map>
 #include "dogen/formatters/types/file.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
 #include "dogen/cpp/types/formatters/container.hpp"
 #include "dogen/cpp/types/formatters/facet.hpp"
 
diff --git a/projects/cpp/include/dogen/cpp/types/global_settings.hpp b/projects/cpp/include/dogen/cpp/types/global_settings.hpp
new file mode 100644
index 0000000..ca26936
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/global_settings.hpp
@@ -0,0 +1,105 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_GLOBAL_SETTINGS_HPP
+#define DOGEN_CPP_TYPES_GLOBAL_SETTINGS_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include "dogen/cpp/serialization/global_settings_fwd_ser.hpp"
+#include "dogen/cpp/types/cpp_settings.hpp"
+#include "dogen/cpp/types/facet_settings.hpp"
+#include "dogen/formatters/types/general_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+/**
+ * @brief Settings applicable to all entities.
+ */
+class global_settings final {
+public:
+    global_settings() = default;
+    global_settings(const global_settings&) = default;
+    global_settings(global_settings&&) = default;
+    ~global_settings() = default;
+
+public:
+    global_settings(
+        const dogen::cpp::facet_settings& facet_settings,
+        const dogen::cpp::cpp_settings& cpp_settings,
+        const dogen::formatters::general_settings& general_settings);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const global_settings& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, global_settings& v, unsigned int version);
+
+public:
+    const dogen::cpp::facet_settings& facet_settings() const;
+    dogen::cpp::facet_settings& facet_settings();
+    void facet_settings(const dogen::cpp::facet_settings& v);
+    void facet_settings(const dogen::cpp::facet_settings&& v);
+
+    const dogen::cpp::cpp_settings& cpp_settings() const;
+    dogen::cpp::cpp_settings& cpp_settings();
+    void cpp_settings(const dogen::cpp::cpp_settings& v);
+    void cpp_settings(const dogen::cpp::cpp_settings&& v);
+
+    const dogen::formatters::general_settings& general_settings() const;
+    dogen::formatters::general_settings& general_settings();
+    void general_settings(const dogen::formatters::general_settings& v);
+    void general_settings(const dogen::formatters::general_settings&& v);
+
+public:
+    bool operator==(const global_settings& rhs) const;
+    bool operator!=(const global_settings& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(global_settings& other) noexcept;
+    global_settings& operator=(global_settings other);
+
+private:
+    dogen::cpp::facet_settings facet_settings_;
+    dogen::cpp::cpp_settings cpp_settings_;
+    dogen::formatters::general_settings general_settings_;
+};
+
+} }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::cpp::global_settings& lhs,
+    dogen::cpp::global_settings& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/global_settings_factory.hpp b/projects/cpp/include/dogen/cpp/types/global_settings_factory.hpp
new file mode 100644
index 0000000..62a9321
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/global_settings_factory.hpp
@@ -0,0 +1,69 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FACTORY_HPP
+#define DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FACTORY_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <unordered_map>
+#include "dogen/sml/types/module.hpp"
+#include "dogen/formatters/types/general_settings.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+/**
+ * @brief Creates all the global settings for all facets.
+ */
+class global_settings_factory {
+private:
+    /**
+     * @brief Create the facet settings
+     */
+    std::unordered_map<std::string, facet_settings>
+    create_facet_settings(
+        const std::unordered_map<std::string, facet_settings>&
+        default_facet_settings_by_facet_id,
+        const sml::module& model_module) const;
+
+    /**
+     * @brief Create the c++ settings
+     */
+    cpp_settings create_cpp_settings(const sml::module& m) const;
+
+public:
+    /**
+     * @brief Builds the global settings for all facets.
+     */
+    std::unordered_map<std::string, global_settings>
+    build(const std::unordered_map<std::string, facet_settings>&
+        default_facet_settings_by_facet_id,
+        const dogen::formatters::general_settings& gs,
+        const sml::module& model_module) const;
+};
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/global_settings_factory_fwd.hpp b/projects/cpp/include/dogen/cpp/types/global_settings_factory_fwd.hpp
new file mode 100644
index 0000000..934b7b1
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/global_settings_factory_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FACTORY_FWD_HPP
+#define DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FACTORY_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace cpp {
+
+class global_settings_factory;
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/global_settings_fwd.hpp b/projects/cpp/include/dogen/cpp/types/global_settings_fwd.hpp
new file mode 100644
index 0000000..7b3e065
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/global_settings_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FWD_HPP
+#define DOGEN_CPP_TYPES_GLOBAL_SETTINGS_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace cpp {
+
+class global_settings;
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/name_builder.hpp b/projects/cpp/include/dogen/cpp/types/name_builder.hpp
index 7d228f2..fd8258c 100644
--- a/projects/cpp/include/dogen/cpp/types/name_builder.hpp
+++ b/projects/cpp/include/dogen/cpp/types/name_builder.hpp
@@ -30,7 +30,7 @@
 #include "dogen/sml/types/nested_qname.hpp"
 #include "dogen/sml/types/model.hpp"
 #include "dogen/sml/types/qname.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -51,7 +51,7 @@ private:
      * @brief Returns the file name for the given qualified name and settings.
      */
     std::string file_name(
-        const settings_bundle& sb, const bool is_header, const sml::qname& qn,
+        const global_settings& gs, const bool is_header, const sml::qname& qn,
         const std::string& additional_postfix) const;
 
 public:
@@ -66,7 +66,7 @@ public:
      * @brief Returns the header file name for the given qualified
      * name and settings.
      */
-    std::string header_file_name(const settings_bundle& sb,
+    std::string header_file_name(const global_settings& gs,
         const sml::qname& qn,
         const std::string& additional_postfix = std::string()) const;
 
@@ -74,7 +74,7 @@ public:
      * @brief Returns the implementation file name for the given
      * qualified name and settings.
      */
-    std::string implementation_file_name(const settings_bundle& sb,
+    std::string implementation_file_name(const global_settings& gs,
         const sml::qname& qn,
         const std::string& additional_postfix = std::string()) const;
 
diff --git a/projects/cpp/include/dogen/cpp/types/settings_bundle.hpp b/projects/cpp/include/dogen/cpp/types/settings_bundle.hpp
deleted file mode 100644
index 92bca05..0000000
--- a/projects/cpp/include/dogen/cpp/types/settings_bundle.hpp
+++ /dev/null
@@ -1,102 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_SETTINGS_BUNDLE_HPP
-#define DOGEN_CPP_TYPES_SETTINGS_BUNDLE_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <algorithm>
-#include "dogen/cpp/serialization/settings_bundle_fwd_ser.hpp"
-#include "dogen/cpp/types/cpp_settings.hpp"
-#include "dogen/cpp/types/facet_settings.hpp"
-#include "dogen/formatters/types/general_settings.hpp"
-
-namespace dogen {
-namespace cpp {
-
-class settings_bundle final {
-public:
-    settings_bundle() = default;
-    settings_bundle(const settings_bundle&) = default;
-    settings_bundle(settings_bundle&&) = default;
-    ~settings_bundle() = default;
-
-public:
-    settings_bundle(
-        const dogen::cpp::facet_settings& facet_settings,
-        const dogen::cpp::cpp_settings& cpp_settings,
-        const dogen::formatters::general_settings& general_settings);
-
-private:
-    template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const settings_bundle& v, unsigned int version);
-
-    template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, settings_bundle& v, unsigned int version);
-
-public:
-    const dogen::cpp::facet_settings& facet_settings() const;
-    dogen::cpp::facet_settings& facet_settings();
-    void facet_settings(const dogen::cpp::facet_settings& v);
-    void facet_settings(const dogen::cpp::facet_settings&& v);
-
-    const dogen::cpp::cpp_settings& cpp_settings() const;
-    dogen::cpp::cpp_settings& cpp_settings();
-    void cpp_settings(const dogen::cpp::cpp_settings& v);
-    void cpp_settings(const dogen::cpp::cpp_settings&& v);
-
-    const dogen::formatters::general_settings& general_settings() const;
-    dogen::formatters::general_settings& general_settings();
-    void general_settings(const dogen::formatters::general_settings& v);
-    void general_settings(const dogen::formatters::general_settings&& v);
-
-public:
-    bool operator==(const settings_bundle& rhs) const;
-    bool operator!=(const settings_bundle& rhs) const {
-        return !this->operator==(rhs);
-    }
-
-public:
-    void swap(settings_bundle& other) noexcept;
-    settings_bundle& operator=(settings_bundle other);
-
-private:
-    dogen::cpp::facet_settings facet_settings_;
-    dogen::cpp::cpp_settings cpp_settings_;
-    dogen::formatters::general_settings general_settings_;
-};
-
-} }
-
-namespace std {
-
-template<>
-inline void swap(
-    dogen::cpp::settings_bundle& lhs,
-    dogen::cpp::settings_bundle& rhs) {
-    lhs.swap(rhs);
-}
-
-}
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/settings_bundle_fwd.hpp b/projects/cpp/include/dogen/cpp/types/settings_bundle_fwd.hpp
deleted file mode 100644
index 7da528b..0000000
--- a/projects/cpp/include/dogen/cpp/types/settings_bundle_fwd.hpp
+++ /dev/null
@@ -1,35 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_SETTINGS_BUNDLE_FWD_HPP
-#define DOGEN_CPP_TYPES_SETTINGS_BUNDLE_FWD_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-namespace dogen {
-namespace cpp {
-
-class settings_bundle;
-
-} }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/workflow.hpp b/projects/cpp/include/dogen/cpp/types/workflow.hpp
index 7dba273..1e5d3bc 100644
--- a/projects/cpp/include/dogen/cpp/types/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/workflow.hpp
@@ -33,7 +33,7 @@
 #include "dogen/cpp/types/registrar.hpp"
 #include "dogen/cpp/types/transformer.hpp"
 #include "dogen/cpp/types/cpp_settings.hpp"
-#include "dogen/cpp/types/settings_bundle.hpp"
+#include "dogen/cpp/types/global_settings.hpp"
 #include "dogen/cpp/types/formatters/facet.hpp"
 #include "dogen/cpp/types/formatters/workflow.hpp"
 #include "dogen/cpp/types/path_spec_details.hpp"
@@ -116,15 +116,15 @@ private:
     sml::module obtain_model_module_activity(const sml::model& m) const;
 
     /**
-     * @brief Create the settings bundle for all facets.
+     * @brief Create the global settings for all facets.
      */
-    std::unordered_map<std::string, settings_bundle>
-    settings_bundle_for_facet_activty(
+    std::unordered_map<std::string, global_settings>
+    global_settings_for_facet_activty(
         const dogen::formatters::general_settings& gs,
         const sml::module& model_module) const;
 
     /**
-     * @brief Create the settings bundle for all facets.
+     * @brief Create the global settings for all facets.
      */
     std::unordered_map<std::string, formatters::container>
     formatter_container_for_facet_activty(
@@ -137,8 +137,8 @@ private:
     create_facets_activty(
         const std::unordered_map<std::string, formatters::container>&
         formatters_by_facet,
-        const std::unordered_map<std::string, settings_bundle>&
-        settings_bundle_for_facet) const;
+        const std::unordered_map<std::string, global_settings>&
+        global_settings_for_facet) const;
 
     /**
      * @brief Creates a map of includes builders by formatter id.
diff --git a/projects/cpp/src/hash/global_settings_hash.cpp b/projects/cpp/src/hash/global_settings_hash.cpp
new file mode 100644
index 0000000..de056fc
--- /dev/null
+++ b/projects/cpp/src/hash/global_settings_hash.cpp
@@ -0,0 +1,50 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/hash/cpp_settings_hash.hpp"
+#include "dogen/cpp/hash/facet_settings_hash.hpp"
+#include "dogen/cpp/hash/global_settings_hash.hpp"
+#include "dogen/formatters/hash/general_settings_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+
+std::size_t global_settings_hasher::hash(const global_settings&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.facet_settings());
+    combine(seed, v.cpp_settings());
+    combine(seed, v.general_settings());
+
+    return seed;
+}
+
+} }
diff --git a/projects/cpp/src/hash/settings_bundle_hash.cpp b/projects/cpp/src/hash/settings_bundle_hash.cpp
deleted file mode 100644
index a209f7c..0000000
--- a/projects/cpp/src/hash/settings_bundle_hash.cpp
+++ /dev/null
@@ -1,50 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/cpp/hash/cpp_settings_hash.hpp"
-#include "dogen/cpp/hash/facet_settings_hash.hpp"
-#include "dogen/cpp/hash/settings_bundle_hash.hpp"
-#include "dogen/formatters/hash/general_settings_hash.hpp"
-
-namespace {
-
-template <typename HashableType>
-inline void combine(std::size_t& seed, const HashableType& value)
-{
-    std::hash<HashableType> hasher;
-    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-}
-
-}
-
-namespace dogen {
-namespace cpp {
-
-std::size_t settings_bundle_hasher::hash(const settings_bundle&v) {
-    std::size_t seed(0);
-
-    combine(seed, v.facet_settings());
-    combine(seed, v.cpp_settings());
-    combine(seed, v.general_settings());
-
-    return seed;
-}
-
-} }
diff --git a/projects/cpp/src/io/global_settings_io.cpp b/projects/cpp/src/io/global_settings_io.cpp
new file mode 100644
index 0000000..6bc02d5
--- /dev/null
+++ b/projects/cpp/src/io/global_settings_io.cpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/cpp/io/cpp_settings_io.hpp"
+#include "dogen/cpp/io/facet_settings_io.hpp"
+#include "dogen/cpp/io/global_settings_io.hpp"
+#include "dogen/formatters/io/general_settings_io.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::ostream& operator<<(std::ostream& s, const global_settings& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::cpp::global_settings\"" << ", "
+      << "\"facet_settings\": " << v.facet_settings() << ", "
+      << "\"cpp_settings\": " << v.cpp_settings() << ", "
+      << "\"general_settings\": " << v.general_settings()
+      << " }";
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/io/settings_bundle_io.cpp b/projects/cpp/src/io/settings_bundle_io.cpp
deleted file mode 100644
index 382111e..0000000
--- a/projects/cpp/src/io/settings_bundle_io.cpp
+++ /dev/null
@@ -1,40 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <ostream>
-#include "dogen/cpp/io/cpp_settings_io.hpp"
-#include "dogen/cpp/io/facet_settings_io.hpp"
-#include "dogen/cpp/io/settings_bundle_io.hpp"
-#include "dogen/formatters/io/general_settings_io.hpp"
-
-namespace dogen {
-namespace cpp {
-
-std::ostream& operator<<(std::ostream& s, const settings_bundle& v) {
-    s << " { "
-      << "\"__type__\": " << "\"dogen::cpp::settings_bundle\"" << ", "
-      << "\"facet_settings\": " << v.facet_settings() << ", "
-      << "\"cpp_settings\": " << v.cpp_settings() << ", "
-      << "\"general_settings\": " << v.general_settings()
-      << " }";
-    return(s);
-}
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/serialization/global_settings_ser.cpp b/projects/cpp/src/serialization/global_settings_ser.cpp
new file mode 100644
index 0000000..1e35b50
--- /dev/null
+++ b/projects/cpp/src/serialization/global_settings_ser.cpp
@@ -0,0 +1,74 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/cpp/serialization/cpp_settings_ser.hpp"
+#include "dogen/cpp/serialization/facet_settings_ser.hpp"
+#include "dogen/cpp/serialization/global_settings_ser.hpp"
+#include "dogen/formatters/serialization/general_settings_ser.hpp"
+
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::cpp::global_settings& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("facet_settings", v.facet_settings_);
+    ar << make_nvp("cpp_settings", v.cpp_settings_);
+    ar << make_nvp("general_settings", v.general_settings_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::cpp::global_settings& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("facet_settings", v.facet_settings_);
+    ar >> make_nvp("cpp_settings", v.cpp_settings_);
+    ar >> make_nvp("general_settings", v.general_settings_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::cpp::global_settings& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::cpp::global_settings& v, unsigned int version);
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/serialization/settings_bundle_ser.cpp b/projects/cpp/src/serialization/settings_bundle_ser.cpp
deleted file mode 100644
index 4acdd87..0000000
--- a/projects/cpp/src/serialization/settings_bundle_ser.cpp
+++ /dev/null
@@ -1,74 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <boost/archive/binary_iarchive.hpp>
-#include <boost/archive/binary_oarchive.hpp>
-#include <boost/archive/polymorphic_iarchive.hpp>
-#include <boost/archive/polymorphic_oarchive.hpp>
-#include <boost/archive/text_iarchive.hpp>
-#include <boost/archive/text_oarchive.hpp>
-#include <boost/archive/xml_iarchive.hpp>
-#include <boost/archive/xml_oarchive.hpp>
-#include <boost/serialization/nvp.hpp>
-#include "dogen/cpp/serialization/cpp_settings_ser.hpp"
-#include "dogen/cpp/serialization/facet_settings_ser.hpp"
-#include "dogen/cpp/serialization/settings_bundle_ser.hpp"
-#include "dogen/formatters/serialization/general_settings_ser.hpp"
-
-
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar,
-    const dogen::cpp::settings_bundle& v,
-    const unsigned int /*version*/) {
-    ar << make_nvp("facet_settings", v.facet_settings_);
-    ar << make_nvp("cpp_settings", v.cpp_settings_);
-    ar << make_nvp("general_settings", v.general_settings_);
-}
-
-template<typename Archive>
-void load(Archive& ar,
-    dogen::cpp::settings_bundle& v,
-    const unsigned int /*version*/) {
-    ar >> make_nvp("facet_settings", v.facet_settings_);
-    ar >> make_nvp("cpp_settings", v.cpp_settings_);
-    ar >> make_nvp("general_settings", v.general_settings_);
-}
-
-} }
-
-namespace boost {
-namespace serialization {
-
-template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-template void save(archive::text_oarchive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-template void save(archive::binary_oarchive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-template void save(archive::xml_oarchive& ar, const dogen::cpp::settings_bundle& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::cpp::settings_bundle& v, unsigned int version);
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/test_data/global_settings_td.cpp b/projects/cpp/src/test_data/global_settings_td.cpp
new file mode 100644
index 0000000..40f7c0e
--- /dev/null
+++ b/projects/cpp/src/test_data/global_settings_td.cpp
@@ -0,0 +1,75 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/test_data/cpp_settings_td.hpp"
+#include "dogen/cpp/test_data/facet_settings_td.hpp"
+#include "dogen/cpp/test_data/global_settings_td.hpp"
+#include "dogen/formatters/test_data/general_settings_td.hpp"
+
+namespace {
+
+dogen::cpp::facet_settings
+create_dogen_cpp_facet_settings(const unsigned int position) {
+    return dogen::cpp::facet_settings_generator::create(position);
+}
+
+dogen::cpp::cpp_settings
+create_dogen_cpp_cpp_settings(const unsigned int position) {
+    return dogen::cpp::cpp_settings_generator::create(position);
+}
+
+dogen::formatters::general_settings
+create_dogen_formatters_general_settings(const unsigned int position) {
+    return dogen::formatters::general_settings_generator::create(position);
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+
+global_settings_generator::global_settings_generator() : position_(0) { }
+
+void global_settings_generator::
+populate(const unsigned int position, result_type& v) {
+    v.facet_settings(create_dogen_cpp_facet_settings(position + 0));
+    v.cpp_settings(create_dogen_cpp_cpp_settings(position + 1));
+    v.general_settings(create_dogen_formatters_general_settings(position + 2));
+}
+
+global_settings_generator::result_type
+global_settings_generator::create(const unsigned int position) {
+    global_settings r;
+    global_settings_generator::populate(position, r);
+    return r;
+}
+global_settings_generator::result_type*
+global_settings_generator::create_ptr(const unsigned int position) {
+    global_settings* p = new global_settings();
+    global_settings_generator::populate(position, *p);
+    return p;
+}
+
+global_settings_generator::result_type
+global_settings_generator::operator()() {
+    return create(position_++);
+}
+
+} }
diff --git a/projects/cpp/src/test_data/settings_bundle_td.cpp b/projects/cpp/src/test_data/settings_bundle_td.cpp
deleted file mode 100644
index 5120297..0000000
--- a/projects/cpp/src/test_data/settings_bundle_td.cpp
+++ /dev/null
@@ -1,75 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/cpp/test_data/cpp_settings_td.hpp"
-#include "dogen/cpp/test_data/facet_settings_td.hpp"
-#include "dogen/cpp/test_data/settings_bundle_td.hpp"
-#include "dogen/formatters/test_data/general_settings_td.hpp"
-
-namespace {
-
-dogen::cpp::facet_settings
-create_dogen_cpp_facet_settings(const unsigned int position) {
-    return dogen::cpp::facet_settings_generator::create(position);
-}
-
-dogen::cpp::cpp_settings
-create_dogen_cpp_cpp_settings(const unsigned int position) {
-    return dogen::cpp::cpp_settings_generator::create(position);
-}
-
-dogen::formatters::general_settings
-create_dogen_formatters_general_settings(const unsigned int position) {
-    return dogen::formatters::general_settings_generator::create(position);
-}
-
-}
-
-namespace dogen {
-namespace cpp {
-
-settings_bundle_generator::settings_bundle_generator() : position_(0) { }
-
-void settings_bundle_generator::
-populate(const unsigned int position, result_type& v) {
-    v.facet_settings(create_dogen_cpp_facet_settings(position + 0));
-    v.cpp_settings(create_dogen_cpp_cpp_settings(position + 1));
-    v.general_settings(create_dogen_formatters_general_settings(position + 2));
-}
-
-settings_bundle_generator::result_type
-settings_bundle_generator::create(const unsigned int position) {
-    settings_bundle r;
-    settings_bundle_generator::populate(position, r);
-    return r;
-}
-settings_bundle_generator::result_type*
-settings_bundle_generator::create_ptr(const unsigned int position) {
-    settings_bundle* p = new settings_bundle();
-    settings_bundle_generator::populate(position, *p);
-    return p;
-}
-
-settings_bundle_generator::result_type
-settings_bundle_generator::operator()() {
-    return create(position_++);
-}
-
-} }
diff --git a/projects/cpp/src/types/bundler.cpp b/projects/cpp/src/types/bundler.cpp
deleted file mode 100644
index f5bcc75..0000000
--- a/projects/cpp/src/types/bundler.cpp
+++ /dev/null
@@ -1,65 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/cpp/types/cpp_settings.hpp"
-#include "dogen/cpp/types/facet_settings.hpp"
-#include "dogen/cpp/types/meta_data/cpp_settings_factory.hpp"
-#include "dogen/cpp/types/meta_data/facet_settings_factory.hpp"
-#include "dogen/cpp/types/bundler.hpp"
-
-namespace dogen {
-namespace cpp {
-
-std::unordered_map<std::string, facet_settings>
-bundler::create_facet_settings(
-    const std::unordered_map<std::string, facet_settings>&
-    default_facet_settings_by_facet_id, const sml::module& model_module) const {
-    meta_data::facet_settings_factory f;
-    return f.build(default_facet_settings_by_facet_id,
-        model_module.meta_data());
-}
-
-cpp_settings bundler::create_cpp_settings(const sml::module& m) const {
-    meta_data::cpp_settings_factory f;
-    return f.build(m.meta_data());
-}
-
-std::unordered_map<std::string, settings_bundle> bundler::
-bundle(const std::unordered_map<std::string, facet_settings>&
-    default_facet_settings_by_facet_id,
-    const dogen::formatters::general_settings& gs,
-    const sml::module& model_module) const {
-
-    const auto cs(create_cpp_settings(model_module));
-    const auto fs(create_facet_settings(
-            default_facet_settings_by_facet_id, model_module));
-
-    std::unordered_map<std::string, settings_bundle> r;
-    for (auto pair : fs) {
-        settings_bundle b;
-        b.general_settings(gs);
-        b.cpp_settings(cs);
-        b.facet_settings(pair.second);
-        r[pair.first] = b;
-    }
-    return r;
-}
-
-} }
diff --git a/projects/cpp/src/types/formatters/facet.cpp b/projects/cpp/src/types/formatters/facet.cpp
index 77f0183..548904b 100644
--- a/projects/cpp/src/types/formatters/facet.cpp
+++ b/projects/cpp/src/types/formatters/facet.cpp
@@ -27,8 +27,10 @@ namespace formatters {
 std::string facet::id() const { return id_; }
 void facet::id(const std::string& v) { id_ = v; }
 
-settings_bundle facet::bundle() const { return bundle_; }
-void facet::bundle(const settings_bundle& v) { bundle_ = v; }
+cpp::global_settings facet::global_settings() const { return global_settings_; }
+void facet::global_settings(const cpp::global_settings& v) {
+    global_settings_ = v;
+}
 
 const formatters::container& facet::container() const { return container_; }
 void facet::container(const formatters::container& v) { container_ = v; }
diff --git a/projects/cpp/src/types/formatters/facet_factory.cpp b/projects/cpp/src/types/formatters/facet_factory.cpp
index d0147bf..4162510 100644
--- a/projects/cpp/src/types/formatters/facet_factory.cpp
+++ b/projects/cpp/src/types/formatters/facet_factory.cpp
@@ -25,16 +25,16 @@ namespace cpp {
 namespace formatters {
 
 std::forward_list<facet> facet_factory::build(
-        const std::unordered_map<std::string, container>& formatters_by_facet,
-        const std::unordered_map<std::string, settings_bundle>&
-        settings_bundle_for_facet) const {
+    const std::unordered_map<std::string, container>& formatters_by_facet,
+    const std::unordered_map<std::string, global_settings>&
+        global_settings_for_facet) const {
 
     std::unordered_map<std::string, facet> facet_by_id;
     for (const auto pair : formatters_by_facet)
         facet_by_id[pair.first].container(pair.second);
 
-    for (auto pair : settings_bundle_for_facet)
-        facet_by_id[pair.first].bundle(pair.second);
+    for (auto pair : global_settings_for_facet)
+        facet_by_id[pair.first].global_settings(pair.second);
 
     std::forward_list<facet> r;
     for (const auto& pair : facet_by_id) {
diff --git a/projects/cpp/src/types/formatters/types/class_header_formatter.cpp b/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
index 912cb9a..9090ab4 100644
--- a/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
@@ -87,9 +87,9 @@ std::string class_header_formatter::formatter_id() const {
 }
 
 boost::filesystem::path class_header_formatter::
-make_file_name(const settings_bundle& sb, const sml::qname& qn) const {
+make_file_name(const global_settings& gs, const sml::qname& qn) const {
     name_builder b;
-    return b.header_file_name(sb, qn);
+    return b.header_file_name(gs, qn);
 }
 
 std::shared_ptr<includes_builder_interface>
@@ -98,7 +98,7 @@ class_header_formatter::make_includes_builder() const {
 }
 
 dogen::formatters::file class_header_formatter::
-format(const settings_bundle& sb, const class_info& c) const {
+format(const global_settings& gs, const class_info& c) const {
     boilerplate_formatter boilerplate_;
     BOOST_LOG_SEV(lg, debug) << "Formatting type: " << c.name();
 
@@ -109,7 +109,7 @@ format(const settings_bundle& sb, const class_info& c) const {
 
     const auto rp(get_relative_path(c));
     dogen::cpp::formatters::boilerplate_formatter f;
-    const auto a(sb.general_settings().annotation());
+    const auto a(gs.general_settings().annotation());
     f.format_begin(fo, a, empty_includes, rp);
     f.format_end(fo, a, rp);
 
diff --git a/projects/cpp/src/types/formatters/workflow.cpp b/projects/cpp/src/types/formatters/workflow.cpp
index d4225d5..f2e6794 100644
--- a/projects/cpp/src/types/formatters/workflow.cpp
+++ b/projects/cpp/src/types/formatters/workflow.cpp
@@ -61,7 +61,7 @@ dispatcher::dispatcher(const std::forward_list<facet>& f)
 void dispatcher::visit(const dogen::cpp::class_info& c) {
     for (const auto& fct : facets_)
         for (const auto fmt : fct.container().class_formatters())
-            files_.push_front(fmt->format(fct.bundle(), c));
+            files_.push_front(fmt->format(fct.global_settings(), c));
 }
 
 void dispatcher::visit(const dogen::cpp::enum_info& /*e*/) {
diff --git a/projects/cpp/src/types/global_settings.cpp b/projects/cpp/src/types/global_settings.cpp
new file mode 100644
index 0000000..07d3ba9
--- /dev/null
+++ b/projects/cpp/src/types/global_settings.cpp
@@ -0,0 +1,101 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/types/global_settings.hpp"
+
+namespace dogen {
+namespace cpp {
+
+global_settings::global_settings(
+    const dogen::cpp::facet_settings& facet_settings,
+    const dogen::cpp::cpp_settings& cpp_settings,
+    const dogen::formatters::general_settings& general_settings)
+    : facet_settings_(facet_settings),
+      cpp_settings_(cpp_settings),
+      general_settings_(general_settings) { }
+
+void global_settings::swap(global_settings& other) noexcept {
+    using std::swap;
+    swap(facet_settings_, other.facet_settings_);
+    swap(cpp_settings_, other.cpp_settings_);
+    swap(general_settings_, other.general_settings_);
+}
+
+bool global_settings::operator==(const global_settings& rhs) const {
+    return facet_settings_ == rhs.facet_settings_ &&
+        cpp_settings_ == rhs.cpp_settings_ &&
+        general_settings_ == rhs.general_settings_;
+}
+
+global_settings& global_settings::operator=(global_settings other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const dogen::cpp::facet_settings& global_settings::facet_settings() const {
+    return facet_settings_;
+}
+
+dogen::cpp::facet_settings& global_settings::facet_settings() {
+    return facet_settings_;
+}
+
+void global_settings::facet_settings(const dogen::cpp::facet_settings& v) {
+    facet_settings_ = v;
+}
+
+void global_settings::facet_settings(const dogen::cpp::facet_settings&& v) {
+    facet_settings_ = std::move(v);
+}
+
+const dogen::cpp::cpp_settings& global_settings::cpp_settings() const {
+    return cpp_settings_;
+}
+
+dogen::cpp::cpp_settings& global_settings::cpp_settings() {
+    return cpp_settings_;
+}
+
+void global_settings::cpp_settings(const dogen::cpp::cpp_settings& v) {
+    cpp_settings_ = v;
+}
+
+void global_settings::cpp_settings(const dogen::cpp::cpp_settings&& v) {
+    cpp_settings_ = std::move(v);
+}
+
+const dogen::formatters::general_settings& global_settings::general_settings() const {
+    return general_settings_;
+}
+
+dogen::formatters::general_settings& global_settings::general_settings() {
+    return general_settings_;
+}
+
+void global_settings::general_settings(const dogen::formatters::general_settings& v) {
+    general_settings_ = v;
+}
+
+void global_settings::general_settings(const dogen::formatters::general_settings&& v) {
+    general_settings_ = std::move(v);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/cpp/src/types/global_settings_factory.cpp b/projects/cpp/src/types/global_settings_factory.cpp
new file mode 100644
index 0000000..5d8bbc8
--- /dev/null
+++ b/projects/cpp/src/types/global_settings_factory.cpp
@@ -0,0 +1,66 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/types/cpp_settings.hpp"
+#include "dogen/cpp/types/facet_settings.hpp"
+#include "dogen/cpp/types/meta_data/cpp_settings_factory.hpp"
+#include "dogen/cpp/types/meta_data/facet_settings_factory.hpp"
+#include "dogen/cpp/types/global_settings_factory.hpp"
+
+namespace dogen {
+namespace cpp {
+
+std::unordered_map<std::string, facet_settings>
+global_settings_factory::create_facet_settings(
+    const std::unordered_map<std::string, facet_settings>&
+    default_facet_settings_by_facet_id, const sml::module& model_module) const {
+    meta_data::facet_settings_factory f;
+    return f.build(default_facet_settings_by_facet_id,
+        model_module.meta_data());
+}
+
+cpp_settings global_settings_factory::
+create_cpp_settings(const sml::module& m) const {
+    meta_data::cpp_settings_factory f;
+    return f.build(m.meta_data());
+}
+
+std::unordered_map<std::string, global_settings> global_settings_factory::
+build(const std::unordered_map<std::string, facet_settings>&
+    default_facet_settings_by_facet_id,
+    const dogen::formatters::general_settings& gs,
+    const sml::module& model_module) const {
+
+    const auto cs(create_cpp_settings(model_module));
+    const auto fs(create_facet_settings(
+            default_facet_settings_by_facet_id, model_module));
+
+    std::unordered_map<std::string, global_settings> r;
+    for (auto pair : fs) {
+        global_settings glob;
+        glob.general_settings(gs);
+        glob.cpp_settings(cs);
+        glob.facet_settings(pair.second);
+        r[pair.first] = glob;
+    }
+    return r;
+}
+
+} }
diff --git a/projects/cpp/src/types/name_builder.cpp b/projects/cpp/src/types/name_builder.cpp
index dc36e64..783a07b 100644
--- a/projects/cpp/src/types/name_builder.cpp
+++ b/projects/cpp/src/types/name_builder.cpp
@@ -42,16 +42,16 @@ namespace dogen {
 namespace cpp {
 
 std::string name_builder::file_name(
-    const settings_bundle& sb, const bool is_header, const sml::qname& qn,
+    const global_settings& gs, const bool is_header, const sml::qname& qn,
     const std::string& additional_postfix) const {
 
     boost::filesystem::path r;
-    if (sb.cpp_settings().split_project()) {
+    if (gs.cpp_settings().split_project()) {
         for(auto n : qn.external_module_path())
             r /= n;
     }
 
-    if (sb.cpp_settings().split_project())
+    if (gs.cpp_settings().split_project())
         r /= qn.model_name();
     else if (is_header) {
         for(auto n : qn.external_module_path())
@@ -59,8 +59,8 @@ std::string name_builder::file_name(
         r /= qn.model_name();
     }
 
-    if (sb.cpp_settings().enable_facet_folders())
-        r /= sb.facet_settings().directory();
+    if (gs.cpp_settings().enable_facet_folders())
+        r /= gs.facet_settings().directory();
 
     for(auto n : qn.module_path())
         r /= n;
@@ -68,13 +68,13 @@ std::string name_builder::file_name(
     std::ostringstream stream;
     stream << qn.simple_name() << additional_postfix;
 
-    if (sb.cpp_settings().enable_unique_file_names())
-        stream << sb.facet_settings().postfix();
+    if (gs.cpp_settings().enable_unique_file_names())
+        stream << gs.facet_settings().postfix();
 
     if (is_header)
-        stream << sb.cpp_settings().header_file_extension();
+        stream << gs.cpp_settings().header_file_extension();
     else
-        stream << sb.cpp_settings().implementation_file_extension();
+        stream << gs.cpp_settings().implementation_file_extension();
 
     r /= stream.str();
 
@@ -102,15 +102,15 @@ namespace_list(const sml::model& m, const sml::qname& qn) const {
     return r;
 }
 
-std::string name_builder::header_file_name(const settings_bundle& sb,
+std::string name_builder::header_file_name(const global_settings& gs,
     const sml::qname& qn, const std::string& additional_postfix) const {
-    return file_name(sb, true/*is_header*/, qn, additional_postfix);
+    return file_name(gs, true/*is_header*/, qn, additional_postfix);
 }
 
 std::string name_builder::implementation_file_name(
-    const settings_bundle& sb, const sml::qname& qn,
+    const global_settings& gs, const sml::qname& qn,
     const std::string& additional_postfix) const {
-    return file_name(sb, false/*is_header*/, qn, additional_postfix);
+    return file_name(gs, false/*is_header*/, qn, additional_postfix);
 }
 
 std::string name_builder::
diff --git a/projects/cpp/src/types/settings_bundle.cpp b/projects/cpp/src/types/settings_bundle.cpp
deleted file mode 100644
index 783261f..0000000
--- a/projects/cpp/src/types/settings_bundle.cpp
+++ /dev/null
@@ -1,101 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/cpp/types/settings_bundle.hpp"
-
-namespace dogen {
-namespace cpp {
-
-settings_bundle::settings_bundle(
-    const dogen::cpp::facet_settings& facet_settings,
-    const dogen::cpp::cpp_settings& cpp_settings,
-    const dogen::formatters::general_settings& general_settings)
-    : facet_settings_(facet_settings),
-      cpp_settings_(cpp_settings),
-      general_settings_(general_settings) { }
-
-void settings_bundle::swap(settings_bundle& other) noexcept {
-    using std::swap;
-    swap(facet_settings_, other.facet_settings_);
-    swap(cpp_settings_, other.cpp_settings_);
-    swap(general_settings_, other.general_settings_);
-}
-
-bool settings_bundle::operator==(const settings_bundle& rhs) const {
-    return facet_settings_ == rhs.facet_settings_ &&
-        cpp_settings_ == rhs.cpp_settings_ &&
-        general_settings_ == rhs.general_settings_;
-}
-
-settings_bundle& settings_bundle::operator=(settings_bundle other) {
-    using std::swap;
-    swap(*this, other);
-    return *this;
-}
-
-const dogen::cpp::facet_settings& settings_bundle::facet_settings() const {
-    return facet_settings_;
-}
-
-dogen::cpp::facet_settings& settings_bundle::facet_settings() {
-    return facet_settings_;
-}
-
-void settings_bundle::facet_settings(const dogen::cpp::facet_settings& v) {
-    facet_settings_ = v;
-}
-
-void settings_bundle::facet_settings(const dogen::cpp::facet_settings&& v) {
-    facet_settings_ = std::move(v);
-}
-
-const dogen::cpp::cpp_settings& settings_bundle::cpp_settings() const {
-    return cpp_settings_;
-}
-
-dogen::cpp::cpp_settings& settings_bundle::cpp_settings() {
-    return cpp_settings_;
-}
-
-void settings_bundle::cpp_settings(const dogen::cpp::cpp_settings& v) {
-    cpp_settings_ = v;
-}
-
-void settings_bundle::cpp_settings(const dogen::cpp::cpp_settings&& v) {
-    cpp_settings_ = std::move(v);
-}
-
-const dogen::formatters::general_settings& settings_bundle::general_settings() const {
-    return general_settings_;
-}
-
-dogen::formatters::general_settings& settings_bundle::general_settings() {
-    return general_settings_;
-}
-
-void settings_bundle::general_settings(const dogen::formatters::general_settings& v) {
-    general_settings_ = v;
-}
-
-void settings_bundle::general_settings(const dogen::formatters::general_settings&& v) {
-    general_settings_ = std::move(v);
-}
-
-} }
\ No newline at end of file
diff --git a/projects/cpp/src/types/workflow.cpp b/projects/cpp/src/types/workflow.cpp
index 6610184..50171b4 100644
--- a/projects/cpp/src/types/workflow.cpp
+++ b/projects/cpp/src/types/workflow.cpp
@@ -27,12 +27,12 @@
 #include "dogen/sml/io/object_types_io.hpp"
 #include "dogen/sml/io/qname_io.hpp"
 #include "dogen/cpp/types/workflow_error.hpp"
-#include "dogen/cpp/io/settings_bundle_io.hpp"
+#include "dogen/cpp/io/global_settings_io.hpp"
 #include "dogen/cpp/io/path_spec_details_io.hpp"
 #include "dogen/cpp/io/formatters/formatter_types_io.hpp"
 #include "dogen/cpp/types/meta_data/cpp_settings_factory.hpp"
 #include "dogen/cpp/types/meta_data/facet_settings_factory.hpp"
-#include "dogen/cpp/types/bundler.hpp"
+#include "dogen/cpp/types/global_settings_factory.hpp"
 #include "dogen/cpp/types/formatters/facet_factory.hpp"
 #include "dogen/cpp/types/formatters/container_splitter.hpp"
 #include "dogen/cpp/types/workflow.hpp"
@@ -127,16 +127,16 @@ sml::module workflow::obtain_model_module_activity(const sml::model& m) const {
     return r;
 }
 
-std::unordered_map<std::string, settings_bundle> workflow::
-settings_bundle_for_facet_activty(
+std::unordered_map<std::string, global_settings> workflow::
+global_settings_for_facet_activty(
     const dogen::formatters::general_settings& gs,
     const sml::module& model_module) const {
-    BOOST_LOG_SEV(lg, debug) << "Creating settings bundles by facet.";
-    bundler b;
+    BOOST_LOG_SEV(lg, debug) << "Creating global settings by facet.";
+    global_settings_factory f;
     const auto& defaults(registrar().default_facet_settings_by_facet_id());
-    const auto r(b.bundle(defaults, gs, model_module));
-    BOOST_LOG_SEV(lg, debug) << "Bundles: " << r;
-    BOOST_LOG_SEV(lg, debug) << "Finsihed creating settings bundles by facet.";
+    const auto r(f.build(defaults, gs, model_module));
+    BOOST_LOG_SEV(lg, debug) << "Global settings: " << r;
+    BOOST_LOG_SEV(lg, debug) << "Finsihed creating global settings by facet.";
     return r;
 }
 
@@ -150,11 +150,11 @@ formatter_container_for_facet_activty(
 std::forward_list<formatters::facet> workflow::create_facets_activty(
     const std::unordered_map<std::string, formatters::container>&
     formatters_by_facet,
-    const std::unordered_map<std::string, settings_bundle>&
-    settings_bundle_for_facet) const {
+    const std::unordered_map<std::string, global_settings>&
+    global_settings_for_facet) const {
 
     formatters::facet_factory f;
-    return f.build(formatters_by_facet, settings_bundle_for_facet);
+    return f.build(formatters_by_facet, global_settings_for_facet);
 }
 
 workflow::includes_builder_by_formatter_id
@@ -199,7 +199,8 @@ workflow::obtain_relative_file_names_for_key_activity(
             for (const auto fct : facets) {
                 for (const auto fmt : fct.container().class_formatters()) {
                     const auto& id(fmt->formatter_id());
-                    const auto& fn(fmt->make_file_name(fct.bundle(), qn));
+                    const auto& gs(fct.global_settings());
+                    const auto& fn(fmt->make_file_name(gs, qn));
                     r[qn].insert(std::make_pair(id, fn));
                 }
             }
@@ -296,11 +297,11 @@ std::forward_list<dogen::formatters::file> workflow::generate(
     BOOST_LOG_SEV(lg, debug) << "Started C++ backend.";
 
     const auto mod(obtain_model_module_activity(m));
-    const auto sb(settings_bundle_for_facet_activty(gs, mod));
+    const auto glob(global_settings_for_facet_activty(gs, mod));
 
     const auto& c(registrar().formatter_container());
     const auto fc(formatter_container_for_facet_activty(c));
-    const auto facets(create_facets_activty(fc, sb));
+    const auto facets(create_facets_activty(fc, glob));
     const auto rel(obtain_relative_file_names_for_key_activity(facets, m));
 
     const auto builders(create_includes_builder_by_formatter_id_activity(c));
