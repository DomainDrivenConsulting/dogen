diff --git a/diagrams/cpp.dia b/diagrams/cpp.dia
index e2df5cf..f532bd2 100644
--- a/diagrams/cpp.dia
+++ b/diagrams/cpp.dia
@@ -560,13 +560,13 @@ descend from it. Names are in identifiable name format.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O3">
       <dia:attribute name="obj_pos">
-        <dia:point val="90,17"/>
+        <dia:point val="127,17"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="89.95,16.95;115.19,26.25"/>
+        <dia:rectangle val="126.95,16.95;152.19,26.25"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="90,17"/>
+        <dia:point val="127,17"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="25.140000000000001"/>
@@ -2896,19 +2896,19 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O14">
       <dia:attribute name="obj_pos">
-        <dia:point val="121,17"/>
+        <dia:point val="101,17"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="120.95,16.95;156.2,22.25"/>
+        <dia:rectangle val="100.95,16.95;115.025,20.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="121,17"/>
+        <dia:point val="101,17"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="35.149999999999999"/>
+        <dia:real val="13.975"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="5.2000000000000011"/>
+        <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
         <dia:string>#entity#</dia:string>
@@ -3021,52 +3021,6 @@ Does not use characters which are not valid for C++ identifiers.#</dia:string>
             <dia:boolean val="false"/>
           </dia:attribute>
         </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#settings#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>#settings::bundle#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#formatter_properties#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, formattables::formatter_properties&gt;#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
       </dia:attribute>
       <dia:attribute name="operations"/>
       <dia:attribute name="template">
@@ -14005,7 +13959,7 @@ the dynamic object.
         <dia:point val="105,4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="104.95,3.95;120.95,7.65"/>
+        <dia:rectangle val="104.95,3.95;120.95,8.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="105,4"/>
@@ -14014,7 +13968,7 @@ the dynamic object.
         <dia:real val="15.9"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="3.6000000000000001"/>
+        <dia:real val="4.4000000000000004"/>
       </dia:attribute>
       <dia:attribute name="name">
         <dia:string>#formattable#</dia:string>
@@ -14127,6 +14081,29 @@ the dynamic object.
             <dia:boolean val="false"/>
           </dia:attribute>
         </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#id#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
       </dia:attribute>
       <dia:attribute name="operations"/>
       <dia:attribute name="template">
@@ -14137,17 +14114,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O104">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="69.825,22.15;139.425,34.05"/>
+        <dia:rectangle val="69.825,20.55;108.837,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="69.875,29"/>
         <dia:point val="69.875,34"/>
       </dia:attribute>
@@ -14179,17 +14156,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O105">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="83.595,22.15;139.425,42.05"/>
+        <dia:rectangle val="83.595,20.55;108.837,42.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="83.645,29"/>
         <dia:point val="83.645,42"/>
       </dia:attribute>
@@ -14221,17 +14198,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O106">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="91.8162,22.15;139.425,34.05"/>
+        <dia:rectangle val="91.8162,20.55;108.837,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="91.8662,29"/>
         <dia:point val="91.8662,34"/>
       </dia:attribute>
@@ -14263,17 +14240,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O107">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="100.484,22.15;139.425,42.05"/>
+        <dia:rectangle val="100.484,20.55;108.837,42.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="100.534,29"/>
         <dia:point val="100.534,42"/>
       </dia:attribute>
@@ -14305,17 +14282,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O108">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="41.055,22.15;139.425,34.05"/>
+        <dia:rectangle val="41.055,20.55;108.837,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="41.105,29"/>
         <dia:point val="41.105,34"/>
       </dia:attribute>
@@ -14347,17 +14324,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O109">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="113.478,22.15;139.425,34.05"/>
+        <dia:rectangle val="107.137,20.55;113.578,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="113.528,29"/>
         <dia:point val="113.528,34"/>
       </dia:attribute>
@@ -14389,17 +14366,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O110">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="127.038,22.15;139.425,42.05"/>
+        <dia:rectangle val="107.137,20.55;127.138,42.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="127.088,29"/>
         <dia:point val="127.088,42"/>
       </dia:attribute>
@@ -14503,17 +14480,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O112">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="134.055,22.15;139.425,34.05"/>
+        <dia:rectangle val="107.137,20.55;134.155,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="134.105,29"/>
         <dia:point val="134.105,34"/>
       </dia:attribute>
@@ -14545,17 +14522,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O113">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="137.725,22.15;142.446,42.05"/>
+        <dia:rectangle val="107.137,20.55;142.446,42.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="142.396,29"/>
         <dia:point val="142.396,42"/>
       </dia:attribute>
@@ -14587,17 +14564,17 @@ the dynamic object.
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O114">
       <dia:attribute name="obj_pos">
-        <dia:point val="138.575,22.2"/>
+        <dia:point val="107.987,20.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="137.725,22.15;149.407,34.05"/>
+        <dia:rectangle val="107.137,20.55;149.407,34.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="138.575,22.2"/>
-        <dia:point val="138.575,29"/>
+        <dia:point val="107.987,20.6"/>
+        <dia:point val="107.987,29"/>
         <dia:point val="149.357,29"/>
         <dia:point val="149.357,34"/>
       </dia:attribute>
@@ -14809,17 +14786,17 @@ the dynamic object.
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="198.34,59.6"/>
+        <dia:point val="198.532,59.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="189.948,58.85;199.09,76.8"/>
+        <dia:rectangle val="189.948,58.85;199.282,76.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="198.34,59.6"/>
-        <dia:point val="198.34,64"/>
+        <dia:point val="198.532,59.6"/>
+        <dia:point val="198.532,64"/>
         <dia:point val="189.998,64"/>
         <dia:point val="189.998,76"/>
       </dia:attribute>
@@ -16049,18 +16026,18 @@ registry of all available formatters.#</dia:string>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O134">
       <dia:attribute name="obj_pos">
-        <dia:point val="112.95,7.6"/>
+        <dia:point val="112.95,8.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="69.52,7.55;113.8,17.05"/>
+        <dia:rectangle val="69.52,8.35;113.8,17.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="112.95,7.6"/>
-        <dia:point val="112.95,12.7"/>
-        <dia:point val="69.57,12.7"/>
+        <dia:point val="112.95,8.4"/>
+        <dia:point val="112.95,13.1"/>
+        <dia:point val="69.57,13.1"/>
         <dia:point val="69.57,17"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
@@ -16091,19 +16068,19 @@ registry of all available formatters.#</dia:string>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O135">
       <dia:attribute name="obj_pos">
-        <dia:point val="112.95,7.6"/>
+        <dia:point val="112.95,8.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="102.52,7.55;113.8,17.05"/>
+        <dia:rectangle val="112.1,8.35;139.62,17.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="112.95,7.6"/>
-        <dia:point val="112.95,12.7"/>
-        <dia:point val="102.57,12.7"/>
-        <dia:point val="102.57,17"/>
+        <dia:point val="112.95,8.4"/>
+        <dia:point val="112.95,13.1"/>
+        <dia:point val="139.57,13.1"/>
+        <dia:point val="139.57,17"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -16133,19 +16110,19 @@ registry of all available formatters.#</dia:string>
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O136">
       <dia:attribute name="obj_pos">
-        <dia:point val="112.95,7.6"/>
+        <dia:point val="112.95,8.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="112.1,7.55;138.625,17.05"/>
+        <dia:rectangle val="107.938,8.35;113.8,17.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="112.95,7.6"/>
-        <dia:point val="112.95,12.7"/>
-        <dia:point val="138.575,12.7"/>
-        <dia:point val="138.575,17"/>
+        <dia:point val="112.95,8.4"/>
+        <dia:point val="112.95,13.1"/>
+        <dia:point val="107.987,13.1"/>
+        <dia:point val="107.987,17"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -16211,17 +16188,17 @@ registry of all available formatters.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="211.68,59.6"/>
+        <dia:point val="212.065,59.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="211.63,59.55;251.75,80.8"/>
+        <dia:rectangle val="212.015,59.55;251.75,80.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="211.68,59.6"/>
-        <dia:point val="211.68,76"/>
+        <dia:point val="212.065,59.6"/>
+        <dia:point val="212.065,76"/>
         <dia:point val="251,76"/>
         <dia:point val="251,80"/>
       </dia:attribute>
@@ -26398,17 +26375,17 @@ main, or from another initialiser.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="211.68,52"/>
+        <dia:point val="212.065,52"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="210.93,36.75;233.2,52.8"/>
+        <dia:rectangle val="211.315,36.75;233.2,52.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="211.68,52"/>
-        <dia:point val="211.68,46"/>
+        <dia:point val="212.065,52"/>
+        <dia:point val="212.065,46"/>
         <dia:point val="233,46"/>
         <dia:point val="233,36.8"/>
       </dia:attribute>
@@ -30477,7 +30454,7 @@ main, or from another initialiser.#</dia:string>
         <dia:point val="148.917,134.2"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="141.097,133.45;149.667,146.75"/>
+        <dia:rectangle val="141.098,133.45;149.667,146.75"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -33697,16 +33674,16 @@ main, or from another initialiser.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="112.95,3.95283"/>
+        <dia:point val="112.95,3.95381"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="112.2,-9.60038;118.338,4.75283"/>
+        <dia:rectangle val="112.2,-9.60038;118.338,4.75381"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="112.95,3.95283"/>
+        <dia:point val="112.95,3.95381"/>
         <dia:point val="112.95,-2"/>
         <dia:point val="118.138,-2"/>
         <dia:point val="118.138,-9.55038"/>
@@ -33726,7 +33703,7 @@ main, or from another initialiser.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O103" connection="10"/>
+        <dia:connection handle="0" to="O103" connection="12"/>
         <dia:connection handle="1" to="O269" connection="12"/>
       </dia:connections>
       <dia:childnode parent="O0"/>
@@ -35854,5 +35831,163 @@ main, or from another initialiser.#</dia:string>
       <dia:attribute name="templates"/>
       <dia:childnode parent="O1"/>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O287">
+      <dia:attribute name="obj_pos">
+        <dia:point val="417,151"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="416.95,150.95;452.2,154.65"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="417,151"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="35.149999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3.6000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#context#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#Supplies additional information required for formatting.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#bundle#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#settings::bundle#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#formatter_properties#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::unordered_map&lt;std::string, formattables::formatter_properties&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+      <dia:childnode parent="O16"/>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
diff --git a/doc/agile/sprint_backlog_77.org b/doc/agile/sprint_backlog_77.org
index b3a290d..9607971 100644
--- a/doc/agile/sprint_backlog_77.org
+++ b/doc/agile/sprint_backlog_77.org
@@ -13,17 +13,17 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
-#+CAPTION: Clock summary at [2016-01-02 Sat 00:10]
+#+CAPTION: Clock summary at [2016-01-04 Mon 21:41]
 | <75>                                                                        |         |       |       |
 | Headline                                                                    | Time    |       |       |
 |-----------------------------------------------------------------------------+---------+-------+-------|
-| *Total time*                                                                | *37:00* |       |       |
+| *Total time*                                                                | *37:30* |       |       |
 |-----------------------------------------------------------------------------+---------+-------+-------|
-| Stories                                                                     | 37:00   |       |       |
-| Active                                                                      |         | 37:00 |       |
-| STARTED Sprint and product backlog grooming                                 |         |       |  2:16 |
-| STARTED Update manual                                                       |         |       |  0:43 |
-| STARTED Update Linux CDash agent                                            |         |       |  0:09 |
+| Stories                                                                     | 37:30   |       |       |
+| Active                                                                      |         | 37:30 |       |
+| COMPLETED Sprint and product backlog grooming                               |         |       |  2:16 |
+| COMPLETED Update manual                                                     |         |       |  0:43 |
+| POSTPONED Update Linux CDash agent                                          |         |       |  0:09 |
 | COMPLETED Add support for conan.io                                          |         |       |  3:06 |
 | COMPLETED Create a blog post on conan                                       |         |       |  3:00 |
 | COMPLETED Investigate AppVeyor's windows support for builds                 |         |       |  2:02 |
@@ -34,8 +34,8 @@
 | COMPLETED Add qualified name to yarn properties                             |         |       |  1:26 |
 | COMPLETED Update settings bundle to include property settings               |         |       |  1:33 |
 | COMPLETED Use qualified name as keys for repositories in cpp                |         |       |  0:34 |
-| STARTED Re-read MDSD book                                                   |         |       | 15:00 |
-| STARTED Supply formatter properties and settings directly to formatter      |         |       |  0:18 |
+| COMPLETED Re-read MDSD book                                                 |         |       | 15:00 |
+| POSTPONED Supply formatter properties and settings directly to formatter    |         |       |  0:48 |
 #+end:
 
 *** COMPLETED Sprint and product backlog grooming                     :story:
@@ -297,6 +297,7 @@ Clock manually adjusted to reflect reading time.
 
 *** POSTPONED Supply formatter properties and settings directly to formatter :story:
     CLOSED: [2016-01-04 Mon 21:32]
+    CLOCK: [2016-01-02 Sat 00:11]--[2016-01-02 Sat 00:41] =>  0:30
     CLOCK: [2016-01-01 Fri 23:15]--[2016-01-01 Fri 23:33] =>  0:18
 
 In preparation for removing the cpp formattables, we need to supply
diff --git a/doc/agile/sprint_backlog_78.org b/doc/agile/sprint_backlog_78.org
index ad16b45..d3fcc33 100644
--- a/doc/agile/sprint_backlog_78.org
+++ b/doc/agile/sprint_backlog_78.org
@@ -12,20 +12,20 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75
-#+CAPTION: Clock summary at [2016-01-04 Mon 21:36]
+#+CAPTION: Clock summary at [2016-01-05 Tue 23:12]
 | <75>                                                                        |        |      |      |
 | Headline                                                                    | Time   |      |      |
 |-----------------------------------------------------------------------------+--------+------+------|
-| *Total time*                                                                | *0:07* |      |      |
+| *Total time*                                                                | *3:27* |      |      |
 |-----------------------------------------------------------------------------+--------+------+------|
-| Stories                                                                     | 0:07   |      |      |
-| Active                                                                      |        | 0:07 |      |
-| STARTED Sprint and product backlog grooming                                 |        |      | 0:07 |
+| Stories                                                                     | 3:27   |      |      |
+| Active                                                                      |        | 3:27 |      |
+| STARTED Sprint and product backlog grooming                                 |        |      | 0:12 |
+| STARTED Supply formatter properties and settings directly to formatter      |        |      | 3:15 |
 #+end:
 
 *** STARTED Sprint and product backlog grooming                       :story:
-    CLOCK: [2016-01-04 Mon 21:28]--[2016-01-04 Mon 21:35] =>  0:07
-
+    CLOCK: [2016-01-04 Mon 21:28]--[2016-01-04 Mon 21:40] =>  0:12
 
 Updates to sprint and product backlog.
 
@@ -34,11 +34,22 @@ Updates to sprint and product backlog.
 Updates to manual.
 
 *** STARTED Supply formatter properties and settings directly to formatter :story:
+    CLOCK: [2016-01-05 Tue 21:15]--[2016-01-05 Tue 23:11] =>  1:56
+    CLOCK: [2016-01-04 Mon 21:41]--[2016-01-04 Mon 23:00] =>  1:19
 
 In preparation for removing the cpp formattables, we need to supply
 the formatter properties and settings in the format method, rather
 than via the cpp type.
 
+Notes:
+
+- we must pass in the whole map into the formatter not just the
+  formatter properties for a given formatter.
+- we need to do some hackery around the formattables factory and pass
+  in the repositories as non-const references to populate them for the
+  hacked types. This will all be handled properly once we move to yarn
+  types.
+
 *** Tidy-up master include generation                                 :story:
 
 At present we have one humongous hack in the factory to generate the
diff --git a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
index 4c17ace..cb8cbda 100644
--- a/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
+++ b/projects/cpp/include/dogen/cpp/hash/all_hash.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/cpp/hash/settings/bundle_hash.hpp"
+#include "dogen/cpp/hash/formatters/context_hash.hpp"
 #include "dogen/cpp/hash/formattables/entity_hash.hpp"
 #include "dogen/cpp/hash/formatters/file_types_hash.hpp"
 #include "dogen/cpp/hash/settings/odb_settings_hash.hpp"
diff --git a/projects/cpp/include/dogen/cpp/hash/formatters/context_hash.hpp b/projects/cpp/include/dogen/cpp/hash/formatters/context_hash.hpp
new file mode 100644
index 0000000..127e4ba
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/hash/formatters/context_hash.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_HASH_FORMATTERS_CONTEXT_HASH_HPP
+#define DOGEN_CPP_HASH_FORMATTERS_CONTEXT_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/cpp/types/formatters/context.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+struct context_hasher {
+public:
+    static std::size_t hash(const context& v);
+};
+
+} } }
+
+namespace std {
+
+template<>
+struct hash<dogen::cpp::formatters::context> {
+public:
+    size_t operator()(const dogen::cpp::formatters::context& v) const {
+        return dogen::cpp::formatters::context_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/cpp/include/dogen/cpp/io/all_io.hpp b/projects/cpp/include/dogen/cpp/io/all_io.hpp
index 27aa7da..ce030cd 100644
--- a/projects/cpp/include/dogen/cpp/io/all_io.hpp
+++ b/projects/cpp/include/dogen/cpp/io/all_io.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/cpp/io/settings/bundle_io.hpp"
+#include "dogen/cpp/io/formatters/context_io.hpp"
 #include "dogen/cpp/io/formattables/entity_io.hpp"
 #include "dogen/cpp/io/formatters/file_types_io.hpp"
 #include "dogen/cpp/io/settings/odb_settings_io.hpp"
diff --git a/projects/cpp/include/dogen/cpp/io/formatters/context_io.hpp b/projects/cpp/include/dogen/cpp/io/formatters/context_io.hpp
new file mode 100644
index 0000000..21d214e
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/io/formatters/context_io.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_IO_FORMATTERS_CONTEXT_IO_HPP
+#define DOGEN_CPP_IO_FORMATTERS_CONTEXT_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/cpp/types/formatters/context.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::cpp::formatters::context& v);
+
+} } }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
index 610385e..3184253 100644
--- a/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
+++ b/projects/cpp/include/dogen/cpp/serialization/all_ser.hpp
@@ -27,6 +27,7 @@
 
 #include "dogen/cpp/serialization/registrar_ser.hpp"
 #include "dogen/cpp/serialization/settings/bundle_ser.hpp"
+#include "dogen/cpp/serialization/formatters/context_ser.hpp"
 #include "dogen/cpp/serialization/formattables/entity_ser.hpp"
 #include "dogen/cpp/serialization/formatters/file_types_ser.hpp"
 #include "dogen/cpp/serialization/settings/odb_settings_ser.hpp"
diff --git a/projects/cpp/include/dogen/cpp/serialization/formatters/context_fwd_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/formatters/context_fwd_ser.hpp
new file mode 100644
index 0000000..b6e82ee
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/formatters/context_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_FORMATTERS_CONTEXT_FWD_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_FORMATTERS_CONTEXT_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/formatters/context_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/serialization/formatters/context_ser.hpp b/projects/cpp/include/dogen/cpp/serialization/formatters/context_ser.hpp
new file mode 100644
index 0000000..f1ad591
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/serialization/formatters/context_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_SERIALIZATION_FORMATTERS_CONTEXT_SER_HPP
+#define DOGEN_CPP_SERIALIZATION_FORMATTERS_CONTEXT_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/cpp/types/formatters/context.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::cpp::formatters::context)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
index f41e8a1..75b9ffd 100644
--- a/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
+++ b/projects/cpp/include/dogen/cpp/test_data/all_td.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/cpp/test_data/settings/bundle_td.hpp"
+#include "dogen/cpp/test_data/formatters/context_td.hpp"
 #include "dogen/cpp/test_data/formattables/entity_td.hpp"
 #include "dogen/cpp/test_data/formatters/file_types_td.hpp"
 #include "dogen/cpp/test_data/settings/odb_settings_td.hpp"
diff --git a/projects/cpp/include/dogen/cpp/test_data/formatters/context_td.hpp b/projects/cpp/include/dogen/cpp/test_data/formatters/context_td.hpp
new file mode 100644
index 0000000..f7e85a6
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/test_data/formatters/context_td.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TEST_DATA_FORMATTERS_CONTEXT_TD_HPP
+#define DOGEN_CPP_TEST_DATA_FORMATTERS_CONTEXT_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/cpp/types/formatters/context.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+class context_generator {
+public:
+    context_generator();
+
+public:
+    typedef dogen::cpp::formatters::context result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} } }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/all.hpp b/projects/cpp/include/dogen/cpp/types/all.hpp
index de38c81..53b8a80 100644
--- a/projects/cpp/include/dogen/cpp/types/all.hpp
+++ b/projects/cpp/include/dogen/cpp/types/all.hpp
@@ -34,6 +34,7 @@
 #include "dogen/cpp/types/formatters/io/io.hpp"
 #include "dogen/cpp/types/formatters/traits.hpp"
 #include "dogen/cpp/types/settings/settings.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formatters/odb/odb.hpp"
 #include "dogen/cpp/types/settings/registrar.hpp"
 #include "dogen/cpp/types/formattables/entity.hpp"
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/class_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/class_info.hpp
index ac7a050..3392af4 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/class_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/class_info.hpp
@@ -56,12 +56,11 @@ public:
     class_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const std::list<dogen::cpp::formattables::property_info>& properties,
         const std::list<dogen::cpp::formattables::property_info>& all_properties,
         const bool requires_stream_manipulators,
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/cmakelists_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/cmakelists_info.hpp
index a57f9c0..ead64e6 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/cmakelists_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/cmakelists_info.hpp
@@ -57,6 +57,7 @@ public:
     cmakelists_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const boost::filesystem::path& file_path,
         const std::string& model_name,
         const std::string& product_name,
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/concept_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/concept_info.hpp
index e5c79fd..04fd096 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/concept_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/concept_info.hpp
@@ -48,12 +48,11 @@ public:
     concept_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const std::list<dogen::cpp::formattables::property_info>& properties,
         const std::list<dogen::cpp::formattables::property_info>& all_properties);
 
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/entity.hpp b/projects/cpp/include/dogen/cpp/types/formattables/entity.hpp
index 53d4b50..08c6701 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/entity.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/entity.hpp
@@ -29,10 +29,7 @@
 #include <iosfwd>
 #include <string>
 #include <algorithm>
-#include <unordered_map>
-#include "dogen/cpp/types/settings/bundle.hpp"
 #include "dogen/cpp/types/formattables/formattable.hpp"
-#include "dogen/cpp/types/formattables/formatter_properties.hpp"
 #include "dogen/cpp/serialization/formattables/entity_fwd_ser.hpp"
 
 namespace dogen {
@@ -54,12 +51,11 @@ public:
     entity(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
-        const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
@@ -118,16 +114,6 @@ public:
     void namespaces(const std::list<std::string>&& v);
     /**@}*/
 
-    const dogen::cpp::settings::bundle& settings() const;
-    dogen::cpp::settings::bundle& settings();
-    void settings(const dogen::cpp::settings::bundle& v);
-    void settings(const dogen::cpp::settings::bundle&& v);
-
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties() const;
-    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties();
-    void formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v);
-    void formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>&& v);
-
 protected:
     bool compare(const entity& rhs) const;
 public:
@@ -141,8 +127,6 @@ private:
     std::string qualified_name_;
     std::string documentation_;
     std::list<std::string> namespaces_;
-    dogen::cpp::settings::bundle settings_;
-    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> formatter_properties_;
 };
 
 inline entity::~entity() noexcept { }
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/enum_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/enum_info.hpp
index 502252c..86660a9 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/enum_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/enum_info.hpp
@@ -52,12 +52,11 @@ public:
     enum_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const std::list<dogen::cpp::formattables::enumerator_info>& enumerators,
         const std::string& type);
 
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/exception_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/exception_info.hpp
index b681c7a..c239e8c 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/exception_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/exception_info.hpp
@@ -49,12 +49,11 @@ public:
     exception_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
-        const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/formattable.hpp b/projects/cpp/include/dogen/cpp/types/formattables/formattable.hpp
index 6992871..b652e42 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/formattable.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/formattable.hpp
@@ -49,7 +49,8 @@ public:
 public:
     formattable(
         const std::string& identity,
-        const dogen::cpp::formattables::origin_types origin_type);
+        const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id);
 
 private:
     template<typename Archive>
@@ -76,6 +77,11 @@ public:
     dogen::cpp::formattables::origin_types origin_type() const;
     void origin_type(const dogen::cpp::formattables::origin_types v);
 
+    const std::string& id() const;
+    std::string& id();
+    void id(const std::string& v);
+    void id(const std::string&& v);
+
 protected:
     bool compare(const formattable& rhs) const;
 public:
@@ -87,6 +93,7 @@ protected:
 private:
     std::string identity_;
     dogen::cpp::formattables::origin_types origin_type_;
+    std::string id_;
 };
 
 inline formattable::~formattable() noexcept { }
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/forward_declarations_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/forward_declarations_info.hpp
index 8d93c0e..c8f7e05 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/forward_declarations_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/forward_declarations_info.hpp
@@ -49,12 +49,11 @@ public:
     forward_declarations_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const bool is_enum,
         const std::string& enum_type,
         const bool is_exception);
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/includers_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/includers_info.hpp
index 51c0c84..7aea4f2 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/includers_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/includers_info.hpp
@@ -46,12 +46,11 @@ public:
     includers_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
-        const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/namespace_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/namespace_info.hpp
index 9654eb6..56c0da2 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/namespace_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/namespace_info.hpp
@@ -49,12 +49,11 @@ public:
     namespace_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
-        const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/odb_options_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/odb_options_info.hpp
index 7c6b92a..13889f9 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/odb_options_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/odb_options_info.hpp
@@ -55,6 +55,7 @@ public:
     odb_options_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& model_name,
         const std::string& product_name,
         const boost::filesystem::path& file_path,
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/primitive_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/primitive_info.hpp
index 9db597a..f10a678 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/primitive_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/primitive_info.hpp
@@ -46,12 +46,11 @@ public:
     primitive_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
-        const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+        const std::list<std::string>& namespaces);
 
 private:
     template<typename Archive>
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/registrar_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/registrar_info.hpp
index ade31b1..a4375ea 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/registrar_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/registrar_info.hpp
@@ -51,12 +51,11 @@ public:
     registrar_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const std::list<std::string>& leaves,
         const std::list<std::string>& model_dependencies);
 
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/transformer.hpp b/projects/cpp/include/dogen/cpp/types/formattables/transformer.hpp
index d43f53e..2ed402f 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/transformer.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/transformer.hpp
@@ -53,8 +53,6 @@
 #include "dogen/cpp/types/formattables/primitive_info.hpp"
 #include "dogen/cpp/types/formattables/forward_declarations_info.hpp"
 #include "dogen/cpp/types/settings/opaque_settings_builder.hpp"
-#include "dogen/cpp/types/settings/bundle_repository.hpp"
-#include "dogen/cpp/types/formattables/formatter_properties_repository.hpp"
 
 namespace dogen {
 namespace cpp {
@@ -66,8 +64,6 @@ namespace formattables {
 class transformer {
 public:
     transformer(const settings::opaque_settings_builder& osb,
-        const settings::bundle_repository& brp,
-        const formatter_properties_repository& frp,
         const yarn::model& m);
 
 private:
@@ -216,8 +212,6 @@ public:
 
 private:
     const settings::opaque_settings_builder& opaque_settings_builder_;
-    const settings::bundle_repository& bundle_repository_;
-    const formatter_properties_repository& formatter_properties_repository_;
     const yarn::model& model_;
 };
 
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/visitor_info.hpp b/projects/cpp/include/dogen/cpp/types/formattables/visitor_info.hpp
index 16f5dfa..00c454f 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/visitor_info.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/visitor_info.hpp
@@ -51,12 +51,11 @@ public:
     visitor_info(
         const std::string& identity,
         const dogen::cpp::formattables::origin_types origin_type,
+        const std::string& id,
         const std::string& name,
         const std::string& qualified_name,
         const std::string& documentation,
         const std::list<std::string>& namespaces,
-        const dogen::cpp::settings::bundle& settings,
-        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
         const std::list<dogen::cpp::formattables::visited_type_info>& types);
 
 private:
diff --git a/projects/cpp/include/dogen/cpp/types/formattables/workflow.hpp b/projects/cpp/include/dogen/cpp/types/formattables/workflow.hpp
index aafd5fb..a73648a 100644
--- a/projects/cpp/include/dogen/cpp/types/formattables/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formattables/workflow.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include <memory>
+#include <utility>
 #include <forward_list>
 #include "dogen/dynamic/types/object.hpp"
 #include "dogen/dynamic/types/repository.hpp"
@@ -83,8 +84,6 @@ private:
      */
     std::forward_list<std::shared_ptr<formattables::formattable> >
     from_transformer_activity(const settings::opaque_settings_builder& osb,
-        const settings::bundle_repository& brp,
-        const formatter_properties_repository& fprp,
         const yarn::model& m) const;
 
     /**
@@ -107,7 +106,10 @@ public:
     /**
      * @brief Executes the workflow.
      */
-    std::forward_list<std::shared_ptr<formattables::formattable> >
+    std::pair<
+        formattables::formatter_properties_repository,
+        std::forward_list<std::shared_ptr<formattables::formattable> >
+    >
     execute(const config::cpp_options& opts,
         const dynamic::repository& drp,
         const dynamic::object& root_object,
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
index 2eabfb7..275e76a 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/class_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/class_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -45,7 +46,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::class_info& c) const = 0;
+    format(const context& ctx, const formattables::class_info& c) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/concept_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/concept_formatter_interface.hpp
index 56b7689..5af3b5e 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/concept_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/concept_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/concept_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -45,7 +46,7 @@ public:
      * @brief Generate a c++ representation for the concept.
      */
     virtual dogen::formatters::file
-    format(const formattables::concept_info& c) const = 0;
+    format(const context& ctx, const formattables::concept_info& c) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/context.hpp b/projects/cpp/include/dogen/cpp/types/formatters/context.hpp
new file mode 100644
index 0000000..7ef9330
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/formatters/context.hpp
@@ -0,0 +1,100 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_FORMATTERS_CONTEXT_HPP
+#define DOGEN_CPP_TYPES_FORMATTERS_CONTEXT_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <algorithm>
+#include <unordered_map>
+#include "dogen/cpp/types/settings/bundle.hpp"
+#include "dogen/cpp/types/formattables/formatter_properties.hpp"
+#include "dogen/cpp/serialization/formatters/context_fwd_ser.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+/**
+ * @brief Supplies additional information required for formatting.
+ */
+class context final {
+public:
+    context() = default;
+    context(const context&) = default;
+    context(context&&) = default;
+    ~context() = default;
+
+public:
+    context(
+        const dogen::cpp::settings::bundle& bundle,
+        const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const context& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, context& v, unsigned int version);
+
+public:
+    const dogen::cpp::settings::bundle& bundle() const;
+    dogen::cpp::settings::bundle& bundle();
+    void bundle(const dogen::cpp::settings::bundle& v);
+    void bundle(const dogen::cpp::settings::bundle&& v);
+
+    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties() const;
+    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties();
+    void formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v);
+    void formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>&& v);
+
+public:
+    bool operator==(const context& rhs) const;
+    bool operator!=(const context& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(context& other) noexcept;
+    context& operator=(context other);
+
+private:
+    dogen::cpp::settings::bundle bundle_;
+    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> formatter_properties_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::cpp::formatters::context& lhs,
+    dogen::cpp::formatters::context& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/context_fwd.hpp b/projects/cpp/include/dogen/cpp/types/formatters/context_fwd.hpp
new file mode 100644
index 0000000..52d541a
--- /dev/null
+++ b/projects/cpp/include/dogen/cpp/types/formatters/context_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_CPP_TYPES_FORMATTERS_CONTEXT_FWD_HPP
+#define DOGEN_CPP_TYPES_FORMATTERS_CONTEXT_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+class context;
+
+} } }
+
+#endif
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/entity_formatting_assistant.hpp b/projects/cpp/include/dogen/cpp/types/formatters/entity_formatting_assistant.hpp
index 121d268..df16168 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/entity_formatting_assistant.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/entity_formatting_assistant.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include <list>
+#include <unordered_map>
 #include "dogen/dynamic/types/ownership_hierarchy.hpp"
 #include "dogen/formatters/types/file.hpp"
 #include "dogen/cpp/types/settings/odb_settings.hpp"
@@ -36,8 +37,8 @@
 #include "dogen/cpp/types/formattables/entity.hpp"
 #include "dogen/cpp/types/formattables/class_info.hpp"
 #include "dogen/cpp/types/formattables/property_info.hpp"
-#include "dogen/cpp/types/formattables/formatter_properties.hpp"
 #include "dogen/cpp/types/formatters/nested_type_formatting_assistant.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formatters/formatting_assistant.hpp"
 
 namespace dogen {
@@ -75,7 +76,7 @@ public:
 
 public:
     entity_formatting_assistant(const formattables::entity& e,
-        const dynamic::ownership_hierarchy& oh,
+        const context& ctx, const dynamic::ownership_hierarchy& oh,
         const formatters::file_types ft);
 
 private:
@@ -221,14 +222,21 @@ public:
     bool requires_hashing_helper_method(
         const formattables::nested_type_info& t) const;
 
-public:
+private:
     /**
      * @brief Retrieves the ODB settings from the opaque settings
      * container, if they do exist.
      */
     boost::shared_ptr<settings::odb_settings>
-    get_odb_settings(const std::unordered_map<std::string,
-        boost::shared_ptr<settings::opaque_settings> >& os) const;
+        get_odb_settings(const std::unordered_map<std::string,
+            boost::shared_ptr<settings::opaque_settings> >& os) const;
+
+public:
+    /**
+     * @brief Retrieves the ODB settings from the opaque settings
+     * container, if they do exist.
+     */
+    boost::shared_ptr<settings::odb_settings> get_odb_settings() const;
 
     /**
      * @brief Retrieves the ODB settings for a given property from the
@@ -239,8 +247,9 @@ public:
 
 private:
     const formattables::entity& entity_;
-    const dynamic::ownership_hierarchy ownership_hierarchy_;
+    const context& context_;
     const formattables::formatter_properties formatter_properties_;
+    const dynamic::ownership_hierarchy ownership_hierarchy_;
     const formatters::file_types file_type_;
 };
 
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/enum_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/enum_formatter_interface.hpp
index 2f29957..f650df5 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/enum_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/enum_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/enum_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -45,7 +46,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::enum_info& e) const = 0;
+    format(const context& ctx, const formattables::enum_info& e) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/exception_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/exception_formatter_interface.hpp
index fb5e5b7..1b91c7d 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/exception_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/exception_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/exception_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -46,7 +47,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::exception_info& e) const = 0;
+    format(const context& ctx, const formattables::exception_info& e) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/forward_declarations_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/forward_declarations_formatter_interface.hpp
index b15a41a..0ad486f 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/forward_declarations_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/forward_declarations_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/forward_declarations_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -36,8 +37,10 @@ namespace formatters {
 class forward_declarations_formatter_interface : public formatter_interface {
 public:
     forward_declarations_formatter_interface() = default;
-    forward_declarations_formatter_interface(const forward_declarations_formatter_interface&) = delete;
-    forward_declarations_formatter_interface(forward_declarations_formatter_interface&&) = default;
+    forward_declarations_formatter_interface(
+        const forward_declarations_formatter_interface&) = delete;
+    forward_declarations_formatter_interface(
+        forward_declarations_formatter_interface&&) = default;
     virtual ~forward_declarations_formatter_interface() noexcept = 0;
 
 public:
@@ -45,7 +48,8 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::forward_declarations_info& fd) const = 0;
+    format(const context& ctx,
+        const formattables::forward_declarations_info& fd) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/hash/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/hash/class_header_formatter.hpp
index 595da57..90fcbac 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/hash/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/hash/class_header_formatter.hpp
@@ -49,8 +49,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/hash/class_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/hash/class_implementation_formatter.hpp
index 5a2db0e..1dd3e23 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/hash/class_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/hash/class_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_header_formatter.hpp
index ff403ae..5cea462 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_header_formatter.hpp
@@ -59,7 +59,7 @@ public:
         formattables::registrar& rg) const override;
 
     dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    format(const context& ctx, const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_implementation_formatter_stitch.hpp b/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_implementation_formatter_stitch.hpp
deleted file mode 100644
index 96a5640..0000000
--- a/projects/cpp/include/dogen/cpp/types/formatters/hash/enum_implementation_formatter_stitch.hpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_CPP_TYPES_FORMATTERS_TYPES_ENUM_HEADER_FORMATTER_STITCH_HPP
-#define DOGEN_CPP_TYPES_FORMATTERS_TYPES_ENUM_HEADER_FORMATTER_STITCH_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/formatters/types/file.hpp"
-#include "dogen/cpp/types/formatters/entity_formatting_assistant.hpp"
-#include "dogen/cpp/types/formattables/enum_info.hpp"
-
-namespace dogen {
-namespace cpp {
-namespace formatters {
-namespace types {
-
-dogen::formatters::file enum_header_formatter_stitch(
-    formatters::entity_formatting_assistant& fa,
-    const formattables::enum_info& e);
-
-} } } }
-
-#endif
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter.hpp
index 8a44ae0..349eb85 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter.hpp
@@ -45,8 +45,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::includers_info& i) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::includers_info& i) const override;
 
 public:
     const dynamic::ownership_hierarchy ownership_hierarchy_;
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter_interface.hpp
index 374a526..f9c77d5 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/includers_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/includers_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -35,18 +36,18 @@ namespace formatters {
 
 class includers_formatter_interface : public formatter_interface {
 public:
-  includers_formatter_interface() = default;
-  includers_formatter_interface(
-    const includers_formatter_interface&) = delete;
-  includers_formatter_interface(includers_formatter_interface&&) = default;
-  virtual ~includers_formatter_interface() noexcept = 0;
+    includers_formatter_interface() = default;
+    includers_formatter_interface(
+        const includers_formatter_interface&) = delete;
+    includers_formatter_interface(includers_formatter_interface&&) = default;
+    virtual ~includers_formatter_interface() noexcept = 0;
 
 public:
-  /**
-   * @brief Generate the includers file.
-   */
-  virtual dogen::formatters::file
-  format(const formattables::includers_info& c) const = 0;
+    /**
+     * @brief Generate the includers file.
+     */
+    virtual dogen::formatters::file
+    format(const context& ctx, const formattables::includers_info& i) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/io/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/io/class_header_formatter.hpp
index 35a0452..abdae6d 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/io/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/io/class_header_formatter.hpp
@@ -50,8 +50,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/io/class_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/io/class_implementation_formatter.hpp
index 67cf8e0..91cc236 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/io/class_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/io/class_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/io/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/io/enum_header_formatter.hpp
index effb39b..849ab21 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/io/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/io/enum_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/io/enum_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/io/enum_implementation_formatter.hpp
index 2af7690..0f7354c 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/io/enum_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/io/enum_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/namespace_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/namespace_formatter_interface.hpp
index ca46503..94d368d 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/namespace_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/namespace_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/namespace_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -46,7 +47,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::namespace_info& c) const = 0;
+    format(const context& ctx, const formattables::namespace_info& c) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/odb/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/odb/class_header_formatter.hpp
index 68eb4a0..51197f9 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/odb/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/odb/class_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/odb/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/odb/enum_header_formatter.hpp
index e549cff..b9f5187 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/odb/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/odb/enum_header_formatter.hpp
@@ -55,8 +55,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/primitive_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/primitive_formatter_interface.hpp
index 67765dd..6470a55 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/primitive_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/primitive_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/primitive_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -46,7 +47,7 @@ public:
      * @brief Generate a c++ representation for the primitive.
      */
     virtual dogen::formatters::file
-    format(const formattables::primitive_info& p) const = 0;
+    format(const context& ctx, const formattables::primitive_info& p) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/registrar_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/registrar_formatter_interface.hpp
index d6b4235..576dbe8 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/registrar_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/registrar_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/registrar_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -46,7 +47,7 @@ public:
      * @brief Generate a c++ representation for the registrar.
      */
     virtual dogen::formatters::file
-    format(const formattables::registrar_info& c) const = 0;
+    format(const context& ctx, const formattables::registrar_info& c) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_header_formatter.hpp
index bea1694..3c00931 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_header_formatter.hpp
@@ -49,8 +49,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_implementation_formatter.hpp
index 534cf31..47812dc 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/class_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/enum_header_formatter.hpp
index 6b944d6..cdd8613 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/enum_header_formatter.hpp
@@ -55,8 +55,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/forward_declarations_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/forward_declarations_formatter.hpp
index 2ffabc6..eaa1d9e 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/forward_declarations_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/forward_declarations_formatter.hpp
@@ -51,7 +51,8 @@ public:
         formattables::registrar& rg) const override;
 
     dogen::formatters::file
-    format(const formattables::forward_declarations_info& fd) const override;
+    format(const context& ctx,
+        const formattables::forward_declarations_info& fd) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_header_formatter.hpp
index dcbb28a..87fa4b8 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_header_formatter.hpp
@@ -49,8 +49,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::registrar_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::registrar_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_implementation_formatter.hpp
index 2055981..9c9daca 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/registrar_implementation_formatter.hpp
@@ -50,8 +50,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-        format(const formattables::registrar_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::registrar_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_header_formatter.hpp
index db1a938..f98a070 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_header_formatter.hpp
@@ -50,8 +50,8 @@ class class_header_formatter final : public class_formatter_interface {
   void register_inclusion_dependencies_provider(
     formattables::registrar& rg) const override;
 
-  dogen::formatters::file
-    format(const formattables::class_info& c) const override;
+  dogen::formatters::file format(const context& ctx,
+      const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_implementation_formatter.hpp
index 4096f73..36bc053 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/test_data/class_implementation_formatter.hpp
@@ -61,8 +61,8 @@ class class_implementation_formatter final : public class_formatter_interface {
   void register_inclusion_dependencies_provider(
     formattables::registrar& rg) const override;
 
-  dogen::formatters::file
-    format(const formattables::class_info& c) const override;
+  dogen::formatters::file format(const context& ctx,
+      const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_header_formatter.hpp
index 325362d..f28137a 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_implementation_formatter.hpp
index b2c9622..4060d8c 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/test_data/enum_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
index 2fd89ac..9992ae8 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/class_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/class_implementation_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/class_implementation_formatter.hpp
index be632a9..d428f12 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/class_implementation_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/class_implementation_formatter.hpp
@@ -61,8 +61,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::class_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::class_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/enum_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/enum_header_formatter.hpp
index 3eb603c..2c01b09 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/enum_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/enum_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::enum_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::enum_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/exception_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/exception_header_formatter.hpp
index 35d3298..987ac1e 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/exception_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/exception_header_formatter.hpp
@@ -56,8 +56,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::exception_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::exception_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/forward_declarations_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/forward_declarations_formatter.hpp
index 01b1a5f..32c0348 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/forward_declarations_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/forward_declarations_formatter.hpp
@@ -51,7 +51,8 @@ public:
         formattables::registrar& rg) const override;
 
     dogen::formatters::file
-    format(const formattables::forward_declarations_info& fd) const override;
+    format(const context& ctx,
+        const formattables::forward_declarations_info& fd) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/namespace_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/namespace_header_formatter.hpp
index c25df82..55fc2af 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/namespace_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/namespace_header_formatter.hpp
@@ -56,8 +56,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::namespace_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::namespace_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/visitor_header_formatter.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/visitor_header_formatter.hpp
index b721dfb..7190fbf 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/visitor_header_formatter.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/visitor_header_formatter.hpp
@@ -59,8 +59,8 @@ public:
     void register_inclusion_dependencies_provider(
         formattables::registrar& rg) const override;
 
-    dogen::formatters::file
-    format(const formattables::visitor_info& c) const override;
+    dogen::formatters::file format(const context& ctx,
+        const formattables::visitor_info& c) const override;
 };
 
 } } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/visitor_formatter_interface.hpp b/projects/cpp/include/dogen/cpp/types/formatters/visitor_formatter_interface.hpp
index e8bbc2c..38f6882 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/visitor_formatter_interface.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/visitor_formatter_interface.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include "dogen/formatters/types/file.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formattables/visitor_info.hpp"
 #include "dogen/cpp/types/formatters/formatter_interface.hpp"
 
@@ -45,7 +46,7 @@ public:
      * @brief Generate a c++ representation for the type.
      */
     virtual dogen::formatters::file
-    format(const formattables::visitor_info& v) const = 0;
+    format(const context& ctx, const formattables::visitor_info& v) const = 0;
 };
 
 } } }
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp b/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
index cd7ec2b..6430a7b 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/workflow.hpp
@@ -31,6 +31,8 @@
 #include <unordered_map>
 #include "dogen/formatters/types/file.hpp"
 #include "dogen/cpp/types/formattables/formattable.hpp"
+#include "dogen/cpp/types/settings/bundle_repository.hpp"
+#include "dogen/cpp/types/formattables/formatter_properties_repository.hpp"
 #include "dogen/cpp/types/formatters/registrar.hpp"
 
 namespace dogen {
@@ -54,8 +56,10 @@ public:
      * representations.
      */
     std::forward_list<dogen::formatters::file>
-    execute(const std::forward_list<
-            std::shared_ptr<formattables::formattable> >& f) const;
+    execute(const settings::bundle_repository& brp,
+        const formattables::formatter_properties_repository& fprp,
+        const std::forward_list<
+        std::shared_ptr<formattables::formattable> >& f) const;
 
 private:
     static std::shared_ptr<cpp::formatters::registrar> registrar_;
diff --git a/projects/cpp/include/dogen/cpp/types/workflow.hpp b/projects/cpp/include/dogen/cpp/types/workflow.hpp
index a3401b9..7f648eb 100644
--- a/projects/cpp/include/dogen/cpp/types/workflow.hpp
+++ b/projects/cpp/include/dogen/cpp/types/workflow.hpp
@@ -37,6 +37,7 @@
 #include "dogen/cpp/types/settings/bundle_repository.hpp"
 #include "dogen/cpp/types/formatters/container.hpp"
 #include "dogen/cpp/types/formattables/formattable.hpp"
+#include "dogen/cpp/types/formattables/formatter_properties_repository.hpp"
 #include "dogen/formatters/types/general_settings_factory.hpp"
 #include "dogen/cpp/types/settings/opaque_settings_builder.hpp"
 #include "dogen/yarn/types/model.hpp"
@@ -94,8 +95,11 @@ private:
     /**
      * @brief Create the formattables.
      */
-    std::forward_list<std::shared_ptr<formattables::formattable> >
-        create_formattables_activty(const config::cpp_options& opts,
+    std::pair<
+        formattables::formatter_properties_repository,
+        std::forward_list<std::shared_ptr<formattables::formattable> >
+    >
+    create_formattables_activty(const config::cpp_options& opts,
             const dynamic::repository& srp,
             const dynamic::object& root_object,
             const dogen::formatters::general_settings_factory& gsf,
@@ -108,9 +112,11 @@ private:
      * @brief Create the files.
      */
     std::forward_list<dogen::formatters::file>
-    format_activty(const std::forward_list<
-            std::shared_ptr<formattables::formattable>
-            >& f) const;
+    format_activty(const settings::bundle_repository& brp,
+        const formattables::formatter_properties_repository& fprp,
+        const std::forward_list<
+        std::shared_ptr<formattables::formattable>
+        >& f) const;
 
 public:
     std::string name() const override;
diff --git a/projects/cpp/src/hash/formattables/entity_hash.cpp b/projects/cpp/src/hash/formattables/entity_hash.cpp
index 3c22b65..b955757 100644
--- a/projects/cpp/src/hash/formattables/entity_hash.cpp
+++ b/projects/cpp/src/hash/formattables/entity_hash.cpp
@@ -18,10 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/cpp/hash/settings/bundle_hash.hpp"
 #include "dogen/cpp/hash/formattables/entity_hash.hpp"
 #include "dogen/cpp/hash/formattables/formattable_hash.hpp"
-#include "dogen/cpp/hash/formattables/formatter_properties_hash.hpp"
 
 namespace {
 
@@ -39,15 +37,6 @@ inline std::size_t hash_std_list_std_string(const std::list<std::string>& v) {
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
-    std::size_t seed(0);
-    for (const auto i : v) {
-        combine(seed, i.first);
-        combine(seed, i.second);
-    }
-    return seed;
-}
-
 }
 
 namespace dogen {
@@ -63,8 +52,6 @@ std::size_t entity_hasher::hash(const entity& v) {
     combine(seed, v.qualified_name());
     combine(seed, v.documentation());
     combine(seed, hash_std_list_std_string(v.namespaces()));
-    combine(seed, v.settings());
-    combine(seed, hash_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(v.formatter_properties()));
 
     return seed;
 }
diff --git a/projects/cpp/src/hash/formattables/formattable_hash.cpp b/projects/cpp/src/hash/formattables/formattable_hash.cpp
index 74388c8..ceabba1 100644
--- a/projects/cpp/src/hash/formattables/formattable_hash.cpp
+++ b/projects/cpp/src/hash/formattables/formattable_hash.cpp
@@ -40,6 +40,7 @@ std::size_t formattable_hasher::hash(const formattable& v) {
 
     combine(seed, v.identity());
     combine(seed, v.origin_type());
+    combine(seed, v.id());
 
     return seed;
 }
diff --git a/projects/cpp/src/hash/formatters/context_hash.cpp b/projects/cpp/src/hash/formatters/context_hash.cpp
new file mode 100644
index 0000000..bd2a909
--- /dev/null
+++ b/projects/cpp/src/hash/formatters/context_hash.cpp
@@ -0,0 +1,57 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/hash/settings/bundle_hash.hpp"
+#include "dogen/cpp/hash/formatters/context_hash.hpp"
+#include "dogen/cpp/hash/formattables/formatter_properties_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value) {
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i.first);
+        combine(seed, i.second);
+    }
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+std::size_t context_hasher::hash(const context& v) {
+    std::size_t seed(0);
+
+    combine(seed, v.bundle());
+    combine(seed, hash_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(v.formatter_properties()));
+
+    return seed;
+}
+
+} } }
diff --git a/projects/cpp/src/io/formattables/entity_io.cpp b/projects/cpp/src/io/formattables/entity_io.cpp
index 306ba78..49cade5 100644
--- a/projects/cpp/src/io/formattables/entity_io.cpp
+++ b/projects/cpp/src/io/formattables/entity_io.cpp
@@ -20,10 +20,8 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/cpp/io/settings/bundle_io.hpp"
 #include "dogen/cpp/io/formattables/entity_io.hpp"
 #include "dogen/cpp/io/formattables/formattable_io.hpp"
-#include "dogen/cpp/io/formattables/formatter_properties_io.hpp"
 
 namespace dogen {
 namespace cpp {
diff --git a/projects/cpp/src/io/formatters/context_io.cpp b/projects/cpp/src/io/formatters/context_io.cpp
new file mode 100644
index 0000000..8fbefd2
--- /dev/null
+++ b/projects/cpp/src/io/formatters/context_io.cpp
@@ -0,0 +1,65 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include <boost/algorithm/string.hpp>
+#include "dogen/cpp/io/settings/bundle_io.hpp"
+#include "dogen/cpp/io/formatters/context_io.hpp"
+#include "dogen/cpp/io/formattables/formatter_properties_io.hpp"
+
+inline std::string tidy_up_string(std::string s) {
+    boost::replace_all(s, "\r\n", "<new_line>");
+    boost::replace_all(s, "\n", "<new_line>");
+    boost::replace_all(s, "\"", "<quote>");
+    return s;
+}
+
+namespace std {
+
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
+    s << "[";
+    for (auto i(v.begin()); i != v.end(); ++i) {
+        if (i != v.begin()) s << ", ";
+        s << "[ { " << "\"__type__\": " << "\"key\"" << ", " << "\"data\": ";
+        s << "\"" << tidy_up_string(i->first) << "\"";
+        s << " }, { " << "\"__type__\": " << "\"value\"" << ", " << "\"data\": ";
+        s << i->second;
+        s << " } ]";
+    }
+    s << " ] ";
+    return s;
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+std::ostream& operator<<(std::ostream& s, const context& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::cpp::formatters::context\"" << ", "
+      << "\"bundle\": " << v.bundle() << ", "
+      << "\"formatter_properties\": " << v.formatter_properties()
+      << " }";
+    return(s);
+}
+
+} } }
diff --git a/projects/cpp/src/serialization/formattables/entity_ser.cpp b/projects/cpp/src/serialization/formattables/entity_ser.cpp
index 4e48e9e..da27acc 100644
--- a/projects/cpp/src/serialization/formattables/entity_ser.cpp
+++ b/projects/cpp/src/serialization/formattables/entity_ser.cpp
@@ -27,10 +27,8 @@
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>
-#include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/cpp/serialization/settings/bundle_ser.hpp"
 #include "dogen/cpp/serialization/formattables/entity_ser.hpp"
 #include "dogen/cpp/serialization/formattables/enum_info_ser.hpp"
 #include "dogen/cpp/serialization/formattables/class_info_ser.hpp"
@@ -42,7 +40,6 @@
 #include "dogen/cpp/serialization/formattables/namespace_info_ser.hpp"
 #include "dogen/cpp/serialization/formattables/primitive_info_ser.hpp"
 #include "dogen/cpp/serialization/formattables/registrar_info_ser.hpp"
-#include "dogen/cpp/serialization/formattables/formatter_properties_ser.hpp"
 #include "dogen/cpp/serialization/formattables/forward_declarations_info_ser.hpp"
 
 BOOST_CLASS_TRACKING(
@@ -62,8 +59,6 @@ void save(Archive& ar,
     ar << make_nvp("qualified_name", v.qualified_name_);
     ar << make_nvp("documentation", v.documentation_);
     ar << make_nvp("namespaces", v.namespaces_);
-    ar << make_nvp("settings", v.settings_);
-    ar << make_nvp("formatter_properties", v.formatter_properties_);
 }
 
 template<typename Archive>
@@ -76,8 +71,6 @@ void load(Archive& ar,
     ar >> make_nvp("qualified_name", v.qualified_name_);
     ar >> make_nvp("documentation", v.documentation_);
     ar >> make_nvp("namespaces", v.namespaces_);
-    ar >> make_nvp("settings", v.settings_);
-    ar >> make_nvp("formatter_properties", v.formatter_properties_);
 }
 
 } }
diff --git a/projects/cpp/src/serialization/formattables/formattable_ser.cpp b/projects/cpp/src/serialization/formattables/formattable_ser.cpp
index c3c554d..c32019d 100644
--- a/projects/cpp/src/serialization/formattables/formattable_ser.cpp
+++ b/projects/cpp/src/serialization/formattables/formattable_ser.cpp
@@ -56,6 +56,7 @@ void save(Archive& ar,
     const unsigned int /*version*/) {
     ar << make_nvp("identity", v.identity_);
     ar << make_nvp("origin_type", v.origin_type_);
+    ar << make_nvp("id", v.id_);
 }
 
 template<typename Archive>
@@ -64,6 +65,7 @@ void load(Archive& ar,
     const unsigned int /*version*/) {
     ar >> make_nvp("identity", v.identity_);
     ar >> make_nvp("origin_type", v.origin_type_);
+    ar >> make_nvp("id", v.id_);
 }
 
 } }
diff --git a/projects/cpp/src/serialization/formatters/context_ser.cpp b/projects/cpp/src/serialization/formatters/context_ser.cpp
new file mode 100644
index 0000000..e6e8a4a
--- /dev/null
+++ b/projects/cpp/src/serialization/formatters/context_ser.cpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/serialization/nvp.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/string.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/serialization/unordered_map.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include "dogen/cpp/serialization/settings/bundle_ser.hpp"
+#include "dogen/cpp/serialization/formatters/context_ser.hpp"
+#include "dogen/cpp/serialization/formattables/formatter_properties_ser.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::cpp::formatters::context& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("bundle", v.bundle_);
+    ar << make_nvp("formatter_properties", v.formatter_properties_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::cpp::formatters::context& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("bundle", v.bundle_);
+    ar >> make_nvp("formatter_properties", v.formatter_properties_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::cpp::formatters::context& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::cpp::formatters::context& v, unsigned int version);
+
+} }
diff --git a/projects/cpp/src/test_data/formattables/entity_td.cpp b/projects/cpp/src/test_data/formattables/entity_td.cpp
index 82c00e7..858c9f8 100644
--- a/projects/cpp/src/test_data/formattables/entity_td.cpp
+++ b/projects/cpp/src/test_data/formattables/entity_td.cpp
@@ -19,7 +19,6 @@
  *
  */
 #include <sstream>
-#include "dogen/cpp/test_data/settings/bundle_td.hpp"
 #include "dogen/cpp/test_data/formattables/entity_td.hpp"
 #include "dogen/cpp/test_data/formattables/enum_info_td.hpp"
 #include "dogen/cpp/test_data/formattables/class_info_td.hpp"
@@ -31,7 +30,6 @@
 #include "dogen/cpp/test_data/formattables/namespace_info_td.hpp"
 #include "dogen/cpp/test_data/formattables/primitive_info_td.hpp"
 #include "dogen/cpp/test_data/formattables/registrar_info_td.hpp"
-#include "dogen/cpp/test_data/formattables/formatter_properties_td.hpp"
 #include "dogen/cpp/test_data/formattables/forward_declarations_info_td.hpp"
 
 namespace {
@@ -50,24 +48,6 @@ std::list<std::string> create_std_list_std_string(unsigned int position) {
     return r;
 }
 
-dogen::cpp::settings::bundle
-create_dogen_cpp_settings_bundle(const unsigned int position) {
-    return dogen::cpp::settings::bundle_generator::create(position);
-}
-
-dogen::cpp::formattables::formatter_properties
-create_dogen_cpp_formattables_formatter_properties(const unsigned int position) {
-    return dogen::cpp::formattables::formatter_properties_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> create_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(unsigned int position) {
-    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_cpp_formattables_formatter_properties(position + i)));
-    }
-    return r;
-}
-
 }
 
 namespace dogen {
@@ -81,8 +61,6 @@ populate(const unsigned int position, result_type& v) {
     v.qualified_name(create_std_string(position + 1));
     v.documentation(create_std_string(position + 2));
     v.namespaces(create_std_list_std_string(position + 3));
-    v.settings(create_dogen_cpp_settings_bundle(position + 4));
-    v.formatter_properties(create_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(position + 5));
 }
 
 entity_generator::result_type*
diff --git a/projects/cpp/src/test_data/formattables/formattable_td.cpp b/projects/cpp/src/test_data/formattables/formattable_td.cpp
index a5f4c37..c622588 100644
--- a/projects/cpp/src/test_data/formattables/formattable_td.cpp
+++ b/projects/cpp/src/test_data/formattables/formattable_td.cpp
@@ -57,6 +57,7 @@ void formattable_generator::
 populate(const unsigned int position, result_type& v) {
     v.identity(create_std_string(position + 0));
     v.origin_type(create_dogen_cpp_formattables_origin_types(position + 1));
+    v.id(create_std_string(position + 2));
 }
 
 formattable_generator::result_type*
diff --git a/projects/cpp/src/test_data/formatters/context_td.cpp b/projects/cpp/src/test_data/formatters/context_td.cpp
new file mode 100644
index 0000000..3235080
--- /dev/null
+++ b/projects/cpp/src/test_data/formatters/context_td.cpp
@@ -0,0 +1,85 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/cpp/test_data/settings/bundle_td.hpp"
+#include "dogen/cpp/test_data/formatters/context_td.hpp"
+#include "dogen/cpp/test_data/formattables/formatter_properties_td.hpp"
+
+namespace {
+
+dogen::cpp::settings::bundle
+create_dogen_cpp_settings_bundle(const unsigned int position) {
+    return dogen::cpp::settings::bundle_generator::create(position);
+}
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+dogen::cpp::formattables::formatter_properties
+create_dogen_cpp_formattables_formatter_properties(const unsigned int position) {
+    return dogen::cpp::formattables::formatter_properties_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> create_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(unsigned int position) {
+    std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_cpp_formattables_formatter_properties(position + i)));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+context_generator::context_generator() : position_(0) { }
+
+void context_generator::
+populate(const unsigned int position, result_type& v) {
+    v.bundle(create_dogen_cpp_settings_bundle(position + 0));
+    v.formatter_properties(create_std_unordered_map_std_string_dogen_cpp_formattables_formatter_properties(position + 1));
+}
+
+context_generator::result_type
+context_generator::create(const unsigned int position) {
+    context r;
+    context_generator::populate(position, r);
+    return r;
+}
+
+context_generator::result_type*
+context_generator::create_ptr(const unsigned int position) {
+    context* p = new context();
+    context_generator::populate(position, *p);
+    return p;
+}
+
+context_generator::result_type
+context_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/cpp/src/types/formattables/class_info.cpp b/projects/cpp/src/types/formattables/class_info.cpp
index 198da49..bba86cd 100644
--- a/projects/cpp/src/types/formattables/class_info.cpp
+++ b/projects/cpp/src/types/formattables/class_info.cpp
@@ -94,12 +94,11 @@ class_info::class_info()
 class_info::class_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const std::list<dogen::cpp::formattables::property_info>& properties,
     const std::list<dogen::cpp::formattables::property_info>& all_properties,
     const bool requires_stream_manipulators,
@@ -118,12 +117,11 @@ class_info::class_info(
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       properties_(properties),
       all_properties_(all_properties),
       requires_stream_manipulators_(requires_stream_manipulators),
diff --git a/projects/cpp/src/types/formattables/cmakelists_info.cpp b/projects/cpp/src/types/formattables/cmakelists_info.cpp
index 7105b0f..e542a7f 100644
--- a/projects/cpp/src/types/formattables/cmakelists_info.cpp
+++ b/projects/cpp/src/types/formattables/cmakelists_info.cpp
@@ -70,6 +70,7 @@ cmakelists_info::cmakelists_info(cmakelists_info&& rhs)
 cmakelists_info::cmakelists_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const boost::filesystem::path& file_path,
     const std::string& model_name,
     const std::string& product_name,
@@ -81,7 +82,8 @@ cmakelists_info::cmakelists_info(
     const bool odb_enabled)
     : dogen::cpp::formattables::formattable(
       identity,
-      origin_type),
+      origin_type,
+      id),
       file_path_(file_path),
       model_name_(model_name),
       product_name_(product_name),
diff --git a/projects/cpp/src/types/formattables/concept_info.cpp b/projects/cpp/src/types/formattables/concept_info.cpp
index 4617b80..c612714 100644
--- a/projects/cpp/src/types/formattables/concept_info.cpp
+++ b/projects/cpp/src/types/formattables/concept_info.cpp
@@ -44,23 +44,21 @@ namespace formattables {
 concept_info::concept_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const std::list<dogen::cpp::formattables::property_info>& properties,
     const std::list<dogen::cpp::formattables::property_info>& all_properties)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       properties_(properties),
       all_properties_(all_properties) { }
 
diff --git a/projects/cpp/src/types/formattables/entity.cpp b/projects/cpp/src/types/formattables/entity.cpp
index d2820f4..55e52c3 100644
--- a/projects/cpp/src/types/formattables/entity.cpp
+++ b/projects/cpp/src/types/formattables/entity.cpp
@@ -20,10 +20,8 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/cpp/io/settings/bundle_io.hpp"
 #include "dogen/cpp/types/formattables/entity.hpp"
 #include "dogen/cpp/io/formattables/formattable_io.hpp"
-#include "dogen/cpp/io/formattables/formatter_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -46,24 +44,6 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v
 
 }
 
-namespace std {
-
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
-    s << "[";
-    for (auto i(v.begin()); i != v.end(); ++i) {
-        if (i != v.begin()) s << ", ";
-        s << "[ { " << "\"__type__\": " << "\"key\"" << ", " << "\"data\": ";
-        s << "\"" << tidy_up_string(i->first) << "\"";
-        s << " }, { " << "\"__type__\": " << "\"value\"" << ", " << "\"data\": ";
-        s << i->second;
-        s << " } ]";
-    }
-    s << " ] ";
-    return s;
-}
-
-}
-
 namespace dogen {
 namespace cpp {
 namespace formattables {
@@ -71,21 +51,19 @@ namespace formattables {
 entity::entity(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
-    const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    const std::list<std::string>& namespaces)
     : dogen::cpp::formattables::formattable(
       identity,
-      origin_type),
+      origin_type,
+      id),
       name_(name),
       qualified_name_(qualified_name),
       documentation_(documentation),
-      namespaces_(namespaces),
-      settings_(settings),
-      formatter_properties_(formatter_properties) { }
+      namespaces_(namespaces) { }
 
 void entity::to_stream(std::ostream& s) const {
     s << " { "
@@ -96,9 +74,7 @@ void entity::to_stream(std::ostream& s) const {
       << "\"name\": " << "\"" << tidy_up_string(name_) << "\"" << ", "
       << "\"qualified_name\": " << "\"" << tidy_up_string(qualified_name_) << "\"" << ", "
       << "\"documentation\": " << "\"" << tidy_up_string(documentation_) << "\"" << ", "
-      << "\"namespaces\": " << namespaces_ << ", "
-      << "\"settings\": " << settings_ << ", "
-      << "\"formatter_properties\": " << formatter_properties_
+      << "\"namespaces\": " << namespaces_
       << " }";
 }
 
@@ -110,8 +86,6 @@ void entity::swap(entity& other) noexcept {
     swap(qualified_name_, other.qualified_name_);
     swap(documentation_, other.documentation_);
     swap(namespaces_, other.namespaces_);
-    swap(settings_, other.settings_);
-    swap(formatter_properties_, other.formatter_properties_);
 }
 
 bool entity::compare(const entity& rhs) const {
@@ -119,9 +93,7 @@ bool entity::compare(const entity& rhs) const {
         name_ == rhs.name_ &&
         qualified_name_ == rhs.qualified_name_ &&
         documentation_ == rhs.documentation_ &&
-        namespaces_ == rhs.namespaces_ &&
-        settings_ == rhs.settings_ &&
-        formatter_properties_ == rhs.formatter_properties_;
+        namespaces_ == rhs.namespaces_;
 }
 
 const std::string& entity::name() const {
@@ -188,36 +160,4 @@ void entity::namespaces(const std::list<std::string>&& v) {
     namespaces_ = std::move(v);
 }
 
-const dogen::cpp::settings::bundle& entity::settings() const {
-    return settings_;
-}
-
-dogen::cpp::settings::bundle& entity::settings() {
-    return settings_;
-}
-
-void entity::settings(const dogen::cpp::settings::bundle& v) {
-    settings_ = v;
-}
-
-void entity::settings(const dogen::cpp::settings::bundle&& v) {
-    settings_ = std::move(v);
-}
-
-const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& entity::formatter_properties() const {
-    return formatter_properties_;
-}
-
-std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& entity::formatter_properties() {
-    return formatter_properties_;
-}
-
-void entity::formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
-    formatter_properties_ = v;
-}
-
-void entity::formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>&& v) {
-    formatter_properties_ = std::move(v);
-}
-
 } } }
diff --git a/projects/cpp/src/types/formattables/enum_info.cpp b/projects/cpp/src/types/formattables/enum_info.cpp
index c0beb37..8f04d65 100644
--- a/projects/cpp/src/types/formattables/enum_info.cpp
+++ b/projects/cpp/src/types/formattables/enum_info.cpp
@@ -52,23 +52,21 @@ namespace formattables {
 enum_info::enum_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const std::list<dogen::cpp::formattables::enumerator_info>& enumerators,
     const std::string& type)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       enumerators_(enumerators),
       type_(type) { }
 
diff --git a/projects/cpp/src/types/formattables/exception_info.cpp b/projects/cpp/src/types/formattables/exception_info.cpp
index 8d95443..dca2f1e 100644
--- a/projects/cpp/src/types/formattables/exception_info.cpp
+++ b/projects/cpp/src/types/formattables/exception_info.cpp
@@ -29,21 +29,19 @@ namespace formattables {
 exception_info::exception_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
-    const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    const std::list<std::string>& namespaces)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties) { }
+      namespaces) { }
 
 void exception_info::to_stream(std::ostream& s) const {
     s << " { "
diff --git a/projects/cpp/src/types/formattables/formattable.cpp b/projects/cpp/src/types/formattables/formattable.cpp
index 517bd64..6ef5e76 100644
--- a/projects/cpp/src/types/formattables/formattable.cpp
+++ b/projects/cpp/src/types/formattables/formattable.cpp
@@ -39,15 +39,18 @@ formattable::formattable()
 
 formattable::formattable(
     const std::string& identity,
-    const dogen::cpp::formattables::origin_types origin_type)
+    const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id)
     : identity_(identity),
-      origin_type_(origin_type) { }
+      origin_type_(origin_type),
+      id_(id) { }
 
 void formattable::to_stream(std::ostream& s) const {
     s << " { "
       << "\"__type__\": " << "\"dogen::cpp::formattables::formattable\"" << ", "
       << "\"identity\": " << "\"" << tidy_up_string(identity_) << "\"" << ", "
-      << "\"origin_type\": " << origin_type_
+      << "\"origin_type\": " << origin_type_ << ", "
+      << "\"id\": " << "\"" << tidy_up_string(id_) << "\""
       << " }";
 }
 
@@ -55,11 +58,13 @@ void formattable::swap(formattable& other) noexcept {
     using std::swap;
     swap(identity_, other.identity_);
     swap(origin_type_, other.origin_type_);
+    swap(id_, other.id_);
 }
 
 bool formattable::compare(const formattable& rhs) const {
     return identity_ == rhs.identity_ &&
-        origin_type_ == rhs.origin_type_;
+        origin_type_ == rhs.origin_type_ &&
+        id_ == rhs.id_;
 }
 
 const std::string& formattable::identity() const {
@@ -86,4 +91,20 @@ void formattable::origin_type(const dogen::cpp::formattables::origin_types v) {
     origin_type_ = v;
 }
 
+const std::string& formattable::id() const {
+    return id_;
+}
+
+std::string& formattable::id() {
+    return id_;
+}
+
+void formattable::id(const std::string& v) {
+    id_ = v;
+}
+
+void formattable::id(const std::string&& v) {
+    id_ = std::move(v);
+}
+
 } } }
diff --git a/projects/cpp/src/types/formattables/forward_declarations_info.cpp b/projects/cpp/src/types/formattables/forward_declarations_info.cpp
index 43eeeb2..246aa5e 100644
--- a/projects/cpp/src/types/formattables/forward_declarations_info.cpp
+++ b/projects/cpp/src/types/formattables/forward_declarations_info.cpp
@@ -42,24 +42,22 @@ forward_declarations_info::forward_declarations_info()
 forward_declarations_info::forward_declarations_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const bool is_enum,
     const std::string& enum_type,
     const bool is_exception)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       is_enum_(is_enum),
       enum_type_(enum_type),
       is_exception_(is_exception) { }
diff --git a/projects/cpp/src/types/formattables/includers_info.cpp b/projects/cpp/src/types/formattables/includers_info.cpp
index 04cb1a7..37a92a8 100644
--- a/projects/cpp/src/types/formattables/includers_info.cpp
+++ b/projects/cpp/src/types/formattables/includers_info.cpp
@@ -29,21 +29,19 @@ namespace formattables {
 includers_info::includers_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
-    const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    const std::list<std::string>& namespaces)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties) { }
+      namespaces) { }
 
 void includers_info::to_stream(std::ostream& s) const {
     s << " { "
diff --git a/projects/cpp/src/types/formattables/namespace_info.cpp b/projects/cpp/src/types/formattables/namespace_info.cpp
index d08d13d..14c4de0 100644
--- a/projects/cpp/src/types/formattables/namespace_info.cpp
+++ b/projects/cpp/src/types/formattables/namespace_info.cpp
@@ -29,21 +29,19 @@ namespace formattables {
 namespace_info::namespace_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
-    const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    const std::list<std::string>& namespaces)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties) { }
+      namespaces) { }
 
 void namespace_info::to_stream(std::ostream& s) const {
     s << " { "
diff --git a/projects/cpp/src/types/formattables/odb_options_info.cpp b/projects/cpp/src/types/formattables/odb_options_info.cpp
index b01e4cd..ffab88f 100644
--- a/projects/cpp/src/types/formattables/odb_options_info.cpp
+++ b/projects/cpp/src/types/formattables/odb_options_info.cpp
@@ -63,6 +63,7 @@ odb_options_info::odb_options_info(odb_options_info&& rhs)
 odb_options_info::odb_options_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& model_name,
     const std::string& product_name,
     const boost::filesystem::path& file_path,
@@ -71,7 +72,8 @@ odb_options_info::odb_options_info(
     const boost::optional<dogen::formatters::general_settings>& general_settings)
     : dogen::cpp::formattables::formattable(
       identity,
-      origin_type),
+      origin_type,
+      id),
       model_name_(model_name),
       product_name_(product_name),
       file_path_(file_path),
diff --git a/projects/cpp/src/types/formattables/primitive_info.cpp b/projects/cpp/src/types/formattables/primitive_info.cpp
index 36291ed..a7b66a1 100644
--- a/projects/cpp/src/types/formattables/primitive_info.cpp
+++ b/projects/cpp/src/types/formattables/primitive_info.cpp
@@ -29,21 +29,19 @@ namespace formattables {
 primitive_info::primitive_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
-    const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    const std::list<std::string>& namespaces)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties) { }
+      namespaces) { }
 
 void primitive_info::to_stream(std::ostream& s) const {
     s << " { "
diff --git a/projects/cpp/src/types/formattables/registrar_info.cpp b/projects/cpp/src/types/formattables/registrar_info.cpp
index c61f4e4..817f91c 100644
--- a/projects/cpp/src/types/formattables/registrar_info.cpp
+++ b/projects/cpp/src/types/formattables/registrar_info.cpp
@@ -51,23 +51,21 @@ namespace formattables {
 registrar_info::registrar_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const std::list<std::string>& leaves,
     const std::list<std::string>& model_dependencies)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       leaves_(leaves),
       model_dependencies_(model_dependencies) { }
 
diff --git a/projects/cpp/src/types/formattables/transformer.cpp b/projects/cpp/src/types/formattables/transformer.cpp
index 7e3b108..5c3a1c3 100644
--- a/projects/cpp/src/types/formattables/transformer.cpp
+++ b/projects/cpp/src/types/formattables/transformer.cpp
@@ -92,10 +92,6 @@ const std::string type_has_no_inclusion_dependencies(
     "Could not find inclusion dependencies for type: ");
 const std::string type_has_no_inclusion("Could not find inclusion for type: ");
 const std::string no_visitees("Visitor is not visiting any types: ");
-const std::string formatter_properties_missing(
-    "Could not find formatter properties for type: ");
-const std::string settings_bundle_missing(
-    "Could not find settings bundle for type: ");
 const std::string cast_failure("Failed to cast type: ");
 
 bool is_char_like(const std::string& type_name) {
@@ -208,11 +204,8 @@ inline bool is(const yarn::model& m, const yarn::name& n) {
 }
 
 transformer::transformer(const settings::opaque_settings_builder& osb,
-    const settings::bundle_repository& brp,
-    const formatter_properties_repository& frp,
     const yarn::model& m)
-    : opaque_settings_builder_(osb), bundle_repository_(brp),
-      formatter_properties_repository_(frp), model_(m) {}
+    : opaque_settings_builder_(osb), model_(m) {}
 
 void transformer::
 populate_formattable_properties(const yarn::name& n, formattable& f) const {
@@ -226,31 +219,11 @@ void transformer::populate_entity_properties(const yarn::name& n,
 
     e.name(n.simple());
     e.documentation(documentation);
-
-    const auto& fpn(formatter_properties_repository_.
-        formatter_properties_by_name());
-    const auto i(fpn.find(n.qualified()));
-    if (i == fpn.end()) {
-        const auto qn(n.qualified());
-        BOOST_LOG_SEV(lg, error) << formatter_properties_missing << qn;
-        BOOST_THROW_EXCEPTION(
-            transformation_error(formatter_properties_missing + qn));
-    }
-    e.formatter_properties(i->second);
+    e.id(n.qualified());
 
     name_builder b;
     e.namespaces(b.namespace_list(model_, n));
 
-    const auto& bn(bundle_repository_.bundles_by_name());
-    const auto j(bn.find(n.qualified()));
-    if (j == bn.end()) {
-        const auto qn(n.qualified());
-        BOOST_LOG_SEV(lg, error) << settings_bundle_missing << qn;
-        BOOST_THROW_EXCEPTION(
-            transformation_error(settings_bundle_missing + qn));
-    }
-    e.settings(j->second);
-
     std::list<std::string> ns(e.namespaces());
     ns.push_back(e.name());
 
diff --git a/projects/cpp/src/types/formattables/visitor_info.cpp b/projects/cpp/src/types/formattables/visitor_info.cpp
index 90c3ac5..9caddd1 100644
--- a/projects/cpp/src/types/formattables/visitor_info.cpp
+++ b/projects/cpp/src/types/formattables/visitor_info.cpp
@@ -44,22 +44,20 @@ namespace formattables {
 visitor_info::visitor_info(
     const std::string& identity,
     const dogen::cpp::formattables::origin_types origin_type,
+    const std::string& id,
     const std::string& name,
     const std::string& qualified_name,
     const std::string& documentation,
     const std::list<std::string>& namespaces,
-    const dogen::cpp::settings::bundle& settings,
-    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties,
     const std::list<dogen::cpp::formattables::visited_type_info>& types)
     : dogen::cpp::formattables::entity(
       identity,
       origin_type,
+      id,
       name,
       qualified_name,
       documentation,
-      namespaces,
-      settings,
-      formatter_properties),
+      namespaces),
       types_(types) { }
 
 void visitor_info::to_stream(std::ostream& s) const {
diff --git a/projects/cpp/src/types/formattables/workflow.cpp b/projects/cpp/src/types/formattables/workflow.cpp
index 25fea7b..2b42338 100644
--- a/projects/cpp/src/types/formattables/workflow.cpp
+++ b/projects/cpp/src/types/formattables/workflow.cpp
@@ -119,12 +119,10 @@ create_formatter_properties(const dynamic::repository& srp,
 std::forward_list<std::shared_ptr<formattables::formattable> >
 workflow::from_transformer_activity(
     const settings::opaque_settings_builder& osb,
-    const settings::bundle_repository& brp,
-    const formatter_properties_repository& fprp,
     const yarn::model& m) const {
     BOOST_LOG_SEV(lg, debug) << "Transforming formattables.";
 
-    const transformer t(osb, brp, fprp, m);
+    const transformer t(osb, m);
     generator g(t);
     for (const auto& pair : m.elements()) {
         const auto& e(*pair.second);
@@ -168,7 +166,10 @@ workflow::from_factory_activity(const config::cpp_options& opts,
     return r;
 }
 
-std::forward_list<std::shared_ptr<formattables::formattable> >
+std::pair<
+    formattables::formatter_properties_repository,
+    std::forward_list<std::shared_ptr<formattables::formattable> >
+>
 workflow::execute(const config::cpp_options& opts,
     const dynamic::repository& drp,
     const dynamic::object& root_object,
@@ -184,14 +185,14 @@ workflow::execute(const config::cpp_options& opts,
     const auto pdrp(create_path_derivatives_repository(opts, ps, m));
     const auto fprp(create_formatter_properties(drp, ro, brp, pdrp, fc, m));
 
-    auto r(from_transformer_activity(osb, brp, fprp, m));
-    r.splice_after(r.before_begin(),
+    auto formattables(from_transformer_activity(osb, m));
+    formattables.splice_after(formattables.before_begin(),
         from_factory_activity(opts, drp, ro, gsf, brp, ps, pdrp, fprp, fc, m));
-    BOOST_LOG_SEV(lg, debug) << "Formattables: " << r;
+    BOOST_LOG_SEV(lg, debug) << "Formattables: " << formattables;
 
     BOOST_LOG_SEV(lg, debug) << "Finished creating formattables.";
 
-    return r;
+    return std::make_pair(fprp, formattables);
 }
 
 } } }
diff --git a/projects/cpp/src/types/formatters/context.cpp b/projects/cpp/src/types/formatters/context.cpp
new file mode 100644
index 0000000..1b2af37
--- /dev/null
+++ b/projects/cpp/src/types/formatters/context.cpp
@@ -0,0 +1,82 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/cpp/types/formatters/context.hpp"
+
+namespace dogen {
+namespace cpp {
+namespace formatters {
+
+context::context(
+    const dogen::cpp::settings::bundle& bundle,
+    const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& formatter_properties)
+    : bundle_(bundle),
+      formatter_properties_(formatter_properties) { }
+
+void context::swap(context& other) noexcept {
+    using std::swap;
+    swap(bundle_, other.bundle_);
+    swap(formatter_properties_, other.formatter_properties_);
+}
+
+bool context::operator==(const context& rhs) const {
+    return bundle_ == rhs.bundle_ &&
+        formatter_properties_ == rhs.formatter_properties_;
+}
+
+context& context::operator=(context other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const dogen::cpp::settings::bundle& context::bundle() const {
+    return bundle_;
+}
+
+dogen::cpp::settings::bundle& context::bundle() {
+    return bundle_;
+}
+
+void context::bundle(const dogen::cpp::settings::bundle& v) {
+    bundle_ = v;
+}
+
+void context::bundle(const dogen::cpp::settings::bundle&& v) {
+    bundle_ = std::move(v);
+}
+
+const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& context::formatter_properties() const {
+    return formatter_properties_;
+}
+
+std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& context::formatter_properties() {
+    return formatter_properties_;
+}
+
+void context::formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>& v) {
+    formatter_properties_ = v;
+}
+
+void context::formatter_properties(const std::unordered_map<std::string, dogen::cpp::formattables::formatter_properties>&& v) {
+    formatter_properties_ = std::move(v);
+}
+
+} } }
diff --git a/projects/cpp/src/types/formatters/entity_formatting_assistant.cpp b/projects/cpp/src/types/formatters/entity_formatting_assistant.cpp
index 12cb9f3..575ca5c 100644
--- a/projects/cpp/src/types/formatters/entity_formatting_assistant.cpp
+++ b/projects/cpp/src/types/formatters/entity_formatting_assistant.cpp
@@ -94,19 +94,19 @@ make_setter_return_type(const std::string& containing_type_name,
 
 entity_formatting_assistant::
 entity_formatting_assistant(const formattables::entity& e,
-    const dynamic::ownership_hierarchy& oh,
+    const context& ctx, const dynamic::ownership_hierarchy& oh,
     const formatters::file_types ft) :
-    entity_(e), ownership_hierarchy_(oh),
+    entity_(e), context_(ctx),
     formatter_properties_(obtain_formatter_properties(oh.formatter_name())),
-    file_type_(ft) {
+    ownership_hierarchy_(oh), file_type_(ft) {
     validate();
 }
 
 formattables::formatter_properties entity_formatting_assistant::
 obtain_formatter_properties(const std::string& formatter_name) const {
     const auto& fn(formatter_name);
-    const auto i(entity_.formatter_properties().find(fn));
-    if (i == entity_.formatter_properties().end()) {
+    const auto i(context_.formatter_properties().find(fn));
+    if (i == context_.formatter_properties().end()) {
         BOOST_LOG_SEV(lg, error) << formatter_properties_missing << fn;
         BOOST_THROW_EXCEPTION(
             formatting_error(formatter_properties_missing + fn));
@@ -163,11 +163,11 @@ bool entity_formatting_assistant::is_test_data_enabled() const {
 }
 
 bool entity_formatting_assistant::is_complete_constructor_disabled() const {
-    return entity_.settings().aspect_settings().disable_complete_constructor();
+    return context_.bundle().aspect_settings().disable_complete_constructor();
 }
 
 bool entity_formatting_assistant::is_xml_serialization_disabled() const {
-    return entity_.settings().aspect_settings().disable_xml_serialization();
+    return context_.bundle().aspect_settings().disable_xml_serialization();
 }
 
 void entity_formatting_assistant::validate() const {
@@ -189,7 +189,7 @@ void entity_formatting_assistant::validate() const {
 dogen::formatters::cpp::scoped_boilerplate_formatter
 entity_formatting_assistant::make_scoped_boilerplate_formatter() {
     const auto& fp(formatter_properties_);
-    const auto gs(entity_.settings().general_settings());
+    const auto gs(context_.bundle().general_settings());
     return dogen::formatters::cpp::scoped_boilerplate_formatter(
         stream(), gs, fp.inclusion_dependencies(),
         fp.header_guard() ? *fp.header_guard() : empty);
@@ -394,10 +394,16 @@ get_odb_settings(const std::unordered_map<std::string,
     return r;
 }
 
+boost::shared_ptr<settings::odb_settings>
+entity_formatting_assistant::get_odb_settings() const {
+    const auto& os(context_.bundle().opaque_settings());
+    return get_odb_settings(os);
+}
+
 boost::shared_ptr<settings::odb_settings> entity_formatting_assistant::
 get_odb_settings(const std::string& property_id) const {
 
-    const auto& osfp(entity_.settings().opaque_settings_for_property());
+    const auto& osfp(context_.bundle().opaque_settings_for_property());
     const auto i(osfp.find(property_id));
     if (i == osfp.end())
         return boost::shared_ptr<settings::odb_settings>();
diff --git a/projects/cpp/src/types/formatters/hash/class_header_formatter.cpp b/projects/cpp/src/types/formatters/hash/class_header_formatter.cpp
index 79200aa..7cdb18f 100644
--- a/projects/cpp/src/types/formatters/hash/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/hash/class_header_formatter.cpp
@@ -86,8 +86,8 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_header_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/hash/class_implementation_formatter.cpp b/projects/cpp/src/types/formatters/hash/class_implementation_formatter.cpp
index 61577ae..ae75907 100644
--- a/projects/cpp/src/types/formatters/hash/class_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/hash/class_implementation_formatter.cpp
@@ -107,8 +107,8 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/hash/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/hash/enum_header_formatter.cpp
index 93c2267..cf3e3b8 100644
--- a/projects/cpp/src/types/formatters/hash/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/hash/enum_header_formatter.cpp
@@ -91,8 +91,8 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_header_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/includers_formatter.cpp b/projects/cpp/src/types/formatters/includers_formatter.cpp
index 8ced74f..0c077f1 100644
--- a/projects/cpp/src/types/formatters/includers_formatter.cpp
+++ b/projects/cpp/src/types/formatters/includers_formatter.cpp
@@ -89,8 +89,9 @@ void includers_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file
-includers_formatter::format(const formattables::includers_info& i) const {
-    entity_formatting_assistant fa(i, ownership_hierarchy(), file_type());
+includers_formatter::format(const context& ctx,
+    const formattables::includers_info& i) const {
+    entity_formatting_assistant fa(i, ctx, ownership_hierarchy(), file_type());
     const auto r(includers_formatter_stitch(fa, i));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/io/class_header_formatter.cpp b/projects/cpp/src/types/formatters/io/class_header_formatter.cpp
index 6a7419e..ff6cfdb 100644
--- a/projects/cpp/src/types/formatters/io/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/io/class_header_formatter.cpp
@@ -93,8 +93,8 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_header_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/io/class_implementation_formatter.cpp b/projects/cpp/src/types/formatters/io/class_implementation_formatter.cpp
index c430ce6..7f2be13 100644
--- a/projects/cpp/src/types/formatters/io/class_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/io/class_implementation_formatter.cpp
@@ -139,8 +139,8 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/io/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/io/enum_header_formatter.cpp
index 6a852ee..8a5eae4 100644
--- a/projects/cpp/src/types/formatters/io/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/io/enum_header_formatter.cpp
@@ -91,8 +91,8 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_header_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/io/enum_implementation_formatter.cpp b/projects/cpp/src/types/formatters/io/enum_implementation_formatter.cpp
index 751cfc0..8f262d0 100644
--- a/projects/cpp/src/types/formatters/io/enum_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/io/enum_implementation_formatter.cpp
@@ -93,8 +93,8 @@ void enum_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_implementation_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/odb/class_header_formatter.cpp b/projects/cpp/src/types/formatters/odb/class_header_formatter.cpp
index 464b0b5..e8e03ca 100644
--- a/projects/cpp/src/types/formatters/odb/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/odb/class_header_formatter.cpp
@@ -94,8 +94,9 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file
-class_header_formatter::format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+class_header_formatter::format(const context& ctx,
+    const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/odb/class_header_formatter.stitch b/projects/cpp/src/types/formatters/odb/class_header_formatter.stitch
index 7aec1b4..f02ee86 100644
--- a/projects/cpp/src/types/formatters/odb/class_header_formatter.stitch
+++ b/projects/cpp/src/types/formatters/odb/class_header_formatter.stitch
@@ -13,8 +13,7 @@ dogen::formatters::file class_header_formatter_stitch(
 
     {
         auto sbf(fa.make_scoped_boilerplate_formatter());
-        const auto& os(c.settings().opaque_settings());
-        const auto odbs(fa.get_odb_settings(os));
+        const auto odbs(fa.get_odb_settings());
         if (!odbs || odbs->pragmas().empty()) {
 #>
 // class has no ODB pragmas defined.
diff --git a/projects/cpp/src/types/formatters/odb/class_header_formatter_stitch.cpp b/projects/cpp/src/types/formatters/odb/class_header_formatter_stitch.cpp
index ab934df..10ea399 100644
--- a/projects/cpp/src/types/formatters/odb/class_header_formatter_stitch.cpp
+++ b/projects/cpp/src/types/formatters/odb/class_header_formatter_stitch.cpp
@@ -32,8 +32,7 @@ dogen::formatters::file class_header_formatter_stitch(
 
     {
         auto sbf(fa.make_scoped_boilerplate_formatter());
-        const auto& os(c.settings().opaque_settings());
-        const auto odbs(fa.get_odb_settings(os));
+        const auto odbs(fa.get_odb_settings());
         if (!odbs || odbs->pragmas().empty()) {
 fa.stream() << "// class has no ODB pragmas defined." << std::endl;
 fa.stream() << std::endl;
diff --git a/projects/cpp/src/types/formatters/odb/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/odb/enum_header_formatter.cpp
index 5118fc0..0520442 100644
--- a/projects/cpp/src/types/formatters/odb/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/odb/enum_header_formatter.cpp
@@ -89,8 +89,9 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file
-enum_header_formatter::format(const formattables::enum_info& e) const {
-    entity_formatting_assistant fa(e, ownership_hierarchy(), file_type());
+enum_header_formatter::format(const context& ctx,
+    const formattables::enum_info& e) const {
+    entity_formatting_assistant fa(e, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, e));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/class_header_formatter.cpp b/projects/cpp/src/types/formatters/serialization/class_header_formatter.cpp
index 9806dff..5902a31 100644
--- a/projects/cpp/src/types/formatters/serialization/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/class_header_formatter.cpp
@@ -98,8 +98,8 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_header_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/class_implementation_formatter.cpp b/projects/cpp/src/types/formatters/serialization/class_implementation_formatter.cpp
index 6cb462a..8040b15 100644
--- a/projects/cpp/src/types/formatters/serialization/class_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/class_implementation_formatter.cpp
@@ -117,8 +117,8 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/serialization/enum_header_formatter.cpp
index dc8c3d3..7a62f74 100644
--- a/projects/cpp/src/types/formatters/serialization/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/enum_header_formatter.cpp
@@ -94,8 +94,8 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_header_formatter::
-format(const formattables::enum_info& e) const {
-    entity_formatting_assistant fa(e, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& e) const {
+    entity_formatting_assistant fa(e, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, e));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/forward_declarations_formatter.cpp b/projects/cpp/src/types/formatters/serialization/forward_declarations_formatter.cpp
index 1a57e40..e317e63 100644
--- a/projects/cpp/src/types/formatters/serialization/forward_declarations_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/forward_declarations_formatter.cpp
@@ -108,13 +108,14 @@ void forward_declarations_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file forward_declarations_formatter::
-format(const formattables::forward_declarations_info& fd) const {
+format(const context& ctx,
+    const formattables::forward_declarations_info& fd) const {
     // FIXME: hack: legacy formatters do not support serialisation
     // forward declarations for some types.
     if (fd.is_enum() || fd.is_exception())
         return dogen::formatters::file();
 
-    entity_formatting_assistant fa(fd, ownership_hierarchy(), file_type());
+    entity_formatting_assistant fa(fd, ctx, ownership_hierarchy(), file_type());
     const auto r(forward_declarations_formatter_stitch(fa, fd));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/registrar_header_formatter.cpp b/projects/cpp/src/types/formatters/serialization/registrar_header_formatter.cpp
index f993189..ec55ef3 100644
--- a/projects/cpp/src/types/formatters/serialization/registrar_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/registrar_header_formatter.cpp
@@ -55,8 +55,8 @@ void registrar_header_formatter::register_inclusion_dependencies_provider(
     formattables::registrar& /*rg*/) const { }
 
 dogen::formatters::file registrar_header_formatter::
-format(const formattables::registrar_info& ri) const {
-    entity_formatting_assistant fa(ri, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::registrar_info& ri) const {
+    entity_formatting_assistant fa(ri, ctx, ownership_hierarchy(), file_type());
     const auto r(registrar_header_formatter_stitch(fa, ri));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/serialization/registrar_implementation_formatter.cpp b/projects/cpp/src/types/formatters/serialization/registrar_implementation_formatter.cpp
index 9e2f722..97d37a7 100644
--- a/projects/cpp/src/types/formatters/serialization/registrar_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/serialization/registrar_implementation_formatter.cpp
@@ -127,8 +127,8 @@ register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file registrar_implementation_formatter::
-format(const formattables::registrar_info& ri) const {
-    entity_formatting_assistant fa(ri, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::registrar_info& ri) const {
+    entity_formatting_assistant fa(ri, ctx, ownership_hierarchy(), file_type());
     const auto r(registrar_implementation_formatter_stitch(fa, ri));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/test_data/class_header_formatter.cpp b/projects/cpp/src/types/formatters/test_data/class_header_formatter.cpp
index dc39af5..876e6f6 100644
--- a/projects/cpp/src/types/formatters/test_data/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/test_data/class_header_formatter.cpp
@@ -84,8 +84,8 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_header_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/test_data/class_implementation_formatter.cpp b/projects/cpp/src/types/formatters/test_data/class_implementation_formatter.cpp
index 00e82bb..268dc71 100644
--- a/projects/cpp/src/types/formatters/test_data/class_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/test_data/class_implementation_formatter.cpp
@@ -108,8 +108,8 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/test_data/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/test_data/enum_header_formatter.cpp
index 656f6b0..729d85d 100644
--- a/projects/cpp/src/types/formatters/test_data/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/test_data/enum_header_formatter.cpp
@@ -89,8 +89,8 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_header_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/test_data/enum_implementation_formatter.cpp b/projects/cpp/src/types/formatters/test_data/enum_implementation_formatter.cpp
index c5e0da2..402f9ff 100644
--- a/projects/cpp/src/types/formatters/test_data/enum_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/test_data/enum_implementation_formatter.cpp
@@ -89,8 +89,8 @@ void enum_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file enum_implementation_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/class_header_formatter.cpp b/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
index ed9072b..2d74b2a 100644
--- a/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/class_header_formatter.cpp
@@ -121,8 +121,9 @@ void class_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file
-class_header_formatter::format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+class_header_formatter::format(const context& ctx,
+    const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/class_implementation_formatter.cpp b/projects/cpp/src/types/formatters/types/class_implementation_formatter.cpp
index 4c9b4e4..6376828 100644
--- a/projects/cpp/src/types/formatters/types/class_implementation_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/class_implementation_formatter.cpp
@@ -129,8 +129,8 @@ void class_implementation_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file class_implementation_formatter::
-format(const formattables::class_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::class_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(class_implementation_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/enum_header_formatter.cpp b/projects/cpp/src/types/formatters/types/enum_header_formatter.cpp
index ef1785e..cefb6bc 100644
--- a/projects/cpp/src/types/formatters/types/enum_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/enum_header_formatter.cpp
@@ -57,8 +57,8 @@ void enum_header_formatter::register_inclusion_dependencies_provider(
     formattables::registrar& /*rg*/) const {}
 
 dogen::formatters::file enum_header_formatter::
-format(const formattables::enum_info& c) const {
-    entity_formatting_assistant fa(c, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::enum_info& c) const {
+    entity_formatting_assistant fa(c, ctx, ownership_hierarchy(), file_type());
     const auto r(enum_header_formatter_stitch(fa, c));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/exception_header_formatter.cpp b/projects/cpp/src/types/formatters/types/exception_header_formatter.cpp
index 59e5fff..ac5587e 100644
--- a/projects/cpp/src/types/formatters/types/exception_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/exception_header_formatter.cpp
@@ -91,8 +91,8 @@ void exception_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file exception_header_formatter::
-format(const formattables::exception_info& e) const {
-    entity_formatting_assistant fa(e, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::exception_info& e) const {
+    entity_formatting_assistant fa(e, ctx, ownership_hierarchy(), file_type());
     const auto r(exception_header_formatter_stitch(fa, e));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/forward_declarations_formatter.cpp b/projects/cpp/src/types/formatters/types/forward_declarations_formatter.cpp
index 11ae0d8..47bc16d 100644
--- a/projects/cpp/src/types/formatters/types/forward_declarations_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/forward_declarations_formatter.cpp
@@ -105,8 +105,9 @@ void forward_declarations_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file forward_declarations_formatter::
-format(const formattables::forward_declarations_info& fd) const {
-    entity_formatting_assistant fa(fd, ownership_hierarchy(), file_type());
+format(const context& ctx,
+    const formattables::forward_declarations_info& fd) const {
+    entity_formatting_assistant fa(fd, ctx, ownership_hierarchy(), file_type());
     const auto r(forward_declarations_formatter_stitch(fa, fd));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/namespace_header_formatter.cpp b/projects/cpp/src/types/formatters/types/namespace_header_formatter.cpp
index 8c09bb3..8090e11 100644
--- a/projects/cpp/src/types/formatters/types/namespace_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/namespace_header_formatter.cpp
@@ -57,8 +57,8 @@ void namespace_header_formatter::register_inclusion_dependencies_provider(
     formattables::registrar& /*rg*/) const {}
 
 dogen::formatters::file namespace_header_formatter::
-format(const formattables::namespace_info& n) const {
-    entity_formatting_assistant fa(n, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::namespace_info& n) const {
+    entity_formatting_assistant fa(n, ctx, ownership_hierarchy(), file_type());
     const auto r(namespace_header_formatter_stitch(fa, n));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/types/visitor_header_formatter.cpp b/projects/cpp/src/types/formatters/types/visitor_header_formatter.cpp
index 467fd8e..cdc39af 100644
--- a/projects/cpp/src/types/formatters/types/visitor_header_formatter.cpp
+++ b/projects/cpp/src/types/formatters/types/visitor_header_formatter.cpp
@@ -96,8 +96,8 @@ void visitor_header_formatter::register_inclusion_dependencies_provider(
 }
 
 dogen::formatters::file visitor_header_formatter::
-format(const formattables::visitor_info& e) const {
-    entity_formatting_assistant fa(e, ownership_hierarchy(), file_type());
+format(const context& ctx, const formattables::visitor_info& e) const {
+    entity_formatting_assistant fa(e, ctx, ownership_hierarchy(), file_type());
     const auto r(visitor_header_formatter_stitch(fa, e));
     return r;
 }
diff --git a/projects/cpp/src/types/formatters/workflow.cpp b/projects/cpp/src/types/formatters/workflow.cpp
index ff06aab..46bde2d 100644
--- a/projects/cpp/src/types/formatters/workflow.cpp
+++ b/projects/cpp/src/types/formatters/workflow.cpp
@@ -35,6 +35,7 @@
 #include "dogen/cpp/types/formattables/forward_declarations_info.hpp"
 #include "dogen/cpp/types/formattables/formattable_visitor.hpp"
 #include "dogen/cpp/types/workflow_error.hpp"
+#include "dogen/cpp/types/formatters/context.hpp"
 #include "dogen/cpp/types/formatters/workflow.hpp"
 
 namespace {
@@ -44,6 +45,9 @@ static logger lg(logger_factory("cpp.formatters.workflow"));
 
 const std::string formatter_properties_not_found(
     "Could not find properties for formatter: ");
+const std::string bundle_not_found(
+    "Could not find settings bundle for: ");
+
 }
 
 namespace dogen {
@@ -56,7 +60,9 @@ namespace formatters {
  */
 class dispatcher final : public formattables::formattable_visitor {
 public:
-    explicit dispatcher(const container& c);
+    dispatcher(const settings::bundle_repository& brp,
+        const formattables::formatter_properties_repository& fprp,
+        const container& c);
     ~dispatcher() noexcept { }
 
 private:
@@ -93,20 +99,37 @@ private:
         BOOST_LOG_SEV(lg, debug) << "Formatting: '" << e.name()
                                  << "' with '" << fn << "'";
 
-        const auto i(e.formatter_properties().find(fn));
-        if (i == e.formatter_properties().end()) {
+        const auto fp(formatter_properties_.formatter_properties_by_name());
+        const auto i(fp.find(e.id()));
+        if (i == fp.end()) {
+            BOOST_LOG_SEV(lg, error) << formatter_properties_not_found
+                                     << e.id();
+            BOOST_THROW_EXCEPTION(
+                workflow_error(formatter_properties_not_found + e.id()));
+        }
+
+        const auto j(i->second.find(fn));
+        if (j == i->second.end()) {
             BOOST_LOG_SEV(lg, error) << formatter_properties_not_found << fn;
             BOOST_THROW_EXCEPTION(
                 workflow_error(formatter_properties_not_found + fn));
         }
 
-        const auto is_formatter_enabled(i->second.enabled());
+        const auto is_formatter_enabled(j->second.enabled());
         if (!is_formatter_enabled) {
             BOOST_LOG_SEV(lg, debug) << "Formatter not enabled for type.";
             return;
         }
 
-        auto file(f.format(e));
+        const auto& b(bundle_.bundles_by_name());
+        const auto k(b.find(e.id()));
+        if (k == b.end()) {
+            BOOST_LOG_SEV(lg, error) << bundle_not_found << e.id();
+            BOOST_THROW_EXCEPTION(workflow_error(bundle_not_found + e.id()));
+        }
+
+        const context ctx(k->second, i->second);
+        auto file(f.format(ctx, e));
 
         if (empty_out_content) {
             BOOST_LOG_SEV(lg, debug) << "Emptying out content.";
@@ -172,11 +195,16 @@ public:
     const std::forward_list<dogen::formatters::file>& files();
 
 private:
+    const settings::bundle_repository& bundle_;
+    const formattables::formatter_properties_repository& formatter_properties_;
     const container& container_;
     std::forward_list<dogen::formatters::file> files_;
 };
 
-dispatcher::dispatcher(const container& c) : container_(c) { }
+dispatcher::dispatcher(const settings::bundle_repository& brp,
+    const formattables::formatter_properties_repository& fprp,
+    const container& c) :
+    bundle_(brp), formatter_properties_(fprp), container_(c) { }
 
 void dispatcher::visit(const formattables::class_info& c) {
     const bool empty_out_content(
@@ -250,12 +278,12 @@ cpp::formatters::registrar& workflow::registrar() {
 }
 
 std::forward_list<dogen::formatters::file>
-workflow::execute(const std::forward_list<
-        std::shared_ptr<formattables::formattable>
-        >& f)
-    const {
+workflow::execute(const settings::bundle_repository& brp,
+    const formattables::formatter_properties_repository& fprp,
+    const std::forward_list<
+    std::shared_ptr<formattables::formattable> >& f) const {
     BOOST_LOG_SEV(lg, debug) << "Starting workflow.";
-    dispatcher d(registrar().formatter_container());
+    dispatcher d(brp, fprp, registrar().formatter_container());
     for (const auto sp : f)
         d.format(*sp);
 
diff --git a/projects/cpp/src/types/workflow.cpp b/projects/cpp/src/types/workflow.cpp
index f5c48c7..bf2fd96 100644
--- a/projects/cpp/src/types/workflow.cpp
+++ b/projects/cpp/src/types/workflow.cpp
@@ -93,7 +93,10 @@ settings::bundle_repository workflow::create_bundle_repository(
     return f.make(rp, root_object, gsf, osb, m);
 }
 
-std::forward_list<std::shared_ptr<formattables::formattable> >
+std::pair<
+    formattables::formatter_properties_repository,
+    std::forward_list<std::shared_ptr<formattables::formattable> >
+>
 workflow::create_formattables_activty(
     const config::cpp_options& opts,
     const dynamic::repository& srp,
@@ -109,11 +112,13 @@ workflow::create_formattables_activty(
 }
 
 std::forward_list<dogen::formatters::file>
-workflow::format_activty(const std::forward_list<
-        std::shared_ptr<formattables::formattable>
-        >& f) const {
+workflow::format_activty(const settings::bundle_repository& brp,
+    const formattables::formatter_properties_repository& fprp,
+    const std::forward_list<
+    std::shared_ptr<formattables::formattable>
+    >& f) const {
     formatters::workflow w;
-    return w.execute(f);
+    return w.execute(brp, fprp, f);
 }
 
 std::string workflow::name() const {
@@ -159,9 +164,9 @@ workflow::generate(const config::knitting_options& ko,
     const auto& fc(formatters::workflow::registrar().formatter_container());
 
     const auto& kcpp(ko.cpp());
-    const auto f(
+    const auto pair(
         create_formattables_activty(kcpp, rp, ro, gsf, fc, osb, brp, m));
-    const auto r(format_activty(f));
+    const auto r(format_activty(brp, pair.first, pair.second));
 
     BOOST_LOG_SEV(lg, debug) << "Finished C++ backend.";
     return r;
