diff --git a/doc/agile/v1/sprint_backlog_02.org b/doc/agile/v1/sprint_backlog_02.org
index 6085c09e0..9ed715bd0 100644
--- a/doc/agile/v1/sprint_backlog_02.org
+++ b/doc/agile/v1/sprint_backlog_02.org
@@ -12,33 +12,34 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2017-07-09 Sun 17:38]
+#+CAPTION: Clock summary at [2017-07-10 Mon 23:06]
 | <75>                                                                        |         |       |      |       |
 | Headline                                                                    | Time    |       |      |     % |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| *Total time*                                                                | *21:56* |       |      | 100.0 |
+| *Total time*                                                                | *26:16* |       |      | 100.0 |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| Stories                                                                     | 21:56   |       |      | 100.0 |
-| Active                                                                      |         | 21:56 |      | 100.0 |
-| STARTED Sprint and product backlog grooming                                 |         |       | 0:48 |   3.6 |
-| COMPLETED Edit release notes for previous sprint                            |         |       | 0:24 |   1.8 |
-| COMPLETED Implement the context class                                       |         |       | 1:12 |   5.5 |
-| COMPLETED Implement the exogenous transformation chain                      |         |       | 4:11 |  19.1 |
-| COMPLETED Implement the pre-processing chain                                |         |       | 1:35 |   7.2 |
-| COMPLETED Refactor mapping repository factory                               |         |       | 0:12 |   0.9 |
-| COMPLETED Implement the output languages transform                          |         |       | 0:37 |   2.8 |
-| COMPLETED Use forward declaration for context                               |         |       | 0:20 |   1.5 |
-| COMPLETED Implement the references chain                                    |         |       | 2:43 |  12.4 |
-| COMPLETED Implement the merge transform                                     |         |       | 0:40 |   3.0 |
-| COMPLETED Implement the model generation chain                              |         |       | 0:13 |   1.0 |
-| COMPLETED Implement the model assembly chain                                |         |       | 0:50 |   3.8 |
-| COMPLETED Implement the post-processing chain                               |         |       | 3:31 |  16.0 |
-| COMPLETED Move helpers from =transforms= namespace                          |         |       | 0:45 |   3.4 |
+| Stories                                                                     | 26:16   |       |      | 100.0 |
+| Active                                                                      |         | 26:16 |      | 100.0 |
+| STARTED Sprint and product backlog grooming                                 |         |       | 0:48 |   3.0 |
+| COMPLETED Edit release notes for previous sprint                            |         |       | 0:24 |   1.5 |
+| COMPLETED Implement the context class                                       |         |       | 1:12 |   4.6 |
+| COMPLETED Implement the exogenous transformation chain                      |         |       | 4:11 |  15.9 |
+| COMPLETED Implement the pre-processing chain                                |         |       | 1:35 |   6.0 |
+| COMPLETED Refactor mapping repository factory                               |         |       | 0:12 |   0.8 |
+| COMPLETED Implement the output languages transform                          |         |       | 0:37 |   2.3 |
+| COMPLETED Use forward declaration for context                               |         |       | 0:20 |   1.3 |
+| COMPLETED Implement the references chain                                    |         |       | 2:43 |  10.3 |
+| COMPLETED Implement the merge transform                                     |         |       | 0:40 |   2.5 |
+| COMPLETED Implement the model generation chain                              |         |       | 0:13 |   0.8 |
+| COMPLETED Implement the model assembly chain                                |         |       | 0:50 |   3.2 |
+| COMPLETED Implement the post-processing chain                               |         |       | 3:31 |  13.4 |
+| COMPLETED Move helpers from =transforms= namespace                          |         |       | 0:45 |   2.9 |
 | COMPLETED Replace expanders with transforms                                 |         |       | 0:03 |   0.2 |
-| COMPLETED Port all expander unit tests to transforms                        |         |       | 0:42 |   3.2 |
-| COMPLETED Remove all legacy classes from yarn                               |         |       | 0:55 |   4.2 |
-| COMPLETED Implement the mapper as a transform                               |         |       | 0:46 |   3.5 |
-| COMPLETED Move helpers from main yarn namespace                             |         |       | 1:29 |   6.8 |
+| COMPLETED Port all expander unit tests to transforms                        |         |       | 0:42 |   2.7 |
+| COMPLETED Remove all legacy classes from yarn                               |         |       | 0:55 |   3.5 |
+| COMPLETED Implement the mapper as a transform                               |         |       | 0:46 |   2.9 |
+| COMPLETED Move helpers from main yarn namespace                             |         |       | 1:29 |   5.6 |
+| STARTED Move all data types into its own namespace                          |         |       | 4:20 |  16.5 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -343,7 +344,8 @@ transforms namespace and clean it up. Name: =map_transform=.
 Types such as name builder etc need to be moved to the helpers
 namespace.
 
-*** Move all data types into its own namespace                        :story:
+*** STARTED Move all data types into its own namespace                :story:
+    CLOCK: [2017-07-10 Mon 18:46]--[2017-07-10 Mon 23:06] =>  4:20
 
 Now we have placed all the transforms under namespace =transforms=,
 for symmetry purposes it would be nice to have some top-level
@@ -357,6 +359,12 @@ If we cannot find any good names, we may need to leave these objects
 at the top-level. However, we should probably also place the code
 generator at the top-level as well.
 
+Notes:
+
+- name flattener should be in helpers
+- bug in resolution: cannot refer to a top-level namespace from
+  another top-level namespace
+
 *** Implement the code-generation chain                               :story:
 
 Tasks:
diff --git a/projects/input_models/yarn.dia b/projects/input_models/yarn.dia
index 13fd40e7b..9b29f1e78 100644
--- a/projects/input_models/yarn.dia
+++ b/projects/input_models/yarn.dia
@@ -63,7 +63,45 @@
     </dia:attribute>
   </dia:diagramdata>
   <dia:layer name="Background" visible="true" active="true">
-    <dia:object type="UML - Class" version="0" id="O0">
+    <dia:object type="UML - LargePackage" version="0" id="O0">
+      <dia:attribute name="obj_pos">
+        <dia:point val="-218,-43"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="-218.05,-44.05;130.05,116.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="-218,-43"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="348"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="159"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000149011612"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_colour">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#meta_model#</dia:string>
+      </dia:attribute>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O1">
       <dia:attribute name="obj_pos">
         <dia:point val="-82,16"/>
       </dia:attribute>
@@ -290,8 +328,9 @@ Name must be in one of the supported notations.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O1">
+    <dia:object type="UML - Class" version="0" id="O2">
       <dia:attribute name="obj_pos">
         <dia:point val="-57,-1"/>
       </dia:attribute>
@@ -595,8 +634,9 @@ supported languages.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O2">
+    <dia:object type="UML - Association" version="2" id="O3">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -663,11 +703,12 @@ supported languages.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O0" connection="1"/>
-        <dia:connection handle="1" to="O1" connection="7"/>
+        <dia:connection handle="0" to="O1" connection="1"/>
+        <dia:connection handle="1" to="O2" connection="7"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O3">
+    <dia:object type="UML - Association" version="2" id="O4">
       <dia:attribute name="name">
         <dia:string>#&lt; represents a tree of#</dia:string>
       </dia:attribute>
@@ -734,22 +775,23 @@ supported languages.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O1" connection="0"/>
-        <dia:connection handle="1" to="O24" connection="7"/>
+        <dia:connection handle="0" to="O2" connection="0"/>
+        <dia:connection handle="1" to="O25" connection="7"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Note" version="0" id="O4">
+    <dia:object type="UML - Note" version="0" id="O5">
       <dia:attribute name="obj_pos">
-        <dia:point val="-202,-66"/>
+        <dia:point val="-237,-83"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-202.05,-66.05;-174.1,-31.45"/>
+        <dia:rectangle val="-237.05,-83.05;-209.1,-48.45"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-202,-66"/>
+        <dia:point val="-237,-83"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="27.850000000000001"/>
@@ -819,7 +861,7 @@ and to build it.
             <dia:real val="0.80000000000000004"/>
           </dia:attribute>
           <dia:attribute name="pos">
-            <dia:point val="-201.65,-64.755"/>
+            <dia:point val="-236.65,-81.755"/>
           </dia:attribute>
           <dia:attribute name="color">
             <dia:color val="#000000"/>
@@ -830,7 +872,7 @@ and to build it.
         </dia:composite>
       </dia:attribute>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O5">
+    <dia:object type="UML - Association" version="2" id="O6">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -897,11 +939,12 @@ and to build it.
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O8" connection="10"/>
-        <dia:connection handle="1" to="O24" connection="5"/>
+        <dia:connection handle="0" to="O9" connection="10"/>
+        <dia:connection handle="1" to="O25" connection="5"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O6">
+    <dia:object type="UML - Class" version="0" id="O7">
       <dia:attribute name="obj_pos">
         <dia:point val="-13,91"/>
       </dia:attribute>
@@ -1105,8 +1148,9 @@ Aggregates a group of logically related elements into a unit.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O7">
+    <dia:object type="UML - Class" version="0" id="O8">
       <dia:attribute name="obj_pos">
         <dia:point val="1,77"/>
       </dia:attribute>
@@ -1278,8 +1322,9 @@ Children are concepts that refine at least one other concept.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O8">
+    <dia:object type="UML - Class" version="0" id="O9">
       <dia:attribute name="obj_pos">
         <dia:point val="-106,-1"/>
       </dia:attribute>
@@ -1412,8 +1457,9 @@ Children are concepts that refine at least one other concept.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O9">
+    <dia:object type="UML - Class" version="0" id="O10">
       <dia:attribute name="obj_pos">
         <dia:point val="-143,-1"/>
       </dia:attribute>
@@ -1550,8 +1596,9 @@ for Java, etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O10">
+    <dia:object type="UML - Class" version="0" id="O11">
       <dia:attribute name="obj_pos">
         <dia:point val="-124,-1"/>
       </dia:attribute>
@@ -1684,8 +1731,9 @@ for Java, etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O11">
+    <dia:object type="UML - Generalization" version="1" id="O12">
       <dia:attribute name="obj_pos">
         <dia:point val="-137.553,2.6"/>
       </dia:attribute>
@@ -1722,11 +1770,12 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O9" connection="6"/>
-        <dia:connection handle="1" to="O14" connection="8"/>
+        <dia:connection handle="0" to="O10" connection="6"/>
+        <dia:connection handle="1" to="O15" connection="8"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O12">
+    <dia:object type="UML - Generalization" version="1" id="O13">
       <dia:attribute name="obj_pos">
         <dia:point val="-116.82,2.6"/>
       </dia:attribute>
@@ -1763,11 +1812,12 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O10" connection="6"/>
-        <dia:connection handle="1" to="O14" connection="1"/>
+        <dia:connection handle="0" to="O11" connection="6"/>
+        <dia:connection handle="1" to="O15" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O13">
+    <dia:object type="UML - Generalization" version="1" id="O14">
       <dia:attribute name="obj_pos">
         <dia:point val="-103.493,2.6"/>
       </dia:attribute>
@@ -1804,11 +1854,12 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O8" connection="6"/>
-        <dia:connection handle="1" to="O14" connection="1"/>
+        <dia:connection handle="0" to="O9" connection="6"/>
+        <dia:connection handle="1" to="O15" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O14">
+    <dia:object type="UML - Class" version="0" id="O15">
       <dia:attribute name="obj_pos">
         <dia:point val="-125,16"/>
       </dia:attribute>
@@ -1921,8 +1972,9 @@ It is not required for any other purpose.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O15">
+    <dia:object type="UML - Class" version="0" id="O16">
       <dia:attribute name="obj_pos">
         <dia:point val="15,77"/>
       </dia:attribute>
@@ -2124,8 +2176,9 @@ It is not required for any other purpose.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O16">
+    <dia:object type="UML - Generalization" version="1" id="O17">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -2162,11 +2215,12 @@ It is not required for any other purpose.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O15" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O16" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O17">
+    <dia:object type="UML - Class" version="0" id="O18">
       <dia:attribute name="obj_pos">
         <dia:point val="-27,77"/>
       </dia:attribute>
@@ -2392,8 +2446,9 @@ or a string.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O18">
+    <dia:object type="UML - Class" version="0" id="O19">
       <dia:attribute name="obj_pos">
         <dia:point val="-34,91"/>
       </dia:attribute>
@@ -2530,8 +2585,9 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O19">
+    <dia:object type="UML - Association" version="2" id="O20">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -2598,11 +2654,12 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O17" connection="6"/>
-        <dia:connection handle="1" to="O18" connection="1"/>
+        <dia:connection handle="0" to="O18" connection="6"/>
+        <dia:connection handle="1" to="O19" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O20">
+    <dia:object type="UML - Generalization" version="1" id="O21">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -2639,11 +2696,12 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O17" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O18" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O21">
+    <dia:object type="UML - Generalization" version="1" id="O22">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -2680,11 +2738,12 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O22" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O23" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O22">
+    <dia:object type="UML - Class" version="0" id="O23">
       <dia:attribute name="obj_pos">
         <dia:point val="21,91"/>
       </dia:attribute>
@@ -2937,8 +2996,9 @@ decided instead to use the word object.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O23">
+    <dia:object type="UML - Association" version="2" id="O24">
       <dia:attribute name="name">
         <dia:string>#stores state in &gt;#</dia:string>
       </dia:attribute>
@@ -3005,11 +3065,12 @@ decided instead to use the word object.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O27" connection="1"/>
-        <dia:connection handle="1" to="O0" connection="7"/>
+        <dia:connection handle="0" to="O28" connection="1"/>
+        <dia:connection handle="1" to="O1" connection="7"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O24">
+    <dia:object type="UML - Class" version="0" id="O25">
       <dia:attribute name="obj_pos">
         <dia:point val="-90,-15"/>
       </dia:attribute>
@@ -3255,8 +3316,9 @@ languages, using the entire name structure.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O25">
+    <dia:object type="UML - Class" version="0" id="O26">
       <dia:attribute name="obj_pos">
         <dia:point val="-178,-29"/>
       </dia:attribute>
@@ -3462,8 +3524,9 @@ can make use of these types.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O26">
+    <dia:object type="UML - Association" version="2" id="O27">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -3530,11 +3593,12 @@ can make use of these types.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O30" connection="1"/>
-        <dia:connection handle="1" to="O25" connection="6"/>
+        <dia:connection handle="0" to="O31" connection="1"/>
+        <dia:connection handle="1" to="O26" connection="6"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O27">
+    <dia:object type="UML - Class" version="0" id="O28">
       <dia:attribute name="obj_pos">
         <dia:point val="-87,32"/>
       </dia:attribute>
@@ -3771,8 +3835,9 @@ formatting.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O28">
+    <dia:object type="UML - Class" version="0" id="O29">
       <dia:attribute name="obj_pos">
         <dia:point val="33,107"/>
       </dia:attribute>
@@ -3954,8 +4019,9 @@ etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O29">
+    <dia:object type="UML - Association" version="2" id="O30">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -4022,11 +4088,12 @@ etc.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O22" connection="7"/>
-        <dia:connection handle="1" to="O28" connection="1"/>
+        <dia:connection handle="0" to="O23" connection="7"/>
+        <dia:connection handle="1" to="O29" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O30">
+    <dia:object type="UML - Class" version="0" id="O31">
       <dia:attribute name="obj_pos">
         <dia:point val="-152,-15"/>
       </dia:attribute>
@@ -4159,8 +4226,9 @@ etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O31">
+    <dia:object type="UML - Generalization" version="1" id="O32">
       <dia:attribute name="obj_pos">
         <dia:point val="-146.745,-11.4"/>
       </dia:attribute>
@@ -4197,11 +4265,12 @@ etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O30" connection="6"/>
-        <dia:connection handle="1" to="O14" connection="1"/>
+        <dia:connection handle="0" to="O31" connection="6"/>
+        <dia:connection handle="1" to="O15" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O32">
+    <dia:object type="UML - Class" version="0" id="O33">
       <dia:attribute name="obj_pos">
         <dia:point val="-166,-1"/>
       </dia:attribute>
@@ -4357,8 +4426,9 @@ etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O33">
+    <dia:object type="UML - Generalization" version="1" id="O34">
       <dia:attribute name="obj_pos">
         <dia:point val="-151.64,3.4"/>
       </dia:attribute>
@@ -4395,11 +4465,12 @@ etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O32" connection="7"/>
-        <dia:connection handle="1" to="O14" connection="1"/>
+        <dia:connection handle="0" to="O33" connection="7"/>
+        <dia:connection handle="1" to="O15" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O34">
+    <dia:object type="UML - Class" version="0" id="O35">
       <dia:attribute name="obj_pos">
         <dia:point val="-66,-15"/>
       </dia:attribute>
@@ -4632,8 +4703,9 @@ are not modules, such as attributes, inner classes, etc.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O35">
+    <dia:object type="UML - Association" version="2" id="O36">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -4700,11 +4772,12 @@ are not modules, such as attributes, inner classes, etc.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O24" connection="9"/>
-        <dia:connection handle="1" to="O34" connection="16"/>
+        <dia:connection handle="0" to="O25" connection="9"/>
+        <dia:connection handle="1" to="O35" connection="16"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O36">
+    <dia:object type="UML - Class" version="0" id="O37">
       <dia:attribute name="obj_pos">
         <dia:point val="-12,65"/>
       </dia:attribute>
@@ -4864,8 +4937,9 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O37">
+    <dia:object type="UML - Generalization" version="1" id="O38">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -4902,11 +4976,12 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O6" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O7" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O38">
+    <dia:object type="UML - Generalization" version="1" id="O39">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -4943,11 +5018,12 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O7" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O8" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O39">
+    <dia:object type="UML - Class" version="0" id="O40">
       <dia:attribute name="obj_pos">
         <dia:point val="34,48"/>
       </dia:attribute>
@@ -5218,8 +5294,9 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O40">
+    <dia:object type="UML - Association" version="2" id="O41">
       <dia:attribute name="name">
         <dia:string>#&lt; composed of#</dia:string>
       </dia:attribute>
@@ -5286,11 +5363,12 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O39" connection="5"/>
-        <dia:connection handle="1" to="O36" connection="1"/>
+        <dia:connection handle="0" to="O40" connection="5"/>
+        <dia:connection handle="1" to="O37" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O41">
+    <dia:object type="UML - Class" version="0" id="O42">
       <dia:attribute name="obj_pos">
         <dia:point val="78,48"/>
       </dia:attribute>
@@ -5793,8 +5871,9 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O42">
+    <dia:object type="UML - Class" version="0" id="O43">
       <dia:attribute name="obj_pos">
         <dia:point val="103,77"/>
       </dia:attribute>
@@ -5912,8 +5991,9 @@ Leaves are types concrete types which have a parent.#</dia:string>
           </dia:attribute>
         </dia:composite>
       </dia:attribute>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O43">
+    <dia:object type="UML - Association" version="2" id="O44">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -5980,11 +6060,12 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O41" connection="7"/>
-        <dia:connection handle="1" to="O42" connection="1"/>
+        <dia:connection handle="0" to="O42" connection="7"/>
+        <dia:connection handle="1" to="O43" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O44">
+    <dia:object type="UML - Class" version="0" id="O45">
       <dia:attribute name="obj_pos">
         <dia:point val="108,91"/>
       </dia:attribute>
@@ -6172,8 +6253,9 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O45">
+    <dia:object type="UML - Association" version="2" id="O46">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -6240,11 +6322,12 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O42" connection="6"/>
-        <dia:connection handle="1" to="O44" connection="1"/>
+        <dia:connection handle="0" to="O43" connection="6"/>
+        <dia:connection handle="1" to="O45" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O46">
+    <dia:object type="UML - Class" version="0" id="O47">
       <dia:attribute name="obj_pos">
         <dia:point val="-202,-15"/>
       </dia:attribute>
@@ -6446,8 +6529,9 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O47">
+    <dia:object type="UML - Class" version="0" id="O48">
       <dia:attribute name="obj_pos">
         <dia:point val="-191,-1"/>
       </dia:attribute>
@@ -6606,8 +6690,9 @@ This is used to break cycles where required.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O48">
+    <dia:object type="UML - Class" version="0" id="O49">
       <dia:attribute name="obj_pos">
         <dia:point val="-177,-15"/>
       </dia:attribute>
@@ -6924,8 +7009,9 @@ This is used to break cycles where required.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O49">
+    <dia:object type="UML - Class" version="0" id="O50">
       <dia:attribute name="obj_pos">
         <dia:point val="-181,16"/>
       </dia:attribute>
@@ -7034,8 +7120,9 @@ This is used to break cycles where required.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O50">
+    <dia:object type="UML - Generalization" version="1" id="O51">
       <dia:attribute name="obj_pos">
         <dia:point val="-166,3.4"/>
       </dia:attribute>
@@ -7072,11 +7159,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O32" connection="5"/>
-        <dia:connection handle="1" to="O49" connection="8"/>
+        <dia:connection handle="0" to="O33" connection="5"/>
+        <dia:connection handle="1" to="O50" connection="8"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O51">
+    <dia:object type="UML - Generalization" version="1" id="O52">
       <dia:attribute name="obj_pos">
         <dia:point val="-170.205,-5"/>
       </dia:attribute>
@@ -7113,11 +7201,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O48" connection="6"/>
-        <dia:connection handle="1" to="O49" connection="1"/>
+        <dia:connection handle="0" to="O49" connection="6"/>
+        <dia:connection handle="1" to="O50" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O52">
+    <dia:object type="UML - Generalization" version="1" id="O53">
       <dia:attribute name="obj_pos">
         <dia:point val="-182.665,3.4"/>
       </dia:attribute>
@@ -7154,11 +7243,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O47" connection="6"/>
-        <dia:connection handle="1" to="O49" connection="1"/>
+        <dia:connection handle="0" to="O48" connection="6"/>
+        <dia:connection handle="1" to="O50" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O53">
+    <dia:object type="UML - Generalization" version="1" id="O54">
       <dia:attribute name="obj_pos">
         <dia:point val="-194.243,-9"/>
       </dia:attribute>
@@ -7195,11 +7285,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O46" connection="6"/>
-        <dia:connection handle="1" to="O49" connection="8"/>
+        <dia:connection handle="0" to="O47" connection="6"/>
+        <dia:connection handle="1" to="O50" connection="8"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O54">
+    <dia:object type="UML - Class" version="0" id="O55">
       <dia:attribute name="obj_pos">
         <dia:point val="-69,77"/>
       </dia:attribute>
@@ -7355,8 +7446,9 @@ This is used to break cycles where required.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O55">
+    <dia:object type="UML - Class" version="0" id="O56">
       <dia:attribute name="obj_pos">
         <dia:point val="-75,91"/>
       </dia:attribute>
@@ -7465,8 +7557,9 @@ This is used to break cycles where required.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O56">
+    <dia:object type="UML - Generalization" version="1" id="O57">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4503"/>
       </dia:attribute>
@@ -7503,11 +7596,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="12"/>
-        <dia:connection handle="1" to="O54" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="12"/>
+        <dia:connection handle="1" to="O55" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O57">
+    <dia:object type="UML - Generalization" version="1" id="O58">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -7544,11 +7638,12 @@ This is used to break cycles where required.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O55" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O56" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Note" version="0" id="O58">
+    <dia:object type="UML - Note" version="0" id="O59">
       <dia:attribute name="obj_pos">
         <dia:point val="-53,-6"/>
       </dia:attribute>
@@ -7600,8 +7695,9 @@ space.#</dia:string>
           </dia:attribute>
         </dia:composite>
       </dia:attribute>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Message" version="0" id="O59">
+    <dia:object type="UML - Message" version="0" id="O60">
       <dia:attribute name="obj_pos">
         <dia:point val="-47.93,-6"/>
       </dia:attribute>
@@ -7631,11 +7727,12 @@ space.#</dia:string>
         <dia:point val="-52.8938,-7.40005"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O58" connection="1"/>
-        <dia:connection handle="1" to="O34" connection="6"/>
+        <dia:connection handle="0" to="O59" connection="1"/>
+        <dia:connection handle="1" to="O35" connection="6"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O60">
+    <dia:object type="UML - Class" version="0" id="O61">
       <dia:attribute name="obj_pos">
         <dia:point val="-167,-29"/>
       </dia:attribute>
@@ -7768,8 +7865,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O61">
+    <dia:object type="UML - Class" version="0" id="O62">
       <dia:attribute name="obj_pos">
         <dia:point val="-146,-29"/>
       </dia:attribute>
@@ -7948,8 +8046,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O62">
+    <dia:object type="UML - Association" version="2" id="O63">
       <dia:attribute name="name">
         <dia:string>#is configured by &gt;#</dia:string>
       </dia:attribute>
@@ -8016,19 +8115,20 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O60" connection="10"/>
-        <dia:connection handle="1" to="O61" connection="1"/>
+        <dia:connection handle="0" to="O61" connection="10"/>
+        <dia:connection handle="1" to="O62" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O63">
+    <dia:object type="UML - Class" version="0" id="O64">
       <dia:attribute name="obj_pos">
-        <dia:point val="-202,-29"/>
+        <dia:point val="-201,-55"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-202.05,-29.05;-183.74,-22.15"/>
+        <dia:rectangle val="-201.05,-55.05;-182.74,-48.15"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-202,-29"/>
+        <dia:point val="-201,-55"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="18.210000000000001"/>
@@ -8281,7 +8381,7 @@ space.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O64">
+    <dia:object type="UML - Class" version="0" id="O65">
       <dia:attribute name="obj_pos">
         <dia:point val="-117,-15"/>
       </dia:attribute>
@@ -8439,8 +8539,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O65">
+    <dia:object type="UML - Association" version="2" id="O66">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -8507,11 +8608,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O24" connection="10"/>
-        <dia:connection handle="1" to="O64" connection="10"/>
+        <dia:connection handle="0" to="O25" connection="10"/>
+        <dia:connection handle="1" to="O65" connection="10"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O66">
+    <dia:object type="UML - Class" version="0" id="O67">
       <dia:attribute name="obj_pos">
         <dia:point val="-136,-15"/>
       </dia:attribute>
@@ -8644,8 +8746,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O67">
+    <dia:object type="UML - Generalization" version="1" id="O68">
       <dia:attribute name="obj_pos">
         <dia:point val="-128.435,-11.4"/>
       </dia:attribute>
@@ -8682,11 +8785,12 @@ space.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O66" connection="6"/>
-        <dia:connection handle="1" to="O14" connection="1"/>
+        <dia:connection handle="0" to="O67" connection="6"/>
+        <dia:connection handle="1" to="O15" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O68">
+    <dia:object type="UML - Class" version="0" id="O69">
       <dia:attribute name="obj_pos">
         <dia:point val="62,48"/>
       </dia:attribute>
@@ -8911,8 +9015,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O69">
+    <dia:object type="UML - Class" version="0" id="O70">
       <dia:attribute name="obj_pos">
         <dia:point val="-54,77"/>
       </dia:attribute>
@@ -9137,8 +9242,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O70">
+    <dia:object type="UML - Generalization" version="1" id="O71">
       <dia:attribute name="obj_pos">
         <dia:point val="-4.2425,69.4"/>
       </dia:attribute>
@@ -9175,11 +9281,12 @@ space.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="6"/>
-        <dia:connection handle="1" to="O69" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="6"/>
+        <dia:connection handle="1" to="O70" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O71">
+    <dia:object type="UML - Association" version="2" id="O72">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -9246,11 +9353,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O39" connection="2"/>
-        <dia:connection handle="1" to="O68" connection="0"/>
+        <dia:connection handle="0" to="O40" connection="2"/>
+        <dia:connection handle="1" to="O69" connection="0"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O72">
+    <dia:object type="UML - Association" version="2" id="O73">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -9317,11 +9425,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O41" connection="0"/>
-        <dia:connection handle="1" to="O68" connection="2"/>
+        <dia:connection handle="0" to="O42" connection="0"/>
+        <dia:connection handle="1" to="O69" connection="2"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O73">
+    <dia:object type="UML - Class" version="0" id="O74">
       <dia:attribute name="obj_pos">
         <dia:point val="87,91"/>
       </dia:attribute>
@@ -9546,8 +9655,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O74">
+    <dia:object type="UML - Class" version="0" id="O75">
       <dia:attribute name="obj_pos">
         <dia:point val="69,77"/>
       </dia:attribute>
@@ -9726,8 +9836,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O75">
+    <dia:object type="UML - Class" version="0" id="O76">
       <dia:attribute name="obj_pos">
         <dia:point val="69,91"/>
       </dia:attribute>
@@ -9883,8 +9994,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O76">
+    <dia:object type="UML - Association" version="2" id="O77">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -9951,11 +10063,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O74" connection="5"/>
-        <dia:connection handle="1" to="O75" connection="1"/>
+        <dia:connection handle="0" to="O75" connection="5"/>
+        <dia:connection handle="1" to="O76" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O77">
+    <dia:object type="UML - Association" version="2" id="O78">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -10022,11 +10135,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O74" connection="7"/>
-        <dia:connection handle="1" to="O73" connection="1"/>
+        <dia:connection handle="0" to="O75" connection="7"/>
+        <dia:connection handle="1" to="O74" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O78">
+    <dia:object type="UML - Association" version="2" id="O79">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -10093,11 +10207,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O41" connection="5"/>
-        <dia:connection handle="1" to="O74" connection="2"/>
+        <dia:connection handle="0" to="O42" connection="5"/>
+        <dia:connection handle="1" to="O75" connection="2"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O79">
+    <dia:object type="UML - Class" version="0" id="O80">
       <dia:attribute name="obj_pos">
         <dia:point val="6,107"/>
       </dia:attribute>
@@ -10345,8 +10460,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O80">
+    <dia:object type="UML - Association" version="2" id="O81">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -10413,11 +10529,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O22" connection="5"/>
-        <dia:connection handle="1" to="O79" connection="1"/>
+        <dia:connection handle="0" to="O23" connection="5"/>
+        <dia:connection handle="1" to="O80" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O81">
+    <dia:object type="UML - Class" version="0" id="O82">
       <dia:attribute name="obj_pos">
         <dia:point val="-119,32"/>
       </dia:attribute>
@@ -10642,8 +10759,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O82">
+    <dia:object type="UML - Association" version="2" id="O83">
       <dia:attribute name="name">
         <dia:string>#&lt; attribute's object-relational configuration#</dia:string>
       </dia:attribute>
@@ -10710,11 +10828,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O0" connection="5"/>
-        <dia:connection handle="1" to="O81" connection="1"/>
+        <dia:connection handle="0" to="O1" connection="5"/>
+        <dia:connection handle="1" to="O82" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O83">
+    <dia:object type="UML - Class" version="0" id="O84">
       <dia:attribute name="obj_pos">
         <dia:point val="-16,107"/>
       </dia:attribute>
@@ -10847,8 +10966,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O84">
+    <dia:object type="UML - Association" version="2" id="O85">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -10915,11 +11035,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O6" connection="6"/>
-        <dia:connection handle="1" to="O83" connection="1"/>
+        <dia:connection handle="0" to="O7" connection="6"/>
+        <dia:connection handle="1" to="O84" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O85">
+    <dia:object type="UML - Class" version="0" id="O86">
       <dia:attribute name="obj_pos">
         <dia:point val="-59,91"/>
       </dia:attribute>
@@ -11098,8 +11219,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O86">
+    <dia:object type="UML - Association" version="2" id="O87">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11166,11 +11288,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O69" connection="6"/>
-        <dia:connection handle="1" to="O85" connection="14"/>
+        <dia:connection handle="0" to="O70" connection="6"/>
+        <dia:connection handle="1" to="O86" connection="14"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O87">
+    <dia:object type="UML - Association" version="2" id="O88">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11237,11 +11360,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O39" connection="7"/>
-        <dia:connection handle="1" to="O74" connection="0"/>
+        <dia:connection handle="0" to="O40" connection="7"/>
+        <dia:connection handle="1" to="O75" connection="0"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O88">
+    <dia:object type="UML - Class" version="0" id="O89">
       <dia:attribute name="obj_pos">
         <dia:point val="35,77"/>
       </dia:attribute>
@@ -11397,8 +11521,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O89">
+    <dia:object type="UML - Association" version="2" id="O90">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11463,11 +11588,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O36" connection="9"/>
-        <dia:connection handle="1" to="O88" connection="1"/>
+        <dia:connection handle="0" to="O37" connection="9"/>
+        <dia:connection handle="1" to="O89" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O90">
+    <dia:object type="UML - Class" version="0" id="O91">
       <dia:attribute name="obj_pos">
         <dia:point val="47,91"/>
       </dia:attribute>
@@ -11715,8 +11841,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O91">
+    <dia:object type="UML - Class" version="0" id="O92">
       <dia:attribute name="obj_pos">
         <dia:point val="58,107"/>
       </dia:attribute>
@@ -11895,8 +12022,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O92">
+    <dia:object type="UML - Association" version="2" id="O93">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11963,11 +12091,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O90" connection="6"/>
-        <dia:connection handle="1" to="O91" connection="1"/>
+        <dia:connection handle="0" to="O91" connection="6"/>
+        <dia:connection handle="1" to="O92" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O93">
+    <dia:object type="UML - Association" version="2" id="O94">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -12034,11 +12163,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O88" connection="6"/>
-        <dia:connection handle="1" to="O90" connection="1"/>
+        <dia:connection handle="0" to="O89" connection="6"/>
+        <dia:connection handle="1" to="O91" connection="1"/>
       </dia:connections>
+      <dia:childnode parent="O0"/>
     </dia:object>
-    <dia:object type="UML - LargePackage" version="0" id="O94">
+    <dia:object type="UML - LargePackage" version="0" id="O95">
       <dia:attribute name="obj_pos">
         <dia:point val="-184,117"/>
       </dia:attribute>
@@ -12076,7 +12206,7 @@ space.#</dia:string>
         <dia:string>#transforms#</dia:string>
       </dia:attribute>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O95">
+    <dia:object type="UML - Class" version="0" id="O96">
       <dia:attribute name="obj_pos">
         <dia:point val="-145,135.417"/>
       </dia:attribute>
@@ -12324,9 +12454,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O96">
+    <dia:object type="UML - Class" version="0" id="O97">
       <dia:attribute name="obj_pos">
         <dia:point val="-72,135.417"/>
       </dia:attribute>
@@ -12640,9 +12770,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O97">
+    <dia:object type="UML - Class" version="0" id="O98">
       <dia:attribute name="obj_pos">
         <dia:point val="-113,135.417"/>
       </dia:attribute>
@@ -12878,9 +13008,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O98">
+    <dia:object type="UML - Association" version="2" id="O99">
       <dia:attribute name="name">
         <dia:string>#keeps track of &gt;#</dia:string>
       </dia:attribute>
@@ -12947,11 +13077,11 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O97" connection="2"/>
-        <dia:connection handle="1" to="O96" connection="0"/>
+        <dia:connection handle="0" to="O98" connection="2"/>
+        <dia:connection handle="1" to="O97" connection="0"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O99">
+    <dia:object type="UML - Class" version="0" id="O100">
       <dia:attribute name="obj_pos">
         <dia:point val="-94,148.417"/>
       </dia:attribute>
@@ -13126,9 +13256,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O100">
+    <dia:object type="UML - Association" version="2" id="O101">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -13195,12 +13325,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O99" connection="0"/>
-        <dia:connection handle="1" to="O97" connection="6"/>
+        <dia:connection handle="0" to="O100" connection="0"/>
+        <dia:connection handle="1" to="O98" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O101">
+    <dia:object type="UML - Association" version="2" id="O102">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -13267,12 +13397,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O99" connection="2"/>
-        <dia:connection handle="1" to="O96" connection="6"/>
+        <dia:connection handle="0" to="O100" connection="2"/>
+        <dia:connection handle="1" to="O97" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O102">
+    <dia:object type="UML - Class" version="0" id="O103">
       <dia:attribute name="obj_pos">
         <dia:point val="-148,168"/>
       </dia:attribute>
@@ -13430,9 +13560,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O103">
+    <dia:object type="UML - Association" version="2" id="O104">
       <dia:attribute name="name">
         <dia:string>#obtains exogenous models using &gt;#</dia:string>
       </dia:attribute>
@@ -13499,12 +13629,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O102" connection="0"/>
-        <dia:connection handle="1" to="O99" connection="5"/>
+        <dia:connection handle="0" to="O103" connection="0"/>
+        <dia:connection handle="1" to="O100" connection="5"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O104">
+    <dia:object type="UML - Class" version="0" id="O105">
       <dia:attribute name="obj_pos">
         <dia:point val="-88,168"/>
       </dia:attribute>
@@ -13761,9 +13891,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O105">
+    <dia:object type="UML - Association" version="2" id="O106">
       <dia:attribute name="name">
         <dia:string>#&lt; pre-processes the references model using#</dia:string>
       </dia:attribute>
@@ -13830,12 +13960,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O107" connection="0"/>
-        <dia:connection handle="1" to="O104" connection="2"/>
+        <dia:connection handle="0" to="O108" connection="0"/>
+        <dia:connection handle="1" to="O105" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O106">
+    <dia:object type="UML - Class" version="0" id="O107">
       <dia:attribute name="obj_pos">
         <dia:point val="-88,196"/>
       </dia:attribute>
@@ -13993,9 +14123,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O107">
+    <dia:object type="UML - Class" version="0" id="O108">
       <dia:attribute name="obj_pos">
         <dia:point val="-29,168"/>
       </dia:attribute>
@@ -14170,9 +14300,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O108">
+    <dia:object type="UML - Association" version="2" id="O109">
       <dia:attribute name="name">
         <dia:string>#&lt; obtains exogenous models using#</dia:string>
       </dia:attribute>
@@ -14239,11 +14369,11 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O107" connection="2"/>
-        <dia:connection handle="1" to="O99" connection="7"/>
+        <dia:connection handle="0" to="O108" connection="2"/>
+        <dia:connection handle="1" to="O100" connection="7"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O109">
+    <dia:object type="UML - Association" version="2" id="O110">
       <dia:attribute name="name">
         <dia:string>#pre-processes the target model using &gt;#</dia:string>
       </dia:attribute>
@@ -14310,12 +14440,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O102" connection="2"/>
-        <dia:connection handle="1" to="O104" connection="0"/>
+        <dia:connection handle="0" to="O103" connection="2"/>
+        <dia:connection handle="1" to="O105" connection="0"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O110">
+    <dia:object type="UML - Class" version="0" id="O111">
       <dia:attribute name="obj_pos">
         <dia:point val="-95,209"/>
       </dia:attribute>
@@ -14507,9 +14637,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O111">
+    <dia:object type="UML - Association" version="2" id="O112">
       <dia:attribute name="name">
         <dia:string>#&lt; generates the initial target using#</dia:string>
       </dia:attribute>
@@ -14576,12 +14706,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O106" connection="0"/>
-        <dia:connection handle="1" to="O102" connection="6"/>
+        <dia:connection handle="0" to="O107" connection="0"/>
+        <dia:connection handle="1" to="O103" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O112">
+    <dia:object type="UML - Association" version="2" id="O113">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -14648,12 +14778,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O106" connection="6"/>
-        <dia:connection handle="1" to="O110" connection="2"/>
+        <dia:connection handle="0" to="O107" connection="6"/>
+        <dia:connection handle="1" to="O111" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O113">
+    <dia:object type="UML - Class" version="0" id="O114">
       <dia:attribute name="obj_pos">
         <dia:point val="-150,209.417"/>
       </dia:attribute>
@@ -14828,9 +14958,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O114">
+    <dia:object type="UML - Class" version="0" id="O115">
       <dia:attribute name="obj_pos">
         <dia:point val="-62,209"/>
       </dia:attribute>
@@ -14988,9 +15118,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O115">
+    <dia:object type="UML - Association" version="2" id="O116">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -15057,12 +15187,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O110" connection="0"/>
-        <dia:connection handle="1" to="O113" connection="2"/>
+        <dia:connection handle="0" to="O111" connection="0"/>
+        <dia:connection handle="1" to="O114" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O116">
+    <dia:object type="UML - Association" version="2" id="O117">
       <dia:attribute name="name">
         <dia:string>#&lt; merges models for#</dia:string>
       </dia:attribute>
@@ -15129,12 +15259,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O110" connection="7"/>
-        <dia:connection handle="1" to="O114" connection="6"/>
+        <dia:connection handle="0" to="O111" connection="7"/>
+        <dia:connection handle="1" to="O115" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O117">
+    <dia:object type="UML - Class" version="0" id="O118">
       <dia:attribute name="obj_pos">
         <dia:point val="-119,168"/>
       </dia:attribute>
@@ -15309,9 +15439,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O118">
+    <dia:object type="UML - Class" version="0" id="O119">
       <dia:attribute name="obj_pos">
         <dia:point val="-119,173.417"/>
       </dia:attribute>
@@ -15469,9 +15599,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O119">
+    <dia:object type="UML - Class" version="0" id="O120">
       <dia:attribute name="obj_pos">
         <dia:point val="-54,168"/>
       </dia:attribute>
@@ -15646,9 +15776,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O120">
+    <dia:object type="UML - Class" version="0" id="O121">
       <dia:attribute name="obj_pos">
         <dia:point val="-92,157.417"/>
       </dia:attribute>
@@ -15823,9 +15953,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O121">
+    <dia:object type="UML - Association" version="2" id="O122">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -15892,12 +16022,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="0"/>
-        <dia:connection handle="1" to="O117" connection="4"/>
+        <dia:connection handle="0" to="O105" connection="0"/>
+        <dia:connection handle="1" to="O118" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O122">
+    <dia:object type="UML - Association" version="2" id="O123">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -15964,12 +16094,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="3"/>
-        <dia:connection handle="1" to="O118" connection="4"/>
+        <dia:connection handle="0" to="O105" connection="3"/>
+        <dia:connection handle="1" to="O119" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O123">
+    <dia:object type="UML - Association" version="2" id="O124">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -16036,12 +16166,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="1"/>
-        <dia:connection handle="1" to="O120" connection="6"/>
+        <dia:connection handle="0" to="O105" connection="1"/>
+        <dia:connection handle="1" to="O121" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O124">
+    <dia:object type="UML - Association" version="2" id="O125">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -16108,12 +16238,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="2"/>
-        <dia:connection handle="1" to="O119" connection="3"/>
+        <dia:connection handle="0" to="O105" connection="2"/>
+        <dia:connection handle="1" to="O120" connection="3"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O125">
+    <dia:object type="UML - Class" version="0" id="O126">
       <dia:attribute name="obj_pos">
         <dia:point val="-54,173.417"/>
       </dia:attribute>
@@ -16288,9 +16418,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O126">
+    <dia:object type="UML - Association" version="2" id="O127">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -16357,12 +16487,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="4"/>
-        <dia:connection handle="1" to="O125" connection="3"/>
+        <dia:connection handle="0" to="O105" connection="4"/>
+        <dia:connection handle="1" to="O126" connection="3"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O127">
+    <dia:object type="UML - Class" version="0" id="O128">
       <dia:attribute name="obj_pos">
         <dia:point val="-103,180"/>
       </dia:attribute>
@@ -16537,9 +16667,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O128">
+    <dia:object type="UML - Association" version="2" id="O129">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -16606,12 +16736,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="5"/>
-        <dia:connection handle="1" to="O127" connection="1"/>
+        <dia:connection handle="0" to="O105" connection="5"/>
+        <dia:connection handle="1" to="O128" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O129">
+    <dia:object type="UML - Class" version="0" id="O130">
       <dia:attribute name="obj_pos">
         <dia:point val="-77,180"/>
       </dia:attribute>
@@ -16786,9 +16916,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O130">
+    <dia:object type="UML - Association" version="2" id="O131">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -16855,12 +16985,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O104" connection="7"/>
-        <dia:connection handle="1" to="O129" connection="1"/>
+        <dia:connection handle="0" to="O105" connection="7"/>
+        <dia:connection handle="1" to="O130" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Note" version="0" id="O131">
+    <dia:object type="UML - Note" version="0" id="O132">
       <dia:attribute name="obj_pos">
         <dia:point val="-181,120"/>
       </dia:attribute>
@@ -16912,9 +17042,9 @@ space.#</dia:string>
           </dia:attribute>
         </dia:composite>
       </dia:attribute>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O132">
+    <dia:object type="UML - Association" version="2" id="O133">
       <dia:attribute name="name">
         <dia:string>#obtains all references using &gt;#</dia:string>
       </dia:attribute>
@@ -16981,12 +17111,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O106" connection="2"/>
-        <dia:connection handle="1" to="O107" connection="6"/>
+        <dia:connection handle="0" to="O107" connection="2"/>
+        <dia:connection handle="1" to="O108" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O133">
+    <dia:object type="UML - Class" version="0" id="O134">
       <dia:attribute name="obj_pos">
         <dia:point val="-169,196"/>
       </dia:attribute>
@@ -17161,9 +17291,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O134">
+    <dia:object type="UML - Class" version="0" id="O135">
       <dia:attribute name="obj_pos">
         <dia:point val="-144,196"/>
       </dia:attribute>
@@ -17338,9 +17468,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O135">
+    <dia:object type="UML - Class" version="0" id="O136">
       <dia:attribute name="obj_pos">
         <dia:point val="-121,209"/>
       </dia:attribute>
@@ -17515,9 +17645,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O136">
+    <dia:object type="UML - Class" version="0" id="O137">
       <dia:attribute name="obj_pos">
         <dia:point val="-179,214"/>
       </dia:attribute>
@@ -17692,9 +17822,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O137">
+    <dia:object type="UML - Class" version="0" id="O138">
       <dia:attribute name="obj_pos">
         <dia:point val="-121,219"/>
       </dia:attribute>
@@ -17869,9 +17999,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O138">
+    <dia:object type="UML - Class" version="0" id="O139">
       <dia:attribute name="obj_pos">
         <dia:point val="-179,209"/>
       </dia:attribute>
@@ -18046,9 +18176,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O139">
+    <dia:object type="UML - Class" version="0" id="O140">
       <dia:attribute name="obj_pos">
         <dia:point val="-121,214"/>
       </dia:attribute>
@@ -18223,9 +18353,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O140">
+    <dia:object type="UML - Class" version="0" id="O141">
       <dia:attribute name="obj_pos">
         <dia:point val="-172,231"/>
       </dia:attribute>
@@ -18400,9 +18530,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O141">
+    <dia:object type="UML - Class" version="0" id="O142">
       <dia:attribute name="obj_pos">
         <dia:point val="-124,231"/>
       </dia:attribute>
@@ -18577,9 +18707,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O142">
+    <dia:object type="UML - Class" version="0" id="O143">
       <dia:attribute name="obj_pos">
         <dia:point val="-148,231"/>
       </dia:attribute>
@@ -18754,9 +18884,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O143">
+    <dia:object type="UML - Class" version="0" id="O144">
       <dia:attribute name="obj_pos">
         <dia:point val="-166,244"/>
       </dia:attribute>
@@ -18931,9 +19061,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O144">
+    <dia:object type="UML - Class" version="0" id="O145">
       <dia:attribute name="obj_pos">
         <dia:point val="-135,244"/>
       </dia:attribute>
@@ -19151,9 +19281,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O145">
+    <dia:object type="UML - Association" version="2" id="O146">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19220,12 +19350,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="1"/>
-        <dia:connection handle="1" to="O134" connection="6"/>
+        <dia:connection handle="0" to="O114" connection="1"/>
+        <dia:connection handle="1" to="O135" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O146">
+    <dia:object type="UML - Association" version="2" id="O147">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19292,12 +19422,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="0"/>
-        <dia:connection handle="1" to="O133" connection="6"/>
+        <dia:connection handle="0" to="O114" connection="0"/>
+        <dia:connection handle="1" to="O134" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O147">
+    <dia:object type="UML - Association" version="2" id="O148">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19364,12 +19494,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="5"/>
-        <dia:connection handle="1" to="O140" connection="1"/>
+        <dia:connection handle="0" to="O114" connection="5"/>
+        <dia:connection handle="1" to="O141" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O148">
+    <dia:object type="UML - Association" version="2" id="O149">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19436,12 +19566,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="6"/>
-        <dia:connection handle="1" to="O142" connection="1"/>
+        <dia:connection handle="0" to="O114" connection="6"/>
+        <dia:connection handle="1" to="O143" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O149">
+    <dia:object type="UML - Association" version="2" id="O150">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19508,12 +19638,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="7"/>
-        <dia:connection handle="1" to="O141" connection="1"/>
+        <dia:connection handle="0" to="O114" connection="7"/>
+        <dia:connection handle="1" to="O142" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O150">
+    <dia:object type="UML - Association" version="2" id="O151">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19580,11 +19710,11 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="4"/>
-        <dia:connection handle="1" to="O139" connection="3"/>
+        <dia:connection handle="0" to="O114" connection="4"/>
+        <dia:connection handle="1" to="O140" connection="3"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O151">
+    <dia:object type="UML - Association" version="2" id="O152">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19651,12 +19781,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="2"/>
-        <dia:connection handle="1" to="O135" connection="3"/>
+        <dia:connection handle="0" to="O114" connection="2"/>
+        <dia:connection handle="1" to="O136" connection="3"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O152">
+    <dia:object type="UML - Association" version="2" id="O153">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19723,12 +19853,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O142" connection="5"/>
-        <dia:connection handle="1" to="O143" connection="1"/>
+        <dia:connection handle="0" to="O143" connection="5"/>
+        <dia:connection handle="1" to="O144" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O153">
+    <dia:object type="UML - Association" version="2" id="O154">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -19795,12 +19925,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O142" connection="7"/>
-        <dia:connection handle="1" to="O144" connection="1"/>
+        <dia:connection handle="0" to="O143" connection="7"/>
+        <dia:connection handle="1" to="O145" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O154">
+    <dia:object type="UML - Class" version="0" id="O155">
       <dia:attribute name="obj_pos">
         <dia:point val="-17,196"/>
       </dia:attribute>
@@ -19958,9 +20088,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O155">
+    <dia:object type="UML - Class" version="0" id="O156">
       <dia:attribute name="obj_pos">
         <dia:point val="-23,210"/>
       </dia:attribute>
@@ -20116,9 +20246,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O156">
+    <dia:object type="UML - Class" version="0" id="O157">
       <dia:attribute name="obj_pos">
         <dia:point val="1,185"/>
       </dia:attribute>
@@ -20276,9 +20406,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O157">
+    <dia:object type="UML - Class" version="0" id="O158">
       <dia:attribute name="obj_pos">
         <dia:point val="-58,196.417"/>
       </dia:attribute>
@@ -20436,9 +20566,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O158">
+    <dia:object type="UML - Association" version="2" id="O159">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -20505,12 +20635,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O157" connection="3"/>
-        <dia:connection handle="1" to="O106" connection="9"/>
+        <dia:connection handle="0" to="O158" connection="3"/>
+        <dia:connection handle="1" to="O107" connection="9"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O159">
+    <dia:object type="UML - Association" version="2" id="O160">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -20577,12 +20707,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O157" connection="4"/>
-        <dia:connection handle="1" to="O154" connection="8"/>
+        <dia:connection handle="0" to="O158" connection="4"/>
+        <dia:connection handle="1" to="O155" connection="8"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O160">
+    <dia:object type="UML - Class" version="0" id="O161">
       <dia:attribute name="obj_pos">
         <dia:point val="11,196"/>
       </dia:attribute>
@@ -20848,9 +20978,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O161">
+    <dia:object type="UML - Association" version="2" id="O162">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -20917,11 +21047,11 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O160" connection="1"/>
-        <dia:connection handle="1" to="O156" connection="7"/>
+        <dia:connection handle="0" to="O161" connection="1"/>
+        <dia:connection handle="1" to="O157" connection="7"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O162">
+    <dia:object type="UML - Association" version="2" id="O163">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -20988,12 +21118,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O154" connection="1"/>
-        <dia:connection handle="1" to="O156" connection="5"/>
+        <dia:connection handle="0" to="O155" connection="1"/>
+        <dia:connection handle="1" to="O157" connection="5"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O163">
+    <dia:object type="UML - Association" version="2" id="O164">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21060,12 +21190,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O154" connection="10"/>
-        <dia:connection handle="1" to="O160" connection="3"/>
+        <dia:connection handle="0" to="O155" connection="10"/>
+        <dia:connection handle="1" to="O161" connection="3"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O164">
+    <dia:object type="UML - Association" version="2" id="O165">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21132,12 +21262,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O154" connection="6"/>
-        <dia:connection handle="1" to="O155" connection="1"/>
+        <dia:connection handle="0" to="O155" connection="6"/>
+        <dia:connection handle="1" to="O156" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O165">
+    <dia:object type="UML - Association" version="2" id="O166">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21204,12 +21334,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O144" connection="14"/>
-        <dia:connection handle="1" to="O143" connection="4"/>
+        <dia:connection handle="0" to="O145" connection="14"/>
+        <dia:connection handle="1" to="O144" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O166">
+    <dia:object type="UML - Association" version="2" id="O167">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21276,12 +21406,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O97" connection="4"/>
-        <dia:connection handle="1" to="O96" connection="10"/>
+        <dia:connection handle="0" to="O98" connection="4"/>
+        <dia:connection handle="1" to="O97" connection="10"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O167">
+    <dia:object type="UML - Class" version="0" id="O168">
       <dia:attribute name="obj_pos">
         <dia:point val="-112,196"/>
       </dia:attribute>
@@ -21439,9 +21569,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O168">
+    <dia:object type="UML - Class" version="0" id="O169">
       <dia:attribute name="obj_pos">
         <dia:point val="-170,135.417"/>
       </dia:attribute>
@@ -21599,9 +21729,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O169">
+    <dia:object type="UML - Association" version="2" id="O170">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21668,12 +21798,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O168" connection="1"/>
-        <dia:connection handle="1" to="O95" connection="1"/>
+        <dia:connection handle="0" to="O169" connection="1"/>
+        <dia:connection handle="1" to="O96" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O170">
+    <dia:object type="UML - Class" version="0" id="O171">
       <dia:attribute name="obj_pos">
         <dia:point val="-114,125.417"/>
       </dia:attribute>
@@ -21782,9 +21912,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O171">
+    <dia:object type="UML - Association" version="2" id="O172">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -21851,12 +21981,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O97" connection="1"/>
-        <dia:connection handle="1" to="O170" connection="6"/>
+        <dia:connection handle="0" to="O98" connection="1"/>
+        <dia:connection handle="1" to="O171" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O172">
+    <dia:object type="UML - Class" version="0" id="O173">
       <dia:attribute name="obj_pos">
         <dia:point val="-45,122.417"/>
       </dia:attribute>
@@ -22035,9 +22165,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O173">
+    <dia:object type="UML - Association" version="2" id="O174">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -22104,12 +22234,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O96" connection="2"/>
-        <dia:connection handle="1" to="O172" connection="6"/>
+        <dia:connection handle="0" to="O97" connection="2"/>
+        <dia:connection handle="1" to="O173" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O174">
+    <dia:object type="UML - Class" version="0" id="O175">
       <dia:attribute name="obj_pos">
         <dia:point val="-129,125.417"/>
       </dia:attribute>
@@ -22218,9 +22348,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O175">
+    <dia:object type="UML - Association" version="2" id="O176">
       <dia:attribute name="name">
         <dia:string>#&lt; obtains final models using#</dia:string>
       </dia:attribute>
@@ -22261,7 +22391,7 @@ space.#</dia:string>
         <dia:point val="-80.89,209"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-102.752,199.55;-80.14,209.8"/>
+        <dia:rectangle val="-102.753,199.55;-80.14,209.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -22287,12 +22417,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O110" connection="1"/>
-        <dia:connection handle="1" to="O167" connection="6"/>
+        <dia:connection handle="0" to="O111" connection="1"/>
+        <dia:connection handle="1" to="O168" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O176">
+    <dia:object type="UML - Class" version="0" id="O177">
       <dia:attribute name="obj_pos">
         <dia:point val="-179,219"/>
       </dia:attribute>
@@ -22467,9 +22597,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O177">
+    <dia:object type="UML - Association" version="2" id="O178">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -22510,7 +22640,7 @@ space.#</dia:string>
         <dia:point val="-129.095,212.517"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-129.845,211.767;-120.95,221.7"/>
+        <dia:rectangle val="-129.845,211.767;-120.95,220.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -22536,12 +22666,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="9"/>
-        <dia:connection handle="1" to="O137" connection="3"/>
+        <dia:connection handle="0" to="O114" connection="9"/>
+        <dia:connection handle="1" to="O138" connection="3"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - LargePackage" version="0" id="O178">
+    <dia:object type="UML - LargePackage" version="0" id="O179">
       <dia:attribute name="obj_pos">
         <dia:point val="-184,267"/>
       </dia:attribute>
@@ -22579,18 +22709,18 @@ space.#</dia:string>
         <dia:string>#helpers#</dia:string>
       </dia:attribute>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O179">
+    <dia:object type="UML - Class" version="0" id="O180">
       <dia:attribute name="obj_pos">
         <dia:point val="-181,270"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-181.05,269.95;-158.505,273.65"/>
+        <dia:rectangle val="-181.05,269.95;-153.885,273.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="-181,270"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="22.445"/>
+        <dia:real val="27.064999999999998"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.6000000000000001"/>
@@ -22688,7 +22818,7 @@ space.#</dia:string>
             <dia:string>#names#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;std::string, name&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;std::string, meta_model::name&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -22711,7 +22841,7 @@ space.#</dia:string>
             <dia:string>#name_trees#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;std::string, name_tree&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;std::string, meta_model::name_tree&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -22735,9 +22865,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O180">
+    <dia:object type="UML - Class" version="0" id="O181">
       <dia:attribute name="obj_pos">
         <dia:point val="-168,282"/>
       </dia:attribute>
@@ -22895,9 +23025,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O181">
+    <dia:object type="UML - Association" version="2" id="O182">
       <dia:attribute name="name">
         <dia:string>#decomposes a model into &gt;#</dia:string>
       </dia:attribute>
@@ -22938,7 +23068,7 @@ space.#</dia:string>
         <dia:point val="-155.815,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-169.828,273.55;-155.065,283.6"/>
+        <dia:rectangle val="-167.518,273.55;-155.065,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -22946,8 +23076,8 @@ space.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-155.815,282"/>
         <dia:point val="-155.815,278"/>
-        <dia:point val="-169.778,278"/>
-        <dia:point val="-169.778,273.6"/>
+        <dia:point val="-167.468,278"/>
+        <dia:point val="-167.468,273.6"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -22964,12 +23094,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O180" connection="1"/>
-        <dia:connection handle="1" to="O179" connection="6"/>
+        <dia:connection handle="0" to="O181" connection="1"/>
+        <dia:connection handle="1" to="O180" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O182">
+    <dia:object type="UML - Class" version="0" id="O183">
       <dia:attribute name="obj_pos">
         <dia:point val="-180,295"/>
       </dia:attribute>
@@ -23127,9 +23257,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O183">
+    <dia:object type="UML - Association" version="2" id="O184">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -23170,7 +23300,7 @@ space.#</dia:string>
         <dia:point val="-172.243,295"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-172.993,285.55;-155.615,296.6"/>
+        <dia:rectangle val="-172.993,285.55;-155.615,295.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23196,12 +23326,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O182" connection="1"/>
-        <dia:connection handle="1" to="O180" connection="6"/>
+        <dia:connection handle="0" to="O183" connection="1"/>
+        <dia:connection handle="1" to="O181" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O184">
+    <dia:object type="UML - Class" version="0" id="O185">
       <dia:attribute name="obj_pos">
         <dia:point val="-160,307"/>
       </dia:attribute>
@@ -23310,9 +23440,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O185">
+    <dia:object type="UML - Association" version="2" id="O186">
       <dia:attribute name="name">
         <dia:string>#on error throws &gt;#</dia:string>
       </dia:attribute>
@@ -23353,7 +23483,7 @@ space.#</dia:string>
         <dia:point val="-172.243,298.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-172.993,297.85;-159.8,308.6"/>
+        <dia:rectangle val="-172.993,297.85;-159.8,307.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23379,12 +23509,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O182" connection="6"/>
-        <dia:connection handle="1" to="O184" connection="0"/>
+        <dia:connection handle="0" to="O183" connection="6"/>
+        <dia:connection handle="1" to="O185" connection="0"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O186">
+    <dia:object type="UML - Class" version="0" id="O187">
       <dia:attribute name="obj_pos">
         <dia:point val="-151,295"/>
       </dia:attribute>
@@ -23542,9 +23672,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O187">
+    <dia:object type="UML - Association" version="2" id="O188">
       <dia:attribute name="name">
         <dia:string>#&lt; on error throws#</dia:string>
       </dia:attribute>
@@ -23585,7 +23715,7 @@ space.#</dia:string>
         <dia:point val="-143.243,298.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-152.37,297.85;-142.493,308.6"/>
+        <dia:rectangle val="-152.37,297.85;-142.493,307.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23611,12 +23741,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O186" connection="6"/>
-        <dia:connection handle="1" to="O184" connection="2"/>
+        <dia:connection handle="0" to="O187" connection="6"/>
+        <dia:connection handle="1" to="O185" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O188">
+    <dia:object type="UML - Class" version="0" id="O189">
       <dia:attribute name="obj_pos">
         <dia:point val="-128,295"/>
       </dia:attribute>
@@ -23841,9 +23971,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O189">
+    <dia:object type="UML - Class" version="0" id="O190">
       <dia:attribute name="obj_pos">
         <dia:point val="-145,270"/>
       </dia:attribute>
@@ -23952,9 +24082,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O190">
+    <dia:object type="UML - Class" version="0" id="O191">
       <dia:attribute name="obj_pos">
         <dia:point val="-139,282"/>
       </dia:attribute>
@@ -24112,9 +24242,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O191">
+    <dia:object type="UML - Association" version="2" id="O192">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -24155,7 +24285,7 @@ space.#</dia:string>
         <dia:point val="-150,212.517"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-158.145,211.767;-149.25,221.7"/>
+        <dia:rectangle val="-158.145,211.767;-149.25,220.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24181,12 +24311,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="8"/>
-        <dia:connection handle="1" to="O176" connection="4"/>
+        <dia:connection handle="0" to="O114" connection="8"/>
+        <dia:connection handle="1" to="O177" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O192">
+    <dia:object type="UML - Association" version="2" id="O193">
       <dia:attribute name="name">
         <dia:string>#&lt; on error throws#</dia:string>
       </dia:attribute>
@@ -24227,7 +24357,7 @@ space.#</dia:string>
         <dia:point val="-130.088,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-141.515,273;-129.338,283.6"/>
+        <dia:rectangle val="-141.515,273;-129.338,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24253,12 +24383,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O190" connection="1"/>
-        <dia:connection handle="1" to="O189" connection="8"/>
+        <dia:connection handle="0" to="O191" connection="1"/>
+        <dia:connection handle="1" to="O190" connection="8"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O193">
+    <dia:object type="UML - Association" version="2" id="O194">
       <dia:attribute name="name">
         <dia:string>#produces &gt;#</dia:string>
       </dia:attribute>
@@ -24299,7 +24429,7 @@ space.#</dia:string>
         <dia:point val="-130.088,285.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-130.838,284.85;-114.845,296.6"/>
+        <dia:rectangle val="-130.838,284.85;-114.845,295.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24325,12 +24455,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O190" connection="6"/>
-        <dia:connection handle="1" to="O188" connection="1"/>
+        <dia:connection handle="0" to="O191" connection="6"/>
+        <dia:connection handle="1" to="O189" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O194">
+    <dia:object type="UML - Class" version="0" id="O195">
       <dia:attribute name="obj_pos">
         <dia:point val="-111,282"/>
       </dia:attribute>
@@ -24604,9 +24734,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O195">
+    <dia:object type="UML - Class" version="0" id="O196">
       <dia:attribute name="obj_pos">
         <dia:point val="-121,270"/>
       </dia:attribute>
@@ -24715,9 +24845,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O196">
+    <dia:object type="UML - Association" version="2" id="O197">
       <dia:attribute name="name">
         <dia:string>#&lt; on error throws#</dia:string>
       </dia:attribute>
@@ -24758,7 +24888,7 @@ space.#</dia:string>
         <dia:point val="-99.7775,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-117.169,272.95;-99.0275,283.6"/>
+        <dia:rectangle val="-117.169,272.95;-99.0275,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24784,12 +24914,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O194" connection="1"/>
-        <dia:connection handle="1" to="O195" connection="6"/>
+        <dia:connection handle="0" to="O195" connection="1"/>
+        <dia:connection handle="1" to="O196" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O197">
+    <dia:object type="UML - Association" version="2" id="O198">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -24830,7 +24960,7 @@ space.#</dia:string>
         <dia:point val="-150,209.417"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-158.145,208.667;-149.25,211.7"/>
+        <dia:rectangle val="-158.145,208.667;-149.25,210.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24856,12 +24986,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="0"/>
-        <dia:connection handle="1" to="O138" connection="4"/>
+        <dia:connection handle="0" to="O114" connection="0"/>
+        <dia:connection handle="1" to="O139" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O198">
+    <dia:object type="UML - Association" version="2" id="O199">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -24902,7 +25032,7 @@ space.#</dia:string>
         <dia:point val="-150,210.517"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-158.145,209.767;-149.25,216.7"/>
+        <dia:rectangle val="-158.145,209.767;-149.25,215.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -24928,12 +25058,12 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O113" connection="3"/>
-        <dia:connection handle="1" to="O136" connection="4"/>
+        <dia:connection handle="0" to="O114" connection="3"/>
+        <dia:connection handle="1" to="O137" connection="4"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O199">
+    <dia:object type="UML - Class" version="0" id="O200">
       <dia:attribute name="obj_pos">
         <dia:point val="-83,282"/>
       </dia:attribute>
@@ -25108,9 +25238,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O200">
+    <dia:object type="UML - Class" version="0" id="O201">
       <dia:attribute name="obj_pos">
         <dia:point val="-42,282"/>
       </dia:attribute>
@@ -25219,9 +25349,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O201">
+    <dia:object type="UML - Class" version="0" id="O202">
       <dia:attribute name="obj_pos">
         <dia:point val="-29,282"/>
       </dia:attribute>
@@ -25461,9 +25591,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O202">
+    <dia:object type="UML - Association" version="2" id="O203">
       <dia:attribute name="name">
         <dia:string>#&lt; throws on error#</dia:string>
       </dia:attribute>
@@ -25504,7 +25634,7 @@ space.#</dia:string>
         <dia:point val="-29,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-38.4938,277.25;-28.25,283.6"/>
+        <dia:rectangle val="-38.4938,277.25;-28.25,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -25530,23 +25660,23 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O201" connection="0"/>
-        <dia:connection handle="1" to="O200" connection="8"/>
+        <dia:connection handle="0" to="O202" connection="0"/>
+        <dia:connection handle="1" to="O201" connection="8"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O203">
+    <dia:object type="UML - Class" version="0" id="O204">
       <dia:attribute name="obj_pos">
-        <dia:point val="-24,269"/>
+        <dia:point val="-26,269"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-24.05,268.95;-3.43,273.45"/>
+        <dia:rectangle val="-26.05,268.95;-0.81,273.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-24,269"/>
+        <dia:point val="-26,269"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="20.52"/>
+        <dia:real val="25.140000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="4.4000000000000004"/>
@@ -25644,7 +25774,7 @@ space.#</dia:string>
             <dia:string>#translations#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, name&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, meta_model::name&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -25690,7 +25820,7 @@ space.#</dia:string>
             <dia:string>#injections#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, name&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, meta_model::name&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -25714,9 +25844,9 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O204">
+    <dia:object type="UML - Association" version="2" id="O205">
       <dia:attribute name="name">
         <dia:string>#&lt; uses internally#</dia:string>
       </dia:attribute>
@@ -25757,7 +25887,7 @@ space.#</dia:string>
         <dia:point val="-4.63,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-13.79,273.4;-3.88,283.6"/>
+        <dia:rectangle val="-13.48,273.4;-3.88,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -25765,8 +25895,8 @@ space.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-4.63,282"/>
         <dia:point val="-4.63,278"/>
-        <dia:point val="-13.74,278"/>
-        <dia:point val="-13.74,273.45"/>
+        <dia:point val="-13.43,278"/>
+        <dia:point val="-13.43,273.45"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -25783,23 +25913,23 @@ space.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O201" connection="2"/>
-        <dia:connection handle="1" to="O203" connection="14"/>
+        <dia:connection handle="0" to="O202" connection="2"/>
+        <dia:connection handle="1" to="O204" connection="14"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O205">
+    <dia:object type="UML - Class" version="0" id="O206">
       <dia:attribute name="obj_pos">
-        <dia:point val="2,269"/>
+        <dia:point val="5,269"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="1.95,268.95;38.74,275.05"/>
+        <dia:rectangle val="4.95,268.95;50.98,275.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="2,269"/>
+        <dia:point val="5,269"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="36.689999999999998"/>
+        <dia:real val="45.93"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="6"/>
@@ -25921,7 +26051,7 @@ another.#</dia:string>
             <dia:string>#by_language_agnostic_id#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;languages, std::unordered_map&lt;std::string, name&gt;&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;meta_model::languages, std::unordered_map&lt;std::string, meta_model::name&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -25944,7 +26074,7 @@ another.#</dia:string>
             <dia:string>#by_upsilon_id#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;languages, std::unordered_map&lt;std::string, name&gt;&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;meta_model::languages, std::unordered_map&lt;std::string, meta_model::name&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -25990,7 +26120,7 @@ another.#</dia:string>
             <dia:string>#erasures_by_language#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;languages, std::unordered_set&lt;std::string&gt;&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;meta_model::languages, std::unordered_set&lt;std::string&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -26014,9 +26144,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O206">
+    <dia:object type="UML - Class" version="0" id="O207">
       <dia:attribute name="obj_pos">
         <dia:point val="1,282"/>
       </dia:attribute>
@@ -26172,9 +26302,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O207">
+    <dia:object type="UML - Association" version="2" id="O208">
       <dia:attribute name="name">
         <dia:string>#composed of &gt;#</dia:string>
       </dia:attribute>
@@ -26215,7 +26345,7 @@ another.#</dia:string>
         <dia:point val="11.645,282"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="10.895,274.95;20.545,283.6"/>
+        <dia:rectangle val="10.895,274.95;28.165,282.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -26223,8 +26353,8 @@ another.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="11.645,282"/>
         <dia:point val="11.645,278"/>
-        <dia:point val="20.345,278"/>
-        <dia:point val="20.345,275"/>
+        <dia:point val="27.965,278"/>
+        <dia:point val="27.965,275"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -26241,12 +26371,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O206" connection="1"/>
-        <dia:connection handle="1" to="O205" connection="6"/>
+        <dia:connection handle="0" to="O207" connection="1"/>
+        <dia:connection handle="1" to="O206" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O208">
+    <dia:object type="UML - Association" version="2" id="O209">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -26287,7 +26417,7 @@ another.#</dia:string>
         <dia:point val="-16.815,286.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-17.565,285.55;1.2,291.8"/>
+        <dia:rectangle val="-17.565,285.55;1.2,291.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -26313,20 +26443,20 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O201" connection="6"/>
-        <dia:connection handle="1" to="O206" connection="5"/>
+        <dia:connection handle="0" to="O202" connection="6"/>
+        <dia:connection handle="1" to="O207" connection="5"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O209">
+    <dia:object type="UML - Class" version="0" id="O210">
       <dia:attribute name="obj_pos">
-        <dia:point val="0,295"/>
+        <dia:point val="2,295"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-0.05,294.95;20.57,299.45"/>
+        <dia:rectangle val="1.95,294.95;22.57,299.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="0,295"/>
+        <dia:point val="2,295"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="20.52"/>
@@ -26476,9 +26606,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O210">
+    <dia:object type="UML - Association" version="2" id="O211">
       <dia:attribute name="name">
         <dia:string>#creates &gt;#</dia:string>
       </dia:attribute>
@@ -26516,17 +26646,17 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="10.26,295"/>
+        <dia:point val="12.26,295"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="9.51,285.55;22.49,296.6"/>
+        <dia:rectangle val="11.51,285.55;22.49,295.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="10.26,295"/>
-        <dia:point val="10.26,291"/>
+        <dia:point val="12.26,295"/>
+        <dia:point val="12.26,291"/>
         <dia:point val="22.29,291"/>
         <dia:point val="22.29,285.6"/>
       </dia:attribute>
@@ -26545,12 +26675,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O209" connection="1"/>
-        <dia:connection handle="1" to="O206" connection="7"/>
+        <dia:connection handle="0" to="O210" connection="1"/>
+        <dia:connection handle="1" to="O207" connection="7"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O211">
+    <dia:object type="UML - Class" version="0" id="O212">
       <dia:attribute name="obj_pos">
         <dia:point val="-29,295"/>
       </dia:attribute>
@@ -26708,20 +26838,20 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O212">
+    <dia:object type="UML - Class" version="0" id="O213">
       <dia:attribute name="obj_pos">
         <dia:point val="-23,308"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-23.05,307.95;-0.12,311.65"/>
+        <dia:rectangle val="-23.05,307.95;4.5,311.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="-23,308"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="22.830000000000002"/>
+        <dia:real val="27.449999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.6000000000000001"/>
@@ -26842,7 +26972,7 @@ another.#</dia:string>
             <dia:string>#by_language#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;languages, mapping_value&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;meta_model::languages, mapping_value&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -26866,9 +26996,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O213">
+    <dia:object type="UML - Association" version="2" id="O214">
       <dia:attribute name="name">
         <dia:string>#&lt; validates#</dia:string>
       </dia:attribute>
@@ -26906,17 +27036,17 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-11.585,308"/>
+        <dia:point val="-9.275,308"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-20.1375,298.55;-10.835,309.6"/>
+        <dia:rectangle val="-20.1375,298.55;-8.525,308.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-11.585,308"/>
-        <dia:point val="-11.585,304"/>
+        <dia:point val="-9.275,308"/>
+        <dia:point val="-9.275,304"/>
         <dia:point val="-20.0875,304"/>
         <dia:point val="-20.0875,298.6"/>
       </dia:attribute>
@@ -26935,23 +27065,23 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O212" connection="1"/>
-        <dia:connection handle="1" to="O211" connection="6"/>
+        <dia:connection handle="0" to="O213" connection="1"/>
+        <dia:connection handle="1" to="O212" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O214">
+    <dia:object type="UML - Class" version="0" id="O215">
       <dia:attribute name="obj_pos">
         <dia:point val="-10,320"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-10.05,319.95;4.41,324.45"/>
+        <dia:rectangle val="-10.05,319.95;9.03,324.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
         <dia:point val="-10,320"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="14.359999999999999"/>
+        <dia:real val="18.98"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="4.4000000000000004"/>
@@ -27072,7 +27202,7 @@ another.#</dia:string>
             <dia:string>#default_name#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#boost::optional&lt;name&gt;#</dia:string>
+            <dia:string>#boost::optional&lt;meta_model::name&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -27095,7 +27225,7 @@ another.#</dia:string>
             <dia:string>#aliases#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;name&gt;#</dia:string>
+            <dia:string>#std::list&lt;meta_model::name&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -27119,17 +27249,17 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O215">
+    <dia:object type="UML - Class" version="0" id="O216">
       <dia:attribute name="obj_pos">
-        <dia:point val="8,320"/>
+        <dia:point val="14,320"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="7.95,319.95;16.1525,324.45"/>
+        <dia:rectangle val="13.95,319.95;22.1525,324.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="8,320"/>
+        <dia:point val="14,320"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="8.1025000000000009"/>
@@ -27277,9 +27407,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O216">
+    <dia:object type="UML - Association" version="2" id="O217">
       <dia:attribute name="name">
         <dia:string>#maps LAM IDs to &gt;#</dia:string>
       </dia:attribute>
@@ -27317,19 +27447,19 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-11.585,311.6"/>
+        <dia:point val="-9.275,311.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-12.335,310.85;-2.62,321.6"/>
+        <dia:rectangle val="-10.025,310.85;-0.31,320.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-11.585,311.6"/>
-        <dia:point val="-11.585,316"/>
-        <dia:point val="-2.82,316"/>
-        <dia:point val="-2.82,320"/>
+        <dia:point val="-9.275,311.6"/>
+        <dia:point val="-9.275,316"/>
+        <dia:point val="-0.51,316"/>
+        <dia:point val="-0.51,320"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -27346,12 +27476,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O212" connection="6"/>
-        <dia:connection handle="1" to="O214" connection="1"/>
+        <dia:connection handle="0" to="O213" connection="6"/>
+        <dia:connection handle="1" to="O215" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O217">
+    <dia:object type="UML - Class" version="0" id="O218">
       <dia:attribute name="obj_pos">
         <dia:point val="-51,308"/>
       </dia:attribute>
@@ -27509,9 +27639,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O218">
+    <dia:object type="UML - Association" version="2" id="O219">
       <dia:attribute name="name">
         <dia:string>#hydrates from file &gt;#</dia:string>
       </dia:attribute>
@@ -27552,7 +27682,7 @@ another.#</dia:string>
         <dia:point val="-23,308"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-38.865,303.25;-22.25,309.6"/>
+        <dia:rectangle val="-38.865,303.25;-22.25,308.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -27578,12 +27708,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O212" connection="0"/>
-        <dia:connection handle="1" to="O217" connection="1"/>
+        <dia:connection handle="0" to="O213" connection="0"/>
+        <dia:connection handle="1" to="O218" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O219">
+    <dia:object type="UML - Class" version="0" id="O220">
       <dia:attribute name="obj_pos">
         <dia:point val="-33,320"/>
       </dia:attribute>
@@ -27692,9 +27822,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O220">
+    <dia:object type="UML - Association" version="2" id="O221">
       <dia:attribute name="name">
         <dia:string>#on error throws &gt;#</dia:string>
       </dia:attribute>
@@ -27735,7 +27865,7 @@ another.#</dia:string>
         <dia:point val="-38.815,311.65"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-39.565,310.9;-29.0225,321.6"/>
+        <dia:rectangle val="-39.565,310.9;-29.0225,320.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -27761,12 +27891,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O217" connection="10"/>
-        <dia:connection handle="1" to="O219" connection="1"/>
+        <dia:connection handle="0" to="O218" connection="10"/>
+        <dia:connection handle="1" to="O220" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O221">
+    <dia:object type="UML - Association" version="2" id="O222">
       <dia:attribute name="name">
         <dia:string>#has an associated &gt;#</dia:string>
       </dia:attribute>
@@ -27804,19 +27934,19 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-2.82,324.4"/>
+        <dia:point val="-0.51,324.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-3.57,323.65;12.2512,329.05"/>
+        <dia:rectangle val="-1.26,323.65;18.2512,329.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-2.82,324.4"/>
-        <dia:point val="-2.82,329"/>
-        <dia:point val="12.0512,329"/>
-        <dia:point val="12.0512,324.4"/>
+        <dia:point val="-0.51,324.4"/>
+        <dia:point val="-0.51,329"/>
+        <dia:point val="18.0512,329"/>
+        <dia:point val="18.0512,324.4"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -27833,12 +27963,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O214" connection="6"/>
-        <dia:connection handle="1" to="O215" connection="6"/>
+        <dia:connection handle="0" to="O215" connection="6"/>
+        <dia:connection handle="1" to="O216" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O222">
+    <dia:object type="UML - Association" version="2" id="O223">
       <dia:attribute name="name">
         <dia:string>#&lt; uses as inputs#</dia:string>
       </dia:attribute>
@@ -27876,19 +28006,19 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="10.26,299.45"/>
+        <dia:point val="12.26,299.45"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-0.22,298.7;11.01,309.6"/>
+        <dia:rectangle val="4.4,298.7;13.01,308.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="10.26,299.45"/>
-        <dia:point val="10.26,304"/>
-        <dia:point val="-0.17,304"/>
-        <dia:point val="-0.17,308"/>
+        <dia:point val="12.26,299.45"/>
+        <dia:point val="12.26,304"/>
+        <dia:point val="4.45,304"/>
+        <dia:point val="4.45,308"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -27905,12 +28035,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O209" connection="10"/>
-        <dia:connection handle="1" to="O212" connection="2"/>
+        <dia:connection handle="0" to="O210" connection="10"/>
+        <dia:connection handle="1" to="O213" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O223">
+    <dia:object type="UML - Class" version="0" id="O224">
       <dia:attribute name="obj_pos">
         <dia:point val="-95,219"/>
       </dia:attribute>
@@ -28102,9 +28232,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O224">
+    <dia:object type="UML - Association" version="2" id="O225">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -28145,7 +28275,7 @@ another.#</dia:string>
         <dia:point val="-95,213.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-95.75,212.65;-84.155,220.6"/>
+        <dia:rectangle val="-95.75,212.65;-84.155,219.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -28171,12 +28301,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O110" connection="5"/>
-        <dia:connection handle="1" to="O223" connection="1"/>
+        <dia:connection handle="0" to="O111" connection="5"/>
+        <dia:connection handle="1" to="O224" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O94"/>
+      <dia:childnode parent="O95"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O225">
+    <dia:object type="UML - Class" version="0" id="O226">
       <dia:attribute name="obj_pos">
         <dia:point val="-98,295"/>
       </dia:attribute>
@@ -28351,9 +28481,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O226">
+    <dia:object type="UML - Class" version="0" id="O227">
       <dia:attribute name="obj_pos">
         <dia:point val="-74,307"/>
       </dia:attribute>
@@ -28462,9 +28592,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O227">
+    <dia:object type="UML - Association" version="2" id="O228">
       <dia:attribute name="name">
         <dia:string>#on error throws &gt;#</dia:string>
       </dia:attribute>
@@ -28505,7 +28635,7 @@ another.#</dia:string>
         <dia:point val="-70.3838,307"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-84.1325,298.55;-69.6338,308.6"/>
+        <dia:rectangle val="-84.1325,298.55;-69.6338,307.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -28531,12 +28661,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O226" connection="1"/>
-        <dia:connection handle="1" to="O225" connection="6"/>
+        <dia:connection handle="0" to="O227" connection="1"/>
+        <dia:connection handle="1" to="O226" connection="6"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O228">
+    <dia:object type="UML - Class" version="0" id="O229">
       <dia:attribute name="obj_pos">
         <dia:point val="-128,312"/>
       </dia:attribute>
@@ -28645,9 +28775,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O229">
+    <dia:object type="UML - Class" version="0" id="O230">
       <dia:attribute name="obj_pos">
         <dia:point val="-117,312"/>
       </dia:attribute>
@@ -28948,9 +29078,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O230">
+    <dia:object type="UML - Class" version="0" id="O231">
       <dia:attribute name="obj_pos">
         <dia:point val="-87,312"/>
       </dia:attribute>
@@ -29129,9 +29259,9 @@ another.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O231">
+    <dia:object type="UML - Association" version="2" id="O232">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -29172,7 +29302,7 @@ another.#</dia:string>
         <dia:point val="-117,312"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-124.655,307.95;-116.25,313.6"/>
+        <dia:rectangle val="-124.655,307.25;-116.25,312.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -29198,12 +29328,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O229" connection="0"/>
-        <dia:connection handle="1" to="O228" connection="1"/>
+        <dia:connection handle="0" to="O230" connection="0"/>
+        <dia:connection handle="1" to="O229" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O232">
+    <dia:object type="UML - Association" version="2" id="O233">
       <dia:attribute name="name">
         <dia:string>#separates elements using &gt;#</dia:string>
       </dia:attribute>
@@ -29244,7 +29374,7 @@ another.#</dia:string>
         <dia:point val="-96.095,312"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-96.845,307.25;-83.6625,313.6"/>
+        <dia:rectangle val="-96.845,307.25;-83.6625,312.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -29270,12 +29400,12 @@ another.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O229" connection="2"/>
-        <dia:connection handle="1" to="O230" connection="1"/>
+        <dia:connection handle="0" to="O230" connection="2"/>
+        <dia:connection handle="1" to="O231" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O233">
+    <dia:object type="UML - Class" version="0" id="O234">
       <dia:attribute name="obj_pos">
         <dia:point val="-101,327"/>
       </dia:attribute>
@@ -29409,7 +29539,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#data#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#name#</dia:string>
+            <dia:string>#meta_model::name#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -29456,9 +29586,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O234">
+    <dia:object type="UML - Class" version="0" id="O235">
       <dia:attribute name="obj_pos">
         <dia:point val="-71,327"/>
       </dia:attribute>
@@ -29616,9 +29746,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O235">
+    <dia:object type="UML - Class" version="0" id="O236">
       <dia:attribute name="obj_pos">
         <dia:point val="-34,350"/>
       </dia:attribute>
@@ -29727,9 +29857,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O236">
+    <dia:object type="UML - Class" version="0" id="O237">
       <dia:attribute name="obj_pos">
         <dia:point val="-69,339"/>
       </dia:attribute>
@@ -29861,7 +29991,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#model_location_#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#location#</dia:string>
+            <dia:string>#meta_model::location#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -30331,9 +30461,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O237">
+    <dia:object type="UML - Association" version="2" id="O238">
       <dia:attribute name="name">
         <dia:string>#&lt; models internally name relationships using#</dia:string>
       </dia:attribute>
@@ -30374,7 +30504,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-69,339"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-91.945,331.399;-68.25,340.6"/>
+        <dia:rectangle val="-91.945,331.399;-68.25,339.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -30400,12 +30530,12 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O236" connection="0"/>
-        <dia:connection handle="1" to="O233" connection="14"/>
+        <dia:connection handle="0" to="O237" connection="0"/>
+        <dia:connection handle="1" to="O234" connection="14"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O238">
+    <dia:object type="UML - Association" version="2" id="O239">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -30446,7 +30576,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-60.9325,330.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-61.6825,329.85;-53.92,340.6"/>
+        <dia:rectangle val="-61.6825,329.85;-53.92,339.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -30472,12 +30602,12 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O234" connection="6"/>
-        <dia:connection handle="1" to="O236" connection="1"/>
+        <dia:connection handle="0" to="O235" connection="6"/>
+        <dia:connection handle="1" to="O237" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O239">
+    <dia:object type="UML - Association" version="2" id="O240">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -30518,7 +30648,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-54.12,353.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-54.87,352.85;-30.37,358.8"/>
+        <dia:rectangle val="-54.87,352.85;-30.37,358.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -30544,12 +30674,12 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O236" connection="6"/>
-        <dia:connection handle="1" to="O235" connection="8"/>
+        <dia:connection handle="0" to="O237" connection="6"/>
+        <dia:connection handle="1" to="O236" connection="8"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O240">
+    <dia:object type="UML - Class" version="0" id="O241">
       <dia:attribute name="obj_pos">
         <dia:point val="-25,339"/>
       </dia:attribute>
@@ -30842,9 +30972,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O241">
+    <dia:object type="UML - Association" version="2" id="O242">
       <dia:attribute name="name">
         <dia:string>#&lt; converts strings into names for#</dia:string>
       </dia:attribute>
@@ -30885,7 +31015,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-25,339"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-39.29,334.25;-24.25,340.6"/>
+        <dia:rectangle val="-39.29,334.25;-24.25,339.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -30911,20 +31041,20 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O240" connection="0"/>
-        <dia:connection handle="1" to="O236" connection="2"/>
+        <dia:connection handle="0" to="O241" connection="0"/>
+        <dia:connection handle="1" to="O237" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O242">
+    <dia:object type="UML - Class" version="0" id="O243">
       <dia:attribute name="obj_pos">
-        <dia:point val="16,339"/>
+        <dia:point val="19,339"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="15.95,338.95;26.87,342.05"/>
+        <dia:rectangle val="18.95,338.95;29.87,342.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="16,339"/>
+        <dia:point val="19,339"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.82"/>
@@ -31025,9 +31155,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O243">
+    <dia:object type="UML - Class" version="0" id="O244">
       <dia:attribute name="obj_pos">
         <dia:point val="8,355"/>
       </dia:attribute>
@@ -31136,9 +31266,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O244">
+    <dia:object type="UML - Association" version="2" id="O245">
       <dia:attribute name="name">
         <dia:string>#throws on failure &gt;#</dia:string>
       </dia:attribute>
@@ -31179,7 +31309,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-8.965,346.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-9.715,345.65;8.2,356.6"/>
+        <dia:rectangle val="-9.715,345.65;8.2,355.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -31205,12 +31335,12 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O240" connection="6"/>
-        <dia:connection handle="1" to="O243" connection="0"/>
+        <dia:connection handle="0" to="O241" connection="6"/>
+        <dia:connection handle="1" to="O244" connection="0"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O245">
+    <dia:object type="UML - Association" version="2" id="O246">
       <dia:attribute name="name">
         <dia:string>#&lt; throws on failure#</dia:string>
       </dia:attribute>
@@ -31248,17 +31378,17 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="21.41,342.05"/>
+        <dia:point val="24.41,342.05"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="14.3362,341.3;22.16,356.6"/>
+        <dia:rectangle val="14.5275,341.3;25.16,355.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="21.41,342.05"/>
-        <dia:point val="21.41,351"/>
+        <dia:point val="24.41,342.05"/>
+        <dia:point val="24.41,351"/>
         <dia:point val="14.5775,351"/>
         <dia:point val="14.5775,355"/>
       </dia:attribute>
@@ -31277,20 +31407,20 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O242" connection="8"/>
-        <dia:connection handle="1" to="O243" connection="2"/>
+        <dia:connection handle="0" to="O243" connection="8"/>
+        <dia:connection handle="1" to="O244" connection="2"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O246">
+    <dia:object type="UML - Class" version="0" id="O247">
       <dia:attribute name="obj_pos">
-        <dia:point val="-177,347"/>
+        <dia:point val="-172,347"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-177.05,346.95;-156.43,353.85"/>
+        <dia:rectangle val="-172.05,346.95;-151.43,353.85"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-177,347"/>
+        <dia:point val="-172,347"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="20.52"/>
@@ -31583,9 +31713,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O247">
+    <dia:object type="UML - Class" version="0" id="O248">
       <dia:attribute name="obj_pos">
         <dia:point val="-135,327"/>
       </dia:attribute>
@@ -31921,9 +32051,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O248">
+    <dia:object type="UML - Class" version="0" id="O249">
       <dia:attribute name="obj_pos">
         <dia:point val="-169,327"/>
       </dia:attribute>
@@ -32032,7 +32162,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#name_#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#name#</dia:string>
+            <dia:string>#meta_model::name#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -32453,9 +32583,9 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O249">
+    <dia:object type="UML - Association" version="2" id="O250">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -32496,7 +32626,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-155.275,337.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-166.79,336.85;-154.525,348.6"/>
+        <dia:rectangle val="-161.79,336.85;-154.525,347.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -32504,8 +32634,8 @@ Temporary data structure used to build trees of names.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-155.275,337.6"/>
         <dia:point val="-155.275,343"/>
-        <dia:point val="-166.74,343"/>
-        <dia:point val="-166.74,347"/>
+        <dia:point val="-161.74,343"/>
+        <dia:point val="-161.74,347"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -32522,12 +32652,12 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O248" connection="6"/>
-        <dia:connection handle="1" to="O246" connection="1"/>
+        <dia:connection handle="0" to="O249" connection="6"/>
+        <dia:connection handle="1" to="O247" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O250">
+    <dia:object type="UML - Association" version="2" id="O251">
       <dia:attribute name="name">
         <dia:string>#&lt; builds names using#</dia:string>
       </dia:attribute>
@@ -32568,7 +32698,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-119.35,327"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-155.325,322.25;-118.6,328.6"/>
+        <dia:rectangle val="-155.325,322.25;-118.6,327.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -32594,10 +32724,218 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O247" connection="1"/>
-        <dia:connection handle="1" to="O248" connection="1"/>
+        <dia:connection handle="0" to="O248" connection="1"/>
+        <dia:connection handle="1" to="O249" connection="1"/>
       </dia:connections>
-      <dia:childnode parent="O178"/>
+      <dia:childnode parent="O179"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O252">
+      <dia:attribute name="obj_pos">
+        <dia:point val="-146,347"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="-146.05,346.95;-120.425,351.45"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="-146,347"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="25.524999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="4.4000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#name_flattener#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#handcrafted#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations">
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#name_flattener#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#detect_model_name#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#const bool#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umloperation">
+          <dia:attribute name="name">
+            <dia:string>#flatten#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="stereotype">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;std::string&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="inheritance_type">
+            <dia:enum val="2"/>
+          </dia:attribute>
+          <dia:attribute name="query">
+            <dia:boolean val="true"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="parameters">
+            <dia:composite type="umlparameter">
+              <dia:attribute name="name">
+                <dia:string>#n#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="type">
+                <dia:string>#const meta_model::name&amp;#</dia:string>
+              </dia:attribute>
+              <dia:attribute name="value">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="comment">
+                <dia:string>##</dia:string>
+              </dia:attribute>
+              <dia:attribute name="kind">
+                <dia:enum val="0"/>
+              </dia:attribute>
+            </dia:composite>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+      <dia:childnode parent="O179"/>
     </dia:object>
   </dia:layer>
 </dia:diagram>
diff --git a/projects/yarn/include/dogen/yarn/hash/all_hash.hpp b/projects/yarn/include/dogen/yarn/hash/all_hash.hpp
index 7a025c089..0cdc6156c 100644
--- a/projects/yarn/include/dogen/yarn/hash/all_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/all_hash.hpp
@@ -25,47 +25,47 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/model_hash.hpp"
-#include "dogen/yarn/hash/module_hash.hpp"
-#include "dogen/yarn/hash/object_hash.hpp"
-#include "dogen/yarn/hash/builtin_hash.hpp"
-#include "dogen/yarn/hash/concept_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/visitor_hash.hpp"
-#include "dogen/yarn/hash/location_hash.hpp"
-#include "dogen/yarn/hash/attribute_hash.hpp"
-#include "dogen/yarn/hash/exception_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/hash/name_tree_hash.hpp"
-#include "dogen/yarn/hash/primitive_hash.hpp"
-#include "dogen/yarn/hash/enumerator_hash.hpp"
-#include "dogen/yarn/hash/enumeration_hash.hpp"
 #include "dogen/yarn/hash/helpers/node_hash.hpp"
-#include "dogen/yarn/hash/letter_cases_hash.hpp"
-#include "dogen/yarn/hash/object_types_hash.hpp"
-#include "dogen/yarn/hash/origin_types_hash.hpp"
 #include "dogen/yarn/hash/helpers/indices_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_hash.hpp"
-#include "dogen/yarn/hash/type_parameters_hash.hpp"
-#include "dogen/yarn/hash/formatting_styles_hash.hpp"
-#include "dogen/yarn/hash/element_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/model_hash.hpp"
+#include "dogen/yarn/hash/meta_model/module_hash.hpp"
+#include "dogen/yarn/hash/meta_model/object_hash.hpp"
 #include "dogen/yarn/hash/helpers/separators_hash.hpp"
-#include "dogen/yarn/hash/intermediate_model_hash.hpp"
-#include "dogen/yarn/hash/artefact_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/builtin_hash.hpp"
+#include "dogen/yarn/hash/meta_model/concept_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/visitor_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_set_hash.hpp"
-#include "dogen/yarn/hash/orm_database_systems_hash.hpp"
-#include "dogen/yarn/hash/orm_model_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/location_hash.hpp"
+#include "dogen/yarn/hash/meta_model/attribute_hash.hpp"
+#include "dogen/yarn/hash/meta_model/exception_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_tree_hash.hpp"
+#include "dogen/yarn/hash/meta_model/primitive_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_value_hash.hpp"
-#include "dogen/yarn/hash/orm_module_properties_hash.hpp"
-#include "dogen/yarn/hash/orm_object_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumerator_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumeration_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_actions_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_context_hash.hpp"
-#include "dogen/yarn/hash/orm_attribute_properties_hash.hpp"
-#include "dogen/yarn/hash/orm_primitive_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/letter_cases_hash.hpp"
+#include "dogen/yarn/hash/meta_model/object_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/origin_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/type_parameters_hash.hpp"
 #include "dogen/yarn/hash/helpers/decomposition_result_hash.hpp"
+#include "dogen/yarn/hash/meta_model/formatting_styles_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/intermediate_model_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_set_repository_hash.hpp"
+#include "dogen/yarn/hash/meta_model/artefact_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp"
 #include "dogen/yarn/hash/transforms/code_generation_output_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp"
 #include "dogen/yarn/hash/transforms/exogenous_transform_types_hash.hpp"
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/hash/artefact_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/artefact_properties_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/artefact_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/artefact_properties_hash.hpp
index 1dabffa69..59cf8a146 100644
--- a/projects/yarn/include/dogen/yarn/hash/artefact_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/artefact_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ARTEFACT_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ARTEFACT_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ARTEFACT_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ARTEFACT_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/artefact_properties.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct artefact_properties_hasher {
 public:
     static std::size_t hash(const artefact_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::artefact_properties> {
+struct hash<dogen::yarn::meta_model::artefact_properties> {
 public:
-    size_t operator()(const dogen::yarn::artefact_properties& v) const {
-        return dogen::yarn::artefact_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::artefact_properties& v) const {
+        return dogen::yarn::meta_model::artefact_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/attribute_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/attribute_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/attribute_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/attribute_hash.hpp
index 8786d6c82..e21277011 100644
--- a/projects/yarn/include/dogen/yarn/hash/attribute_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/attribute_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ATTRIBUTE_HASH_HPP
-#define DOGEN_YARN_HASH_ATTRIBUTE_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ATTRIBUTE_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ATTRIBUTE_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct attribute_hasher {
 public:
     static std::size_t hash(const attribute& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::attribute> {
+struct hash<dogen::yarn::meta_model::attribute> {
 public:
-    size_t operator()(const dogen::yarn::attribute& v) const {
-        return dogen::yarn::attribute_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::attribute& v) const {
+        return dogen::yarn::meta_model::attribute_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/builtin_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/builtin_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/builtin_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/builtin_hash.hpp
index ec7430f04..ccd8c0feb 100644
--- a/projects/yarn/include/dogen/yarn/hash/builtin_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/builtin_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_BUILTIN_HASH_HPP
-#define DOGEN_YARN_HASH_BUILTIN_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_BUILTIN_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_BUILTIN_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/builtin.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct builtin_hasher {
 public:
     static std::size_t hash(const builtin& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::builtin> {
+struct hash<dogen::yarn::meta_model::builtin> {
 public:
-    size_t operator()(const dogen::yarn::builtin& v) const {
-        return dogen::yarn::builtin_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::builtin& v) const {
+        return dogen::yarn::meta_model::builtin_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/concept_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/concept_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/concept_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/concept_hash.hpp
index 0b8b62bac..7b209092f 100644
--- a/projects/yarn/include/dogen/yarn/hash/concept_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/concept_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_CONCEPT_HASH_HPP
-#define DOGEN_YARN_HASH_CONCEPT_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_CONCEPT_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_CONCEPT_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/concept.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct concept_hasher {
 public:
     static std::size_t hash(const concept& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::concept> {
+struct hash<dogen::yarn::meta_model::concept> {
 public:
-    size_t operator()(const dogen::yarn::concept& v) const {
-        return dogen::yarn::concept_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::concept& v) const {
+        return dogen::yarn::meta_model::concept_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/element_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/element_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/element_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/element_hash.hpp
index 58412f7bc..b5250d96a 100644
--- a/projects/yarn/include/dogen/yarn/hash/element_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/element_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ELEMENT_HASH_HPP
-#define DOGEN_YARN_HASH_ELEMENT_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ELEMENT_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ELEMENT_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/element.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct element_hasher {
 public:
     static std::size_t hash(const element& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::element> {
+struct hash<dogen::yarn::meta_model::element> {
 public:
-    size_t operator()(const dogen::yarn::element& v) const {
-        return dogen::yarn::element_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::element& v) const {
+        return dogen::yarn::meta_model::element_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/element_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/element_properties_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/element_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/element_properties_hash.hpp
index 2fc10e78c..ebe367277 100644
--- a/projects/yarn/include/dogen/yarn/hash/element_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/element_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ELEMENT_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ELEMENT_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ELEMENT_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ELEMENT_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct element_properties_hasher {
 public:
     static std::size_t hash(const element_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::element_properties> {
+struct hash<dogen::yarn::meta_model::element_properties> {
 public:
-    size_t operator()(const dogen::yarn::element_properties& v) const {
-        return dogen::yarn::element_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::element_properties& v) const {
+        return dogen::yarn::meta_model::element_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/enumeration_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/enumeration_hash.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/hash/enumeration_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/enumeration_hash.hpp
index 62a8b3022..ffb5d4e9b 100644
--- a/projects/yarn/include/dogen/yarn/hash/enumeration_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/enumeration_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ENUMERATION_HASH_HPP
-#define DOGEN_YARN_HASH_ENUMERATION_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ENUMERATION_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ENUMERATION_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct enumeration_hasher {
 public:
     static std::size_t hash(const enumeration& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::enumeration> {
+struct hash<dogen::yarn::meta_model::enumeration> {
 public:
-    size_t operator()(const dogen::yarn::enumeration& v) const {
-        return dogen::yarn::enumeration_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::enumeration& v) const {
+        return dogen::yarn::meta_model::enumeration_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/enumerator_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/enumerator_hash.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/hash/enumerator_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/enumerator_hash.hpp
index b1253ea5e..bd7fc43fa 100644
--- a/projects/yarn/include/dogen/yarn/hash/enumerator_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/enumerator_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ENUMERATOR_HASH_HPP
-#define DOGEN_YARN_HASH_ENUMERATOR_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ENUMERATOR_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ENUMERATOR_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/enumerator.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct enumerator_hasher {
 public:
     static std::size_t hash(const enumerator& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::enumerator> {
+struct hash<dogen::yarn::meta_model::enumerator> {
 public:
-    size_t operator()(const dogen::yarn::enumerator& v) const {
-        return dogen::yarn::enumerator_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::enumerator& v) const {
+        return dogen::yarn::meta_model::enumerator_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/exception_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/exception_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/exception_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/exception_hash.hpp
index a1ca32c19..a75f37f42 100644
--- a/projects/yarn/include/dogen/yarn/hash/exception_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/exception_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_EXCEPTION_HASH_HPP
-#define DOGEN_YARN_HASH_EXCEPTION_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_EXCEPTION_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_EXCEPTION_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/exception.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct exception_hasher {
 public:
     static std::size_t hash(const exception& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::exception> {
+struct hash<dogen::yarn::meta_model::exception> {
 public:
-    size_t operator()(const dogen::yarn::exception& v) const {
-        return dogen::yarn::exception_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::exception& v) const {
+        return dogen::yarn::meta_model::exception_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/formatting_styles_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/formatting_styles_hash.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/hash/formatting_styles_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/formatting_styles_hash.hpp
index ddd8c044b..fe6bf1405 100644
--- a/projects/yarn/include/dogen/yarn/hash/formatting_styles_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/formatting_styles_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_FORMATTING_STYLES_HASH_HPP
-#define DOGEN_YARN_HASH_FORMATTING_STYLES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_FORMATTING_STYLES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_FORMATTING_STYLES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/formatting_styles.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::formatting_styles> {
+struct hash<dogen::yarn::meta_model::formatting_styles> {
 public:
-    size_t operator()(const dogen::yarn::formatting_styles& v) const {
+    size_t operator()(const dogen::yarn::meta_model::formatting_styles& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/intermediate_model_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/intermediate_model_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/intermediate_model_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/intermediate_model_hash.hpp
index 1648d1da1..08bf7adfe 100644
--- a/projects/yarn/include/dogen/yarn/hash/intermediate_model_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/intermediate_model_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_INTERMEDIATE_MODEL_HASH_HPP
-#define DOGEN_YARN_HASH_INTERMEDIATE_MODEL_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_INTERMEDIATE_MODEL_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_INTERMEDIATE_MODEL_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct intermediate_model_hasher {
 public:
     static std::size_t hash(const intermediate_model& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::intermediate_model> {
+struct hash<dogen::yarn::meta_model::intermediate_model> {
 public:
-    size_t operator()(const dogen::yarn::intermediate_model& v) const {
-        return dogen::yarn::intermediate_model_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::intermediate_model& v) const {
+        return dogen::yarn::meta_model::intermediate_model_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/languages_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/languages_hash.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/hash/languages_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/languages_hash.hpp
index 8125af2a5..91e079f9b 100644
--- a/projects/yarn/include/dogen/yarn/hash/languages_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/languages_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_LANGUAGES_HASH_HPP
-#define DOGEN_YARN_HASH_LANGUAGES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_LANGUAGES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_LANGUAGES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::languages> {
+struct hash<dogen::yarn::meta_model::languages> {
 public:
-    size_t operator()(const dogen::yarn::languages& v) const {
+    size_t operator()(const dogen::yarn::meta_model::languages& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/letter_cases_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/letter_cases_hash.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/hash/letter_cases_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/letter_cases_hash.hpp
index 68f108548..4832faf22 100644
--- a/projects/yarn/include/dogen/yarn/hash/letter_cases_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/letter_cases_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_LETTER_CASES_HASH_HPP
-#define DOGEN_YARN_HASH_LETTER_CASES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_LETTER_CASES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_LETTER_CASES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::letter_cases> {
+struct hash<dogen::yarn::meta_model::letter_cases> {
 public:
-    size_t operator()(const dogen::yarn::letter_cases& v) const {
+    size_t operator()(const dogen::yarn::meta_model::letter_cases& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/location_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/location_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/location_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/location_hash.hpp
index 440fd42ee..785f67b28 100644
--- a/projects/yarn/include/dogen/yarn/hash/location_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/location_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_LOCATION_HASH_HPP
-#define DOGEN_YARN_HASH_LOCATION_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_LOCATION_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_LOCATION_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/location.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct location_hasher {
 public:
     static std::size_t hash(const location& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::location> {
+struct hash<dogen::yarn::meta_model::location> {
 public:
-    size_t operator()(const dogen::yarn::location& v) const {
-        return dogen::yarn::location_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::location& v) const {
+        return dogen::yarn::meta_model::location_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/model_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/model_hash.hpp
similarity index 76%
rename from projects/yarn/include/dogen/yarn/hash/model_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/model_hash.hpp
index fc33c8236..3d025b3c5 100644
--- a/projects/yarn/include/dogen/yarn/hash/model_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/model_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_MODEL_HASH_HPP
-#define DOGEN_YARN_HASH_MODEL_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_MODEL_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_MODEL_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct model_hasher {
 public:
     static std::size_t hash(const model& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::model> {
+struct hash<dogen::yarn::meta_model::model> {
 public:
-    size_t operator()(const dogen::yarn::model& v) const {
-        return dogen::yarn::model_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::model& v) const {
+        return dogen::yarn::meta_model::model_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/module_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/module_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/module_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/module_hash.hpp
index 44f75a69b..f5c411133 100644
--- a/projects/yarn/include/dogen/yarn/hash/module_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/module_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_MODULE_HASH_HPP
-#define DOGEN_YARN_HASH_MODULE_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_MODULE_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_MODULE_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/module.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct module_hasher {
 public:
     static std::size_t hash(const module& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::module> {
+struct hash<dogen::yarn::meta_model::module> {
 public:
-    size_t operator()(const dogen::yarn::module& v) const {
-        return dogen::yarn::module_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::module& v) const {
+        return dogen::yarn::meta_model::module_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/name_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/name_hash.hpp
similarity index 76%
rename from projects/yarn/include/dogen/yarn/hash/name_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/name_hash.hpp
index 520f27c22..0aee591ab 100644
--- a/projects/yarn/include/dogen/yarn/hash/name_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/name_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_NAME_HASH_HPP
-#define DOGEN_YARN_HASH_NAME_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_NAME_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_NAME_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct name_hasher {
 public:
     static std::size_t hash(const name& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::name> {
+struct hash<dogen::yarn::meta_model::name> {
 public:
-    size_t operator()(const dogen::yarn::name& v) const {
-        return dogen::yarn::name_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::name& v) const {
+        return dogen::yarn::meta_model::name_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/name_tree_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/name_tree_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/name_tree_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/name_tree_hash.hpp
index d37931823..e83ded30e 100644
--- a/projects/yarn/include/dogen/yarn/hash/name_tree_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/name_tree_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_NAME_TREE_HASH_HPP
-#define DOGEN_YARN_HASH_NAME_TREE_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_NAME_TREE_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_NAME_TREE_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct name_tree_hasher {
 public:
     static std::size_t hash(const name_tree& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::name_tree> {
+struct hash<dogen::yarn::meta_model::name_tree> {
 public:
-    size_t operator()(const dogen::yarn::name_tree& v) const {
-        return dogen::yarn::name_tree_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::name_tree& v) const {
+        return dogen::yarn::meta_model::name_tree_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/object_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/object_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/object_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/object_hash.hpp
index 8aca1a13e..322cda817 100644
--- a/projects/yarn/include/dogen/yarn/hash/object_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/object_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_OBJECT_HASH_HPP
-#define DOGEN_YARN_HASH_OBJECT_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_OBJECT_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_OBJECT_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct object_hasher {
 public:
     static std::size_t hash(const object& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::object> {
+struct hash<dogen::yarn::meta_model::object> {
 public:
-    size_t operator()(const dogen::yarn::object& v) const {
-        return dogen::yarn::object_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::object& v) const {
+        return dogen::yarn::meta_model::object_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/object_types_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/object_types_hash.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/hash/object_types_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/object_types_hash.hpp
index 1ecb706aa..5212a605c 100644
--- a/projects/yarn/include/dogen/yarn/hash/object_types_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/object_types_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_OBJECT_TYPES_HASH_HPP
-#define DOGEN_YARN_HASH_OBJECT_TYPES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_OBJECT_TYPES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_OBJECT_TYPES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/object_types.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::object_types> {
+struct hash<dogen::yarn::meta_model::object_types> {
 public:
-    size_t operator()(const dogen::yarn::object_types& v) const {
+    size_t operator()(const dogen::yarn::meta_model::object_types& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/origin_types_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/origin_types_hash.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/hash/origin_types_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/origin_types_hash.hpp
index afc0053ae..64aa8a9d2 100644
--- a/projects/yarn/include/dogen/yarn/hash/origin_types_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/origin_types_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORIGIN_TYPES_HASH_HPP
-#define DOGEN_YARN_HASH_ORIGIN_TYPES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORIGIN_TYPES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORIGIN_TYPES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::origin_types> {
+struct hash<dogen::yarn::meta_model::origin_types> {
 public:
-    size_t operator()(const dogen::yarn::origin_types& v) const {
+    size_t operator()(const dogen::yarn::meta_model::origin_types& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_attribute_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/hash/orm_attribute_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp
index c8512c3db..482d2ec9b 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_attribute_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_ATTRIBUTE_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_ATTRIBUTE_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct orm_attribute_properties_hasher {
 public:
     static std::size_t hash(const orm_attribute_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_attribute_properties> {
+struct hash<dogen::yarn::meta_model::orm_attribute_properties> {
 public:
-    size_t operator()(const dogen::yarn::orm_attribute_properties& v) const {
-        return dogen::yarn::orm_attribute_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::orm_attribute_properties& v) const {
+        return dogen::yarn::meta_model::orm_attribute_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_database_systems_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp
similarity index 76%
rename from projects/yarn/include/dogen/yarn/hash/orm_database_systems_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp
index 2113e71ab..3fc5e1eeb 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_database_systems_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp
@@ -18,22 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_DATABASE_SYSTEMS_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_DATABASE_SYSTEMS_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_DATABASE_SYSTEMS_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_DATABASE_SYSTEMS_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_database_systems> {
+struct hash<dogen::yarn::meta_model::orm_database_systems> {
 public:
-    size_t operator()(const dogen::yarn::orm_database_systems& v) const {
+    size_t operator()(const dogen::yarn::meta_model::orm_database_systems& v) const {
         return std::hash<unsigned int>()(static_cast<unsigned int>(v));
     }
 };
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_model_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/orm_model_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp
index 3cd6fbc47..452f1f3ec 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_model_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_MODEL_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_MODEL_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_MODEL_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_MODEL_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct orm_model_properties_hasher {
 public:
     static std::size_t hash(const orm_model_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_model_properties> {
+struct hash<dogen::yarn::meta_model::orm_model_properties> {
 public:
-    size_t operator()(const dogen::yarn::orm_model_properties& v) const {
-        return dogen::yarn::orm_model_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::orm_model_properties& v) const {
+        return dogen::yarn::meta_model::orm_model_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_module_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/orm_module_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp
index c316ab51f..5541d0018 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_module_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_MODULE_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_MODULE_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_MODULE_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_MODULE_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct orm_module_properties_hasher {
 public:
     static std::size_t hash(const orm_module_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_module_properties> {
+struct hash<dogen::yarn::meta_model::orm_module_properties> {
 public:
-    size_t operator()(const dogen::yarn::orm_module_properties& v) const {
-        return dogen::yarn::orm_module_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::orm_module_properties& v) const {
+        return dogen::yarn::meta_model::orm_module_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_object_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/hash/orm_object_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp
index 78bb73bd9..c9ec60ec0 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_object_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_OBJECT_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_OBJECT_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_OBJECT_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_OBJECT_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct orm_object_properties_hasher {
 public:
     static std::size_t hash(const orm_object_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_object_properties> {
+struct hash<dogen::yarn::meta_model::orm_object_properties> {
 public:
-    size_t operator()(const dogen::yarn::orm_object_properties& v) const {
-        return dogen::yarn::orm_object_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::orm_object_properties& v) const {
+        return dogen::yarn::meta_model::orm_object_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/orm_primitive_properties_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/hash/orm_primitive_properties_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp
index 020de24ef..935290c2a 100644
--- a/projects/yarn/include/dogen/yarn/hash/orm_primitive_properties_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_ORM_PRIMITIVE_PROPERTIES_HASH_HPP
-#define DOGEN_YARN_HASH_ORM_PRIMITIVE_PROPERTIES_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_ORM_PRIMITIVE_PROPERTIES_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_ORM_PRIMITIVE_PROPERTIES_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct orm_primitive_properties_hasher {
 public:
     static std::size_t hash(const orm_primitive_properties& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::orm_primitive_properties> {
+struct hash<dogen::yarn::meta_model::orm_primitive_properties> {
 public:
-    size_t operator()(const dogen::yarn::orm_primitive_properties& v) const {
-        return dogen::yarn::orm_primitive_properties_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::orm_primitive_properties& v) const {
+        return dogen::yarn::meta_model::orm_primitive_properties_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/primitive_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/primitive_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/primitive_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/primitive_hash.hpp
index 3c0c1cf57..5be743eb6 100644
--- a/projects/yarn/include/dogen/yarn/hash/primitive_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/primitive_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_PRIMITIVE_HASH_HPP
-#define DOGEN_YARN_HASH_PRIMITIVE_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_PRIMITIVE_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_PRIMITIVE_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/primitive.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct primitive_hasher {
 public:
     static std::size_t hash(const primitive& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::primitive> {
+struct hash<dogen::yarn::meta_model::primitive> {
 public:
-    size_t operator()(const dogen::yarn::primitive& v) const {
-        return dogen::yarn::primitive_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::primitive& v) const {
+        return dogen::yarn::meta_model::primitive_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/type_parameters_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/type_parameters_hash.hpp
similarity index 73%
rename from projects/yarn/include/dogen/yarn/hash/type_parameters_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/type_parameters_hash.hpp
index 24fb78e1f..37cc87f54 100644
--- a/projects/yarn/include/dogen/yarn/hash/type_parameters_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/type_parameters_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_TYPE_PARAMETERS_HASH_HPP
-#define DOGEN_YARN_HASH_TYPE_PARAMETERS_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_TYPE_PARAMETERS_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_TYPE_PARAMETERS_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct type_parameters_hasher {
 public:
     static std::size_t hash(const type_parameters& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::type_parameters> {
+struct hash<dogen::yarn::meta_model::type_parameters> {
 public:
-    size_t operator()(const dogen::yarn::type_parameters& v) const {
-        return dogen::yarn::type_parameters_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::type_parameters& v) const {
+        return dogen::yarn::meta_model::type_parameters_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/hash/visitor_hash.hpp b/projects/yarn/include/dogen/yarn/hash/meta_model/visitor_hash.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/hash/visitor_hash.hpp
rename to projects/yarn/include/dogen/yarn/hash/meta_model/visitor_hash.hpp
index 8485c5108..8765fc28a 100644
--- a/projects/yarn/include/dogen/yarn/hash/visitor_hash.hpp
+++ b/projects/yarn/include/dogen/yarn/hash/meta_model/visitor_hash.hpp
@@ -18,33 +18,34 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_HASH_VISITOR_HASH_HPP
-#define DOGEN_YARN_HASH_VISITOR_HASH_HPP
+#ifndef DOGEN_YARN_HASH_META_MODEL_VISITOR_HASH_HPP
+#define DOGEN_YARN_HASH_META_MODEL_VISITOR_HASH_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <functional>
-#include "dogen/yarn/types/visitor.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 struct visitor_hasher {
 public:
     static std::size_t hash(const visitor& v);
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
-struct hash<dogen::yarn::visitor> {
+struct hash<dogen::yarn::meta_model::visitor> {
 public:
-    size_t operator()(const dogen::yarn::visitor& v) const {
-        return dogen::yarn::visitor_hasher::hash(v);
+    size_t operator()(const dogen::yarn::meta_model::visitor& v) const {
+        return dogen::yarn::meta_model::visitor_hasher::hash(v);
     }
 };
 
diff --git a/projects/yarn/include/dogen/yarn/io/all_io.hpp b/projects/yarn/include/dogen/yarn/io/all_io.hpp
index d553993f9..62a8f28b7 100644
--- a/projects/yarn/include/dogen/yarn/io/all_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/all_io.hpp
@@ -25,47 +25,47 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/model_io.hpp"
-#include "dogen/yarn/io/module_io.hpp"
-#include "dogen/yarn/io/object_io.hpp"
-#include "dogen/yarn/io/builtin_io.hpp"
-#include "dogen/yarn/io/concept_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/visitor_io.hpp"
-#include "dogen/yarn/io/location_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/exception_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
-#include "dogen/yarn/io/primitive_io.hpp"
-#include "dogen/yarn/io/enumerator_io.hpp"
-#include "dogen/yarn/io/enumeration_io.hpp"
 #include "dogen/yarn/io/helpers/node_io.hpp"
-#include "dogen/yarn/io/letter_cases_io.hpp"
-#include "dogen/yarn/io/object_types_io.hpp"
-#include "dogen/yarn/io/origin_types_io.hpp"
 #include "dogen/yarn/io/helpers/indices_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_io.hpp"
-#include "dogen/yarn/io/type_parameters_io.hpp"
-#include "dogen/yarn/io/formatting_styles_io.hpp"
-#include "dogen/yarn/io/element_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/model_io.hpp"
+#include "dogen/yarn/io/meta_model/module_io.hpp"
+#include "dogen/yarn/io/meta_model/object_io.hpp"
 #include "dogen/yarn/io/helpers/separators_io.hpp"
-#include "dogen/yarn/io/intermediate_model_io.hpp"
-#include "dogen/yarn/io/artefact_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/builtin_io.hpp"
+#include "dogen/yarn/io/meta_model/concept_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/visitor_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_set_io.hpp"
-#include "dogen/yarn/io/orm_database_systems_io.hpp"
-#include "dogen/yarn/io/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/location_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/exception_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/primitive_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_value_io.hpp"
-#include "dogen/yarn/io/orm_module_properties_io.hpp"
-#include "dogen/yarn/io/orm_object_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/enumerator_io.hpp"
+#include "dogen/yarn/io/meta_model/enumeration_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_actions_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_context_io.hpp"
-#include "dogen/yarn/io/orm_attribute_properties_io.hpp"
-#include "dogen/yarn/io/orm_primitive_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/letter_cases_io.hpp"
+#include "dogen/yarn/io/meta_model/object_types_io.hpp"
+#include "dogen/yarn/io/meta_model/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/type_parameters_io.hpp"
 #include "dogen/yarn/io/helpers/decomposition_result_io.hpp"
+#include "dogen/yarn/io/meta_model/formatting_styles_io.hpp"
+#include "dogen/yarn/io/meta_model/element_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/intermediate_model_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_set_repository_io.hpp"
+#include "dogen/yarn/io/meta_model/artefact_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_database_systems_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_module_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
 #include "dogen/yarn/io/transforms/code_generation_output_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
 #include "dogen/yarn/io/transforms/exogenous_transform_types_io.hpp"
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/artefact_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/artefact_properties_io.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/io/artefact_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/artefact_properties_io.hpp
index 09750534c..763e84f91 100644
--- a/projects/yarn/include/dogen/yarn/io/artefact_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/artefact_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ARTEFACT_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ARTEFACT_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ARTEFACT_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ARTEFACT_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/artefact_properties.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::artefact_properties& v);
+     const dogen::yarn::meta_model::artefact_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/attribute_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/attribute_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/attribute_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/attribute_io.hpp
index 634eab6fe..0f534e79f 100644
--- a/projects/yarn/include/dogen/yarn/io/attribute_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/attribute_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ATTRIBUTE_IO_HPP
-#define DOGEN_YARN_IO_ATTRIBUTE_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ATTRIBUTE_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ATTRIBUTE_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::attribute& v);
+     const dogen::yarn::meta_model::attribute& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/builtin_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/builtin_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/builtin_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/builtin_io.hpp
index c47a47087..2bafc9d5e 100644
--- a/projects/yarn/include/dogen/yarn/io/builtin_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/builtin_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_BUILTIN_IO_HPP
-#define DOGEN_YARN_IO_BUILTIN_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_BUILTIN_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_BUILTIN_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/builtin.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::builtin& v);
+     const dogen::yarn::meta_model::builtin& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/concept_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/concept_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/concept_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/concept_io.hpp
index b3f9cdc34..39b540092 100644
--- a/projects/yarn/include/dogen/yarn/io/concept_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/concept_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_CONCEPT_IO_HPP
-#define DOGEN_YARN_IO_CONCEPT_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_CONCEPT_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_CONCEPT_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/concept.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::concept& v);
+     const dogen::yarn::meta_model::concept& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/element_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/element_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/element_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/element_io.hpp
index 957dbbba4..c8ac56c86 100644
--- a/projects/yarn/include/dogen/yarn/io/element_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/element_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ELEMENT_IO_HPP
-#define DOGEN_YARN_IO_ELEMENT_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ELEMENT_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ELEMENT_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/element.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::element& v);
+     const dogen::yarn::meta_model::element& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/element_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/element_properties_io.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/io/element_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/element_properties_io.hpp
index 4f7011bea..158b89592 100644
--- a/projects/yarn/include/dogen/yarn/io/element_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/element_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ELEMENT_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ELEMENT_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ELEMENT_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ELEMENT_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::element_properties& v);
+     const dogen::yarn::meta_model::element_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/enumeration_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/enumeration_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/enumeration_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/enumeration_io.hpp
index e6aaf9408..4afac6c01 100644
--- a/projects/yarn/include/dogen/yarn/io/enumeration_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/enumeration_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ENUMERATION_IO_HPP
-#define DOGEN_YARN_IO_ENUMERATION_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ENUMERATION_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ENUMERATION_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::enumeration& v);
+     const dogen::yarn::meta_model::enumeration& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/enumerator_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/enumerator_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/enumerator_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/enumerator_io.hpp
index c79f48050..c78cf8854 100644
--- a/projects/yarn/include/dogen/yarn/io/enumerator_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/enumerator_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ENUMERATOR_IO_HPP
-#define DOGEN_YARN_IO_ENUMERATOR_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ENUMERATOR_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ENUMERATOR_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/enumerator.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::enumerator& v);
+     const dogen::yarn::meta_model::enumerator& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/exception_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/exception_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/exception_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/exception_io.hpp
index 2428be082..08b923807 100644
--- a/projects/yarn/include/dogen/yarn/io/exception_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/exception_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_EXCEPTION_IO_HPP
-#define DOGEN_YARN_IO_EXCEPTION_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_EXCEPTION_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_EXCEPTION_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/exception.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::exception& v);
+     const dogen::yarn::meta_model::exception& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/formatting_styles_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/formatting_styles_io.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/io/formatting_styles_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/formatting_styles_io.hpp
index c27f143eb..34f34dbe6 100644
--- a/projects/yarn/include/dogen/yarn/io/formatting_styles_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/formatting_styles_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_FORMATTING_STYLES_IO_HPP
-#define DOGEN_YARN_IO_FORMATTING_STYLES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_FORMATTING_STYLES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_FORMATTING_STYLES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/formatting_styles.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const formatting_styles& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/intermediate_model_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/intermediate_model_io.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/io/intermediate_model_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/intermediate_model_io.hpp
index eca66b408..75a94414a 100644
--- a/projects/yarn/include/dogen/yarn/io/intermediate_model_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/intermediate_model_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_INTERMEDIATE_MODEL_IO_HPP
-#define DOGEN_YARN_IO_INTERMEDIATE_MODEL_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_INTERMEDIATE_MODEL_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_INTERMEDIATE_MODEL_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::intermediate_model& v);
+     const dogen::yarn::meta_model::intermediate_model& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/languages_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/languages_io.hpp
similarity index 85%
rename from projects/yarn/include/dogen/yarn/io/languages_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/languages_io.hpp
index dfa414116..81b7599df 100644
--- a/projects/yarn/include/dogen/yarn/io/languages_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/languages_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_LANGUAGES_IO_HPP
-#define DOGEN_YARN_IO_LANGUAGES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_LANGUAGES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_LANGUAGES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const languages& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/letter_cases_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/letter_cases_io.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/io/letter_cases_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/letter_cases_io.hpp
index bf6fbb4e4..61b7d0835 100644
--- a/projects/yarn/include/dogen/yarn/io/letter_cases_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/letter_cases_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_LETTER_CASES_IO_HPP
-#define DOGEN_YARN_IO_LETTER_CASES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_LETTER_CASES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_LETTER_CASES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const letter_cases& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/location_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/location_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/location_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/location_io.hpp
index 9a2b5d265..ccff34c6f 100644
--- a/projects/yarn/include/dogen/yarn/io/location_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/location_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_LOCATION_IO_HPP
-#define DOGEN_YARN_IO_LOCATION_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_LOCATION_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_LOCATION_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/location.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::location& v);
+     const dogen::yarn::meta_model::location& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/model_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/model_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/model_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/model_io.hpp
index 4a242a7d0..3fcd92ff5 100644
--- a/projects/yarn/include/dogen/yarn/io/model_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/model_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_MODEL_IO_HPP
-#define DOGEN_YARN_IO_MODEL_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_MODEL_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_MODEL_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::model& v);
+     const dogen::yarn::meta_model::model& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/module_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/module_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/module_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/module_io.hpp
index bbb7861f7..e4be02c92 100644
--- a/projects/yarn/include/dogen/yarn/io/module_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/module_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_MODULE_IO_HPP
-#define DOGEN_YARN_IO_MODULE_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_MODULE_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_MODULE_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/module.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::module& v);
+     const dogen::yarn::meta_model::module& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/name_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/name_io.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/io/name_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/name_io.hpp
index 7cec5338e..90cf840f9 100644
--- a/projects/yarn/include/dogen/yarn/io/name_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/name_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_NAME_IO_HPP
-#define DOGEN_YARN_IO_NAME_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_NAME_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_NAME_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::name& v);
+     const dogen::yarn::meta_model::name& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/name_tree_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/name_tree_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/name_tree_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/name_tree_io.hpp
index 1c7304117..42ed816a4 100644
--- a/projects/yarn/include/dogen/yarn/io/name_tree_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/name_tree_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_NAME_TREE_IO_HPP
-#define DOGEN_YARN_IO_NAME_TREE_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_NAME_TREE_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_NAME_TREE_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::name_tree& v);
+     const dogen::yarn::meta_model::name_tree& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/object_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/object_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/object_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/object_io.hpp
index 77f465c87..1e0ba6530 100644
--- a/projects/yarn/include/dogen/yarn/io/object_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/object_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_OBJECT_IO_HPP
-#define DOGEN_YARN_IO_OBJECT_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_OBJECT_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_OBJECT_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::object& v);
+     const dogen::yarn::meta_model::object& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/object_types_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/object_types_io.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/io/object_types_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/object_types_io.hpp
index a478eea99..d1580aef0 100644
--- a/projects/yarn/include/dogen/yarn/io/object_types_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/object_types_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_OBJECT_TYPES_IO_HPP
-#define DOGEN_YARN_IO_OBJECT_TYPES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_OBJECT_TYPES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_OBJECT_TYPES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/object_types.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const object_types& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/origin_types_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/origin_types_io.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/io/origin_types_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/origin_types_io.hpp
index 56d12eaa6..1d607fd9c 100644
--- a/projects/yarn/include/dogen/yarn/io/origin_types_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/origin_types_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORIGIN_TYPES_IO_HPP
-#define DOGEN_YARN_IO_ORIGIN_TYPES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORIGIN_TYPES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORIGIN_TYPES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const origin_types& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_attribute_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/io/orm_attribute_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp
index 7561d7207..5a3ef1ddb 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_attribute_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_ATTRIBUTE_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ORM_ATTRIBUTE_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::orm_attribute_properties& v);
+     const dogen::yarn::meta_model::orm_attribute_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_database_systems_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_database_systems_io.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/io/orm_database_systems_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_database_systems_io.hpp
index 38ec396e0..5cce0c92c 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_database_systems_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_database_systems_io.hpp
@@ -18,21 +18,22 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_DATABASE_SYSTEMS_IO_HPP
-#define DOGEN_YARN_IO_ORM_DATABASE_SYSTEMS_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_DATABASE_SYSTEMS_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_DATABASE_SYSTEMS_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_database_systems& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_model_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_model_properties_io.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/io/orm_model_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_model_properties_io.hpp
index 89806ceba..0637bb8c1 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_model_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_model_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_MODEL_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ORM_MODEL_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_MODEL_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_MODEL_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::orm_model_properties& v);
+     const dogen::yarn::meta_model::orm_model_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_module_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_module_properties_io.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/io/orm_module_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_module_properties_io.hpp
index 29a789cd2..fcb2e2ad0 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_module_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_module_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_MODULE_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ORM_MODULE_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_MODULE_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_MODULE_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::orm_module_properties& v);
+     const dogen::yarn::meta_model::orm_module_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_object_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_object_properties_io.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/io/orm_object_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_object_properties_io.hpp
index 886d2ac79..2241521e7 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_object_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_object_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_OBJECT_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ORM_OBJECT_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_OBJECT_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_OBJECT_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::orm_object_properties& v);
+     const dogen::yarn::meta_model::orm_object_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/orm_primitive_properties_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/io/orm_primitive_properties_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp
index 9b83dbcf6..631b09850 100644
--- a/projects/yarn/include/dogen/yarn/io/orm_primitive_properties_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_ORM_PRIMITIVE_PROPERTIES_IO_HPP
-#define DOGEN_YARN_IO_ORM_PRIMITIVE_PROPERTIES_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_ORM_PRIMITIVE_PROPERTIES_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_ORM_PRIMITIVE_PROPERTIES_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::orm_primitive_properties& v);
+     const dogen::yarn::meta_model::orm_primitive_properties& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/primitive_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/primitive_io.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/io/primitive_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/primitive_io.hpp
index d3ec5e914..a3bb21f2e 100644
--- a/projects/yarn/include/dogen/yarn/io/primitive_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/primitive_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_PRIMITIVE_IO_HPP
-#define DOGEN_YARN_IO_PRIMITIVE_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_PRIMITIVE_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_PRIMITIVE_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/primitive.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::primitive& v);
+     const dogen::yarn::meta_model::primitive& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/type_parameters_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/type_parameters_io.hpp
similarity index 80%
rename from projects/yarn/include/dogen/yarn/io/type_parameters_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/type_parameters_io.hpp
index 11d4b0a31..d5a96a2bb 100644
--- a/projects/yarn/include/dogen/yarn/io/type_parameters_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/type_parameters_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_TYPE_PARAMETERS_IO_HPP
-#define DOGEN_YARN_IO_TYPE_PARAMETERS_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_TYPE_PARAMETERS_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_TYPE_PARAMETERS_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::type_parameters& v);
+     const dogen::yarn::meta_model::type_parameters& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/io/visitor_io.hpp b/projects/yarn/include/dogen/yarn/io/meta_model/visitor_io.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/io/visitor_io.hpp
rename to projects/yarn/include/dogen/yarn/io/meta_model/visitor_io.hpp
index 7564366cd..5198f00c2 100644
--- a/projects/yarn/include/dogen/yarn/io/visitor_io.hpp
+++ b/projects/yarn/include/dogen/yarn/io/meta_model/visitor_io.hpp
@@ -18,23 +18,24 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_IO_VISITOR_IO_HPP
-#define DOGEN_YARN_IO_VISITOR_IO_HPP
+#ifndef DOGEN_YARN_IO_META_MODEL_VISITOR_IO_HPP
+#define DOGEN_YARN_IO_META_MODEL_VISITOR_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <iosfwd>
-#include "dogen/yarn/types/visitor.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream&
 operator<<(std::ostream& s,
-     const dogen::yarn::visitor& v);
+     const dogen::yarn::meta_model::visitor& v);
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/all_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/all_ser.hpp
index d54bc9267..12c1d36a4 100644
--- a/projects/yarn/include/dogen/yarn/serialization/all_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/all_ser.hpp
@@ -25,47 +25,47 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/model_ser.hpp"
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/object_ser.hpp"
-#include "dogen/yarn/serialization/builtin_ser.hpp"
-#include "dogen/yarn/serialization/concept_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/visitor_ser.hpp"
-#include "dogen/yarn/serialization/location_ser.hpp"
-#include "dogen/yarn/serialization/attribute_ser.hpp"
-#include "dogen/yarn/serialization/exception_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
-#include "dogen/yarn/serialization/name_tree_ser.hpp"
-#include "dogen/yarn/serialization/primitive_ser.hpp"
-#include "dogen/yarn/serialization/enumerator_ser.hpp"
-#include "dogen/yarn/serialization/enumeration_ser.hpp"
 #include "dogen/yarn/serialization/helpers/node_ser.hpp"
-#include "dogen/yarn/serialization/letter_cases_ser.hpp"
-#include "dogen/yarn/serialization/object_types_ser.hpp"
-#include "dogen/yarn/serialization/origin_types_ser.hpp"
 #include "dogen/yarn/serialization/helpers/indices_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_ser.hpp"
-#include "dogen/yarn/serialization/type_parameters_ser.hpp"
-#include "dogen/yarn/serialization/formatting_styles_ser.hpp"
-#include "dogen/yarn/serialization/element_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/model_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_ser.hpp"
 #include "dogen/yarn/serialization/helpers/separators_ser.hpp"
-#include "dogen/yarn/serialization/intermediate_model_ser.hpp"
-#include "dogen/yarn/serialization/artefact_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_set_ser.hpp"
-#include "dogen/yarn/serialization/orm_database_systems_ser.hpp"
-#include "dogen/yarn/serialization/orm_model_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/location_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_tree_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_value_ser.hpp"
-#include "dogen/yarn/serialization/orm_module_properties_ser.hpp"
-#include "dogen/yarn/serialization/orm_object_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumerator_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_actions_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_context_ser.hpp"
-#include "dogen/yarn/serialization/orm_attribute_properties_ser.hpp"
-#include "dogen/yarn/serialization/orm_primitive_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/letter_cases_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/origin_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/type_parameters_ser.hpp"
 #include "dogen/yarn/serialization/helpers/decomposition_result_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/formatting_styles_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_set_repository_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp"
 #include "dogen/yarn/serialization/transforms/code_generation_output_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp"
 #include "dogen/yarn/serialization/transforms/exogenous_transform_types_ser.hpp"
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/exception_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/exception_fwd_ser.hpp
deleted file mode 100644
index 509b0984f..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/exception_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_EXCEPTION_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_EXCEPTION_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/exception_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::exception& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::exception& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/location_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/location_fwd_ser.hpp
deleted file mode 100644
index 024225b87..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/location_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_LOCATION_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_LOCATION_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/location_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::location& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::location& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/location_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/location_ser.hpp
deleted file mode 100644
index 598b21f09..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/location_ser.hpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_LOCATION_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_LOCATION_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/location.hpp"
-
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::location)
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar, const dogen::yarn::location& v, unsigned int version);
-
-template<typename Archive>
-void load(Archive& ar, dogen::yarn::location& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_fwd_ser.hpp
new file mode 100644
index 000000000..3f174c4b5
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ARTEFACT_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ARTEFACT_PROPERTIES_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/artefact_properties_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/artefact_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/serialization/artefact_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp
index 6f5c307b7..fb122b0e6 100644
--- a/projects/yarn/include/dogen/yarn/serialization/artefact_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ARTEFACT_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ARTEFACT_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ARTEFACT_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ARTEFACT_PROPERTIES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/artefact_properties.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::artefact_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::artefact_properties)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_object_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/orm_object_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_fwd_ser.hpp
index c1ca8169f..44968f697 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_object_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_OBJECT_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_OBJECT_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ATTRIBUTE_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ATTRIBUTE_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_object_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/attribute_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_module_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_ser.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/serialization/orm_module_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_ser.hpp
index 26e312895..3200099d8 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_module_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/attribute_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_MODULE_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_MODULE_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ATTRIBUTE_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ATTRIBUTE_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::orm_module_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::attribute)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/artefact_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/artefact_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_fwd_ser.hpp
index bdeaa9390..6419ce65a 100644
--- a/projects/yarn/include/dogen/yarn/serialization/artefact_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ARTEFACT_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ARTEFACT_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_BUILTIN_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_BUILTIN_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/artefact_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/builtin_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/builtin_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/builtin_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_ser.hpp
index abeb5805a..b70a18737 100644
--- a/projects/yarn/include/dogen/yarn/serialization/builtin_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/builtin_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_BUILTIN_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_BUILTIN_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_BUILTIN_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_BUILTIN_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/builtin.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::builtin
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::builtin
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::builtin)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::builtin)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::builtin& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::builtin& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/concept_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/concept_fwd_ser.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/serialization/concept_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/concept_fwd_ser.hpp
index e57913603..2f3491b35 100644
--- a/projects/yarn/include/dogen/yarn/serialization/concept_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/concept_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_CONCEPT_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_CONCEPT_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_CONCEPT_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_CONCEPT_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/concept_fwd.hpp"
+#include "dogen/yarn/types/meta_model/concept_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::concept& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::concept& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/concept_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/concept_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/concept_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/concept_ser.hpp
index b771270c8..fcb682239 100644
--- a/projects/yarn/include/dogen/yarn/serialization/concept_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/concept_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_CONCEPT_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_CONCEPT_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_CONCEPT_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_CONCEPT_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/concept.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::concept
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::concept
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::concept)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::concept)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::concept& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::concept& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/element_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_fwd_ser.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/serialization/element_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/element_fwd_ser.hpp
index 85de93103..2326f7a4a 100644
--- a/projects/yarn/include/dogen/yarn/serialization/element_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ELEMENT_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ELEMENT_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/element_fwd.hpp"
+#include "dogen/yarn/types/meta_model/element_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::element& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::element& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_fwd_ser.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_fwd_ser.hpp
index 43f64f060..50ea4ed77 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_ATTRIBUTE_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_ATTRIBUTE_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_PROPERTIES_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_attribute_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/element_properties_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_ser.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_ser.hpp
index 8b4e1850e..f28fcb038 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_attribute_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_properties_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_ATTRIBUTE_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_ATTRIBUTE_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_PROPERTIES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::orm_attribute_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::element_properties)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/element_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_ser.hpp
similarity index 70%
rename from projects/yarn/include/dogen/yarn/serialization/element_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/element_ser.hpp
index 84b453214..c87b1bf8f 100644
--- a/projects/yarn/include/dogen/yarn/serialization/element_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ELEMENT_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ELEMENT_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,19 +27,19 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/serialization/assume_abstract.hpp>
-#include "dogen/yarn/types/element.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::element)
-BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::yarn::element)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::element)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::yarn::meta_model::element)
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::element& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::element& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/element_visitor_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_visitor_fwd_ser.hpp
new file mode 100644
index 000000000..cf4174bfa
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/element_visitor_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_VISITOR_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ELEMENT_VISITOR_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/element_visitor_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::element_visitor& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::element_visitor& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/attribute_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_fwd_ser.hpp
similarity index 73%
rename from projects/yarn/include/dogen/yarn/serialization/attribute_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_fwd_ser.hpp
index 23bd27942..e64b5eec5 100644
--- a/projects/yarn/include/dogen/yarn/serialization/attribute_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ATTRIBUTE_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ATTRIBUTE_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATION_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATION_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/attribute_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumeration_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::attribute& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::attribute& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/enumeration_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_ser.hpp
similarity index 70%
rename from projects/yarn/include/dogen/yarn/serialization/enumeration_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_ser.hpp
index dc6887e6e..3af952ab8 100644
--- a/projects/yarn/include/dogen/yarn/serialization/enumeration_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumeration_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ENUMERATION_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ENUMERATION_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATION_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATION_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::enumeration
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::enumeration
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::enumeration)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::enumeration)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::enumeration& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::enumeration& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/builtin_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_fwd_ser.hpp
similarity index 73%
rename from projects/yarn/include/dogen/yarn/serialization/builtin_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_fwd_ser.hpp
index e7a3384d0..fbaf7ac9e 100644
--- a/projects/yarn/include/dogen/yarn/serialization/builtin_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_BUILTIN_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_BUILTIN_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATOR_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATOR_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/builtin_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumerator_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::builtin& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::builtin& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/element_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/element_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_ser.hpp
index 2cec82b21..335381fea 100644
--- a/projects/yarn/include/dogen/yarn/serialization/element_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/enumerator_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ELEMENT_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ELEMENT_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATOR_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ENUMERATOR_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::element_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::enumerator)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::element_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::element_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_module_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/exception_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/orm_module_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/exception_fwd_ser.hpp
index 68d0e4a50..847893333 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_module_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/exception_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_MODULE_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_MODULE_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_EXCEPTION_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_EXCEPTION_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_module_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/exception_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/exception_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/exception_ser.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/serialization/exception_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/exception_ser.hpp
index 37500a39a..8d487178c 100644
--- a/projects/yarn/include/dogen/yarn/serialization/exception_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/exception_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_EXCEPTION_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_EXCEPTION_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_EXCEPTION_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_EXCEPTION_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/exception.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::exception
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::exception
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::exception)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::exception)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::exception& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::exception& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/formatting_styles_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/formatting_styles_ser.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/serialization/formatting_styles_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/formatting_styles_ser.hpp
index d5f5f3a76..24903e085 100644
--- a/projects/yarn/include/dogen/yarn/serialization/formatting_styles_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/formatting_styles_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_FORMATTING_STYLES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_FORMATTING_STYLES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_FORMATTING_STYLES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_FORMATTING_STYLES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/formatting_styles.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::formatting_styles& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::formatting_styles& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("formatting_styles", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_fwd_ser.hpp
new file mode 100644
index 000000000..248751d3c
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_INTERMEDIATE_MODEL_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_INTERMEDIATE_MODEL_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/intermediate_model_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/intermediate_model_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/serialization/intermediate_model_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp
index cd5895ab7..c4dc5f9f8 100644
--- a/projects/yarn/include/dogen/yarn/serialization/intermediate_model_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_INTERMEDIATE_MODEL_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_INTERMEDIATE_MODEL_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_INTERMEDIATE_MODEL_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_INTERMEDIATE_MODEL_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::intermediate_model)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::intermediate_model)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/languages_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/languages_ser.hpp
similarity index 80%
rename from projects/yarn/include/dogen/yarn/serialization/languages_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/languages_ser.hpp
index 0f8f8aa1c..390eb91d8 100644
--- a/projects/yarn/include/dogen/yarn/serialization/languages_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/languages_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_LANGUAGES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_LANGUAGES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_LANGUAGES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_LANGUAGES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::languages& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::languages& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("languages", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/letter_cases_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/letter_cases_ser.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/serialization/letter_cases_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/letter_cases_ser.hpp
index 819f15f3d..3fc60c77f 100644
--- a/projects/yarn/include/dogen/yarn/serialization/letter_cases_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/letter_cases_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_LETTER_CASES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_LETTER_CASES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_LETTER_CASES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_LETTER_CASES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::letter_cases& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::letter_cases& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("letter_cases", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_model_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/location_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/orm_model_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/location_fwd_ser.hpp
index ca4b6c62e..b247c5d42 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_model_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/location_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_MODEL_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_MODEL_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_LOCATION_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_LOCATION_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_model_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/location_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_model_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/location_ser.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/serialization/orm_model_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/location_ser.hpp
index e0606629e..afcdf5784 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_model_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/location_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_MODEL_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_MODEL_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_LOCATION_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_LOCATION_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::orm_model_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::location)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/enumeration_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/model_fwd_ser.hpp
similarity index 76%
rename from projects/yarn/include/dogen/yarn/serialization/enumeration_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/model_fwd_ser.hpp
index 1aaee78ff..656e14191 100644
--- a/projects/yarn/include/dogen/yarn/serialization/enumeration_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/model_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ENUMERATION_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ENUMERATION_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_MODEL_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_MODEL_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/enumeration_fwd.hpp"
+#include "dogen/yarn/types/meta_model/model_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::enumeration& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::enumeration& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/model_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/model_ser.hpp
similarity index 73%
rename from projects/yarn/include/dogen/yarn/serialization/model_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/model_ser.hpp
index 1ab316f36..9fb3a24c9 100644
--- a/projects/yarn/include/dogen/yarn/serialization/model_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/model_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_MODEL_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_MODEL_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_MODEL_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_MODEL_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::model)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::model)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::model& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::model& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/element_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/module_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/element_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/module_fwd_ser.hpp
index eeab9cd0c..c8272137b 100644
--- a/projects/yarn/include/dogen/yarn/serialization/element_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/module_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ELEMENT_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ELEMENT_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_MODULE_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_MODULE_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/element_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/module_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::element_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::element_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/module_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/module_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/module_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/module_ser.hpp
index 14f80c00c..ebc6105dd 100644
--- a/projects/yarn/include/dogen/yarn/serialization/module_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/module_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_MODULE_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_MODULE_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_MODULE_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_MODULE_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/module.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::module
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::module
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::module)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::module)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::module& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::module& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/enumerator_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_fwd_ser.hpp
similarity index 76%
rename from projects/yarn/include/dogen/yarn/serialization/enumerator_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/name_fwd_ser.hpp
index 8d47e26f6..d931ced0d 100644
--- a/projects/yarn/include/dogen/yarn/serialization/enumerator_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ENUMERATOR_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ENUMERATOR_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/enumerator_fwd.hpp"
+#include "dogen/yarn/types/meta_model/name_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::enumerator& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::enumerator& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/enumerator_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_ser.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/serialization/enumerator_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/name_ser.hpp
index c9bae22ff..03a544646 100644
--- a/projects/yarn/include/dogen/yarn/serialization/enumerator_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ENUMERATOR_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ENUMERATOR_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/enumerator.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::enumerator)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::name)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::enumerator& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::enumerator& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/element_visitor_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_fwd_ser.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/serialization/element_visitor_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_fwd_ser.hpp
index 968e9b3ab..2477a9e29 100644
--- a/projects/yarn/include/dogen/yarn/serialization/element_visitor_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ELEMENT_VISITOR_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ELEMENT_VISITOR_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_TREE_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_TREE_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/element_visitor_fwd.hpp"
+#include "dogen/yarn/types/meta_model/name_tree_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::element_visitor& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::element_visitor& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_object_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_ser.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/serialization/orm_object_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_ser.hpp
index d69a94df9..67f886571 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_object_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/name_tree_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_OBJECT_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_OBJECT_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_TREE_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_NAME_TREE_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::orm_object_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::name_tree)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/intermediate_model_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_fwd_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/intermediate_model_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/object_fwd_ser.hpp
index bbc2bb4c8..dbe856043 100644
--- a/projects/yarn/include/dogen/yarn/serialization/intermediate_model_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_INTERMEDIATE_MODEL_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_INTERMEDIATE_MODEL_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model_fwd.hpp"
+#include "dogen/yarn/types/meta_model/object_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/object_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/object_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/object_ser.hpp
index 4e08e23cf..877371c7a 100644
--- a/projects/yarn/include/dogen/yarn/serialization/object_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_OBJECT_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_OBJECT_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::object
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::object
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::object)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::object)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::object& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::object& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/object_types_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_types_ser.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/serialization/object_types_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/object_types_ser.hpp
index 5706c146f..bbc020521 100644
--- a/projects/yarn/include/dogen/yarn/serialization/object_types_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/object_types_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_OBJECT_TYPES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_OBJECT_TYPES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_TYPES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_OBJECT_TYPES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/object_types.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::object_types& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::object_types& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("object_types", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/origin_types_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/origin_types_ser.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/serialization/origin_types_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/origin_types_ser.hpp
index 4abb53eca..35502efe1 100644
--- a/projects/yarn/include/dogen/yarn/serialization/origin_types_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/origin_types_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORIGIN_TYPES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORIGIN_TYPES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORIGIN_TYPES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORIGIN_TYPES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::origin_types& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::origin_types& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("origin_types", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_fwd_ser.hpp
new file mode 100644
index 000000000..55b593c3f
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/orm_attribute_properties_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp
new file mode 100644
index 000000000..5e6427ddc
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::orm_attribute_properties)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_database_systems_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/serialization/orm_database_systems_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp
index 7e87c0c3d..3be35cd1d 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_database_systems_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp
@@ -18,18 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_DATABASE_SYSTEMS_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_DATABASE_SYSTEMS_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_DATABASE_SYSTEMS_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_DATABASE_SYSTEMS_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/nvp.hpp>
-#include "dogen/yarn/types/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
 
 template<class Archive>
-void serialize(Archive& ar, dogen::yarn::orm_database_systems& v, unsigned int /*version*/){
+void serialize(Archive& ar, dogen::yarn::meta_model::orm_database_systems& v, unsigned int /*version*/){
     using boost::serialization::make_nvp;
     ar & make_nvp("orm_database_systems", v);
 }
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_fwd_ser.hpp
new file mode 100644
index 000000000..a7297a75e
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODEL_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODEL_PROPERTIES_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/orm_model_properties_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/attribute_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/serialization/attribute_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp
index e66449206..c6dffbed9 100644
--- a/projects/yarn/include/dogen/yarn/serialization/attribute_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ATTRIBUTE_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ATTRIBUTE_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODEL_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODEL_PROPERTIES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::attribute)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::orm_model_properties)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::attribute& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::attribute& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_fwd_ser.hpp
new file mode 100644
index 000000000..3f50f5ed2
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODULE_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODULE_PROPERTIES_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/orm_module_properties_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp
new file mode 100644
index 000000000..a3056203b
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODULE_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_MODULE_PROPERTIES_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::orm_module_properties)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_fwd_ser.hpp
new file mode 100644
index 000000000..ff202ca16
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_OBJECT_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_OBJECT_PROPERTIES_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/orm_object_properties_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp
new file mode 100644
index 000000000..e1d142e33
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_OBJECT_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_OBJECT_PROPERTIES_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::orm_object_properties)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_fwd_ser.hpp
similarity index 70%
rename from projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_fwd_ser.hpp
index 79f014978..88da0f1a8 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_PRIMITIVE_PROPERTIES_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_PRIMITIVE_PROPERTIES_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_PRIMITIVE_PROPERTIES_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_PRIMITIVE_PROPERTIES_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_primitive_properties_fwd.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp
similarity index 68%
rename from projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp
index e901c53bc..c77a015c5 100644
--- a/projects/yarn/include/dogen/yarn/serialization/orm_primitive_properties_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_ORM_PRIMITIVE_PROPERTIES_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_ORM_PRIMITIVE_PROPERTIES_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_PRIMITIVE_PROPERTIES_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_ORM_PRIMITIVE_PROPERTIES_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::orm_primitive_properties)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::orm_primitive_properties)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/type_parameters_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_fwd_ser.hpp
similarity index 75%
rename from projects/yarn/include/dogen/yarn/serialization/type_parameters_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_fwd_ser.hpp
index fb8d19438..3a78d86b4 100644
--- a/projects/yarn/include/dogen/yarn/serialization/type_parameters_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_TYPE_PARAMETERS_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_TYPE_PARAMETERS_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_PRIMITIVE_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_PRIMITIVE_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/type_parameters_fwd.hpp"
+#include "dogen/yarn/types/meta_model/primitive_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/primitive_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_ser.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/serialization/primitive_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_ser.hpp
index 30e79d3cf..ba831788b 100644
--- a/projects/yarn/include/dogen/yarn/serialization/primitive_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/primitive_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_PRIMITIVE_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_PRIMITIVE_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_PRIMITIVE_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_PRIMITIVE_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/primitive.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::primitive
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::primitive
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::primitive)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::primitive)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::primitive& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::primitive& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_fwd_ser.hpp
new file mode 100644
index 000000000..59bb631ac
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_TYPE_PARAMETERS_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_TYPE_PARAMETERS_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/type_parameters_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/type_parameters_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_ser.hpp
similarity index 70%
rename from projects/yarn/include/dogen/yarn/serialization/type_parameters_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_ser.hpp
index 6e591ce9c..1c6949f7b 100644
--- a/projects/yarn/include/dogen/yarn/serialization/type_parameters_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/type_parameters_ser.hpp
@@ -18,25 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_TYPE_PARAMETERS_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_TYPE_PARAMETERS_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_TYPE_PARAMETERS_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_TYPE_PARAMETERS_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::type_parameters)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::type_parameters)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/visitor_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_fwd_ser.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/serialization/visitor_fwd_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_fwd_ser.hpp
index 93915d58e..3be982d1c 100644
--- a/projects/yarn/include/dogen/yarn/serialization/visitor_fwd_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_fwd_ser.hpp
@@ -18,23 +18,23 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_VISITOR_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_VISITOR_FWD_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_VISITOR_FWD_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_VISITOR_FWD_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/visitor_fwd.hpp"
+#include "dogen/yarn/types/meta_model/visitor_fwd.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<class Archive>
-void save(Archive& ar, const dogen::yarn::visitor& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 template<class Archive>
-void load(Archive& ar, dogen::yarn::visitor& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/visitor_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_ser.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/serialization/visitor_ser.hpp
rename to projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_ser.hpp
index 77b97ab97..db4e2c198 100644
--- a/projects/yarn/include/dogen/yarn/serialization/visitor_ser.hpp
+++ b/projects/yarn/include/dogen/yarn/serialization/meta_model/visitor_ser.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_SERIALIZATION_VISITOR_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_VISITOR_SER_HPP
+#ifndef DOGEN_YARN_SERIALIZATION_META_MODEL_VISITOR_SER_HPP
+#define DOGEN_YARN_SERIALIZATION_META_MODEL_VISITOR_SER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,27 +27,27 @@
 
 #include <boost/serialization/split_free.hpp>
 #include <boost/type_traits/is_virtual_base_of.hpp>
-#include "dogen/yarn/types/visitor.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 
 namespace boost {
 
 template<>struct
 is_virtual_base_of<
-    dogen::yarn::element,
-    dogen::yarn::visitor
+    dogen::yarn::meta_model::element,
+    dogen::yarn::meta_model::visitor
 > : public mpl::true_ {};
 
 }
 
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::visitor)
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::meta_model::visitor)
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar, const dogen::yarn::visitor& v, unsigned int version);
+void save(Archive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 template<typename Archive>
-void load(Archive& ar, dogen::yarn::visitor& v, unsigned int version);
+void load(Archive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 } }
 
diff --git a/projects/yarn/include/dogen/yarn/serialization/model_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/model_fwd_ser.hpp
deleted file mode 100644
index f18fb5016..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/model_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_MODEL_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_MODEL_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/model_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::model& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::model& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/module_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/module_fwd_ser.hpp
deleted file mode 100644
index b739b95df..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/module_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_MODULE_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_MODULE_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/module_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::module& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::module& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/name_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/name_fwd_ser.hpp
deleted file mode 100644
index d5863ee37..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/name_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_NAME_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_NAME_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/name_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::name& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::name& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/name_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/name_ser.hpp
deleted file mode 100644
index 95b4ded76..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/name_ser.hpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_NAME_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_NAME_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/name.hpp"
-
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::name)
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar, const dogen::yarn::name& v, unsigned int version);
-
-template<typename Archive>
-void load(Archive& ar, dogen::yarn::name& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/name_tree_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/name_tree_fwd_ser.hpp
deleted file mode 100644
index 0cb9c942a..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/name_tree_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_NAME_TREE_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_NAME_TREE_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/name_tree_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::name_tree& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/name_tree_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/name_tree_ser.hpp
deleted file mode 100644
index 2cf39bb0a..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/name_tree_ser.hpp
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_NAME_TREE_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_NAME_TREE_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <boost/serialization/split_free.hpp>
-#include "dogen/yarn/types/name_tree.hpp"
-
-BOOST_SERIALIZATION_SPLIT_FREE(dogen::yarn::name_tree)
-namespace boost {
-namespace serialization {
-
-template<typename Archive>
-void save(Archive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-
-template<typename Archive>
-void load(Archive& ar, dogen::yarn::name_tree& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/object_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/object_fwd_ser.hpp
deleted file mode 100644
index 396a6e1ad..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/object_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_OBJECT_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_OBJECT_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/object_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::object& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::object& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/serialization/primitive_fwd_ser.hpp b/projects/yarn/include/dogen/yarn/serialization/primitive_fwd_ser.hpp
deleted file mode 100644
index 5e72bce70..000000000
--- a/projects/yarn/include/dogen/yarn/serialization/primitive_fwd_ser.hpp
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_SERIALIZATION_PRIMITIVE_FWD_SER_HPP
-#define DOGEN_YARN_SERIALIZATION_PRIMITIVE_FWD_SER_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/primitive_fwd.hpp"
-
-namespace boost {
-namespace serialization {
-
-template<class Archive>
-void save(Archive& ar, const dogen::yarn::primitive& v, unsigned int version);
-
-template<class Archive>
-void load(Archive& ar, dogen::yarn::primitive& v, unsigned int version);
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/test/mock_intermediate_model_factory.hpp b/projects/yarn/include/dogen/yarn/test/mock_intermediate_model_factory.hpp
index 0f772f633..25a5bd61e 100644
--- a/projects/yarn/include/dogen/yarn/test/mock_intermediate_model_factory.hpp
+++ b/projects/yarn/include/dogen/yarn/test/mock_intermediate_model_factory.hpp
@@ -29,7 +29,7 @@
 #include <functional>
 #include <boost/optional.hpp>
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/annotations/types/annotation.hpp"
 
 namespace dogen {
@@ -196,7 +196,7 @@ public:
     /**
      * @brief Returns the model name derived from n.
      */
-    name model_name(const unsigned int n = 0) const;
+    meta_model::name model_name(const unsigned int n = 0) const;
 
 public:
     /**
@@ -204,7 +204,7 @@ public:
      * naming convention for model @e n.
      */
     /**@{*/
-    bool is_model_n(const unsigned int n, const name& name) const;
+    bool is_model_n(const unsigned int n, const meta_model::name& name) const;
     bool is_model_n(const unsigned int n, const std::string& name) const;
     /**@}*/
 
@@ -213,7 +213,8 @@ public:
      * naming convention for type @e n.
      */
     /**@{*/
-    bool is_type_name_n(const unsigned int n, const name& name) const;
+    bool is_type_name_n(const unsigned int n,
+        const meta_model::name& name) const;
     bool is_type_name_n(const unsigned int n, const std::string& name) const;
     /**@}*/
 
@@ -221,7 +222,8 @@ public:
      * @brief Returns true if the name matches the mock model factory
      * naming convention for module @e n.
      */
-    bool is_concept_name_n(const unsigned int n, const name& name) const;
+    bool is_concept_name_n(const unsigned int n,
+        const meta_model::name& name) const;
 
     /**
      * @brief Returns true if the name matches the mock model factory
@@ -234,72 +236,80 @@ public:
      * naming convention for type @e n, and the yarn naming convention
      * for visitors.
      */
-    bool is_type_name_n_visitor(const unsigned int n, const name& name) const;
+    bool is_type_name_n_visitor(const unsigned int n,
+        const meta_model::name& name) const;
 
     /**
      * @brief If required, adds a module for the model.
      */
     void handle_model_module(const bool add_model_module,
-        intermediate_model& m) const;
+        meta_model::intermediate_model& m) const;
 
 public:
     /**
      * @brief Creates a built-in.
      */
-    builtin make_builtin(const unsigned int i, const name& model_name,
-        const origin_types ot, const unsigned int module_n = 0) const;
+    meta_model::builtin make_builtin(const unsigned int i,
+        const meta_model::name& model_name, const meta_model::origin_types ot,
+        const unsigned int module_n = 0) const;
 
     /**
      * @brief Create a value object.
      */
-    object make_value_object(const unsigned int i, const name& model_name,
-        const origin_types ot,
+    meta_model::object make_value_object(const unsigned int i,
+        const meta_model::name& model_name,
+        const meta_model::origin_types ot,
         const unsigned int module_n = 0) const;
 
     /**
      * @brief Create a value object with an attribute
      */
-    object make_value_object_with_attribute(const unsigned int i,
-        const name& model_name,
-        const origin_types ot,
+    meta_model::object make_value_object_with_attribute(const unsigned int i,
+        const meta_model::name& model_name,
+        const meta_model::origin_types ot,
         const unsigned int module_n = 0) const;
 
     /**
      * @brief Create a value object with a model name based on @e i.
      */
-    object make_value_object(unsigned int i, const origin_types ot,
+    meta_model::object make_value_object(unsigned int i,
+        const meta_model::origin_types ot,
         const unsigned int module_n = 0) const;
 
     /**
      * @brief Create a concept.
      */
-    concept make_concept(const unsigned int i, const name& model_name,
-        const origin_types ot) const;
+    meta_model::concept make_concept(const unsigned int i,
+        const meta_model::name& model_name,
+        const meta_model::origin_types ot) const;
 
     /**
      * @brief Create an enumeration.
      */
-    enumeration make_enumeration(const unsigned int i,
-        const name& model_name, const origin_types ot,
+    meta_model::enumeration make_enumeration(const unsigned int i,
+        const meta_model::name& model_name, const meta_model::origin_types ot,
         const unsigned int module_n = 0) const;
 
     /**
      * @brief Create an exception.
      */
-    exception make_exception(const unsigned int i, const name& model_name,
-        const origin_types ot, const unsigned int module_n = 0) const;
+    meta_model::exception make_exception(const unsigned int i,
+        const meta_model::name& model_name,
+        const meta_model::origin_types ot,
+        const unsigned int module_n = 0) const;
 
     /**
      * @brief Create a module from a name.
      */
-    module make_module(const name& n, const origin_types ot,
+    meta_model::module make_module(const meta_model::name& n,
+        const meta_model::origin_types ot,
         const std::string& documentation = std::string()) const;
 
     /**
      * @brief Create a module from its components.
      */
-    module make_module(const unsigned int module_n,
-        const name& model_name, const origin_types ot,
+    meta_model::module make_module(const unsigned int module_n,
+        const meta_model::name& model_name, const meta_model::origin_types ot,
         const std::list<std::string>& internal_modules,
         const std::string& documentation) const;
 
@@ -307,22 +317,22 @@ public:
     /**
      * @brief Returns a name derived from the input parameters
      */
-    name make_name(const unsigned int model_n = 0,
+    meta_model::name make_name(const unsigned int model_n = 0,
         const unsigned int simple_n = 0) const;
 
     /**
      * @brief Builds a model with no types, concepts or modules.
      */
-    intermediate_model make_empty_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model make_empty_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const unsigned int n = 0, const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a name derived from n, containing a
      * single type with a name also deriving from n.
      */
-    intermediate_model make_single_type_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model make_single_type_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const unsigned int n = 0,
         const object_types objt = object_types::value_object,
         const bool add_model_module = false) const;
@@ -331,8 +341,8 @@ public:
      * @brief Builds a model with a name derived from n, containing a
      * single type with a name also deriving from n, inside mod_n modules.
      */
-    intermediate_model make_single_type_model_in_module(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model make_single_type_model_in_module(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const unsigned int n = 0,
         const object_types objt = object_types::value_object,
         const unsigned int mod_n = 0,
@@ -342,10 +352,10 @@ public:
      * @brief Builds a model with a name derived from n, and a number
      * of types determined by type_n, inside mod_n module.
      */
-    intermediate_model make_multi_type_model(
+    meta_model::intermediate_model make_multi_type_model(
         const unsigned int n,
         const unsigned int type_n,
-        const origin_types ot = origin_types::target,
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const object_types objt = object_types::value_object,
         const unsigned int mod_n = 0,
         const bool add_model_module = false) const;
@@ -355,31 +365,33 @@ public:
      * @brief Builds a model with a concept, and a type that models
      * it.
      */
-    intermediate_model make_single_concept_model(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_single_concept_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a concept that refines another
      * concept, and two types that model each concept.
      */
-    intermediate_model make_first_degree_concepts_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model make_first_degree_concepts_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const unsigned int n = 0, const bool add_model_module = false) const;
 
     /**
      * @brief Same as first degree but with 2 levels of inheritance.
      */
-    intermediate_model make_second_degree_concepts_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model make_second_degree_concepts_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const unsigned int n = 0, const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with two base concepts and a concept that
      * refines both.
      */
-    intermediate_model make_multiple_inheritance_concepts_model(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_multiple_inheritance_concepts_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
@@ -387,47 +399,55 @@ public:
      * refine it, and a concept that refines both of these. Finally a
      * type last concept.
      */
-    intermediate_model make_diamond_inheritance_concepts_model(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_diamond_inheritance_concepts_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a child object with a parent that
      * models a concept.
      */
-    intermediate_model make_object_with_parent_that_models_concept(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_object_with_parent_that_models_concept(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a child object with a parent that
      * models a concept that refines a concept.
      */
-    intermediate_model make_object_with_parent_that_models_a_refined_concept(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model
+    make_object_with_parent_that_models_a_refined_concept(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a concept that refines a
      * non-existing concept.
      */
-    intermediate_model make_concept_that_refines_missing_concept(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_concept_that_refines_missing_concept(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief Builds a model with a concept that refines a
      * non-existing concept.
      */
-    intermediate_model make_object_that_models_missing_concept(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model make_object_that_models_missing_concept(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
     /**
      * @brief object that models concept with missing parent.
      */
-    intermediate_model make_object_that_models_concept_with_missing_parent(
-        const origin_types ot = origin_types::target, const unsigned int n = 0,
+    meta_model::intermediate_model
+    make_object_that_models_concept_with_missing_parent(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
+        const unsigned int n = 0,
         const bool add_model_module = false) const;
 
 public:
@@ -435,16 +455,17 @@ public:
      * @brief Scenario: object that exercises both weak and regular
      * associations.
      */
-    intermediate_model object_with_both_transparent_and_opaque_associations(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model
+    object_with_both_transparent_and_opaque_associations(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with single attribute of a type existent in
      * current model.
      */
-    intermediate_model object_with_attribute(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_attribute(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const object_types objt = object_types::value_object,
         const attribute_types pt = attribute_types::value_object,
         const bool add_model_module = false) const;
@@ -453,52 +474,53 @@ public:
      * @brief Scenario: object with single attribute of a type existent in
      * a second model.
      */
-    std::array<intermediate_model, 2>
+    std::array<meta_model::intermediate_model, 2>
     object_with_attribute_type_in_different_model(
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with attribute of missing type.
      */
-    intermediate_model object_with_missing_attribute_type(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_missing_attribute_type(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with parent in current model.
      */
-    intermediate_model object_with_parent_in_the_same_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_parent_in_the_same_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool has_attribute = false,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with missing parent in current model.
      */
-    intermediate_model object_with_missing_parent_in_the_same_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_missing_parent_in_the_same_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with a parent in a second model.
      */
-    std::array<intermediate_model, 2>
+    std::array<meta_model::intermediate_model, 2>
     object_with_parent_in_different_models(
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with three children.
      */
-    intermediate_model object_with_three_children_in_same_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_three_children_in_same_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object with three levels deep in inheritance tree
      * in current model.
      */
-    intermediate_model object_with_third_degree_parent_in_same_model(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model
+    object_with_third_degree_parent_in_same_model(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool has_attribute = false,
         const bool add_model_module = false) const;
 
@@ -506,15 +528,15 @@ public:
      * @brief Scenario: object with three levels deep in inheritance tree
      * has missing parent.
      */
-    intermediate_model object_with_third_degree_parent_missing(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model object_with_third_degree_parent_missing(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool add_model_module = false) const;
 
     /**
      * @brief Scenario: object three levels deep in inheritance tree,
      * with parents in different models.
      */
-    std::array<intermediate_model, 4>
+    std::array<meta_model::intermediate_model, 4>
     object_with_third_degree_parent_in_different_models(
         const bool add_model_module = false) const;
 
@@ -523,7 +545,7 @@ public:
      * with parents in different models and a missing top-level
      * parent.
      */
-    std::array<intermediate_model, 4>
+    std::array<meta_model::intermediate_model, 4>
     object_with_missing_third_degree_parent_in_different_models(
         const bool add_model_module = false) const;
 
@@ -535,8 +557,9 @@ public:
      * @param repeat_group if true, adds two instances of the group,
      * otherwise just one.
      */
-    intermediate_model object_with_group_of_attributes_of_different_types(
-        const origin_types ot = origin_types::target,
+    meta_model::intermediate_model
+    object_with_group_of_attributes_of_different_types(
+        const meta_model::origin_types ot = meta_model::origin_types::target,
         const bool repeat_group = false,
         const bool add_model_module = false) const;
 
diff --git a/projects/yarn/include/dogen/yarn/test/yarn_file_asserter.hpp b/projects/yarn/include/dogen/yarn/test/yarn_file_asserter.hpp
index be87c41ba..0a78c6b1a 100644
--- a/projects/yarn/include/dogen/yarn/test/yarn_file_asserter.hpp
+++ b/projects/yarn/include/dogen/yarn/test/yarn_file_asserter.hpp
@@ -25,7 +25,7 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/utility/test/file_asserter.hpp"
 
 namespace dogen {
@@ -43,7 +43,7 @@ public:
     virtual ~yarn_file_asserter() noexcept {}
 
 private:
-    intermediate_model read_xml(boost::filesystem::path path) const;
+    meta_model::intermediate_model read_xml(boost::filesystem::path path) const;
 
 public:
     virtual bool is_assertable(boost::filesystem::path path) const override;
diff --git a/projects/yarn/include/dogen/yarn/test_data/all_td.hpp b/projects/yarn/include/dogen/yarn/test_data/all_td.hpp
index 0bfb2008a..5efcbc305 100644
--- a/projects/yarn/include/dogen/yarn/test_data/all_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/all_td.hpp
@@ -25,47 +25,47 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/model_td.hpp"
-#include "dogen/yarn/test_data/module_td.hpp"
-#include "dogen/yarn/test_data/object_td.hpp"
-#include "dogen/yarn/test_data/builtin_td.hpp"
-#include "dogen/yarn/test_data/concept_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/visitor_td.hpp"
-#include "dogen/yarn/test_data/location_td.hpp"
-#include "dogen/yarn/test_data/attribute_td.hpp"
-#include "dogen/yarn/test_data/exception_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
-#include "dogen/yarn/test_data/name_tree_td.hpp"
-#include "dogen/yarn/test_data/primitive_td.hpp"
-#include "dogen/yarn/test_data/enumerator_td.hpp"
-#include "dogen/yarn/test_data/enumeration_td.hpp"
 #include "dogen/yarn/test_data/helpers/node_td.hpp"
-#include "dogen/yarn/test_data/letter_cases_td.hpp"
-#include "dogen/yarn/test_data/object_types_td.hpp"
-#include "dogen/yarn/test_data/origin_types_td.hpp"
 #include "dogen/yarn/test_data/helpers/indices_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_td.hpp"
-#include "dogen/yarn/test_data/type_parameters_td.hpp"
-#include "dogen/yarn/test_data/formatting_styles_td.hpp"
-#include "dogen/yarn/test_data/element_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/model_td.hpp"
+#include "dogen/yarn/test_data/meta_model/module_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_td.hpp"
 #include "dogen/yarn/test_data/helpers/separators_td.hpp"
-#include "dogen/yarn/test_data/intermediate_model_td.hpp"
-#include "dogen/yarn/test_data/artefact_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/builtin_td.hpp"
+#include "dogen/yarn/test_data/meta_model/concept_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/visitor_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_set_td.hpp"
-#include "dogen/yarn/test_data/orm_database_systems_td.hpp"
-#include "dogen/yarn/test_data/orm_model_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/location_td.hpp"
+#include "dogen/yarn/test_data/meta_model/attribute_td.hpp"
+#include "dogen/yarn/test_data/meta_model/exception_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_tree_td.hpp"
+#include "dogen/yarn/test_data/meta_model/primitive_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_value_td.hpp"
-#include "dogen/yarn/test_data/orm_module_properties_td.hpp"
-#include "dogen/yarn/test_data/orm_object_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumerator_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumeration_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_actions_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_context_td.hpp"
-#include "dogen/yarn/test_data/orm_attribute_properties_td.hpp"
-#include "dogen/yarn/test_data/orm_primitive_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/letter_cases_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/origin_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/type_parameters_td.hpp"
 #include "dogen/yarn/test_data/helpers/decomposition_result_td.hpp"
+#include "dogen/yarn/test_data/meta_model/formatting_styles_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/intermediate_model_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_set_repository_td.hpp"
+#include "dogen/yarn/test_data/meta_model/artefact_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp"
 #include "dogen/yarn/test_data/transforms/code_generation_output_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp"
 #include "dogen/yarn/test_data/transforms/exogenous_transform_types_td.hpp"
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/artefact_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/artefact_properties_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/artefact_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/artefact_properties_td.hpp
index 31482b9bf..b545295b2 100644
--- a/projects/yarn/include/dogen/yarn/test_data/artefact_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/artefact_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ARTEFACT_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ARTEFACT_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ARTEFACT_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ARTEFACT_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/artefact_properties.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class artefact_properties_generator {
 public:
     artefact_properties_generator();
 
 public:
-    typedef dogen::yarn::artefact_properties result_type;
+    typedef dogen::yarn::meta_model::artefact_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/attribute_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/attribute_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/attribute_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/attribute_td.hpp
index 8da25e473..904d66482 100644
--- a/projects/yarn/include/dogen/yarn/test_data/attribute_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/attribute_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ATTRIBUTE_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ATTRIBUTE_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ATTRIBUTE_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ATTRIBUTE_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class attribute_generator {
 public:
     attribute_generator();
 
 public:
-    typedef dogen::yarn::attribute result_type;
+    typedef dogen::yarn::meta_model::attribute result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/builtin_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/builtin_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/builtin_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/builtin_td.hpp
index 9b406646e..279da1dbe 100644
--- a/projects/yarn/include/dogen/yarn/test_data/builtin_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/builtin_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_BUILTIN_TD_HPP
-#define DOGEN_YARN_TEST_DATA_BUILTIN_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_BUILTIN_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_BUILTIN_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/builtin.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class builtin_generator {
 public:
     builtin_generator();
 
 public:
-    typedef dogen::yarn::builtin result_type;
+    typedef dogen::yarn::meta_model::builtin result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/concept_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/concept_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/concept_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/concept_td.hpp
index 47d9ac73a..e5ee55040 100644
--- a/projects/yarn/include/dogen/yarn/test_data/concept_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/concept_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_CONCEPT_TD_HPP
-#define DOGEN_YARN_TEST_DATA_CONCEPT_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_CONCEPT_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_CONCEPT_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/concept.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class concept_generator {
 public:
     concept_generator();
 
 public:
-    typedef dogen::yarn::concept result_type;
+    typedef dogen::yarn::meta_model::concept result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/element_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/element_properties_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/element_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/element_properties_td.hpp
index 2177afcb7..e784fb473 100644
--- a/projects/yarn/include/dogen/yarn/test_data/element_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/element_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ELEMENT_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ELEMENT_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ELEMENT_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ELEMENT_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element_properties_generator {
 public:
     element_properties_generator();
 
 public:
-    typedef dogen::yarn::element_properties result_type;
+    typedef dogen::yarn::meta_model::element_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/element_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/element_td.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/test_data/element_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/element_td.hpp
index 991bc3c12..5161362e3 100644
--- a/projects/yarn/include/dogen/yarn/test_data/element_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/element_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ELEMENT_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ELEMENT_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ELEMENT_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ELEMENT_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/element.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element_generator {
 public:
     element_generator();
 
 public:
-    typedef dogen::yarn::element result_type;
+    typedef dogen::yarn::meta_model::element result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -43,6 +44,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/enumeration_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/enumeration_td.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/test_data/enumeration_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/enumeration_td.hpp
index a9dab4a6c..c4bd29c27 100644
--- a/projects/yarn/include/dogen/yarn/test_data/enumeration_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/enumeration_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ENUMERATION_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ENUMERATION_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ENUMERATION_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ENUMERATION_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class enumeration_generator {
 public:
     enumeration_generator();
 
 public:
-    typedef dogen::yarn::enumeration result_type;
+    typedef dogen::yarn::meta_model::enumeration result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/enumerator_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/enumerator_td.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/test_data/enumerator_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/enumerator_td.hpp
index a1914c0b5..7084916f2 100644
--- a/projects/yarn/include/dogen/yarn/test_data/enumerator_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/enumerator_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ENUMERATOR_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ENUMERATOR_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ENUMERATOR_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ENUMERATOR_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/enumerator.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class enumerator_generator {
 public:
     enumerator_generator();
 
 public:
-    typedef dogen::yarn::enumerator result_type;
+    typedef dogen::yarn::meta_model::enumerator result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/exception_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/exception_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/exception_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/exception_td.hpp
index a02b6d4b3..741083dbd 100644
--- a/projects/yarn/include/dogen/yarn/test_data/exception_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/exception_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_EXCEPTION_TD_HPP
-#define DOGEN_YARN_TEST_DATA_EXCEPTION_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_EXCEPTION_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_EXCEPTION_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/exception.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class exception_generator {
 public:
     exception_generator();
 
 public:
-    typedef dogen::yarn::exception result_type;
+    typedef dogen::yarn::meta_model::exception result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/formatting_styles_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/formatting_styles_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/formatting_styles_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/formatting_styles_td.hpp
index 58f3a8103..4c25eb986 100644
--- a/projects/yarn/include/dogen/yarn/test_data/formatting_styles_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/formatting_styles_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_FORMATTING_STYLES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_FORMATTING_STYLES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_FORMATTING_STYLES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_FORMATTING_STYLES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/formatting_styles.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class formatting_styles_generator {
 public:
     formatting_styles_generator();
 
 public:
-    typedef dogen::yarn::formatting_styles result_type;
+    typedef dogen::yarn::meta_model::formatting_styles result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/intermediate_model_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/intermediate_model_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/intermediate_model_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/intermediate_model_td.hpp
index 10d8cc02b..afc23bcd1 100644
--- a/projects/yarn/include/dogen/yarn/test_data/intermediate_model_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/intermediate_model_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_INTERMEDIATE_MODEL_TD_HPP
-#define DOGEN_YARN_TEST_DATA_INTERMEDIATE_MODEL_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_INTERMEDIATE_MODEL_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_INTERMEDIATE_MODEL_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class intermediate_model_generator {
 public:
     intermediate_model_generator();
 
 public:
-    typedef dogen::yarn::intermediate_model result_type;
+    typedef dogen::yarn::meta_model::intermediate_model result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/languages_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/languages_td.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/test_data/languages_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/languages_td.hpp
index 0342bc3c7..6a837555f 100644
--- a/projects/yarn/include/dogen/yarn/test_data/languages_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/languages_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_LANGUAGES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_LANGUAGES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_LANGUAGES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_LANGUAGES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class languages_generator {
 public:
     languages_generator();
 
 public:
-    typedef dogen::yarn::languages result_type;
+    typedef dogen::yarn::meta_model::languages result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/letter_cases_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/letter_cases_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/letter_cases_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/letter_cases_td.hpp
index 585f3fa15..f940658b2 100644
--- a/projects/yarn/include/dogen/yarn/test_data/letter_cases_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/letter_cases_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_LETTER_CASES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_LETTER_CASES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_LETTER_CASES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_LETTER_CASES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class letter_cases_generator {
 public:
     letter_cases_generator();
 
 public:
-    typedef dogen::yarn::letter_cases result_type;
+    typedef dogen::yarn::meta_model::letter_cases result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/location_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/location_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/location_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/location_td.hpp
index 52d7c450d..81f54ab1a 100644
--- a/projects/yarn/include/dogen/yarn/test_data/location_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/location_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_LOCATION_TD_HPP
-#define DOGEN_YARN_TEST_DATA_LOCATION_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_LOCATION_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_LOCATION_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/location.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class location_generator {
 public:
     location_generator();
 
 public:
-    typedef dogen::yarn::location result_type;
+    typedef dogen::yarn::meta_model::location result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/model_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/model_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/model_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/model_td.hpp
index 35c1ad1e7..38ed1cf74 100644
--- a/projects/yarn/include/dogen/yarn/test_data/model_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/model_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_MODEL_TD_HPP
-#define DOGEN_YARN_TEST_DATA_MODEL_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_MODEL_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_MODEL_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class model_generator {
 public:
     model_generator();
 
 public:
-    typedef dogen::yarn::model result_type;
+    typedef dogen::yarn::meta_model::model result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/module_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/module_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/module_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/module_td.hpp
index 59550db25..2b7c02262 100644
--- a/projects/yarn/include/dogen/yarn/test_data/module_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/module_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_MODULE_TD_HPP
-#define DOGEN_YARN_TEST_DATA_MODULE_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_MODULE_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_MODULE_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/module.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class module_generator {
 public:
     module_generator();
 
 public:
-    typedef dogen::yarn::module result_type;
+    typedef dogen::yarn::meta_model::module result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/name_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/name_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/name_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/name_td.hpp
index 5c877a1aa..f1dc3d7d3 100644
--- a/projects/yarn/include/dogen/yarn/test_data/name_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/name_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_NAME_TD_HPP
-#define DOGEN_YARN_TEST_DATA_NAME_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_NAME_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_NAME_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class name_generator {
 public:
     name_generator();
 
 public:
-    typedef dogen::yarn::name result_type;
+    typedef dogen::yarn::meta_model::name result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/name_tree_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/name_tree_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/name_tree_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/name_tree_td.hpp
index aa64c5708..0f39be30c 100644
--- a/projects/yarn/include/dogen/yarn/test_data/name_tree_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/name_tree_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_NAME_TREE_TD_HPP
-#define DOGEN_YARN_TEST_DATA_NAME_TREE_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_NAME_TREE_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_NAME_TREE_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class name_tree_generator {
 public:
     name_tree_generator();
 
 public:
-    typedef dogen::yarn::name_tree result_type;
+    typedef dogen::yarn::meta_model::name_tree result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/object_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/object_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/object_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/object_td.hpp
index 812a421d3..9a34d2797 100644
--- a/projects/yarn/include/dogen/yarn/test_data/object_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/object_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_OBJECT_TD_HPP
-#define DOGEN_YARN_TEST_DATA_OBJECT_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_OBJECT_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_OBJECT_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class object_generator {
 public:
     object_generator();
 
 public:
-    typedef dogen::yarn::object result_type;
+    typedef dogen::yarn::meta_model::object result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/object_types_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/object_types_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/object_types_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/object_types_td.hpp
index 6d0d04c8a..9d1c84906 100644
--- a/projects/yarn/include/dogen/yarn/test_data/object_types_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/object_types_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_OBJECT_TYPES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_OBJECT_TYPES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_OBJECT_TYPES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_OBJECT_TYPES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/object_types.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class object_types_generator {
 public:
     object_types_generator();
 
 public:
-    typedef dogen::yarn::object_types result_type;
+    typedef dogen::yarn::meta_model::object_types result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/origin_types_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/origin_types_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/origin_types_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/origin_types_td.hpp
index 298888611..56a28aed3 100644
--- a/projects/yarn/include/dogen/yarn/test_data/origin_types_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/origin_types_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORIGIN_TYPES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORIGIN_TYPES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORIGIN_TYPES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORIGIN_TYPES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class origin_types_generator {
 public:
     origin_types_generator();
 
 public:
-    typedef dogen::yarn::origin_types result_type;
+    typedef dogen::yarn::meta_model::origin_types result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_attribute_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/orm_attribute_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp
index e38c66ecf..a985c7eb9 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_attribute_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_ATTRIBUTE_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_ATTRIBUTE_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_attribute_properties_generator {
 public:
     orm_attribute_properties_generator();
 
 public:
-    typedef dogen::yarn::orm_attribute_properties result_type;
+    typedef dogen::yarn::meta_model::orm_attribute_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_database_systems_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/orm_database_systems_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp
index 667c98810..220307b72 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_database_systems_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_DATABASE_SYSTEMS_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_DATABASE_SYSTEMS_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_DATABASE_SYSTEMS_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_DATABASE_SYSTEMS_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_database_systems_generator {
 public:
     orm_database_systems_generator();
 
 public:
-    typedef dogen::yarn::orm_database_systems result_type;
+    typedef dogen::yarn::meta_model::orm_database_systems result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -46,6 +47,6 @@ private:
     unsigned int position_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_model_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/orm_model_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp
index 8999c6f9d..3868ccacf 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_model_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_MODEL_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_MODEL_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_MODEL_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_MODEL_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_model_properties_generator {
 public:
     orm_model_properties_generator();
 
 public:
-    typedef dogen::yarn::orm_model_properties result_type;
+    typedef dogen::yarn::meta_model::orm_model_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_module_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/orm_module_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp
index c593fc425..77bfb25de 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_module_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_MODULE_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_MODULE_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_MODULE_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_MODULE_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_module_properties_generator {
 public:
     orm_module_properties_generator();
 
 public:
-    typedef dogen::yarn::orm_module_properties result_type;
+    typedef dogen::yarn::meta_model::orm_module_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_object_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/orm_object_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp
index 6c4ded254..46b364fdb 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_object_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_OBJECT_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_OBJECT_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_OBJECT_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_OBJECT_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_object_properties_generator {
 public:
     orm_object_properties_generator();
 
 public:
-    typedef dogen::yarn::orm_object_properties result_type;
+    typedef dogen::yarn::meta_model::orm_object_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/orm_primitive_properties_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/test_data/orm_primitive_properties_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp
index b90036aa4..ba9b42568 100644
--- a/projects/yarn/include/dogen/yarn/test_data/orm_primitive_properties_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_ORM_PRIMITIVE_PROPERTIES_TD_HPP
-#define DOGEN_YARN_TEST_DATA_ORM_PRIMITIVE_PROPERTIES_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_ORM_PRIMITIVE_PROPERTIES_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_ORM_PRIMITIVE_PROPERTIES_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_primitive_properties_generator {
 public:
     orm_primitive_properties_generator();
 
 public:
-    typedef dogen::yarn::orm_primitive_properties result_type;
+    typedef dogen::yarn::meta_model::orm_primitive_properties result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/primitive_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/primitive_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/primitive_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/primitive_td.hpp
index cdee8c44e..18cd7ea44 100644
--- a/projects/yarn/include/dogen/yarn/test_data/primitive_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/primitive_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_PRIMITIVE_TD_HPP
-#define DOGEN_YARN_TEST_DATA_PRIMITIVE_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_PRIMITIVE_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_PRIMITIVE_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/primitive.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class primitive_generator {
 public:
     primitive_generator();
 
 public:
-    typedef dogen::yarn::primitive result_type;
+    typedef dogen::yarn::meta_model::primitive result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/type_parameters_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/type_parameters_td.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/test_data/type_parameters_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/type_parameters_td.hpp
index 20ae7c29d..7037340f1 100644
--- a/projects/yarn/include/dogen/yarn/test_data/type_parameters_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/type_parameters_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_TYPE_PARAMETERS_TD_HPP
-#define DOGEN_YARN_TEST_DATA_TYPE_PARAMETERS_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_TYPE_PARAMETERS_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_TYPE_PARAMETERS_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class type_parameters_generator {
 public:
     type_parameters_generator();
 
 public:
-    typedef dogen::yarn::type_parameters result_type;
+    typedef dogen::yarn::meta_model::type_parameters result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/test_data/visitor_td.hpp b/projects/yarn/include/dogen/yarn/test_data/meta_model/visitor_td.hpp
similarity index 84%
rename from projects/yarn/include/dogen/yarn/test_data/visitor_td.hpp
rename to projects/yarn/include/dogen/yarn/test_data/meta_model/visitor_td.hpp
index c6efed92e..c0163ccc1 100644
--- a/projects/yarn/include/dogen/yarn/test_data/visitor_td.hpp
+++ b/projects/yarn/include/dogen/yarn/test_data/meta_model/visitor_td.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TEST_DATA_VISITOR_TD_HPP
-#define DOGEN_YARN_TEST_DATA_VISITOR_TD_HPP
+#ifndef DOGEN_YARN_TEST_DATA_META_MODEL_VISITOR_TD_HPP
+#define DOGEN_YARN_TEST_DATA_META_MODEL_VISITOR_TD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/visitor.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class visitor_generator {
 public:
     visitor_generator();
 
 public:
-    typedef dogen::yarn::visitor result_type;
+    typedef dogen::yarn::meta_model::visitor result_type;
 
 public:
     static void populate(const unsigned int position, result_type& v);
@@ -48,6 +49,6 @@ public:
     static result_type* create_ptr(const unsigned int position);
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/all.hpp b/projects/yarn/include/dogen/yarn/types/all.hpp
index 34ca33cab..120d08d35 100644
--- a/projects/yarn/include/dogen/yarn/types/all.hpp
+++ b/projects/yarn/include/dogen/yarn/types/all.hpp
@@ -25,73 +25,63 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/name.hpp"
 #include "dogen/yarn/types/yarn.hpp"
-#include "dogen/yarn/types/model.hpp"
-#include "dogen/yarn/types/module.hpp"
-#include "dogen/yarn/types/object.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/types/builtin.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/visitor.hpp"
-#include "dogen/yarn/types/location.hpp"
-#include "dogen/yarn/types/attribute.hpp"
-#include "dogen/yarn/types/exception.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/enumerator.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
 #include "dogen/yarn/types/helpers/node.hpp"
-#include "dogen/yarn/types/letter_cases.hpp"
-#include "dogen/yarn/types/object_types.hpp"
-#include "dogen/yarn/types/origin_types.hpp"
 #include "dogen/yarn/types/helpers/mapper.hpp"
-#include "dogen/yarn/types/name_flattener.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
 #include "dogen/yarn/types/helpers/indexer.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
 #include "dogen/yarn/types/helpers/mapping.hpp"
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/types/helpers/resolver.hpp"
-#include "dogen/yarn/types/formatting_styles.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 #include "dogen/yarn/types/helpers/persister.hpp"
-#include "dogen/yarn/types/element_properties.hpp"
-#include "dogen/yarn/types/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/decomposer.hpp"
 #include "dogen/yarn/types/helpers/separators.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
-#include "dogen/yarn/types/artefact_properties.hpp"
 #include "dogen/yarn/types/helpers/mapping_set.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
-#include "dogen/yarn/types/orm_database_systems.hpp"
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
 #include "dogen/yarn/types/helpers/mapping_error.hpp"
 #include "dogen/yarn/types/helpers/mapping_value.hpp"
 #include "dogen/yarn/types/helpers/parsing_error.hpp"
-#include "dogen/yarn/types/orm_module_properties.hpp"
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 #include "dogen/yarn/types/helpers/building_error.hpp"
 #include "dogen/yarn/types/helpers/indexing_error.hpp"
+#include "dogen/yarn/types/helpers/name_flattener.hpp"
 #include "dogen/yarn/types/helpers/pretty_printer.hpp"
 #include "dogen/yarn/types/helpers/printing_error.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/helpers/hydration_error.hpp"
 #include "dogen/yarn/types/helpers/mapping_actions.hpp"
 #include "dogen/yarn/types/helpers/mapping_context.hpp"
 #include "dogen/yarn/types/helpers/persister_error.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
 #include "dogen/yarn/types/helpers/resolution_error.hpp"
 #include "dogen/yarn/types/helpers/string_processor.hpp"
 #include "dogen/yarn/types/helpers/validation_error.hpp"
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
 #include "dogen/yarn/types/transforms/orm_transform.hpp"
 #include "dogen/yarn/types/helpers/mappings_hydrator.hpp"
 #include "dogen/yarn/types/helpers/name_tree_builder.hpp"
+#include "dogen/yarn/types/meta_model/name_flattener.hpp"
 #include "dogen/yarn/types/transforms/code_generator.hpp"
 #include "dogen/yarn/types/helpers/mappings_validator.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 #include "dogen/yarn/types/transforms/context_factory.hpp"
 #include "dogen/yarn/types/transforms/merge_transform.hpp"
 #include "dogen/yarn/types/transforms/registrar_error.hpp"
@@ -99,14 +89,21 @@
 #include "dogen/yarn/types/transforms/references_chain.hpp"
 #include "dogen/yarn/types/helpers/decomposition_result.hpp"
 #include "dogen/yarn/types/helpers/new_name_tree_parser.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
 #include "dogen/yarn/types/transforms/mapping_transform.hpp"
 #include "dogen/yarn/types/transforms/modules_transform.hpp"
 #include "dogen/yarn/types/transforms/parsing_transform.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/concepts_transform.hpp"
 #include "dogen/yarn/types/transforms/language_transform.hpp"
 #include "dogen/yarn/types/transforms/resolver_transform.hpp"
 #include "dogen/yarn/types/helpers/mapping_set_repository.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 #include "dogen/yarn/types/helpers/legacy_name_tree_parser.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 #include "dogen/yarn/types/transforms/attributes_transform.hpp"
 #include "dogen/yarn/types/transforms/initial_target_chain.hpp"
 #include "dogen/yarn/types/transforms/model_assembly_chain.hpp"
@@ -114,6 +111,8 @@
 #include "dogen/yarn/types/transforms/primitives_transform.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/helpers/pre_processing_validator.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
 #include "dogen/yarn/types/transforms/annotations_transform.hpp"
 #include "dogen/yarn/types/transforms/code_generation_chain.hpp"
 #include "dogen/yarn/types/transforms/containment_transform.hpp"
@@ -129,6 +128,8 @@
 #include "dogen/yarn/types/transforms/enumerations_transform.hpp"
 #include "dogen/yarn/types/transforms/generability_transform.hpp"
 #include "dogen/yarn/types/transforms/model_generation_chain.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 #include "dogen/yarn/types/transforms/generalization_transform.hpp"
 #include "dogen/yarn/types/transforms/exogenous_transform_types.hpp"
 #include "dogen/yarn/types/transforms/external_transforms_chain.hpp"
diff --git a/projects/yarn/include/dogen/yarn/types/element_visitor.hpp b/projects/yarn/include/dogen/yarn/types/element_visitor.hpp
deleted file mode 100644
index 346dbf05f..000000000
--- a/projects/yarn/include/dogen/yarn/types/element_visitor.hpp
+++ /dev/null
@@ -1,133 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_VISITOR_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_VISITOR_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include "dogen/yarn/types/module_fwd.hpp"
-#include "dogen/yarn/types/object_fwd.hpp"
-#include "dogen/yarn/types/builtin_fwd.hpp"
-#include "dogen/yarn/types/concept_fwd.hpp"
-#include "dogen/yarn/types/visitor_fwd.hpp"
-#include "dogen/yarn/types/exception_fwd.hpp"
-#include "dogen/yarn/types/primitive_fwd.hpp"
-#include "dogen/yarn/types/enumeration_fwd.hpp"
-
-namespace dogen {
-namespace yarn {
-
-/**
- * @brief Visitor for element
- */
-class element_visitor {
-public:
-    virtual ~element_visitor() noexcept = 0;
-
-public:
-    /**
-     * @brief Accept visits for type dogen::yarn::builtin
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::builtin&) const { }
-    virtual void visit(const dogen::yarn::builtin&) { }
-    virtual void visit(dogen::yarn::builtin&) const { }
-    virtual void visit(dogen::yarn::builtin&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::concept
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::concept&) const { }
-    virtual void visit(const dogen::yarn::concept&) { }
-    virtual void visit(dogen::yarn::concept&) const { }
-    virtual void visit(dogen::yarn::concept&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::enumeration
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::enumeration&) const { }
-    virtual void visit(const dogen::yarn::enumeration&) { }
-    virtual void visit(dogen::yarn::enumeration&) const { }
-    virtual void visit(dogen::yarn::enumeration&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::exception
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::exception&) const { }
-    virtual void visit(const dogen::yarn::exception&) { }
-    virtual void visit(dogen::yarn::exception&) const { }
-    virtual void visit(dogen::yarn::exception&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::module
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::module&) const { }
-    virtual void visit(const dogen::yarn::module&) { }
-    virtual void visit(dogen::yarn::module&) const { }
-    virtual void visit(dogen::yarn::module&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::object
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::object&) const { }
-    virtual void visit(const dogen::yarn::object&) { }
-    virtual void visit(dogen::yarn::object&) const { }
-    virtual void visit(dogen::yarn::object&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::primitive
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::primitive&) const { }
-    virtual void visit(const dogen::yarn::primitive&) { }
-    virtual void visit(dogen::yarn::primitive&) const { }
-    virtual void visit(dogen::yarn::primitive&) { }
-    /**@}*/
-
-    /**
-     * @brief Accept visits for type dogen::yarn::visitor
-     */
-    /**@{*/
-    virtual void visit(const dogen::yarn::visitor&) const { }
-    virtual void visit(const dogen::yarn::visitor&) { }
-    virtual void visit(dogen::yarn::visitor&) const { }
-    virtual void visit(dogen::yarn::visitor&) { }
-    /**@}*/
-};
-
-inline element_visitor::~element_visitor() noexcept { }
-
-} }
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/decomposer.hpp b/projects/yarn/include/dogen/yarn/types/helpers/decomposer.hpp
index 61e40a5a4..94a3e87ac 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/decomposer.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/decomposer.hpp
@@ -26,15 +26,15 @@
 #endif
 
 #include <string>
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/module.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/exception.hpp"
-#include "dogen/yarn/types/builtin.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 #include "dogen/yarn/types/helpers/decomposition_result.hpp"
 
 namespace dogen {
@@ -43,20 +43,22 @@ namespace helpers {
 
 class decomposer final {
 private:
-    void add_name(const std::string& owner, const name& n);
-    void add_name_tree(const std::string& owner, const name_tree& nt);
-    void add_names(const std::string& owner, const std::list<name>& names);
+    void add_name(const std::string& owner, const meta_model::name& n);
+    void add_name_tree(const std::string& owner,
+        const meta_model::name_tree& nt);
+    void add_names(const std::string& owner,
+        const std::list<meta_model::name>& names);
     void process_attributes(const std::string& owner,
-        const std::list<attribute>& attrs);
-    void process_element(const element& e);
+        const std::list<meta_model::attribute>& attrs);
+    void process_element(const meta_model::element& e);
 
 public:
-    void decompose(const yarn::concept& c);
-    void decompose(const yarn::module& m);
-    void decompose(const yarn::enumeration& e);
-    void decompose(const yarn::exception& e);
-    void decompose(const yarn::object& o);
-    void decompose(const yarn::builtin& b);
+    void decompose(const meta_model::concept& c);
+    void decompose(const meta_model::module& m);
+    void decompose(const meta_model::enumeration& e);
+    void decompose(const meta_model::exception& e);
+    void decompose(const meta_model::object& o);
+    void decompose(const meta_model::builtin& b);
 
 public:
     const decomposition_result& result() const;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/decomposition_result.hpp b/projects/yarn/include/dogen/yarn/types/helpers/decomposition_result.hpp
index 2eba89c53..194c48734 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/decomposition_result.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/decomposition_result.hpp
@@ -29,8 +29,8 @@
 #include <string>
 #include <utility>
 #include <algorithm>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 #include "dogen/yarn/serialization/helpers/decomposition_result_fwd_ser.hpp"
 
 namespace dogen {
@@ -46,8 +46,8 @@ public:
 
 public:
     decomposition_result(
-        const std::list<std::pair<std::string, dogen::yarn::name> >& names,
-        const std::list<std::pair<std::string, dogen::yarn::name_tree> >& name_trees);
+        const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& names,
+        const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& name_trees);
 
 private:
     template<typename Archive>
@@ -57,15 +57,15 @@ private:
     friend void boost::serialization::load(Archive& ar, dogen::yarn::helpers::decomposition_result& v, unsigned int version);
 
 public:
-    const std::list<std::pair<std::string, dogen::yarn::name> >& names() const;
-    std::list<std::pair<std::string, dogen::yarn::name> >& names();
-    void names(const std::list<std::pair<std::string, dogen::yarn::name> >& v);
-    void names(const std::list<std::pair<std::string, dogen::yarn::name> >&& v);
+    const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& names() const;
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& names();
+    void names(const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& v);
+    void names(const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >&& v);
 
-    const std::list<std::pair<std::string, dogen::yarn::name_tree> >& name_trees() const;
-    std::list<std::pair<std::string, dogen::yarn::name_tree> >& name_trees();
-    void name_trees(const std::list<std::pair<std::string, dogen::yarn::name_tree> >& v);
-    void name_trees(const std::list<std::pair<std::string, dogen::yarn::name_tree> >&& v);
+    const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& name_trees() const;
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& name_trees();
+    void name_trees(const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& v);
+    void name_trees(const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >&& v);
 
 public:
     bool operator==(const decomposition_result& rhs) const;
@@ -78,8 +78,8 @@ public:
     decomposition_result& operator=(decomposition_result other);
 
 private:
-    std::list<std::pair<std::string, dogen::yarn::name> > names_;
-    std::list<std::pair<std::string, dogen::yarn::name_tree> > name_trees_;
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name> > names_;
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> > name_trees_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp b/projects/yarn/include/dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp
index 8e8473809..5f1abf5cf 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp
@@ -25,10 +25,10 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/pretty_printer.hpp"
-#include "dogen/yarn/types/languages.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -39,17 +39,20 @@ public:
     identifiable_and_qualified_builder();
 
 private:
-    std::string obtain_qualified(const std::map<languages, std::string>& map,
-        const languages& l) const;
+    std::string obtain_qualified(
+        const std::map<meta_model::languages, std::string>& map,
+        const meta_model::languages& l) const;
 
 public:
-    void add(const name& n);
-    void add(const name_tree& nt);
+    void add(const meta_model::name& n);
+    void add(const meta_model::name_tree& nt);
 
 public:
-    std::pair<std::string, std::map<languages, std::string>> build();
-    std::pair<std::string, std::map<languages, std::string>>
-    build(const name& n, const bool model_name_mode);
+    std::pair<std::string, std::map<meta_model::languages, std::string>>
+    build();
+
+    std::pair<std::string, std::map<meta_model::languages, std::string>>
+    build(const meta_model::name& n, const bool model_name_mode);
 
 private:
     pretty_printer csharp_pp_;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/indexer.hpp b/projects/yarn/include/dogen/yarn/types/helpers/indexer.hpp
index 56470f167..9df24da97 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/indexer.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/indexer.hpp
@@ -26,8 +26,8 @@
 #endif
 
 #include <unordered_set>
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -35,7 +35,7 @@ namespace helpers {
 
 class indexer final {
 public:
-    static indices index(intermediate_model& m);
+    static indices index(meta_model::intermediate_model& m);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/legacy_name_tree_parser.hpp b/projects/yarn/include/dogen/yarn/types/helpers/legacy_name_tree_parser.hpp
index 2bf007bca..e237182b5 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/legacy_name_tree_parser.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/legacy_name_tree_parser.hpp
@@ -28,9 +28,9 @@
 #include <list>
 #include <string>
 #include <unordered_set>
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/location.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -47,16 +47,16 @@ public:
      *
      * @param language what programming language syntax to use.
      */
-    explicit legacy_name_tree_parser(const languages language);
+    explicit legacy_name_tree_parser(const meta_model::languages language);
 
 public:
     /**
      * @brief Parse the string into a name tree.
      */
-    name_tree parse(const std::string& s) const;
+    meta_model::name_tree parse(const std::string& s) const;
 
 private:
-    const languages language_;
+    const meta_model::languages language_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapper.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapper.hpp
index 928fa83c7..56068042e 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapper.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapper.hpp
@@ -25,10 +25,11 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/mapping_context.hpp"
 #include "dogen/yarn/types/helpers/mapping_set_repository.hpp"
 
@@ -41,28 +42,31 @@ public:
     explicit mapper(const mapping_set_repository& msrp);
 
 private:
-    const std::unordered_map<std::string, name>&
-    translations_for_language(const mapping_set& ms, const languages from,
-        const languages to) const;
+    const std::unordered_map<std::string, meta_model::name>&
+    translations_for_language(const mapping_set& ms,
+        const meta_model::languages from, const meta_model::languages to) const;
 
-    std::unordered_map<std::string, name>
-    injections_for_language(const mapping_set& ms, const languages l,
-        const intermediate_model& im) const;
+    std::unordered_map<std::string, meta_model::name> injections_for_language(
+        const mapping_set& ms, const meta_model::languages l,
+        const meta_model::intermediate_model& im) const;
 
     mapping_context create_mapping_context(const mapping_set& ms,
-        const languages from, const languages to,
-        const intermediate_model& im) const;
+        const meta_model::languages from, const meta_model::languages to,
+        const meta_model::intermediate_model& im) const;
 
 private:
-    name_tree walk_name_tree(const mapping_context& mc,
-        const name_tree& nt, const bool skip_injection = false) const;
+    meta_model::name_tree walk_name_tree(const mapping_context& mc,
+        const meta_model::name_tree& nt,
+        const bool skip_injection = false) const;
     void map_attributes(const mapping_context& mc,
-        std::list<attribute>& attrs) const;
+        std::list<meta_model::attribute>& attrs) const;
 
 public:
-    static bool is_mappable(const languages from, const languages to);
-    intermediate_model map(const languages from, const languages to,
-        const intermediate_model& im) const;
+    static bool is_mappable(const meta_model::languages from,
+        const meta_model::languages to);
+    meta_model::intermediate_model map(const meta_model::languages from,
+        const meta_model::languages to,
+        const meta_model::intermediate_model& im) const;
 
 private:
     const mapping_set_repository& mapping_set_repository_;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapping.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapping.hpp
index 42b04bb6c..061035ffc 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapping.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapping.hpp
@@ -28,9 +28,9 @@
 #include <string>
 #include <algorithm>
 #include <unordered_map>
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/mapping_value.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_fwd_ser.hpp"
 
 namespace dogen {
@@ -50,7 +50,7 @@ public:
 public:
     mapping(
         const std::string& lam_id,
-        const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& by_language);
+        const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& by_language);
 
 private:
     template<typename Archive>
@@ -74,10 +74,10 @@ public:
      * @brief Values of the mapping, by language.
      */
     /**@{*/
-    const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& by_language() const;
-    std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& by_language();
-    void by_language(const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& v);
-    void by_language(const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>&& v);
+    const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& by_language() const;
+    std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& by_language();
+    void by_language(const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& v);
+    void by_language(const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>&& v);
     /**@}*/
 
 public:
@@ -92,7 +92,7 @@ public:
 
 private:
     std::string lam_id_;
-    std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value> by_language_;
+    std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value> by_language_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapping_context.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapping_context.hpp
index 2b20bdc0e..4b11276e3 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapping_context.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapping_context.hpp
@@ -29,7 +29,7 @@
 #include <algorithm>
 #include <unordered_map>
 #include <unordered_set>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_context_fwd_ser.hpp"
 
 namespace dogen {
@@ -45,9 +45,9 @@ public:
 
 public:
     mapping_context(
-        const std::unordered_map<std::string, dogen::yarn::name>& translations,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::name>& translations,
         const std::unordered_set<std::string>& erasures,
-        const std::unordered_map<std::string, dogen::yarn::name>& injections);
+        const std::unordered_map<std::string, dogen::yarn::meta_model::name>& injections);
 
 private:
     template<typename Archive>
@@ -57,20 +57,20 @@ private:
     friend void boost::serialization::load(Archive& ar, dogen::yarn::helpers::mapping_context& v, unsigned int version);
 
 public:
-    const std::unordered_map<std::string, dogen::yarn::name>& translations() const;
-    std::unordered_map<std::string, dogen::yarn::name>& translations();
-    void translations(const std::unordered_map<std::string, dogen::yarn::name>& v);
-    void translations(const std::unordered_map<std::string, dogen::yarn::name>&& v);
+    const std::unordered_map<std::string, dogen::yarn::meta_model::name>& translations() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::name>& translations();
+    void translations(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v);
+    void translations(const std::unordered_map<std::string, dogen::yarn::meta_model::name>&& v);
 
     const std::unordered_set<std::string>& erasures() const;
     std::unordered_set<std::string>& erasures();
     void erasures(const std::unordered_set<std::string>& v);
     void erasures(const std::unordered_set<std::string>&& v);
 
-    const std::unordered_map<std::string, dogen::yarn::name>& injections() const;
-    std::unordered_map<std::string, dogen::yarn::name>& injections();
-    void injections(const std::unordered_map<std::string, dogen::yarn::name>& v);
-    void injections(const std::unordered_map<std::string, dogen::yarn::name>&& v);
+    const std::unordered_map<std::string, dogen::yarn::meta_model::name>& injections() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::name>& injections();
+    void injections(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v);
+    void injections(const std::unordered_map<std::string, dogen::yarn::meta_model::name>&& v);
 
 public:
     bool operator==(const mapping_context& rhs) const;
@@ -83,9 +83,9 @@ public:
     mapping_context& operator=(mapping_context other);
 
 private:
-    std::unordered_map<std::string, dogen::yarn::name> translations_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::name> translations_;
     std::unordered_set<std::string> erasures_;
-    std::unordered_map<std::string, dogen::yarn::name> injections_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::name> injections_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapping_set.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapping_set.hpp
index ef284a05b..96115c9a0 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapping_set.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapping_set.hpp
@@ -29,9 +29,9 @@
 #include <algorithm>
 #include <unordered_map>
 #include <unordered_set>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_set_fwd_ser.hpp"
 
 namespace dogen {
@@ -52,10 +52,10 @@ public:
 public:
     mapping_set(
         const std::string& name,
-        const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_language_agnostic_id,
-        const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_upsilon_id,
+        const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_language_agnostic_id,
+        const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_upsilon_id,
         const std::unordered_map<std::string, std::string>& upsilon_id_to_lam_id,
-        const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& erasures_by_language);
+        const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& erasures_by_language);
 
 private:
     template<typename Archive>
@@ -70,15 +70,15 @@ public:
     void name(const std::string& v);
     void name(const std::string&& v);
 
-    const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_language_agnostic_id() const;
-    std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_language_agnostic_id();
-    void by_language_agnostic_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v);
-    void by_language_agnostic_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >&& v);
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_language_agnostic_id() const;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_language_agnostic_id();
+    void by_language_agnostic_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v);
+    void by_language_agnostic_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >&& v);
 
-    const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_upsilon_id() const;
-    std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_upsilon_id();
-    void by_upsilon_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v);
-    void by_upsilon_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >&& v);
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_upsilon_id() const;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_upsilon_id();
+    void by_upsilon_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v);
+    void by_upsilon_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >&& v);
 
     /**
      * @brief Map to resolve upsilon ID's into LAM IDs.
@@ -90,10 +90,10 @@ public:
     void upsilon_id_to_lam_id(const std::unordered_map<std::string, std::string>&& v);
     /**@}*/
 
-    const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& erasures_by_language() const;
-    std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& erasures_by_language();
-    void erasures_by_language(const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& v);
-    void erasures_by_language(const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >&& v);
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& erasures_by_language() const;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& erasures_by_language();
+    void erasures_by_language(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& v);
+    void erasures_by_language(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >&& v);
 
 public:
     bool operator==(const mapping_set& rhs) const;
@@ -107,10 +107,10 @@ public:
 
 private:
     std::string name_;
-    std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> > by_language_agnostic_id_;
-    std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> > by_upsilon_id_;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> > by_language_agnostic_id_;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> > by_upsilon_id_;
     std::unordered_map<std::string, std::string> upsilon_id_to_lam_id_;
-    std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> > erasures_by_language_;
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> > erasures_by_language_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapping_set_repository_factory.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapping_set_repository_factory.hpp
index 9f8b0c0fd..230c250cf 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapping_set_repository_factory.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapping_set_repository_factory.hpp
@@ -30,7 +30,7 @@
 #include <string>
 #include <unordered_map>
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/types/helpers/mapping.hpp"
 #include "dogen/yarn/types/helpers/mapping_set.hpp"
 #include "dogen/yarn/types/helpers/mapping_value.hpp"
@@ -58,9 +58,9 @@ private:
     void insert(const std::string& upsilon_id, const std::string& lam_id,
         std::unordered_map<std::string, std::string>& map) const;
 
-    void insert(const std::string& lam_id, const name& n,
-        const languages l, std::unordered_map<languages,
-        std::unordered_map<std::string, name>>& map) const;
+    void insert(const std::string& lam_id, const meta_model::name& n,
+        const meta_model::languages l, std::unordered_map<meta_model::languages,
+        std::unordered_map<std::string, meta_model::name>>& map) const;
 
     void populate_upsilon_data(const std::string& lam_id,
         const mapping& mapping, const mapping_value& upsilon_mv,
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mapping_value.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mapping_value.hpp
index 6efecdae1..d65f01d83 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mapping_value.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mapping_value.hpp
@@ -28,7 +28,7 @@
 #include <list>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/types/helpers/mapping_actions.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_value_fwd_ser.hpp"
 
@@ -53,8 +53,8 @@ public:
 public:
     mapping_value(
         const dogen::yarn::helpers::mapping_actions mapping_action,
-        const boost::optional<dogen::yarn::name>& default_name,
-        const std::list<dogen::yarn::name>& aliases);
+        const boost::optional<dogen::yarn::meta_model::name>& default_name,
+        const std::list<dogen::yarn::meta_model::name>& aliases);
 
 private:
     template<typename Archive>
@@ -67,15 +67,15 @@ public:
     dogen::yarn::helpers::mapping_actions mapping_action() const;
     void mapping_action(const dogen::yarn::helpers::mapping_actions v);
 
-    const boost::optional<dogen::yarn::name>& default_name() const;
-    boost::optional<dogen::yarn::name>& default_name();
-    void default_name(const boost::optional<dogen::yarn::name>& v);
-    void default_name(const boost::optional<dogen::yarn::name>&& v);
+    const boost::optional<dogen::yarn::meta_model::name>& default_name() const;
+    boost::optional<dogen::yarn::meta_model::name>& default_name();
+    void default_name(const boost::optional<dogen::yarn::meta_model::name>& v);
+    void default_name(const boost::optional<dogen::yarn::meta_model::name>&& v);
 
-    const std::list<dogen::yarn::name>& aliases() const;
-    std::list<dogen::yarn::name>& aliases();
-    void aliases(const std::list<dogen::yarn::name>& v);
-    void aliases(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& aliases() const;
+    std::list<dogen::yarn::meta_model::name>& aliases();
+    void aliases(const std::list<dogen::yarn::meta_model::name>& v);
+    void aliases(const std::list<dogen::yarn::meta_model::name>&& v);
 
 public:
     bool operator==(const mapping_value& rhs) const;
@@ -89,8 +89,8 @@ public:
 
 private:
     dogen::yarn::helpers::mapping_actions mapping_action_;
-    boost::optional<dogen::yarn::name> default_name_;
-    std::list<dogen::yarn::name> aliases_;
+    boost::optional<dogen::yarn::meta_model::name> default_name_;
+    std::list<dogen::yarn::meta_model::name> aliases_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mappings_hydrator.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mappings_hydrator.hpp
index bdacfa69f..39c1e44e5 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mappings_hydrator.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mappings_hydrator.hpp
@@ -30,8 +30,8 @@
 #include <unordered_map>
 #include <boost/filesystem/path.hpp>
 #include <boost/property_tree/ptree.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/mapping_actions.hpp"
 #include "dogen/yarn/types/helpers/mapping.hpp"
 
@@ -42,12 +42,12 @@ namespace helpers {
 class mappings_hydrator final {
 private:
     mapping_actions to_mapping_action(const std::string& s) const;
-    languages to_language(const std::string& s) const;
+    meta_model::languages to_language(const std::string& s) const;
 
 private:
-    name read_name(const boost::property_tree::ptree& pt) const;
+    meta_model::name read_name(const boost::property_tree::ptree& pt) const;
 
-    std::unordered_map<languages, mapping_value>
+    std::unordered_map<meta_model::languages, mapping_value>
     read_mapping_values(const boost::property_tree::ptree& pt) const;
 
     std::list<mapping> read_stream(std::istream& s) const;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/mappings_validator.hpp b/projects/yarn/include/dogen/yarn/types/helpers/mappings_validator.hpp
index 432923cf2..12c74e365 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/mappings_validator.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/mappings_validator.hpp
@@ -28,7 +28,7 @@
 #include <list>
 #include <string>
 #include <unordered_map>
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/mapping_value.hpp"
 #include "dogen/yarn/types/helpers/mapping.hpp"
 
@@ -38,7 +38,7 @@ namespace helpers {
 
 class mappings_validator final {
 private:
-    void validate(const languages l, const mapping_value& mv) const;
+    void validate(const meta_model::languages l, const mapping_value& mv) const;
     void validate(const mapping& m) const;
 
 public:
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/name_builder.hpp b/projects/yarn/include/dogen/yarn/types/helpers/name_builder.hpp
index d77320507..5f1d40568 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/name_builder.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/name_builder.hpp
@@ -27,9 +27,8 @@
 
 #include <list>
 #include <string>
-#include <unordered_set>
-#include "dogen/yarn/types/location.hpp"
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -47,7 +46,8 @@ namespace helpers {
 class name_builder {
 public:
     explicit name_builder(const bool model_name_mode_ = false);
-    explicit name_builder(const name& n, const bool model_name_mode_ = false);
+    explicit name_builder(const meta_model::name& n,
+        const bool model_name_mode_ = false);
 
 private:
     std::string compute_id();
@@ -56,17 +56,17 @@ private:
 public:
     name_builder& simple_name(const std::string& sn);
     name_builder& model_name(const std::string& mn);
-    name_builder& model_name(const yarn::location& l);
+    name_builder& model_name(const meta_model::location& l);
     name_builder& model_modules(const std::string& mm);
     name_builder& model_modules(const std::list<std::string>& mm);
     name_builder& internal_modules(const std::string& im);
     name_builder& internal_modules(const std::list<std::string>& im);
     name_builder& external_modules(const std::string& em);
     name_builder& external_modules(const std::list<std::string>& em);
-    name_builder& location(const yarn::location& l);
+    name_builder& location(const meta_model::location& l);
 
 public:
-    name build();
+    meta_model::name build();
 
 public:
     /**
@@ -75,7 +75,7 @@ public:
      *
      * @param names List of names. By copy non-const by design.
      */
-    static name build(std::list<std::string> names);
+    static meta_model::name build(std::list<std::string> names);
 
     /**
      * @brief One shot-builder method that, given a string encoded
@@ -84,11 +84,11 @@ public:
      *
      * @param names String encoding a list of names.
      */
-    static name build(const std::string& names);
+    static meta_model::name build(const std::string& names);
 
 private:
     const bool model_name_mode_;
-    name name_;
+    meta_model::name name_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/name_factory.hpp b/projects/yarn/include/dogen/yarn/types/helpers/name_factory.hpp
index c1b54737b..58401d018 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/name_factory.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/name_factory.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <string>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -45,7 +45,7 @@ public:
      *
      * @pre @e model_name must not be empty.
      */
-    name build_model_name(const std::string& model_name,
+    meta_model::name build_model_name(const std::string& model_name,
         const std::string& external_modules = std::string()) const;
 
     /**
@@ -53,10 +53,10 @@ public:
      * the element name.
      */
     /**@{*/
-    name build_element_name(const std::string& simple_name) const;
-    name build_element_name(const std::string& model_name,
+    meta_model::name build_element_name(const std::string& simple_name) const;
+    meta_model::name build_element_name(const std::string& model_name,
         const std::string& simple_name) const;
-    name build_element_name(const std::string& simple_name,
+    meta_model::name build_element_name(const std::string& simple_name,
         const std::list<std::string>& internal_modules) const;
     /**@}*/
 
@@ -65,9 +65,9 @@ public:
      * model it is located in, creates the element name.
      */
     /**@{*/
-    name build_element_in_model(const name& model_name,
+    meta_model::name build_element_in_model(const meta_model::name& model_name,
         const std::string& simple_name) const;
-    name build_element_in_model(const name& model_name,
+    meta_model::name build_element_in_model(const meta_model::name& model_name,
         const std::string& simple_name,
         const std::list<std::string>& internal_modules) const;
     /**@}*/
@@ -76,7 +76,7 @@ public:
      * @brief Given a simple name for an element and the name of the
      * module it is located in, creates the element name.
      */
-    name build_element_in_module(const name& module_name,
+    meta_model::name build_element_in_module(const meta_model::name& module_name,
         const std::string& simple_name) const;
 
     /**
@@ -85,9 +85,9 @@ public:
      * the module.
      */
     /**@{*/
-    name build_module_name(const name& model_name,
+    meta_model::name build_module_name(const meta_model::name& model_name,
         const std::list<std::string>& internal_modules) const;
-    name build_module_name(const name& model_name,
+    meta_model::name build_module_name(const meta_model::name& model_name,
         const std::string& module_name,
         const std::list<std::string>& internal_modules) const;
     /**@}*/
@@ -95,8 +95,9 @@ public:
     /**
      * @brief Combines element name with model name.
      */
-    name build_combined_element_name(const name& model_name,
-        const name& partial_element_name,
+    meta_model::name build_combined_element_name(
+        const meta_model::name& model_name,
+        const meta_model::name& partial_element_name,
         const bool populate_model_modules_if_blank = false,
         const bool populate_internal_modules_if_blank = false) const;
 
@@ -105,15 +106,17 @@ public:
      * become the model name.
      */
     /**@{*/
-    name build_promoted_module_name(const name& element_name) const;
-    name build_promoted_module_name(const name& model_name,
-        const name& element_name) const;
+    meta_model::name build_promoted_module_name(
+        const meta_model::name& element_name) const;
+    meta_model::name build_promoted_module_name(
+        const meta_model::name& model_name,
+        const meta_model::name& element_name) const;
     /**@}*/
 
     /**
      * @brief Builds an attribute name.
      */
-    name build_attribute_name(const name& owner_name,
+    meta_model::name build_attribute_name(const meta_model::name& owner_name,
         const std::string& simple_name) const;
 };
 
diff --git a/projects/yarn/include/dogen/yarn/types/name_flattener.hpp b/projects/yarn/include/dogen/yarn/types/helpers/name_flattener.hpp
similarity index 80%
rename from projects/yarn/include/dogen/yarn/types/name_flattener.hpp
rename to projects/yarn/include/dogen/yarn/types/helpers/name_flattener.hpp
index fd2fd02e0..805168a37 100644
--- a/projects/yarn/include/dogen/yarn/types/name_flattener.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/name_flattener.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_FLATTENER_HPP
-#define DOGEN_YARN_TYPES_NAME_FLATTENER_HPP
+#ifndef DOGEN_YARN_TYPES_HELPERS_NAME_FLATTENER_HPP
+#define DOGEN_YARN_TYPES_HELPERS_NAME_FLATTENER_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,22 +27,23 @@
 
 #include <list>
 #include <string>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace helpers {
 
-class name_flattener {
+class name_flattener final {
 public:
     explicit name_flattener(const bool detect_model_name = true);
 
 public:
-    std::list<std::string> flatten(const name& n) const;
+    std::list<std::string> flatten(const meta_model::name& n) const;
 
 private:
     const bool detect_model_name_;
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/name_flattener_fwd.hpp b/projects/yarn/include/dogen/yarn/types/helpers/name_flattener_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/name_flattener_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/helpers/name_flattener_fwd.hpp
index 53d0231b4..f6c4d2f15 100644
--- a/projects/yarn/include/dogen/yarn/types/name_flattener_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/name_flattener_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_FLATTENER_FWD_HPP
-#define DOGEN_YARN_TYPES_NAME_FLATTENER_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_HELPERS_NAME_FLATTENER_FWD_HPP
+#define DOGEN_YARN_TYPES_HELPERS_NAME_FLATTENER_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace helpers {
 
 class name_flattener;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/name_tree_builder.hpp b/projects/yarn/include/dogen/yarn/types/helpers/name_tree_builder.hpp
index f3fa9659a..416428762 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/name_tree_builder.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/name_tree_builder.hpp
@@ -29,9 +29,9 @@
 #include <string>
 #include <unordered_set>
 #include <boost/shared_ptr.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/location.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 #include "dogen/yarn/types/helpers/node.hpp"
 
 namespace dogen {
@@ -95,14 +95,14 @@ private:
      * @brief Generate the name tree for the given node
      * representation.
      */
-    name_tree make_name_tree(const node& n);
+    meta_model::name_tree make_name_tree(const node& n);
 
 public:
     /**
      * @brief Generate the name tree representation for the current
      * node representation.
      */
-    name_tree build();
+    meta_model::name_tree build();
 
 private:
     std::list<std::string> names_;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/new_name_tree_parser.hpp b/projects/yarn/include/dogen/yarn/types/helpers/new_name_tree_parser.hpp
index 8103a595c..8d375a972 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/new_name_tree_parser.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/new_name_tree_parser.hpp
@@ -41,8 +41,8 @@
 #include <boost/phoenix/bind/bind_function.hpp>
 
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
 #include "dogen/yarn/types/helpers/parsing_error.hpp"
 #include "dogen/yarn/types/helpers/name_tree_builder.hpp"
 
@@ -246,7 +246,7 @@ struct name_tree_listener
 
     name_tree_listener() {}
     name_tree_listener(const std::unordered_set<std::string>& top_level_modules,
-        const ::dogen::yarn::location& model_location) : ntb(top_level_modules, model_location) {}
+        const ::dogen::yarn::meta_model::location& model_location) : ntb(top_level_modules, model_location) {}
 
     void apply()
     {
@@ -281,11 +281,11 @@ struct custom_type_grammar : qi::grammar<Iterator, Skipper>
     }
 
 
-    std::string scope_operator_for_language(const dogen::yarn::languages l) {
+    std::string scope_operator_for_language(const dogen::yarn::meta_model::languages l) {
         switch (l) {
-        case dogen::yarn::languages::csharp:  return ".";
-        case dogen::yarn::languages::cpp:     return "::";
-        case dogen::yarn::languages::upsilon: return "::";
+        case dogen::yarn::meta_model::languages::csharp:  return ".";
+        case dogen::yarn::meta_model::languages::cpp:     return "::";
+        case dogen::yarn::meta_model::languages::upsilon: return "::";
         default: {
             const auto s(boost::lexical_cast<std::string>(l));
             BOOST_LOG_SEV(lg, error) << unsupported_language << s;
@@ -313,7 +313,7 @@ struct custom_type_grammar : qi::grammar<Iterator, Skipper>
     }
 
     std::string scope_str;
-    custom_type_grammar(name_tree_listener<NameTreeBuilder> * listener, const dogen::yarn::languages l)
+    custom_type_grammar(name_tree_listener<NameTreeBuilder> * listener, const dogen::yarn::meta_model::languages l)
           : custom_type_grammar::base_type(custom_type), listener(listener), scope_str(scope_operator_for_language(l))
     {
         namespace phoenix = boost::phoenix;
@@ -399,7 +399,7 @@ struct grammar : qi::grammar<Iterator, Skipper> {
     }
 
     grammar(listener_t &l,
-            const dogen::yarn::languages language)
+        const dogen::yarn::meta_model::languages language)
                 : grammar::base_type(type_name), listener(&l), custom_type{ &l , language } {
         setup_functors();
         using qi::on_error;
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/node.hpp b/projects/yarn/include/dogen/yarn/types/helpers/node.hpp
index 104813359..d8a3ea159 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/node.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/node.hpp
@@ -28,7 +28,7 @@
 #include <list>
 #include <algorithm>
 #include <boost/shared_ptr.hpp>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/types/helpers/node_fwd.hpp"
 #include "dogen/yarn/serialization/helpers/node_fwd_ser.hpp"
 
@@ -51,7 +51,7 @@ public:
 public:
     node(
         const boost::shared_ptr<dogen::yarn::helpers::node>& parent,
-        const dogen::yarn::name& data,
+        const dogen::yarn::meta_model::name& data,
         const std::list<boost::shared_ptr<dogen::yarn::helpers::node> >& children);
 
 private:
@@ -76,10 +76,10 @@ public:
      * @brief Current node.
      */
     /**@{*/
-    const dogen::yarn::name& data() const;
-    dogen::yarn::name& data();
-    void data(const dogen::yarn::name& v);
-    void data(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& data() const;
+    dogen::yarn::meta_model::name& data();
+    void data(const dogen::yarn::meta_model::name& v);
+    void data(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
@@ -104,7 +104,7 @@ public:
 
 private:
     boost::shared_ptr<dogen::yarn::helpers::node> parent_;
-    dogen::yarn::name data_;
+    dogen::yarn::meta_model::name data_;
     std::list<boost::shared_ptr<dogen::yarn::helpers::node> > children_;
 };
 
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/persister.hpp b/projects/yarn/include/dogen/yarn/types/helpers/persister.hpp
index 5d1f7ba5c..f2ac5bdef 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/persister.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/persister.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -46,7 +46,7 @@ public:
      * The format to use is inferred by the extension supplied. If the
      * extension supplied is not supported, an extension is thrown.
      */
-    static void persist(const intermediate_model& m,
+    static void persist(const meta_model::intermediate_model& m,
         const boost::filesystem::path& p);
 };
 
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/post_processing_validator.hpp b/projects/yarn/include/dogen/yarn/types/helpers/post_processing_validator.hpp
index 7d7185c96..d97eadf32 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/post_processing_validator.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/post_processing_validator.hpp
@@ -29,10 +29,10 @@
 #include <string>
 #include <utility>
 #include <unordered_set>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/decomposition_result.hpp"
 
 namespace dogen {
@@ -41,36 +41,39 @@ namespace helpers {
 
 class post_processing_validator final {
 private:
-    static bool allow_spaces_in_built_in_types(const languages l);
-    static decomposition_result decompose_model(const intermediate_model& im);
+    static bool allow_spaces_in_built_in_types(const meta_model::languages l);
+    static decomposition_result
+    decompose_model(const meta_model::intermediate_model& im);
 
 private:
-    static void validate_enumerations(const indices& idx,
-        const std::unordered_map<std::string, enumeration>& enumerations);
+    static void validate_enumerations(const indices& idx, const
+        std::unordered_map<std::string, meta_model::enumeration>& enumerations);
 
-    static void validate_primitives(const indices& idx,
-        const std::unordered_map<std::string, primitive>& primitivess);
+    static void validate_primitives(const indices& idx, const
+        std::unordered_map<std::string, meta_model::primitive>& primitivess);
 
 private:
     static void validate_string(const std::string& s,
         bool check_not_builtin = true);
     static void validate_strings(const std::list<std::string>& strings);
-    static void validate_name(const name& n,
+    static void validate_name(const meta_model::name& n,
         const bool allow_spaces_in_built_in_types);
     static void validate_names(
-        const std::list<std::pair<std::string, name>>& names,
-        const languages l);
+        const std::list<std::pair<std::string, meta_model::name>>& names,
+        const meta_model::languages l);
 
     static void validate_name_tree(const std::unordered_set<std::string>&
-        abstract_elements, const languages l, const name_tree& nt,
+        abstract_elements, const meta_model::languages l,
+        const meta_model::name_tree& nt,
         const bool inherit_opaqueness_from_parent = false);
     static void validate_name_trees(
         const std::unordered_set<std::string>& abstract_elements,
-        const languages l,
-        const std::list<std::pair<std::string, name_tree>>& nts);
+        const meta_model::languages l,
+        const std::list<std::pair<std::string, meta_model::name_tree>>& nts);
 
 public:
-    static void validate(const indices& idx, const intermediate_model& im);
+    static void validate(const indices& idx,
+        const meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/pre_processing_validator.hpp b/projects/yarn/include/dogen/yarn/types/helpers/pre_processing_validator.hpp
index 46d13d9c0..5063d0495 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/pre_processing_validator.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/pre_processing_validator.hpp
@@ -25,7 +25,7 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -33,7 +33,7 @@ namespace helpers {
 
 class pre_processing_validator final {
 public:
-    static void validate(const intermediate_model& im);
+    static void validate(const meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/pretty_printer.hpp b/projects/yarn/include/dogen/yarn/types/helpers/pretty_printer.hpp
index 85422e51d..8a6c60424 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/pretty_printer.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/pretty_printer.hpp
@@ -27,7 +27,7 @@
 
 #include <string>
 #include <sstream>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/yarn/types/helpers/separators.hpp"
 
 namespace dogen {
@@ -40,7 +40,7 @@ public:
     explicit pretty_printer(const separators s);
 
 private:
-    std::list<std::string> to_list(const name& n,
+    std::list<std::string> to_list(const meta_model::name& n,
         const bool model_name_mode) const;
 
 private:
@@ -49,7 +49,7 @@ private:
     void print_enclosed(const std::list<std::string>& l);
 
 public:
-    void add(const name& n, const bool model_name_mode = false);
+    void add(const meta_model::name& n, const bool model_name_mode = false);
     void add(const std::string& c);
     void add_child(const std::string& c);
 
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/reference_paths_extractor.hpp b/projects/yarn/include/dogen/yarn/types/helpers/reference_paths_extractor.hpp
index c4cd5e072..e490cf309 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/reference_paths_extractor.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/reference_paths_extractor.hpp
@@ -29,8 +29,8 @@
 #include <iosfwd>
 #include "dogen/annotations/types/type.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -61,7 +61,8 @@ private:
 
 public:
     static std::list<boost::filesystem::path>
-    extract(const transforms::context& ctx, const intermediate_model& target);
+    extract(const transforms::context& ctx,
+        const meta_model::intermediate_model& target);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/helpers/resolver.hpp b/projects/yarn/include/dogen/yarn/types/helpers/resolver.hpp
index 0d51ea6f8..d8b80a6b9 100644
--- a/projects/yarn/include/dogen/yarn/types/helpers/resolver.hpp
+++ b/projects/yarn/include/dogen/yarn/types/helpers/resolver.hpp
@@ -27,9 +27,9 @@
 
 #include <list>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
 
 namespace dogen {
@@ -49,64 +49,77 @@ namespace helpers {
  */
 class resolver final {
 private:
-    static bool is_floating_point(const intermediate_model& im, const name& n);
-    static bool is_builtin(const intermediate_model& im, const name& n);
-    static bool is_primitive(const intermediate_model& im, const name& n);
-    static bool is_object(const intermediate_model& im, const name& n);
-    static bool is_enumeration(const intermediate_model& im, const name& n);
-    static bool is_concept(const intermediate_model& im, const name& n);
+    static bool is_floating_point(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
+    static bool is_builtin(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
+    static bool is_primitive(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
+    static bool is_object(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
+    static bool is_enumeration(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
+    static bool is_concept(const meta_model::intermediate_model& im,
+        const meta_model::name& n);
 
 private:
     /**
      * @brief Returns true if the name is in the model and can be
      * referred to from an attribute, false otherwise.
      */
-    static bool is_name_referable(const indices& idx, const name& n);
+    static bool is_name_referable(const indices& idx,
+        const meta_model::name& n);
 
     /**
      * @brief Resolves a name that has internal modules set.
      */
-    static name resolve_name_with_internal_modules(const intermediate_model& im,
-        const indices& idx, const name& ctx, const name& n);
+    static meta_model::name resolve_name_with_internal_modules(
+        const meta_model::intermediate_model& im, const indices& idx,
+        const meta_model::name& ctx, const meta_model::name& n);
 
     /**
      * @brief Resolves a name where the ctx has internal modules.
      */
-    static boost::optional<name> try_resolve_name_with_context_internal_modules(
-        const indices& idx, name ctx, const name& n);
+    static boost::optional<meta_model::name>
+    try_resolve_name_with_context_internal_modules(
+        const indices& idx, meta_model::name ctx, const meta_model::name& n);
 
     /**
      * @brief Resolves a partially formed name into a full name.
      */
-    static name resolve_name(const intermediate_model& im,
-        const indices& idx, const name& ctx, const name& n);
+    static meta_model::name resolve_name(
+        const meta_model::intermediate_model& im, const indices& idx,
+        const meta_model::name& ctx, const meta_model::name& n);
 
     /**
      * @brief Resolves all references contained in a name tree.
      */
-    static void resolve_name_tree(const intermediate_model& im,
-        const indices& idx, const name& owner, name_tree& nt);
+    static void resolve_name_tree(const meta_model::intermediate_model& im,
+        const indices& idx, const meta_model::name& owner,
+        meta_model::name_tree& nt);
 
     /**
      * @brief Resolves all references to types in the supplied attribute.
      */
-    static void resolve_attribute(const intermediate_model& im,
-        const indices& idx, const name& owner, attribute& attr);
+    static void resolve_attribute(const meta_model::intermediate_model& im,
+        const indices& idx, const meta_model::name& owner,
+        meta_model::attribute& attr);
 
     /**
      * @brief Resolves all references to types in the supplied attributes.
      */
-    static void resolve_attributes(const intermediate_model& im,
-        const indices& idx, const name& owner,
-        std::list<attribute>& attributes);
+    static void resolve_attributes(const meta_model::intermediate_model& im,
+        const indices& idx, const meta_model::name& owner,
+        std::list<meta_model::attribute>& attributes);
 
     /**
      * @brief Validates the inheritance graph for the object.
      *
      * @note should really be moved to validator.
      */
-    static void validate_inheritance_graph(const intermediate_model& im,
-        const object& o);
+    static void validate_inheritance_graph(
+        const meta_model::intermediate_model& im,
+        const meta_model::object& o);
 
     /**
      * @brief Ensures that all concepts refined by the current concept
@@ -114,48 +127,52 @@ private:
      *
      * @note should really be moved to validator.
      */
-    static void validate_refinements(const intermediate_model& im,
-        const concept& c);
+    static void validate_refinements(const meta_model::intermediate_model& im,
+        const meta_model::concept& c);
 
     /**
      * @brief Resolve all concepts.
      */
     static void resolve_concepts(const indices& idx,
-        intermediate_model& im);
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Resolve all objects.
      */
-    static void resolve_objects(const indices& idx, intermediate_model& im);
+    static void resolve_objects(const indices& idx,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Resolve all enumerations.
      */
-    static void resolve_enumerations(intermediate_model& im);
+    static void resolve_enumerations(meta_model::intermediate_model& im);
 
     /**
      * @brief Resolve all primitives.
      */
-    static void resolve_primitives(const indices& idx, intermediate_model& im);
+    static void resolve_primitives(const indices& idx,
+        meta_model::intermediate_model& im);
 
 public:
     /**
      * @brief Resolves the name against the supplied model.
      */
-    static name resolve(const intermediate_model& im, const indices& idx,
-        const name& ctx, const name& n);
+    static meta_model::name resolve(const meta_model::intermediate_model& im,
+        const indices& idx, const meta_model::name& ctx,
+        const meta_model::name& n);
 
     /**
      * @brief Resolves the name as a concept name.
      */
-    static boost::optional<name> try_resolve_concept_name(name ctx,
-        const std::string& s, const intermediate_model& im);
+    static boost::optional<meta_model::name>
+    try_resolve_concept_name(meta_model::name ctx,
+        const std::string& s, const meta_model::intermediate_model& im);
 
 public:
     /**
      * @brief Resolve all references to types within model.
      */
-    static void resolve(const indices& idx, intermediate_model& im);
+    static void resolve(const indices& idx, meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/intermediate_model.hpp b/projects/yarn/include/dogen/yarn/types/intermediate_model.hpp
deleted file mode 100644
index cea335964..000000000
--- a/projects/yarn/include/dogen/yarn/types/intermediate_model.hpp
+++ /dev/null
@@ -1,315 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#ifndef DOGEN_YARN_TYPES_INTERMEDIATE_MODEL_HPP
-#define DOGEN_YARN_TYPES_INTERMEDIATE_MODEL_HPP
-
-#if defined(_MSC_VER) && (_MSC_VER >= 1200)
-#pragma once
-#endif
-
-#include <list>
-#include <string>
-#include <algorithm>
-#include <unordered_map>
-#include <unordered_set>
-#include <boost/optional.hpp>
-#include <boost/shared_ptr.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/module.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/builtin.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/types/visitor.hpp"
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/types/exception.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/element_fwd.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/origin_types.hpp"
-#include "dogen/yarn/types/orm_model_properties.hpp"
-#include "dogen/annotations/types/scribble_group.hpp"
-#include "dogen/yarn/serialization/intermediate_model_fwd_ser.hpp"
-
-namespace dogen {
-namespace yarn {
-
-/**
- * @brief Intermediate representation of a yarn model.
- */
-class intermediate_model final {
-public:
-    intermediate_model(const intermediate_model&) = default;
-    ~intermediate_model() = default;
-
-public:
-    intermediate_model();
-
-public:
-    intermediate_model(intermediate_model&& rhs);
-
-public:
-    intermediate_model(
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& references,
-        const std::unordered_set<dogen::yarn::name>& leaves,
-        const std::unordered_map<std::string, dogen::yarn::module>& modules,
-        const std::unordered_map<std::string, dogen::yarn::concept>& concepts,
-        const std::unordered_map<std::string, dogen::yarn::builtin>& builtins,
-        const std::unordered_map<std::string, dogen::yarn::enumeration>& enumerations,
-        const std::unordered_map<std::string, dogen::yarn::primitive>& primitives,
-        const std::unordered_map<std::string, dogen::yarn::object>& objects,
-        const std::unordered_map<std::string, dogen::yarn::exception>& exceptions,
-        const std::unordered_map<std::string, dogen::yarn::visitor>& visitors,
-        const std::list<boost::shared_ptr<dogen::yarn::element> >& injected_elements,
-        const bool has_generatable_types,
-        const dogen::yarn::module& root_module,
-        const dogen::yarn::languages input_language,
-        const std::list<dogen::yarn::languages>& output_languages,
-        const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups,
-        const boost::optional<dogen::yarn::orm_model_properties>& orm_properties);
-
-private:
-    template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
-
-    template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
-
-public:
-    /**
-     * @brief Fully qualified name.
-     */
-    /**@{*/
-    const dogen::yarn::name& name() const;
-    dogen::yarn::name& name();
-    void name(const dogen::yarn::name& v);
-    void name(const dogen::yarn::name&& v);
-    /**@}*/
-
-    /**
-     * @brief How was this model element originated.
-     */
-    /**@{*/
-    dogen::yarn::origin_types origin_type() const;
-    void origin_type(const dogen::yarn::origin_types v);
-    /**@}*/
-
-    /**
-     * @brief All other intermediate models that this intermediate model depends on, mapped to their origin.
-     */
-    /**@{*/
-    const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& references() const;
-    std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& references();
-    void references(const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& v);
-    void references(const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>&& v);
-    /**@}*/
-
-    /**
-     * @brief All leaf types in this intermediate model.
-     *
-     * Leaves are types concrete types which have a parent.
-     */
-    /**@{*/
-    const std::unordered_set<dogen::yarn::name>& leaves() const;
-    std::unordered_set<dogen::yarn::name>& leaves();
-    void leaves(const std::unordered_set<dogen::yarn::name>& v);
-    void leaves(const std::unordered_set<dogen::yarn::name>&& v);
-    /**@}*/
-
-    /**
-     * @brief Modules contained in the intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::module>& modules() const;
-    std::unordered_map<std::string, dogen::yarn::module>& modules();
-    void modules(const std::unordered_map<std::string, dogen::yarn::module>& v);
-    void modules(const std::unordered_map<std::string, dogen::yarn::module>&& v);
-    /**@}*/
-
-    /**
-     * @brief All the concepts available in this intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::concept>& concepts() const;
-    std::unordered_map<std::string, dogen::yarn::concept>& concepts();
-    void concepts(const std::unordered_map<std::string, dogen::yarn::concept>& v);
-    void concepts(const std::unordered_map<std::string, dogen::yarn::concept>&& v);
-    /**@}*/
-
-    /**
-     * @brief All built-ins contained in this intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::builtin>& builtins() const;
-    std::unordered_map<std::string, dogen::yarn::builtin>& builtins();
-    void builtins(const std::unordered_map<std::string, dogen::yarn::builtin>& v);
-    void builtins(const std::unordered_map<std::string, dogen::yarn::builtin>&& v);
-    /**@}*/
-
-    /**
-     * @brief All enumerations contained in this intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::enumeration>& enumerations() const;
-    std::unordered_map<std::string, dogen::yarn::enumeration>& enumerations();
-    void enumerations(const std::unordered_map<std::string, dogen::yarn::enumeration>& v);
-    void enumerations(const std::unordered_map<std::string, dogen::yarn::enumeration>&& v);
-    /**@}*/
-
-    /**
-     * @brief All primitives in this intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::primitive>& primitives() const;
-    std::unordered_map<std::string, dogen::yarn::primitive>& primitives();
-    void primitives(const std::unordered_map<std::string, dogen::yarn::primitive>& v);
-    void primitives(const std::unordered_map<std::string, dogen::yarn::primitive>&& v);
-    /**@}*/
-
-    /**
-     * @brief All objects contained in this intermediate model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::object>& objects() const;
-    std::unordered_map<std::string, dogen::yarn::object>& objects();
-    void objects(const std::unordered_map<std::string, dogen::yarn::object>& v);
-    void objects(const std::unordered_map<std::string, dogen::yarn::object>&& v);
-    /**@}*/
-
-    /**
-     * @brief All exceptions in this model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::exception>& exceptions() const;
-    std::unordered_map<std::string, dogen::yarn::exception>& exceptions();
-    void exceptions(const std::unordered_map<std::string, dogen::yarn::exception>& v);
-    void exceptions(const std::unordered_map<std::string, dogen::yarn::exception>&& v);
-    /**@}*/
-
-    /**
-     * @brief All visitors in this model.
-     */
-    /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::visitor>& visitors() const;
-    std::unordered_map<std::string, dogen::yarn::visitor>& visitors();
-    void visitors(const std::unordered_map<std::string, dogen::yarn::visitor>& v);
-    void visitors(const std::unordered_map<std::string, dogen::yarn::visitor>&& v);
-    /**@}*/
-
-    /**
-     * @brief Elements injected externally.
-     */
-    /**@{*/
-    const std::list<boost::shared_ptr<dogen::yarn::element> >& injected_elements() const;
-    std::list<boost::shared_ptr<dogen::yarn::element> >& injected_elements();
-    void injected_elements(const std::list<boost::shared_ptr<dogen::yarn::element> >& v);
-    void injected_elements(const std::list<boost::shared_ptr<dogen::yarn::element> >&& v);
-    /**@}*/
-
-    /**
-     * @brief If true the intermediate model has at least one generable type, false otherwise.
-     */
-    /**@{*/
-    bool has_generatable_types() const;
-    void has_generatable_types(const bool v);
-    /**@}*/
-
-    const dogen::yarn::module& root_module() const;
-    dogen::yarn::module& root_module();
-    void root_module(const dogen::yarn::module& v);
-    void root_module(const dogen::yarn::module&& v);
-
-    /**
-     * @brief Language in which this model was written.
-     */
-    /**@{*/
-    dogen::yarn::languages input_language() const;
-    void input_language(const dogen::yarn::languages v);
-    /**@}*/
-
-    /**
-     * @brief Languages in which to output this model.
-     */
-    /**@{*/
-    const std::list<dogen::yarn::languages>& output_languages() const;
-    std::list<dogen::yarn::languages>& output_languages();
-    void output_languages(const std::list<dogen::yarn::languages>& v);
-    void output_languages(const std::list<dogen::yarn::languages>&& v);
-    /**@}*/
-
-    const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups() const;
-    std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups();
-    void scribble_groups(const std::unordered_map<std::string, dogen::annotations::scribble_group>& v);
-    void scribble_groups(const std::unordered_map<std::string, dogen::annotations::scribble_group>&& v);
-
-    const boost::optional<dogen::yarn::orm_model_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_model_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_model_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_model_properties>&& v);
-
-public:
-    bool operator==(const intermediate_model& rhs) const;
-    bool operator!=(const intermediate_model& rhs) const {
-        return !this->operator==(rhs);
-    }
-
-public:
-    void swap(intermediate_model& other) noexcept;
-    intermediate_model& operator=(intermediate_model other);
-
-private:
-    dogen::yarn::name name_;
-    dogen::yarn::origin_types origin_type_;
-    std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types> references_;
-    std::unordered_set<dogen::yarn::name> leaves_;
-    std::unordered_map<std::string, dogen::yarn::module> modules_;
-    std::unordered_map<std::string, dogen::yarn::concept> concepts_;
-    std::unordered_map<std::string, dogen::yarn::builtin> builtins_;
-    std::unordered_map<std::string, dogen::yarn::enumeration> enumerations_;
-    std::unordered_map<std::string, dogen::yarn::primitive> primitives_;
-    std::unordered_map<std::string, dogen::yarn::object> objects_;
-    std::unordered_map<std::string, dogen::yarn::exception> exceptions_;
-    std::unordered_map<std::string, dogen::yarn::visitor> visitors_;
-    std::list<boost::shared_ptr<dogen::yarn::element> > injected_elements_;
-    bool has_generatable_types_;
-    dogen::yarn::module root_module_;
-    dogen::yarn::languages input_language_;
-    std::list<dogen::yarn::languages> output_languages_;
-    std::unordered_map<std::string, dogen::annotations::scribble_group> scribble_groups_;
-    boost::optional<dogen::yarn::orm_model_properties> orm_properties_;
-};
-
-} }
-
-namespace std {
-
-template<>
-inline void swap(
-    dogen::yarn::intermediate_model& lhs,
-    dogen::yarn::intermediate_model& rhs) {
-    lhs.swap(rhs);
-}
-
-}
-
-#endif
diff --git a/projects/yarn/include/dogen/yarn/types/artefact_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties.hpp
similarity index 78%
rename from projects/yarn/include/dogen/yarn/types/artefact_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties.hpp
index ddb913913..80c33b543 100644
--- a/projects/yarn/include/dogen/yarn/types/artefact_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ARTEFACT_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ARTEFACT_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ARTEFACT_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ARTEFACT_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,11 +29,12 @@
 #include <string>
 #include <algorithm>
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/formatting_styles.hpp"
-#include "dogen/yarn/serialization/artefact_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/formatting_styles.hpp"
+#include "dogen/yarn/serialization/meta_model/artefact_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class artefact_properties final {
 public:
@@ -52,15 +53,15 @@ public:
         const bool overwrite,
         const boost::filesystem::path& file_path,
         const std::list<std::string>& dependencies,
-        const dogen::yarn::formatting_styles formatting_style,
+        const dogen::yarn::meta_model::formatting_styles formatting_style,
         const std::string& formatting_input);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
 public:
     bool enabled() const;
@@ -79,8 +80,8 @@ public:
     void dependencies(const std::list<std::string>& v);
     void dependencies(const std::list<std::string>&& v);
 
-    dogen::yarn::formatting_styles formatting_style() const;
-    void formatting_style(const dogen::yarn::formatting_styles v);
+    dogen::yarn::meta_model::formatting_styles formatting_style() const;
+    void formatting_style(const dogen::yarn::meta_model::formatting_styles v);
 
     const std::string& formatting_input() const;
     std::string& formatting_input();
@@ -102,18 +103,18 @@ private:
     bool overwrite_;
     boost::filesystem::path file_path_;
     std::list<std::string> dependencies_;
-    dogen::yarn::formatting_styles formatting_style_;
+    dogen::yarn::meta_model::formatting_styles formatting_style_;
     std::string formatting_input_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::artefact_properties& lhs,
-    dogen::yarn::artefact_properties& rhs) {
+    dogen::yarn::meta_model::artefact_properties& lhs,
+    dogen::yarn::meta_model::artefact_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/artefact_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/artefact_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties_fwd.hpp
index c975df953..96caec5ab 100644
--- a/projects/yarn/include/dogen/yarn/types/artefact_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/artefact_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ARTEFACT_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ARTEFACT_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ARTEFACT_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ARTEFACT_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class artefact_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/attribute.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/attribute.hpp
similarity index 68%
rename from projects/yarn/include/dogen/yarn/types/attribute.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/attribute.hpp
index bea43ea54..c9c2d6b08 100644
--- a/projects/yarn/include/dogen/yarn/types/attribute.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/attribute.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ATTRIBUTE_HPP
-#define DOGEN_YARN_TYPES_ATTRIBUTE_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ATTRIBUTE_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ATTRIBUTE_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,14 +28,15 @@
 #include <string>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/annotations/types/annotation.hpp"
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
-#include "dogen/yarn/serialization/attribute_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents an attribute in an object.
@@ -55,19 +56,19 @@ public:
     attribute(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
+        const dogen::yarn::meta_model::name& name,
         const std::string& unparsed_type,
-        const dogen::yarn::name_tree& parsed_type,
+        const dogen::yarn::meta_model::name_tree& parsed_type,
         const bool is_immutable,
         const bool is_fluent,
-        const boost::optional<dogen::yarn::orm_attribute_properties>& orm_properties);
+        const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& orm_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::attribute& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::attribute& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 public:
     /**
@@ -98,10 +99,10 @@ public:
      * @brief Fully qualified name.
      */
     /**@{*/
-    const dogen::yarn::name& name() const;
-    dogen::yarn::name& name();
-    void name(const dogen::yarn::name& v);
-    void name(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& name() const;
+    dogen::yarn::meta_model::name& name();
+    void name(const dogen::yarn::meta_model::name& v);
+    void name(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
@@ -120,10 +121,10 @@ public:
      * @brief Tree of names that represent the type of the attribute, after suitable parsing.
      */
     /**@{*/
-    const dogen::yarn::name_tree& parsed_type() const;
-    dogen::yarn::name_tree& parsed_type();
-    void parsed_type(const dogen::yarn::name_tree& v);
-    void parsed_type(const dogen::yarn::name_tree&& v);
+    const dogen::yarn::meta_model::name_tree& parsed_type() const;
+    dogen::yarn::meta_model::name_tree& parsed_type();
+    void parsed_type(const dogen::yarn::meta_model::name_tree& v);
+    void parsed_type(const dogen::yarn::meta_model::name_tree&& v);
     /**@}*/
 
     /**
@@ -142,10 +143,10 @@ public:
     void is_fluent(const bool v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::orm_attribute_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_attribute_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_attribute_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_attribute_properties>&& v);
+    const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>&& v);
 
 public:
     bool operator==(const attribute& rhs) const;
@@ -160,22 +161,22 @@ public:
 private:
     std::string documentation_;
     dogen::annotations::annotation annotation_;
-    dogen::yarn::name name_;
+    dogen::yarn::meta_model::name name_;
     std::string unparsed_type_;
-    dogen::yarn::name_tree parsed_type_;
+    dogen::yarn::meta_model::name_tree parsed_type_;
     bool is_immutable_;
     bool is_fluent_;
-    boost::optional<dogen::yarn::orm_attribute_properties> orm_properties_;
+    boost::optional<dogen::yarn::meta_model::orm_attribute_properties> orm_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::attribute& lhs,
-    dogen::yarn::attribute& rhs) {
+    dogen::yarn::meta_model::attribute& lhs,
+    dogen::yarn::meta_model::attribute& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/attribute_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/attribute_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/attribute_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/attribute_fwd.hpp
index eca0a2dc4..cb8259c72 100644
--- a/projects/yarn/include/dogen/yarn/types/attribute_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/attribute_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ATTRIBUTE_FWD_HPP
-#define DOGEN_YARN_TYPES_ATTRIBUTE_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ATTRIBUTE_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ATTRIBUTE_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class attribute;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/builtin.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/builtin.hpp
similarity index 80%
rename from projects/yarn/include/dogen/yarn/types/builtin.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/builtin.hpp
index c0ff94b31..3fc64806d 100644
--- a/projects/yarn/include/dogen/yarn/types/builtin.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/builtin.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_BUILTIN_HPP
-#define DOGEN_YARN_TYPES_BUILTIN_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_BUILTIN_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_BUILTIN_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,16 +27,17 @@
 
 #include <iosfwd>
 #include <algorithm>
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/serialization/builtin_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents a value type that is built-in at the hardware level.
  */
-class builtin final : public dogen::yarn::element {
+class builtin final : public dogen::yarn::meta_model::element {
 public:
     builtin(const builtin&) = default;
     builtin(builtin&&) = default;
@@ -50,13 +51,13 @@ public:
     builtin(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
+        const dogen::yarn::meta_model::element_properties& element_properties,
         const bool is_default_enumeration_type,
         const bool is_floating_point,
         const bool can_be_enumeration_underlier,
@@ -64,10 +65,10 @@ public:
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::builtin& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::builtin& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 public:
     using element::accept;
@@ -119,7 +120,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(builtin& other) noexcept;
@@ -132,14 +133,14 @@ private:
     bool can_be_primitive_underlier_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::builtin& lhs,
-    dogen::yarn::builtin& rhs) {
+    dogen::yarn::meta_model::builtin& lhs,
+    dogen::yarn::meta_model::builtin& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/builtin_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/builtin_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/builtin_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/builtin_fwd.hpp
index b9a772cea..b3be96982 100644
--- a/projects/yarn/include/dogen/yarn/types/builtin_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/builtin_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_BUILTIN_FWD_HPP
-#define DOGEN_YARN_TYPES_BUILTIN_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_BUILTIN_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_BUILTIN_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class builtin;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/concept.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/concept.hpp
similarity index 62%
rename from projects/yarn/include/dogen/yarn/types/concept.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/concept.hpp
index e3cc240c1..d669d0c9f 100644
--- a/projects/yarn/include/dogen/yarn/types/concept.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/concept.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_CONCEPT_HPP
-#define DOGEN_YARN_TYPES_CONCEPT_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_CONCEPT_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_CONCEPT_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,14 +29,15 @@
 #include <iosfwd>
 #include <algorithm>
 #include <unordered_map>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/types/attribute.hpp"
-#include "dogen/yarn/serialization/concept_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents a concept in the generic programming sense.
@@ -51,7 +52,7 @@ namespace yarn {
  * @li to model commonalities between types that are not expressed using
  * generalisation relationships.
  */
-class concept final : public dogen::yarn::element {
+class concept final : public dogen::yarn::meta_model::element {
 public:
     concept(const concept&) = default;
     concept(concept&&) = default;
@@ -65,27 +66,27 @@ public:
     concept(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
-        const std::list<dogen::yarn::attribute>& all_attributes,
-        const std::list<dogen::yarn::attribute>& local_attributes,
-        const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes,
+        const dogen::yarn::meta_model::element_properties& element_properties,
+        const std::list<dogen::yarn::meta_model::attribute>& all_attributes,
+        const std::list<dogen::yarn::meta_model::attribute>& local_attributes,
+        const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes,
         const bool is_immutable,
         const bool is_fluent,
-        const std::list<dogen::yarn::name>& refines,
+        const std::list<dogen::yarn::meta_model::name>& refines,
         const bool is_child);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::concept& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::concept& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
 public:
     using element::accept;
@@ -111,20 +112,20 @@ public:
      * not have a need for it.
      */
     /**@{*/
-    const std::list<dogen::yarn::attribute>& all_attributes() const;
-    std::list<dogen::yarn::attribute>& all_attributes();
-    void all_attributes(const std::list<dogen::yarn::attribute>& v);
-    void all_attributes(const std::list<dogen::yarn::attribute>&& v);
+    const std::list<dogen::yarn::meta_model::attribute>& all_attributes() const;
+    std::list<dogen::yarn::meta_model::attribute>& all_attributes();
+    void all_attributes(const std::list<dogen::yarn::meta_model::attribute>& v);
+    void all_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v);
     /**@}*/
 
     /**
      * @brief The set of all attributes directly associated with the type.
      */
     /**@{*/
-    const std::list<dogen::yarn::attribute>& local_attributes() const;
-    std::list<dogen::yarn::attribute>& local_attributes();
-    void local_attributes(const std::list<dogen::yarn::attribute>& v);
-    void local_attributes(const std::list<dogen::yarn::attribute>&& v);
+    const std::list<dogen::yarn::meta_model::attribute>& local_attributes() const;
+    std::list<dogen::yarn::meta_model::attribute>& local_attributes();
+    void local_attributes(const std::list<dogen::yarn::meta_model::attribute>& v);
+    void local_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v);
     /**@}*/
 
     /**
@@ -134,10 +135,10 @@ public:
      * formatting.
      */
     /**@{*/
-    const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes() const;
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes();
-    void inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v);
-    void inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >&& v);
+    const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes() const;
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes();
+    void inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v);
+    void inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >&& v);
     /**@}*/
 
     /**
@@ -164,10 +165,10 @@ public:
      * applied to concepts.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& refines() const;
-    std::list<dogen::yarn::name>& refines();
-    void refines(const std::list<dogen::yarn::name>& v);
-    void refines(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& refines() const;
+    std::list<dogen::yarn::meta_model::name>& refines();
+    void refines(const std::list<dogen::yarn::meta_model::name>& v);
+    void refines(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
@@ -187,30 +188,30 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(concept& other) noexcept;
     concept& operator=(concept other);
 
 private:
-    std::list<dogen::yarn::attribute> all_attributes_;
-    std::list<dogen::yarn::attribute> local_attributes_;
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > inherited_attributes_;
+    std::list<dogen::yarn::meta_model::attribute> all_attributes_;
+    std::list<dogen::yarn::meta_model::attribute> local_attributes_;
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > inherited_attributes_;
     bool is_immutable_;
     bool is_fluent_;
-    std::list<dogen::yarn::name> refines_;
+    std::list<dogen::yarn::meta_model::name> refines_;
     bool is_child_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::concept& lhs,
-    dogen::yarn::concept& rhs) {
+    dogen::yarn::meta_model::concept& lhs,
+    dogen::yarn::meta_model::concept& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/concept_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/concept_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/concept_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/concept_fwd.hpp
index 146b81597..c56e55898 100644
--- a/projects/yarn/include/dogen/yarn/types/concept_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/concept_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_CONCEPT_FWD_HPP
-#define DOGEN_YARN_TYPES_CONCEPT_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_CONCEPT_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_CONCEPT_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class concept;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/element.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/types/element.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/element.hpp
index c4bf8e0c6..b2edb5c82 100644
--- a/projects/yarn/include/dogen/yarn/types/element.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -30,15 +30,16 @@
 #include <vector>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/annotations/types/annotation.hpp"
-#include "dogen/yarn/types/element_properties.hpp"
-#include "dogen/yarn/types/element_visitor_fwd.hpp"
-#include "dogen/yarn/serialization/element_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor_fwd.hpp"
+#include "dogen/yarn/serialization/meta_model/element_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents a generic modeling construct.
@@ -63,20 +64,20 @@ public:
     element(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties);
+        const dogen::yarn::meta_model::element_properties& element_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::element& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::element& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
 public:
     virtual void accept(const element_visitor& v) const = 0;
@@ -116,28 +117,28 @@ public:
      * @brief Fully qualified name.
      */
     /**@{*/
-    const dogen::yarn::name& name() const;
-    dogen::yarn::name& name();
-    void name(const dogen::yarn::name& v);
-    void name(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& name() const;
+    dogen::yarn::meta_model::name& name();
+    void name(const dogen::yarn::meta_model::name& v);
+    void name(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
      * @brief How was this model element originated.
      */
     /**@{*/
-    dogen::yarn::origin_types origin_type() const;
-    void origin_type(const dogen::yarn::origin_types v);
+    dogen::yarn::meta_model::origin_types origin_type() const;
+    void origin_type(const dogen::yarn::meta_model::origin_types v);
     /**@}*/
 
     /**
      * @brief Name of the module in which we are contained.
      */
     /**@{*/
-    const boost::optional<dogen::yarn::name>& contained_by() const;
-    boost::optional<dogen::yarn::name>& contained_by();
-    void contained_by(const boost::optional<dogen::yarn::name>& v);
-    void contained_by(const boost::optional<dogen::yarn::name>&& v);
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by() const;
+    boost::optional<dogen::yarn::meta_model::name>& contained_by();
+    void contained_by(const boost::optional<dogen::yarn::meta_model::name>& v);
+    void contained_by(const boost::optional<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
@@ -161,10 +162,10 @@ public:
     void is_element_extension(const bool v);
     /**@}*/
 
-    const dogen::yarn::element_properties& element_properties() const;
-    dogen::yarn::element_properties& element_properties();
-    void element_properties(const dogen::yarn::element_properties& v);
-    void element_properties(const dogen::yarn::element_properties&& v);
+    const dogen::yarn::meta_model::element_properties& element_properties() const;
+    dogen::yarn::meta_model::element_properties& element_properties();
+    void element_properties(const dogen::yarn::meta_model::element_properties& v);
+    void element_properties(const dogen::yarn::meta_model::element_properties&& v);
 
 protected:
     bool compare(const element& rhs) const;
@@ -177,13 +178,13 @@ protected:
 private:
     std::string documentation_;
     dogen::annotations::annotation annotation_;
-    dogen::yarn::name name_;
-    dogen::yarn::origin_types origin_type_;
-    boost::optional<dogen::yarn::name> contained_by_;
+    dogen::yarn::meta_model::name name_;
+    dogen::yarn::meta_model::origin_types origin_type_;
+    boost::optional<dogen::yarn::meta_model::name> contained_by_;
     bool in_global_module_;
     std::vector<std::string> stereotypes_;
     bool is_element_extension_;
-    dogen::yarn::element_properties element_properties_;
+    dogen::yarn::meta_model::element_properties element_properties_;
 };
 
 inline element::~element() noexcept { }
@@ -192,6 +193,6 @@ inline bool operator==(const element& lhs, const element& rhs) {
     return lhs.equals(rhs);
 }
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/element_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/element_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/element_fwd.hpp
index b6b8c3bb3..c4d8fb4a9 100644
--- a/projects/yarn/include/dogen/yarn/types/element_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_FWD_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/element_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element_properties.hpp
similarity index 70%
rename from projects/yarn/include/dogen/yarn/types/element_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/element_properties.hpp
index 95a40bdbc..5ed1bd201 100644
--- a/projects/yarn/include/dogen/yarn/types/element_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,12 +28,13 @@
 #include <string>
 #include <algorithm>
 #include <unordered_map>
-#include "dogen/yarn/types/artefact_properties.hpp"
 #include "dogen/formatters/types/decoration_properties.hpp"
-#include "dogen/yarn/serialization/element_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/element_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element_properties final {
 public:
@@ -45,14 +46,14 @@ public:
 public:
     element_properties(
         const dogen::formatters::decoration_properties& decoration_properties,
-        const std::unordered_map<std::string, dogen::yarn::artefact_properties>& artefact_properties);
+        const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& artefact_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::element_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::element_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 public:
     const dogen::formatters::decoration_properties& decoration_properties() const;
@@ -60,10 +61,10 @@ public:
     void decoration_properties(const dogen::formatters::decoration_properties& v);
     void decoration_properties(const dogen::formatters::decoration_properties&& v);
 
-    const std::unordered_map<std::string, dogen::yarn::artefact_properties>& artefact_properties() const;
-    std::unordered_map<std::string, dogen::yarn::artefact_properties>& artefact_properties();
-    void artefact_properties(const std::unordered_map<std::string, dogen::yarn::artefact_properties>& v);
-    void artefact_properties(const std::unordered_map<std::string, dogen::yarn::artefact_properties>&& v);
+    const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& artefact_properties() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& artefact_properties();
+    void artefact_properties(const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& v);
+    void artefact_properties(const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>&& v);
 
 public:
     bool operator==(const element_properties& rhs) const;
@@ -77,17 +78,17 @@ public:
 
 private:
     dogen::formatters::decoration_properties decoration_properties_;
-    std::unordered_map<std::string, dogen::yarn::artefact_properties> artefact_properties_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties> artefact_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::element_properties& lhs,
-    dogen::yarn::element_properties& rhs) {
+    dogen::yarn::meta_model::element_properties& lhs,
+    dogen::yarn::meta_model::element_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/element_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element_properties_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/element_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/element_properties_fwd.hpp
index 47459b3bb..98fd499bf 100644
--- a/projects/yarn/include/dogen/yarn/types/element_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/element_visitor.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element_visitor.hpp
new file mode 100644
index 000000000..d77f5ff2f
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element_visitor.hpp
@@ -0,0 +1,134 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_VISITOR_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_VISITOR_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/yarn/types/meta_model/module_fwd.hpp"
+#include "dogen/yarn/types/meta_model/object_fwd.hpp"
+#include "dogen/yarn/types/meta_model/builtin_fwd.hpp"
+#include "dogen/yarn/types/meta_model/concept_fwd.hpp"
+#include "dogen/yarn/types/meta_model/visitor_fwd.hpp"
+#include "dogen/yarn/types/meta_model/exception_fwd.hpp"
+#include "dogen/yarn/types/meta_model/primitive_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumeration_fwd.hpp"
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+/**
+ * @brief Visitor for element
+ */
+class element_visitor {
+public:
+    virtual ~element_visitor() noexcept = 0;
+
+public:
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::builtin
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::builtin&) const { }
+    virtual void visit(const dogen::yarn::meta_model::builtin&) { }
+    virtual void visit(dogen::yarn::meta_model::builtin&) const { }
+    virtual void visit(dogen::yarn::meta_model::builtin&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::concept
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::concept&) const { }
+    virtual void visit(const dogen::yarn::meta_model::concept&) { }
+    virtual void visit(dogen::yarn::meta_model::concept&) const { }
+    virtual void visit(dogen::yarn::meta_model::concept&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::enumeration
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::enumeration&) const { }
+    virtual void visit(const dogen::yarn::meta_model::enumeration&) { }
+    virtual void visit(dogen::yarn::meta_model::enumeration&) const { }
+    virtual void visit(dogen::yarn::meta_model::enumeration&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::exception
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::exception&) const { }
+    virtual void visit(const dogen::yarn::meta_model::exception&) { }
+    virtual void visit(dogen::yarn::meta_model::exception&) const { }
+    virtual void visit(dogen::yarn::meta_model::exception&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::module
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::module&) const { }
+    virtual void visit(const dogen::yarn::meta_model::module&) { }
+    virtual void visit(dogen::yarn::meta_model::module&) const { }
+    virtual void visit(dogen::yarn::meta_model::module&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::object
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::object&) const { }
+    virtual void visit(const dogen::yarn::meta_model::object&) { }
+    virtual void visit(dogen::yarn::meta_model::object&) const { }
+    virtual void visit(dogen::yarn::meta_model::object&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::primitive
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::primitive&) const { }
+    virtual void visit(const dogen::yarn::meta_model::primitive&) { }
+    virtual void visit(dogen::yarn::meta_model::primitive&) const { }
+    virtual void visit(dogen::yarn::meta_model::primitive&) { }
+    /**@}*/
+
+    /**
+     * @brief Accept visits for type dogen::yarn::meta_model::visitor
+     */
+    /**@{*/
+    virtual void visit(const dogen::yarn::meta_model::visitor&) const { }
+    virtual void visit(const dogen::yarn::meta_model::visitor&) { }
+    virtual void visit(dogen::yarn::meta_model::visitor&) const { }
+    virtual void visit(dogen::yarn::meta_model::visitor&) { }
+    /**@}*/
+};
+
+inline element_visitor::~element_visitor() noexcept { }
+
+} } }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/types/element_visitor_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/element_visitor_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/element_visitor_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/element_visitor_fwd.hpp
index 0bbf25853..30528e4a9 100644
--- a/projects/yarn/include/dogen/yarn/types/element_visitor_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/element_visitor_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENT_VISITOR_FWD_HPP
-#define DOGEN_YARN_TYPES_ELEMENT_VISITOR_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENT_VISITOR_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENT_VISITOR_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class element_visitor;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/elements_traversal.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
similarity index 79%
rename from projects/yarn/include/dogen/yarn/types/elements_traversal.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
index 430c53ba7..a235526a3 100644
--- a/projects/yarn/include/dogen/yarn/types/elements_traversal.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
@@ -18,24 +18,25 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENTS_TRAVERSAL_HPP
-#define DOGEN_YARN_TYPES_ELEMENTS_TRAVERSAL_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENTS_TRAVERSAL_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENTS_TRAVERSAL_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/builtin.hpp"
-#include "dogen/yarn/types/exception.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/types/visitor.hpp"
-#include "dogen/yarn/types/module.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Performs a traversal across all elements in an intermediate
@@ -43,7 +44,7 @@ namespace yarn {
  */
 /**@{*/
 template<typename TraversalVisitor>
-inline void elements_traversal(const intermediate_model& m,
+inline void elements_traversal(const meta_model::intermediate_model& m,
     const TraversalVisitor& v) {
     for (const auto& pair : m.modules())
         v(pair.second);
@@ -76,7 +77,7 @@ inline void elements_traversal(const intermediate_model& m,
 }
 
 template<typename TraversalVisitor>
-inline void elements_traversal(const intermediate_model& m,
+inline void elements_traversal(const meta_model::intermediate_model& m,
     TraversalVisitor& v) {
     for (auto& pair : m.modules())
         v(pair.second);
@@ -109,7 +110,8 @@ inline void elements_traversal(const intermediate_model& m,
 }
 
 template<typename TraversalVisitor>
-inline void elements_traversal(intermediate_model& m, TraversalVisitor& v) {
+inline void elements_traversal(meta_model::intermediate_model& m,
+    TraversalVisitor& v) {
     for (auto& pair : m.modules())
         v(pair.second);
 
@@ -141,6 +143,6 @@ inline void elements_traversal(intermediate_model& m, TraversalVisitor& v) {
 }
 /**@}*/
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/elements_traversal_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/elements_traversal_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal_fwd.hpp
index 16cf2f755..53284342e 100644
--- a/projects/yarn/include/dogen/yarn/types/elements_traversal_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ELEMENTS_TRAVERSAL_FWD_HPP
-#define DOGEN_YARN_TYPES_ELEMENTS_TRAVERSAL_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ELEMENTS_TRAVERSAL_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ELEMENTS_TRAVERSAL_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class elements_traversal;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/enumeration.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/enumeration.hpp
similarity index 67%
rename from projects/yarn/include/dogen/yarn/types/enumeration.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/enumeration.hpp
index 587775d7f..b02c3b220 100644
--- a/projects/yarn/include/dogen/yarn/types/enumeration.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/enumeration.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ENUMERATION_HPP
-#define DOGEN_YARN_TYPES_ENUMERATION_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ENUMERATION_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ENUMERATION_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,19 +28,20 @@
 #include <iosfwd>
 #include <vector>
 #include <algorithm>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/enumerator.hpp"
-#include "dogen/yarn/serialization/enumeration_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Defines a bounded set of logically related values for a built-in type
  * or a string.
  */
-class enumeration final : public dogen::yarn::element {
+class enumeration final : public dogen::yarn::meta_model::element {
 public:
     enumeration(const enumeration&) = default;
     enumeration(enumeration&&) = default;
@@ -54,25 +55,25 @@ public:
     enumeration(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
-        const dogen::yarn::name& underlying_element,
-        const std::vector<dogen::yarn::enumerator>& enumerators,
+        const dogen::yarn::meta_model::element_properties& element_properties,
+        const dogen::yarn::meta_model::name& underlying_element,
+        const std::vector<dogen::yarn::meta_model::enumerator>& enumerators,
         const bool use_implementation_defined_underlying_element,
         const bool use_implementation_defined_enumerator_values,
         const bool add_invalid_enumerator);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::enumeration& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::enumeration& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 public:
     using element::accept;
@@ -89,20 +90,20 @@ public:
      * @brief Underlying element of each instance of the enumeration.
      */
     /**@{*/
-    const dogen::yarn::name& underlying_element() const;
-    dogen::yarn::name& underlying_element();
-    void underlying_element(const dogen::yarn::name& v);
-    void underlying_element(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& underlying_element() const;
+    dogen::yarn::meta_model::name& underlying_element();
+    void underlying_element(const dogen::yarn::meta_model::name& v);
+    void underlying_element(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
      * @brief Enumerators for this enumeration.
      */
     /**@{*/
-    const std::vector<dogen::yarn::enumerator>& enumerators() const;
-    std::vector<dogen::yarn::enumerator>& enumerators();
-    void enumerators(const std::vector<dogen::yarn::enumerator>& v);
-    void enumerators(const std::vector<dogen::yarn::enumerator>&& v);
+    const std::vector<dogen::yarn::meta_model::enumerator>& enumerators() const;
+    std::vector<dogen::yarn::meta_model::enumerator>& enumerators();
+    void enumerators(const std::vector<dogen::yarn::meta_model::enumerator>& v);
+    void enumerators(const std::vector<dogen::yarn::meta_model::enumerator>&& v);
     /**@}*/
 
     /**
@@ -136,28 +137,28 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(enumeration& other) noexcept;
     enumeration& operator=(enumeration other);
 
 private:
-    dogen::yarn::name underlying_element_;
-    std::vector<dogen::yarn::enumerator> enumerators_;
+    dogen::yarn::meta_model::name underlying_element_;
+    std::vector<dogen::yarn::meta_model::enumerator> enumerators_;
     bool use_implementation_defined_underlying_element_;
     bool use_implementation_defined_enumerator_values_;
     bool add_invalid_enumerator_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::enumeration& lhs,
-    dogen::yarn::enumeration& rhs) {
+    dogen::yarn::meta_model::enumeration& lhs,
+    dogen::yarn::meta_model::enumeration& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/enumeration_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/enumeration_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/enumeration_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/enumeration_fwd.hpp
index 50c2954ce..69dac2ab6 100644
--- a/projects/yarn/include/dogen/yarn/types/enumeration_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/enumeration_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ENUMERATION_FWD_HPP
-#define DOGEN_YARN_TYPES_ENUMERATION_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ENUMERATION_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ENUMERATION_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class enumeration;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/enumerator.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/enumerator.hpp
similarity index 81%
rename from projects/yarn/include/dogen/yarn/types/enumerator.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/enumerator.hpp
index 06b9d3f4d..f434cabdd 100644
--- a/projects/yarn/include/dogen/yarn/types/enumerator.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/enumerator.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ENUMERATOR_HPP
-#define DOGEN_YARN_TYPES_ENUMERATOR_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ENUMERATOR_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ENUMERATOR_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,12 +27,13 @@
 
 #include <string>
 #include <algorithm>
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 #include "dogen/annotations/types/annotation.hpp"
-#include "dogen/yarn/serialization/enumerator_fwd_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumerator_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief One of a set of valid values that an enumeration can assume.
@@ -49,16 +50,16 @@ public:
 public:
     enumerator(
         const std::string& documentation,
-        const dogen::yarn::name& name,
+        const dogen::yarn::meta_model::name& name,
         const dogen::annotations::annotation& annotation,
         const std::string& value);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::enumerator& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::enumerator& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 public:
     /**
@@ -79,10 +80,10 @@ public:
      * @brief Fully qualified name.
      */
     /**@{*/
-    const dogen::yarn::name& name() const;
-    dogen::yarn::name& name();
-    void name(const dogen::yarn::name& v);
-    void name(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& name() const;
+    dogen::yarn::meta_model::name& name();
+    void name(const dogen::yarn::meta_model::name& v);
+    void name(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
@@ -119,19 +120,19 @@ public:
 
 private:
     std::string documentation_;
-    dogen::yarn::name name_;
+    dogen::yarn::meta_model::name name_;
     dogen::annotations::annotation annotation_;
     std::string value_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::enumerator& lhs,
-    dogen::yarn::enumerator& rhs) {
+    dogen::yarn::meta_model::enumerator& lhs,
+    dogen::yarn::meta_model::enumerator& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/enumerator_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/enumerator_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/enumerator_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/enumerator_fwd.hpp
index 7c6abb383..809386122 100644
--- a/projects/yarn/include/dogen/yarn/types/enumerator_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/enumerator_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ENUMERATOR_FWD_HPP
-#define DOGEN_YARN_TYPES_ENUMERATOR_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ENUMERATOR_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ENUMERATOR_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class enumerator;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/exception.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/exception.hpp
similarity index 73%
rename from projects/yarn/include/dogen/yarn/types/exception.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/exception.hpp
index 8610ca3a1..f75a4f43e 100644
--- a/projects/yarn/include/dogen/yarn/types/exception.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/exception.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_EXCEPTION_HPP
-#define DOGEN_YARN_TYPES_EXCEPTION_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_EXCEPTION_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_EXCEPTION_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,16 +27,17 @@
 
 #include <iosfwd>
 #include <algorithm>
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/serialization/exception_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents an exception which can be thrown.
  */
-class exception final : public dogen::yarn::element {
+class exception final : public dogen::yarn::meta_model::element {
 public:
     exception() = default;
     exception(const exception&) = default;
@@ -48,20 +49,20 @@ public:
     exception(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties);
+        const dogen::yarn::meta_model::element_properties& element_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::exception& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::exception& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
 public:
     using element::accept;
@@ -80,7 +81,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(exception& other) noexcept;
@@ -88,14 +89,14 @@ public:
 
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::exception& lhs,
-    dogen::yarn::exception& rhs) {
+    dogen::yarn::meta_model::exception& lhs,
+    dogen::yarn::meta_model::exception& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/exception_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/exception_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/exception_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/exception_fwd.hpp
index 207c3e7f1..1c167e289 100644
--- a/projects/yarn/include/dogen/yarn/types/exception_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/exception_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_EXCEPTION_FWD_HPP
-#define DOGEN_YARN_TYPES_EXCEPTION_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_EXCEPTION_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_EXCEPTION_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class exception;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/formatting_styles.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/formatting_styles.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles.hpp
index 0a221740d..d856d00bc 100644
--- a/projects/yarn/include/dogen/yarn/types/formatting_styles.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_FORMATTING_STYLES_HPP
-#define DOGEN_YARN_TYPES_FORMATTING_STYLES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_FORMATTING_STYLES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_FORMATTING_STYLES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class formatting_styles : unsigned int {
     invalid = 0, ///< Represents an uninitialised enum
@@ -35,6 +36,6 @@ enum class formatting_styles : unsigned int {
     stitch = 3
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/formatting_styles_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/formatting_styles_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles_fwd.hpp
index 8253a289b..2694f7cab 100644
--- a/projects/yarn/include/dogen/yarn/types/formatting_styles_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/formatting_styles_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_FORMATTING_STYLES_FWD_HPP
-#define DOGEN_YARN_TYPES_FORMATTING_STYLES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_FORMATTING_STYLES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_FORMATTING_STYLES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class formatting_styles : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp
new file mode 100644
index 000000000..6532d4d46
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp
@@ -0,0 +1,316 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_TYPES_META_MODEL_INTERMEDIATE_MODEL_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_INTERMEDIATE_MODEL_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <string>
+#include <algorithm>
+#include <unordered_map>
+#include <unordered_set>
+#include <boost/optional.hpp>
+#include <boost/shared_ptr.hpp>
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/annotations/types/scribble_group.hpp"
+#include "dogen/yarn/types/meta_model/element_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/intermediate_model_fwd_ser.hpp"
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+/**
+ * @brief Intermediate representation of a yarn model.
+ */
+class intermediate_model final {
+public:
+    intermediate_model(const intermediate_model&) = default;
+    ~intermediate_model() = default;
+
+public:
+    intermediate_model();
+
+public:
+    intermediate_model(intermediate_model&& rhs);
+
+public:
+    intermediate_model(
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references,
+        const std::unordered_set<dogen::yarn::meta_model::name>& leaves,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions,
+        const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors,
+        const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements,
+        const bool has_generatable_types,
+        const dogen::yarn::meta_model::module& root_module,
+        const dogen::yarn::meta_model::languages input_language,
+        const std::list<dogen::yarn::meta_model::languages>& output_languages,
+        const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups,
+        const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+
+public:
+    /**
+     * @brief Fully qualified name.
+     */
+    /**@{*/
+    const dogen::yarn::meta_model::name& name() const;
+    dogen::yarn::meta_model::name& name();
+    void name(const dogen::yarn::meta_model::name& v);
+    void name(const dogen::yarn::meta_model::name&& v);
+    /**@}*/
+
+    /**
+     * @brief How was this model element originated.
+     */
+    /**@{*/
+    dogen::yarn::meta_model::origin_types origin_type() const;
+    void origin_type(const dogen::yarn::meta_model::origin_types v);
+    /**@}*/
+
+    /**
+     * @brief All other intermediate models that this intermediate model depends on, mapped to their origin.
+     */
+    /**@{*/
+    const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references() const;
+    std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references();
+    void references(const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& v);
+    void references(const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>&& v);
+    /**@}*/
+
+    /**
+     * @brief All leaf types in this intermediate model.
+     *
+     * Leaves are types concrete types which have a parent.
+     */
+    /**@{*/
+    const std::unordered_set<dogen::yarn::meta_model::name>& leaves() const;
+    std::unordered_set<dogen::yarn::meta_model::name>& leaves();
+    void leaves(const std::unordered_set<dogen::yarn::meta_model::name>& v);
+    void leaves(const std::unordered_set<dogen::yarn::meta_model::name>&& v);
+    /**@}*/
+
+    /**
+     * @brief Modules contained in the intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules();
+    void modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v);
+    void modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>&& v);
+    /**@}*/
+
+    /**
+     * @brief All the concepts available in this intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts();
+    void concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v);
+    void concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>&& v);
+    /**@}*/
+
+    /**
+     * @brief All built-ins contained in this intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins();
+    void builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v);
+    void builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>&& v);
+    /**@}*/
+
+    /**
+     * @brief All enumerations contained in this intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations();
+    void enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v);
+    void enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>&& v);
+    /**@}*/
+
+    /**
+     * @brief All primitives in this intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives();
+    void primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v);
+    void primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>&& v);
+    /**@}*/
+
+    /**
+     * @brief All objects contained in this intermediate model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects();
+    void objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v);
+    void objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>&& v);
+    /**@}*/
+
+    /**
+     * @brief All exceptions in this model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions();
+    void exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v);
+    void exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>&& v);
+    /**@}*/
+
+    /**
+     * @brief All visitors in this model.
+     */
+    /**@{*/
+    const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors() const;
+    std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors();
+    void visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v);
+    void visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>&& v);
+    /**@}*/
+
+    /**
+     * @brief Elements injected externally.
+     */
+    /**@{*/
+    const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements() const;
+    std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements();
+    void injected_elements(const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& v);
+    void injected_elements(const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >&& v);
+    /**@}*/
+
+    /**
+     * @brief If true the intermediate model has at least one generable type, false otherwise.
+     */
+    /**@{*/
+    bool has_generatable_types() const;
+    void has_generatable_types(const bool v);
+    /**@}*/
+
+    const dogen::yarn::meta_model::module& root_module() const;
+    dogen::yarn::meta_model::module& root_module();
+    void root_module(const dogen::yarn::meta_model::module& v);
+    void root_module(const dogen::yarn::meta_model::module&& v);
+
+    /**
+     * @brief Language in which this model was written.
+     */
+    /**@{*/
+    dogen::yarn::meta_model::languages input_language() const;
+    void input_language(const dogen::yarn::meta_model::languages v);
+    /**@}*/
+
+    /**
+     * @brief Languages in which to output this model.
+     */
+    /**@{*/
+    const std::list<dogen::yarn::meta_model::languages>& output_languages() const;
+    std::list<dogen::yarn::meta_model::languages>& output_languages();
+    void output_languages(const std::list<dogen::yarn::meta_model::languages>& v);
+    void output_languages(const std::list<dogen::yarn::meta_model::languages>&& v);
+    /**@}*/
+
+    const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups() const;
+    std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups();
+    void scribble_groups(const std::unordered_map<std::string, dogen::annotations::scribble_group>& v);
+    void scribble_groups(const std::unordered_map<std::string, dogen::annotations::scribble_group>&& v);
+
+    const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>&& v);
+
+public:
+    bool operator==(const intermediate_model& rhs) const;
+    bool operator!=(const intermediate_model& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(intermediate_model& other) noexcept;
+    intermediate_model& operator=(intermediate_model other);
+
+private:
+    dogen::yarn::meta_model::name name_;
+    dogen::yarn::meta_model::origin_types origin_type_;
+    std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types> references_;
+    std::unordered_set<dogen::yarn::meta_model::name> leaves_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::module> modules_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::concept> concepts_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::builtin> builtins_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> enumerations_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::primitive> primitives_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::object> objects_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::exception> exceptions_;
+    std::unordered_map<std::string, dogen::yarn::meta_model::visitor> visitors_;
+    std::list<boost::shared_ptr<dogen::yarn::meta_model::element> > injected_elements_;
+    bool has_generatable_types_;
+    dogen::yarn::meta_model::module root_module_;
+    dogen::yarn::meta_model::languages input_language_;
+    std::list<dogen::yarn::meta_model::languages> output_languages_;
+    std::unordered_map<std::string, dogen::annotations::scribble_group> scribble_groups_;
+    boost::optional<dogen::yarn::meta_model::orm_model_properties> orm_properties_;
+};
+
+} } }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::yarn::meta_model::intermediate_model& lhs,
+    dogen::yarn::meta_model::intermediate_model& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/types/intermediate_model_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/intermediate_model_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model_fwd.hpp
index 39b103cf1..e4087900a 100644
--- a/projects/yarn/include/dogen/yarn/types/intermediate_model_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_INTERMEDIATE_MODEL_FWD_HPP
-#define DOGEN_YARN_TYPES_INTERMEDIATE_MODEL_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_INTERMEDIATE_MODEL_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_INTERMEDIATE_MODEL_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class intermediate_model;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/languages.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/languages.hpp
similarity index 90%
rename from projects/yarn/include/dogen/yarn/types/languages.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/languages.hpp
index ead6413fe..e85c94463 100644
--- a/projects/yarn/include/dogen/yarn/types/languages.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/languages.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LANGUAGES_HPP
-#define DOGEN_YARN_TYPES_LANGUAGES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LANGUAGES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LANGUAGES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Models need to declare upfront the programming language they will target.
@@ -40,6 +41,6 @@ enum class languages : unsigned int {
     upsilon = 5
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/languages_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/languages_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/languages_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/languages_fwd.hpp
index 385f90bd7..5c1eee590 100644
--- a/projects/yarn/include/dogen/yarn/types/languages_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/languages_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LANGUAGES_FWD_HPP
-#define DOGEN_YARN_TYPES_LANGUAGES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LANGUAGES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LANGUAGES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class languages : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/letter_cases.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/letter_cases.hpp
similarity index 89%
rename from projects/yarn/include/dogen/yarn/types/letter_cases.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/letter_cases.hpp
index f9b8d732d..5683aac67 100644
--- a/projects/yarn/include/dogen/yarn/types/letter_cases.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/letter_cases.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LETTER_CASES_HPP
-#define DOGEN_YARN_TYPES_LETTER_CASES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LETTER_CASES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LETTER_CASES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class letter_cases : unsigned int {
     invalid = 0, ///< Represents an uninitialised enum
@@ -34,6 +35,6 @@ enum class letter_cases : unsigned int {
     lower_case = 2
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/letter_cases_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/letter_cases_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/letter_cases_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/letter_cases_fwd.hpp
index 72becd514..8323aea16 100644
--- a/projects/yarn/include/dogen/yarn/types/letter_cases_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/letter_cases_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LETTER_CASES_FWD_HPP
-#define DOGEN_YARN_TYPES_LETTER_CASES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LETTER_CASES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LETTER_CASES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class letter_cases : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/location.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/location.hpp
similarity index 93%
rename from projects/yarn/include/dogen/yarn/types/location.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/location.hpp
index 56efae07b..1e85abf1e 100644
--- a/projects/yarn/include/dogen/yarn/types/location.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/location.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LOCATION_HPP
-#define DOGEN_YARN_TYPES_LOCATION_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LOCATION_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LOCATION_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,10 +28,11 @@
 #include <list>
 #include <string>
 #include <algorithm>
-#include "dogen/yarn/serialization/location_fwd_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/location_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Identifies a hierarchy of containment within the modeling space.
@@ -71,10 +72,10 @@ public:
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::location& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::location& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
 public:
     /**
@@ -146,14 +147,14 @@ private:
     std::string element_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::location& lhs,
-    dogen::yarn::location& rhs) {
+    dogen::yarn::meta_model::location& lhs,
+    dogen::yarn::meta_model::location& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/location_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/location_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/location_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/location_fwd.hpp
index 9c7217c0f..37c2443a3 100644
--- a/projects/yarn/include/dogen/yarn/types/location_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/location_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_LOCATION_FWD_HPP
-#define DOGEN_YARN_TYPES_LOCATION_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_LOCATION_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_LOCATION_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class location;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/model.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
similarity index 52%
rename from projects/yarn/include/dogen/yarn/types/model.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
index 731481628..3a580a7c3 100644
--- a/projects/yarn/include/dogen/yarn/types/model.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_MODEL_HPP
-#define DOGEN_YARN_TYPES_MODEL_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_MODEL_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_MODEL_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -31,15 +31,16 @@
 #include <unordered_set>
 #include <boost/optional.hpp>
 #include <boost/shared_ptr.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/module.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/element_fwd.hpp"
-#include "dogen/yarn/types/orm_model_properties.hpp"
-#include "dogen/yarn/serialization/model_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/element_fwd.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/model_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Yarn model.
@@ -57,46 +58,46 @@ public:
 
 public:
     model(
-        const dogen::yarn::name& name,
-        const std::vector<boost::shared_ptr<dogen::yarn::element> >& elements,
-        const dogen::yarn::module& root_module,
+        const dogen::yarn::meta_model::name& name,
+        const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements,
+        const dogen::yarn::meta_model::module& root_module,
         const std::unordered_set<std::string>& module_ids,
         const bool has_generatable_types,
-        const dogen::yarn::languages input_language,
-        const dogen::yarn::languages output_language,
-        const boost::optional<dogen::yarn::orm_model_properties>& orm_properties);
+        const dogen::yarn::meta_model::languages input_language,
+        const dogen::yarn::meta_model::languages output_language,
+        const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::model& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::model& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
 public:
     /**
      * @brief Fully qualified name.
      */
     /**@{*/
-    const dogen::yarn::name& name() const;
-    dogen::yarn::name& name();
-    void name(const dogen::yarn::name& v);
-    void name(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& name() const;
+    dogen::yarn::meta_model::name& name();
+    void name(const dogen::yarn::meta_model::name& v);
+    void name(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
-    const std::vector<boost::shared_ptr<dogen::yarn::element> >& elements() const;
-    std::vector<boost::shared_ptr<dogen::yarn::element> >& elements();
-    void elements(const std::vector<boost::shared_ptr<dogen::yarn::element> >& v);
-    void elements(const std::vector<boost::shared_ptr<dogen::yarn::element> >&& v);
+    const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements() const;
+    std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements();
+    void elements(const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& v);
+    void elements(const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >&& v);
 
     /**
      * @brief The module that represents the model.
      */
     /**@{*/
-    const dogen::yarn::module& root_module() const;
-    dogen::yarn::module& root_module();
-    void root_module(const dogen::yarn::module& v);
-    void root_module(const dogen::yarn::module&& v);
+    const dogen::yarn::meta_model::module& root_module() const;
+    dogen::yarn::meta_model::module& root_module();
+    void root_module(const dogen::yarn::meta_model::module& v);
+    void root_module(const dogen::yarn::meta_model::module&& v);
     /**@}*/
 
     /**
@@ -121,22 +122,22 @@ public:
      * @brief Language in which this model was written.
      */
     /**@{*/
-    dogen::yarn::languages input_language() const;
-    void input_language(const dogen::yarn::languages v);
+    dogen::yarn::meta_model::languages input_language() const;
+    void input_language(const dogen::yarn::meta_model::languages v);
     /**@}*/
 
     /**
      * @brief Language in which to output the model.
      */
     /**@{*/
-    dogen::yarn::languages output_language() const;
-    void output_language(const dogen::yarn::languages v);
+    dogen::yarn::meta_model::languages output_language() const;
+    void output_language(const dogen::yarn::meta_model::languages v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::orm_model_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_model_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_model_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_model_properties>&& v);
+    const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>&& v);
 
 public:
     bool operator==(const model& rhs) const;
@@ -149,24 +150,24 @@ public:
     model& operator=(model other);
 
 private:
-    dogen::yarn::name name_;
-    std::vector<boost::shared_ptr<dogen::yarn::element> > elements_;
-    dogen::yarn::module root_module_;
+    dogen::yarn::meta_model::name name_;
+    std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> > elements_;
+    dogen::yarn::meta_model::module root_module_;
     std::unordered_set<std::string> module_ids_;
     bool has_generatable_types_;
-    dogen::yarn::languages input_language_;
-    dogen::yarn::languages output_language_;
-    boost::optional<dogen::yarn::orm_model_properties> orm_properties_;
+    dogen::yarn::meta_model::languages input_language_;
+    dogen::yarn::meta_model::languages output_language_;
+    boost::optional<dogen::yarn::meta_model::orm_model_properties> orm_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::model& lhs,
-    dogen::yarn::model& rhs) {
+    dogen::yarn::meta_model::model& lhs,
+    dogen::yarn::meta_model::model& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/model_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/model_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/model_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/model_fwd.hpp
index 2eb019193..0f98be7b4 100644
--- a/projects/yarn/include/dogen/yarn/types/model_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/model_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_MODEL_FWD_HPP
-#define DOGEN_YARN_TYPES_MODEL_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_MODEL_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_MODEL_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class model;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/module.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/module.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/types/module.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/module.hpp
index 3f377dd41..1eed9282b 100644
--- a/projects/yarn/include/dogen/yarn/types/module.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/module.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_MODULE_HPP
-#define DOGEN_YARN_TYPES_MODULE_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_MODULE_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_MODULE_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -30,19 +30,20 @@
 #include <string>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/orm_module_properties.hpp"
-#include "dogen/yarn/serialization/module_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/module_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Container for other modeling elements.
  *
  * Aggregates a group of logically related elements into a unit.
  */
-class module final : public dogen::yarn::element {
+class module final : public dogen::yarn::meta_model::element {
 public:
     module(const module&) = default;
 
@@ -58,24 +59,24 @@ public:
     module(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
+        const dogen::yarn::meta_model::element_properties& element_properties,
         const std::list<std::string>& members,
         const bool is_root,
         const bool is_global_module,
-        const boost::optional<dogen::yarn::orm_module_properties>& orm_properties);
+        const boost::optional<dogen::yarn::meta_model::orm_module_properties>& orm_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::module& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::module& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
 public:
     using element::accept;
@@ -114,10 +115,10 @@ public:
     void is_global_module(const bool v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::orm_module_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_module_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_module_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_module_properties>&& v);
+    const boost::optional<dogen::yarn::meta_model::orm_module_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_module_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_module_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_module_properties>&& v);
 
 public:
     bool operator==(const module& rhs) const;
@@ -126,7 +127,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(module& other) noexcept;
@@ -136,17 +137,17 @@ private:
     std::list<std::string> members_;
     bool is_root_;
     bool is_global_module_;
-    boost::optional<dogen::yarn::orm_module_properties> orm_properties_;
+    boost::optional<dogen::yarn::meta_model::orm_module_properties> orm_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::module& lhs,
-    dogen::yarn::module& rhs) {
+    dogen::yarn::meta_model::module& lhs,
+    dogen::yarn::meta_model::module& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/module_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/module_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/module_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/module_fwd.hpp
index dc6f22b99..bb742ab85 100644
--- a/projects/yarn/include/dogen/yarn/types/module_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/module_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_MODULE_FWD_HPP
-#define DOGEN_YARN_TYPES_MODULE_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_MODULE_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_MODULE_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class module;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/name.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name.hpp
similarity index 74%
rename from projects/yarn/include/dogen/yarn/types/name.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/name.hpp
index 48a1b409c..509a72072 100644
--- a/projects/yarn/include/dogen/yarn/types/name.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_HPP
-#define DOGEN_YARN_TYPES_NAME_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,13 +28,14 @@
 #include <string>
 #include <algorithm>
 #include <map>
-#include "dogen/yarn/types/location.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/serialization/name_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/serialization/meta_model/name_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Name of an element in modeling space.
@@ -62,16 +63,16 @@ public:
     name(
         const std::string& id,
         const std::string& simple,
-        const std::map<dogen::yarn::languages, std::string>& qualified,
-        const dogen::yarn::location& location,
+        const std::map<dogen::yarn::meta_model::languages, std::string>& qualified,
+        const dogen::yarn::meta_model::location& location,
         const std::string& identifiable);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::name& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::name& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
 public:
     /**
@@ -106,20 +107,20 @@ public:
      * @brief Qualified name in a language specific representation.
      */
     /**@{*/
-    const std::map<dogen::yarn::languages, std::string>& qualified() const;
-    std::map<dogen::yarn::languages, std::string>& qualified();
-    void qualified(const std::map<dogen::yarn::languages, std::string>& v);
-    void qualified(const std::map<dogen::yarn::languages, std::string>&& v);
+    const std::map<dogen::yarn::meta_model::languages, std::string>& qualified() const;
+    std::map<dogen::yarn::meta_model::languages, std::string>& qualified();
+    void qualified(const std::map<dogen::yarn::meta_model::languages, std::string>& v);
+    void qualified(const std::map<dogen::yarn::meta_model::languages, std::string>&& v);
     /**@}*/
 
     /**
      * @brief Where the name is located in element space.
      */
     /**@{*/
-    const dogen::yarn::location& location() const;
-    dogen::yarn::location& location();
-    void location(const dogen::yarn::location& v);
-    void location(const dogen::yarn::location&& v);
+    const dogen::yarn::meta_model::location& location() const;
+    dogen::yarn::meta_model::location& location();
+    void location(const dogen::yarn::meta_model::location& v);
+    void location(const dogen::yarn::meta_model::location&& v);
     /**@}*/
 
     /**
@@ -146,19 +147,19 @@ public:
 private:
     std::string id_;
     std::string simple_;
-    std::map<dogen::yarn::languages, std::string> qualified_;
-    dogen::yarn::location location_;
+    std::map<dogen::yarn::meta_model::languages, std::string> qualified_;
+    dogen::yarn::meta_model::location location_;
     std::string identifiable_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::name& lhs,
-    dogen::yarn::name& rhs) {
+    dogen::yarn::meta_model::name& lhs,
+    dogen::yarn::meta_model::name& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener.hpp
new file mode 100644
index 000000000..c90409fdd
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_FLATTENER_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_FLATTENER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+class name_flattener final {
+public:
+    name_flattener() = default;
+    name_flattener(const name_flattener&) = default;
+    name_flattener(name_flattener&&) = default;
+    ~name_flattener() = default;
+    name_flattener& operator=(const name_flattener&) = default;
+
+public:
+    bool operator==(const name_flattener& rhs) const;
+    bool operator!=(const name_flattener& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+};
+
+} } }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener_fwd.hpp
new file mode 100644
index 000000000..59c26e20d
--- /dev/null
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name_flattener_fwd.hpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_FLATTENER_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_FLATTENER_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+class name_flattener;
+
+} } }
+
+#endif
diff --git a/projects/yarn/include/dogen/yarn/types/name_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/name_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/name_fwd.hpp
index 9725979b1..76f440672 100644
--- a/projects/yarn/include/dogen/yarn/types/name_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_FWD_HPP
-#define DOGEN_YARN_TYPES_NAME_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class name;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/name_tree.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name_tree.hpp
similarity index 69%
rename from projects/yarn/include/dogen/yarn/types/name_tree.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/name_tree.hpp
index bcb6e8213..700387c6c 100644
--- a/projects/yarn/include/dogen/yarn/types/name_tree.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name_tree.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_TREE_HPP
-#define DOGEN_YARN_TYPES_NAME_TREE_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_TREE_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_TREE_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,14 +29,15 @@
 #include <string>
 #include <algorithm>
 #include <map>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/serialization/name_tree_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/serialization/meta_model/name_tree_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Adds support for name composition as a tree-like structure.
@@ -57,41 +58,41 @@ public:
 
 public:
     name_tree(
-        const dogen::yarn::name& current,
-        const std::list<dogen::yarn::name_tree>& children,
+        const dogen::yarn::meta_model::name& current,
+        const std::list<dogen::yarn::meta_model::name_tree>& children,
         const bool are_children_opaque,
         const bool is_circular_dependency,
-        const std::map<dogen::yarn::languages, std::string>& qualified,
+        const std::map<dogen::yarn::meta_model::languages, std::string>& qualified,
         const std::string& identifiable,
         const bool is_current_simple_type,
         const bool is_floating_point);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::name_tree& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::name_tree& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 public:
     /**
      * @brief Name for the current level of the tree.
      */
     /**@{*/
-    const dogen::yarn::name& current() const;
-    dogen::yarn::name& current();
-    void current(const dogen::yarn::name& v);
-    void current(const dogen::yarn::name&& v);
+    const dogen::yarn::meta_model::name& current() const;
+    dogen::yarn::meta_model::name& current();
+    void current(const dogen::yarn::meta_model::name& v);
+    void current(const dogen::yarn::meta_model::name&& v);
     /**@}*/
 
     /**
      * @brief Names of the child elements.
      */
     /**@{*/
-    const std::list<dogen::yarn::name_tree>& children() const;
-    std::list<dogen::yarn::name_tree>& children();
-    void children(const std::list<dogen::yarn::name_tree>& v);
-    void children(const std::list<dogen::yarn::name_tree>&& v);
+    const std::list<dogen::yarn::meta_model::name_tree>& children() const;
+    std::list<dogen::yarn::meta_model::name_tree>& children();
+    void children(const std::list<dogen::yarn::meta_model::name_tree>& v);
+    void children(const std::list<dogen::yarn::meta_model::name_tree>&& v);
     /**@}*/
 
     /**
@@ -118,10 +119,10 @@ public:
      * @brief Qualified name in a language specific representation.
      */
     /**@{*/
-    const std::map<dogen::yarn::languages, std::string>& qualified() const;
-    std::map<dogen::yarn::languages, std::string>& qualified();
-    void qualified(const std::map<dogen::yarn::languages, std::string>& v);
-    void qualified(const std::map<dogen::yarn::languages, std::string>&& v);
+    const std::map<dogen::yarn::meta_model::languages, std::string>& qualified() const;
+    std::map<dogen::yarn::meta_model::languages, std::string>& qualified();
+    void qualified(const std::map<dogen::yarn::meta_model::languages, std::string>& v);
+    void qualified(const std::map<dogen::yarn::meta_model::languages, std::string>&& v);
     /**@}*/
 
     /**
@@ -162,24 +163,24 @@ public:
     name_tree& operator=(name_tree other);
 
 private:
-    dogen::yarn::name current_;
-    std::list<dogen::yarn::name_tree> children_;
+    dogen::yarn::meta_model::name current_;
+    std::list<dogen::yarn::meta_model::name_tree> children_;
     bool are_children_opaque_;
     bool is_circular_dependency_;
-    std::map<dogen::yarn::languages, std::string> qualified_;
+    std::map<dogen::yarn::meta_model::languages, std::string> qualified_;
     std::string identifiable_;
     bool is_current_simple_type_;
     bool is_floating_point_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::name_tree& lhs,
-    dogen::yarn::name_tree& rhs) {
+    dogen::yarn::meta_model::name_tree& lhs,
+    dogen::yarn::meta_model::name_tree& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/name_tree_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/name_tree_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/name_tree_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/name_tree_fwd.hpp
index 66357b799..840313b46 100644
--- a/projects/yarn/include/dogen/yarn/types/name_tree_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/name_tree_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_NAME_TREE_FWD_HPP
-#define DOGEN_YARN_TYPES_NAME_TREE_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_NAME_TREE_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_NAME_TREE_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class name_tree;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/object.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/object.hpp
similarity index 50%
rename from projects/yarn/include/dogen/yarn/types/object.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/object.hpp
index fee09121b..7cd68c1ba 100644
--- a/projects/yarn/include/dogen/yarn/types/object.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/object.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_OBJECT_HPP
-#define DOGEN_YARN_TYPES_OBJECT_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_OBJECT_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_OBJECT_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -30,17 +30,18 @@
 #include <algorithm>
 #include <unordered_map>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/types/attribute.hpp"
-#include "dogen/yarn/types/object_types.hpp"
-#include "dogen/yarn/types/type_parameters.hpp"
-#include "dogen/yarn/types/orm_object_properties.hpp"
-#include "dogen/yarn/serialization/object_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/types/meta_model/object_types.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/object_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Representation of the class notion in the OOP paradigm.
@@ -50,7 +51,7 @@ namespace yarn {
  * meta-model. Since the word class cannot be used in c++ to name types, we
  * decided instead to use the word object.
  */
-class object final : public dogen::yarn::element {
+class object final : public dogen::yarn::meta_model::element {
 public:
     object(const object&) = default;
 
@@ -66,16 +67,16 @@ public:
     object(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
-        const std::list<dogen::yarn::attribute>& all_attributes,
-        const std::list<dogen::yarn::attribute>& local_attributes,
-        const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes,
+        const dogen::yarn::meta_model::element_properties& element_properties,
+        const std::list<dogen::yarn::meta_model::attribute>& all_attributes,
+        const std::list<dogen::yarn::meta_model::attribute>& local_attributes,
+        const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes,
         const bool is_immutable,
         const bool is_fluent,
         const bool is_parent,
@@ -84,29 +85,29 @@ public:
         const bool is_final,
         const bool is_abstract,
         const bool in_inheritance_relationship,
-        const std::list<dogen::yarn::name>& root_parents,
-        const std::list<dogen::yarn::name>& parents,
-        const std::list<dogen::yarn::name>& leaves,
-        const std::list<dogen::yarn::name>& transparent_associations,
-        const std::list<dogen::yarn::name>& opaque_associations,
-        const boost::optional<dogen::yarn::name>& base_visitor,
-        const boost::optional<dogen::yarn::name>& derived_visitor,
+        const std::list<dogen::yarn::meta_model::name>& root_parents,
+        const std::list<dogen::yarn::meta_model::name>& parents,
+        const std::list<dogen::yarn::meta_model::name>& leaves,
+        const std::list<dogen::yarn::meta_model::name>& transparent_associations,
+        const std::list<dogen::yarn::meta_model::name>& opaque_associations,
+        const boost::optional<dogen::yarn::meta_model::name>& base_visitor,
+        const boost::optional<dogen::yarn::meta_model::name>& derived_visitor,
         const bool is_visitation_root,
         const bool is_visitation_leaf,
-        const dogen::yarn::type_parameters& type_parameters,
-        const dogen::yarn::object_types object_type,
-        const std::list<dogen::yarn::name>& modeled_concepts,
-        const std::list<dogen::yarn::name>& associative_container_keys,
+        const dogen::yarn::meta_model::type_parameters& type_parameters,
+        const dogen::yarn::meta_model::object_types object_type,
+        const std::list<dogen::yarn::meta_model::name>& modeled_concepts,
+        const std::list<dogen::yarn::meta_model::name>& associative_container_keys,
         const bool provides_opaqueness,
         const bool can_be_primitive_underlier,
-        const boost::optional<dogen::yarn::orm_object_properties>& orm_properties);
+        const boost::optional<dogen::yarn::meta_model::orm_object_properties>& orm_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::object& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::object& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
 public:
     using element::accept;
@@ -132,20 +133,20 @@ public:
      * not have a need for it.
      */
     /**@{*/
-    const std::list<dogen::yarn::attribute>& all_attributes() const;
-    std::list<dogen::yarn::attribute>& all_attributes();
-    void all_attributes(const std::list<dogen::yarn::attribute>& v);
-    void all_attributes(const std::list<dogen::yarn::attribute>&& v);
+    const std::list<dogen::yarn::meta_model::attribute>& all_attributes() const;
+    std::list<dogen::yarn::meta_model::attribute>& all_attributes();
+    void all_attributes(const std::list<dogen::yarn::meta_model::attribute>& v);
+    void all_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v);
     /**@}*/
 
     /**
      * @brief The set of all attributes directly associated with the type.
      */
     /**@{*/
-    const std::list<dogen::yarn::attribute>& local_attributes() const;
-    std::list<dogen::yarn::attribute>& local_attributes();
-    void local_attributes(const std::list<dogen::yarn::attribute>& v);
-    void local_attributes(const std::list<dogen::yarn::attribute>&& v);
+    const std::list<dogen::yarn::meta_model::attribute>& local_attributes() const;
+    std::list<dogen::yarn::meta_model::attribute>& local_attributes();
+    void local_attributes(const std::list<dogen::yarn::meta_model::attribute>& v);
+    void local_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v);
     /**@}*/
 
     /**
@@ -155,10 +156,10 @@ public:
      * formatting.
      */
     /**@{*/
-    const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes() const;
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes();
-    void inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v);
-    void inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >&& v);
+    const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes() const;
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes();
+    void inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v);
+    void inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >&& v);
     /**@}*/
 
     /**
@@ -229,40 +230,40 @@ public:
      * @brief Top-most parents at the root of the inheritance hierarchy, if any.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& root_parents() const;
-    std::list<dogen::yarn::name>& root_parents();
-    void root_parents(const std::list<dogen::yarn::name>& v);
-    void root_parents(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& root_parents() const;
+    std::list<dogen::yarn::meta_model::name>& root_parents();
+    void root_parents(const std::list<dogen::yarn::meta_model::name>& v);
+    void root_parents(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Direct parent of this element, if any.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& parents() const;
-    std::list<dogen::yarn::name>& parents();
-    void parents(const std::list<dogen::yarn::name>& v);
-    void parents(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& parents() const;
+    std::list<dogen::yarn::meta_model::name>& parents();
+    void parents(const std::list<dogen::yarn::meta_model::name>& v);
+    void parents(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Elements that are at the bottom of the inheritance tree.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& leaves() const;
-    std::list<dogen::yarn::name>& leaves();
-    void leaves(const std::list<dogen::yarn::name>& v);
-    void leaves(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& leaves() const;
+    std::list<dogen::yarn::meta_model::name>& leaves();
+    void leaves(const std::list<dogen::yarn::meta_model::name>& v);
+    void leaves(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Elements that are involved in aggregation or composition relationships.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& transparent_associations() const;
-    std::list<dogen::yarn::name>& transparent_associations();
-    void transparent_associations(const std::list<dogen::yarn::name>& v);
-    void transparent_associations(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& transparent_associations() const;
+    std::list<dogen::yarn::meta_model::name>& transparent_associations();
+    void transparent_associations(const std::list<dogen::yarn::meta_model::name>& v);
+    void transparent_associations(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
@@ -272,30 +273,30 @@ public:
      * This is used to break cycles where required.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& opaque_associations() const;
-    std::list<dogen::yarn::name>& opaque_associations();
-    void opaque_associations(const std::list<dogen::yarn::name>& v);
-    void opaque_associations(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& opaque_associations() const;
+    std::list<dogen::yarn::meta_model::name>& opaque_associations();
+    void opaque_associations(const std::list<dogen::yarn::meta_model::name>& v);
+    void opaque_associations(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Base class of the visitor that visits the current element, if any.
      */
     /**@{*/
-    const boost::optional<dogen::yarn::name>& base_visitor() const;
-    boost::optional<dogen::yarn::name>& base_visitor();
-    void base_visitor(const boost::optional<dogen::yarn::name>& v);
-    void base_visitor(const boost::optional<dogen::yarn::name>&& v);
+    const boost::optional<dogen::yarn::meta_model::name>& base_visitor() const;
+    boost::optional<dogen::yarn::meta_model::name>& base_visitor();
+    void base_visitor(const boost::optional<dogen::yarn::meta_model::name>& v);
+    void base_visitor(const boost::optional<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Derived class of the visitor that visits the current element, if any.
      */
     /**@{*/
-    const boost::optional<dogen::yarn::name>& derived_visitor() const;
-    boost::optional<dogen::yarn::name>& derived_visitor();
-    void derived_visitor(const boost::optional<dogen::yarn::name>& v);
-    void derived_visitor(const boost::optional<dogen::yarn::name>&& v);
+    const boost::optional<dogen::yarn::meta_model::name>& derived_visitor() const;
+    boost::optional<dogen::yarn::meta_model::name>& derived_visitor();
+    void derived_visitor(const boost::optional<dogen::yarn::meta_model::name>& v);
+    void derived_visitor(const boost::optional<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     bool is_visitation_root() const;
@@ -304,37 +305,37 @@ public:
     bool is_visitation_leaf() const;
     void is_visitation_leaf(const bool v);
 
-    const dogen::yarn::type_parameters& type_parameters() const;
-    dogen::yarn::type_parameters& type_parameters();
-    void type_parameters(const dogen::yarn::type_parameters& v);
-    void type_parameters(const dogen::yarn::type_parameters&& v);
+    const dogen::yarn::meta_model::type_parameters& type_parameters() const;
+    dogen::yarn::meta_model::type_parameters& type_parameters();
+    void type_parameters(const dogen::yarn::meta_model::type_parameters& v);
+    void type_parameters(const dogen::yarn::meta_model::type_parameters&& v);
 
     /**
      * @brief What kind of object is this.
      */
     /**@{*/
-    dogen::yarn::object_types object_type() const;
-    void object_type(const dogen::yarn::object_types v);
+    dogen::yarn::meta_model::object_types object_type() const;
+    void object_type(const dogen::yarn::meta_model::object_types v);
     /**@}*/
 
     /**
      * @brief Concepts modeled by this object.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& modeled_concepts() const;
-    std::list<dogen::yarn::name>& modeled_concepts();
-    void modeled_concepts(const std::list<dogen::yarn::name>& v);
-    void modeled_concepts(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& modeled_concepts() const;
+    std::list<dogen::yarn::meta_model::name>& modeled_concepts();
+    void modeled_concepts(const std::list<dogen::yarn::meta_model::name>& v);
+    void modeled_concepts(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
      * @brief Elements that are keys in an associative container.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& associative_container_keys() const;
-    std::list<dogen::yarn::name>& associative_container_keys();
-    void associative_container_keys(const std::list<dogen::yarn::name>& v);
-    void associative_container_keys(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& associative_container_keys() const;
+    std::list<dogen::yarn::meta_model::name>& associative_container_keys();
+    void associative_container_keys(const std::list<dogen::yarn::meta_model::name>& v);
+    void associative_container_keys(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
     /**
@@ -353,10 +354,10 @@ public:
     void can_be_primitive_underlier(const bool v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::orm_object_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_object_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_object_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_object_properties>&& v);
+    const boost::optional<dogen::yarn::meta_model::orm_object_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_object_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_object_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_object_properties>&& v);
 
 public:
     bool operator==(const object& rhs) const;
@@ -365,16 +366,16 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(object& other) noexcept;
     object& operator=(object other);
 
 private:
-    std::list<dogen::yarn::attribute> all_attributes_;
-    std::list<dogen::yarn::attribute> local_attributes_;
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > inherited_attributes_;
+    std::list<dogen::yarn::meta_model::attribute> all_attributes_;
+    std::list<dogen::yarn::meta_model::attribute> local_attributes_;
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > inherited_attributes_;
     bool is_immutable_;
     bool is_fluent_;
     bool is_parent_;
@@ -383,32 +384,32 @@ private:
     bool is_final_;
     bool is_abstract_;
     bool in_inheritance_relationship_;
-    std::list<dogen::yarn::name> root_parents_;
-    std::list<dogen::yarn::name> parents_;
-    std::list<dogen::yarn::name> leaves_;
-    std::list<dogen::yarn::name> transparent_associations_;
-    std::list<dogen::yarn::name> opaque_associations_;
-    boost::optional<dogen::yarn::name> base_visitor_;
-    boost::optional<dogen::yarn::name> derived_visitor_;
+    std::list<dogen::yarn::meta_model::name> root_parents_;
+    std::list<dogen::yarn::meta_model::name> parents_;
+    std::list<dogen::yarn::meta_model::name> leaves_;
+    std::list<dogen::yarn::meta_model::name> transparent_associations_;
+    std::list<dogen::yarn::meta_model::name> opaque_associations_;
+    boost::optional<dogen::yarn::meta_model::name> base_visitor_;
+    boost::optional<dogen::yarn::meta_model::name> derived_visitor_;
     bool is_visitation_root_;
     bool is_visitation_leaf_;
-    dogen::yarn::type_parameters type_parameters_;
-    dogen::yarn::object_types object_type_;
-    std::list<dogen::yarn::name> modeled_concepts_;
-    std::list<dogen::yarn::name> associative_container_keys_;
+    dogen::yarn::meta_model::type_parameters type_parameters_;
+    dogen::yarn::meta_model::object_types object_type_;
+    std::list<dogen::yarn::meta_model::name> modeled_concepts_;
+    std::list<dogen::yarn::meta_model::name> associative_container_keys_;
     bool provides_opaqueness_;
     bool can_be_primitive_underlier_;
-    boost::optional<dogen::yarn::orm_object_properties> orm_properties_;
+    boost::optional<dogen::yarn::meta_model::orm_object_properties> orm_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::object& lhs,
-    dogen::yarn::object& rhs) {
+    dogen::yarn::meta_model::object& lhs,
+    dogen::yarn::meta_model::object& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/object_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/object_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/object_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/object_fwd.hpp
index 6af79ea47..5394df3e7 100644
--- a/projects/yarn/include/dogen/yarn/types/object_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/object_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_OBJECT_FWD_HPP
-#define DOGEN_YARN_TYPES_OBJECT_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_OBJECT_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_OBJECT_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class object;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/object_types.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/object_types.hpp
similarity index 91%
rename from projects/yarn/include/dogen/yarn/types/object_types.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/object_types.hpp
index bf50ea035..060768e9c 100644
--- a/projects/yarn/include/dogen/yarn/types/object_types.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/object_types.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_OBJECT_TYPES_HPP
-#define DOGEN_YARN_TYPES_OBJECT_TYPES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_OBJECT_TYPES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_OBJECT_TYPES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Types of objects.
@@ -41,6 +42,6 @@ enum class object_types : unsigned int {
     sequence_container = 3 ///< Type is a sequence container.
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/object_types_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/object_types_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/object_types_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/object_types_fwd.hpp
index dfe79ddea..ae787f1fd 100644
--- a/projects/yarn/include/dogen/yarn/types/object_types_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/object_types_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_OBJECT_TYPES_FWD_HPP
-#define DOGEN_YARN_TYPES_OBJECT_TYPES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_OBJECT_TYPES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_OBJECT_TYPES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class object_types : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/origin_types.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/origin_types.hpp
similarity index 92%
rename from projects/yarn/include/dogen/yarn/types/origin_types.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/origin_types.hpp
index 393f946ac..fc46838d7 100644
--- a/projects/yarn/include/dogen/yarn/types/origin_types.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/origin_types.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORIGIN_TYPES_HPP
-#define DOGEN_YARN_TYPES_ORIGIN_TYPES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORIGIN_TYPES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORIGIN_TYPES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief What originated the model element.
@@ -39,6 +40,6 @@ enum class origin_types : unsigned int {
     not_yet_determined = 4 ///< The origin of the element is not yet known
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/origin_types_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/origin_types_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/origin_types_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/origin_types_fwd.hpp
index a744f2cbc..f3d4bfc86 100644
--- a/projects/yarn/include/dogen/yarn/types/origin_types_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/origin_types_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORIGIN_TYPES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORIGIN_TYPES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORIGIN_TYPES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORIGIN_TYPES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class origin_types : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_attribute_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties.hpp
similarity index 72%
rename from projects/yarn/include/dogen/yarn/types/orm_attribute_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties.hpp
index 50da0a852..1e620d4af 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_attribute_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_ATTRIBUTE_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ORM_ATTRIBUTE_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,12 +29,13 @@
 #include <algorithm>
 #include <unordered_map>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/orm_database_systems.hpp"
-#include "dogen/yarn/hash/orm_database_systems_hash.hpp"
-#include "dogen/yarn/serialization/orm_attribute_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
+#include "dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_attribute_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_attribute_properties final {
 public:
@@ -52,15 +53,15 @@ public:
         const std::string& column_name,
         const bool is_primary_key,
         const boost::optional<bool>& is_nullable,
-        const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& type_overrides,
+        const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& type_overrides,
         const bool is_composite);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
 public:
     /**
@@ -95,10 +96,10 @@ public:
      * @brief Override the default type for this attribute for a given database system.
      */
     /**@{*/
-    const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& type_overrides() const;
-    std::unordered_map<dogen::yarn::orm_database_systems, std::string>& type_overrides();
-    void type_overrides(const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& v);
-    void type_overrides(const std::unordered_map<dogen::yarn::orm_database_systems, std::string>&& v);
+    const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& type_overrides() const;
+    std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& type_overrides();
+    void type_overrides(const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& v);
+    void type_overrides(const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>&& v);
     /**@}*/
 
     /**
@@ -123,18 +124,18 @@ private:
     std::string column_name_;
     bool is_primary_key_;
     boost::optional<bool> is_nullable_;
-    std::unordered_map<dogen::yarn::orm_database_systems, std::string> type_overrides_;
+    std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string> type_overrides_;
     bool is_composite_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::orm_attribute_properties& lhs,
-    dogen::yarn::orm_attribute_properties& rhs) {
+    dogen::yarn::meta_model::orm_attribute_properties& lhs,
+    dogen::yarn::meta_model::orm_attribute_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/orm_attribute_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties_fwd.hpp
similarity index 85%
rename from projects/yarn/include/dogen/yarn/types/orm_attribute_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties_fwd.hpp
index 7e482b28c..291f34883 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_attribute_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_attribute_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_ATTRIBUTE_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_ATTRIBUTE_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_ATTRIBUTE_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_attribute_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_database_systems.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/orm_database_systems.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems.hpp
index 1a287757f..76211ad85 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_database_systems.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_DATABASE_SYSTEMS_HPP
-#define DOGEN_YARN_TYPES_ORM_DATABASE_SYSTEMS_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_DATABASE_SYSTEMS_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_DATABASE_SYSTEMS_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,6 +27,7 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class orm_database_systems : unsigned int {
     invalid = 0, ///< Represents an uninitialised enum
@@ -37,6 +38,6 @@ enum class orm_database_systems : unsigned int {
     sqllite = 5
 };
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_database_systems_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/orm_database_systems_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems_fwd.hpp
index 0a2ab6d74..bd4a6bb23 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_database_systems_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_database_systems_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_DATABASE_SYSTEMS_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_DATABASE_SYSTEMS_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_DATABASE_SYSTEMS_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_DATABASE_SYSTEMS_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enum class orm_database_systems : unsigned int;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_model_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties.hpp
similarity index 57%
rename from projects/yarn/include/dogen/yarn/types/orm_model_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties.hpp
index fd360638c..fa4132d3a 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_model_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_MODEL_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ORM_MODEL_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_MODEL_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_MODEL_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,12 +29,13 @@
 #include <vector>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/letter_cases.hpp"
-#include "dogen/yarn/types/orm_database_systems.hpp"
-#include "dogen/yarn/serialization/orm_model_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_model_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_model_properties final {
 public:
@@ -47,32 +48,32 @@ public:
 
 public:
     orm_model_properties(
-        const std::vector<dogen::yarn::orm_database_systems>& database_systems,
+        const std::vector<dogen::yarn::meta_model::orm_database_systems>& database_systems,
         const std::string& schema_name,
-        const boost::optional<dogen::yarn::letter_cases>& letter_case);
+        const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
 public:
-    const std::vector<dogen::yarn::orm_database_systems>& database_systems() const;
-    std::vector<dogen::yarn::orm_database_systems>& database_systems();
-    void database_systems(const std::vector<dogen::yarn::orm_database_systems>& v);
-    void database_systems(const std::vector<dogen::yarn::orm_database_systems>&& v);
+    const std::vector<dogen::yarn::meta_model::orm_database_systems>& database_systems() const;
+    std::vector<dogen::yarn::meta_model::orm_database_systems>& database_systems();
+    void database_systems(const std::vector<dogen::yarn::meta_model::orm_database_systems>& v);
+    void database_systems(const std::vector<dogen::yarn::meta_model::orm_database_systems>&& v);
 
     const std::string& schema_name() const;
     std::string& schema_name();
     void schema_name(const std::string& v);
     void schema_name(const std::string&& v);
 
-    const boost::optional<dogen::yarn::letter_cases>& letter_case() const;
-    boost::optional<dogen::yarn::letter_cases>& letter_case();
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>& v);
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>&& v);
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case() const;
+    boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case();
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v);
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v);
 
 public:
     bool operator==(const orm_model_properties& rhs) const;
@@ -85,19 +86,19 @@ public:
     orm_model_properties& operator=(orm_model_properties other);
 
 private:
-    std::vector<dogen::yarn::orm_database_systems> database_systems_;
+    std::vector<dogen::yarn::meta_model::orm_database_systems> database_systems_;
     std::string schema_name_;
-    boost::optional<dogen::yarn::letter_cases> letter_case_;
+    boost::optional<dogen::yarn::meta_model::letter_cases> letter_case_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::orm_model_properties& lhs,
-    dogen::yarn::orm_model_properties& rhs) {
+    dogen::yarn::meta_model::orm_model_properties& lhs,
+    dogen::yarn::meta_model::orm_model_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/orm_model_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/orm_model_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties_fwd.hpp
index d722a245c..80185dda5 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_model_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_model_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_MODEL_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_MODEL_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_MODEL_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_MODEL_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_model_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_module_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties.hpp
similarity index 82%
rename from projects/yarn/include/dogen/yarn/types/orm_module_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties.hpp
index 0a9ec9bd1..b160d41da 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_module_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_MODULE_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ORM_MODULE_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_MODULE_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_MODULE_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,10 +27,11 @@
 
 #include <string>
 #include <algorithm>
-#include "dogen/yarn/serialization/orm_module_properties_fwd_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_module_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_module_properties final {
 public:
@@ -44,10 +45,10 @@ public:
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
 public:
     /**
@@ -74,14 +75,14 @@ private:
     std::string schema_name_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::orm_module_properties& lhs,
-    dogen::yarn::orm_module_properties& rhs) {
+    dogen::yarn::meta_model::orm_module_properties& lhs,
+    dogen::yarn::meta_model::orm_module_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/orm_module_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/orm_module_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties_fwd.hpp
index 775b32003..87d02a029 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_module_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_module_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_MODULE_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_MODULE_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_MODULE_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_MODULE_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_module_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_object_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties.hpp
similarity index 77%
rename from projects/yarn/include/dogen/yarn/types/orm_object_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties.hpp
index b70d4ee26..dfdbaf1a2 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_object_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_OBJECT_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ORM_OBJECT_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_OBJECT_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_OBJECT_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,11 +28,12 @@
 #include <string>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/letter_cases.hpp"
-#include "dogen/yarn/serialization/orm_object_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_object_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_object_properties final {
 public:
@@ -52,14 +53,14 @@ public:
         const std::string& table_name,
         const bool is_value,
         const bool has_primary_key,
-        const boost::optional<dogen::yarn::letter_cases>& letter_case);
+        const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
 public:
     /**
@@ -110,10 +111,10 @@ public:
      * @brief What case to use for the database identifiers.
      */
     /**@{*/
-    const boost::optional<dogen::yarn::letter_cases>& letter_case() const;
-    boost::optional<dogen::yarn::letter_cases>& letter_case();
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>& v);
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>&& v);
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case() const;
+    boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case();
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v);
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v);
     /**@}*/
 
 public:
@@ -132,17 +133,17 @@ private:
     std::string table_name_;
     bool is_value_;
     bool has_primary_key_;
-    boost::optional<dogen::yarn::letter_cases> letter_case_;
+    boost::optional<dogen::yarn::meta_model::letter_cases> letter_case_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::orm_object_properties& lhs,
-    dogen::yarn::orm_object_properties& rhs) {
+    dogen::yarn::meta_model::orm_object_properties& lhs,
+    dogen::yarn::meta_model::orm_object_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/orm_object_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties_fwd.hpp
similarity index 86%
rename from projects/yarn/include/dogen/yarn/types/orm_object_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties_fwd.hpp
index 8d7babfab..04532fd8f 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_object_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_object_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_OBJECT_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_OBJECT_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_OBJECT_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_OBJECT_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_object_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/orm_primitive_properties.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties.hpp
similarity index 71%
rename from projects/yarn/include/dogen/yarn/types/orm_primitive_properties.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties.hpp
index 285c2178c..794f370bd 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_primitive_properties.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_PRIMITIVE_PROPERTIES_HPP
-#define DOGEN_YARN_TYPES_ORM_PRIMITIVE_PROPERTIES_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_PRIMITIVE_PROPERTIES_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_PRIMITIVE_PROPERTIES_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,11 +28,12 @@
 #include <string>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/letter_cases.hpp"
-#include "dogen/yarn/serialization/orm_primitive_properties_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_primitive_properties_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_primitive_properties final {
 public:
@@ -49,14 +50,14 @@ public:
     orm_primitive_properties(
         const bool generate_mapping,
         const std::string& schema_name,
-        const boost::optional<dogen::yarn::letter_cases>& letter_case);
+        const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 public:
     /**
@@ -81,10 +82,10 @@ public:
      * @brief What case to use for the database identifiers.
      */
     /**@{*/
-    const boost::optional<dogen::yarn::letter_cases>& letter_case() const;
-    boost::optional<dogen::yarn::letter_cases>& letter_case();
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>& v);
-    void letter_case(const boost::optional<dogen::yarn::letter_cases>&& v);
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case() const;
+    boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case();
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v);
+    void letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v);
     /**@}*/
 
 public:
@@ -100,17 +101,17 @@ public:
 private:
     bool generate_mapping_;
     std::string schema_name_;
-    boost::optional<dogen::yarn::letter_cases> letter_case_;
+    boost::optional<dogen::yarn::meta_model::letter_cases> letter_case_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::orm_primitive_properties& lhs,
-    dogen::yarn::orm_primitive_properties& rhs) {
+    dogen::yarn::meta_model::orm_primitive_properties& lhs,
+    dogen::yarn::meta_model::orm_primitive_properties& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/orm_primitive_properties_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties_fwd.hpp
similarity index 85%
rename from projects/yarn/include/dogen/yarn/types/orm_primitive_properties_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties_fwd.hpp
index ee990783f..0e67c1c3f 100644
--- a/projects/yarn/include/dogen/yarn/types/orm_primitive_properties_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/orm_primitive_properties_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_ORM_PRIMITIVE_PROPERTIES_FWD_HPP
-#define DOGEN_YARN_TYPES_ORM_PRIMITIVE_PROPERTIES_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_ORM_PRIMITIVE_PROPERTIES_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_ORM_PRIMITIVE_PROPERTIES_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class orm_primitive_properties;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/primitive.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/primitive.hpp
similarity index 62%
rename from projects/yarn/include/dogen/yarn/types/primitive.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/primitive.hpp
index 6a4ed320e..237db4281 100644
--- a/projects/yarn/include/dogen/yarn/types/primitive.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/primitive.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_PRIMITIVE_HPP
-#define DOGEN_YARN_TYPES_PRIMITIVE_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_PRIMITIVE_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_PRIMITIVE_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -28,18 +28,19 @@
 #include <iosfwd>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/attribute.hpp"
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
-#include "dogen/yarn/serialization/primitive_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Defines an element created by the user to wrap another element, most likely a built-in.
  */
-class primitive final : public dogen::yarn::element {
+class primitive final : public dogen::yarn::meta_model::element {
 public:
     primitive(const primitive&) = default;
 
@@ -55,25 +56,25 @@ public:
     primitive(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
+        const dogen::yarn::meta_model::element_properties& element_properties,
         const bool is_nullable,
-        const dogen::yarn::attribute& value_attribute,
+        const dogen::yarn::meta_model::attribute& value_attribute,
         const bool use_type_aliasing,
         const bool is_immutable,
-        const boost::optional<dogen::yarn::orm_primitive_properties>& orm_properties);
+        const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& orm_properties);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::primitive& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::primitive& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 public:
     using element::accept;
@@ -98,10 +99,10 @@ public:
      * @brief Attribute that represents the value of the primitive.
      */
     /**@{*/
-    const dogen::yarn::attribute& value_attribute() const;
-    dogen::yarn::attribute& value_attribute();
-    void value_attribute(const dogen::yarn::attribute& v);
-    void value_attribute(const dogen::yarn::attribute&& v);
+    const dogen::yarn::meta_model::attribute& value_attribute() const;
+    dogen::yarn::meta_model::attribute& value_attribute();
+    void value_attribute(const dogen::yarn::meta_model::attribute& v);
+    void value_attribute(const dogen::yarn::meta_model::attribute&& v);
     /**@}*/
 
     /**
@@ -120,10 +121,10 @@ public:
     void is_immutable(const bool v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::orm_primitive_properties>& orm_properties() const;
-    boost::optional<dogen::yarn::orm_primitive_properties>& orm_properties();
-    void orm_properties(const boost::optional<dogen::yarn::orm_primitive_properties>& v);
-    void orm_properties(const boost::optional<dogen::yarn::orm_primitive_properties>&& v);
+    const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& orm_properties() const;
+    boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& orm_properties();
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& v);
+    void orm_properties(const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>&& v);
 
 public:
     bool operator==(const primitive& rhs) const;
@@ -132,7 +133,7 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(primitive& other) noexcept;
@@ -140,20 +141,20 @@ public:
 
 private:
     bool is_nullable_;
-    dogen::yarn::attribute value_attribute_;
+    dogen::yarn::meta_model::attribute value_attribute_;
     bool use_type_aliasing_;
     bool is_immutable_;
-    boost::optional<dogen::yarn::orm_primitive_properties> orm_properties_;
+    boost::optional<dogen::yarn::meta_model::orm_primitive_properties> orm_properties_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::primitive& lhs,
-    dogen::yarn::primitive& rhs) {
+    dogen::yarn::meta_model::primitive& lhs,
+    dogen::yarn::meta_model::primitive& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/primitive_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/primitive_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/primitive_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/primitive_fwd.hpp
index 091ffdac0..31a4b2354 100644
--- a/projects/yarn/include/dogen/yarn/types/primitive_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/primitive_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_PRIMITIVE_FWD_HPP
-#define DOGEN_YARN_TYPES_PRIMITIVE_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_PRIMITIVE_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_PRIMITIVE_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class primitive;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/type_parameters.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/type_parameters.hpp
similarity index 83%
rename from projects/yarn/include/dogen/yarn/types/type_parameters.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/type_parameters.hpp
index 73bfee657..b2dd16b48 100644
--- a/projects/yarn/include/dogen/yarn/types/type_parameters.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/type_parameters.hpp
@@ -18,18 +18,19 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_TYPE_PARAMETERS_HPP
-#define DOGEN_YARN_TYPES_TYPE_PARAMETERS_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_TYPE_PARAMETERS_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_TYPE_PARAMETERS_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
 #endif
 
 #include <algorithm>
-#include "dogen/yarn/serialization/type_parameters_fwd_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/type_parameters_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class type_parameters final {
 public:
@@ -48,10 +49,10 @@ public:
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
 public:
     bool variable_number_of_parameters() const;
@@ -79,14 +80,14 @@ private:
     bool always_in_heap_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::type_parameters& lhs,
-    dogen::yarn::type_parameters& rhs) {
+    dogen::yarn::meta_model::type_parameters& lhs,
+    dogen::yarn::meta_model::type_parameters& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/type_parameters_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/type_parameters_fwd.hpp
similarity index 87%
rename from projects/yarn/include/dogen/yarn/types/type_parameters_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/type_parameters_fwd.hpp
index 0ed0635e9..6cda41be5 100644
--- a/projects/yarn/include/dogen/yarn/types/type_parameters_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/type_parameters_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_TYPE_PARAMETERS_FWD_HPP
-#define DOGEN_YARN_TYPES_TYPE_PARAMETERS_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_TYPE_PARAMETERS_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_TYPE_PARAMETERS_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class type_parameters;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/visitor.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/visitor.hpp
similarity index 59%
rename from projects/yarn/include/dogen/yarn/types/visitor.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/visitor.hpp
index bc2abda96..68b56dc1d 100644
--- a/projects/yarn/include/dogen/yarn/types/visitor.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/visitor.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_VISITOR_HPP
-#define DOGEN_YARN_TYPES_VISITOR_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_VISITOR_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_VISITOR_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -29,17 +29,18 @@
 #include <iosfwd>
 #include <algorithm>
 #include <boost/optional.hpp>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/serialization/visitor_fwd_ser.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_fwd_ser.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 /**
  * @brief Represents a visitor in the GOF visitor design pattern.
  */
-class visitor final : public dogen::yarn::element {
+class visitor final : public dogen::yarn::meta_model::element {
 public:
     visitor() = default;
     visitor(const visitor&) = default;
@@ -53,22 +54,22 @@ public:
     visitor(
         const std::string& documentation,
         const dogen::annotations::annotation& annotation,
-        const dogen::yarn::name& name,
-        const dogen::yarn::origin_types origin_type,
-        const boost::optional<dogen::yarn::name>& contained_by,
+        const dogen::yarn::meta_model::name& name,
+        const dogen::yarn::meta_model::origin_types origin_type,
+        const boost::optional<dogen::yarn::meta_model::name>& contained_by,
         const bool in_global_module,
         const std::vector<std::string>& stereotypes,
         const bool is_element_extension,
-        const dogen::yarn::element_properties& element_properties,
-        const std::list<dogen::yarn::name>& visits,
-        const boost::optional<dogen::yarn::name>& parent);
+        const dogen::yarn::meta_model::element_properties& element_properties,
+        const std::list<dogen::yarn::meta_model::name>& visits,
+        const boost::optional<dogen::yarn::meta_model::name>& parent);
 
 private:
     template<typename Archive>
-    friend void boost::serialization::save(Archive& ar, const dogen::yarn::visitor& v, unsigned int version);
+    friend void boost::serialization::save(Archive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
 
     template<typename Archive>
-    friend void boost::serialization::load(Archive& ar, dogen::yarn::visitor& v, unsigned int version);
+    friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 public:
     using element::accept;
@@ -85,16 +86,16 @@ public:
      * @brief Elements that are visitable by the visitor.
      */
     /**@{*/
-    const std::list<dogen::yarn::name>& visits() const;
-    std::list<dogen::yarn::name>& visits();
-    void visits(const std::list<dogen::yarn::name>& v);
-    void visits(const std::list<dogen::yarn::name>&& v);
+    const std::list<dogen::yarn::meta_model::name>& visits() const;
+    std::list<dogen::yarn::meta_model::name>& visits();
+    void visits(const std::list<dogen::yarn::meta_model::name>& v);
+    void visits(const std::list<dogen::yarn::meta_model::name>&& v);
     /**@}*/
 
-    const boost::optional<dogen::yarn::name>& parent() const;
-    boost::optional<dogen::yarn::name>& parent();
-    void parent(const boost::optional<dogen::yarn::name>& v);
-    void parent(const boost::optional<dogen::yarn::name>&& v);
+    const boost::optional<dogen::yarn::meta_model::name>& parent() const;
+    boost::optional<dogen::yarn::meta_model::name>& parent();
+    void parent(const boost::optional<dogen::yarn::meta_model::name>& v);
+    void parent(const boost::optional<dogen::yarn::meta_model::name>&& v);
 
 public:
     bool operator==(const visitor& rhs) const;
@@ -103,25 +104,25 @@ public:
     }
 
 public:
-    bool equals(const dogen::yarn::element& other) const override;
+    bool equals(const dogen::yarn::meta_model::element& other) const override;
 
 public:
     void swap(visitor& other) noexcept;
     visitor& operator=(visitor other);
 
 private:
-    std::list<dogen::yarn::name> visits_;
-    boost::optional<dogen::yarn::name> parent_;
+    std::list<dogen::yarn::meta_model::name> visits_;
+    boost::optional<dogen::yarn::meta_model::name> parent_;
 };
 
-} }
+} } }
 
 namespace std {
 
 template<>
 inline void swap(
-    dogen::yarn::visitor& lhs,
-    dogen::yarn::visitor& rhs) {
+    dogen::yarn::meta_model::visitor& lhs,
+    dogen::yarn::meta_model::visitor& rhs) {
     lhs.swap(rhs);
 }
 
diff --git a/projects/yarn/include/dogen/yarn/types/visitor_fwd.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/visitor_fwd.hpp
similarity index 88%
rename from projects/yarn/include/dogen/yarn/types/visitor_fwd.hpp
rename to projects/yarn/include/dogen/yarn/types/meta_model/visitor_fwd.hpp
index ebc1eab9e..3edb240e4 100644
--- a/projects/yarn/include/dogen/yarn/types/visitor_fwd.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/visitor_fwd.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_YARN_TYPES_VISITOR_FWD_HPP
-#define DOGEN_YARN_TYPES_VISITOR_FWD_HPP
+#ifndef DOGEN_YARN_TYPES_META_MODEL_VISITOR_FWD_HPP
+#define DOGEN_YARN_TYPES_META_MODEL_VISITOR_FWD_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
@@ -27,9 +27,10 @@
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 class visitor;
 
-} }
+} } }
 
 #endif
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/annotations_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/annotations_transform.hpp
index 05cf295c0..f9192909f 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/annotations_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/annotations_transform.hpp
@@ -27,7 +27,7 @@
 
 #include "dogen/annotations/types/annotation_groups_factory_fwd.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
-#include "dogen/yarn/types/intermediate_model_fwd.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model_fwd.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -39,13 +39,14 @@ namespace transforms {
  */
 class annotations_transform final {
 private:
-    static void update_scribble_groups(intermediate_model& im);
+    static void update_scribble_groups(meta_model::intermediate_model& im);
     static void update_annotations(
         const annotations::annotation_groups_factory& agf,
-        intermediate_model& im);
+        meta_model::intermediate_model& im);
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/associations_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/associations_transform.hpp
index 8ab052cbb..4a2cac4ac 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/associations_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/associations_transform.hpp
@@ -27,10 +27,10 @@
 
 #include <list>
 #include <unordered_set>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -68,28 +68,30 @@ private:
      * @param processed list of names that have already been processed
      * somewhere else, if any.
      */
-    static void remove_duplicates(std::list<name>& names,
-        std::unordered_set<name> processed =
-        std::unordered_set<name>());
+    static void remove_duplicates(std::list<meta_model::name>& names,
+        std::unordered_set<meta_model::name> processed =
+        std::unordered_set<meta_model::name>());
 
     /**
      * @brief Walks through the name tree, picking up associations as
      * it goes along.
      */
-    static void walk_name_tree(const intermediate_model& im, object& o,
-        const name_tree& nt, const bool inherit_opaqueness_from_parent);
+    static void walk_name_tree(const meta_model::intermediate_model& im,
+        meta_model::object& o, const meta_model::name_tree& nt,
+        const bool inherit_opaqueness_from_parent);
 
 private:
     /**
      * @brief Expands a specific object.
      */
-    static void expand_object(const intermediate_model& im, object& o);
+    static void expand_object(const meta_model::intermediate_model& im,
+        meta_model::object& o);
 
 public:
     /**
      * @brief Expands all association relationships.
      */
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/attributes_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/attributes_transform.hpp
index 73c12c9ee..908cd8e1a 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/attributes_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/attributes_transform.hpp
@@ -27,7 +27,7 @@
 
 #include <string>
 #include <unordered_set>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -103,41 +103,45 @@ private:
     /**
      * @brief Returns the object with the given name, or throws.
      */
-    static object& find_object(const name& n, intermediate_model& im);
+    static meta_model::object& find_object(const meta_model::name& n,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Returns the concept with the given name, or throws.
      */
-    static concept& find_concept(const name& n, intermediate_model& im);
+    static meta_model::concept& find_concept(const meta_model::name& n,
+        meta_model::intermediate_model& im);
 
 private:
     /**
      * @brief Expands a specific object.
      */
-    static void expand_object(object& o, intermediate_model& im,
+    static void expand_object(meta_model::object& o,
+        meta_model::intermediate_model& im,
         std::unordered_set<std::string>& processed_ids);
 
     /**
      * @brief Expands all objects in the model.
      */
-    static void expand_objects(intermediate_model& im);
+    static void expand_objects(meta_model::intermediate_model& im);
 
     /**
      * @brief Populates index information in a concept.
      */
-    static void expand_concept(concept& c, intermediate_model& im,
+    static void expand_concept(meta_model::concept& c,
+        meta_model::intermediate_model& im,
         std::unordered_set<std::string>& processed_ids);
 
     /**
      * @brief Indexes all concepts in the model.
      */
-    static void expand_concepts(intermediate_model& im);
+    static void expand_concepts(meta_model::intermediate_model& im);
 
 public:
     /**
      * @brief Indexes the supplied model.
      */
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/concepts_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/concepts_transform.hpp
index ecf30ca6e..fbba44657 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/concepts_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/concepts_transform.hpp
@@ -27,7 +27,7 @@
 
 #include <list>
 #include <unordered_set>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -100,47 +100,51 @@ private:
     /**
      * @brief Returns the object with the given name, or throws.
      */
-    static  object& find_object(const name& n, intermediate_model& im);
+    static  meta_model::object& find_object(const meta_model::name& n,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Returns the concept with the given name, or throws.
      */
-    static concept& find_concept(const name& n, intermediate_model& im);
+    static meta_model::concept& find_concept(const meta_model::name& n,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Removes duplicate names, preserving the original order
      * of elements in the list.
      */
-    static void remove_duplicates(std::list<name>& names);
+    static void remove_duplicates(std::list<meta_model::name>& names);
 
 private:
     /**
      * @brief Expands a specific object.
      */
-    static void expand_object(object& o, intermediate_model& im,
-        std::unordered_set<name>& processed_names);
+    static void expand_object(meta_model::object& o,
+        meta_model::intermediate_model& im,
+        std::unordered_set<meta_model::name>& processed_names);
 
     /**
      * @brief Expands all objects in the model.
      */
-    static void expand_objects(intermediate_model& im);
+    static void expand_objects(meta_model::intermediate_model& im);
 
     /**
      * @brief Expands a concept.
      */
-    static void expand_concept(concept& c, intermediate_model& im,
-        std::unordered_set<name>& processed_names);
+    static void expand_concept(meta_model::concept& c,
+        meta_model::intermediate_model& im,
+        std::unordered_set<meta_model::name>& processed_names);
 
     /**
      * @brief Expands all concepts in the model.
      */
-    static void expand_concepts(intermediate_model& im);
+    static void expand_concepts(meta_model::intermediate_model& im);
 
 public:
     /**
      * @brief Transforms the concepts the supplied model.
      */
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
index 60671806a..b08ac52ec 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
@@ -25,8 +25,8 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/origin_types.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -37,13 +37,14 @@ private:
     /**
      * @brief Creates the module to represent the global namespace.
      */
-    static module create_global_module(const origin_types ot);
+    static meta_model::module
+    create_global_module(const meta_model::origin_types ot);
 
     /**
      * @brief Injects the global module, and makes all modules that do
      * not have a containing namespace be contained by it.
      */
-    static void inject_global_module(intermediate_model& im);
+    static void inject_global_module(meta_model::intermediate_model& im);
 
 public:
 
@@ -52,7 +53,7 @@ public:
      *
      * @param m Yarn model to operate on.
      */
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/enumerations_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/enumerations_transform.hpp
index db6fd1e0c..105db89e3 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/enumerations_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/enumerations_transform.hpp
@@ -30,9 +30,9 @@
 #include "dogen/annotations/types/type.hpp"
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -74,23 +74,27 @@ private:
 
 private:
     static void populate_from_annotations(const enumeration_type_group& tg,
-        enumeration& e);
+        meta_model::enumeration& e);
     static void populate_from_annotations(const enumerator_type_group& tg,
-        enumerator& e);
+        meta_model::enumerator& e);
 
 private:
-    static name obtain_enumeration_default_underlying_element_name(
-        const intermediate_model& im);
-    static std::string obtain_invalid_enumerator_simple_name(const languages l);
-    static enumerator make_invalid_enumerator(const name& n, const languages l);
+    static meta_model::name obtain_enumeration_default_underlying_element_name(
+        const meta_model::intermediate_model& im);
+    static std::string obtain_invalid_enumerator_simple_name(
+        const meta_model::languages l);
+    static meta_model::enumerator make_invalid_enumerator(
+        const meta_model::name& n, const meta_model::languages l);
 
     static void expand_default_underlying_element(
-        const name& default_underlying_element_name, enumeration& e);
+        const meta_model::name& default_underlying_element_name,
+        meta_model::enumeration& e);
     static void expand_enumerators(const enumerator_type_group& tg,
-        const languages l, enumeration& e);
+        const meta_model::languages l, meta_model::enumeration& e);
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/exogenous_model_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/exogenous_model_chain.hpp
index d02ddc4be..685a9fb6c 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/exogenous_model_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/exogenous_model_chain.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/exogenous_transform_registrar.hpp"
 
 namespace dogen {
@@ -53,9 +53,10 @@ public:
      * @pre @e p must point to a valid file, and contain a supported
      * exogenous model.
      */
-    static intermediate_model transform(const boost::filesystem::path& p);
+    static meta_model::intermediate_model
+    transform(const boost::filesystem::path& p);
 
-    static void transform(const intermediate_model& im,
+    static void transform(const meta_model::intermediate_model& im,
         const boost::filesystem::path& p);
 
 private:
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/exogenous_transform_interface.hpp b/projects/yarn/include/dogen/yarn/types/transforms/exogenous_transform_interface.hpp
index 0b941df69..5346393f3 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/exogenous_transform_interface.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/exogenous_transform_interface.hpp
@@ -27,7 +27,7 @@
 
 #include <string>
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/exogenous_transform_types.hpp"
 
 namespace dogen {
@@ -84,7 +84,8 @@ public:
      * transformers cannot cope with string processing. In the future
      * this will change to a string.
      */
-    virtual intermediate_model transform(const boost::filesystem::path& p) = 0;
+    virtual meta_model::intermediate_model
+    transform(const boost::filesystem::path& p) = 0;
 
     /**
      * @brief Transforms the intermediate model into a representation
@@ -100,7 +101,7 @@ public:
      * exogenous transformers cannot cope with string processing. In
      * the future this will change to returning a string.
      */
-    virtual void transform(const intermediate_model& im,
+    virtual void transform(const meta_model::intermediate_model& im,
         const boost::filesystem::path& p) = 0;
 };
 
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/external_transform_interface.hpp b/projects/yarn/include/dogen/yarn/types/transforms/external_transform_interface.hpp
index 88698cc41..4c7714150 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/external_transform_interface.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/external_transform_interface.hpp
@@ -28,7 +28,7 @@
 #include <string>
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/formatters/types/decoration_properties_factory.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -46,7 +46,7 @@ public:
     virtual std::string id() const = 0;
     virtual void transform(const context& ctx,
         const dogen::formatters::decoration_properties_factory& dpf,
-        intermediate_model& im) const = 0;
+        meta_model::intermediate_model& im) const = 0;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/external_transforms_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/external_transforms_chain.hpp
index 5c2b8da2e..2f7fef7fe 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/external_transforms_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/external_transforms_chain.hpp
@@ -28,7 +28,7 @@
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/formatters/types/decoration_properties_factory.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/external_transform_registrar.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
@@ -63,7 +63,8 @@ public:
     static external_transform_registrar& registrar();
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 
 private:
     static std::shared_ptr<external_transform_registrar> registrar_;
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/final_model_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/final_model_transform.hpp
index 0f4ec74d4..4d9f08954 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/final_model_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/final_model_transform.hpp
@@ -25,8 +25,8 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/model.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -34,10 +34,12 @@ namespace transforms {
 
 class final_model_transform final {
 private:
-    static std::size_t compute_total_size(const intermediate_model& im);
+    static std::size_t
+    compute_total_size(const meta_model::intermediate_model& im);
 
 public:
-    static model transform(const intermediate_model& im);
+    static meta_model::model
+    transform(const meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/generability_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/generability_transform.hpp
index 6560d521f..20d62a664 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/generability_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/generability_transform.hpp
@@ -25,7 +25,7 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -33,11 +33,11 @@ namespace transforms {
 
 class generability_transform final {
 private:
-    static bool is_generatable(const element& e);
-    static bool has_generatable_types(const intermediate_model& im);
+    static bool is_generatable(const meta_model::element& e);
+    static bool has_generatable_types(const meta_model::intermediate_model& im);
 
 public:
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/generalization_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/generalization_transform.hpp
index dd01d33f5..8cef6637b 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/generalization_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/generalization_transform.hpp
@@ -28,9 +28,9 @@
 #include <unordered_set>
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/annotations/types/type.hpp"
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
 
@@ -52,21 +52,21 @@ private:
 private:
     static std::unordered_set<std::string>
     update_and_collect_parent_ids(const helpers::indices& idx,
-        intermediate_model& im);
+        meta_model::intermediate_model& im);
 
     static void populate_properties_up_the_generalization_tree(
-        const type_group& tg, const yarn::name& leaf,
-        intermediate_model& im, yarn::object& o);
+        const type_group& tg, const meta_model::name& leaf,
+        meta_model::intermediate_model& im, meta_model::object& o);
 
     static void populate_generalizable_properties(const type_group& tg,
         const std::unordered_set<std::string>& parent_ids,
-        intermediate_model& im);
+        meta_model::intermediate_model& im);
 
-    static void sort_leaves(intermediate_model& im);
+    static void sort_leaves(meta_model::intermediate_model& im);
 
 public:
     static void transform(const context& ctx, const helpers::indices& idx,
-        intermediate_model& im);
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/initial_target_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/initial_target_chain.hpp
index a9e645bc9..2b17546e3 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/initial_target_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/initial_target_chain.hpp
@@ -26,7 +26,7 @@
 #endif
 
 #include <boost/filesystem/path.hpp>
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -53,7 +53,7 @@ public:
         const boost::filesystem::path& p);
 
 public:
-    static intermediate_model transform(const context& ctx);
+    static meta_model::intermediate_model transform(const context& ctx);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/language_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/language_transform.hpp
index 1cac0a70f..16ddf2385 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/language_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/language_transform.hpp
@@ -29,8 +29,8 @@
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/annotations/types/type.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -39,7 +39,7 @@ namespace transforms {
 
 class language_transform final {
 private:
-    static languages to_language(const std::string& s);
+    static meta_model::languages to_language(const std::string& s);
 
 private:
     struct type_group {
@@ -49,14 +49,16 @@ private:
 
     static type_group make_type_group(const annotations::type_repository& atrp);
 
-    static languages make_input_language(const type_group& tg,
+    static meta_model::languages make_input_language(const type_group& tg,
         const annotations::annotation& a);
 
-    static std::list<languages> make_output_languages(const type_group& tg,
+    static std::list<meta_model::languages>
+    make_output_languages(const type_group& tg,
         const annotations::annotation& a);
 
 public:
-    static void transform(const context& ctx, intermediate_model& m);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& m);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/mapping_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/mapping_transform.hpp
index 2af0d9d2a..a8e3c864b 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/mapping_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/mapping_transform.hpp
@@ -25,8 +25,8 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -35,9 +35,12 @@ namespace transforms {
 
 class mapping_transform final {
 public:
-    static bool is_mappable(const languages from, const languages to);
-    static intermediate_model transform(const context& ctx,
-        const intermediate_model& src, const languages to);
+    static bool is_mappable(const meta_model::languages from,
+        const meta_model::languages to);
+
+    static meta_model::intermediate_model transform(const context& ctx,
+        const meta_model::intermediate_model& src,
+        const meta_model::languages to);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/merge_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/merge_transform.hpp
index 08edbcd53..595c4a3a8 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/merge_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/merge_transform.hpp
@@ -28,8 +28,8 @@
 #include <list>
 #include <string>
 #include <unordered_map>
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -61,11 +61,13 @@ namespace transforms {
  */
 class merge_transform final {
 private:
-    static void merge(const intermediate_model& src, intermediate_model& dst);
+    static void merge(const meta_model::intermediate_model& src,
+        meta_model::intermediate_model& dst);
 
 public:
-    static intermediate_model transform(const intermediate_model& target,
-        const std::list<intermediate_model>& refs);
+    static meta_model::intermediate_model transform(
+        const meta_model::intermediate_model& target,
+        const std::list<meta_model::intermediate_model>& refs);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
index 9ee046bc0..352b7b5fd 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
@@ -26,9 +26,9 @@
 #endif
 
 #include <list>
-#include "dogen/yarn/types/model.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -37,14 +37,16 @@ namespace transforms {
 
 class model_assembly_chain final {
 private:
-    static intermediate_model obtain_merged_model(const context& ctx,
-        const languages l, const intermediate_model& target,
-        const std::list<intermediate_model>& refs);
+    static meta_model::intermediate_model
+    obtain_merged_model(const context& ctx, const meta_model::languages l,
+        const meta_model::intermediate_model& target,
+        const std::list<meta_model::intermediate_model>& refs);
 
 public:
-    static model transform(const context& ctx, const languages l,
-        const intermediate_model& target,
-        const std::list<intermediate_model>& refs);
+    static meta_model::model transform(const context& ctx,
+        const meta_model::languages l,
+        const meta_model::intermediate_model& target,
+        const std::list<meta_model::intermediate_model>& refs);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/model_generation_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/model_generation_chain.hpp
index 7c1253ec8..f1b544a1b 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/model_generation_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/model_generation_chain.hpp
@@ -29,7 +29,7 @@
 #include <iosfwd>
 #include "dogen/annotations/types/type.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
-#include "dogen/yarn/types/model.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -42,7 +42,7 @@ namespace transforms {
  */
 class model_generation_chain final {
 public:
-    static std::list<model> transform(const context& ctx);
+    static std::list<meta_model::model> transform(const context& ctx);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/modules_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/modules_transform.hpp
index ab0363dce..2166637e2 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/modules_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/modules_transform.hpp
@@ -25,7 +25,7 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -33,12 +33,12 @@ namespace transforms {
 
 class modules_transform final {
 private:
-    static void populate_root_module(intermediate_model& im);
-    static void create_missing_modules(intermediate_model& im);
-    static void expand_containing_module(intermediate_model& im);
+    static void populate_root_module(meta_model::intermediate_model& im);
+    static void create_missing_modules(meta_model::intermediate_model& im);
+    static void expand_containing_module(meta_model::intermediate_model& im);
 
 public:
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/origin_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/origin_transform.hpp
index e62c258ba..46bf81dfb 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/origin_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/origin_transform.hpp
@@ -27,7 +27,7 @@
 
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/annotations/types/type.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -43,13 +43,14 @@ private:
     static type_group make_type_group(const annotations::type_repository& atrp);
 
     static bool is_proxy_model(const type_group& tg,
-        const intermediate_model& im);
+        const meta_model::intermediate_model& im);
 
-    static origin_types compute_origin_types(const intermediate_model& im,
-        const bool is_proxy_model);
+    static meta_model::origin_types compute_origin_types(
+        const meta_model::intermediate_model& im, const bool is_proxy_model);
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/orm_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/orm_transform.hpp
index c06b04b2b..917977d5a 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/orm_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/orm_transform.hpp
@@ -32,14 +32,14 @@
 #include <boost/optional.hpp>
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/annotations/types/type.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
-#include "dogen/yarn/types/orm_model_properties.hpp"
-#include "dogen/yarn/types/orm_object_properties.hpp"
-#include "dogen/yarn/types/orm_module_properties.hpp"
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
-#include "dogen/yarn/types/orm_database_systems.hpp"
-#include "dogen/yarn/types/letter_cases.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_database_systems.hpp"
+#include "dogen/yarn/types/meta_model/letter_cases.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -48,14 +48,15 @@ namespace transforms {
 
 class orm_transform final {
 private:
-    static orm_database_systems to_orm_database_system(const std::string& s);
+    static meta_model::orm_database_systems
+    to_orm_database_system(const std::string& s);
 
-    std::vector<orm_database_systems>
+    std::vector<meta_model::orm_database_systems>
     static to_orm_database_system(const std::list<std::string>& vs);
 
-    static letter_cases to_letter_case(const std::string& s);
+    static meta_model::letter_cases to_letter_case(const std::string& s);
 
-    std::unordered_map<orm_database_systems, std::string>
+    std::unordered_map<meta_model::orm_database_systems, std::string>
     static make_type_overrides(const std::list<std::string> ls);
 
 private:
@@ -75,30 +76,38 @@ private:
 
     static type_group make_type_group(const annotations::type_repository& atrp);
 
-    static boost::optional<orm_model_properties> make_model_properties(
-        const type_group& tg, const annotations::annotation& a);
+    static boost::optional<meta_model::orm_model_properties>
+    make_model_properties(const type_group& tg,
+        const annotations::annotation& a);
 
     static void update_object_properties(const type_group& tg,
-        const annotations::annotation& a, orm_object_properties& cfg);
+        const annotations::annotation& a,
+        meta_model::orm_object_properties& cfg);
 
-    static boost::optional<orm_attribute_properties> make_attribute_properties(
+    static boost::optional<meta_model::orm_attribute_properties>
+    make_attribute_properties(
         const type_group& tg, const annotations::annotation& a);
 
     static void update_primitive_properties(const type_group& tg,
         const annotations::annotation& a,
-        orm_primitive_properties& cfg);
+        meta_model::orm_primitive_properties& cfg);
 
-    static boost::optional<orm_module_properties> make_module_properties(
-        const type_group& tg, const annotations::annotation& a);
+    static boost::optional<meta_model::orm_module_properties>
+    make_module_properties(const type_group& tg,
+        const annotations::annotation& a);
 
 private:
-    static void expand_objects(const type_group& tg, intermediate_model& im);
-    static void expand_concepts(const type_group& tg, intermediate_model& im);
-    static void expand_primitives(const type_group& tg, intermediate_model& im);
-    static void expand_modules(const type_group& tg, intermediate_model& im);
+    static void expand_objects(const type_group& tg,
+        meta_model::intermediate_model& im);
+    static void expand_concepts(const type_group& tg,
+        meta_model::intermediate_model& im);
+    static void expand_primitives(const type_group& tg,
+        meta_model::intermediate_model& im);
+    static void expand_modules(const type_group& tg,
+        meta_model::intermediate_model& im);
 
 public:
-    static void expand(const context& ctx, intermediate_model& im);
+    static void expand(const context& ctx, meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/parsing_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/parsing_transform.hpp
index c4bae44b7..c25eea7b5 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/parsing_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/parsing_transform.hpp
@@ -28,13 +28,13 @@
 #include <string>
 #include "dogen/annotations/types/type.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/name_tree.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/attribute.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -74,38 +74,41 @@ private:
         const annotations::annotation& a);
 
 private:
-    static std::string obtain_value_attribute_simple_name(const languages l);
+    static std::string
+    obtain_value_attribute_simple_name(const meta_model::languages l);
 
 private:
     /**
      * @brief Parses all attributes in the supplied attribute list..
      */
-    static void parse_attributes(const languages l,
-        std::list<attribute>& attrs);
+    static void parse_attributes(const meta_model::languages l,
+        std::list<meta_model::attribute>& attrs);
 
     /**
      * @brief Parses parent name in the supplied object.
      */
-    static void parse_parent(const type_group& tg, object& o);
+    static void parse_parent(const type_group& tg, meta_model::object& o);
 
     /**
      * @brief Parses the underlying element in the supplied
      * enumeration.
      */
-    static void parse_underlying_element(const type_group& tg, enumeration& e);
+    static void parse_underlying_element(const type_group& tg,
+        meta_model::enumeration& e);
 
     /**
      * @brief Parses underlying element in the supplied primitive.
      */
     static void parse_underlying_element(
-        const type_group& tg, const languages l, primitive& p);
+        const type_group& tg, const meta_model::languages l,
+        meta_model::primitive& p);
 
 public:
     /**
      * Execute the property expansion against the model.
      */
-    static void transform(const context& ctx, intermediate_model& m);
-
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& m);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/post_processing_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/post_processing_chain.hpp
index d3511a535..e98031b49 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/post_processing_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/post_processing_chain.hpp
@@ -25,7 +25,7 @@
 #pragma once
 #endif
 
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -34,7 +34,8 @@ namespace transforms {
 
 class post_processing_chain final {
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/pre_processing_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/pre_processing_chain.hpp
index 5f2487278..8c20f0453 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/pre_processing_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/pre_processing_chain.hpp
@@ -26,8 +26,8 @@
 #endif
 
 #include <unordered_set>
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -41,28 +41,29 @@ private:
      * languages set, false otherwise.
      */
     static bool is_language_relevant(
-        const std::unordered_set<languages>& relevant_languages,
-        const intermediate_model& im);
+        const std::unordered_set<meta_model::languages>& relevant_languages,
+        const meta_model::intermediate_model& im);
 
 private:
     /**
      * @brief Applies the first part of the pre-processing transforms.
      */
     static void apply_first_set_of_transforms(
-        const context& ctx, intermediate_model& im);
+        const context& ctx, meta_model::intermediate_model& im);
 
     /**
      * @brief Applies the second part of the pre-processing transforms.
      */
     static void apply_second_set_of_transforms(
-        const context& ctx, intermediate_model& im);
+        const context& ctx, meta_model::intermediate_model& im);
 
 public:
     /**
      * @brief Unconditionally applies all of the pre-processing
      * transforms to the supplied intermediate model.
      */
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Only pre-processes the model if its language is in the
@@ -75,9 +76,8 @@ public:
      * language.
      */
     static bool try_transform(const context& ctx,
-        const std::unordered_set<languages>& relevant_languages,
-        intermediate_model& im);
-
+        const std::unordered_set<meta_model::languages>& relevant_languages,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/primitives_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/primitives_transform.hpp
index 245488617..d0c262232 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/primitives_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/primitives_transform.hpp
@@ -30,8 +30,8 @@
 #include "dogen/annotations/types/type.hpp"
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -51,10 +51,12 @@ private:
     friend std::ostream& operator<<(std::ostream& s, const type_group& v);
 
     static type_group make_type_group(const annotations::type_repository& atrp);
-    static void populate_from_annotations(const type_group& tg, primitive& p);
+    static void populate_from_annotations(const type_group& tg,
+        meta_model::primitive& p);
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/references_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/references_chain.hpp
index 62320b714..db23e7c7b 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/references_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/references_chain.hpp
@@ -27,8 +27,8 @@
 
 #include <list>
 #include <unordered_set>
-#include "dogen/yarn/types/languages.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -37,12 +37,12 @@ namespace transforms {
 
 class references_chain final {
 private:
-    static std::unordered_set<languages>
-    obtain_relevant_languages(const intermediate_model& target);
+    static std::unordered_set<meta_model::languages>
+    obtain_relevant_languages(const meta_model::intermediate_model& target);
 
 public:
-    static std::list<intermediate_model>
-    transform(const context& ctx, const intermediate_model& target);
+    static std::list<meta_model::intermediate_model>
+    transform(const context& ctx, const meta_model::intermediate_model& target);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/resolver_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/resolver_transform.hpp
index e15b51a88..e07e4027e 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/resolver_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/resolver_transform.hpp
@@ -26,8 +26,8 @@
 #endif
 
 #include <string>
-#include "dogen/yarn/types/name.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 #include "dogen/yarn/types/helpers/indices.hpp"
 
@@ -37,7 +37,8 @@ namespace transforms {
 
 class resolver_transform final {
 public:
-    static void transform(const helpers::indices& idx, intermediate_model& im);
+    static void transform(const helpers::indices& idx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
index 8ac36b7ff..8caa0b486 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
@@ -27,10 +27,10 @@
 
 #include <list>
 #include <unordered_map>
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/hash/location_hash.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/hash/meta_model/location_hash.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -51,17 +51,19 @@ private:
 
 private:
     struct visitor_details {
-        visitor_details(const name& b) : base(b) { }
-        visitor_details(const name& b, const name& d) : base(b), derived(d) { }
+        visitor_details(const meta_model::name& b) : base(b) { }
+        visitor_details(const meta_model::name& b, const meta_model::name& d) :
+            base(b), derived(d) { }
 
-        name base;
-        boost::optional<name> derived;
+        meta_model::name base;
+        boost::optional<meta_model::name> derived;
     };
 
-    static std::unordered_map<location, std::list<name>>
-    bucket_leaves_by_location(const std::list<name>& leaves);
+    static std::unordered_map<meta_model::location, std::list<meta_model::name>>
+    bucket_leaves_by_location(const std::list<meta_model::name>& leaves);
 
-    static void add_visitor_to_model(const visitor& v, intermediate_model& im);
+    static void add_visitor_to_model(const meta_model::visitor& v,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Create a visitor for the object o.
@@ -71,43 +73,46 @@ private:
      *
      * @pre leaves must not be empty.
      */
-    static visitor create_visitor(const object& o, const location& l,
-        const origin_types ot, const std::list<name>& leaves);
+    static meta_model::visitor create_visitor(const meta_model::object& o,
+        const meta_model::location& l, const meta_model::origin_types ot,
+        const std::list<meta_model::name>& leaves);
 
     /**
      * @brief Injects an accept operation for the given visitor, to
      * the supplied object and all its leaves.
      */
-    static void update_visited_leaves(const std::list<name>& leaves,
-        const visitor_details& vd, intermediate_model& im);
+    static void update_visited_leaves(const std::list<meta_model::name>& leaves,
+        const visitor_details& vd, meta_model::intermediate_model& im);
 
     /**
      * @brief Performs the expansion of the visitable stereotype.
      */
-    static void expand_visitable(object& o, intermediate_model& im);
+    static void expand_visitable(meta_model::object& o,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Try to expand the stereotype as a concept. Returns true
      * on success, false otherwise.
      */
-    static bool try_expand_concept(
-        const std::string& s, object& o, const intermediate_model& im);
+    static bool try_expand_concept(const std::string& s, meta_model::object& o,
+        const meta_model::intermediate_model& im);
 
     /**
      * @brief Expands all stereotypes for the object.
      */
-    static void expand(object& o, intermediate_model& im);
+    static void expand(meta_model::object& o,
+        meta_model::intermediate_model& im);
 
     /**
      * @brief Expands all stereotypes for the primitive.
      */
-    static void expand(primitive& p);
+    static void expand(meta_model::primitive& p);
 
 public:
     /**
      * @brief Expands all stereotypes used in model.
      */
-    static void transform(intermediate_model& im);
+    static void transform(meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/type_params_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/type_params_transform.hpp
index 8d0661db2..8e51e029c 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/type_params_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/type_params_transform.hpp
@@ -28,8 +28,8 @@
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/types/type_repository.hpp"
 #include "dogen/annotations/types/type.hpp"
-#include "dogen/yarn/types/type_parameters.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 
 namespace dogen {
@@ -46,14 +46,16 @@ private:
 
     static type_group make_type_group(const annotations::type_repository& atrp);
 
-    static type_parameters make_type_parameters(const type_group& tg,
-        const annotations::annotation& a);
+    static meta_model::type_parameters make_type_parameters(
+        const type_group& tg, const annotations::annotation& a);
 
 private:
-    static void expand_type_parameters(const type_group& tg, object& o);
+    static void expand_type_parameters(const type_group& tg,
+        meta_model::object& o);
 
 public:
-    static void transform(const context& ctx, intermediate_model& im);
+    static void transform(const context& ctx,
+        meta_model::intermediate_model& im);
 };
 
 } } }
diff --git a/projects/yarn/src/hash/helpers/decomposition_result_hash.cpp b/projects/yarn/src/hash/helpers/decomposition_result_hash.cpp
index d328a56da..a15ce0a6d 100644
--- a/projects/yarn/src/hash/helpers/decomposition_result_hash.cpp
+++ b/projects/yarn/src/hash/helpers/decomposition_result_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/name_tree_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_tree_hash.hpp"
 #include "dogen/yarn/hash/helpers/decomposition_result_hash.hpp"
 
 namespace {
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_pair_std_string_dogen_yarn_name(const std::pair<std::string, dogen::yarn::name>& v) {
+inline std::size_t hash_std_pair_std_string_dogen_yarn_meta_model_name(const std::pair<std::string, dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
@@ -38,15 +38,15 @@ inline std::size_t hash_std_pair_std_string_dogen_yarn_name(const std::pair<std:
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_std_string_dogen_yarn_name(const std::list<std::pair<std::string, dogen::yarn::name> >& v) {
+inline std::size_t hash_std_list_std_pair_std_string_dogen_yarn_meta_model_name(const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_std_string_dogen_yarn_name(i));
+        combine(seed, hash_std_pair_std_string_dogen_yarn_meta_model_name(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_std_string_dogen_yarn_name_tree(const std::pair<std::string, dogen::yarn::name_tree>& v) {
+inline std::size_t hash_std_pair_std_string_dogen_yarn_meta_model_name_tree(const std::pair<std::string, dogen::yarn::meta_model::name_tree>& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
@@ -54,10 +54,10 @@ inline std::size_t hash_std_pair_std_string_dogen_yarn_name_tree(const std::pair
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_std_string_dogen_yarn_name_tree(const std::list<std::pair<std::string, dogen::yarn::name_tree> >& v) {
+inline std::size_t hash_std_list_std_pair_std_string_dogen_yarn_meta_model_name_tree(const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_std_string_dogen_yarn_name_tree(i));
+        combine(seed, hash_std_pair_std_string_dogen_yarn_meta_model_name_tree(i));
     }
     return seed;
 }
@@ -71,8 +71,8 @@ namespace helpers {
 std::size_t decomposition_result_hasher::hash(const decomposition_result& v) {
     std::size_t seed(0);
 
-    combine(seed, hash_std_list_std_pair_std_string_dogen_yarn_name(v.names()));
-    combine(seed, hash_std_list_std_pair_std_string_dogen_yarn_name_tree(v.name_trees()));
+    combine(seed, hash_std_list_std_pair_std_string_dogen_yarn_meta_model_name(v.names()));
+    combine(seed, hash_std_list_std_pair_std_string_dogen_yarn_meta_model_name_tree(v.name_trees()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/helpers/mapping_context_hash.cpp b/projects/yarn/src/hash/helpers/mapping_context_hash.cpp
index a9c2609dd..aacc877ee 100644
--- a/projects/yarn/src/hash/helpers/mapping_context_hash.cpp
+++ b/projects/yarn/src/hash/helpers/mapping_context_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_context_hash.hpp"
 
 namespace {
@@ -29,7 +29,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_name(const std::unordered_map<std::string, dogen::yarn::name>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_name(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -55,9 +55,9 @@ namespace helpers {
 std::size_t mapping_context_hasher::hash(const mapping_context& v) {
     std::size_t seed(0);
 
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_name(v.translations()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_name(v.translations()));
     combine(seed, hash_std_unordered_set_std_string(v.erasures()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_name(v.injections()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_name(v.injections()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/helpers/mapping_hash.cpp b/projects/yarn/src/hash/helpers/mapping_hash.cpp
index aea5b3fa0..6e647a87d 100644
--- a/projects/yarn/src/hash/helpers/mapping_hash.cpp
+++ b/projects/yarn/src/hash/helpers/mapping_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/languages_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_value_hash.hpp"
 
 namespace {
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_languages_dogen_yarn_helpers_mapping_value(const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_languages_dogen_yarn_helpers_mapping_value(const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -49,7 +49,7 @@ std::size_t mapping_hasher::hash(const mapping& v) {
     std::size_t seed(0);
 
     combine(seed, v.lam_id());
-    combine(seed, hash_std_unordered_map_dogen_yarn_languages_dogen_yarn_helpers_mapping_value(v.by_language()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_languages_dogen_yarn_helpers_mapping_value(v.by_language()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/helpers/mapping_set_hash.cpp b/projects/yarn/src/hash/helpers/mapping_set_hash.cpp
index 16a29d710..62c9f0631 100644
--- a/projects/yarn/src/hash/helpers/mapping_set_hash.cpp
+++ b/projects/yarn/src/hash/helpers/mapping_set_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_set_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_name(const std::unordered_map<std::string, dogen::yarn::name>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_name(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -39,11 +39,11 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_name(const std::
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, hash_std_unordered_map_std_string_dogen_yarn_name(i.second));
+        combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_name(i.second));
     }
     return seed;
 }
@@ -65,7 +65,7 @@ inline std::size_t hash_std_unordered_set_std_string(const std::unordered_set<st
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_languages_std_unordered_set_std_string(const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_set_std_string(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -84,10 +84,10 @@ std::size_t mapping_set_hasher::hash(const mapping_set& v) {
     std::size_t seed(0);
 
     combine(seed, v.name());
-    combine(seed, hash_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(v.by_language_agnostic_id()));
-    combine(seed, hash_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(v.by_upsilon_id()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(v.by_language_agnostic_id()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(v.by_upsilon_id()));
     combine(seed, hash_std_unordered_map_std_string_std_string(v.upsilon_id_to_lam_id()));
-    combine(seed, hash_std_unordered_map_dogen_yarn_languages_std_unordered_set_std_string(v.erasures_by_language()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_set_std_string(v.erasures_by_language()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/helpers/mapping_value_hash.cpp b/projects/yarn/src/hash/helpers/mapping_value_hash.cpp
index e80fa566f..29f27bb92 100644
--- a/projects/yarn/src/hash/helpers/mapping_value_hash.cpp
+++ b/projects/yarn/src/hash/helpers/mapping_value_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_value_hash.hpp"
 #include "dogen/yarn/hash/helpers/mapping_actions_hash.hpp"
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dogen::yarn::name>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_name(const boost::optional<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -40,7 +40,7 @@ inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dog
     return seed;
 }
 
-inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::name>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_name(const std::list<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -58,8 +58,8 @@ std::size_t mapping_value_hasher::hash(const mapping_value& v) {
     std::size_t seed(0);
 
     combine(seed, v.mapping_action());
-    combine(seed, hash_boost_optional_dogen_yarn_name(v.default_name()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.aliases()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_name(v.default_name()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.aliases()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/helpers/node_hash.cpp b/projects/yarn/src/hash/helpers/node_hash.cpp
index f6b120750..03754fd96 100644
--- a/projects/yarn/src/hash/helpers/node_hash.cpp
+++ b/projects/yarn/src/hash/helpers/node_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
 #include "dogen/yarn/hash/helpers/node_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 
 namespace {
 
diff --git a/projects/yarn/src/hash/artefact_properties_hash.cpp b/projects/yarn/src/hash/meta_model/artefact_properties_hash.cpp
similarity index 92%
rename from projects/yarn/src/hash/artefact_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/artefact_properties_hash.cpp
index 02a070812..2d109faa6 100644
--- a/projects/yarn/src/hash/artefact_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/artefact_properties_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/formatting_styles_hash.hpp"
-#include "dogen/yarn/hash/artefact_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/formatting_styles_hash.hpp"
+#include "dogen/yarn/hash/meta_model/artefact_properties_hash.hpp"
 
 namespace {
 
@@ -47,6 +47,7 @@ inline std::size_t hash_std_list_std_string(const std::list<std::string>& v) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t artefact_properties_hasher::hash(const artefact_properties& v) {
     std::size_t seed(0);
@@ -61,4 +62,4 @@ std::size_t artefact_properties_hasher::hash(const artefact_properties& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/attribute_hash.cpp b/projects/yarn/src/hash/meta_model/attribute_hash.cpp
similarity index 75%
rename from projects/yarn/src/hash/attribute_hash.cpp
rename to projects/yarn/src/hash/meta_model/attribute_hash.cpp
index 5443d6bef..4f66448f4 100644
--- a/projects/yarn/src/hash/attribute_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/attribute_hash.cpp
@@ -18,11 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/attribute_hash.hpp"
-#include "dogen/yarn/hash/name_tree_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/annotations/hash/annotation_hash.hpp"
-#include "dogen/yarn/hash/orm_attribute_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/attribute_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_tree_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp"
 
 namespace {
 
@@ -32,7 +32,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_orm_attribute_properties(const boost::optional<dogen::yarn::orm_attribute_properties>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_attribute_properties(const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -46,6 +46,7 @@ inline std::size_t hash_boost_optional_dogen_yarn_orm_attribute_properties(const
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t attribute_hasher::hash(const attribute& v) {
     std::size_t seed(0);
@@ -57,9 +58,9 @@ std::size_t attribute_hasher::hash(const attribute& v) {
     combine(seed, v.parsed_type());
     combine(seed, v.is_immutable());
     combine(seed, v.is_fluent());
-    combine(seed, hash_boost_optional_dogen_yarn_orm_attribute_properties(v.orm_properties()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_attribute_properties(v.orm_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/builtin_hash.cpp b/projects/yarn/src/hash/meta_model/builtin_hash.cpp
similarity index 86%
rename from projects/yarn/src/hash/builtin_hash.cpp
rename to projects/yarn/src/hash/meta_model/builtin_hash.cpp
index e30fd8937..024962f4c 100644
--- a/projects/yarn/src/hash/builtin_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/builtin_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/builtin_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/builtin_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
 
 namespace {
 
@@ -33,11 +33,12 @@ inline void combine(std::size_t& seed, const HashableType& value) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t builtin_hasher::hash(const builtin& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
     combine(seed, v.is_default_enumeration_type());
     combine(seed, v.is_floating_point());
@@ -47,4 +48,4 @@ std::size_t builtin_hasher::hash(const builtin& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/concept_hash.cpp b/projects/yarn/src/hash/meta_model/concept_hash.cpp
similarity index 57%
rename from projects/yarn/src/hash/concept_hash.cpp
rename to projects/yarn/src/hash/meta_model/concept_hash.cpp
index 7d1a76ca4..1c0f190fc 100644
--- a/projects/yarn/src/hash/concept_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/concept_hash.cpp
@@ -18,10 +18,10 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/concept_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/attribute_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/concept_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/attribute_hash.hpp"
 
 namespace {
 
@@ -31,7 +31,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_list_dogen_yarn_attribute(const std::list<dogen::yarn::attribute>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_attribute(const std::list<dogen::yarn::meta_model::attribute>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -39,16 +39,16 @@ inline std::size_t hash_std_list_dogen_yarn_attribute(const std::list<dogen::yar
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, hash_std_list_dogen_yarn_attribute(i.second));
+        combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::name>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_name(const std::list<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -60,21 +60,22 @@ inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::na
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t concept_hasher::hash(const concept& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
-    combine(seed, hash_std_list_dogen_yarn_attribute(v.all_attributes()));
-    combine(seed, hash_std_list_dogen_yarn_attribute(v.local_attributes()));
-    combine(seed, hash_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(v.inherited_attributes()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(v.all_attributes()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(v.local_attributes()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(v.inherited_attributes()));
     combine(seed, v.is_immutable());
     combine(seed, v.is_fluent());
-    combine(seed, hash_std_list_dogen_yarn_name(v.refines()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.refines()));
     combine(seed, v.is_child());
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/element_hash.cpp b/projects/yarn/src/hash/meta_model/element_hash.cpp
similarity index 80%
rename from projects/yarn/src/hash/element_hash.cpp
rename to projects/yarn/src/hash/meta_model/element_hash.cpp
index f0d04deba..4139e6911 100644
--- a/projects/yarn/src/hash/element_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/element_hash.cpp
@@ -18,11 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/origin_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/annotations/hash/annotation_hash.hpp"
-#include "dogen/yarn/hash/element_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/origin_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_properties_hash.hpp"
 
 namespace {
 
@@ -32,7 +32,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dogen::yarn::name>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_name(const boost::optional<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -54,6 +54,7 @@ inline std::size_t hash_std_vector_std_string(const std::vector<std::string>& v)
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t element_hasher::hash(const element& v) {
     std::size_t seed(0);
@@ -62,7 +63,7 @@ std::size_t element_hasher::hash(const element& v) {
     combine(seed, v.annotation());
     combine(seed, v.name());
     combine(seed, v.origin_type());
-    combine(seed, hash_boost_optional_dogen_yarn_name(v.contained_by()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_name(v.contained_by()));
     combine(seed, v.in_global_module());
     combine(seed, hash_std_vector_std_string(v.stereotypes()));
     combine(seed, v.is_element_extension());
@@ -71,4 +72,4 @@ std::size_t element_hasher::hash(const element& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/element_properties_hash.cpp b/projects/yarn/src/hash/meta_model/element_properties_hash.cpp
similarity index 79%
rename from projects/yarn/src/hash/element_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/element_properties_hash.cpp
index 3ddacbe67..04ec795fb 100644
--- a/projects/yarn/src/hash/element_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/element_properties_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/element_properties_hash.hpp"
-#include "dogen/yarn/hash/artefact_properties_hash.hpp"
 #include "dogen/formatters/hash/decoration_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/artefact_properties_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_artefact_properties(const std::unordered_map<std::string, dogen::yarn::artefact_properties>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_artefact_properties(const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -43,14 +43,15 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_artefact_propert
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t element_properties_hasher::hash(const element_properties& v) {
     std::size_t seed(0);
 
     combine(seed, v.decoration_properties());
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_artefact_properties(v.artefact_properties()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_artefact_properties(v.artefact_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/enumeration_hash.cpp b/projects/yarn/src/hash/meta_model/enumeration_hash.cpp
similarity index 74%
rename from projects/yarn/src/hash/enumeration_hash.cpp
rename to projects/yarn/src/hash/meta_model/enumeration_hash.cpp
index 49e1e2319..f3d9451d1 100644
--- a/projects/yarn/src/hash/enumeration_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/enumeration_hash.cpp
@@ -18,10 +18,10 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/enumerator_hash.hpp"
-#include "dogen/yarn/hash/enumeration_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumerator_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumeration_hash.hpp"
 
 namespace {
 
@@ -31,7 +31,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_vector_dogen_yarn_enumerator(const std::vector<dogen::yarn::enumerator>& v) {
+inline std::size_t hash_std_vector_dogen_yarn_meta_model_enumerator(const std::vector<dogen::yarn::meta_model::enumerator>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -43,14 +43,15 @@ inline std::size_t hash_std_vector_dogen_yarn_enumerator(const std::vector<dogen
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t enumeration_hasher::hash(const enumeration& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
     combine(seed, v.underlying_element());
-    combine(seed, hash_std_vector_dogen_yarn_enumerator(v.enumerators()));
+    combine(seed, hash_std_vector_dogen_yarn_meta_model_enumerator(v.enumerators()));
     combine(seed, v.use_implementation_defined_underlying_element());
     combine(seed, v.use_implementation_defined_enumerator_values());
     combine(seed, v.add_invalid_enumerator());
@@ -58,4 +59,4 @@ std::size_t enumeration_hasher::hash(const enumeration& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/enumerator_hash.cpp b/projects/yarn/src/hash/meta_model/enumerator_hash.cpp
similarity index 91%
rename from projects/yarn/src/hash/enumerator_hash.cpp
rename to projects/yarn/src/hash/meta_model/enumerator_hash.cpp
index b714cd023..9a96e87bd 100644
--- a/projects/yarn/src/hash/enumerator_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/enumerator_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/enumerator_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
 #include "dogen/annotations/hash/annotation_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumerator_hash.hpp"
 
 namespace {
 
@@ -34,6 +34,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t enumerator_hasher::hash(const enumerator& v) {
     std::size_t seed(0);
@@ -46,4 +47,4 @@ std::size_t enumerator_hasher::hash(const enumerator& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/exception_hash.cpp b/projects/yarn/src/hash/meta_model/exception_hash.cpp
similarity index 85%
rename from projects/yarn/src/hash/exception_hash.cpp
rename to projects/yarn/src/hash/meta_model/exception_hash.cpp
index 854de295b..aaa08a673 100644
--- a/projects/yarn/src/hash/exception_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/exception_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/exception_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/exception_hash.hpp"
 
 namespace {
 
@@ -33,12 +33,13 @@ inline void combine(std::size_t& seed, const HashableType& value) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t exception_hasher::hash(const exception& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/intermediate_model_hash.cpp b/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
similarity index 52%
rename from projects/yarn/src/hash/intermediate_model_hash.cpp
rename to projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
index 6bb960007..c718aac0b 100644
--- a/projects/yarn/src/hash/intermediate_model_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
@@ -18,21 +18,21 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/module_hash.hpp"
-#include "dogen/yarn/hash/object_hash.hpp"
-#include "dogen/yarn/hash/builtin_hash.hpp"
-#include "dogen/yarn/hash/concept_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/visitor_hash.hpp"
-#include "dogen/yarn/hash/exception_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/hash/primitive_hash.hpp"
-#include "dogen/yarn/hash/enumeration_hash.hpp"
-#include "dogen/yarn/hash/origin_types_hash.hpp"
-#include "dogen/yarn/hash/intermediate_model_hash.hpp"
-#include "dogen/yarn/hash/orm_model_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/module_hash.hpp"
+#include "dogen/yarn/hash/meta_model/object_hash.hpp"
+#include "dogen/yarn/hash/meta_model/builtin_hash.hpp"
+#include "dogen/yarn/hash/meta_model/concept_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/visitor_hash.hpp"
+#include "dogen/yarn/hash/meta_model/exception_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/primitive_hash.hpp"
 #include "dogen/annotations/hash/scribble_group_hash.hpp"
+#include "dogen/yarn/hash/meta_model/enumeration_hash.hpp"
+#include "dogen/yarn/hash/meta_model/origin_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/intermediate_model_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp"
 
 namespace {
 
@@ -42,7 +42,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_name_dogen_yarn_origin_types(const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -51,7 +51,7 @@ inline std::size_t hash_std_unordered_map_dogen_yarn_name_dogen_yarn_origin_type
     return seed;
 }
 
-inline std::size_t hash_std_unordered_set_dogen_yarn_name(const std::unordered_set<dogen::yarn::name>& v) {
+inline std::size_t hash_std_unordered_set_dogen_yarn_meta_model_name(const std::unordered_set<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -59,7 +59,7 @@ inline std::size_t hash_std_unordered_set_dogen_yarn_name(const std::unordered_s
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_module(const std::unordered_map<std::string, dogen::yarn::module>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_module(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -68,7 +68,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_module(const std
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_concept(const std::unordered_map<std::string, dogen::yarn::concept>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_concept(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -77,7 +77,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_concept(const st
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_builtin(const std::unordered_map<std::string, dogen::yarn::builtin>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -86,7 +86,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_builtin(const st
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_enumeration(const std::unordered_map<std::string, dogen::yarn::enumeration>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -95,7 +95,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_enumeration(cons
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_primitive(const std::unordered_map<std::string, dogen::yarn::primitive>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -104,7 +104,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_primitive(const
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_object(const std::unordered_map<std::string, dogen::yarn::object>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_object(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -113,7 +113,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_object(const std
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_exception(const std::unordered_map<std::string, dogen::yarn::exception>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_exception(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -122,7 +122,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_exception(const
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_visitor(const std::unordered_map<std::string, dogen::yarn::visitor>& v) {
+inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -131,21 +131,21 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_visitor(const st
     return seed;
 }
 
-inline std::size_t hash_boost_shared_ptr_dogen_yarn_element(const boost::shared_ptr<dogen::yarn::element>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_element(const boost::shared_ptr<dogen::yarn::meta_model::element>& v) {
     std::size_t seed(0);
     combine(seed, *v);
     return seed;
 }
 
-inline std::size_t hash_std_list_boost_shared_ptr_dogen_yarn_element(const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
+inline std::size_t hash_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_boost_shared_ptr_dogen_yarn_element(i));
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_element(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_list_dogen_yarn_languages(const std::list<dogen::yarn::languages>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_languages(const std::list<dogen::yarn::meta_model::languages>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -162,7 +162,7 @@ inline std::size_t hash_std_unordered_map_std_string_dogen_annotations_scribble_
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_orm_model_properties(const boost::optional<dogen::yarn::orm_model_properties>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_model_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -176,31 +176,32 @@ inline std::size_t hash_boost_optional_dogen_yarn_orm_model_properties(const boo
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t intermediate_model_hasher::hash(const intermediate_model& v) {
     std::size_t seed(0);
 
     combine(seed, v.name());
     combine(seed, v.origin_type());
-    combine(seed, hash_std_unordered_map_dogen_yarn_name_dogen_yarn_origin_types(v.references()));
-    combine(seed, hash_std_unordered_set_dogen_yarn_name(v.leaves()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_module(v.modules()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_concept(v.concepts()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_builtin(v.builtins()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_enumeration(v.enumerations()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_primitive(v.primitives()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_object(v.objects()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_exception(v.exceptions()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_visitor(v.visitors()));
-    combine(seed, hash_std_list_boost_shared_ptr_dogen_yarn_element(v.injected_elements()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(v.references()));
+    combine(seed, hash_std_unordered_set_dogen_yarn_meta_model_name(v.leaves()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_module(v.modules()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_concept(v.concepts()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(v.builtins()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(v.enumerations()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(v.primitives()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_object(v.objects()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_exception(v.exceptions()));
+    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(v.visitors()));
+    combine(seed, hash_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(v.injected_elements()));
     combine(seed, v.has_generatable_types());
     combine(seed, v.root_module());
     combine(seed, v.input_language());
-    combine(seed, hash_std_list_dogen_yarn_languages(v.output_languages()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_languages(v.output_languages()));
     combine(seed, hash_std_unordered_map_std_string_dogen_annotations_scribble_group(v.scribble_groups()));
-    combine(seed, hash_boost_optional_dogen_yarn_orm_model_properties(v.orm_properties()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_model_properties(v.orm_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/location_hash.cpp b/projects/yarn/src/hash/meta_model/location_hash.cpp
similarity index 95%
rename from projects/yarn/src/hash/location_hash.cpp
rename to projects/yarn/src/hash/meta_model/location_hash.cpp
index 82a678ed9..84fee670a 100644
--- a/projects/yarn/src/hash/location_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/location_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/location_hash.hpp"
+#include "dogen/yarn/hash/meta_model/location_hash.hpp"
 
 namespace {
 
@@ -40,6 +40,7 @@ inline std::size_t hash_std_list_std_string(const std::list<std::string>& v) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t location_hasher::hash(const location& v) {
     std::size_t seed(0);
@@ -52,4 +53,4 @@ std::size_t location_hasher::hash(const location& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/model_hash.cpp b/projects/yarn/src/hash/meta_model/model_hash.cpp
similarity index 63%
rename from projects/yarn/src/hash/model_hash.cpp
rename to projects/yarn/src/hash/meta_model/model_hash.cpp
index 2f8d93a79..0a2cd979a 100644
--- a/projects/yarn/src/hash/model_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/model_hash.cpp
@@ -18,12 +18,12 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/model_hash.hpp"
-#include "dogen/yarn/hash/module_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/hash/orm_model_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/model_hash.hpp"
+#include "dogen/yarn/hash/meta_model/module_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp"
 
 namespace {
 
@@ -33,16 +33,16 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_shared_ptr_dogen_yarn_element(const boost::shared_ptr<dogen::yarn::element>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_element(const boost::shared_ptr<dogen::yarn::meta_model::element>& v) {
     std::size_t seed(0);
     combine(seed, *v);
     return seed;
 }
 
-inline std::size_t hash_std_vector_boost_shared_ptr_dogen_yarn_element(const std::vector<boost::shared_ptr<dogen::yarn::element> >& v) {
+inline std::size_t hash_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_boost_shared_ptr_dogen_yarn_element(i));
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_element(i));
     }
     return seed;
 }
@@ -55,7 +55,7 @@ inline std::size_t hash_std_unordered_set_std_string(const std::unordered_set<st
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_orm_model_properties(const boost::optional<dogen::yarn::orm_model_properties>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_model_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -69,20 +69,21 @@ inline std::size_t hash_boost_optional_dogen_yarn_orm_model_properties(const boo
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t model_hasher::hash(const model& v) {
     std::size_t seed(0);
 
     combine(seed, v.name());
-    combine(seed, hash_std_vector_boost_shared_ptr_dogen_yarn_element(v.elements()));
+    combine(seed, hash_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(v.elements()));
     combine(seed, v.root_module());
     combine(seed, hash_std_unordered_set_std_string(v.module_ids()));
     combine(seed, v.has_generatable_types());
     combine(seed, v.input_language());
     combine(seed, v.output_language());
-    combine(seed, hash_boost_optional_dogen_yarn_orm_model_properties(v.orm_properties()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_model_properties(v.orm_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/module_hash.cpp b/projects/yarn/src/hash/meta_model/module_hash.cpp
similarity index 75%
rename from projects/yarn/src/hash/module_hash.cpp
rename to projects/yarn/src/hash/meta_model/module_hash.cpp
index 52c1b4c46..6d4c56acc 100644
--- a/projects/yarn/src/hash/module_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/module_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/module_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/orm_module_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/module_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp"
 
 namespace {
 
@@ -38,7 +38,7 @@ inline std::size_t hash_std_list_std_string(const std::list<std::string>& v) {
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_orm_module_properties(const boost::optional<dogen::yarn::orm_module_properties>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_module_properties(const boost::optional<dogen::yarn::meta_model::orm_module_properties>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -52,18 +52,19 @@ inline std::size_t hash_boost_optional_dogen_yarn_orm_module_properties(const bo
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t module_hasher::hash(const module& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
     combine(seed, hash_std_list_std_string(v.members()));
     combine(seed, v.is_root());
     combine(seed, v.is_global_module());
-    combine(seed, hash_boost_optional_dogen_yarn_orm_module_properties(v.orm_properties()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_module_properties(v.orm_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/name_hash.cpp b/projects/yarn/src/hash/meta_model/name_hash.cpp
similarity index 77%
rename from projects/yarn/src/hash/name_hash.cpp
rename to projects/yarn/src/hash/meta_model/name_hash.cpp
index 0e1cc2d1a..a4d66ce94 100644
--- a/projects/yarn/src/hash/name_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/name_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/location_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/location_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::size_t hash_std_map_dogen_yarn_meta_model_languages_std_string(const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -43,17 +43,18 @@ inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<d
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t name_hasher::hash(const name& v) {
     std::size_t seed(0);
 
     combine(seed, v.id());
     combine(seed, v.simple());
-    combine(seed, hash_std_map_dogen_yarn_languages_std_string(v.qualified()));
+    combine(seed, hash_std_map_dogen_yarn_meta_model_languages_std_string(v.qualified()));
     combine(seed, v.location());
     combine(seed, v.identifiable());
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/name_tree_hash.cpp b/projects/yarn/src/hash/meta_model/name_tree_hash.cpp
similarity index 73%
rename from projects/yarn/src/hash/name_tree_hash.cpp
rename to projects/yarn/src/hash/meta_model/name_tree_hash.cpp
index 6f58b3243..377f42db7 100644
--- a/projects/yarn/src/hash/name_tree_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/name_tree_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/languages_hash.hpp"
-#include "dogen/yarn/hash/name_tree_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/languages_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_tree_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_list_dogen_yarn_name_tree(const std::list<dogen::yarn::name_tree>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_name_tree(const std::list<dogen::yarn::meta_model::name_tree>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -38,7 +38,7 @@ inline std::size_t hash_std_list_dogen_yarn_name_tree(const std::list<dogen::yar
     return seed;
 }
 
-inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::size_t hash_std_map_dogen_yarn_meta_model_languages_std_string(const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -51,15 +51,16 @@ inline std::size_t hash_std_map_dogen_yarn_languages_std_string(const std::map<d
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t name_tree_hasher::hash(const name_tree& v) {
     std::size_t seed(0);
 
     combine(seed, v.current());
-    combine(seed, hash_std_list_dogen_yarn_name_tree(v.children()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name_tree(v.children()));
     combine(seed, v.are_children_opaque());
     combine(seed, v.is_circular_dependency());
-    combine(seed, hash_std_map_dogen_yarn_languages_std_string(v.qualified()));
+    combine(seed, hash_std_map_dogen_yarn_meta_model_languages_std_string(v.qualified()));
     combine(seed, v.identifiable());
     combine(seed, v.is_current_simple_type());
     combine(seed, v.is_floating_point());
@@ -67,4 +68,4 @@ std::size_t name_tree_hasher::hash(const name_tree& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/meta_model/object_hash.cpp b/projects/yarn/src/hash/meta_model/object_hash.cpp
new file mode 100644
index 000000000..24d946ff6
--- /dev/null
+++ b/projects/yarn/src/hash/meta_model/object_hash.cpp
@@ -0,0 +1,124 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/object_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/attribute_hash.hpp"
+#include "dogen/yarn/hash/meta_model/object_types_hash.hpp"
+#include "dogen/yarn/hash/meta_model/type_parameters_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value) {
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+inline std::size_t hash_std_list_dogen_yarn_meta_model_attribute(const std::list<dogen::yarn::meta_model::attribute>& v) {
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i.first);
+        combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(i.second));
+    }
+    return seed;
+}
+
+inline std::size_t hash_std_list_dogen_yarn_meta_model_name(const std::list<dogen::yarn::meta_model::name>& v) {
+    std::size_t seed(0);
+    for (const auto i : v) {
+        combine(seed, i);
+    }
+    return seed;
+}
+
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_name(const boost::optional<dogen::yarn::meta_model::name>& v) {
+    std::size_t seed(0);
+
+    if (!v)
+        return seed;
+
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_object_properties(const boost::optional<dogen::yarn::meta_model::orm_object_properties>& v) {
+    std::size_t seed(0);
+
+    if (!v)
+        return seed;
+
+    combine(seed, *v);
+    return seed;
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+std::size_t object_hasher::hash(const object& v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
+
+    combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(v.all_attributes()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_attribute(v.local_attributes()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(v.inherited_attributes()));
+    combine(seed, v.is_immutable());
+    combine(seed, v.is_fluent());
+    combine(seed, v.is_parent());
+    combine(seed, v.is_child());
+    combine(seed, v.is_leaf());
+    combine(seed, v.is_final());
+    combine(seed, v.is_abstract());
+    combine(seed, v.in_inheritance_relationship());
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.root_parents()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.parents()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.leaves()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.transparent_associations()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.opaque_associations()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_name(v.base_visitor()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_name(v.derived_visitor()));
+    combine(seed, v.is_visitation_root());
+    combine(seed, v.is_visitation_leaf());
+    combine(seed, v.type_parameters());
+    combine(seed, v.object_type());
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.modeled_concepts()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.associative_container_keys()));
+    combine(seed, v.provides_opaqueness());
+    combine(seed, v.can_be_primitive_underlier());
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_object_properties(v.orm_properties()));
+
+    return seed;
+}
+
+} } }
diff --git a/projects/yarn/src/hash/orm_attribute_properties_hash.cpp b/projects/yarn/src/hash/meta_model/orm_attribute_properties_hash.cpp
similarity index 78%
rename from projects/yarn/src/hash/orm_attribute_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/orm_attribute_properties_hash.cpp
index 3d5afae87..90098c7df 100644
--- a/projects/yarn/src/hash/orm_attribute_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/orm_attribute_properties_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/orm_database_systems_hash.hpp"
-#include "dogen/yarn/hash/orm_attribute_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_attribute_properties_hash.hpp"
 
 namespace {
 
@@ -39,7 +39,7 @@ inline std::size_t hash_boost_optional_bool(const boost::optional<bool>& v) {
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_dogen_yarn_orm_database_systems_std_string(const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& v) {
+inline std::size_t hash_std_unordered_map_dogen_yarn_meta_model_orm_database_systems_std_string(const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
@@ -52,6 +52,7 @@ inline std::size_t hash_std_unordered_map_dogen_yarn_orm_database_systems_std_st
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t orm_attribute_properties_hasher::hash(const orm_attribute_properties& v) {
     std::size_t seed(0);
@@ -59,10 +60,10 @@ std::size_t orm_attribute_properties_hasher::hash(const orm_attribute_properties
     combine(seed, v.column_name());
     combine(seed, v.is_primary_key());
     combine(seed, hash_boost_optional_bool(v.is_nullable()));
-    combine(seed, hash_std_unordered_map_dogen_yarn_orm_database_systems_std_string(v.type_overrides()));
+    combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_orm_database_systems_std_string(v.type_overrides()));
     combine(seed, v.is_composite());
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/orm_model_properties_hash.cpp b/projects/yarn/src/hash/meta_model/orm_model_properties_hash.cpp
similarity index 68%
rename from projects/yarn/src/hash/orm_model_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/orm_model_properties_hash.cpp
index 9edcc894a..82655df73 100644
--- a/projects/yarn/src/hash/orm_model_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/orm_model_properties_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/letter_cases_hash.hpp"
-#include "dogen/yarn/hash/orm_database_systems_hash.hpp"
-#include "dogen/yarn/hash/orm_model_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/letter_cases_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_database_systems_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_model_properties_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_vector_dogen_yarn_orm_database_systems(const std::vector<dogen::yarn::orm_database_systems>& v) {
+inline std::size_t hash_std_vector_dogen_yarn_meta_model_orm_database_systems(const std::vector<dogen::yarn::meta_model::orm_database_systems>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -38,7 +38,7 @@ inline std::size_t hash_std_vector_dogen_yarn_orm_database_systems(const std::ve
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_letter_cases(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -52,15 +52,16 @@ inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::opti
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t orm_model_properties_hasher::hash(const orm_model_properties& v) {
     std::size_t seed(0);
 
-    combine(seed, hash_std_vector_dogen_yarn_orm_database_systems(v.database_systems()));
+    combine(seed, hash_std_vector_dogen_yarn_meta_model_orm_database_systems(v.database_systems()));
     combine(seed, v.schema_name());
-    combine(seed, hash_boost_optional_dogen_yarn_letter_cases(v.letter_case()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_letter_cases(v.letter_case()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/orm_module_properties_hash.cpp b/projects/yarn/src/hash/meta_model/orm_module_properties_hash.cpp
similarity index 93%
rename from projects/yarn/src/hash/orm_module_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/orm_module_properties_hash.cpp
index 6f25491c7..394b22327 100644
--- a/projects/yarn/src/hash/orm_module_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/orm_module_properties_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/orm_module_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_module_properties_hash.hpp"
 
 namespace {
 
@@ -32,6 +32,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t orm_module_properties_hasher::hash(const orm_module_properties& v) {
     std::size_t seed(0);
@@ -40,4 +41,4 @@ std::size_t orm_module_properties_hasher::hash(const orm_module_properties& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/orm_object_properties_hash.cpp b/projects/yarn/src/hash/meta_model/orm_object_properties_hash.cpp
similarity index 79%
rename from projects/yarn/src/hash/orm_object_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/orm_object_properties_hash.cpp
index 8cda33503..c80d93e7a 100644
--- a/projects/yarn/src/hash/orm_object_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/orm_object_properties_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/letter_cases_hash.hpp"
-#include "dogen/yarn/hash/orm_object_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/letter_cases_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_object_properties_hash.hpp"
 
 namespace {
 
@@ -29,7 +29,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_letter_cases(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -43,6 +43,7 @@ inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::opti
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t orm_object_properties_hasher::hash(const orm_object_properties& v) {
     std::size_t seed(0);
@@ -52,9 +53,9 @@ std::size_t orm_object_properties_hasher::hash(const orm_object_properties& v) {
     combine(seed, v.table_name());
     combine(seed, v.is_value());
     combine(seed, v.has_primary_key());
-    combine(seed, hash_boost_optional_dogen_yarn_letter_cases(v.letter_case()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_letter_cases(v.letter_case()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/orm_primitive_properties_hash.cpp b/projects/yarn/src/hash/meta_model/orm_primitive_properties_hash.cpp
similarity index 78%
rename from projects/yarn/src/hash/orm_primitive_properties_hash.cpp
rename to projects/yarn/src/hash/meta_model/orm_primitive_properties_hash.cpp
index 76312f081..4eddea466 100644
--- a/projects/yarn/src/hash/orm_primitive_properties_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/orm_primitive_properties_hash.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/letter_cases_hash.hpp"
-#include "dogen/yarn/hash/orm_primitive_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/letter_cases_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp"
 
 namespace {
 
@@ -29,7 +29,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_letter_cases(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -43,15 +43,16 @@ inline std::size_t hash_boost_optional_dogen_yarn_letter_cases(const boost::opti
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t orm_primitive_properties_hasher::hash(const orm_primitive_properties& v) {
     std::size_t seed(0);
 
     combine(seed, v.generate_mapping());
     combine(seed, v.schema_name());
-    combine(seed, hash_boost_optional_dogen_yarn_letter_cases(v.letter_case()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_letter_cases(v.letter_case()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/primitive_hash.cpp b/projects/yarn/src/hash/meta_model/primitive_hash.cpp
similarity index 70%
rename from projects/yarn/src/hash/primitive_hash.cpp
rename to projects/yarn/src/hash/meta_model/primitive_hash.cpp
index 561cde971..b96b10242 100644
--- a/projects/yarn/src/hash/primitive_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/primitive_hash.cpp
@@ -18,10 +18,10 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/attribute_hash.hpp"
-#include "dogen/yarn/hash/primitive_hash.hpp"
-#include "dogen/yarn/hash/orm_primitive_properties_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/attribute_hash.hpp"
+#include "dogen/yarn/hash/meta_model/primitive_hash.hpp"
+#include "dogen/yarn/hash/meta_model/orm_primitive_properties_hash.hpp"
 
 namespace {
 
@@ -31,7 +31,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_orm_primitive_properties(const boost::optional<dogen::yarn::orm_primitive_properties>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_orm_primitive_properties(const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -45,19 +45,20 @@ inline std::size_t hash_boost_optional_dogen_yarn_orm_primitive_properties(const
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t primitive_hasher::hash(const primitive& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
     combine(seed, v.is_nullable());
     combine(seed, v.value_attribute());
     combine(seed, v.use_type_aliasing());
     combine(seed, v.is_immutable());
-    combine(seed, hash_boost_optional_dogen_yarn_orm_primitive_properties(v.orm_properties()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_orm_primitive_properties(v.orm_properties()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/type_parameters_hash.cpp b/projects/yarn/src/hash/meta_model/type_parameters_hash.cpp
similarity index 93%
rename from projects/yarn/src/hash/type_parameters_hash.cpp
rename to projects/yarn/src/hash/meta_model/type_parameters_hash.cpp
index 91f66e0ea..0db38fa21 100644
--- a/projects/yarn/src/hash/type_parameters_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/type_parameters_hash.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/type_parameters_hash.hpp"
+#include "dogen/yarn/hash/meta_model/type_parameters_hash.hpp"
 
 namespace {
 
@@ -32,6 +32,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t type_parameters_hasher::hash(const type_parameters& v) {
     std::size_t seed(0);
@@ -43,4 +44,4 @@ std::size_t type_parameters_hasher::hash(const type_parameters& v) {
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/visitor_hash.cpp b/projects/yarn/src/hash/meta_model/visitor_hash.cpp
similarity index 68%
rename from projects/yarn/src/hash/visitor_hash.cpp
rename to projects/yarn/src/hash/meta_model/visitor_hash.cpp
index 13a04305d..7fba2beb6 100644
--- a/projects/yarn/src/hash/visitor_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/visitor_hash.cpp
@@ -18,9 +18,9 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/visitor_hash.hpp"
+#include "dogen/yarn/hash/meta_model/name_hash.hpp"
+#include "dogen/yarn/hash/meta_model/element_hash.hpp"
+#include "dogen/yarn/hash/meta_model/visitor_hash.hpp"
 
 namespace {
 
@@ -30,7 +30,7 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::name>& v) {
+inline std::size_t hash_std_list_dogen_yarn_meta_model_name(const std::list<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i);
@@ -38,7 +38,7 @@ inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::na
     return seed;
 }
 
-inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dogen::yarn::name>& v) {
+inline std::size_t hash_boost_optional_dogen_yarn_meta_model_name(const boost::optional<dogen::yarn::meta_model::name>& v) {
     std::size_t seed(0);
 
     if (!v)
@@ -52,16 +52,17 @@ inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dog
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::size_t visitor_hasher::hash(const visitor& v) {
     std::size_t seed(0);
 
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
+    combine(seed, dynamic_cast<const dogen::yarn::meta_model::element&>(v));
 
-    combine(seed, hash_std_list_dogen_yarn_name(v.visits()));
-    combine(seed, hash_boost_optional_dogen_yarn_name(v.parent()));
+    combine(seed, hash_std_list_dogen_yarn_meta_model_name(v.visits()));
+    combine(seed, hash_boost_optional_dogen_yarn_meta_model_name(v.parent()));
 
     return seed;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/hash/object_hash.cpp b/projects/yarn/src/hash/object_hash.cpp
deleted file mode 100644
index 9a4af886c..000000000
--- a/projects/yarn/src/hash/object_hash.cpp
+++ /dev/null
@@ -1,123 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/yarn/hash/name_hash.hpp"
-#include "dogen/yarn/hash/object_hash.hpp"
-#include "dogen/yarn/hash/element_hash.hpp"
-#include "dogen/yarn/hash/attribute_hash.hpp"
-#include "dogen/yarn/hash/object_types_hash.hpp"
-#include "dogen/yarn/hash/type_parameters_hash.hpp"
-#include "dogen/yarn/hash/orm_object_properties_hash.hpp"
-
-namespace {
-
-template <typename HashableType>
-inline void combine(std::size_t& seed, const HashableType& value) {
-    std::hash<HashableType> hasher;
-    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-}
-
-inline std::size_t hash_std_list_dogen_yarn_attribute(const std::list<dogen::yarn::attribute>& v) {
-    std::size_t seed(0);
-    for (const auto i : v) {
-        combine(seed, i);
-    }
-    return seed;
-}
-
-inline std::size_t hash_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
-    std::size_t seed(0);
-    for (const auto i : v) {
-        combine(seed, i.first);
-        combine(seed, hash_std_list_dogen_yarn_attribute(i.second));
-    }
-    return seed;
-}
-
-inline std::size_t hash_std_list_dogen_yarn_name(const std::list<dogen::yarn::name>& v) {
-    std::size_t seed(0);
-    for (const auto i : v) {
-        combine(seed, i);
-    }
-    return seed;
-}
-
-inline std::size_t hash_boost_optional_dogen_yarn_name(const boost::optional<dogen::yarn::name>& v) {
-    std::size_t seed(0);
-
-    if (!v)
-        return seed;
-
-    combine(seed, *v);
-    return seed;
-}
-
-inline std::size_t hash_boost_optional_dogen_yarn_orm_object_properties(const boost::optional<dogen::yarn::orm_object_properties>& v) {
-    std::size_t seed(0);
-
-    if (!v)
-        return seed;
-
-    combine(seed, *v);
-    return seed;
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-std::size_t object_hasher::hash(const object& v) {
-    std::size_t seed(0);
-
-    combine(seed, dynamic_cast<const dogen::yarn::element&>(v));
-
-    combine(seed, hash_std_list_dogen_yarn_attribute(v.all_attributes()));
-    combine(seed, hash_std_list_dogen_yarn_attribute(v.local_attributes()));
-    combine(seed, hash_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(v.inherited_attributes()));
-    combine(seed, v.is_immutable());
-    combine(seed, v.is_fluent());
-    combine(seed, v.is_parent());
-    combine(seed, v.is_child());
-    combine(seed, v.is_leaf());
-    combine(seed, v.is_final());
-    combine(seed, v.is_abstract());
-    combine(seed, v.in_inheritance_relationship());
-    combine(seed, hash_std_list_dogen_yarn_name(v.root_parents()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.parents()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.leaves()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.transparent_associations()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.opaque_associations()));
-    combine(seed, hash_boost_optional_dogen_yarn_name(v.base_visitor()));
-    combine(seed, hash_boost_optional_dogen_yarn_name(v.derived_visitor()));
-    combine(seed, v.is_visitation_root());
-    combine(seed, v.is_visitation_leaf());
-    combine(seed, v.type_parameters());
-    combine(seed, v.object_type());
-    combine(seed, hash_std_list_dogen_yarn_name(v.modeled_concepts()));
-    combine(seed, hash_std_list_dogen_yarn_name(v.associative_container_keys()));
-    combine(seed, v.provides_opaqueness());
-    combine(seed, v.can_be_primitive_underlier());
-    combine(seed, hash_boost_optional_dogen_yarn_orm_object_properties(v.orm_properties()));
-
-    return seed;
-}
-
-} }
diff --git a/projects/yarn/src/io/helpers/decomposition_result_io.cpp b/projects/yarn/src/io/helpers/decomposition_result_io.cpp
index d444eed78..47686fd23 100644
--- a/projects/yarn/src/io/helpers/decomposition_result_io.cpp
+++ b/projects/yarn/src/io/helpers/decomposition_result_io.cpp
@@ -20,8 +20,8 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
 #include "dogen/yarn/io/helpers/decomposition_result_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, dogen::yarn::meta_model::name>& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << "\"" << tidy_up_string(v.first) << "\"" << ", ";
@@ -47,7 +47,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, do
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<std::string, dogen::yarn::name> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -61,7 +61,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<std::
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, dogen::yarn::name_tree>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, dogen::yarn::meta_model::name_tree>& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << "\"" << tidy_up_string(v.first) << "\"" << ", ";
@@ -74,7 +74,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<std::string, do
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<std::string, dogen::yarn::name_tree> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/helpers/mapping_context_io.cpp b/projects/yarn/src/io/helpers/mapping_context_io.cpp
index 24ef6e119..5f4119706 100644
--- a/projects/yarn/src/io/helpers/mapping_context_io.cpp
+++ b/projects/yarn/src/io/helpers/mapping_context_io.cpp
@@ -20,7 +20,7 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_context_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
@@ -33,7 +33,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/helpers/mapping_io.cpp b/projects/yarn/src/io/helpers/mapping_io.cpp
index 8d11a5d8a..16b9fdd04 100644
--- a/projects/yarn/src/io/helpers/mapping_io.cpp
+++ b/projects/yarn/src/io/helpers/mapping_io.cpp
@@ -20,8 +20,8 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/languages_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_value_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/helpers/mapping_set_io.cpp b/projects/yarn/src/io/helpers/mapping_set_io.cpp
index 13bf212b3..cc6dead0f 100644
--- a/projects/yarn/src/io/helpers/mapping_set_io.cpp
+++ b/projects/yarn/src/io/helpers/mapping_set_io.cpp
@@ -20,9 +20,9 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_set_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -52,7 +52,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -102,7 +102,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_set<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/helpers/mapping_value_io.cpp b/projects/yarn/src/io/helpers/mapping_value_io.cpp
index ecefcba78..d36a8e84b 100644
--- a/projects/yarn/src/io/helpers/mapping_value_io.cpp
+++ b/projects/yarn/src/io/helpers/mapping_value_io.cpp
@@ -19,13 +19,13 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_value_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_actions_io.hpp"
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::name>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -40,7 +40,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::name>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/helpers/node_io.cpp b/projects/yarn/src/io/helpers/node_io.cpp
index 6d97c539e..fbf88c117 100644
--- a/projects/yarn/src/io/helpers/node_io.cpp
+++ b/projects/yarn/src/io/helpers/node_io.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/name_io.hpp"
 #include "dogen/yarn/io/helpers/node_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 
 namespace boost {
 
diff --git a/projects/yarn/src/io/artefact_properties_io.cpp b/projects/yarn/src/io/meta_model/artefact_properties_io.cpp
similarity index 90%
rename from projects/yarn/src/io/artefact_properties_io.cpp
rename to projects/yarn/src/io/meta_model/artefact_properties_io.cpp
index 40ca0532d..7897f6640 100644
--- a/projects/yarn/src/io/artefact_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/artefact_properties_io.cpp
@@ -21,8 +21,8 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/formatting_styles_io.hpp"
-#include "dogen/yarn/io/artefact_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/formatting_styles_io.hpp"
+#include "dogen/yarn/io/meta_model/artefact_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -48,6 +48,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const artefact_properties& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -57,7 +58,7 @@ std::ostream& operator<<(std::ostream& s, const artefact_properties& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::artefact_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::artefact_properties\"" << ", "
       << "\"enabled\": " << v.enabled() << ", "
       << "\"overwrite\": " << v.overwrite() << ", "
       << "\"file_path\": " << "\"" << v.file_path().generic_string() << "\"" << ", "
@@ -68,4 +69,4 @@ std::ostream& operator<<(std::ostream& s, const artefact_properties& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/attribute_io.cpp b/projects/yarn/src/io/meta_model/attribute_io.cpp
similarity index 85%
rename from projects/yarn/src/io/attribute_io.cpp
rename to projects/yarn/src/io/meta_model/attribute_io.cpp
index 9b4658604..cfb2186b5 100644
--- a/projects/yarn/src/io/attribute_io.cpp
+++ b/projects/yarn/src/io/meta_model/attribute_io.cpp
@@ -21,11 +21,11 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/annotations/io/annotation_io.hpp"
-#include "dogen/yarn/io/orm_attribute_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -37,7 +37,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_attribute_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -52,6 +52,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const attribute& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -61,7 +62,7 @@ std::ostream& operator<<(std::ostream& s, const attribute& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::attribute\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::attribute\"" << ", "
       << "\"documentation\": " << "\"" << tidy_up_string(v.documentation()) << "\"" << ", "
       << "\"annotation\": " << v.annotation() << ", "
       << "\"name\": " << v.name() << ", "
@@ -74,4 +75,4 @@ std::ostream& operator<<(std::ostream& s, const attribute& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/builtin_io.cpp b/projects/yarn/src/io/meta_model/builtin_io.cpp
similarity index 89%
rename from projects/yarn/src/io/builtin_io.cpp
rename to projects/yarn/src/io/meta_model/builtin_io.cpp
index 29ca33bf5..eb8df6eed 100644
--- a/projects/yarn/src/io/builtin_io.cpp
+++ b/projects/yarn/src/io/meta_model/builtin_io.cpp
@@ -20,15 +20,16 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/builtin_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
+#include "dogen/yarn/io/meta_model/builtin_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const builtin& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/concept_io.cpp b/projects/yarn/src/io/meta_model/concept_io.cpp
similarity index 82%
rename from projects/yarn/src/io/concept_io.cpp
rename to projects/yarn/src/io/meta_model/concept_io.cpp
index a855c069a..ed9524d27 100644
--- a/projects/yarn/src/io/concept_io.cpp
+++ b/projects/yarn/src/io/meta_model/concept_io.cpp
@@ -20,17 +20,18 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/concept_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/concept_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const concept& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/element_io.cpp b/projects/yarn/src/io/meta_model/element_io.cpp
similarity index 82%
rename from projects/yarn/src/io/element_io.cpp
rename to projects/yarn/src/io/meta_model/element_io.cpp
index 9d5851b94..c9da02771 100644
--- a/projects/yarn/src/io/element_io.cpp
+++ b/projects/yarn/src/io/meta_model/element_io.cpp
@@ -21,18 +21,19 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/annotations/io/annotation_io.hpp"
-#include "dogen/yarn/io/element_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/element_properties_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const element& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/element_properties_io.cpp b/projects/yarn/src/io/meta_model/element_properties_io.cpp
similarity index 86%
rename from projects/yarn/src/io/element_properties_io.cpp
rename to projects/yarn/src/io/meta_model/element_properties_io.cpp
index af5aa9a20..4532a3d4b 100644
--- a/projects/yarn/src/io/element_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/element_properties_io.cpp
@@ -20,9 +20,9 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/element_properties_io.hpp"
-#include "dogen/yarn/io/artefact_properties_io.hpp"
 #include "dogen/formatters/io/decoration_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/element_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/artefact_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::artefact_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -52,14 +52,15 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const element_properties& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::element_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::element_properties\"" << ", "
       << "\"decoration_properties\": " << v.decoration_properties() << ", "
       << "\"artefact_properties\": " << v.artefact_properties()
       << " }";
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/enumeration_io.cpp b/projects/yarn/src/io/meta_model/enumeration_io.cpp
similarity index 81%
rename from projects/yarn/src/io/enumeration_io.cpp
rename to projects/yarn/src/io/meta_model/enumeration_io.cpp
index 7b34ea37b..eec42ecec 100644
--- a/projects/yarn/src/io/enumeration_io.cpp
+++ b/projects/yarn/src/io/meta_model/enumeration_io.cpp
@@ -20,17 +20,18 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/enumerator_io.hpp"
-#include "dogen/yarn/io/enumeration_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/enumerator_io.hpp"
+#include "dogen/yarn/io/meta_model/enumeration_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const enumeration& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/enumerator_io.cpp b/projects/yarn/src/io/meta_model/enumerator_io.cpp
similarity index 88%
rename from projects/yarn/src/io/enumerator_io.cpp
rename to projects/yarn/src/io/meta_model/enumerator_io.cpp
index 8f756ee3c..dd1324a6f 100644
--- a/projects/yarn/src/io/enumerator_io.cpp
+++ b/projects/yarn/src/io/meta_model/enumerator_io.cpp
@@ -20,9 +20,9 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/enumerator_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/annotations/io/annotation_io.hpp"
+#include "dogen/yarn/io/meta_model/enumerator_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,10 +34,11 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const enumerator& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::enumerator\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::enumerator\"" << ", "
       << "\"documentation\": " << "\"" << tidy_up_string(v.documentation()) << "\"" << ", "
       << "\"name\": " << v.name() << ", "
       << "\"annotation\": " << v.annotation() << ", "
@@ -46,4 +47,4 @@ std::ostream& operator<<(std::ostream& s, const enumerator& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/exception_io.cpp b/projects/yarn/src/io/meta_model/exception_io.cpp
similarity index 88%
rename from projects/yarn/src/io/exception_io.cpp
rename to projects/yarn/src/io/meta_model/exception_io.cpp
index 4e6726923..4a63e86aa 100644
--- a/projects/yarn/src/io/exception_io.cpp
+++ b/projects/yarn/src/io/meta_model/exception_io.cpp
@@ -19,15 +19,16 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/exception_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/exception_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const exception& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/formatting_styles_io.cpp b/projects/yarn/src/io/meta_model/formatting_styles_io.cpp
similarity index 94%
rename from projects/yarn/src/io/formatting_styles_io.cpp
rename to projects/yarn/src/io/meta_model/formatting_styles_io.cpp
index a08f30fb4..a5c56305f 100644
--- a/projects/yarn/src/io/formatting_styles_io.cpp
+++ b/projects/yarn/src/io/meta_model/formatting_styles_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/formatting_styles_io.hpp"
+#include "dogen/yarn/io/meta_model/formatting_styles_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const formatting_styles& v) {
     s << "{ " << "\"__type__\": " << "\"formatting_styles\", " << "\"value\": ";
@@ -50,4 +51,4 @@ std::ostream& operator<<(std::ostream& s, const formatting_styles& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/intermediate_model_io.cpp b/projects/yarn/src/io/meta_model/intermediate_model_io.cpp
similarity index 83%
rename from projects/yarn/src/io/intermediate_model_io.cpp
rename to projects/yarn/src/io/meta_model/intermediate_model_io.cpp
index fee2a0853..26f27668c 100644
--- a/projects/yarn/src/io/intermediate_model_io.cpp
+++ b/projects/yarn/src/io/meta_model/intermediate_model_io.cpp
@@ -21,25 +21,25 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/module_io.hpp"
-#include "dogen/yarn/io/object_io.hpp"
-#include "dogen/yarn/io/builtin_io.hpp"
-#include "dogen/yarn/io/concept_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/visitor_io.hpp"
-#include "dogen/yarn/io/exception_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/primitive_io.hpp"
-#include "dogen/yarn/io/enumeration_io.hpp"
-#include "dogen/yarn/io/origin_types_io.hpp"
-#include "dogen/yarn/io/intermediate_model_io.hpp"
-#include "dogen/yarn/io/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/module_io.hpp"
+#include "dogen/yarn/io/meta_model/object_io.hpp"
+#include "dogen/yarn/io/meta_model/builtin_io.hpp"
+#include "dogen/yarn/io/meta_model/concept_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/visitor_io.hpp"
+#include "dogen/yarn/io/meta_model/exception_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/primitive_io.hpp"
 #include "dogen/annotations/io/scribble_group_io.hpp"
+#include "dogen/yarn/io/meta_model/enumeration_io.hpp"
+#include "dogen/yarn/io/meta_model/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/intermediate_model_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -57,7 +57,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen:
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_set<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_set<dogen::yarn::meta_model::name>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -79,7 +79,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::module>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -97,7 +97,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::concept>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -115,7 +115,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::builtin>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -133,7 +133,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::enumeration>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -151,7 +151,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::primitive>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -169,7 +169,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::object>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -187,7 +187,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::exception>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -205,7 +205,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::visitor>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -223,7 +223,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::element>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::element>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
       << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
 
@@ -239,7 +239,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -253,7 +253,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<boost::shared_p
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::languages>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::languages>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -285,7 +285,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_model_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -300,6 +300,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const intermediate_model& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -309,7 +310,7 @@ std::ostream& operator<<(std::ostream& s, const intermediate_model& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::intermediate_model\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::intermediate_model\"" << ", "
       << "\"name\": " << v.name() << ", "
       << "\"origin_type\": " << v.origin_type() << ", "
       << "\"references\": " << v.references() << ", "
@@ -333,4 +334,4 @@ std::ostream& operator<<(std::ostream& s, const intermediate_model& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/languages_io.cpp b/projects/yarn/src/io/meta_model/languages_io.cpp
similarity index 95%
rename from projects/yarn/src/io/languages_io.cpp
rename to projects/yarn/src/io/meta_model/languages_io.cpp
index 686b57e63..4e31a2933 100644
--- a/projects/yarn/src/io/languages_io.cpp
+++ b/projects/yarn/src/io/meta_model/languages_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const languages& v) {
     s << "{ " << "\"__type__\": " << "\"languages\", " << "\"value\": ";
@@ -56,4 +57,4 @@ std::ostream& operator<<(std::ostream& s, const languages& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/letter_cases_io.cpp b/projects/yarn/src/io/meta_model/letter_cases_io.cpp
similarity index 94%
rename from projects/yarn/src/io/letter_cases_io.cpp
rename to projects/yarn/src/io/meta_model/letter_cases_io.cpp
index 231ffc9af..fc2ccbc2d 100644
--- a/projects/yarn/src/io/letter_cases_io.cpp
+++ b/projects/yarn/src/io/meta_model/letter_cases_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/letter_cases_io.hpp"
+#include "dogen/yarn/io/meta_model/letter_cases_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const letter_cases& v) {
     s << "{ " << "\"__type__\": " << "\"letter_cases\", " << "\"value\": ";
@@ -47,4 +48,4 @@ std::ostream& operator<<(std::ostream& s, const letter_cases& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/location_io.cpp b/projects/yarn/src/io/meta_model/location_io.cpp
similarity index 92%
rename from projects/yarn/src/io/location_io.cpp
rename to projects/yarn/src/io/meta_model/location_io.cpp
index b100dfc25..71fa53d5e 100644
--- a/projects/yarn/src/io/location_io.cpp
+++ b/projects/yarn/src/io/meta_model/location_io.cpp
@@ -20,7 +20,7 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/location_io.hpp"
+#include "dogen/yarn/io/meta_model/location_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -46,10 +46,11 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const location& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::location\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::location\"" << ", "
       << "\"external_modules\": " << v.external_modules() << ", "
       << "\"model_modules\": " << v.model_modules() << ", "
       << "\"internal_modules\": " << v.internal_modules() << ", "
@@ -58,4 +59,4 @@ std::ostream& operator<<(std::ostream& s, const location& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/model_io.cpp b/projects/yarn/src/io/meta_model/model_io.cpp
similarity index 84%
rename from projects/yarn/src/io/model_io.cpp
rename to projects/yarn/src/io/meta_model/model_io.cpp
index 01555297f..82c70e15c 100644
--- a/projects/yarn/src/io/model_io.cpp
+++ b/projects/yarn/src/io/meta_model/model_io.cpp
@@ -21,16 +21,16 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/model_io.hpp"
-#include "dogen/yarn/io/module_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/model_io.hpp"
+#include "dogen/yarn/io/meta_model/module_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::element>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::element>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
       << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
 
@@ -46,7 +46,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::vector<boost::shared_ptr<dogen::yarn::element> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -82,7 +82,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_set<std::s
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_model_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -97,6 +97,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const model& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -106,7 +107,7 @@ std::ostream& operator<<(std::ostream& s, const model& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::model\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::model\"" << ", "
       << "\"name\": " << v.name() << ", "
       << "\"elements\": " << v.elements() << ", "
       << "\"root_module\": " << v.root_module() << ", "
@@ -119,4 +120,4 @@ std::ostream& operator<<(std::ostream& s, const model& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/module_io.cpp b/projects/yarn/src/io/meta_model/module_io.cpp
similarity index 85%
rename from projects/yarn/src/io/module_io.cpp
rename to projects/yarn/src/io/meta_model/module_io.cpp
index 094a29a55..e8c1c6632 100644
--- a/projects/yarn/src/io/module_io.cpp
+++ b/projects/yarn/src/io/meta_model/module_io.cpp
@@ -21,16 +21,17 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/module_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/orm_module_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/module_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_module_properties_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const module& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/name_io.cpp b/projects/yarn/src/io/meta_model/name_io.cpp
similarity index 89%
rename from projects/yarn/src/io/name_io.cpp
rename to projects/yarn/src/io/meta_model/name_io.cpp
index be7cd2745..f9ce2e25a 100644
--- a/projects/yarn/src/io/name_io.cpp
+++ b/projects/yarn/src/io/meta_model/name_io.cpp
@@ -20,9 +20,9 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/location_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/location_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -52,10 +52,11 @@ inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::lan
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const name& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::name\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::name\"" << ", "
       << "\"id\": " << "\"" << tidy_up_string(v.id()) << "\"" << ", "
       << "\"simple\": " << "\"" << tidy_up_string(v.simple()) << "\"" << ", "
       << "\"qualified\": " << v.qualified() << ", "
@@ -65,4 +66,4 @@ std::ostream& operator<<(std::ostream& s, const name& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/name_tree_io.cpp b/projects/yarn/src/io/meta_model/name_tree_io.cpp
similarity index 88%
rename from projects/yarn/src/io/name_tree_io.cpp
rename to projects/yarn/src/io/meta_model/name_tree_io.cpp
index 6f447337f..59ab53790 100644
--- a/projects/yarn/src/io/name_tree_io.cpp
+++ b/projects/yarn/src/io/meta_model/name_tree_io.cpp
@@ -21,13 +21,13 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::name_tree>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::name_tree>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -49,7 +49,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::languages, std::string>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -67,6 +67,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::map<dogen::yarn::lan
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const name_tree& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -76,7 +77,7 @@ std::ostream& operator<<(std::ostream& s, const name_tree& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::name_tree\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::name_tree\"" << ", "
       << "\"current\": " << v.current() << ", "
       << "\"children\": " << v.children() << ", "
       << "\"are_children_opaque\": " << v.are_children_opaque() << ", "
@@ -89,4 +90,4 @@ std::ostream& operator<<(std::ostream& s, const name_tree& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/object_io.cpp b/projects/yarn/src/io/meta_model/object_io.cpp
similarity index 72%
rename from projects/yarn/src/io/object_io.cpp
rename to projects/yarn/src/io/meta_model/object_io.cpp
index c673040f7..7fb20c123 100644
--- a/projects/yarn/src/io/object_io.cpp
+++ b/projects/yarn/src/io/meta_model/object_io.cpp
@@ -20,20 +20,21 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/object_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/object_types_io.hpp"
-#include "dogen/yarn/io/type_parameters_io.hpp"
-#include "dogen/yarn/io/orm_object_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/object_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/object_types_io.hpp"
+#include "dogen/yarn/io/meta_model/type_parameters_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const object& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/object_types_io.cpp b/projects/yarn/src/io/meta_model/object_types_io.cpp
similarity index 95%
rename from projects/yarn/src/io/object_types_io.cpp
rename to projects/yarn/src/io/meta_model/object_types_io.cpp
index c3547f7f5..8c17bd2a2 100644
--- a/projects/yarn/src/io/object_types_io.cpp
+++ b/projects/yarn/src/io/meta_model/object_types_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/object_types_io.hpp"
+#include "dogen/yarn/io/meta_model/object_types_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const object_types& v) {
     s << "{ " << "\"__type__\": " << "\"object_types\", " << "\"value\": ";
@@ -50,4 +51,4 @@ std::ostream& operator<<(std::ostream& s, const object_types& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/origin_types_io.cpp b/projects/yarn/src/io/meta_model/origin_types_io.cpp
similarity index 95%
rename from projects/yarn/src/io/origin_types_io.cpp
rename to projects/yarn/src/io/meta_model/origin_types_io.cpp
index 5e9478dd0..e958d80b7 100644
--- a/projects/yarn/src/io/origin_types_io.cpp
+++ b/projects/yarn/src/io/meta_model/origin_types_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/origin_types_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const origin_types& v) {
     s << "{ " << "\"__type__\": " << "\"origin_types\", " << "\"value\": ";
@@ -53,4 +54,4 @@ std::ostream& operator<<(std::ostream& s, const origin_types& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_attribute_properties_io.cpp b/projects/yarn/src/io/meta_model/orm_attribute_properties_io.cpp
similarity index 89%
rename from projects/yarn/src/io/orm_attribute_properties_io.cpp
rename to projects/yarn/src/io/meta_model/orm_attribute_properties_io.cpp
index c7a879123..4a0fdb795 100644
--- a/projects/yarn/src/io/orm_attribute_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_attribute_properties_io.cpp
@@ -21,8 +21,8 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/orm_database_systems_io.hpp"
-#include "dogen/yarn/io/orm_attribute_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_database_systems_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_attribute_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -49,7 +49,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<bool>& v)
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -67,6 +67,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen:
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_attribute_properties& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -76,7 +77,7 @@ std::ostream& operator<<(std::ostream& s, const orm_attribute_properties& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::orm_attribute_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::orm_attribute_properties\"" << ", "
       << "\"column_name\": " << "\"" << tidy_up_string(v.column_name()) << "\"" << ", "
       << "\"is_primary_key\": " << v.is_primary_key() << ", "
       << "\"is_nullable\": " << v.is_nullable() << ", "
@@ -86,4 +87,4 @@ std::ostream& operator<<(std::ostream& s, const orm_attribute_properties& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_database_systems_io.cpp b/projects/yarn/src/io/meta_model/orm_database_systems_io.cpp
similarity index 95%
rename from projects/yarn/src/io/orm_database_systems_io.cpp
rename to projects/yarn/src/io/meta_model/orm_database_systems_io.cpp
index 5156e7933..cd9c80339 100644
--- a/projects/yarn/src/io/orm_database_systems_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_database_systems_io.cpp
@@ -21,10 +21,11 @@
 #include <string>
 #include <ostream>
 #include <stdexcept>
-#include "dogen/yarn/io/orm_database_systems_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_database_systems_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_database_systems& v) {
     s << "{ " << "\"__type__\": " << "\"orm_database_systems\", " << "\"value\": ";
@@ -56,4 +57,4 @@ std::ostream& operator<<(std::ostream& s, const orm_database_systems& v) {
     return s;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_model_properties_io.cpp b/projects/yarn/src/io/meta_model/orm_model_properties_io.cpp
similarity index 83%
rename from projects/yarn/src/io/orm_model_properties_io.cpp
rename to projects/yarn/src/io/meta_model/orm_model_properties_io.cpp
index 55220e2e1..0816048bc 100644
--- a/projects/yarn/src/io/orm_model_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_model_properties_io.cpp
@@ -20,13 +20,13 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/letter_cases_io.hpp"
-#include "dogen/yarn/io/orm_database_systems_io.hpp"
-#include "dogen/yarn/io/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/letter_cases_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_database_systems_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::vector<dogen::yarn::orm_database_systems>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::vector<dogen::yarn::meta_model::orm_database_systems>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -48,7 +48,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -63,10 +63,11 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_model_properties& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::orm_model_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::orm_model_properties\"" << ", "
       << "\"database_systems\": " << v.database_systems() << ", "
       << "\"schema_name\": " << "\"" << tidy_up_string(v.schema_name()) << "\"" << ", "
       << "\"letter_case\": " << v.letter_case()
@@ -74,4 +75,4 @@ std::ostream& operator<<(std::ostream& s, const orm_model_properties& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_module_properties_io.cpp b/projects/yarn/src/io/meta_model/orm_module_properties_io.cpp
similarity index 88%
rename from projects/yarn/src/io/orm_module_properties_io.cpp
rename to projects/yarn/src/io/meta_model/orm_module_properties_io.cpp
index c650cd3dc..9ea4f3ff9 100644
--- a/projects/yarn/src/io/orm_module_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_module_properties_io.cpp
@@ -20,7 +20,7 @@
  */
 #include <ostream>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/orm_module_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_module_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -32,13 +32,14 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_module_properties& v) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::orm_module_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::orm_module_properties\"" << ", "
       << "\"schema_name\": " << "\"" << tidy_up_string(v.schema_name()) << "\""
       << " }";
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_object_properties_io.cpp b/projects/yarn/src/io/meta_model/orm_object_properties_io.cpp
similarity index 88%
rename from projects/yarn/src/io/orm_object_properties_io.cpp
rename to projects/yarn/src/io/meta_model/orm_object_properties_io.cpp
index f36d3c396..e56d9a296 100644
--- a/projects/yarn/src/io/orm_object_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_object_properties_io.cpp
@@ -21,8 +21,8 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/letter_cases_io.hpp"
-#include "dogen/yarn/io/orm_object_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/letter_cases_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -49,6 +49,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_object_properties& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -58,7 +59,7 @@ std::ostream& operator<<(std::ostream& s, const orm_object_properties& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::orm_object_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::orm_object_properties\"" << ", "
       << "\"generate_mapping\": " << v.generate_mapping() << ", "
       << "\"schema_name\": " << "\"" << tidy_up_string(v.schema_name()) << "\"" << ", "
       << "\"table_name\": " << "\"" << tidy_up_string(v.table_name()) << "\"" << ", "
@@ -69,4 +70,4 @@ std::ostream& operator<<(std::ostream& s, const orm_object_properties& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/orm_primitive_properties_io.cpp b/projects/yarn/src/io/meta_model/orm_primitive_properties_io.cpp
similarity index 87%
rename from projects/yarn/src/io/orm_primitive_properties_io.cpp
rename to projects/yarn/src/io/meta_model/orm_primitive_properties_io.cpp
index d870ad57c..05ed63be3 100644
--- a/projects/yarn/src/io/orm_primitive_properties_io.cpp
+++ b/projects/yarn/src/io/meta_model/orm_primitive_properties_io.cpp
@@ -21,8 +21,8 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/letter_cases_io.hpp"
-#include "dogen/yarn/io/orm_primitive_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/letter_cases_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -34,7 +34,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::letter_cases>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -49,6 +49,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const orm_primitive_properties& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -58,7 +59,7 @@ std::ostream& operator<<(std::ostream& s, const orm_primitive_properties& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::orm_primitive_properties\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::orm_primitive_properties\"" << ", "
       << "\"generate_mapping\": " << v.generate_mapping() << ", "
       << "\"schema_name\": " << "\"" << tidy_up_string(v.schema_name()) << "\"" << ", "
       << "\"letter_case\": " << v.letter_case()
@@ -66,4 +67,4 @@ std::ostream& operator<<(std::ostream& s, const orm_primitive_properties& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/primitive_io.cpp b/projects/yarn/src/io/meta_model/primitive_io.cpp
similarity index 80%
rename from projects/yarn/src/io/primitive_io.cpp
rename to projects/yarn/src/io/meta_model/primitive_io.cpp
index 823a1a8ee..199747078 100644
--- a/projects/yarn/src/io/primitive_io.cpp
+++ b/projects/yarn/src/io/meta_model/primitive_io.cpp
@@ -20,17 +20,18 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/primitive_io.hpp"
-#include "dogen/yarn/io/orm_primitive_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/primitive_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const primitive& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/type_parameters_io.cpp b/projects/yarn/src/io/meta_model/type_parameters_io.cpp
similarity index 89%
rename from projects/yarn/src/io/type_parameters_io.cpp
rename to projects/yarn/src/io/meta_model/type_parameters_io.cpp
index a396899de..2eb1c1c76 100644
--- a/projects/yarn/src/io/type_parameters_io.cpp
+++ b/projects/yarn/src/io/meta_model/type_parameters_io.cpp
@@ -20,10 +20,11 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/type_parameters_io.hpp"
+#include "dogen/yarn/io/meta_model/type_parameters_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const type_parameters& v) {
     boost::io::ios_flags_saver ifs(s);
@@ -33,7 +34,7 @@ std::ostream& operator<<(std::ostream& s, const type_parameters& v) {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::type_parameters\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::type_parameters\"" << ", "
       << "\"variable_number_of_parameters\": " << v.variable_number_of_parameters() << ", "
       << "\"count\": " << v.count() << ", "
       << "\"always_in_heap\": " << v.always_in_heap()
@@ -41,4 +42,4 @@ std::ostream& operator<<(std::ostream& s, const type_parameters& v) {
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/io/visitor_io.cpp b/projects/yarn/src/io/meta_model/visitor_io.cpp
similarity index 85%
rename from projects/yarn/src/io/visitor_io.cpp
rename to projects/yarn/src/io/meta_model/visitor_io.cpp
index 3b4460be4..a1751828e 100644
--- a/projects/yarn/src/io/visitor_io.cpp
+++ b/projects/yarn/src/io/meta_model/visitor_io.cpp
@@ -19,16 +19,17 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/visitor_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/visitor_io.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 std::ostream& operator<<(std::ostream& s, const visitor& v) {
     v.to_stream(s);
     return(s);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/serialization/helpers/decomposition_result_ser.cpp b/projects/yarn/src/serialization/helpers/decomposition_result_ser.cpp
index ce3ee7dd3..cd9a1498d 100644
--- a/projects/yarn/src/serialization/helpers/decomposition_result_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/decomposition_result_ser.cpp
@@ -30,8 +30,8 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/name_tree_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_tree_ser.hpp"
 #include "dogen/yarn/serialization/helpers/decomposition_result_ser.hpp"
 
 namespace boost {
diff --git a/projects/yarn/src/serialization/helpers/mapping_context_ser.cpp b/projects/yarn/src/serialization/helpers/mapping_context_ser.cpp
index 31fee6ed0..6f531cef4 100644
--- a/projects/yarn/src/serialization/helpers/mapping_context_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/mapping_context_ser.cpp
@@ -30,7 +30,7 @@
 #include <boost/serialization/unordered_set.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_context_ser.hpp"
 
 namespace boost {
diff --git a/projects/yarn/src/serialization/helpers/mapping_ser.cpp b/projects/yarn/src/serialization/helpers/mapping_ser.cpp
index 7b8ac5bf1..34881e87d 100644
--- a/projects/yarn/src/serialization/helpers/mapping_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/mapping_ser.cpp
@@ -29,8 +29,8 @@
 #include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/languages_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_value_ser.hpp"
 
 namespace boost {
diff --git a/projects/yarn/src/serialization/helpers/mapping_set_ser.cpp b/projects/yarn/src/serialization/helpers/mapping_set_ser.cpp
index f89be2c0e..89bb31c9a 100644
--- a/projects/yarn/src/serialization/helpers/mapping_set_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/mapping_set_ser.cpp
@@ -30,9 +30,9 @@
 #include <boost/serialization/unordered_set.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_set_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
 
 namespace boost {
 namespace serialization {
diff --git a/projects/yarn/src/serialization/helpers/mapping_value_ser.cpp b/projects/yarn/src/serialization/helpers/mapping_value_ser.cpp
index 6108bd3c7..85e021a46 100644
--- a/projects/yarn/src/serialization/helpers/mapping_value_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/mapping_value_ser.cpp
@@ -29,7 +29,7 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_value_ser.hpp"
 #include "dogen/yarn/serialization/helpers/mapping_actions_ser.hpp"
 
diff --git a/projects/yarn/src/serialization/helpers/node_ser.cpp b/projects/yarn/src/serialization/helpers/node_ser.cpp
index ced16c572..d6bab6ba3 100644
--- a/projects/yarn/src/serialization/helpers/node_ser.cpp
+++ b/projects/yarn/src/serialization/helpers/node_ser.cpp
@@ -29,8 +29,8 @@
 #include <boost/serialization/shared_ptr.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
 #include "dogen/yarn/serialization/helpers/node_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 
 namespace boost {
 namespace serialization {
diff --git a/projects/yarn/src/serialization/artefact_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/artefact_properties_ser.cpp
similarity index 77%
rename from projects/yarn/src/serialization/artefact_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/artefact_properties_ser.cpp
index 9b44b7459..c5b547d28 100644
--- a/projects/yarn/src/serialization/artefact_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/artefact_properties_ser.cpp
@@ -30,8 +30,8 @@
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
 #include "dogen/utility/serialization/path.hpp"
-#include "dogen/yarn/serialization/formatting_styles_ser.hpp"
-#include "dogen/yarn/serialization/artefact_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/formatting_styles_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
@@ -61,7 +61,7 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::artefact_properties& v,
+    const dogen::yarn::meta_model::artefact_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("enabled", v.enabled_);
     ar << make_nvp("overwrite", v.overwrite_);
@@ -73,7 +73,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::artefact_properties& v,
+    dogen::yarn::meta_model::artefact_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("enabled", v.enabled_);
     ar >> make_nvp("overwrite", v.overwrite_);
@@ -88,16 +88,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::artefact_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::artefact_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::artefact_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/attribute_ser.cpp b/projects/yarn/src/serialization/meta_model/attribute_ser.cpp
similarity index 74%
rename from projects/yarn/src/serialization/attribute_ser.cpp
rename to projects/yarn/src/serialization/meta_model/attribute_ser.cpp
index fb2f0db0a..6b09877d2 100644
--- a/projects/yarn/src/serialization/attribute_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/attribute_ser.cpp
@@ -29,18 +29,18 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/attribute_ser.hpp"
-#include "dogen/yarn/serialization/name_tree_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/annotations/serialization/annotation_ser.hpp"
-#include "dogen/yarn/serialization/orm_attribute_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_tree_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::attribute& v,
+    const dogen::yarn::meta_model::attribute& v,
     const unsigned int /*version*/) {
     ar << make_nvp("documentation", v.documentation_);
     ar << make_nvp("annotation", v.annotation_);
@@ -54,7 +54,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::attribute& v,
+    dogen::yarn::meta_model::attribute& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("documentation", v.documentation_);
     ar >> make_nvp("annotation", v.annotation_);
@@ -71,16 +71,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::attribute& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::attribute& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::attribute& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::attribute& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::attribute& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::attribute& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::attribute& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::attribute& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::attribute& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::attribute& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/builtin_ser.cpp b/projects/yarn/src/serialization/meta_model/builtin_ser.cpp
similarity index 72%
rename from projects/yarn/src/serialization/builtin_ser.cpp
rename to projects/yarn/src/serialization/meta_model/builtin_ser.cpp
index 7d63080b1..2e2d26c57 100644
--- a/projects/yarn/src/serialization/builtin_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/builtin_ser.cpp
@@ -27,11 +27,11 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/builtin_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::builtin,
+    dogen::yarn::meta_model::builtin,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -39,9 +39,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::builtin& v,
+    const dogen::yarn::meta_model::builtin& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("is_default_enumeration_type", v.is_default_enumeration_type_);
     ar << make_nvp("is_floating_point", v.is_floating_point_);
@@ -51,9 +51,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::builtin& v,
+    dogen::yarn::meta_model::builtin& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("is_default_enumeration_type", v.is_default_enumeration_type_);
     ar >> make_nvp("is_floating_point", v.is_floating_point_);
@@ -66,16 +66,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::builtin& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::builtin& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::builtin& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::builtin& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::builtin& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::builtin& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::builtin& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::builtin& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::builtin& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::builtin& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/concept_ser.cpp b/projects/yarn/src/serialization/meta_model/concept_ser.cpp
similarity index 71%
rename from projects/yarn/src/serialization/concept_ser.cpp
rename to projects/yarn/src/serialization/meta_model/concept_ser.cpp
index 0834729e1..84db260df 100644
--- a/projects/yarn/src/serialization/concept_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/concept_ser.cpp
@@ -29,13 +29,13 @@
 #include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/concept_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/attribute_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::concept,
+    dogen::yarn::meta_model::concept,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -43,9 +43,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::concept& v,
+    const dogen::yarn::meta_model::concept& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("all_attributes", v.all_attributes_);
     ar << make_nvp("local_attributes", v.local_attributes_);
@@ -58,9 +58,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::concept& v,
+    dogen::yarn::meta_model::concept& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("all_attributes", v.all_attributes_);
     ar >> make_nvp("local_attributes", v.local_attributes_);
@@ -76,16 +76,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::concept& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::concept& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::concept& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::concept& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::concept& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::concept& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::concept& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::concept& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::concept& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::concept& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/element_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/element_properties_ser.cpp
similarity index 71%
rename from projects/yarn/src/serialization/element_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/element_properties_ser.cpp
index f958dcb66..f9e21cec0 100644
--- a/projects/yarn/src/serialization/element_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/element_properties_ser.cpp
@@ -29,16 +29,16 @@
 #include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/element_properties_ser.hpp"
-#include "dogen/yarn/serialization/artefact_properties_ser.hpp"
 #include "dogen/formatters/serialization/decoration_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/artefact_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::element_properties& v,
+    const dogen::yarn::meta_model::element_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("decoration_properties", v.decoration_properties_);
     ar << make_nvp("artefact_properties", v.artefact_properties_);
@@ -46,7 +46,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::element_properties& v,
+    dogen::yarn::meta_model::element_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("decoration_properties", v.decoration_properties_);
     ar >> make_nvp("artefact_properties", v.artefact_properties_);
@@ -57,16 +57,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::element_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::element_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::element_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::element_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::element_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::element_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::element_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::element_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::element_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::element_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/element_ser.cpp b/projects/yarn/src/serialization/meta_model/element_ser.cpp
similarity index 67%
rename from projects/yarn/src/serialization/element_ser.cpp
rename to projects/yarn/src/serialization/meta_model/element_ser.cpp
index 321383c00..f0c8f228c 100644
--- a/projects/yarn/src/serialization/element_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/element_ser.cpp
@@ -30,22 +30,22 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/object_ser.hpp"
-#include "dogen/yarn/serialization/builtin_ser.hpp"
-#include "dogen/yarn/serialization/concept_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/visitor_ser.hpp"
-#include "dogen/yarn/serialization/exception_ser.hpp"
-#include "dogen/yarn/serialization/primitive_ser.hpp"
-#include "dogen/yarn/serialization/enumeration_ser.hpp"
-#include "dogen/yarn/serialization/origin_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/annotations/serialization/annotation_ser.hpp"
-#include "dogen/yarn/serialization/element_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/origin_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_properties_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::element,
+    dogen::yarn::meta_model::element,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -53,7 +53,7 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::element& v,
+    const dogen::yarn::meta_model::element& v,
     const unsigned int /*version*/) {
     ar << make_nvp("documentation", v.documentation_);
     ar << make_nvp("annotation", v.annotation_);
@@ -68,7 +68,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::element& v,
+    dogen::yarn::meta_model::element& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("documentation", v.documentation_);
     ar >> make_nvp("annotation", v.annotation_);
@@ -86,16 +86,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::element& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::element& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::element& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::element& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::element& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::element& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::element& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::element& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::element& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::element& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/enumeration_ser.cpp b/projects/yarn/src/serialization/meta_model/enumeration_ser.cpp
similarity index 70%
rename from projects/yarn/src/serialization/enumeration_ser.cpp
rename to projects/yarn/src/serialization/meta_model/enumeration_ser.cpp
index f9c2e949a..2e68b8dc4 100644
--- a/projects/yarn/src/serialization/enumeration_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/enumeration_ser.cpp
@@ -28,13 +28,13 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/enumerator_ser.hpp"
-#include "dogen/yarn/serialization/enumeration_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumerator_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::enumeration,
+    dogen::yarn::meta_model::enumeration,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -42,9 +42,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::enumeration& v,
+    const dogen::yarn::meta_model::enumeration& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("underlying_element", v.underlying_element_);
     ar << make_nvp("enumerators", v.enumerators_);
@@ -55,9 +55,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::enumeration& v,
+    dogen::yarn::meta_model::enumeration& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("underlying_element", v.underlying_element_);
     ar >> make_nvp("enumerators", v.enumerators_);
@@ -71,16 +71,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::enumeration& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::enumeration& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::enumeration& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::enumeration& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::enumeration& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::enumeration& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::enumeration& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::enumeration& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::enumeration& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::enumeration& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/enumerator_ser.cpp b/projects/yarn/src/serialization/meta_model/enumerator_ser.cpp
similarity index 74%
rename from projects/yarn/src/serialization/enumerator_ser.cpp
rename to projects/yarn/src/serialization/meta_model/enumerator_ser.cpp
index 466410ab0..20af6693c 100644
--- a/projects/yarn/src/serialization/enumerator_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/enumerator_ser.cpp
@@ -28,16 +28,16 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/enumerator_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
 #include "dogen/annotations/serialization/annotation_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumerator_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::enumerator& v,
+    const dogen::yarn::meta_model::enumerator& v,
     const unsigned int /*version*/) {
     ar << make_nvp("documentation", v.documentation_);
     ar << make_nvp("name", v.name_);
@@ -47,7 +47,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::enumerator& v,
+    dogen::yarn::meta_model::enumerator& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("documentation", v.documentation_);
     ar >> make_nvp("name", v.name_);
@@ -60,16 +60,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::enumerator& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::enumerator& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::enumerator& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::enumerator& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::enumerator& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::enumerator& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::enumerator& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::enumerator& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::enumerator& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::enumerator& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/exception_ser.cpp b/projects/yarn/src/serialization/meta_model/exception_ser.cpp
similarity index 65%
rename from projects/yarn/src/serialization/exception_ser.cpp
rename to projects/yarn/src/serialization/meta_model/exception_ser.cpp
index f61c50f45..d9c4f9552 100644
--- a/projects/yarn/src/serialization/exception_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/exception_ser.cpp
@@ -27,11 +27,11 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/exception_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::exception,
+    dogen::yarn::meta_model::exception,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -39,16 +39,16 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::exception& v,
+    const dogen::yarn::meta_model::exception& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 }
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::exception& v,
+    dogen::yarn::meta_model::exception& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 }
 
 } }
@@ -56,16 +56,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::exception& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::exception& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::exception& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::exception& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::exception& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::exception& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::exception& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::exception& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::exception& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::exception& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/intermediate_model_ser.cpp b/projects/yarn/src/serialization/meta_model/intermediate_model_ser.cpp
similarity index 71%
rename from projects/yarn/src/serialization/intermediate_model_ser.cpp
rename to projects/yarn/src/serialization/meta_model/intermediate_model_ser.cpp
index ccb15a5ce..9d29ce35f 100644
--- a/projects/yarn/src/serialization/intermediate_model_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/intermediate_model_ser.cpp
@@ -33,28 +33,28 @@
 #include <boost/serialization/unordered_set.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/object_ser.hpp"
-#include "dogen/yarn/serialization/builtin_ser.hpp"
-#include "dogen/yarn/serialization/concept_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/visitor_ser.hpp"
-#include "dogen/yarn/serialization/exception_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
-#include "dogen/yarn/serialization/primitive_ser.hpp"
-#include "dogen/yarn/serialization/enumeration_ser.hpp"
-#include "dogen/yarn/serialization/origin_types_ser.hpp"
-#include "dogen/yarn/serialization/intermediate_model_ser.hpp"
-#include "dogen/yarn/serialization/orm_model_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_ser.hpp"
 #include "dogen/annotations/serialization/scribble_group_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/origin_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::intermediate_model& v,
+    const dogen::yarn::meta_model::intermediate_model& v,
     const unsigned int /*version*/) {
     ar << make_nvp("name", v.name_);
     ar << make_nvp("origin_type", v.origin_type_);
@@ -79,7 +79,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::intermediate_model& v,
+    dogen::yarn::meta_model::intermediate_model& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("name", v.name_);
     ar >> make_nvp("origin_type", v.origin_type_);
@@ -107,16 +107,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::intermediate_model& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::intermediate_model& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::intermediate_model& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/location_ser.cpp b/projects/yarn/src/serialization/meta_model/location_ser.cpp
similarity index 76%
rename from projects/yarn/src/serialization/location_ser.cpp
rename to projects/yarn/src/serialization/meta_model/location_ser.cpp
index 3682e000d..b88adc7f3 100644
--- a/projects/yarn/src/serialization/location_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/location_ser.cpp
@@ -29,14 +29,14 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/location_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/location_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::location& v,
+    const dogen::yarn::meta_model::location& v,
     const unsigned int /*version*/) {
     ar << make_nvp("external_modules", v.external_modules_);
     ar << make_nvp("model_modules", v.model_modules_);
@@ -46,7 +46,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::location& v,
+    dogen::yarn::meta_model::location& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("external_modules", v.external_modules_);
     ar >> make_nvp("model_modules", v.model_modules_);
@@ -59,16 +59,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::location& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::location& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::location& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::location& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::location& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::location& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::location& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::location& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::location& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::location& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/model_ser.cpp b/projects/yarn/src/serialization/meta_model/model_ser.cpp
similarity index 74%
rename from projects/yarn/src/serialization/model_ser.cpp
rename to projects/yarn/src/serialization/meta_model/model_ser.cpp
index 9b015310f..78361207e 100644
--- a/projects/yarn/src/serialization/model_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/model_ser.cpp
@@ -32,19 +32,19 @@
 #include <boost/serialization/unordered_set.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/model_ser.hpp"
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
-#include "dogen/yarn/serialization/orm_model_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/model_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::model& v,
+    const dogen::yarn::meta_model::model& v,
     const unsigned int /*version*/) {
     ar << make_nvp("name", v.name_);
     ar << make_nvp("elements", v.elements_);
@@ -58,7 +58,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::model& v,
+    dogen::yarn::meta_model::model& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("name", v.name_);
     ar >> make_nvp("elements", v.elements_);
@@ -75,16 +75,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::model& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::model& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::model& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::model& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::model& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::model& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::model& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::model& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::model& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::model& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/module_ser.cpp b/projects/yarn/src/serialization/meta_model/module_ser.cpp
similarity index 70%
rename from projects/yarn/src/serialization/module_ser.cpp
rename to projects/yarn/src/serialization/meta_model/module_ser.cpp
index 4a50244c5..ef9ca0489 100644
--- a/projects/yarn/src/serialization/module_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/module_ser.cpp
@@ -30,12 +30,12 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/orm_module_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::module,
+    dogen::yarn::meta_model::module,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -43,9 +43,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::module& v,
+    const dogen::yarn::meta_model::module& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("members", v.members_);
     ar << make_nvp("is_root", v.is_root_);
@@ -55,9 +55,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::module& v,
+    dogen::yarn::meta_model::module& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("members", v.members_);
     ar >> make_nvp("is_root", v.is_root_);
@@ -70,16 +70,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::module& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::module& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::module& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::module& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::module& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::module& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::module& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::module& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::module& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::module& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/name_ser.cpp b/projects/yarn/src/serialization/meta_model/name_ser.cpp
similarity index 74%
rename from projects/yarn/src/serialization/name_ser.cpp
rename to projects/yarn/src/serialization/meta_model/name_ser.cpp
index f1a4c0b0c..e8ab13c69 100644
--- a/projects/yarn/src/serialization/name_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/name_ser.cpp
@@ -29,16 +29,16 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/location_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/location_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::name& v,
+    const dogen::yarn::meta_model::name& v,
     const unsigned int /*version*/) {
     ar << make_nvp("id", v.id_);
     ar << make_nvp("simple", v.simple_);
@@ -49,7 +49,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::name& v,
+    dogen::yarn::meta_model::name& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("id", v.id_);
     ar >> make_nvp("simple", v.simple_);
@@ -63,16 +63,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::name& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::name& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::name& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::name& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::name& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::name& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::name& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::name& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::name& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::name& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/name_tree_ser.cpp b/projects/yarn/src/serialization/meta_model/name_tree_ser.cpp
similarity index 77%
rename from projects/yarn/src/serialization/name_tree_ser.cpp
rename to projects/yarn/src/serialization/meta_model/name_tree_ser.cpp
index ce8ec8991..7c451b6b0 100644
--- a/projects/yarn/src/serialization/name_tree_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/name_tree_ser.cpp
@@ -30,16 +30,16 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/languages_ser.hpp"
-#include "dogen/yarn/serialization/name_tree_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/languages_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_tree_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::name_tree& v,
+    const dogen::yarn::meta_model::name_tree& v,
     const unsigned int /*version*/) {
     ar << make_nvp("current", v.current_);
     ar << make_nvp("children", v.children_);
@@ -53,7 +53,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::name_tree& v,
+    dogen::yarn::meta_model::name_tree& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("current", v.current_);
     ar >> make_nvp("children", v.children_);
@@ -70,16 +70,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::name_tree& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::name_tree& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::name_tree& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::name_tree& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::name_tree& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::name_tree& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::name_tree& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/object_ser.cpp b/projects/yarn/src/serialization/meta_model/object_ser.cpp
similarity index 79%
rename from projects/yarn/src/serialization/object_ser.cpp
rename to projects/yarn/src/serialization/meta_model/object_ser.cpp
index e441b6358..aa7991015 100644
--- a/projects/yarn/src/serialization/object_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/object_ser.cpp
@@ -30,16 +30,16 @@
 #include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/object_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/attribute_ser.hpp"
-#include "dogen/yarn/serialization/object_types_ser.hpp"
-#include "dogen/yarn/serialization/type_parameters_ser.hpp"
-#include "dogen/yarn/serialization/orm_object_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_types_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/type_parameters_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::object,
+    dogen::yarn::meta_model::object,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -47,9 +47,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::object& v,
+    const dogen::yarn::meta_model::object& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("all_attributes", v.all_attributes_);
     ar << make_nvp("local_attributes", v.local_attributes_);
@@ -82,9 +82,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::object& v,
+    dogen::yarn::meta_model::object& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("all_attributes", v.all_attributes_);
     ar >> make_nvp("local_attributes", v.local_attributes_);
@@ -120,16 +120,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::object& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::object& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::object& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::object& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::object& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::object& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::object& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::object& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::object& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::object& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/orm_attribute_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/orm_attribute_properties_ser.cpp
similarity index 72%
rename from projects/yarn/src/serialization/orm_attribute_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/orm_attribute_properties_ser.cpp
index eece784be..ca53ebefa 100644
--- a/projects/yarn/src/serialization/orm_attribute_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/orm_attribute_properties_ser.cpp
@@ -30,15 +30,15 @@
 #include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/orm_database_systems_ser.hpp"
-#include "dogen/yarn/serialization/orm_attribute_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_attribute_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::orm_attribute_properties& v,
+    const dogen::yarn::meta_model::orm_attribute_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("column_name", v.column_name_);
     ar << make_nvp("is_primary_key", v.is_primary_key_);
@@ -49,7 +49,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::orm_attribute_properties& v,
+    dogen::yarn::meta_model::orm_attribute_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("column_name", v.column_name_);
     ar >> make_nvp("is_primary_key", v.is_primary_key_);
@@ -63,16 +63,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::orm_attribute_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::orm_attribute_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::orm_attribute_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/orm_model_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/orm_model_properties_ser.cpp
similarity index 69%
rename from projects/yarn/src/serialization/orm_model_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/orm_model_properties_ser.cpp
index 27f55920e..1f1b92693 100644
--- a/projects/yarn/src/serialization/orm_model_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/orm_model_properties_ser.cpp
@@ -30,16 +30,16 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/letter_cases_ser.hpp"
-#include "dogen/yarn/serialization/orm_database_systems_ser.hpp"
-#include "dogen/yarn/serialization/orm_model_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/letter_cases_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_database_systems_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_model_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::orm_model_properties& v,
+    const dogen::yarn::meta_model::orm_model_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("database_systems", v.database_systems_);
     ar << make_nvp("schema_name", v.schema_name_);
@@ -48,7 +48,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::orm_model_properties& v,
+    dogen::yarn::meta_model::orm_model_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("database_systems", v.database_systems_);
     ar >> make_nvp("schema_name", v.schema_name_);
@@ -60,16 +60,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::orm_model_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::orm_model_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::orm_model_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/orm_module_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/orm_module_properties_ser.cpp
similarity index 69%
rename from projects/yarn/src/serialization/orm_module_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/orm_module_properties_ser.cpp
index e56c17997..a5a94d5f2 100644
--- a/projects/yarn/src/serialization/orm_module_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/orm_module_properties_ser.cpp
@@ -28,21 +28,21 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/orm_module_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_module_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::orm_module_properties& v,
+    const dogen::yarn::meta_model::orm_module_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("schema_name", v.schema_name_);
 }
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::orm_module_properties& v,
+    dogen::yarn::meta_model::orm_module_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("schema_name", v.schema_name_);
 }
@@ -52,16 +52,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::orm_module_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::orm_module_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::orm_module_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/orm_object_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/orm_object_properties_ser.cpp
similarity index 73%
rename from projects/yarn/src/serialization/orm_object_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/orm_object_properties_ser.cpp
index 0a0f4ec5c..cdf97d37f 100644
--- a/projects/yarn/src/serialization/orm_object_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/orm_object_properties_ser.cpp
@@ -29,15 +29,15 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/letter_cases_ser.hpp"
-#include "dogen/yarn/serialization/orm_object_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/letter_cases_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_object_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::orm_object_properties& v,
+    const dogen::yarn::meta_model::orm_object_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("generate_mapping", v.generate_mapping_);
     ar << make_nvp("schema_name", v.schema_name_);
@@ -49,7 +49,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::orm_object_properties& v,
+    dogen::yarn::meta_model::orm_object_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("generate_mapping", v.generate_mapping_);
     ar >> make_nvp("schema_name", v.schema_name_);
@@ -64,16 +64,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::orm_object_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::orm_object_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::orm_object_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/orm_primitive_properties_ser.cpp b/projects/yarn/src/serialization/meta_model/orm_primitive_properties_ser.cpp
similarity index 70%
rename from projects/yarn/src/serialization/orm_primitive_properties_ser.cpp
rename to projects/yarn/src/serialization/meta_model/orm_primitive_properties_ser.cpp
index 129e0ae36..d79c187a6 100644
--- a/projects/yarn/src/serialization/orm_primitive_properties_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/orm_primitive_properties_ser.cpp
@@ -29,15 +29,15 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/letter_cases_ser.hpp"
-#include "dogen/yarn/serialization/orm_primitive_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/letter_cases_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::orm_primitive_properties& v,
+    const dogen::yarn::meta_model::orm_primitive_properties& v,
     const unsigned int /*version*/) {
     ar << make_nvp("generate_mapping", v.generate_mapping_);
     ar << make_nvp("schema_name", v.schema_name_);
@@ -46,7 +46,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::orm_primitive_properties& v,
+    dogen::yarn::meta_model::orm_primitive_properties& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("generate_mapping", v.generate_mapping_);
     ar >> make_nvp("schema_name", v.schema_name_);
@@ -58,16 +58,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::orm_primitive_properties& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::orm_primitive_properties& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::orm_primitive_properties& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/primitive_ser.cpp b/projects/yarn/src/serialization/meta_model/primitive_ser.cpp
similarity index 68%
rename from projects/yarn/src/serialization/primitive_ser.cpp
rename to projects/yarn/src/serialization/meta_model/primitive_ser.cpp
index 1756cdee1..9dd10f6de 100644
--- a/projects/yarn/src/serialization/primitive_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/primitive_ser.cpp
@@ -28,13 +28,13 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/attribute_ser.hpp"
-#include "dogen/yarn/serialization/primitive_ser.hpp"
-#include "dogen/yarn/serialization/orm_primitive_properties_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/attribute_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/orm_primitive_properties_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::primitive,
+    dogen::yarn::meta_model::primitive,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -42,9 +42,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::primitive& v,
+    const dogen::yarn::meta_model::primitive& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("is_nullable", v.is_nullable_);
     ar << make_nvp("value_attribute", v.value_attribute_);
@@ -55,9 +55,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::primitive& v,
+    dogen::yarn::meta_model::primitive& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("is_nullable", v.is_nullable_);
     ar >> make_nvp("value_attribute", v.value_attribute_);
@@ -71,16 +71,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::primitive& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::primitive& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::primitive& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::primitive& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::primitive& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::primitive& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::primitive& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::primitive& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::primitive& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::primitive& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/type_parameters_ser.cpp b/projects/yarn/src/serialization/meta_model/type_parameters_ser.cpp
similarity index 73%
rename from projects/yarn/src/serialization/type_parameters_ser.cpp
rename to projects/yarn/src/serialization/meta_model/type_parameters_ser.cpp
index 2f8ff3c12..a69a02caa 100644
--- a/projects/yarn/src/serialization/type_parameters_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/type_parameters_ser.cpp
@@ -27,14 +27,14 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/type_parameters_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/type_parameters_ser.hpp"
 
 namespace boost {
 namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::type_parameters& v,
+    const dogen::yarn::meta_model::type_parameters& v,
     const unsigned int /*version*/) {
     ar << make_nvp("variable_number_of_parameters", v.variable_number_of_parameters_);
     ar << make_nvp("count", v.count_);
@@ -43,7 +43,7 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::type_parameters& v,
+    dogen::yarn::meta_model::type_parameters& v,
     const unsigned int /*version*/) {
     ar >> make_nvp("variable_number_of_parameters", v.variable_number_of_parameters_);
     ar >> make_nvp("count", v.count_);
@@ -55,16 +55,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::type_parameters& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::type_parameters& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::type_parameters& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::type_parameters& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/visitor_ser.cpp b/projects/yarn/src/serialization/meta_model/visitor_ser.cpp
similarity index 67%
rename from projects/yarn/src/serialization/visitor_ser.cpp
rename to projects/yarn/src/serialization/meta_model/visitor_ser.cpp
index 1324c2a44..1ec7839dd 100644
--- a/projects/yarn/src/serialization/visitor_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/visitor_ser.cpp
@@ -29,12 +29,12 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/name_ser.hpp"
-#include "dogen/yarn/serialization/element_ser.hpp"
-#include "dogen/yarn/serialization/visitor_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/name_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/element_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_ser.hpp"
 
 BOOST_CLASS_TRACKING(
-    dogen::yarn::visitor,
+    dogen::yarn::meta_model::visitor,
     boost::serialization::track_selectively)
 
 namespace boost {
@@ -42,9 +42,9 @@ namespace serialization {
 
 template<typename Archive>
 void save(Archive& ar,
-    const dogen::yarn::visitor& v,
+    const dogen::yarn::meta_model::visitor& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar << make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar << make_nvp("visits", v.visits_);
     ar << make_nvp("parent", v.parent_);
@@ -52,9 +52,9 @@ void save(Archive& ar,
 
 template<typename Archive>
 void load(Archive& ar,
-    dogen::yarn::visitor& v,
+    dogen::yarn::meta_model::visitor& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("element", base_object<dogen::yarn::element>(v));
+    ar >> make_nvp("element", base_object<dogen::yarn::meta_model::element>(v));
 
     ar >> make_nvp("visits", v.visits_);
     ar >> make_nvp("parent", v.parent_);
@@ -65,16 +65,16 @@ void load(Archive& ar,
 namespace boost {
 namespace serialization {
 
-template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::visitor& v, unsigned int version);
-template void load(archive::polymorphic_iarchive& ar, dogen::yarn::visitor& v, unsigned int version);
+template void save(archive::polymorphic_oarchive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
-template void save(archive::text_oarchive& ar, const dogen::yarn::visitor& v, unsigned int version);
-template void load(archive::text_iarchive& ar, dogen::yarn::visitor& v, unsigned int version);
+template void save(archive::text_oarchive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
-template void save(archive::binary_oarchive& ar, const dogen::yarn::visitor& v, unsigned int version);
-template void load(archive::binary_iarchive& ar, dogen::yarn::visitor& v, unsigned int version);
+template void save(archive::binary_oarchive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
-template void save(archive::xml_oarchive& ar, const dogen::yarn::visitor& v, unsigned int version);
-template void load(archive::xml_iarchive& ar, dogen::yarn::visitor& v, unsigned int version);
+template void save(archive::xml_oarchive& ar, const dogen::yarn::meta_model::visitor& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::yarn::meta_model::visitor& v, unsigned int version);
 
 } }
diff --git a/projects/yarn/src/serialization/registrar_ser.cpp b/projects/yarn/src/serialization/registrar_ser.cpp
index 74c6ac6e9..6aa069efb 100644
--- a/projects/yarn/src/serialization/registrar_ser.cpp
+++ b/projects/yarn/src/serialization/registrar_ser.cpp
@@ -26,18 +26,18 @@
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
-#include "dogen/yarn/serialization/module_ser.hpp"
-#include "dogen/yarn/serialization/object_ser.hpp"
-#include "dogen/yarn/serialization/builtin_ser.hpp"
-#include "dogen/yarn/serialization/concept_ser.hpp"
-#include "dogen/yarn/serialization/visitor_ser.hpp"
-#include "dogen/yarn/serialization/exception_ser.hpp"
-#include "dogen/yarn/serialization/primitive_ser.hpp"
 #include "dogen/yarn/serialization/registrar_ser.hpp"
-#include "dogen/yarn/serialization/enumeration_ser.hpp"
 #include "dogen/options/serialization/registrar_ser.hpp"
 #include "dogen/formatters/serialization/registrar_ser.hpp"
 #include "dogen/annotations/serialization/registrar_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/module_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/object_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/builtin_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/concept_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/visitor_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/exception_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/primitive_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/enumeration_ser.hpp"
 
 namespace dogen {
 namespace yarn {
@@ -48,14 +48,14 @@ void register_types(Archive& ar) {
     dogen::formatters::register_types(ar);
     dogen::options::register_types(ar);
 
-    ar.template register_type<dogen::yarn::builtin>();
-    ar.template register_type<dogen::yarn::concept>();
-    ar.template register_type<dogen::yarn::enumeration>();
-    ar.template register_type<dogen::yarn::exception>();
-    ar.template register_type<dogen::yarn::module>();
-    ar.template register_type<dogen::yarn::object>();
-    ar.template register_type<dogen::yarn::primitive>();
-    ar.template register_type<dogen::yarn::visitor>();
+    ar.template register_type<dogen::yarn::meta_model::builtin>();
+    ar.template register_type<dogen::yarn::meta_model::concept>();
+    ar.template register_type<dogen::yarn::meta_model::enumeration>();
+    ar.template register_type<dogen::yarn::meta_model::exception>();
+    ar.template register_type<dogen::yarn::meta_model::module>();
+    ar.template register_type<dogen::yarn::meta_model::object>();
+    ar.template register_type<dogen::yarn::meta_model::primitive>();
+    ar.template register_type<dogen::yarn::meta_model::visitor>();
 }
 
 template void register_types(boost::archive::polymorphic_oarchive& ar);
diff --git a/projects/yarn/src/test/mock_intermediate_model_factory.cpp b/projects/yarn/src/test/mock_intermediate_model_factory.cpp
index 88407b486..cbbaaf0a1 100644
--- a/projects/yarn/src/test/mock_intermediate_model_factory.cpp
+++ b/projects/yarn/src/test/mock_intermediate_model_factory.cpp
@@ -29,8 +29,8 @@
 #include "dogen/annotations/types/value_factory.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/types/builtin.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 #include "dogen/yarn/types/helpers/building_error.hpp"
 #include "dogen/yarn/test/mock_intermediate_model_factory.hpp"
 
@@ -106,32 +106,33 @@ std::string module_name(const unsigned int i) {
     return stream.str();
 }
 
-dogen::yarn::name mock_model_name(unsigned int i) {
+dogen::yarn::meta_model::name mock_model_name(unsigned int i) {
     dogen::yarn::helpers::name_factory nf;
     return nf.build_model_name(model_name(i));
 }
 
-dogen::yarn::name_tree mock_name_tree(const dogen::yarn::name& n) {
-    dogen::yarn::name_tree r;
+dogen::yarn::meta_model::
+name_tree mock_name_tree(const dogen::yarn::meta_model::name& n) {
+    dogen::yarn::meta_model::name_tree r;
     r.current(n);
     return r;
 }
 
-dogen::yarn::name_tree
-mock_name_tree_shared_ptr(const dogen::yarn::name& n) {
-    dogen::yarn::name_tree r;
+dogen::yarn::meta_model::name_tree
+mock_name_tree_shared_ptr(const dogen::yarn::meta_model::name& n) {
+    dogen::yarn::meta_model::name_tree r;
     dogen::yarn::helpers::name_factory nf;
     r.current(nf.build_element_name("boost", "shared_ptr"));
     r.are_children_opaque(true);
 
-    dogen::yarn::name_tree c;
+    dogen::yarn::meta_model::name_tree c;
     c.current(n);
-    r.children(std::list<dogen::yarn::name_tree> { c });
+    r.children(std::list<dogen::yarn::meta_model::name_tree> { c });
 
     return r;
 }
 
-std::string mock_unparsed_type(const dogen::yarn::name& n) {
+std::string mock_unparsed_type(const dogen::yarn::meta_model::name& n) {
     std::string r;
     for (const auto& mm : n.location().model_modules())
         r += mm + "::";
@@ -143,18 +144,18 @@ std::string mock_unparsed_type(const dogen::yarn::name& n) {
     return r;
 }
 
-std::string mock_unparsed_type_shared_ptr(const dogen::yarn::name& n) {
+std::string mock_unparsed_type_shared_ptr(const dogen::yarn::meta_model::name& n) {
     std::string r("boost::shared_ptr<");
     r += mock_unparsed_type(n);
     r += ">";
     return r;
 }
 
-dogen::yarn::name_tree mock_name_tree(
+dogen::yarn::meta_model::name_tree mock_name_tree(
     dogen::yarn::test::mock_intermediate_model_factory::attribute_types pt) {
     using namespace dogen::yarn;
 
-    name_tree r;
+    meta_model::name_tree r;
     dogen::yarn::helpers::name_factory nf;
     using test::mock_intermediate_model_factory;
     using attribute_types = mock_intermediate_model_factory::attribute_types;
@@ -168,7 +169,7 @@ dogen::yarn::name_tree mock_name_tree(
         break;
     case attribute_types::boost_variant: {
         r.current(nf.build_element_name("boost", "variant"));
-        r.children(std::list<name_tree> {
+        r.children(std::list<meta_model::name_tree> {
                 mock_name_tree(nf.build_element_name(boolean)),
                 mock_name_tree(nf.build_element_name(unsigned_int))
         });
@@ -179,7 +180,7 @@ dogen::yarn::name_tree mock_name_tree(
         break;
     case attribute_types::std_pair: {
         r.current(nf.build_element_name("std", "pair"));
-        r.children(std::list<name_tree> {
+        r.children(std::list<meta_model::name_tree> {
                 mock_name_tree(nf.build_element_name(boolean)),
                 mock_name_tree(nf.build_element_name(boolean))
         });
@@ -239,49 +240,49 @@ std::list<std::string> make_internal_modules(const unsigned int module_n) {
     return r;
 }
 
-dogen::yarn::builtin make_builtin(const std::string& simple_name) {
+dogen::yarn::meta_model::builtin make_builtin(const std::string& simple_name) {
     dogen::yarn::helpers::name_builder b;
     b.simple_name(simple_name);
 
-    dogen::yarn::builtin r;
+    dogen::yarn::meta_model::builtin r;
     r.name(b.build());
     return r;
 }
 
-void populate_object(dogen::yarn::object& o, const unsigned int i,
-    const dogen::yarn::name& model_name, const unsigned int module_n,
-    const dogen::yarn::origin_types ot) {
+void populate_object(dogen::yarn::meta_model::object& o, const unsigned int i,
+    const dogen::yarn::meta_model::name& model_name, const unsigned int module_n,
+    const dogen::yarn::meta_model::origin_types ot) {
 
     const auto sn(type_name(i));
     const auto ipp(make_internal_modules(module_n));
 
     dogen::yarn::helpers::name_factory nf;
-    dogen::yarn::name n(nf.build_element_in_model(model_name, sn, ipp));
+    dogen::yarn::meta_model::name n(nf.build_element_in_model(model_name, sn, ipp));
 
     o.name(n);
     o.documentation(documentation);
     o.origin_type(ot);
 }
 
-void populate_simple_model_attributes(dogen::yarn::intermediate_model& m,
-    const unsigned int n, const dogen::yarn::origin_types ot) {
+void populate_simple_model_attributes(dogen::yarn::meta_model::intermediate_model& m,
+    const unsigned int n, const dogen::yarn::meta_model::origin_types ot) {
     m.name(mock_model_name(n));
     m.origin_type(ot);
 }
 
-dogen::yarn::attribute mock_attribute(const dogen::yarn::name& owning_element,
+dogen::yarn::meta_model::attribute mock_attribute(const dogen::yarn::meta_model::name& owning_element,
     const bool types_parsed, const unsigned int n = 0,
     const dogen::yarn::test::mock_intermediate_model_factory::
     attribute_types pt =
     dogen::yarn::test::mock_intermediate_model_factory::attribute_types::
     unsigned_int,
-    boost::optional<dogen::yarn::name> name =
-    boost::optional<dogen::yarn::name>()) {
+    boost::optional<dogen::yarn::meta_model::name> name =
+    boost::optional<dogen::yarn::meta_model::name>()) {
 
     dogen::yarn::helpers::name_factory f;
     const auto pn(f.build_attribute_name(owning_element, attribute_name(n)));
 
-    dogen::yarn::attribute r;
+    dogen::yarn::meta_model::attribute r;
     r.name(pn);
     r.documentation(documentation);
 
@@ -315,8 +316,8 @@ void add_attribute(StatefulAndNameable& sn, const bool attributes_indexed,
     attribute_types pt =
     dogen::yarn::test::mock_intermediate_model_factory::attribute_types::
     unsigned_int,
-    boost::optional<dogen::yarn::name> name =
-    boost::optional<dogen::yarn::name>()) {
+    boost::optional<dogen::yarn::meta_model::name> name =
+    boost::optional<dogen::yarn::meta_model::name>()) {
 
 
     const auto p(mock_attribute(sn.name(), types_parsed, n, pt, name));
@@ -329,7 +330,7 @@ void add_attribute(StatefulAndNameable& sn, const bool attributes_indexed,
 const bool add_leaf(true);
 
 void model_concept(const bool attributes_indexed,
-    dogen::yarn::object& o, const dogen::yarn::concept& c) {
+    dogen::yarn::meta_model::object& o, const dogen::yarn::meta_model::concept& c) {
 
     o.modeled_concepts().push_back(c.name());
     if (attributes_indexed) {
@@ -341,9 +342,9 @@ void model_concept(const bool attributes_indexed,
 }
 
 void parent_to_child(const bool attributes_indexed,
-    dogen::yarn::object& parent,
-    dogen::yarn::object& child,
-    dogen::yarn::object& root_parent,
+    dogen::yarn::meta_model::object& parent,
+    dogen::yarn::meta_model::object& child,
+    dogen::yarn::meta_model::object& root_parent,
     const bool add_leaf_relationship = true) {
 
     child.parents().push_back(parent.name());
@@ -368,7 +369,7 @@ void parent_to_child(const bool attributes_indexed,
 }
 
 void parent_to_child(const bool attributes_indexed,
-    dogen::yarn::object& parent, dogen::yarn::object& child,
+    dogen::yarn::meta_model::object& parent, dogen::yarn::meta_model::object& child,
     const bool add_leaf_relationship = true) {
     parent_to_child(attributes_indexed, parent, child, parent,
         add_leaf_relationship);
@@ -380,8 +381,8 @@ void insert_nameable(std::unordered_map<std::string, Nameable>& map,
     map.insert(std::make_pair(n.name().id(), n));
 }
 
-void insert_object(dogen::yarn::intermediate_model& m,
-    const dogen::yarn::object& o) {
+void insert_object(dogen::yarn::meta_model::intermediate_model& m,
+    const dogen::yarn::meta_model::object& o) {
     m.objects().insert(std::make_pair(o.name().id(), o));
 }
 
@@ -507,13 +508,13 @@ simple_attribute_name(const unsigned int n) const {
     return ::attribute_name(n);
 }
 
-name mock_intermediate_model_factory::
+meta_model::name mock_intermediate_model_factory::
 model_name(const unsigned int n) const {
     return ::mock_model_name(n);
 }
 
 bool mock_intermediate_model_factory::
-is_model_n(const unsigned int n, const name& name) const {
+is_model_n(const unsigned int n, const meta_model::name& name) const {
     const auto mmp(name.location().model_modules());
     if (mmp.empty())
         return false;
@@ -528,12 +529,12 @@ is_model_n(const unsigned int n, const std::string& name) const {
 }
 
 bool mock_intermediate_model_factory::
-is_type_name_n(const unsigned int n, const name& name) const {
+is_type_name_n(const unsigned int n, const meta_model::name& name) const {
     return is_type_name_n(n, name.simple());
 }
 
 bool mock_intermediate_model_factory::
-is_concept_name_n(const unsigned int n, const name& name) const {
+is_concept_name_n(const unsigned int n, const meta_model::name& name) const {
     return concept_name(n) == name.simple();
 }
 
@@ -548,14 +549,14 @@ is_module_n(const unsigned int n, const std::string& name) const {
 }
 
 bool mock_intermediate_model_factory::is_type_name_n_visitor(
-    const unsigned int n, const name& name) const {
+    const unsigned int n, const meta_model::name& name) const {
     return
         boost::contains(name.simple(), type_name(n)) &&
         boost::contains(name.simple(), visitor_postfix);
 }
 
 void mock_intermediate_model_factory::handle_model_module(
-    const bool add_model_module, yarn::intermediate_model& m) const {
+    const bool add_model_module, meta_model::intermediate_model& m) const {
     if (!add_model_module)
         return;
 
@@ -563,17 +564,17 @@ void mock_intermediate_model_factory::handle_model_module(
     insert_nameable(m.modules(), module);
 }
 
-builtin mock_intermediate_model_factory::
-make_builtin(const unsigned int i, const name& model_name,
-        const origin_types ot, const unsigned int module_n) const {
+meta_model::builtin mock_intermediate_model_factory::
+make_builtin(const unsigned int i, const meta_model::name& model_name,
+    const meta_model::origin_types ot, const unsigned int module_n) const {
 
     const auto sn(type_name(i));
     const auto ipp(make_internal_modules(module_n));
 
-    dogen::yarn::helpers::name_factory nf;
-    dogen::yarn::name n(nf.build_element_in_model(model_name, sn, ipp));
+    helpers::name_factory nf;
+    meta_model::name n(nf.build_element_in_model(model_name, sn, ipp));
 
-    builtin r;
+    meta_model::builtin r;
     r.name(n);
     r.documentation(documentation);
     r.origin_type(ot);
@@ -581,11 +582,12 @@ make_builtin(const unsigned int i, const name& model_name,
     return r;
 }
 
-object mock_intermediate_model_factory::make_value_object(const unsigned int i,
-    const name& model_name, const origin_types ot,
+meta_model::object
+mock_intermediate_model_factory::make_value_object(const unsigned int i,
+    const meta_model::name& model_name, const meta_model::origin_types ot,
     const unsigned int module_n) const {
 
-    object r;
+    meta_model::object r;
     populate_object(r, i, model_name, module_n, ot);
 
     if (flags_.tagged())
@@ -594,27 +596,31 @@ object mock_intermediate_model_factory::make_value_object(const unsigned int i,
     return r;
 }
 
-object mock_intermediate_model_factory::make_value_object_with_attribute(
-    const unsigned int i, const name& model_name,
-    const origin_types ot, const unsigned int module_n) const {
+meta_model::object
+mock_intermediate_model_factory::make_value_object_with_attribute(
+    const unsigned int i, const meta_model::name& model_name,
+    const meta_model::origin_types ot, const unsigned int module_n) const {
 
     auto r(make_value_object(i, model_name, ot, module_n));
     add_attribute(r, flags_.attributes_indexed(), flags_.types_parsed());
     return r;
 }
 
-object mock_intermediate_model_factory::make_value_object(unsigned int i,
-    const origin_types ot, const unsigned int module_n) const {
+meta_model::object
+mock_intermediate_model_factory::make_value_object(unsigned int i,
+    const meta_model::origin_types ot, const unsigned int module_n) const {
     return make_value_object(i, mock_model_name(i), ot, module_n);
 }
 
-concept mock_intermediate_model_factory::make_concept(const unsigned int i,
-    const name& model_name, const origin_types ot) const {
+meta_model::concept
+mock_intermediate_model_factory::make_concept(const unsigned int i,
+    const meta_model::name& model_name,
+    const meta_model::origin_types ot) const {
 
-    dogen::yarn::helpers::name_factory nf;
-    dogen::yarn::name n(nf.build_element_in_model(model_name, concept_name(i)));
+    helpers::name_factory nf;
+    meta_model::name n(nf.build_element_in_model(model_name, concept_name(i)));
 
-    concept r;
+    meta_model::concept r;
     r.name(n);
     r.documentation(documentation);
     r.origin_type(ot);
@@ -625,27 +631,27 @@ concept mock_intermediate_model_factory::make_concept(const unsigned int i,
     return r;
 }
 
-enumeration mock_intermediate_model_factory::
-make_enumeration(const unsigned int i, const name& model_name,
-    const origin_types ot, const unsigned int module_n) const {
+meta_model::enumeration mock_intermediate_model_factory::
+make_enumeration(const unsigned int i, const meta_model::name& model_name,
+    const meta_model::origin_types ot, const unsigned int module_n) const {
 
     const auto sn(type_name(i));
     const auto ipp(make_internal_modules(module_n));
 
-    dogen::yarn::helpers::name_factory nf;
-    dogen::yarn::name n(nf.build_element_in_model(model_name, sn, ipp));
+    helpers::name_factory nf;
+    meta_model::name n(nf.build_element_in_model(model_name, sn, ipp));
 
-    enumeration r;
+    meta_model::enumeration r;
     r.name(n);
     r.documentation(documentation);
     r.origin_type(ot);
 
-    name ue;
+    meta_model::name ue;
     ue.simple(unsigned_int);
     r.underlying_element(ue);
 
-    const auto lambda([&](const unsigned int pos) -> enumerator {
-            enumerator r;
+    const auto lambda([&](const unsigned int pos) -> meta_model::enumerator {
+            meta_model::enumerator r;
             r.name(nf.build_attribute_name(n, type_name(pos)));;
             r.value(boost::lexical_cast<std::string>(pos));
             return r;
@@ -660,17 +666,18 @@ make_enumeration(const unsigned int i, const name& model_name,
     return r;
 }
 
-exception mock_intermediate_model_factory::make_exception(const unsigned int i,
-    const name& model_name, const origin_types ot,
+meta_model::exception
+mock_intermediate_model_factory::make_exception(const unsigned int i,
+    const meta_model::name& model_name, const meta_model::origin_types ot,
     const unsigned int module_n) const {
 
     const auto sn(type_name(i));
     const auto ipp(make_internal_modules(module_n));
 
-    dogen::yarn::helpers::name_factory nf;
-    dogen::yarn::name n(nf.build_element_in_model(model_name, sn, ipp));
+    helpers::name_factory nf;
+    meta_model::name n(nf.build_element_in_model(model_name, sn, ipp));
 
-    exception r;
+    meta_model::exception r;
     r.name(n);
     r.documentation(documentation);
     r.origin_type(ot);
@@ -681,9 +688,10 @@ exception mock_intermediate_model_factory::make_exception(const unsigned int i,
     return r;
 }
 
-module mock_intermediate_model_factory::make_module(const yarn::name& n,
-    const origin_types ot, const std::string& documentation) const {
-    module r;
+meta_model::module
+mock_intermediate_model_factory::make_module(const meta_model::name& n,
+    const meta_model::origin_types ot, const std::string& documentation) const {
+    meta_model::module r;
     r.name(n);
     r.documentation(documentation);
     r.origin_type(ot);
@@ -694,8 +702,9 @@ module mock_intermediate_model_factory::make_module(const yarn::name& n,
     return r;
 }
 
-module mock_intermediate_model_factory::make_module(const unsigned int module_n,
-    const yarn::name& model_name, const origin_types ot,
+meta_model::module
+mock_intermediate_model_factory::make_module(const unsigned int module_n,
+    const meta_model::name& model_name, const meta_model::origin_types ot,
     const std::list<std::string>& internal_modules,
     const std::string& documentation) const {
 
@@ -705,7 +714,8 @@ module mock_intermediate_model_factory::make_module(const unsigned int module_n,
     return make_module(n, ot, documentation);
 }
 
-name mock_intermediate_model_factory::make_name(const unsigned int model_n,
+meta_model::name
+mock_intermediate_model_factory::make_name(const unsigned int model_n,
     const unsigned int simple_n) const {
 
     helpers::name_builder b;
@@ -714,34 +724,36 @@ name mock_intermediate_model_factory::make_name(const unsigned int model_n,
     return b.build();
 }
 
-intermediate_model mock_intermediate_model_factory::make_empty_model(
-    const origin_types ot, const unsigned int n,
+meta_model::intermediate_model
+mock_intermediate_model_factory::make_empty_model(
+    const meta_model::origin_types ot, const unsigned int n,
     const bool add_model_module) const {
-    intermediate_model r;
+    meta_model::intermediate_model r;
     populate_simple_model_attributes(r, n, ot);
     handle_model_module(add_model_module, r);
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_single_type_model(const origin_types ot, const unsigned int n,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_single_type_model(const meta_model::origin_types ot, const unsigned int n,
     const object_types objt, const bool add_model_module) const {
     return make_multi_type_model(n, 1, ot, objt, 0, add_model_module);
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_single_type_model_in_module(const origin_types ot, const unsigned int n,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_single_type_model_in_module(const meta_model::origin_types ot,
+    const unsigned int n,
     const object_types objt, const unsigned int mod_n,
     const bool add_model_module) const {
     return make_multi_type_model(n, 1, ot, objt, mod_n, add_model_module);
 }
 
-intermediate_model mock_intermediate_model_factory::
+meta_model::intermediate_model mock_intermediate_model_factory::
 make_multi_type_model(const unsigned int n, const unsigned int type_n,
-    const origin_types ot, const object_types objt,
+    const meta_model::origin_types ot, const object_types objt,
     const unsigned int mod_n, const bool add_model_module) const {
 
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    meta_model::intermediate_model r(make_empty_model(ot, n, add_model_module));
 
     std::list<std::string> internal_modules;
     for (unsigned int i(0); i < mod_n; ++i) {
@@ -778,15 +790,15 @@ make_multi_type_model(const unsigned int n, const unsigned int type_n,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_single_concept_model(const origin_types ot, const unsigned int n,
-    const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_single_concept_model(const meta_model::origin_types ot,
+    const unsigned int n, const bool add_model_module) const {
+    meta_model::intermediate_model r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c(make_concept(0, r.name(), ot));
+    auto c(make_concept(0, r.name(), ot));
     add_attribute(c, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c);
 
@@ -799,19 +811,19 @@ make_single_concept_model(const origin_types ot, const unsigned int n,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_first_degree_concepts_model(const origin_types ot, const unsigned int n,
-    const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_first_degree_concepts_model(const meta_model::origin_types ot,
+    const unsigned int n, const bool add_model_module) const {
+    meta_model::intermediate_model r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
-    concept c1(make_concept(1, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     add_attribute(c1, flags_.attributes_indexed(), flags_.types_parsed(), 1);
     c1.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c1);
@@ -832,24 +844,25 @@ make_first_degree_concepts_model(const origin_types ot, const unsigned int n,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_second_degree_concepts_model(const origin_types ot, const unsigned int n,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_second_degree_concepts_model(const meta_model::origin_types ot,
+    const unsigned int n,
     const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    meta_model::intermediate_model r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
-    concept c1(make_concept(1, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     add_attribute(c1, flags_.attributes_indexed(), flags_.types_parsed(), 1);
     c1.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c1);
 
-    concept c2(make_concept(2, r.name(), ot));
+    auto c2(make_concept(2, r.name(), ot));
     add_attribute(c2, flags_.attributes_indexed(), flags_.types_parsed(), 2);
 
     if (flags_.concepts_indexed())
@@ -881,23 +894,23 @@ make_second_degree_concepts_model(const origin_types ot, const unsigned int n,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_multiple_inheritance_concepts_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_multiple_inheritance_concepts_model(const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    meta_model::intermediate_model r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
-    concept c1(make_concept(1, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     add_attribute(c1, flags_.attributes_indexed(), flags_.types_parsed(), 1);
     insert_nameable(r.concepts(), c1);
 
-    concept c2(make_concept(1, r.name(), ot));
+    auto c2(make_concept(1, r.name(), ot));
     add_attribute(c2, flags_.attributes_indexed(), flags_.types_parsed(), 2);
     c2.refines().push_back(c0.name());
     c2.refines().push_back(c1.name());
@@ -909,29 +922,29 @@ make_multiple_inheritance_concepts_model(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_diamond_inheritance_concepts_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_diamond_inheritance_concepts_model(const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    auto r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
-    concept c1(make_concept(1, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     add_attribute(c1, flags_.attributes_indexed(), flags_.types_parsed(), 1);
     c1.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c1);
 
-    concept c2(make_concept(2, r.name(), ot));
+    auto c2(make_concept(2, r.name(), ot));
     add_attribute(c2, flags_.attributes_indexed(), flags_.types_parsed(), 2);
     c2.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c2);
 
-    concept c3(make_concept(3, r.name(), ot));
+    auto c3(make_concept(3, r.name(), ot));
     add_attribute(c3, flags_.attributes_indexed(), flags_.types_parsed(), 3);
     if (flags_.concepts_indexed())
         c3.refines().push_back(c0.name());
@@ -951,15 +964,15 @@ make_diamond_inheritance_concepts_model(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_object_with_parent_that_models_concept(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_object_with_parent_that_models_concept(const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    auto r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
@@ -976,19 +989,20 @@ make_object_with_parent_that_models_concept(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_object_with_parent_that_models_a_refined_concept(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_object_with_parent_that_models_a_refined_concept(
+    const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    auto r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
-    concept c1(make_concept(1, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     add_attribute(c1, flags_.attributes_indexed(), flags_.types_parsed(), 1);
     c1.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c1);
@@ -1009,26 +1023,26 @@ make_object_with_parent_that_models_a_refined_concept(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_concept_that_refines_missing_concept(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_concept_that_refines_missing_concept(const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
-    concept c0(make_concept(0, r.name(), ot));
-    concept c1(make_concept(1, r.name(), ot));
+    auto r(make_empty_model(ot, n, add_model_module));
+    auto c0(make_concept(0, r.name(), ot));
+    auto c1(make_concept(1, r.name(), ot));
     c1.refines().push_back(c0.name());
     insert_nameable(r.concepts(), c1);
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_object_that_models_missing_concept(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_object_that_models_missing_concept(const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    auto r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
 
     auto o0(make_value_object(0, r.name(), ot));
@@ -1038,15 +1052,16 @@ make_object_that_models_missing_concept(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-make_object_that_models_concept_with_missing_parent(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+make_object_that_models_concept_with_missing_parent(
+    const meta_model::origin_types ot,
     const unsigned int n, const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, n, add_model_module));
+    auto r(make_empty_model(ot, n, add_model_module));
 
     const auto ui(::make_builtin(unsigned_int));
     r.builtins().insert(std::make_pair(ui.name().id(), ui));
 
-    concept c0(make_concept(0, r.name(), ot));
+    auto c0(make_concept(0, r.name(), ot));
     add_attribute(c0, flags_.attributes_indexed(), flags_.types_parsed());
     insert_nameable(r.concepts(), c0);
 
@@ -1061,18 +1076,19 @@ make_object_that_models_concept_with_missing_parent(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_both_transparent_and_opaque_associations(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_both_transparent_and_opaque_associations(
+    const meta_model::origin_types ot,
     const bool add_model_module) const {
-    intermediate_model r(make_empty_model(ot, 0, add_model_module));
+    auto r(make_empty_model(ot, 0, add_model_module));
     const auto mn(mock_model_name(0));
     auto o1(make_value_object(1, mn, ot));
     insert_object(r, o1);
 
-    object o0(make_value_object(0, mn, ot));
+    auto o0(make_value_object(0, mn, ot));
     const auto vo(attribute_types::value_object);
     const auto tp(flags_.types_parsed());
-    attribute p0(mock_attribute(o0.name(), tp, 0, vo, o1.name()));
+    auto p0(mock_attribute(o0.name(), tp, 0, vo, o1.name()));
     o0.local_attributes().push_back(p0);
     if (flags_.attributes_indexed())
         o0.all_attributes().push_back(p0);
@@ -1081,13 +1097,13 @@ object_with_both_transparent_and_opaque_associations(const origin_types ot,
         o0.transparent_associations().push_back(o1.name());
 
     dogen::yarn::helpers::name_factory nf;
-    object o2;
+    meta_model::object o2;
     o2.name(nf.build_element_name("boost", "shared_ptr"));
-    o2.object_type(dogen::yarn::object_types::smart_pointer);
+    o2.object_type(dogen::yarn::meta_model::object_types::smart_pointer);
     insert_object(r, o2);
 
     const auto bsp(attribute_types::boost_shared_ptr);
-    attribute p1(mock_attribute(o0.name(), tp, 1, bsp, o1.name()));
+    auto p1(mock_attribute(o0.name(), tp, 1, bsp, o1.name()));
     o0.local_attributes().push_back(p1);
     if (flags_.attributes_indexed())
         o0.all_attributes().push_back(p1);
@@ -1095,10 +1111,10 @@ object_with_both_transparent_and_opaque_associations(const origin_types ot,
     if (flags_.associations_indexed())
         o0.opaque_associations().push_back(o1.name());
 
-    object o3(make_value_object(3, mn, ot));
+    auto o3(make_value_object(3, mn, ot));
     insert_object(r, o3);
 
-    attribute p2(mock_attribute(o0.name(), tp, 2, bsp, o3.name()));
+    auto p2(mock_attribute(o0.name(), tp, 2, bsp, o3.name()));
     o0.local_attributes().push_back(p2);
     if (flags_.attributes_indexed())
         o0.all_attributes().push_back(p2);
@@ -1106,11 +1122,11 @@ object_with_both_transparent_and_opaque_associations(const origin_types ot,
     if (flags_.associations_indexed())
         o0.opaque_associations().push_back(o3.name());
 
-    object o4;
+    meta_model::object o4;
     o4.name(nf.build_element_name("std", "string"));
     insert_object(r, o4);
 
-    attribute p3(mock_attribute(o0.name(), tp, 3, vo, o4.name()));
+    auto p3(mock_attribute(o0.name(), tp, 3, vo, o4.name()));
     o0.local_attributes().push_back(p3);
 
     if (flags_.attributes_indexed())
@@ -1123,13 +1139,14 @@ object_with_both_transparent_and_opaque_associations(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_attribute(const origin_types ot, const object_types objt,
-    const attribute_types pt, const bool add_model_module) const {
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_attribute(const meta_model::origin_types ot,
+    const object_types objt, const attribute_types pt,
+    const bool add_model_module) const {
     const auto mn(mock_model_name(0));
     auto o1(make_value_object(1, mn, ot));
 
-    object o0;
+    meta_model::object o0;
     if (objt == object_types::value_object)
         o0 = make_value_object(0, mn, ot);
     else {
@@ -1138,13 +1155,13 @@ object_with_attribute(const origin_types ot, const object_types objt,
     }
 
     const auto tp(flags_.types_parsed());
-    attribute p(mock_attribute(o0.name(), tp, 0, pt, o1.name()));
+    auto p(mock_attribute(o0.name(), tp, 0, pt, o1.name()));
     o0.local_attributes().push_back(p);
     if (flags_.attributes_indexed())
         o0.all_attributes().push_back(p);
 
-    dogen::yarn::helpers::name_factory nf;
-    intermediate_model r(make_empty_model(ot, 0, add_model_module));
+    helpers::name_factory nf;
+    auto r(make_empty_model(ot, 0, add_model_module));
     if (pt == attribute_types::value_object ||
         pt == attribute_types::boost_shared_ptr) {
         insert_object(r, o1);
@@ -1154,7 +1171,7 @@ object_with_attribute(const origin_types ot, const object_types objt,
     }
 
     if (pt == attribute_types::unsigned_int || pt == attribute_types::boolean) {
-        builtin ui;
+        meta_model::builtin ui;
         ui.name(p.parsed_type().current());
         insert_nameable(r.builtins(), ui);
 
@@ -1162,9 +1179,9 @@ object_with_attribute(const origin_types ot, const object_types objt,
             o0.transparent_associations().push_back(ui.name());
 
     } else if (pt == attribute_types::boost_shared_ptr) {
-        object o2;
+        meta_model::object o2;
         o2.name(nf.build_element_name("boost", "shared_ptr"));
-        o2.object_type(dogen::yarn::object_types::smart_pointer);
+        o2.object_type(meta_model::object_types::smart_pointer);
         insert_object(r, o2);
 
         if (flags_.associations_indexed())
@@ -1177,7 +1194,7 @@ object_with_attribute(const origin_types ot, const object_types objt,
         if (flags_.associations_indexed())
             o0.transparent_associations().push_back(b.name());
 
-        object o2;
+        meta_model::object o2;
         o2.name(nf.build_element_name("std", "pair"));
 
         if (flags_.associations_indexed())
@@ -1197,7 +1214,7 @@ object_with_attribute(const origin_types ot, const object_types objt,
         if (flags_.associations_indexed())
             o0.transparent_associations().push_back(ui.name());
 
-        object o2;
+        meta_model::object o2;
         o2.name(nf.build_element_name("boost", "variant"));
         insert_object(r, o2);
 
@@ -1205,7 +1222,7 @@ object_with_attribute(const origin_types ot, const object_types objt,
             o0.transparent_associations().push_back(o2.name());
 
     } else if (pt == attribute_types::std_string) {
-        object o2;
+        meta_model::object o2;
         o2.name(nf.build_element_name("std", "string"));
         insert_object(r, o2);
 
@@ -1216,32 +1233,33 @@ object_with_attribute(const origin_types ot, const object_types objt,
     return r;
 }
 
-std::array<intermediate_model, 2>
+std::array<meta_model::intermediate_model, 2>
 mock_intermediate_model_factory::object_with_attribute_type_in_different_model(
     const bool add_model_module) const {
-    const auto tg(origin_types::target);
+    const auto tg(meta_model::origin_types::target);
     auto o0(make_value_object(0, tg));
 
-    const auto npr(origin_types::non_proxy_reference);
+    const auto npr(meta_model::origin_types::non_proxy_reference);
     auto o1(make_value_object(1, npr));
 
     add_attribute(o0, flags_.attributes_indexed(), flags_.types_parsed(),
         0, attribute_types::value_object, o1.name());
 
-    intermediate_model m0(make_empty_model(tg, 0, add_model_module));
+    auto m0(make_empty_model(tg, 0, add_model_module));
     insert_object(m0, o0);
     handle_model_module(add_model_module, m0);
 
-    intermediate_model m1(make_empty_model(npr, 1, add_model_module));
+    auto m1(make_empty_model(npr, 1, add_model_module));
     insert_object(m1, o1);
     handle_model_module(add_model_module, m1);
 
-    return std::array<intermediate_model, 2> {{ m0, m1 }};
+    return std::array<meta_model::intermediate_model, 2> {{ m0, m1 }};
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_missing_attribute_type(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_missing_attribute_type(const meta_model::origin_types ot,
     const bool add_model_module) const {
+    using meta_model::origin_types;
     auto o0(make_value_object(0, origin_types::target));
     auto o1(make_value_object(1, origin_types::non_proxy_reference));
 
@@ -1251,14 +1269,14 @@ object_with_missing_attribute_type(const origin_types ot,
     if (flags_.associations_indexed())
         o0.transparent_associations().push_back(o1.name());
 
-    intermediate_model r(make_empty_model(ot, 0, add_model_module));
+    auto r(make_empty_model(ot, 0, add_model_module));
     insert_object(r, o0);
 
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_parent_in_the_same_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_parent_in_the_same_model(const meta_model::origin_types ot,
     const bool has_attribute, const bool add_model_module) const {
     const auto mn(mock_model_name(0));
 
@@ -1287,8 +1305,8 @@ object_with_parent_in_the_same_model(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_missing_parent_in_the_same_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_missing_parent_in_the_same_model(const meta_model::origin_types ot,
     const bool add_model_module) const {
     const auto mn(mock_model_name(0));
     auto o0(make_value_object(0, mn, ot));
@@ -1301,12 +1319,12 @@ object_with_missing_parent_in_the_same_model(const origin_types ot,
     return r;
 }
 
-std::array<intermediate_model, 2> mock_intermediate_model_factory::
+std::array<meta_model::intermediate_model, 2> mock_intermediate_model_factory::
 object_with_parent_in_different_models(const bool add_model_module) const {
-    const auto tg(origin_types::target);
+    const auto tg(meta_model::origin_types::target);
     auto o0(make_value_object(0, tg));
 
-    const auto npr(origin_types::non_proxy_reference);
+    const auto npr(meta_model::origin_types::non_proxy_reference);
     auto o1(make_value_object(1, npr));
     parent_to_child(flags_.attributes_indexed(), o1, o0);
     o1.is_parent(true);
@@ -1317,11 +1335,11 @@ object_with_parent_in_different_models(const bool add_model_module) const {
     auto m1(make_empty_model(npr, 1, add_model_module));
     insert_object(m1, o1);
 
-    return std::array<intermediate_model, 2> {{ m0, m1 }};
+    return std::array<meta_model::intermediate_model, 2> {{ m0, m1 }};
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_three_children_in_same_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_three_children_in_same_model(const meta_model::origin_types ot,
     const bool add_model_module) const {
     const auto mn(mock_model_name(0));
     auto o0(make_value_object(0, mn, ot));
@@ -1344,8 +1362,8 @@ object_with_three_children_in_same_model(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_third_degree_parent_in_same_model(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_third_degree_parent_in_same_model(const meta_model::origin_types ot,
     const bool has_attribute, const bool add_model_module) const {
     const auto mn(mock_model_name(0));
 
@@ -1399,8 +1417,8 @@ object_with_third_degree_parent_in_same_model(const origin_types ot,
     return r;
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_third_degree_parent_missing(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_third_degree_parent_missing(const meta_model::origin_types ot,
     const bool add_model_module) const {
     const auto mn(mock_model_name(0));
     auto o0(make_value_object(0, mn, ot));
@@ -1429,9 +1447,10 @@ object_with_third_degree_parent_missing(const origin_types ot,
     return r;
 }
 
-std::array<intermediate_model, 4> mock_intermediate_model_factory::
+std::array<meta_model::intermediate_model, 4> mock_intermediate_model_factory::
 object_with_third_degree_parent_in_different_models(
     const bool add_model_module) const {
+    using meta_model::origin_types;
     const auto npr(origin_types::non_proxy_reference);
     auto o0(make_value_object(0, origin_types::target));
     auto o1(make_value_object(1, npr));
@@ -1463,12 +1482,13 @@ object_with_third_degree_parent_in_different_models(
     auto m3(make_empty_model(npr, 3, add_model_module));
     insert_object(m3, o3);
 
-    return std::array<intermediate_model, 4>{{ m0, m1, m2, m3 }};
+    return std::array<meta_model::intermediate_model, 4>{{ m0, m1, m2, m3 }};
 }
 
-std::array<intermediate_model, 4> mock_intermediate_model_factory::
+std::array<meta_model::intermediate_model, 4> mock_intermediate_model_factory::
 object_with_missing_third_degree_parent_in_different_models(
     const bool add_model_module) const {
+    using meta_model::origin_types;
     const auto npr(origin_types::non_proxy_reference);
     auto o0(make_value_object(0, origin_types::target));
     auto o1(make_value_object(1, npr));
@@ -1497,17 +1517,18 @@ object_with_missing_third_degree_parent_in_different_models(
     auto m2(make_empty_model(npr, 2, add_model_module));
     insert_object(m2, o2);
 
-    return std::array<intermediate_model, 4>{{ m0, m1, m2 }};
+    return std::array<meta_model::intermediate_model, 4>{{ m0, m1, m2 }};
 }
 
-intermediate_model mock_intermediate_model_factory::
-object_with_group_of_attributes_of_different_types(const origin_types ot,
+meta_model::intermediate_model mock_intermediate_model_factory::
+object_with_group_of_attributes_of_different_types(
+    const meta_model::origin_types ot,
     const bool repeat_group, const bool add_model_module) const {
     auto r(make_empty_model(ot, 0, add_model_module));
     const auto mn(r.name());
 
     auto o0(make_value_object(0, mn, ot));
-    const auto lambda([&](const attribute& p) {
+    const auto lambda([&](const meta_model::attribute& p) {
             o0.local_attributes().push_back(p);
             if (flags_.attributes_indexed())
                 o0.all_attributes().push_back(p);
@@ -1522,7 +1543,7 @@ object_with_group_of_attributes_of_different_types(const origin_types ot,
 
     auto p1(mock_attribute(o0.name(), tp, 1));
     lambda(p1);
-    builtin ui;
+    meta_model::builtin ui;
     ui.name(p1.parsed_type().current());
     insert_nameable(r.builtins(), ui);
 
@@ -1532,10 +1553,10 @@ object_with_group_of_attributes_of_different_types(const origin_types ot,
     auto p2(mock_attribute(o0.name(), tp, 2, bsp, o3.name()));
     lambda(p2);
 
-    object o2;
+    meta_model::object o2;
     dogen::yarn::helpers::name_factory nf;
     o2.name(nf.build_element_name("boost", "shared_ptr"));
-    o2.object_type(dogen::yarn::object_types::smart_pointer);
+    o2.object_type(meta_model::object_types::smart_pointer);
     insert_object(r, o2);
 
     auto o4(make_value_object(4, mn, ot));
diff --git a/projects/yarn/src/test/yarn_file_asserter.cpp b/projects/yarn/src/test/yarn_file_asserter.cpp
index 1ba831041..c5e86dec3 100644
--- a/projects/yarn/src/test/yarn_file_asserter.cpp
+++ b/projects/yarn/src/test/yarn_file_asserter.cpp
@@ -23,8 +23,8 @@
 #include "dogen/utility/serialization/xml_helper.hpp"
 #include "dogen/utility/filesystem/file.hpp"
 #include "dogen/utility/exception/utility_exception.hpp"
-#include "dogen/yarn/io/intermediate_model_io.hpp"
-#include "dogen/yarn/serialization/intermediate_model_ser.hpp"
+#include "dogen/yarn/io/meta_model/intermediate_model_io.hpp"
+#include "dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp"
 #include "dogen/yarn/test/yarn_file_asserter.hpp"
 
 namespace  {
@@ -46,10 +46,10 @@ bool yarn_file_asserter::is_assertable(boost::filesystem::path path) const {
     return (path.extension().string() == yarn_xml_extension);
 }
 
-intermediate_model yarn_file_asserter::
+meta_model::intermediate_model yarn_file_asserter::
 read_xml(boost::filesystem::path path) const {
     using utility::serialization::xml_deserialize;
-    return xml_deserialize<intermediate_model>(path);
+    return xml_deserialize<meta_model::intermediate_model>(path);
 }
 
 bool yarn_file_asserter::assert_file(boost::filesystem::path expected,
diff --git a/projects/yarn/src/test_data/concept_td.cpp b/projects/yarn/src/test_data/concept_td.cpp
deleted file mode 100644
index 26ed27efa..000000000
--- a/projects/yarn/src/test_data/concept_td.cpp
+++ /dev/null
@@ -1,104 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/concept_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/attribute_td.hpp"
-
-namespace {
-
-dogen::yarn::attribute
-create_dogen_yarn_attribute(const unsigned int position) {
-    return dogen::yarn::attribute_generator::create(position);
-}
-
-std::list<dogen::yarn::attribute> create_std_list_dogen_yarn_attribute(unsigned int position) {
-    std::list<dogen::yarn::attribute> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_attribute(position + i));
-    }
-    return r;
-}
-
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
-}
-
-std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > create_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(unsigned int position) {
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_name(position + i), create_std_list_dogen_yarn_attribute(position + i)));
-    }
-    return r;
-}
-
-bool create_bool(const unsigned int position) {
-    return (position % 2) != 0;
-}
-
-std::list<dogen::yarn::name> create_std_list_dogen_yarn_name(unsigned int position) {
-    std::list<dogen::yarn::name> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_name(position + i));
-    }
-    return r;
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-concept_generator::concept_generator() : position_(0) { }
-
-void concept_generator::
-populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
-    v.all_attributes(create_std_list_dogen_yarn_attribute(position + 0));
-    v.local_attributes(create_std_list_dogen_yarn_attribute(position + 1));
-    v.inherited_attributes(create_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(position + 2));
-    v.is_immutable(create_bool(position + 3));
-    v.is_fluent(create_bool(position + 4));
-    v.refines(create_std_list_dogen_yarn_name(position + 5));
-    v.is_child(create_bool(position + 6));
-}
-
-concept_generator::result_type
-concept_generator::create(const unsigned int position) {
-    concept r;
-    concept_generator::populate(position, r);
-    return r;
-}
-
-concept_generator::result_type*
-concept_generator::create_ptr(const unsigned int position) {
-    concept* p = new concept();
-    concept_generator::populate(position, *p);
-    return p;
-}
-
-concept_generator::result_type
-concept_generator::operator()() {
-    return create(position_++);
-}
-
-} }
diff --git a/projects/yarn/src/test_data/element_td.cpp b/projects/yarn/src/test_data/element_td.cpp
deleted file mode 100644
index b3d77eb10..000000000
--- a/projects/yarn/src/test_data/element_td.cpp
+++ /dev/null
@@ -1,120 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/module_td.hpp"
-#include "dogen/yarn/test_data/object_td.hpp"
-#include "dogen/yarn/test_data/builtin_td.hpp"
-#include "dogen/yarn/test_data/concept_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/visitor_td.hpp"
-#include "dogen/yarn/test_data/exception_td.hpp"
-#include "dogen/yarn/test_data/primitive_td.hpp"
-#include "dogen/yarn/test_data/enumeration_td.hpp"
-#include "dogen/yarn/test_data/origin_types_td.hpp"
-#include "dogen/annotations/test_data/annotation_td.hpp"
-#include "dogen/yarn/test_data/element_properties_td.hpp"
-
-namespace {
-
-std::string create_std_string(const unsigned int position) {
-    std::ostringstream s;
-    s << "a_string_" << position;
-    return s.str();
-}
-
-dogen::annotations::annotation
-create_dogen_annotations_annotation(const unsigned int position) {
-    return dogen::annotations::annotation_generator::create(position);
-}
-
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
-}
-
-dogen::yarn::origin_types
-create_dogen_yarn_origin_types(const unsigned int position) {
-    return dogen::yarn::origin_types_generator::create(position);
-}
-
-boost::optional<dogen::yarn::name>
-create_boost_optional_dogen_yarn_name(unsigned int position) {
-    boost::optional<dogen::yarn::name> r(
-        create_dogen_yarn_name(position));
-    return r;
-}
-
-bool create_bool(const unsigned int position) {
-    return (position % 2) != 0;
-}
-
-std::vector<std::string> create_std_vector_std_string(unsigned int position) {
-    std::vector<std::string> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_string(position + i));
-    }
-    return r;
-}
-
-dogen::yarn::element_properties
-create_dogen_yarn_element_properties(const unsigned int position) {
-    return dogen::yarn::element_properties_generator::create(position);
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-void element_generator::
-populate(const unsigned int position, result_type& v) {
-    v.documentation(create_std_string(position + 0));
-    v.annotation(create_dogen_annotations_annotation(position + 1));
-    v.name(create_dogen_yarn_name(position + 2));
-    v.origin_type(create_dogen_yarn_origin_types(position + 3));
-    v.contained_by(create_boost_optional_dogen_yarn_name(position + 4));
-    v.in_global_module(create_bool(position + 5));
-    v.stereotypes(create_std_vector_std_string(position + 6));
-    v.is_element_extension(create_bool(position + 7));
-    v.element_properties(create_dogen_yarn_element_properties(position + 8));
-}
-
-element_generator::result_type*
-element_generator::create_ptr(const unsigned int position) {
-    if ((position % 7) == 0)
-        return dogen::yarn::concept_generator::create_ptr(position);
-    if ((position % 7) == 1)
-        return dogen::yarn::enumeration_generator::create_ptr(position);
-    if ((position % 7) == 2)
-        return dogen::yarn::exception_generator::create_ptr(position);
-    if ((position % 7) == 3)
-        return dogen::yarn::module_generator::create_ptr(position);
-    if ((position % 7) == 4)
-        return dogen::yarn::object_generator::create_ptr(position);
-    if ((position % 7) == 5)
-        return dogen::yarn::primitive_generator::create_ptr(position);
-    if ((position % 7) == 6)
-        return dogen::yarn::visitor_generator::create_ptr(position);
-    return dogen::yarn::builtin_generator::create_ptr(position);
-}
-
-} }
diff --git a/projects/yarn/src/test_data/helpers/decomposition_result_td.cpp b/projects/yarn/src/test_data/helpers/decomposition_result_td.cpp
index 9e0e2c482..be4d189a5 100644
--- a/projects/yarn/src/test_data/helpers/decomposition_result_td.cpp
+++ b/projects/yarn/src/test_data/helpers/decomposition_result_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/name_tree_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_tree_td.hpp"
 #include "dogen/yarn/test_data/helpers/decomposition_result_td.hpp"
 
 namespace {
@@ -31,44 +31,44 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-std::pair<std::string, dogen::yarn::name>
-create_std_pair_std_string_dogen_yarn_name(unsigned int position) {
-    std::pair<std::string, dogen::yarn::name> r(
+std::pair<std::string, dogen::yarn::meta_model::name>
+create_std_pair_std_string_dogen_yarn_meta_model_name(unsigned int position) {
+    std::pair<std::string, dogen::yarn::meta_model::name> r(
         create_std_string(position),
-        create_dogen_yarn_name(position));
+        create_dogen_yarn_meta_model_name(position));
     return r;
 }
 
-std::list<std::pair<std::string, dogen::yarn::name> > create_std_list_std_pair_std_string_dogen_yarn_name(unsigned int position) {
-    std::list<std::pair<std::string, dogen::yarn::name> > r;
+std::list<std::pair<std::string, dogen::yarn::meta_model::name> > create_std_list_std_pair_std_string_dogen_yarn_meta_model_name(unsigned int position) {
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_std_string_dogen_yarn_name(position + i));
+        r.push_back(create_std_pair_std_string_dogen_yarn_meta_model_name(position + i));
     }
     return r;
 }
 
-dogen::yarn::name_tree
-create_dogen_yarn_name_tree(const unsigned int position) {
-    return dogen::yarn::name_tree_generator::create(position);
+dogen::yarn::meta_model::name_tree
+create_dogen_yarn_meta_model_name_tree(const unsigned int position) {
+    return dogen::yarn::meta_model::name_tree_generator::create(position);
 }
 
-std::pair<std::string, dogen::yarn::name_tree>
-create_std_pair_std_string_dogen_yarn_name_tree(unsigned int position) {
-    std::pair<std::string, dogen::yarn::name_tree> r(
+std::pair<std::string, dogen::yarn::meta_model::name_tree>
+create_std_pair_std_string_dogen_yarn_meta_model_name_tree(unsigned int position) {
+    std::pair<std::string, dogen::yarn::meta_model::name_tree> r(
         create_std_string(position),
-        create_dogen_yarn_name_tree(position));
+        create_dogen_yarn_meta_model_name_tree(position));
     return r;
 }
 
-std::list<std::pair<std::string, dogen::yarn::name_tree> > create_std_list_std_pair_std_string_dogen_yarn_name_tree(unsigned int position) {
-    std::list<std::pair<std::string, dogen::yarn::name_tree> > r;
+std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> > create_std_list_std_pair_std_string_dogen_yarn_meta_model_name_tree(unsigned int position) {
+    std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_std_string_dogen_yarn_name_tree(position + i));
+        r.push_back(create_std_pair_std_string_dogen_yarn_meta_model_name_tree(position + i));
     }
     return r;
 }
@@ -83,8 +83,8 @@ decomposition_result_generator::decomposition_result_generator() : position_(0)
 
 void decomposition_result_generator::
 populate(const unsigned int position, result_type& v) {
-    v.names(create_std_list_std_pair_std_string_dogen_yarn_name(position + 0));
-    v.name_trees(create_std_list_std_pair_std_string_dogen_yarn_name_tree(position + 1));
+    v.names(create_std_list_std_pair_std_string_dogen_yarn_meta_model_name(position + 0));
+    v.name_trees(create_std_list_std_pair_std_string_dogen_yarn_meta_model_name_tree(position + 1));
 }
 
 decomposition_result_generator::result_type
diff --git a/projects/yarn/src/test_data/helpers/mapping_context_td.cpp b/projects/yarn/src/test_data/helpers/mapping_context_td.cpp
index 9d37cfcdf..ab9aff188 100644
--- a/projects/yarn/src/test_data/helpers/mapping_context_td.cpp
+++ b/projects/yarn/src/test_data/helpers/mapping_context_td.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_context_td.hpp"
 
 namespace {
@@ -30,15 +30,15 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::name> create_std_unordered_map_std_string_dogen_yarn_name(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::name> r;
+std::unordered_map<std::string, dogen::yarn::meta_model::name> create_std_unordered_map_std_string_dogen_yarn_meta_model_name(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::name> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_name(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_name(position + i)));
     }
     return r;
 }
@@ -61,9 +61,9 @@ mapping_context_generator::mapping_context_generator() : position_(0) { }
 
 void mapping_context_generator::
 populate(const unsigned int position, result_type& v) {
-    v.translations(create_std_unordered_map_std_string_dogen_yarn_name(position + 0));
+    v.translations(create_std_unordered_map_std_string_dogen_yarn_meta_model_name(position + 0));
     v.erasures(create_std_unordered_set_std_string(position + 1));
-    v.injections(create_std_unordered_map_std_string_dogen_yarn_name(position + 2));
+    v.injections(create_std_unordered_map_std_string_dogen_yarn_meta_model_name(position + 2));
 }
 
 mapping_context_generator::result_type
diff --git a/projects/yarn/src/test_data/helpers/mapping_set_td.cpp b/projects/yarn/src/test_data/helpers/mapping_set_td.cpp
index 2a50718ce..a35d6e763 100644
--- a/projects/yarn/src/test_data/helpers/mapping_set_td.cpp
+++ b/projects/yarn/src/test_data/helpers/mapping_set_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_set_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
 
 namespace {
 
@@ -31,28 +31,28 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::name> create_std_unordered_map_std_string_dogen_yarn_name(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::name> r;
+std::unordered_map<std::string, dogen::yarn::meta_model::name> create_std_unordered_map_std_string_dogen_yarn_meta_model_name(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::name> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_name(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_name(position + i)));
     }
     return r;
 }
 
-std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> > create_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(unsigned int position) {
-    std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> > r;
+std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> > create_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_unordered_map_std_string_dogen_yarn_name(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_languages(position + i), create_std_unordered_map_std_string_dogen_yarn_meta_model_name(position + i)));
     }
     return r;
 }
@@ -73,10 +73,10 @@ std::unordered_set<std::string> create_std_unordered_set_std_string(unsigned int
     return r;
 }
 
-std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> > create_std_unordered_map_dogen_yarn_languages_std_unordered_set_std_string(unsigned int position) {
-    std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> > r;
+std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> > create_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_set_std_string(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_unordered_set_std_string(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_languages(position + i), create_std_unordered_set_std_string(position + i)));
     }
     return r;
 }
@@ -92,10 +92,10 @@ mapping_set_generator::mapping_set_generator() : position_(0) { }
 void mapping_set_generator::
 populate(const unsigned int position, result_type& v) {
     v.name(create_std_string(position + 0));
-    v.by_language_agnostic_id(create_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(position + 1));
-    v.by_upsilon_id(create_std_unordered_map_dogen_yarn_languages_std_unordered_map_std_string_dogen_yarn_name(position + 2));
+    v.by_language_agnostic_id(create_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(position + 1));
+    v.by_upsilon_id(create_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_map_std_string_dogen_yarn_meta_model_name(position + 2));
     v.upsilon_id_to_lam_id(create_std_unordered_map_std_string_std_string(position + 3));
-    v.erasures_by_language(create_std_unordered_map_dogen_yarn_languages_std_unordered_set_std_string(position + 4));
+    v.erasures_by_language(create_std_unordered_map_dogen_yarn_meta_model_languages_std_unordered_set_std_string(position + 4));
 }
 
 mapping_set_generator::result_type
diff --git a/projects/yarn/src/test_data/helpers/mapping_td.cpp b/projects/yarn/src/test_data/helpers/mapping_td.cpp
index a4e57cb47..00a072ddb 100644
--- a/projects/yarn/src/test_data/helpers/mapping_td.cpp
+++ b/projects/yarn/src/test_data/helpers/mapping_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/languages_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_value_td.hpp"
 
 namespace {
@@ -31,9 +31,9 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
 }
 
 dogen::yarn::helpers::mapping_value
@@ -41,10 +41,10 @@ create_dogen_yarn_helpers_mapping_value(const unsigned int position) {
     return dogen::yarn::helpers::mapping_value_generator::create(position);
 }
 
-std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value> create_std_unordered_map_dogen_yarn_languages_dogen_yarn_helpers_mapping_value(unsigned int position) {
-    std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value> r;
+std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value> create_std_unordered_map_dogen_yarn_meta_model_languages_dogen_yarn_helpers_mapping_value(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_dogen_yarn_helpers_mapping_value(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_languages(position + i), create_dogen_yarn_helpers_mapping_value(position + i)));
     }
     return r;
 }
@@ -60,7 +60,7 @@ mapping_generator::mapping_generator() : position_(0) { }
 void mapping_generator::
 populate(const unsigned int position, result_type& v) {
     v.lam_id(create_std_string(position + 0));
-    v.by_language(create_std_unordered_map_dogen_yarn_languages_dogen_yarn_helpers_mapping_value(position + 1));
+    v.by_language(create_std_unordered_map_dogen_yarn_meta_model_languages_dogen_yarn_helpers_mapping_value(position + 1));
 }
 
 mapping_generator::result_type
diff --git a/projects/yarn/src/test_data/helpers/mapping_value_td.cpp b/projects/yarn/src/test_data/helpers/mapping_value_td.cpp
index 826351ca1..76dd103d4 100644
--- a/projects/yarn/src/test_data/helpers/mapping_value_td.cpp
+++ b/projects/yarn/src/test_data/helpers/mapping_value_td.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_value_td.hpp"
 #include "dogen/yarn/test_data/helpers/mapping_actions_td.hpp"
 
@@ -29,22 +29,22 @@ create_dogen_yarn_helpers_mapping_actions(const unsigned int position) {
     return dogen::yarn::helpers::mapping_actions_generator::create(position);
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-boost::optional<dogen::yarn::name>
-create_boost_optional_dogen_yarn_name(unsigned int position) {
-    boost::optional<dogen::yarn::name> r(
-        create_dogen_yarn_name(position));
+boost::optional<dogen::yarn::meta_model::name>
+create_boost_optional_dogen_yarn_meta_model_name(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::name> r(
+        create_dogen_yarn_meta_model_name(position));
     return r;
 }
 
-std::list<dogen::yarn::name> create_std_list_dogen_yarn_name(unsigned int position) {
-    std::list<dogen::yarn::name> r;
+std::list<dogen::yarn::meta_model::name> create_std_list_dogen_yarn_meta_model_name(unsigned int position) {
+    std::list<dogen::yarn::meta_model::name> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_name(position + i));
+        r.push_back(create_dogen_yarn_meta_model_name(position + i));
     }
     return r;
 }
@@ -60,8 +60,8 @@ mapping_value_generator::mapping_value_generator() : position_(0) { }
 void mapping_value_generator::
 populate(const unsigned int position, result_type& v) {
     v.mapping_action(create_dogen_yarn_helpers_mapping_actions(position + 0));
-    v.default_name(create_boost_optional_dogen_yarn_name(position + 1));
-    v.aliases(create_std_list_dogen_yarn_name(position + 2));
+    v.default_name(create_boost_optional_dogen_yarn_meta_model_name(position + 1));
+    v.aliases(create_std_list_dogen_yarn_meta_model_name(position + 2));
 }
 
 mapping_value_generator::result_type
diff --git a/projects/yarn/src/test_data/helpers/node_td.cpp b/projects/yarn/src/test_data/helpers/node_td.cpp
index 22a8ba94f..dcedb1f48 100644
--- a/projects/yarn/src/test_data/helpers/node_td.cpp
+++ b/projects/yarn/src/test_data/helpers/node_td.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/name_td.hpp"
 #include "dogen/yarn/test_data/helpers/node_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 
 namespace {
 
@@ -35,9 +35,9 @@ create_boost_shared_ptr_dogen_yarn_helpers_node(unsigned int position) {
     return r;
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
 std::list<boost::shared_ptr<dogen::yarn::helpers::node> > create_std_list_boost_shared_ptr_dogen_yarn_helpers_node(unsigned int position) {
@@ -59,7 +59,7 @@ node_generator::node_generator() : position_(0) { }
 void node_generator::
 populate(const unsigned int position, result_type& v) {
     v.parent(create_boost_shared_ptr_dogen_yarn_helpers_node(position + 0));
-    v.data(create_dogen_yarn_name(position + 1));
+    v.data(create_dogen_yarn_meta_model_name(position + 1));
     v.children(create_std_list_boost_shared_ptr_dogen_yarn_helpers_node(position + 2));
 }
 
diff --git a/projects/yarn/src/test_data/intermediate_model_td.cpp b/projects/yarn/src/test_data/intermediate_model_td.cpp
deleted file mode 100644
index 8ed4e5fe4..000000000
--- a/projects/yarn/src/test_data/intermediate_model_td.cpp
+++ /dev/null
@@ -1,287 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/module_td.hpp"
-#include "dogen/yarn/test_data/object_td.hpp"
-#include "dogen/yarn/test_data/builtin_td.hpp"
-#include "dogen/yarn/test_data/concept_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/visitor_td.hpp"
-#include "dogen/yarn/test_data/exception_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
-#include "dogen/yarn/test_data/primitive_td.hpp"
-#include "dogen/yarn/test_data/enumeration_td.hpp"
-#include "dogen/yarn/test_data/origin_types_td.hpp"
-#include "dogen/yarn/test_data/intermediate_model_td.hpp"
-#include "dogen/yarn/test_data/orm_model_properties_td.hpp"
-#include "dogen/annotations/test_data/scribble_group_td.hpp"
-
-namespace {
-
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
-}
-
-dogen::yarn::origin_types
-create_dogen_yarn_origin_types(const unsigned int position) {
-    return dogen::yarn::origin_types_generator::create(position);
-}
-
-std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types> create_std_unordered_map_dogen_yarn_name_dogen_yarn_origin_types(unsigned int position) {
-    std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_name(position + i), create_dogen_yarn_origin_types(position + i)));
-    }
-    return r;
-}
-
-std::unordered_set<dogen::yarn::name> create_std_unordered_set_dogen_yarn_name(unsigned int position) {
-    std::unordered_set<dogen::yarn::name> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(create_dogen_yarn_name(position + i));
-    }
-    return r;
-}
-
-std::string create_std_string(const unsigned int position) {
-    std::ostringstream s;
-    s << "a_string_" << position;
-    return s.str();
-}
-
-dogen::yarn::module
-create_dogen_yarn_module(const unsigned int position) {
-    return dogen::yarn::module_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::module> create_std_unordered_map_std_string_dogen_yarn_module(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::module> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_module(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::concept
-create_dogen_yarn_concept(const unsigned int position) {
-    return dogen::yarn::concept_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::concept> create_std_unordered_map_std_string_dogen_yarn_concept(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::concept> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_concept(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::builtin
-create_dogen_yarn_builtin(const unsigned int position) {
-    return dogen::yarn::builtin_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::builtin> create_std_unordered_map_std_string_dogen_yarn_builtin(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::builtin> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_builtin(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::enumeration
-create_dogen_yarn_enumeration(const unsigned int position) {
-    return dogen::yarn::enumeration_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::enumeration> create_std_unordered_map_std_string_dogen_yarn_enumeration(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::enumeration> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_enumeration(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::primitive
-create_dogen_yarn_primitive(const unsigned int position) {
-    return dogen::yarn::primitive_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::primitive> create_std_unordered_map_std_string_dogen_yarn_primitive(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::primitive> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_primitive(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::object
-create_dogen_yarn_object(const unsigned int position) {
-    return dogen::yarn::object_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::object> create_std_unordered_map_std_string_dogen_yarn_object(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::object> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_object(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::exception
-create_dogen_yarn_exception(const unsigned int position) {
-    return dogen::yarn::exception_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::exception> create_std_unordered_map_std_string_dogen_yarn_exception(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::exception> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_exception(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::visitor
-create_dogen_yarn_visitor(const unsigned int position) {
-    return dogen::yarn::visitor_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::yarn::visitor> create_std_unordered_map_std_string_dogen_yarn_visitor(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::visitor> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_visitor(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::element*
-create_dogen_yarn_element_ptr(const unsigned int position) {
-    return dogen::yarn::element_generator::create_ptr(position);
-}
-
-boost::shared_ptr<dogen::yarn::element>
-create_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
-    boost::shared_ptr<dogen::yarn::element> r(
-        create_dogen_yarn_element_ptr(position));
-    return r;
-}
-
-std::list<boost::shared_ptr<dogen::yarn::element> > create_std_list_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
-    std::list<boost::shared_ptr<dogen::yarn::element> > r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_boost_shared_ptr_dogen_yarn_element(position + i));
-    }
-    return r;
-}
-
-bool create_bool(const unsigned int position) {
-    return (position % 2) != 0;
-}
-
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
-}
-
-std::list<dogen::yarn::languages> create_std_list_dogen_yarn_languages(unsigned int position) {
-    std::list<dogen::yarn::languages> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_languages(position + i));
-    }
-    return r;
-}
-
-dogen::annotations::scribble_group
-create_dogen_annotations_scribble_group(const unsigned int position) {
-    return dogen::annotations::scribble_group_generator::create(position);
-}
-
-std::unordered_map<std::string, dogen::annotations::scribble_group> create_std_unordered_map_std_string_dogen_annotations_scribble_group(unsigned int position) {
-    std::unordered_map<std::string, dogen::annotations::scribble_group> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_annotations_scribble_group(position + i)));
-    }
-    return r;
-}
-
-dogen::yarn::orm_model_properties
-create_dogen_yarn_orm_model_properties(const unsigned int position) {
-    return dogen::yarn::orm_model_properties_generator::create(position);
-}
-
-boost::optional<dogen::yarn::orm_model_properties>
-create_boost_optional_dogen_yarn_orm_model_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_model_properties> r(
-        create_dogen_yarn_orm_model_properties(position));
-    return r;
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-intermediate_model_generator::intermediate_model_generator() : position_(0) { }
-
-void intermediate_model_generator::
-populate(const unsigned int position, result_type& v) {
-    v.name(create_dogen_yarn_name(position + 0));
-    v.origin_type(create_dogen_yarn_origin_types(position + 1));
-    v.references(create_std_unordered_map_dogen_yarn_name_dogen_yarn_origin_types(position + 2));
-    v.leaves(create_std_unordered_set_dogen_yarn_name(position + 3));
-    v.modules(create_std_unordered_map_std_string_dogen_yarn_module(position + 4));
-    v.concepts(create_std_unordered_map_std_string_dogen_yarn_concept(position + 5));
-    v.builtins(create_std_unordered_map_std_string_dogen_yarn_builtin(position + 6));
-    v.enumerations(create_std_unordered_map_std_string_dogen_yarn_enumeration(position + 7));
-    v.primitives(create_std_unordered_map_std_string_dogen_yarn_primitive(position + 8));
-    v.objects(create_std_unordered_map_std_string_dogen_yarn_object(position + 9));
-    v.exceptions(create_std_unordered_map_std_string_dogen_yarn_exception(position + 10));
-    v.visitors(create_std_unordered_map_std_string_dogen_yarn_visitor(position + 11));
-    v.injected_elements(create_std_list_boost_shared_ptr_dogen_yarn_element(position + 12));
-    v.has_generatable_types(create_bool(position + 13));
-    v.root_module(create_dogen_yarn_module(position + 14));
-    v.input_language(create_dogen_yarn_languages(position + 15));
-    v.output_languages(create_std_list_dogen_yarn_languages(position + 16));
-    v.scribble_groups(create_std_unordered_map_std_string_dogen_annotations_scribble_group(position + 17));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_model_properties(position + 18));
-}
-
-intermediate_model_generator::result_type
-intermediate_model_generator::create(const unsigned int position) {
-    intermediate_model r;
-    intermediate_model_generator::populate(position, r);
-    return r;
-}
-
-intermediate_model_generator::result_type*
-intermediate_model_generator::create_ptr(const unsigned int position) {
-    intermediate_model* p = new intermediate_model();
-    intermediate_model_generator::populate(position, *p);
-    return p;
-}
-
-intermediate_model_generator::result_type
-intermediate_model_generator::operator()() {
-    return create(position_++);
-}
-
-} }
diff --git a/projects/yarn/src/test_data/artefact_properties_td.cpp b/projects/yarn/src/test_data/meta_model/artefact_properties_td.cpp
similarity index 85%
rename from projects/yarn/src/test_data/artefact_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/artefact_properties_td.cpp
index 3ac96b0d0..2341ef2c6 100644
--- a/projects/yarn/src/test_data/artefact_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/artefact_properties_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/formatting_styles_td.hpp"
-#include "dogen/yarn/test_data/artefact_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/formatting_styles_td.hpp"
+#include "dogen/yarn/test_data/meta_model/artefact_properties_td.hpp"
 
 namespace {
 
@@ -49,15 +49,16 @@ std::list<std::string> create_std_list_std_string(unsigned int position) {
     return r;
 }
 
-dogen::yarn::formatting_styles
-create_dogen_yarn_formatting_styles(const unsigned int position) {
-    return dogen::yarn::formatting_styles_generator::create(position);
+dogen::yarn::meta_model::formatting_styles
+create_dogen_yarn_meta_model_formatting_styles(const unsigned int position) {
+    return dogen::yarn::meta_model::formatting_styles_generator::create(position);
 }
 
 }
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 artefact_properties_generator::artefact_properties_generator() : position_(0) { }
 
@@ -67,7 +68,7 @@ populate(const unsigned int position, result_type& v) {
     v.overwrite(create_bool(position + 1));
     v.file_path(create_boost_filesystem_path(position + 2));
     v.dependencies(create_std_list_std_string(position + 3));
-    v.formatting_style(create_dogen_yarn_formatting_styles(position + 4));
+    v.formatting_style(create_dogen_yarn_meta_model_formatting_styles(position + 4));
     v.formatting_input(create_std_string(position + 5));
 }
 
@@ -90,4 +91,4 @@ artefact_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/attribute_td.cpp b/projects/yarn/src/test_data/meta_model/attribute_td.cpp
similarity index 62%
rename from projects/yarn/src/test_data/attribute_td.cpp
rename to projects/yarn/src/test_data/meta_model/attribute_td.cpp
index 3df8124e1..49831e400 100644
--- a/projects/yarn/src/test_data/attribute_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/attribute_td.cpp
@@ -19,11 +19,11 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/attribute_td.hpp"
-#include "dogen/yarn/test_data/name_tree_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 #include "dogen/annotations/test_data/annotation_td.hpp"
-#include "dogen/yarn/test_data/orm_attribute_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/attribute_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_tree_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp"
 
 namespace {
 
@@ -38,29 +38,29 @@ create_dogen_annotations_annotation(const unsigned int position) {
     return dogen::annotations::annotation_generator::create(position);
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-dogen::yarn::name_tree
-create_dogen_yarn_name_tree(const unsigned int position) {
-    return dogen::yarn::name_tree_generator::create(position);
+dogen::yarn::meta_model::name_tree
+create_dogen_yarn_meta_model_name_tree(const unsigned int position) {
+    return dogen::yarn::meta_model::name_tree_generator::create(position);
 }
 
 bool create_bool(const unsigned int position) {
     return (position % 2) != 0;
 }
 
-dogen::yarn::orm_attribute_properties
-create_dogen_yarn_orm_attribute_properties(const unsigned int position) {
-    return dogen::yarn::orm_attribute_properties_generator::create(position);
+dogen::yarn::meta_model::orm_attribute_properties
+create_dogen_yarn_meta_model_orm_attribute_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_attribute_properties_generator::create(position);
 }
 
-boost::optional<dogen::yarn::orm_attribute_properties>
-create_boost_optional_dogen_yarn_orm_attribute_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_attribute_properties> r(
-        create_dogen_yarn_orm_attribute_properties(position));
+boost::optional<dogen::yarn::meta_model::orm_attribute_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_attribute_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_attribute_properties> r(
+        create_dogen_yarn_meta_model_orm_attribute_properties(position));
     return r;
 }
 
@@ -68,6 +68,7 @@ create_boost_optional_dogen_yarn_orm_attribute_properties(unsigned int position)
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 attribute_generator::attribute_generator() : position_(0) { }
 
@@ -75,12 +76,12 @@ void attribute_generator::
 populate(const unsigned int position, result_type& v) {
     v.documentation(create_std_string(position + 0));
     v.annotation(create_dogen_annotations_annotation(position + 1));
-    v.name(create_dogen_yarn_name(position + 2));
+    v.name(create_dogen_yarn_meta_model_name(position + 2));
     v.unparsed_type(create_std_string(position + 3));
-    v.parsed_type(create_dogen_yarn_name_tree(position + 4));
+    v.parsed_type(create_dogen_yarn_meta_model_name_tree(position + 4));
     v.is_immutable(create_bool(position + 5));
     v.is_fluent(create_bool(position + 6));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_attribute_properties(position + 7));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_attribute_properties(position + 7));
 }
 
 attribute_generator::result_type
@@ -102,4 +103,4 @@ attribute_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/builtin_td.cpp b/projects/yarn/src/test_data/meta_model/builtin_td.cpp
similarity index 89%
rename from projects/yarn/src/test_data/builtin_td.cpp
rename to projects/yarn/src/test_data/meta_model/builtin_td.cpp
index f98c7d252..8abfc8d1d 100644
--- a/projects/yarn/src/test_data/builtin_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/builtin_td.cpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/builtin_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/builtin_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
 
 namespace {
 
@@ -31,12 +31,13 @@ bool create_bool(const unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 builtin_generator::builtin_generator() : position_(0) { }
 
 void builtin_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
+    dogen::yarn::meta_model::element_generator::populate(position, v);
     v.is_default_enumeration_type(create_bool(position + 0));
     v.is_floating_point(create_bool(position + 1));
     v.can_be_enumeration_underlier(create_bool(position + 2));
@@ -62,4 +63,4 @@ builtin_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/meta_model/concept_td.cpp b/projects/yarn/src/test_data/meta_model/concept_td.cpp
new file mode 100644
index 000000000..5e3e2cf0f
--- /dev/null
+++ b/projects/yarn/src/test_data/meta_model/concept_td.cpp
@@ -0,0 +1,105 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/concept_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/attribute_td.hpp"
+
+namespace {
+
+dogen::yarn::meta_model::attribute
+create_dogen_yarn_meta_model_attribute(const unsigned int position) {
+    return dogen::yarn::meta_model::attribute_generator::create(position);
+}
+
+std::list<dogen::yarn::meta_model::attribute> create_std_list_dogen_yarn_meta_model_attribute(unsigned int position) {
+    std::list<dogen::yarn::meta_model::attribute> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_yarn_meta_model_attribute(position + i));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
+}
+
+std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > create_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_name(position + i), create_std_list_dogen_yarn_meta_model_attribute(position + i)));
+    }
+    return r;
+}
+
+bool create_bool(const unsigned int position) {
+    return (position % 2) != 0;
+}
+
+std::list<dogen::yarn::meta_model::name> create_std_list_dogen_yarn_meta_model_name(unsigned int position) {
+    std::list<dogen::yarn::meta_model::name> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_yarn_meta_model_name(position + i));
+    }
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+concept_generator::concept_generator() : position_(0) { }
+
+void concept_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::yarn::meta_model::element_generator::populate(position, v);
+    v.all_attributes(create_std_list_dogen_yarn_meta_model_attribute(position + 0));
+    v.local_attributes(create_std_list_dogen_yarn_meta_model_attribute(position + 1));
+    v.inherited_attributes(create_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(position + 2));
+    v.is_immutable(create_bool(position + 3));
+    v.is_fluent(create_bool(position + 4));
+    v.refines(create_std_list_dogen_yarn_meta_model_name(position + 5));
+    v.is_child(create_bool(position + 6));
+}
+
+concept_generator::result_type
+concept_generator::create(const unsigned int position) {
+    concept r;
+    concept_generator::populate(position, r);
+    return r;
+}
+
+concept_generator::result_type*
+concept_generator::create_ptr(const unsigned int position) {
+    concept* p = new concept();
+    concept_generator::populate(position, *p);
+    return p;
+}
+
+concept_generator::result_type
+concept_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/yarn/src/test_data/element_properties_td.cpp b/projects/yarn/src/test_data/meta_model/element_properties_td.cpp
similarity index 75%
rename from projects/yarn/src/test_data/element_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/element_properties_td.cpp
index ed88c3646..c64b0fdc1 100644
--- a/projects/yarn/src/test_data/element_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/element_properties_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/element_properties_td.hpp"
-#include "dogen/yarn/test_data/artefact_properties_td.hpp"
 #include "dogen/formatters/test_data/decoration_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/artefact_properties_td.hpp"
 
 namespace {
 
@@ -36,15 +36,15 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::artefact_properties
-create_dogen_yarn_artefact_properties(const unsigned int position) {
-    return dogen::yarn::artefact_properties_generator::create(position);
+dogen::yarn::meta_model::artefact_properties
+create_dogen_yarn_meta_model_artefact_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::artefact_properties_generator::create(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::artefact_properties> create_std_unordered_map_std_string_dogen_yarn_artefact_properties(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::artefact_properties> r;
+std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties> create_std_unordered_map_std_string_dogen_yarn_meta_model_artefact_properties(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_artefact_properties(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_artefact_properties(position + i)));
     }
     return r;
 }
@@ -53,13 +53,14 @@ std::unordered_map<std::string, dogen::yarn::artefact_properties> create_std_uno
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 element_properties_generator::element_properties_generator() : position_(0) { }
 
 void element_properties_generator::
 populate(const unsigned int position, result_type& v) {
     v.decoration_properties(create_dogen_formatters_decoration_properties(position + 0));
-    v.artefact_properties(create_std_unordered_map_std_string_dogen_yarn_artefact_properties(position + 1));
+    v.artefact_properties(create_std_unordered_map_std_string_dogen_yarn_meta_model_artefact_properties(position + 1));
 }
 
 element_properties_generator::result_type
@@ -81,4 +82,4 @@ element_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/meta_model/element_td.cpp b/projects/yarn/src/test_data/meta_model/element_td.cpp
new file mode 100644
index 000000000..d1e10613a
--- /dev/null
+++ b/projects/yarn/src/test_data/meta_model/element_td.cpp
@@ -0,0 +1,121 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/annotations/test_data/annotation_td.hpp"
+#include "dogen/yarn/test_data/meta_model/module_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_td.hpp"
+#include "dogen/yarn/test_data/meta_model/builtin_td.hpp"
+#include "dogen/yarn/test_data/meta_model/concept_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/visitor_td.hpp"
+#include "dogen/yarn/test_data/meta_model/exception_td.hpp"
+#include "dogen/yarn/test_data/meta_model/primitive_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumeration_td.hpp"
+#include "dogen/yarn/test_data/meta_model/origin_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_properties_td.hpp"
+
+namespace {
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+dogen::annotations::annotation
+create_dogen_annotations_annotation(const unsigned int position) {
+    return dogen::annotations::annotation_generator::create(position);
+}
+
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
+}
+
+dogen::yarn::meta_model::origin_types
+create_dogen_yarn_meta_model_origin_types(const unsigned int position) {
+    return dogen::yarn::meta_model::origin_types_generator::create(position);
+}
+
+boost::optional<dogen::yarn::meta_model::name>
+create_boost_optional_dogen_yarn_meta_model_name(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::name> r(
+        create_dogen_yarn_meta_model_name(position));
+    return r;
+}
+
+bool create_bool(const unsigned int position) {
+    return (position % 2) != 0;
+}
+
+std::vector<std::string> create_std_vector_std_string(unsigned int position) {
+    std::vector<std::string> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_std_string(position + i));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::element_properties
+create_dogen_yarn_meta_model_element_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::element_properties_generator::create(position);
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+void element_generator::
+populate(const unsigned int position, result_type& v) {
+    v.documentation(create_std_string(position + 0));
+    v.annotation(create_dogen_annotations_annotation(position + 1));
+    v.name(create_dogen_yarn_meta_model_name(position + 2));
+    v.origin_type(create_dogen_yarn_meta_model_origin_types(position + 3));
+    v.contained_by(create_boost_optional_dogen_yarn_meta_model_name(position + 4));
+    v.in_global_module(create_bool(position + 5));
+    v.stereotypes(create_std_vector_std_string(position + 6));
+    v.is_element_extension(create_bool(position + 7));
+    v.element_properties(create_dogen_yarn_meta_model_element_properties(position + 8));
+}
+
+element_generator::result_type*
+element_generator::create_ptr(const unsigned int position) {
+    if ((position % 7) == 0)
+        return dogen::yarn::meta_model::concept_generator::create_ptr(position);
+    if ((position % 7) == 1)
+        return dogen::yarn::meta_model::enumeration_generator::create_ptr(position);
+    if ((position % 7) == 2)
+        return dogen::yarn::meta_model::exception_generator::create_ptr(position);
+    if ((position % 7) == 3)
+        return dogen::yarn::meta_model::module_generator::create_ptr(position);
+    if ((position % 7) == 4)
+        return dogen::yarn::meta_model::object_generator::create_ptr(position);
+    if ((position % 7) == 5)
+        return dogen::yarn::meta_model::primitive_generator::create_ptr(position);
+    if ((position % 7) == 6)
+        return dogen::yarn::meta_model::visitor_generator::create_ptr(position);
+    return dogen::yarn::meta_model::builtin_generator::create_ptr(position);
+}
+
+} } }
diff --git a/projects/yarn/src/test_data/enumeration_td.cpp b/projects/yarn/src/test_data/meta_model/enumeration_td.cpp
similarity index 64%
rename from projects/yarn/src/test_data/enumeration_td.cpp
rename to projects/yarn/src/test_data/meta_model/enumeration_td.cpp
index b25f1ae08..a618f836b 100644
--- a/projects/yarn/src/test_data/enumeration_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/enumeration_td.cpp
@@ -18,27 +18,27 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/enumerator_td.hpp"
-#include "dogen/yarn/test_data/enumeration_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumerator_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumeration_td.hpp"
 
 namespace {
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-dogen::yarn::enumerator
-create_dogen_yarn_enumerator(const unsigned int position) {
-    return dogen::yarn::enumerator_generator::create(position);
+dogen::yarn::meta_model::enumerator
+create_dogen_yarn_meta_model_enumerator(const unsigned int position) {
+    return dogen::yarn::meta_model::enumerator_generator::create(position);
 }
 
-std::vector<dogen::yarn::enumerator> create_std_vector_dogen_yarn_enumerator(unsigned int position) {
-    std::vector<dogen::yarn::enumerator> r;
+std::vector<dogen::yarn::meta_model::enumerator> create_std_vector_dogen_yarn_meta_model_enumerator(unsigned int position) {
+    std::vector<dogen::yarn::meta_model::enumerator> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_enumerator(position + i));
+        r.push_back(create_dogen_yarn_meta_model_enumerator(position + i));
     }
     return r;
 }
@@ -51,14 +51,15 @@ bool create_bool(const unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enumeration_generator::enumeration_generator() : position_(0) { }
 
 void enumeration_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
-    v.underlying_element(create_dogen_yarn_name(position + 0));
-    v.enumerators(create_std_vector_dogen_yarn_enumerator(position + 1));
+    dogen::yarn::meta_model::element_generator::populate(position, v);
+    v.underlying_element(create_dogen_yarn_meta_model_name(position + 0));
+    v.enumerators(create_std_vector_dogen_yarn_meta_model_enumerator(position + 1));
     v.use_implementation_defined_underlying_element(create_bool(position + 2));
     v.use_implementation_defined_enumerator_values(create_bool(position + 3));
     v.add_invalid_enumerator(create_bool(position + 4));
@@ -83,4 +84,4 @@ enumeration_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/enumerator_td.cpp b/projects/yarn/src/test_data/meta_model/enumerator_td.cpp
similarity index 85%
rename from projects/yarn/src/test_data/enumerator_td.cpp
rename to projects/yarn/src/test_data/meta_model/enumerator_td.cpp
index 87df2d201..d12a11c79 100644
--- a/projects/yarn/src/test_data/enumerator_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/enumerator_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/enumerator_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
 #include "dogen/annotations/test_data/annotation_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumerator_td.hpp"
 
 namespace {
 
@@ -31,9 +31,9 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
 dogen::annotations::annotation
@@ -45,13 +45,14 @@ create_dogen_annotations_annotation(const unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enumerator_generator::enumerator_generator() : position_(0) { }
 
 void enumerator_generator::
 populate(const unsigned int position, result_type& v) {
     v.documentation(create_std_string(position + 0));
-    v.name(create_dogen_yarn_name(position + 1));
+    v.name(create_dogen_yarn_meta_model_name(position + 1));
     v.annotation(create_dogen_annotations_annotation(position + 2));
     v.value(create_std_string(position + 3));
 }
@@ -75,4 +76,4 @@ enumerator_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/exception_td.cpp b/projects/yarn/src/test_data/meta_model/exception_td.cpp
similarity index 87%
rename from projects/yarn/src/test_data/exception_td.cpp
rename to projects/yarn/src/test_data/meta_model/exception_td.cpp
index 14eed22a7..cf6ae57e4 100644
--- a/projects/yarn/src/test_data/exception_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/exception_td.cpp
@@ -18,17 +18,18 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/exception_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/exception_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 exception_generator::exception_generator() : position_(0) { }
 
 void exception_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
+    dogen::yarn::meta_model::element_generator::populate(position, v);
 }
 
 exception_generator::result_type
@@ -50,4 +51,4 @@ exception_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/formatting_styles_td.cpp b/projects/yarn/src/test_data/meta_model/formatting_styles_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/formatting_styles_td.cpp
rename to projects/yarn/src/test_data/meta_model/formatting_styles_td.cpp
index 6accca636..4b03f3b94 100644
--- a/projects/yarn/src/test_data/formatting_styles_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/formatting_styles_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/formatting_styles_td.hpp"
+#include "dogen/yarn/test_data/meta_model/formatting_styles_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 formatting_styles_generator::formatting_styles_generator() : position_(0) { }
 void formatting_styles_generator::
@@ -41,4 +42,4 @@ formatting_styles_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp b/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp
new file mode 100644
index 000000000..6a37f7f50
--- /dev/null
+++ b/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp
@@ -0,0 +1,288 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/module_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_td.hpp"
+#include "dogen/yarn/test_data/meta_model/builtin_td.hpp"
+#include "dogen/yarn/test_data/meta_model/concept_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/visitor_td.hpp"
+#include "dogen/yarn/test_data/meta_model/exception_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/primitive_td.hpp"
+#include "dogen/annotations/test_data/scribble_group_td.hpp"
+#include "dogen/yarn/test_data/meta_model/enumeration_td.hpp"
+#include "dogen/yarn/test_data/meta_model/origin_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/intermediate_model_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp"
+
+namespace {
+
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
+}
+
+dogen::yarn::meta_model::origin_types
+create_dogen_yarn_meta_model_origin_types(const unsigned int position) {
+    return dogen::yarn::meta_model::origin_types_generator::create(position);
+}
+
+std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types> create_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_name(position + i), create_dogen_yarn_meta_model_origin_types(position + i)));
+    }
+    return r;
+}
+
+std::unordered_set<dogen::yarn::meta_model::name> create_std_unordered_set_dogen_yarn_meta_model_name(unsigned int position) {
+    std::unordered_set<dogen::yarn::meta_model::name> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(create_dogen_yarn_meta_model_name(position + i));
+    }
+    return r;
+}
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+dogen::yarn::meta_model::module
+create_dogen_yarn_meta_model_module(const unsigned int position) {
+    return dogen::yarn::meta_model::module_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::module> create_std_unordered_map_std_string_dogen_yarn_meta_model_module(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::module> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_module(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::concept
+create_dogen_yarn_meta_model_concept(const unsigned int position) {
+    return dogen::yarn::meta_model::concept_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::concept> create_std_unordered_map_std_string_dogen_yarn_meta_model_concept(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::concept> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_concept(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::builtin
+create_dogen_yarn_meta_model_builtin(const unsigned int position) {
+    return dogen::yarn::meta_model::builtin_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::builtin> create_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::builtin> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_builtin(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::enumeration
+create_dogen_yarn_meta_model_enumeration(const unsigned int position) {
+    return dogen::yarn::meta_model::enumeration_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> create_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_enumeration(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::primitive
+create_dogen_yarn_meta_model_primitive(const unsigned int position) {
+    return dogen::yarn::meta_model::primitive_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::primitive> create_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::primitive> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_primitive(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::object
+create_dogen_yarn_meta_model_object(const unsigned int position) {
+    return dogen::yarn::meta_model::object_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::object> create_std_unordered_map_std_string_dogen_yarn_meta_model_object(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::object> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_object(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::exception
+create_dogen_yarn_meta_model_exception(const unsigned int position) {
+    return dogen::yarn::meta_model::exception_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::exception> create_std_unordered_map_std_string_dogen_yarn_meta_model_exception(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::exception> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_exception(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::visitor
+create_dogen_yarn_meta_model_visitor(const unsigned int position) {
+    return dogen::yarn::meta_model::visitor_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::yarn::meta_model::visitor> create_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(unsigned int position) {
+    std::unordered_map<std::string, dogen::yarn::meta_model::visitor> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_visitor(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::element*
+create_dogen_yarn_meta_model_element_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::element_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::element>
+create_boost_shared_ptr_dogen_yarn_meta_model_element(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::element> r(
+        create_dogen_yarn_meta_model_element_ptr(position));
+    return r;
+}
+
+std::list<boost::shared_ptr<dogen::yarn::meta_model::element> > create_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(unsigned int position) {
+    std::list<boost::shared_ptr<dogen::yarn::meta_model::element> > r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_boost_shared_ptr_dogen_yarn_meta_model_element(position + i));
+    }
+    return r;
+}
+
+bool create_bool(const unsigned int position) {
+    return (position % 2) != 0;
+}
+
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
+}
+
+std::list<dogen::yarn::meta_model::languages> create_std_list_dogen_yarn_meta_model_languages(unsigned int position) {
+    std::list<dogen::yarn::meta_model::languages> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_yarn_meta_model_languages(position + i));
+    }
+    return r;
+}
+
+dogen::annotations::scribble_group
+create_dogen_annotations_scribble_group(const unsigned int position) {
+    return dogen::annotations::scribble_group_generator::create(position);
+}
+
+std::unordered_map<std::string, dogen::annotations::scribble_group> create_std_unordered_map_std_string_dogen_annotations_scribble_group(unsigned int position) {
+    std::unordered_map<std::string, dogen::annotations::scribble_group> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_std_string(position + i), create_dogen_annotations_scribble_group(position + i)));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::orm_model_properties
+create_dogen_yarn_meta_model_orm_model_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_model_properties_generator::create(position);
+}
+
+boost::optional<dogen::yarn::meta_model::orm_model_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_model_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_model_properties> r(
+        create_dogen_yarn_meta_model_orm_model_properties(position));
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+intermediate_model_generator::intermediate_model_generator() : position_(0) { }
+
+void intermediate_model_generator::
+populate(const unsigned int position, result_type& v) {
+    v.name(create_dogen_yarn_meta_model_name(position + 0));
+    v.origin_type(create_dogen_yarn_meta_model_origin_types(position + 1));
+    v.references(create_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(position + 2));
+    v.leaves(create_std_unordered_set_dogen_yarn_meta_model_name(position + 3));
+    v.modules(create_std_unordered_map_std_string_dogen_yarn_meta_model_module(position + 4));
+    v.concepts(create_std_unordered_map_std_string_dogen_yarn_meta_model_concept(position + 5));
+    v.builtins(create_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(position + 6));
+    v.enumerations(create_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(position + 7));
+    v.primitives(create_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(position + 8));
+    v.objects(create_std_unordered_map_std_string_dogen_yarn_meta_model_object(position + 9));
+    v.exceptions(create_std_unordered_map_std_string_dogen_yarn_meta_model_exception(position + 10));
+    v.visitors(create_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(position + 11));
+    v.injected_elements(create_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(position + 12));
+    v.has_generatable_types(create_bool(position + 13));
+    v.root_module(create_dogen_yarn_meta_model_module(position + 14));
+    v.input_language(create_dogen_yarn_meta_model_languages(position + 15));
+    v.output_languages(create_std_list_dogen_yarn_meta_model_languages(position + 16));
+    v.scribble_groups(create_std_unordered_map_std_string_dogen_annotations_scribble_group(position + 17));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_model_properties(position + 18));
+}
+
+intermediate_model_generator::result_type
+intermediate_model_generator::create(const unsigned int position) {
+    intermediate_model r;
+    intermediate_model_generator::populate(position, r);
+    return r;
+}
+
+intermediate_model_generator::result_type*
+intermediate_model_generator::create_ptr(const unsigned int position) {
+    intermediate_model* p = new intermediate_model();
+    intermediate_model_generator::populate(position, *p);
+    return p;
+}
+
+intermediate_model_generator::result_type
+intermediate_model_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/yarn/src/test_data/languages_td.cpp b/projects/yarn/src/test_data/meta_model/languages_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/languages_td.cpp
rename to projects/yarn/src/test_data/meta_model/languages_td.cpp
index fec53430d..4443d3b6a 100644
--- a/projects/yarn/src/test_data/languages_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/languages_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 languages_generator::languages_generator() : position_(0) { }
 void languages_generator::
@@ -41,4 +42,4 @@ languages_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/letter_cases_td.cpp b/projects/yarn/src/test_data/meta_model/letter_cases_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/letter_cases_td.cpp
rename to projects/yarn/src/test_data/meta_model/letter_cases_td.cpp
index e4386ce95..f21741e3c 100644
--- a/projects/yarn/src/test_data/letter_cases_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/letter_cases_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/letter_cases_td.hpp"
+#include "dogen/yarn/test_data/meta_model/letter_cases_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 letter_cases_generator::letter_cases_generator() : position_(0) { }
 void letter_cases_generator::
@@ -41,4 +42,4 @@ letter_cases_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/location_td.cpp b/projects/yarn/src/test_data/meta_model/location_td.cpp
similarity index 96%
rename from projects/yarn/src/test_data/location_td.cpp
rename to projects/yarn/src/test_data/meta_model/location_td.cpp
index c8c2e24dd..3dadcc359 100644
--- a/projects/yarn/src/test_data/location_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/location_td.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/location_td.hpp"
+#include "dogen/yarn/test_data/meta_model/location_td.hpp"
 
 namespace {
 
@@ -41,6 +41,7 @@ std::list<std::string> create_std_list_std_string(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 location_generator::location_generator() : position_(0) { }
 
@@ -71,4 +72,4 @@ location_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/meta_model/model_td.cpp b/projects/yarn/src/test_data/meta_model/model_td.cpp
new file mode 100644
index 000000000..a9dd94ff2
--- /dev/null
+++ b/projects/yarn/src/test_data/meta_model/model_td.cpp
@@ -0,0 +1,135 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <sstream>
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/model_td.hpp"
+#include "dogen/yarn/test_data/meta_model/module_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp"
+
+namespace {
+
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
+}
+
+dogen::yarn::meta_model::element*
+create_dogen_yarn_meta_model_element_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::element_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::element>
+create_boost_shared_ptr_dogen_yarn_meta_model_element(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::element> r(
+        create_dogen_yarn_meta_model_element_ptr(position));
+    return r;
+}
+
+std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> > create_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(unsigned int position) {
+    std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> > r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_boost_shared_ptr_dogen_yarn_meta_model_element(position + i));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::module
+create_dogen_yarn_meta_model_module(const unsigned int position) {
+    return dogen::yarn::meta_model::module_generator::create(position);
+}
+
+std::string create_std_string(const unsigned int position) {
+    std::ostringstream s;
+    s << "a_string_" << position;
+    return s.str();
+}
+
+std::unordered_set<std::string> create_std_unordered_set_std_string(unsigned int position) {
+    std::unordered_set<std::string> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(create_std_string(position + i));
+    }
+    return r;
+}
+
+bool create_bool(const unsigned int position) {
+    return (position % 2) != 0;
+}
+
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
+}
+
+dogen::yarn::meta_model::orm_model_properties
+create_dogen_yarn_meta_model_orm_model_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_model_properties_generator::create(position);
+}
+
+boost::optional<dogen::yarn::meta_model::orm_model_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_model_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_model_properties> r(
+        create_dogen_yarn_meta_model_orm_model_properties(position));
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+model_generator::model_generator() : position_(0) { }
+
+void model_generator::
+populate(const unsigned int position, result_type& v) {
+    v.name(create_dogen_yarn_meta_model_name(position + 0));
+    v.elements(create_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(position + 1));
+    v.root_module(create_dogen_yarn_meta_model_module(position + 2));
+    v.module_ids(create_std_unordered_set_std_string(position + 3));
+    v.has_generatable_types(create_bool(position + 4));
+    v.input_language(create_dogen_yarn_meta_model_languages(position + 5));
+    v.output_language(create_dogen_yarn_meta_model_languages(position + 6));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_model_properties(position + 7));
+}
+
+model_generator::result_type
+model_generator::create(const unsigned int position) {
+    model r;
+    model_generator::populate(position, r);
+    return r;
+}
+
+model_generator::result_type*
+model_generator::create_ptr(const unsigned int position) {
+    model* p = new model();
+    model_generator::populate(position, *p);
+    return p;
+}
+
+model_generator::result_type
+model_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/yarn/src/test_data/module_td.cpp b/projects/yarn/src/test_data/meta_model/module_td.cpp
similarity index 70%
rename from projects/yarn/src/test_data/module_td.cpp
rename to projects/yarn/src/test_data/meta_model/module_td.cpp
index 01e7f7e03..39508c52c 100644
--- a/projects/yarn/src/test_data/module_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/module_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/module_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/orm_module_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/module_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp"
 
 namespace {
 
@@ -43,15 +43,15 @@ bool create_bool(const unsigned int position) {
     return (position % 2) != 0;
 }
 
-dogen::yarn::orm_module_properties
-create_dogen_yarn_orm_module_properties(const unsigned int position) {
-    return dogen::yarn::orm_module_properties_generator::create(position);
+dogen::yarn::meta_model::orm_module_properties
+create_dogen_yarn_meta_model_orm_module_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_module_properties_generator::create(position);
 }
 
-boost::optional<dogen::yarn::orm_module_properties>
-create_boost_optional_dogen_yarn_orm_module_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_module_properties> r(
-        create_dogen_yarn_orm_module_properties(position));
+boost::optional<dogen::yarn::meta_model::orm_module_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_module_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_module_properties> r(
+        create_dogen_yarn_meta_model_orm_module_properties(position));
     return r;
 }
 
@@ -59,16 +59,17 @@ create_boost_optional_dogen_yarn_orm_module_properties(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 module_generator::module_generator() : position_(0) { }
 
 void module_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
+    dogen::yarn::meta_model::element_generator::populate(position, v);
     v.members(create_std_list_std_string(position + 0));
     v.is_root(create_bool(position + 1));
     v.is_global_module(create_bool(position + 2));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_module_properties(position + 3));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_module_properties(position + 3));
 }
 
 module_generator::result_type
@@ -90,4 +91,4 @@ module_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/name_td.cpp b/projects/yarn/src/test_data/meta_model/name_td.cpp
similarity index 64%
rename from projects/yarn/src/test_data/name_td.cpp
rename to projects/yarn/src/test_data/meta_model/name_td.cpp
index cdd1a6a85..446480ba5 100644
--- a/projects/yarn/src/test_data/name_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/name_td.cpp
@@ -19,9 +19,9 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/location_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/location_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
 
 namespace {
 
@@ -31,28 +31,29 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
 }
 
-std::map<dogen::yarn::languages, std::string> create_std_map_dogen_yarn_languages_std_string(unsigned int position) {
-    std::map<dogen::yarn::languages, std::string> r;
+std::map<dogen::yarn::meta_model::languages, std::string> create_std_map_dogen_yarn_meta_model_languages_std_string(unsigned int position) {
+    std::map<dogen::yarn::meta_model::languages, std::string> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_string(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_languages(position + i), create_std_string(position + i)));
     }
     return r;
 }
 
-dogen::yarn::location
-create_dogen_yarn_location(const unsigned int position) {
-    return dogen::yarn::location_generator::create(position);
+dogen::yarn::meta_model::location
+create_dogen_yarn_meta_model_location(const unsigned int position) {
+    return dogen::yarn::meta_model::location_generator::create(position);
 }
 
 }
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 name_generator::name_generator() : position_(0) { }
 
@@ -60,8 +61,8 @@ void name_generator::
 populate(const unsigned int position, result_type& v) {
     v.id(create_std_string(position + 0));
     v.simple(create_std_string(position + 1));
-    v.qualified(create_std_map_dogen_yarn_languages_std_string(position + 2));
-    v.location(create_dogen_yarn_location(position + 3));
+    v.qualified(create_std_map_dogen_yarn_meta_model_languages_std_string(position + 2));
+    v.location(create_dogen_yarn_meta_model_location(position + 3));
     v.identifiable(create_std_string(position + 4));
 }
 
@@ -84,4 +85,4 @@ name_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/name_tree_td.cpp b/projects/yarn/src/test_data/meta_model/name_tree_td.cpp
similarity index 59%
rename from projects/yarn/src/test_data/name_tree_td.cpp
rename to projects/yarn/src/test_data/meta_model/name_tree_td.cpp
index 978981449..9095ae8a0 100644
--- a/projects/yarn/src/test_data/name_tree_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/name_tree_td.cpp
@@ -19,26 +19,26 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
-#include "dogen/yarn/test_data/name_tree_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/languages_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_tree_td.hpp"
 
 namespace {
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-dogen::yarn::name_tree
-create_dogen_yarn_name_tree(const unsigned int) {
-    return dogen::yarn::name_tree();
+dogen::yarn::meta_model::name_tree
+create_dogen_yarn_meta_model_name_tree(const unsigned int) {
+    return dogen::yarn::meta_model::name_tree();
 }
 
-std::list<dogen::yarn::name_tree> create_std_list_dogen_yarn_name_tree(unsigned int position) {
-    std::list<dogen::yarn::name_tree> r;
+std::list<dogen::yarn::meta_model::name_tree> create_std_list_dogen_yarn_meta_model_name_tree(unsigned int position) {
+    std::list<dogen::yarn::meta_model::name_tree> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_name_tree(position + i));
+        r.push_back(create_dogen_yarn_meta_model_name_tree(position + i));
     }
     return r;
 }
@@ -47,9 +47,9 @@ bool create_bool(const unsigned int position) {
     return (position % 2) != 0;
 }
 
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
+dogen::yarn::meta_model::languages
+create_dogen_yarn_meta_model_languages(const unsigned int position) {
+    return dogen::yarn::meta_model::languages_generator::create(position);
 }
 
 std::string create_std_string(const unsigned int position) {
@@ -58,10 +58,10 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-std::map<dogen::yarn::languages, std::string> create_std_map_dogen_yarn_languages_std_string(unsigned int position) {
-    std::map<dogen::yarn::languages, std::string> r;
+std::map<dogen::yarn::meta_model::languages, std::string> create_std_map_dogen_yarn_meta_model_languages_std_string(unsigned int position) {
+    std::map<dogen::yarn::meta_model::languages, std::string> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_languages(position + i), create_std_string(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_languages(position + i), create_std_string(position + i)));
     }
     return r;
 }
@@ -70,16 +70,17 @@ std::map<dogen::yarn::languages, std::string> create_std_map_dogen_yarn_language
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 name_tree_generator::name_tree_generator() : position_(0) { }
 
 void name_tree_generator::
 populate(const unsigned int position, result_type& v) {
-    v.current(create_dogen_yarn_name(position + 0));
-    v.children(create_std_list_dogen_yarn_name_tree(position + 1));
+    v.current(create_dogen_yarn_meta_model_name(position + 0));
+    v.children(create_std_list_dogen_yarn_meta_model_name_tree(position + 1));
     v.are_children_opaque(create_bool(position + 2));
     v.is_circular_dependency(create_bool(position + 3));
-    v.qualified(create_std_map_dogen_yarn_languages_std_string(position + 4));
+    v.qualified(create_std_map_dogen_yarn_meta_model_languages_std_string(position + 4));
     v.identifiable(create_std_string(position + 5));
     v.is_current_simple_type(create_bool(position + 6));
     v.is_floating_point(create_bool(position + 7));
@@ -104,4 +105,4 @@ name_tree_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/meta_model/object_td.cpp b/projects/yarn/src/test_data/meta_model/object_td.cpp
new file mode 100644
index 000000000..bac6810aa
--- /dev/null
+++ b/projects/yarn/src/test_data/meta_model/object_td.cpp
@@ -0,0 +1,157 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/attribute_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/type_parameters_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp"
+
+namespace {
+
+dogen::yarn::meta_model::attribute
+create_dogen_yarn_meta_model_attribute(const unsigned int position) {
+    return dogen::yarn::meta_model::attribute_generator::create(position);
+}
+
+std::list<dogen::yarn::meta_model::attribute> create_std_list_dogen_yarn_meta_model_attribute(unsigned int position) {
+    std::list<dogen::yarn::meta_model::attribute> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_yarn_meta_model_attribute(position + i));
+    }
+    return r;
+}
+
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
+}
+
+std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > create_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> > r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_name(position + i), create_std_list_dogen_yarn_meta_model_attribute(position + i)));
+    }
+    return r;
+}
+
+bool create_bool(const unsigned int position) {
+    return (position % 2) != 0;
+}
+
+std::list<dogen::yarn::meta_model::name> create_std_list_dogen_yarn_meta_model_name(unsigned int position) {
+    std::list<dogen::yarn::meta_model::name> r;
+    for (unsigned int i(0); i < 4; ++i) {
+        r.push_back(create_dogen_yarn_meta_model_name(position + i));
+    }
+    return r;
+}
+
+boost::optional<dogen::yarn::meta_model::name>
+create_boost_optional_dogen_yarn_meta_model_name(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::name> r(
+        create_dogen_yarn_meta_model_name(position));
+    return r;
+}
+
+dogen::yarn::meta_model::type_parameters
+create_dogen_yarn_meta_model_type_parameters(const unsigned int position) {
+    return dogen::yarn::meta_model::type_parameters_generator::create(position);
+}
+
+dogen::yarn::meta_model::object_types
+create_dogen_yarn_meta_model_object_types(const unsigned int position) {
+    return dogen::yarn::meta_model::object_types_generator::create(position);
+}
+
+dogen::yarn::meta_model::orm_object_properties
+create_dogen_yarn_meta_model_orm_object_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_object_properties_generator::create(position);
+}
+
+boost::optional<dogen::yarn::meta_model::orm_object_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_object_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_object_properties> r(
+        create_dogen_yarn_meta_model_orm_object_properties(position));
+    return r;
+}
+
+}
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+object_generator::object_generator() : position_(0) { }
+
+void object_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::yarn::meta_model::element_generator::populate(position, v);
+    v.all_attributes(create_std_list_dogen_yarn_meta_model_attribute(position + 0));
+    v.local_attributes(create_std_list_dogen_yarn_meta_model_attribute(position + 1));
+    v.inherited_attributes(create_std_unordered_map_dogen_yarn_meta_model_name_std_list_dogen_yarn_meta_model_attribute(position + 2));
+    v.is_immutable(create_bool(position + 3));
+    v.is_fluent(create_bool(position + 4));
+    v.is_parent(create_bool(position + 5));
+    v.is_child(create_bool(position + 6));
+    v.is_leaf(create_bool(position + 7));
+    v.is_final(create_bool(position + 8));
+    v.is_abstract(create_bool(position + 9));
+    v.in_inheritance_relationship(create_bool(position + 10));
+    v.root_parents(create_std_list_dogen_yarn_meta_model_name(position + 11));
+    v.parents(create_std_list_dogen_yarn_meta_model_name(position + 12));
+    v.leaves(create_std_list_dogen_yarn_meta_model_name(position + 13));
+    v.transparent_associations(create_std_list_dogen_yarn_meta_model_name(position + 14));
+    v.opaque_associations(create_std_list_dogen_yarn_meta_model_name(position + 15));
+    v.base_visitor(create_boost_optional_dogen_yarn_meta_model_name(position + 16));
+    v.derived_visitor(create_boost_optional_dogen_yarn_meta_model_name(position + 17));
+    v.is_visitation_root(create_bool(position + 18));
+    v.is_visitation_leaf(create_bool(position + 19));
+    v.type_parameters(create_dogen_yarn_meta_model_type_parameters(position + 20));
+    v.object_type(create_dogen_yarn_meta_model_object_types(position + 21));
+    v.modeled_concepts(create_std_list_dogen_yarn_meta_model_name(position + 22));
+    v.associative_container_keys(create_std_list_dogen_yarn_meta_model_name(position + 23));
+    v.provides_opaqueness(create_bool(position + 24));
+    v.can_be_primitive_underlier(create_bool(position + 25));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_object_properties(position + 26));
+}
+
+object_generator::result_type
+object_generator::create(const unsigned int position) {
+    object r;
+    object_generator::populate(position, r);
+    return r;
+}
+
+object_generator::result_type*
+object_generator::create_ptr(const unsigned int position) {
+    object* p = new object();
+    object_generator::populate(position, *p);
+    return p;
+}
+
+object_generator::result_type
+object_generator::operator()() {
+    return create(position_++);
+}
+
+} } }
diff --git a/projects/yarn/src/test_data/object_types_td.cpp b/projects/yarn/src/test_data/meta_model/object_types_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/object_types_td.cpp
rename to projects/yarn/src/test_data/meta_model/object_types_td.cpp
index 66e8f4641..6fbd98963 100644
--- a/projects/yarn/src/test_data/object_types_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/object_types_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/object_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/object_types_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 object_types_generator::object_types_generator() : position_(0) { }
 void object_types_generator::
@@ -41,4 +42,4 @@ object_types_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/origin_types_td.cpp b/projects/yarn/src/test_data/meta_model/origin_types_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/origin_types_td.cpp
rename to projects/yarn/src/test_data/meta_model/origin_types_td.cpp
index efdd0295e..8dc638092 100644
--- a/projects/yarn/src/test_data/origin_types_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/origin_types_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/origin_types_td.hpp"
+#include "dogen/yarn/test_data/meta_model/origin_types_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 origin_types_generator::origin_types_generator() : position_(0) { }
 void origin_types_generator::
@@ -41,4 +42,4 @@ origin_types_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_attribute_properties_td.cpp b/projects/yarn/src/test_data/meta_model/orm_attribute_properties_td.cpp
similarity index 72%
rename from projects/yarn/src/test_data/orm_attribute_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_attribute_properties_td.cpp
index eb7f413b3..8a604c18e 100644
--- a/projects/yarn/src/test_data/orm_attribute_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_attribute_properties_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/orm_database_systems_td.hpp"
-#include "dogen/yarn/test_data/orm_attribute_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_attribute_properties_td.hpp"
 
 namespace {
 
@@ -41,15 +41,15 @@ create_boost_optional_bool(unsigned int position) {
     return r;
 }
 
-dogen::yarn::orm_database_systems
-create_dogen_yarn_orm_database_systems(const unsigned int position) {
-    return dogen::yarn::orm_database_systems_generator::create(position);
+dogen::yarn::meta_model::orm_database_systems
+create_dogen_yarn_meta_model_orm_database_systems(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_database_systems_generator::create(position);
 }
 
-std::unordered_map<dogen::yarn::orm_database_systems, std::string> create_std_unordered_map_dogen_yarn_orm_database_systems_std_string(unsigned int position) {
-    std::unordered_map<dogen::yarn::orm_database_systems, std::string> r;
+std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string> create_std_unordered_map_dogen_yarn_meta_model_orm_database_systems_std_string(unsigned int position) {
+    std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_orm_database_systems(position + i), create_std_string(position + i)));
+        r.insert(std::make_pair(create_dogen_yarn_meta_model_orm_database_systems(position + i), create_std_string(position + i)));
     }
     return r;
 }
@@ -58,6 +58,7 @@ std::unordered_map<dogen::yarn::orm_database_systems, std::string> create_std_un
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_attribute_properties_generator::orm_attribute_properties_generator() : position_(0) { }
 
@@ -66,7 +67,7 @@ populate(const unsigned int position, result_type& v) {
     v.column_name(create_std_string(position + 0));
     v.is_primary_key(create_bool(position + 1));
     v.is_nullable(create_boost_optional_bool(position + 2));
-    v.type_overrides(create_std_unordered_map_dogen_yarn_orm_database_systems_std_string(position + 3));
+    v.type_overrides(create_std_unordered_map_dogen_yarn_meta_model_orm_database_systems_std_string(position + 3));
     v.is_composite(create_bool(position + 4));
 }
 
@@ -89,4 +90,4 @@ orm_attribute_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_database_systems_td.cpp b/projects/yarn/src/test_data/meta_model/orm_database_systems_td.cpp
similarity index 93%
rename from projects/yarn/src/test_data/orm_database_systems_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_database_systems_td.cpp
index 1c7d770a2..3284b6e34 100644
--- a/projects/yarn/src/test_data/orm_database_systems_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_database_systems_td.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/orm_database_systems_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_database_systems_generator::orm_database_systems_generator() : position_(0) { }
 void orm_database_systems_generator::
@@ -41,4 +42,4 @@ orm_database_systems_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_model_properties_td.cpp b/projects/yarn/src/test_data/meta_model/orm_model_properties_td.cpp
similarity index 59%
rename from projects/yarn/src/test_data/orm_model_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_model_properties_td.cpp
index 04dd09ca5..3eff1b294 100644
--- a/projects/yarn/src/test_data/orm_model_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_model_properties_td.cpp
@@ -19,21 +19,21 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/letter_cases_td.hpp"
-#include "dogen/yarn/test_data/orm_database_systems_td.hpp"
-#include "dogen/yarn/test_data/orm_model_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/letter_cases_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_database_systems_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_model_properties_td.hpp"
 
 namespace {
 
-dogen::yarn::orm_database_systems
-create_dogen_yarn_orm_database_systems(const unsigned int position) {
-    return dogen::yarn::orm_database_systems_generator::create(position);
+dogen::yarn::meta_model::orm_database_systems
+create_dogen_yarn_meta_model_orm_database_systems(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_database_systems_generator::create(position);
 }
 
-std::vector<dogen::yarn::orm_database_systems> create_std_vector_dogen_yarn_orm_database_systems(unsigned int position) {
-    std::vector<dogen::yarn::orm_database_systems> r;
+std::vector<dogen::yarn::meta_model::orm_database_systems> create_std_vector_dogen_yarn_meta_model_orm_database_systems(unsigned int position) {
+    std::vector<dogen::yarn::meta_model::orm_database_systems> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_orm_database_systems(position + i));
+        r.push_back(create_dogen_yarn_meta_model_orm_database_systems(position + i));
     }
     return r;
 }
@@ -44,15 +44,15 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::letter_cases
-create_dogen_yarn_letter_cases(const unsigned int position) {
-    return dogen::yarn::letter_cases_generator::create(position);
+dogen::yarn::meta_model::letter_cases
+create_dogen_yarn_meta_model_letter_cases(const unsigned int position) {
+    return dogen::yarn::meta_model::letter_cases_generator::create(position);
 }
 
-boost::optional<dogen::yarn::letter_cases>
-create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
-    boost::optional<dogen::yarn::letter_cases> r(
-        create_dogen_yarn_letter_cases(position));
+boost::optional<dogen::yarn::meta_model::letter_cases>
+create_boost_optional_dogen_yarn_meta_model_letter_cases(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::letter_cases> r(
+        create_dogen_yarn_meta_model_letter_cases(position));
     return r;
 }
 
@@ -60,14 +60,15 @@ create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_model_properties_generator::orm_model_properties_generator() : position_(0) { }
 
 void orm_model_properties_generator::
 populate(const unsigned int position, result_type& v) {
-    v.database_systems(create_std_vector_dogen_yarn_orm_database_systems(position + 0));
+    v.database_systems(create_std_vector_dogen_yarn_meta_model_orm_database_systems(position + 0));
     v.schema_name(create_std_string(position + 1));
-    v.letter_case(create_boost_optional_dogen_yarn_letter_cases(position + 2));
+    v.letter_case(create_boost_optional_dogen_yarn_meta_model_letter_cases(position + 2));
 }
 
 orm_model_properties_generator::result_type
@@ -89,4 +90,4 @@ orm_model_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_module_properties_td.cpp b/projects/yarn/src/test_data/meta_model/orm_module_properties_td.cpp
similarity index 95%
rename from projects/yarn/src/test_data/orm_module_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_module_properties_td.cpp
index 6bad211e8..5eeea5be7 100644
--- a/projects/yarn/src/test_data/orm_module_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_module_properties_td.cpp
@@ -19,7 +19,7 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/orm_module_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_module_properties_td.hpp"
 
 namespace {
 
@@ -33,6 +33,7 @@ std::string create_std_string(const unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_module_properties_generator::orm_module_properties_generator() : position_(0) { }
 
@@ -60,4 +61,4 @@ orm_module_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_object_properties_td.cpp b/projects/yarn/src/test_data/meta_model/orm_object_properties_td.cpp
similarity index 76%
rename from projects/yarn/src/test_data/orm_object_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_object_properties_td.cpp
index a46c2a1d3..4e6f71fbf 100644
--- a/projects/yarn/src/test_data/orm_object_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_object_properties_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/letter_cases_td.hpp"
-#include "dogen/yarn/test_data/orm_object_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/letter_cases_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_object_properties_td.hpp"
 
 namespace {
 
@@ -34,15 +34,15 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::letter_cases
-create_dogen_yarn_letter_cases(const unsigned int position) {
-    return dogen::yarn::letter_cases_generator::create(position);
+dogen::yarn::meta_model::letter_cases
+create_dogen_yarn_meta_model_letter_cases(const unsigned int position) {
+    return dogen::yarn::meta_model::letter_cases_generator::create(position);
 }
 
-boost::optional<dogen::yarn::letter_cases>
-create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
-    boost::optional<dogen::yarn::letter_cases> r(
-        create_dogen_yarn_letter_cases(position));
+boost::optional<dogen::yarn::meta_model::letter_cases>
+create_boost_optional_dogen_yarn_meta_model_letter_cases(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::letter_cases> r(
+        create_dogen_yarn_meta_model_letter_cases(position));
     return r;
 }
 
@@ -50,6 +50,7 @@ create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_object_properties_generator::orm_object_properties_generator() : position_(0) { }
 
@@ -60,7 +61,7 @@ populate(const unsigned int position, result_type& v) {
     v.table_name(create_std_string(position + 2));
     v.is_value(create_bool(position + 3));
     v.has_primary_key(create_bool(position + 4));
-    v.letter_case(create_boost_optional_dogen_yarn_letter_cases(position + 5));
+    v.letter_case(create_boost_optional_dogen_yarn_meta_model_letter_cases(position + 5));
 }
 
 orm_object_properties_generator::result_type
@@ -82,4 +83,4 @@ orm_object_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/orm_primitive_properties_td.cpp b/projects/yarn/src/test_data/meta_model/orm_primitive_properties_td.cpp
similarity index 75%
rename from projects/yarn/src/test_data/orm_primitive_properties_td.cpp
rename to projects/yarn/src/test_data/meta_model/orm_primitive_properties_td.cpp
index 7a21ab60e..7b0d16d5b 100644
--- a/projects/yarn/src/test_data/orm_primitive_properties_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/orm_primitive_properties_td.cpp
@@ -19,8 +19,8 @@
  *
  */
 #include <sstream>
-#include "dogen/yarn/test_data/letter_cases_td.hpp"
-#include "dogen/yarn/test_data/orm_primitive_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/letter_cases_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp"
 
 namespace {
 
@@ -34,15 +34,15 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::letter_cases
-create_dogen_yarn_letter_cases(const unsigned int position) {
-    return dogen::yarn::letter_cases_generator::create(position);
+dogen::yarn::meta_model::letter_cases
+create_dogen_yarn_meta_model_letter_cases(const unsigned int position) {
+    return dogen::yarn::meta_model::letter_cases_generator::create(position);
 }
 
-boost::optional<dogen::yarn::letter_cases>
-create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
-    boost::optional<dogen::yarn::letter_cases> r(
-        create_dogen_yarn_letter_cases(position));
+boost::optional<dogen::yarn::meta_model::letter_cases>
+create_boost_optional_dogen_yarn_meta_model_letter_cases(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::letter_cases> r(
+        create_dogen_yarn_meta_model_letter_cases(position));
     return r;
 }
 
@@ -50,6 +50,7 @@ create_boost_optional_dogen_yarn_letter_cases(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_primitive_properties_generator::orm_primitive_properties_generator() : position_(0) { }
 
@@ -57,7 +58,7 @@ void orm_primitive_properties_generator::
 populate(const unsigned int position, result_type& v) {
     v.generate_mapping(create_bool(position + 0));
     v.schema_name(create_std_string(position + 1));
-    v.letter_case(create_boost_optional_dogen_yarn_letter_cases(position + 2));
+    v.letter_case(create_boost_optional_dogen_yarn_meta_model_letter_cases(position + 2));
 }
 
 orm_primitive_properties_generator::result_type
@@ -79,4 +80,4 @@ orm_primitive_properties_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/primitive_td.cpp b/projects/yarn/src/test_data/meta_model/primitive_td.cpp
similarity index 59%
rename from projects/yarn/src/test_data/primitive_td.cpp
rename to projects/yarn/src/test_data/meta_model/primitive_td.cpp
index c257bf76a..bfb6ed038 100644
--- a/projects/yarn/src/test_data/primitive_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/primitive_td.cpp
@@ -18,10 +18,10 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/attribute_td.hpp"
-#include "dogen/yarn/test_data/primitive_td.hpp"
-#include "dogen/yarn/test_data/orm_primitive_properties_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/attribute_td.hpp"
+#include "dogen/yarn/test_data/meta_model/primitive_td.hpp"
+#include "dogen/yarn/test_data/meta_model/orm_primitive_properties_td.hpp"
 
 namespace {
 
@@ -29,20 +29,20 @@ bool create_bool(const unsigned int position) {
     return (position % 2) != 0;
 }
 
-dogen::yarn::attribute
-create_dogen_yarn_attribute(const unsigned int position) {
-    return dogen::yarn::attribute_generator::create(position);
+dogen::yarn::meta_model::attribute
+create_dogen_yarn_meta_model_attribute(const unsigned int position) {
+    return dogen::yarn::meta_model::attribute_generator::create(position);
 }
 
-dogen::yarn::orm_primitive_properties
-create_dogen_yarn_orm_primitive_properties(const unsigned int position) {
-    return dogen::yarn::orm_primitive_properties_generator::create(position);
+dogen::yarn::meta_model::orm_primitive_properties
+create_dogen_yarn_meta_model_orm_primitive_properties(const unsigned int position) {
+    return dogen::yarn::meta_model::orm_primitive_properties_generator::create(position);
 }
 
-boost::optional<dogen::yarn::orm_primitive_properties>
-create_boost_optional_dogen_yarn_orm_primitive_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_primitive_properties> r(
-        create_dogen_yarn_orm_primitive_properties(position));
+boost::optional<dogen::yarn::meta_model::orm_primitive_properties>
+create_boost_optional_dogen_yarn_meta_model_orm_primitive_properties(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::orm_primitive_properties> r(
+        create_dogen_yarn_meta_model_orm_primitive_properties(position));
     return r;
 }
 
@@ -50,17 +50,18 @@ create_boost_optional_dogen_yarn_orm_primitive_properties(unsigned int position)
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 primitive_generator::primitive_generator() : position_(0) { }
 
 void primitive_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
+    dogen::yarn::meta_model::element_generator::populate(position, v);
     v.is_nullable(create_bool(position + 0));
-    v.value_attribute(create_dogen_yarn_attribute(position + 1));
+    v.value_attribute(create_dogen_yarn_meta_model_attribute(position + 1));
     v.use_type_aliasing(create_bool(position + 2));
     v.is_immutable(create_bool(position + 3));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_primitive_properties(position + 4));
+    v.orm_properties(create_boost_optional_dogen_yarn_meta_model_orm_primitive_properties(position + 4));
 }
 
 primitive_generator::result_type
@@ -82,4 +83,4 @@ primitive_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/type_parameters_td.cpp b/projects/yarn/src/test_data/meta_model/type_parameters_td.cpp
similarity index 95%
rename from projects/yarn/src/test_data/type_parameters_td.cpp
rename to projects/yarn/src/test_data/meta_model/type_parameters_td.cpp
index f6245387b..2ea254602 100644
--- a/projects/yarn/src/test_data/type_parameters_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/type_parameters_td.cpp
@@ -18,7 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/type_parameters_td.hpp"
+#include "dogen/yarn/test_data/meta_model/type_parameters_td.hpp"
 
 namespace {
 
@@ -34,6 +34,7 @@ unsigned int create_unsigned_int(const unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 type_parameters_generator::type_parameters_generator() : position_(0) { }
 
@@ -63,4 +64,4 @@ type_parameters_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/visitor_td.cpp b/projects/yarn/src/test_data/meta_model/visitor_td.cpp
similarity index 60%
rename from projects/yarn/src/test_data/visitor_td.cpp
rename to projects/yarn/src/test_data/meta_model/visitor_td.cpp
index 792300d2f..6c5dce18a 100644
--- a/projects/yarn/src/test_data/visitor_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/visitor_td.cpp
@@ -18,29 +18,29 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/visitor_td.hpp"
+#include "dogen/yarn/test_data/meta_model/name_td.hpp"
+#include "dogen/yarn/test_data/meta_model/element_td.hpp"
+#include "dogen/yarn/test_data/meta_model/visitor_td.hpp"
 
 namespace {
 
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
+dogen::yarn::meta_model::name
+create_dogen_yarn_meta_model_name(const unsigned int position) {
+    return dogen::yarn::meta_model::name_generator::create(position);
 }
 
-std::list<dogen::yarn::name> create_std_list_dogen_yarn_name(unsigned int position) {
-    std::list<dogen::yarn::name> r;
+std::list<dogen::yarn::meta_model::name> create_std_list_dogen_yarn_meta_model_name(unsigned int position) {
+    std::list<dogen::yarn::meta_model::name> r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_name(position + i));
+        r.push_back(create_dogen_yarn_meta_model_name(position + i));
     }
     return r;
 }
 
-boost::optional<dogen::yarn::name>
-create_boost_optional_dogen_yarn_name(unsigned int position) {
-    boost::optional<dogen::yarn::name> r(
-        create_dogen_yarn_name(position));
+boost::optional<dogen::yarn::meta_model::name>
+create_boost_optional_dogen_yarn_meta_model_name(unsigned int position) {
+    boost::optional<dogen::yarn::meta_model::name> r(
+        create_dogen_yarn_meta_model_name(position));
     return r;
 }
 
@@ -48,14 +48,15 @@ create_boost_optional_dogen_yarn_name(unsigned int position) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 visitor_generator::visitor_generator() : position_(0) { }
 
 void visitor_generator::
 populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
-    v.visits(create_std_list_dogen_yarn_name(position + 0));
-    v.parent(create_boost_optional_dogen_yarn_name(position + 1));
+    dogen::yarn::meta_model::element_generator::populate(position, v);
+    v.visits(create_std_list_dogen_yarn_meta_model_name(position + 0));
+    v.parent(create_boost_optional_dogen_yarn_meta_model_name(position + 1));
 }
 
 visitor_generator::result_type
@@ -77,4 +78,4 @@ visitor_generator::operator()() {
     return create(position_++);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/test_data/model_td.cpp b/projects/yarn/src/test_data/model_td.cpp
deleted file mode 100644
index 8cf6153b8..000000000
--- a/projects/yarn/src/test_data/model_td.cpp
+++ /dev/null
@@ -1,134 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include <sstream>
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/model_td.hpp"
-#include "dogen/yarn/test_data/module_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/languages_td.hpp"
-#include "dogen/yarn/test_data/orm_model_properties_td.hpp"
-
-namespace {
-
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
-}
-
-dogen::yarn::element*
-create_dogen_yarn_element_ptr(const unsigned int position) {
-    return dogen::yarn::element_generator::create_ptr(position);
-}
-
-boost::shared_ptr<dogen::yarn::element>
-create_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
-    boost::shared_ptr<dogen::yarn::element> r(
-        create_dogen_yarn_element_ptr(position));
-    return r;
-}
-
-std::vector<boost::shared_ptr<dogen::yarn::element> > create_std_vector_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
-    std::vector<boost::shared_ptr<dogen::yarn::element> > r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_boost_shared_ptr_dogen_yarn_element(position + i));
-    }
-    return r;
-}
-
-dogen::yarn::module
-create_dogen_yarn_module(const unsigned int position) {
-    return dogen::yarn::module_generator::create(position);
-}
-
-std::string create_std_string(const unsigned int position) {
-    std::ostringstream s;
-    s << "a_string_" << position;
-    return s.str();
-}
-
-std::unordered_set<std::string> create_std_unordered_set_std_string(unsigned int position) {
-    std::unordered_set<std::string> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(create_std_string(position + i));
-    }
-    return r;
-}
-
-bool create_bool(const unsigned int position) {
-    return (position % 2) != 0;
-}
-
-dogen::yarn::languages
-create_dogen_yarn_languages(const unsigned int position) {
-    return dogen::yarn::languages_generator::create(position);
-}
-
-dogen::yarn::orm_model_properties
-create_dogen_yarn_orm_model_properties(const unsigned int position) {
-    return dogen::yarn::orm_model_properties_generator::create(position);
-}
-
-boost::optional<dogen::yarn::orm_model_properties>
-create_boost_optional_dogen_yarn_orm_model_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_model_properties> r(
-        create_dogen_yarn_orm_model_properties(position));
-    return r;
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-model_generator::model_generator() : position_(0) { }
-
-void model_generator::
-populate(const unsigned int position, result_type& v) {
-    v.name(create_dogen_yarn_name(position + 0));
-    v.elements(create_std_vector_boost_shared_ptr_dogen_yarn_element(position + 1));
-    v.root_module(create_dogen_yarn_module(position + 2));
-    v.module_ids(create_std_unordered_set_std_string(position + 3));
-    v.has_generatable_types(create_bool(position + 4));
-    v.input_language(create_dogen_yarn_languages(position + 5));
-    v.output_language(create_dogen_yarn_languages(position + 6));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_model_properties(position + 7));
-}
-
-model_generator::result_type
-model_generator::create(const unsigned int position) {
-    model r;
-    model_generator::populate(position, r);
-    return r;
-}
-
-model_generator::result_type*
-model_generator::create_ptr(const unsigned int position) {
-    model* p = new model();
-    model_generator::populate(position, *p);
-    return p;
-}
-
-model_generator::result_type
-model_generator::operator()() {
-    return create(position_++);
-}
-
-} }
diff --git a/projects/yarn/src/test_data/object_td.cpp b/projects/yarn/src/test_data/object_td.cpp
deleted file mode 100644
index 970d156b7..000000000
--- a/projects/yarn/src/test_data/object_td.cpp
+++ /dev/null
@@ -1,156 +0,0 @@
-/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
- *
- * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 3 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
- * MA 02110-1301, USA.
- *
- */
-#include "dogen/yarn/test_data/name_td.hpp"
-#include "dogen/yarn/test_data/object_td.hpp"
-#include "dogen/yarn/test_data/element_td.hpp"
-#include "dogen/yarn/test_data/attribute_td.hpp"
-#include "dogen/yarn/test_data/object_types_td.hpp"
-#include "dogen/yarn/test_data/type_parameters_td.hpp"
-#include "dogen/yarn/test_data/orm_object_properties_td.hpp"
-
-namespace {
-
-dogen::yarn::attribute
-create_dogen_yarn_attribute(const unsigned int position) {
-    return dogen::yarn::attribute_generator::create(position);
-}
-
-std::list<dogen::yarn::attribute> create_std_list_dogen_yarn_attribute(unsigned int position) {
-    std::list<dogen::yarn::attribute> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_attribute(position + i));
-    }
-    return r;
-}
-
-dogen::yarn::name
-create_dogen_yarn_name(const unsigned int position) {
-    return dogen::yarn::name_generator::create(position);
-}
-
-std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > create_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(unsigned int position) {
-    std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> > r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_dogen_yarn_name(position + i), create_std_list_dogen_yarn_attribute(position + i)));
-    }
-    return r;
-}
-
-bool create_bool(const unsigned int position) {
-    return (position % 2) != 0;
-}
-
-std::list<dogen::yarn::name> create_std_list_dogen_yarn_name(unsigned int position) {
-    std::list<dogen::yarn::name> r;
-    for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_dogen_yarn_name(position + i));
-    }
-    return r;
-}
-
-boost::optional<dogen::yarn::name>
-create_boost_optional_dogen_yarn_name(unsigned int position) {
-    boost::optional<dogen::yarn::name> r(
-        create_dogen_yarn_name(position));
-    return r;
-}
-
-dogen::yarn::type_parameters
-create_dogen_yarn_type_parameters(const unsigned int position) {
-    return dogen::yarn::type_parameters_generator::create(position);
-}
-
-dogen::yarn::object_types
-create_dogen_yarn_object_types(const unsigned int position) {
-    return dogen::yarn::object_types_generator::create(position);
-}
-
-dogen::yarn::orm_object_properties
-create_dogen_yarn_orm_object_properties(const unsigned int position) {
-    return dogen::yarn::orm_object_properties_generator::create(position);
-}
-
-boost::optional<dogen::yarn::orm_object_properties>
-create_boost_optional_dogen_yarn_orm_object_properties(unsigned int position) {
-    boost::optional<dogen::yarn::orm_object_properties> r(
-        create_dogen_yarn_orm_object_properties(position));
-    return r;
-}
-
-}
-
-namespace dogen {
-namespace yarn {
-
-object_generator::object_generator() : position_(0) { }
-
-void object_generator::
-populate(const unsigned int position, result_type& v) {
-    dogen::yarn::element_generator::populate(position, v);
-    v.all_attributes(create_std_list_dogen_yarn_attribute(position + 0));
-    v.local_attributes(create_std_list_dogen_yarn_attribute(position + 1));
-    v.inherited_attributes(create_std_unordered_map_dogen_yarn_name_std_list_dogen_yarn_attribute(position + 2));
-    v.is_immutable(create_bool(position + 3));
-    v.is_fluent(create_bool(position + 4));
-    v.is_parent(create_bool(position + 5));
-    v.is_child(create_bool(position + 6));
-    v.is_leaf(create_bool(position + 7));
-    v.is_final(create_bool(position + 8));
-    v.is_abstract(create_bool(position + 9));
-    v.in_inheritance_relationship(create_bool(position + 10));
-    v.root_parents(create_std_list_dogen_yarn_name(position + 11));
-    v.parents(create_std_list_dogen_yarn_name(position + 12));
-    v.leaves(create_std_list_dogen_yarn_name(position + 13));
-    v.transparent_associations(create_std_list_dogen_yarn_name(position + 14));
-    v.opaque_associations(create_std_list_dogen_yarn_name(position + 15));
-    v.base_visitor(create_boost_optional_dogen_yarn_name(position + 16));
-    v.derived_visitor(create_boost_optional_dogen_yarn_name(position + 17));
-    v.is_visitation_root(create_bool(position + 18));
-    v.is_visitation_leaf(create_bool(position + 19));
-    v.type_parameters(create_dogen_yarn_type_parameters(position + 20));
-    v.object_type(create_dogen_yarn_object_types(position + 21));
-    v.modeled_concepts(create_std_list_dogen_yarn_name(position + 22));
-    v.associative_container_keys(create_std_list_dogen_yarn_name(position + 23));
-    v.provides_opaqueness(create_bool(position + 24));
-    v.can_be_primitive_underlier(create_bool(position + 25));
-    v.orm_properties(create_boost_optional_dogen_yarn_orm_object_properties(position + 26));
-}
-
-object_generator::result_type
-object_generator::create(const unsigned int position) {
-    object r;
-    object_generator::populate(position, r);
-    return r;
-}
-
-object_generator::result_type*
-object_generator::create_ptr(const unsigned int position) {
-    object* p = new object();
-    object_generator::populate(position, *p);
-    return p;
-}
-
-object_generator::result_type
-object_generator::operator()() {
-    return create(position_++);
-}
-
-} }
diff --git a/projects/yarn/src/types/helpers/decomposer.cpp b/projects/yarn/src/types/helpers/decomposer.cpp
index 3e033be9f..6ad027440 100644
--- a/projects/yarn/src/types/helpers/decomposer.cpp
+++ b/projects/yarn/src/types/helpers/decomposer.cpp
@@ -24,44 +24,45 @@ namespace dogen {
 namespace yarn {
 namespace helpers {
 
-void decomposer::add_name(const std::string& owner, const name& n) {
-    std::pair<std::string, name> pair;
+void decomposer::add_name(const std::string& owner, const meta_model::name& n) {
+    std::pair<std::string, meta_model::name> pair;
     pair.first = owner;
     pair.second = n;
     result_.names().push_back(pair);
 }
 
-void decomposer::add_name_tree(const std::string& owner, const name_tree& nt) {
-    std::pair<std::string, name_tree> pair;
+void decomposer::
+add_name_tree(const std::string& owner, const meta_model::name_tree& nt) {
+    std::pair<std::string, meta_model::name_tree> pair;
     pair.first = owner;
     pair.second = nt;
     result_.name_trees().push_back(pair);
 }
 
 void decomposer::
-add_names(const std::string& owner, const std::list<name>& names) {
+add_names(const std::string& owner, const std::list<meta_model::name>& names) {
     for (const auto& n : names)
         add_name(owner, n);
 }
 
-void decomposer::
-process_attributes(const std::string& owner, const std::list<attribute>& attrs) {
+void decomposer::process_attributes(const std::string& owner,
+    const std::list<meta_model::attribute>& attrs) {
     for (const auto& attr : attrs) {
         add_name(owner, attr.name());
         add_name_tree(owner, attr.parsed_type());
     }
 }
 
-void decomposer::process_element(const element& e) {
+void decomposer::process_element(const meta_model::element& e) {
     add_name(e.name().id(), e.name());
 }
 
-void decomposer::decompose(const yarn::concept& c) {
+void decomposer::decompose(const meta_model::concept& c) {
     process_element(c);
     process_attributes(c.name().id(), c.local_attributes());
 }
 
-void decomposer::decompose(const yarn::module& m) {
+void decomposer::decompose(const meta_model::module& m) {
     /*
      * The global module represents the unnamed global
      * namespace. There can only be one of these and it is generated
@@ -73,22 +74,22 @@ void decomposer::decompose(const yarn::module& m) {
     process_element(m);
 }
 
-void decomposer::decompose(const yarn::enumeration& e) {
+void decomposer::decompose(const meta_model::enumeration& e) {
     process_element(e);
     for (const auto& en : e.enumerators())
         add_name(e.name().id(), en.name());
 }
 
-void decomposer::decompose(const yarn::exception& e) {
+void decomposer::decompose(const meta_model::exception& e) {
     process_element(e);
 }
 
-void decomposer::decompose(const yarn::object& o) {
+void decomposer::decompose(const meta_model::object& o) {
     process_element(o);
     process_attributes(o.name().id(), o.local_attributes());
 }
 
-void decomposer::decompose(const yarn::builtin& b) {
+void decomposer::decompose(const meta_model::builtin& b) {
     process_element(b);
 }
 
diff --git a/projects/yarn/src/types/helpers/decomposition_result.cpp b/projects/yarn/src/types/helpers/decomposition_result.cpp
index a4c0cc393..984d0f1b6 100644
--- a/projects/yarn/src/types/helpers/decomposition_result.cpp
+++ b/projects/yarn/src/types/helpers/decomposition_result.cpp
@@ -25,8 +25,8 @@ namespace yarn {
 namespace helpers {
 
 decomposition_result::decomposition_result(
-    const std::list<std::pair<std::string, dogen::yarn::name> >& names,
-    const std::list<std::pair<std::string, dogen::yarn::name_tree> >& name_trees)
+    const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& names,
+    const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& name_trees)
     : names_(names),
       name_trees_(name_trees) { }
 
@@ -47,35 +47,35 @@ decomposition_result& decomposition_result::operator=(decomposition_result other
     return *this;
 }
 
-const std::list<std::pair<std::string, dogen::yarn::name> >& decomposition_result::names() const {
+const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& decomposition_result::names() const {
     return names_;
 }
 
-std::list<std::pair<std::string, dogen::yarn::name> >& decomposition_result::names() {
+std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& decomposition_result::names() {
     return names_;
 }
 
-void decomposition_result::names(const std::list<std::pair<std::string, dogen::yarn::name> >& v) {
+void decomposition_result::names(const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >& v) {
     names_ = v;
 }
 
-void decomposition_result::names(const std::list<std::pair<std::string, dogen::yarn::name> >&& v) {
+void decomposition_result::names(const std::list<std::pair<std::string, dogen::yarn::meta_model::name> >&& v) {
     names_ = std::move(v);
 }
 
-const std::list<std::pair<std::string, dogen::yarn::name_tree> >& decomposition_result::name_trees() const {
+const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& decomposition_result::name_trees() const {
     return name_trees_;
 }
 
-std::list<std::pair<std::string, dogen::yarn::name_tree> >& decomposition_result::name_trees() {
+std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& decomposition_result::name_trees() {
     return name_trees_;
 }
 
-void decomposition_result::name_trees(const std::list<std::pair<std::string, dogen::yarn::name_tree> >& v) {
+void decomposition_result::name_trees(const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >& v) {
     name_trees_ = v;
 }
 
-void decomposition_result::name_trees(const std::list<std::pair<std::string, dogen::yarn::name_tree> >&& v) {
+void decomposition_result::name_trees(const std::list<std::pair<std::string, dogen::yarn::meta_model::name_tree> >&& v) {
     name_trees_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/identifiable_and_qualified_builder.cpp b/projects/yarn/src/types/helpers/identifiable_and_qualified_builder.cpp
index 6ca0eea0c..2efa66d2a 100644
--- a/projects/yarn/src/types/helpers/identifiable_and_qualified_builder.cpp
+++ b/projects/yarn/src/types/helpers/identifiable_and_qualified_builder.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/helpers/building_error.hpp"
 #include "dogen/yarn/types/helpers/string_processor.hpp"
 #include "dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp"
@@ -42,8 +42,9 @@ identifiable_and_qualified_builder::
 identifiable_and_qualified_builder() : csharp_pp_(separators::dots),
                                        cpp_pp_(separators::double_colons) {}
 
-std::string identifiable_and_qualified_builder::obtain_qualified(
-    const std::map<languages, std::string>& map, const languages& l) const {
+std::string identifiable_and_qualified_builder::
+obtain_qualified(const std::map<meta_model::languages, std::string>& map,
+    const meta_model::languages& l) const {
     const auto i(map.find(l));
     if (i == map.end()) {
         BOOST_LOG_SEV(lg, error) << qn_missing << l;
@@ -52,20 +53,23 @@ std::string identifiable_and_qualified_builder::obtain_qualified(
     return i->second;
 }
 
-void identifiable_and_qualified_builder::add(const name& n) {
+void identifiable_and_qualified_builder::add(const meta_model::name& n) {
+    using meta_model::languages;
     csharp_pp_.add(obtain_qualified(n.qualified(), languages::csharp));
     cpp_pp_.add(obtain_qualified(n.qualified(), languages::cpp));
 }
 
-void identifiable_and_qualified_builder::add(const name_tree& nt) {
+void identifiable_and_qualified_builder::add(const meta_model::name_tree& nt) {
+    using meta_model::languages;
     csharp_pp_.add_child(obtain_qualified(nt.qualified(), languages::csharp));
     cpp_pp_.add_child(obtain_qualified(nt.qualified(), languages::cpp));
 }
 
-std::pair<std::string, std::map<languages, std::string> >
+std::pair<std::string, std::map<meta_model::languages, std::string>>
 identifiable_and_qualified_builder::build() {
+    using meta_model::languages;
     const auto cpp_qn(cpp_pp_.print());
-    const auto qualified(std::map<languages, std::string> {
+    const auto qualified(std::map<meta_model::languages, std::string> {
             { languages::csharp, csharp_pp_.print() },
             { languages::cpp, cpp_qn }
         });
@@ -80,9 +84,9 @@ identifiable_and_qualified_builder::build() {
     return r;
 }
 
-std::pair<std::string, std::map<languages, std::string> >
+std::pair<std::string, std::map<meta_model::languages, std::string>>
 identifiable_and_qualified_builder::
-build(const name& n, const bool model_name_mode) {
+build(const meta_model::name& n, const bool model_name_mode) {
     csharp_pp_.add(n, model_name_mode);
     cpp_pp_.add(n, model_name_mode);
     return build();
diff --git a/projects/yarn/src/types/helpers/indexer.cpp b/projects/yarn/src/types/helpers/indexer.cpp
index bdfa38fb2..01d51ae83 100644
--- a/projects/yarn/src/types/helpers/indexer.cpp
+++ b/projects/yarn/src/types/helpers/indexer.cpp
@@ -34,7 +34,7 @@ namespace dogen {
 namespace yarn {
 namespace helpers {
 
-indices indexer::index(intermediate_model& m) {
+indices indexer::index(meta_model::intermediate_model& m) {
     indices r;
 
     for (const auto& pair : m.builtins()) {
diff --git a/projects/yarn/src/types/helpers/legacy_name_tree_parser.cpp b/projects/yarn/src/types/helpers/legacy_name_tree_parser.cpp
index 57e7bc230..fa69cc1ee 100644
--- a/projects/yarn/src/types/helpers/legacy_name_tree_parser.cpp
+++ b/projects/yarn/src/types/helpers/legacy_name_tree_parser.cpp
@@ -32,8 +32,8 @@
 #include <boost/spirit/include/phoenix_object.hpp>
 #include <boost/spirit/repository/include/qi_distinct.hpp>
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
 #include "dogen/yarn/types/helpers/parsing_error.hpp"
 #include "dogen/yarn/types/helpers/name_tree_builder.hpp"
 #include "dogen/yarn/types/helpers/legacy_name_tree_parser.hpp"
@@ -111,12 +111,13 @@ struct grammar : qi::grammar<Iterator> {
         end_template_ = std::bind(&grammar::end_template, this);
     }
 
-    std::string scope_operator_for_language(const dogen::yarn::languages l) {
+    std::string scope_operator_for_language(
+        const dogen::yarn::meta_model::languages l) {
         switch (l) {
-        case dogen::yarn::languages::csharp: return ".";
-        case dogen::yarn::languages::cpp:
-        case dogen::yarn::languages::upsilon:
-        case dogen::yarn::languages::language_agnostic: return "::";
+        case dogen::yarn::meta_model::languages::csharp: return ".";
+        case dogen::yarn::meta_model::languages::cpp:
+        case dogen::yarn::meta_model::languages::upsilon:
+        case dogen::yarn::meta_model::languages::language_agnostic: return "::";
         default: {
             const auto s(boost::lexical_cast<std::string>(l));
             BOOST_LOG_SEV(lg, error) << unsupported_language << s;
@@ -126,7 +127,7 @@ struct grammar : qi::grammar<Iterator> {
     }
 
     grammar(std::shared_ptr<name_tree_builder> b,
-        const dogen::yarn::languages language)
+        const dogen::yarn::meta_model::languages language)
         : grammar::base_type(type_name), builder(b) {
         setup_functors();
         using qi::on_error;
@@ -205,10 +206,11 @@ namespace dogen {
 namespace yarn {
 namespace helpers {
 
-legacy_name_tree_parser::legacy_name_tree_parser(const languages language)
+legacy_name_tree_parser::
+legacy_name_tree_parser(const meta_model::languages language)
     : language_(language) {}
 
-name_tree legacy_name_tree_parser::parse(const std::string& s) const {
+meta_model::name_tree legacy_name_tree_parser::parse(const std::string& s) const {
     BOOST_LOG_SEV(lg, debug) << "parsing name: " << s;
 
     auto builder(std::make_shared<name_tree_builder>());
diff --git a/projects/yarn/src/types/helpers/mapper.cpp b/projects/yarn/src/types/helpers/mapper.cpp
index 59882c575..ed3cb04ca 100644
--- a/projects/yarn/src/types/helpers/mapper.cpp
+++ b/projects/yarn/src/types/helpers/mapper.cpp
@@ -21,8 +21,8 @@
 #include <boost/lexical_cast.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/list_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 #include "dogen/yarn/types/helpers/mapping_error.hpp"
 #include "dogen/yarn/io/helpers/mapping_context_io.hpp"
 #include "dogen/yarn/types/helpers/mapper.hpp"
@@ -47,9 +47,10 @@ namespace helpers {
 mapper::mapper(const mapping_set_repository& msrp)
     : mapping_set_repository_(msrp) { }
 
-const std::unordered_map<std::string, name>& mapper::translations_for_language(
-    const mapping_set& ms, const languages from, const languages to) const {
-    if (from == languages::upsilon) {
+const std::unordered_map<std::string, meta_model::name>&
+mapper::translations_for_language(const mapping_set& ms,
+    const meta_model::languages from, const meta_model::languages to) const {
+    if (from == meta_model::languages::upsilon) {
         const auto i(ms.by_upsilon_id().find(to));
         if (i != ms.by_upsilon_id().end())
             return i->second;
@@ -57,7 +58,7 @@ const std::unordered_map<std::string, name>& mapper::translations_for_language(
         const auto s(boost::lexical_cast<std::string>(to));
         BOOST_LOG_SEV(lg, error) << unsupported_lanugage << s;
         BOOST_THROW_EXCEPTION(mapping_error(unsupported_lanugage + s));
-    } else if (from == languages::language_agnostic) {
+    } else if (from == meta_model::languages::language_agnostic) {
         const auto i(ms.by_language_agnostic_id().find(to));
         if (i != ms.by_upsilon_id().end())
             return i->second;
@@ -72,12 +73,13 @@ const std::unordered_map<std::string, name>& mapper::translations_for_language(
     BOOST_THROW_EXCEPTION(mapping_error(unsupported_lanugage + s));
 }
 
-std::unordered_map<std::string, name>
-mapper::injections_for_language(const mapping_set& ms, const languages l,
-    const intermediate_model& im) const {
+std::unordered_map<std::string, meta_model::name>
+mapper::injections_for_language(const mapping_set& ms,
+    const meta_model::languages l,
+    const meta_model::intermediate_model& im) const {
 
-    std::unordered_map<std::string, name> r;
-    const auto cpp(languages::cpp);
+    std::unordered_map<std::string, meta_model::name> r;
+    const auto cpp(meta_model::languages::cpp);
     if (l != cpp)
         return r;
 
@@ -106,9 +108,9 @@ mapper::injections_for_language(const mapping_set& ms, const languages l,
     return r;
 }
 
-mapping_context mapper::create_mapping_context(
-    const mapping_set& ms, const languages from, const languages to,
-    const intermediate_model& im) const {
+mapping_context mapper::create_mapping_context(const mapping_set& ms,
+    const meta_model::languages from, const meta_model::languages to,
+    const meta_model::intermediate_model& im) const {
     mapping_context r;
     r.translations(translations_for_language(ms, from, to));
     r.injections(injections_for_language(ms, to, im));
@@ -120,8 +122,8 @@ mapping_context mapper::create_mapping_context(
     return r;
 }
 
-name_tree mapper::walk_name_tree(const mapping_context& mc, const name_tree& nt,
-    const bool skip_injection) const {
+meta_model::name_tree mapper::walk_name_tree(const mapping_context& mc,
+    const meta_model::name_tree& nt, const bool skip_injection) const {
     const auto id(nt.current().id());
     if (mc.erasures().find(id) != mc.erasures().end()) {
         /*
@@ -149,7 +151,7 @@ name_tree mapper::walk_name_tree(const mapping_context& mc, const name_tree& nt,
      * parameter. We do not attempt injections if we are already under
      * an injection or else we would create an infinite loop.
      */
-    name_tree r;
+    meta_model::name_tree r;
     if (!skip_injection) {
         const auto i(mc.injections().find(id));
         if (i != mc.injections().end()) {
@@ -184,20 +186,22 @@ name_tree mapper::walk_name_tree(const mapping_context& mc, const name_tree& nt,
     return r;
 }
 
-void mapper::
-map_attributes(const mapping_context& mc, std::list<attribute>& attrs) const {
+void mapper::map_attributes(const mapping_context& mc,
+    std::list<meta_model::attribute>& attrs) const {
     for (auto& attr : attrs)
         attr.parsed_type(walk_name_tree(mc, attr.parsed_type()));
 }
 
-bool mapper::is_mappable(const languages from, const languages to) {
+bool mapper::
+is_mappable(const meta_model::languages from, const meta_model::languages to) {
     return from == to ||
-        from == languages::upsilon ||
-        from == languages::language_agnostic;
+        from == meta_model::languages::upsilon ||
+        from == meta_model::languages::language_agnostic;
 }
 
-intermediate_model mapper::map(const languages from, const languages to,
-    const intermediate_model& im) const {
+meta_model::intermediate_model
+mapper::map(const meta_model::languages from, const meta_model::languages to,
+    const meta_model::intermediate_model& im) const {
     BOOST_LOG_SEV(lg, debug) << "Started mapping. Model: " << im.name().id();
     BOOST_LOG_SEV(lg, debug) << "Mapping from: " << from << " to: " << to;
     if (from == to) {
diff --git a/projects/yarn/src/types/helpers/mapping.cpp b/projects/yarn/src/types/helpers/mapping.cpp
index 68133b155..4d60e00f5 100644
--- a/projects/yarn/src/types/helpers/mapping.cpp
+++ b/projects/yarn/src/types/helpers/mapping.cpp
@@ -26,7 +26,7 @@ namespace helpers {
 
 mapping::mapping(
     const std::string& lam_id,
-    const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& by_language)
+    const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& by_language)
     : lam_id_(lam_id),
       by_language_(by_language) { }
 
@@ -63,19 +63,19 @@ void mapping::lam_id(const std::string&& v) {
     lam_id_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& mapping::by_language() const {
+const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& mapping::by_language() const {
     return by_language_;
 }
 
-std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& mapping::by_language() {
+std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& mapping::by_language() {
     return by_language_;
 }
 
-void mapping::by_language(const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>& v) {
+void mapping::by_language(const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>& v) {
     by_language_ = v;
 }
 
-void mapping::by_language(const std::unordered_map<dogen::yarn::languages, dogen::yarn::helpers::mapping_value>&& v) {
+void mapping::by_language(const std::unordered_map<dogen::yarn::meta_model::languages, dogen::yarn::helpers::mapping_value>&& v) {
     by_language_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/mapping_context.cpp b/projects/yarn/src/types/helpers/mapping_context.cpp
index 59501a8e4..19efaed27 100644
--- a/projects/yarn/src/types/helpers/mapping_context.cpp
+++ b/projects/yarn/src/types/helpers/mapping_context.cpp
@@ -25,9 +25,9 @@ namespace yarn {
 namespace helpers {
 
 mapping_context::mapping_context(
-    const std::unordered_map<std::string, dogen::yarn::name>& translations,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::name>& translations,
     const std::unordered_set<std::string>& erasures,
-    const std::unordered_map<std::string, dogen::yarn::name>& injections)
+    const std::unordered_map<std::string, dogen::yarn::meta_model::name>& injections)
     : translations_(translations),
       erasures_(erasures),
       injections_(injections) { }
@@ -51,19 +51,19 @@ mapping_context& mapping_context::operator=(mapping_context other) {
     return *this;
 }
 
-const std::unordered_map<std::string, dogen::yarn::name>& mapping_context::translations() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::name>& mapping_context::translations() const {
     return translations_;
 }
 
-std::unordered_map<std::string, dogen::yarn::name>& mapping_context::translations() {
+std::unordered_map<std::string, dogen::yarn::meta_model::name>& mapping_context::translations() {
     return translations_;
 }
 
-void mapping_context::translations(const std::unordered_map<std::string, dogen::yarn::name>& v) {
+void mapping_context::translations(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     translations_ = v;
 }
 
-void mapping_context::translations(const std::unordered_map<std::string, dogen::yarn::name>&& v) {
+void mapping_context::translations(const std::unordered_map<std::string, dogen::yarn::meta_model::name>&& v) {
     translations_ = std::move(v);
 }
 
@@ -83,19 +83,19 @@ void mapping_context::erasures(const std::unordered_set<std::string>&& v) {
     erasures_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::name>& mapping_context::injections() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::name>& mapping_context::injections() const {
     return injections_;
 }
 
-std::unordered_map<std::string, dogen::yarn::name>& mapping_context::injections() {
+std::unordered_map<std::string, dogen::yarn::meta_model::name>& mapping_context::injections() {
     return injections_;
 }
 
-void mapping_context::injections(const std::unordered_map<std::string, dogen::yarn::name>& v) {
+void mapping_context::injections(const std::unordered_map<std::string, dogen::yarn::meta_model::name>& v) {
     injections_ = v;
 }
 
-void mapping_context::injections(const std::unordered_map<std::string, dogen::yarn::name>&& v) {
+void mapping_context::injections(const std::unordered_map<std::string, dogen::yarn::meta_model::name>&& v) {
     injections_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/mapping_set.cpp b/projects/yarn/src/types/helpers/mapping_set.cpp
index f1007939b..cc75b6bae 100644
--- a/projects/yarn/src/types/helpers/mapping_set.cpp
+++ b/projects/yarn/src/types/helpers/mapping_set.cpp
@@ -26,10 +26,10 @@ namespace helpers {
 
 mapping_set::mapping_set(
     const std::string& name,
-    const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_language_agnostic_id,
-    const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& by_upsilon_id,
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_language_agnostic_id,
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& by_upsilon_id,
     const std::unordered_map<std::string, std::string>& upsilon_id_to_lam_id,
-    const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& erasures_by_language)
+    const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& erasures_by_language)
     : name_(name),
       by_language_agnostic_id_(by_language_agnostic_id),
       by_upsilon_id_(by_upsilon_id),
@@ -75,35 +75,35 @@ void mapping_set::name(const std::string&& v) {
     name_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& mapping_set::by_language_agnostic_id() const {
+const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& mapping_set::by_language_agnostic_id() const {
     return by_language_agnostic_id_;
 }
 
-std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& mapping_set::by_language_agnostic_id() {
+std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& mapping_set::by_language_agnostic_id() {
     return by_language_agnostic_id_;
 }
 
-void mapping_set::by_language_agnostic_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v) {
+void mapping_set::by_language_agnostic_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v) {
     by_language_agnostic_id_ = v;
 }
 
-void mapping_set::by_language_agnostic_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >&& v) {
+void mapping_set::by_language_agnostic_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >&& v) {
     by_language_agnostic_id_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& mapping_set::by_upsilon_id() const {
+const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& mapping_set::by_upsilon_id() const {
     return by_upsilon_id_;
 }
 
-std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& mapping_set::by_upsilon_id() {
+std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& mapping_set::by_upsilon_id() {
     return by_upsilon_id_;
 }
 
-void mapping_set::by_upsilon_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >& v) {
+void mapping_set::by_upsilon_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >& v) {
     by_upsilon_id_ = v;
 }
 
-void mapping_set::by_upsilon_id(const std::unordered_map<dogen::yarn::languages, std::unordered_map<std::string, dogen::yarn::name> >&& v) {
+void mapping_set::by_upsilon_id(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_map<std::string, dogen::yarn::meta_model::name> >&& v) {
     by_upsilon_id_ = std::move(v);
 }
 
@@ -123,19 +123,19 @@ void mapping_set::upsilon_id_to_lam_id(const std::unordered_map<std::string, std
     upsilon_id_to_lam_id_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& mapping_set::erasures_by_language() const {
+const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& mapping_set::erasures_by_language() const {
     return erasures_by_language_;
 }
 
-std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& mapping_set::erasures_by_language() {
+std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& mapping_set::erasures_by_language() {
     return erasures_by_language_;
 }
 
-void mapping_set::erasures_by_language(const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >& v) {
+void mapping_set::erasures_by_language(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >& v) {
     erasures_by_language_ = v;
 }
 
-void mapping_set::erasures_by_language(const std::unordered_map<dogen::yarn::languages, std::unordered_set<std::string> >&& v) {
+void mapping_set::erasures_by_language(const std::unordered_map<dogen::yarn::meta_model::languages, std::unordered_set<std::string> >&& v) {
     erasures_by_language_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/mapping_set_repository_factory.cpp b/projects/yarn/src/types/helpers/mapping_set_repository_factory.cpp
index 51a04cb8a..93f0cf387 100644
--- a/projects/yarn/src/types/helpers/mapping_set_repository_factory.cpp
+++ b/projects/yarn/src/types/helpers/mapping_set_repository_factory.cpp
@@ -23,7 +23,7 @@
 #include "dogen/utility/filesystem/file.hpp"
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/io/unordered_map_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_set_io.hpp"
 #include "dogen/yarn/io/helpers/mapping_set_repository_io.hpp"
@@ -113,9 +113,9 @@ insert(const std::string& upsilon_id, const std::string& lam_id,
 }
 
 void mapping_set_repository_factory::
-insert(const std::string& lam_id, const name& n, const languages l,
-    std::unordered_map<languages, std::unordered_map<std::string, name>>&
-    by_languages) const {
+insert(const std::string& lam_id, const meta_model::name& n,
+    const meta_model::languages l, std::unordered_map<meta_model::languages,
+    std::unordered_map<std::string, meta_model::name>>& by_languages) const {
 
     auto& by_id(by_languages[l]);
     const auto pair(std::make_pair(lam_id, n));
@@ -132,7 +132,6 @@ insert(const std::string& lam_id, const name& n, const languages l,
 void mapping_set_repository_factory::populate_upsilon_data(
     const std::string& lam_id, const mapping& mapping,
     const mapping_value& upsilon_mv, mapping_set& ms) const {
-
     /*
      * A given LAM ID may map to zero, one or many upsilon names. We
      * are only interested in creating a map between the upsilon ID
@@ -152,7 +151,7 @@ void mapping_set_repository_factory::populate_upsilon_data(
     const auto default_upsilon_id(upsilon_mv.default_name()->id());
     for (const auto& pair : mapping.by_language()) {
         const auto l(pair.first);
-        if (l == languages::upsilon)
+        if (l == meta_model::languages::upsilon)
             continue;
 
         const auto& n(*(pair.second.default_name()));
@@ -171,7 +170,7 @@ void mapping_set_repository_factory::populate_upsilon_data(
     for (const auto& un : upsilon_mv.aliases()) {
         for (const auto& pair : mapping.by_language()) {
             const auto l(pair.first);
-            if (l == languages::upsilon)
+            if (l == meta_model::languages::upsilon)
                 continue;
 
             const auto& n(*(pair.second.default_name()));
@@ -200,7 +199,7 @@ void mapping_set_repository_factory::populate_mapping_set(
                 continue;
             }
 
-            if (l == languages::upsilon) {
+            if (l == meta_model::languages::upsilon) {
                 /*
                  * For upsilon we need to perform additional (complex)
                  * processing.
diff --git a/projects/yarn/src/types/helpers/mapping_value.cpp b/projects/yarn/src/types/helpers/mapping_value.cpp
index a3db4d79a..36e0bc175 100644
--- a/projects/yarn/src/types/helpers/mapping_value.cpp
+++ b/projects/yarn/src/types/helpers/mapping_value.cpp
@@ -34,8 +34,8 @@ mapping_value::mapping_value(mapping_value&& rhs)
 
 mapping_value::mapping_value(
     const dogen::yarn::helpers::mapping_actions mapping_action,
-    const boost::optional<dogen::yarn::name>& default_name,
-    const std::list<dogen::yarn::name>& aliases)
+    const boost::optional<dogen::yarn::meta_model::name>& default_name,
+    const std::list<dogen::yarn::meta_model::name>& aliases)
     : mapping_action_(mapping_action),
       default_name_(default_name),
       aliases_(aliases) { }
@@ -67,35 +67,35 @@ void mapping_value::mapping_action(const dogen::yarn::helpers::mapping_actions v
     mapping_action_ = v;
 }
 
-const boost::optional<dogen::yarn::name>& mapping_value::default_name() const {
+const boost::optional<dogen::yarn::meta_model::name>& mapping_value::default_name() const {
     return default_name_;
 }
 
-boost::optional<dogen::yarn::name>& mapping_value::default_name() {
+boost::optional<dogen::yarn::meta_model::name>& mapping_value::default_name() {
     return default_name_;
 }
 
-void mapping_value::default_name(const boost::optional<dogen::yarn::name>& v) {
+void mapping_value::default_name(const boost::optional<dogen::yarn::meta_model::name>& v) {
     default_name_ = v;
 }
 
-void mapping_value::default_name(const boost::optional<dogen::yarn::name>&& v) {
+void mapping_value::default_name(const boost::optional<dogen::yarn::meta_model::name>&& v) {
     default_name_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& mapping_value::aliases() const {
+const std::list<dogen::yarn::meta_model::name>& mapping_value::aliases() const {
     return aliases_;
 }
 
-std::list<dogen::yarn::name>& mapping_value::aliases() {
+std::list<dogen::yarn::meta_model::name>& mapping_value::aliases() {
     return aliases_;
 }
 
-void mapping_value::aliases(const std::list<dogen::yarn::name>& v) {
+void mapping_value::aliases(const std::list<dogen::yarn::meta_model::name>& v) {
     aliases_ = v;
 }
 
-void mapping_value::aliases(const std::list<dogen::yarn::name>&& v) {
+void mapping_value::aliases(const std::list<dogen::yarn::meta_model::name>&& v) {
     aliases_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/mappings_hydrator.cpp b/projects/yarn/src/types/helpers/mappings_hydrator.cpp
index 5d05834aa..96c966ae3 100644
--- a/projects/yarn/src/types/helpers/mappings_hydrator.cpp
+++ b/projects/yarn/src/types/helpers/mappings_hydrator.cpp
@@ -83,22 +83,23 @@ mappings_hydrator::to_mapping_action(const std::string& s) const {
     BOOST_THROW_EXCEPTION(hydration_error(unsupported_mapping_action + s));
 }
 
-languages mappings_hydrator::to_language(const std::string& s) const {
+meta_model::languages mappings_hydrator::to_language(const std::string& s) const {
     if (s == cpp_language)
-        return languages::cpp;
+        return meta_model::languages::cpp;
     else if (s == csharp_language)
-        return languages::csharp;
+        return meta_model::languages::csharp;
     else if (s == la_language)
-        return languages::language_agnostic;
+        return meta_model::languages::language_agnostic;
     else if (s == upsilon_language)
-        return languages::upsilon;
+        return meta_model::languages::upsilon;
 
     BOOST_LOG_SEV(lg, error) << unsupported_lanugage << s;
     BOOST_THROW_EXCEPTION(hydration_error(unsupported_lanugage + s));
 }
 
-name mappings_hydrator::read_name(const boost::property_tree::ptree& pt) const {
-    helpers::name_builder b;
+meta_model::name
+mappings_hydrator::read_name(const boost::property_tree::ptree& pt) const {
+    name_builder b;
     const auto sn(pt.get<std::string>(simple_key));
     b.simple_name(sn);
 
@@ -114,9 +115,9 @@ name mappings_hydrator::read_name(const boost::property_tree::ptree& pt) const {
     return r;
 }
 
-std::unordered_map<languages, mapping_value> mappings_hydrator::
+std::unordered_map<meta_model::languages, mapping_value> mappings_hydrator::
 read_mapping_values(const boost::property_tree::ptree& pt) const {
-    std::unordered_map<languages, mapping_value> r;
+    std::unordered_map<meta_model::languages, mapping_value> r;
 
     for (auto i(pt.begin()); i != pt.end(); ++i) {
         const auto& apt(i->second);
diff --git a/projects/yarn/src/types/helpers/mappings_validator.cpp b/projects/yarn/src/types/helpers/mappings_validator.cpp
index e5111ab6b..6cf288bfa 100644
--- a/projects/yarn/src/types/helpers/mappings_validator.cpp
+++ b/projects/yarn/src/types/helpers/mappings_validator.cpp
@@ -51,11 +51,11 @@ namespace yarn {
 namespace helpers {
 
 void mappings_validator::
-validate(const languages l, const mapping_value& mv) const {
+validate(const meta_model::languages l, const mapping_value& mv) const {
     /*
      * Cannot map LAM to LAM.
      */
-    if (l == languages::language_agnostic) {
+    if (l == meta_model::languages::language_agnostic) {
         BOOST_LOG_SEV(lg, error) << invalid_language;
         BOOST_THROW_EXCEPTION(validation_error(invalid_lam_id));
     }
@@ -63,7 +63,7 @@ validate(const languages l, const mapping_value& mv) const {
     /*
      * Aliases can only be used for upsilon.
      */
-    if (l != languages::upsilon && !mv.aliases().empty()) {
+    if (l != meta_model::languages::upsilon && !mv.aliases().empty()) {
         BOOST_LOG_SEV(lg, error) << aliases_not_supported;
         BOOST_THROW_EXCEPTION(validation_error(aliases_not_supported));
     }
diff --git a/projects/yarn/src/types/helpers/name_builder.cpp b/projects/yarn/src/types/helpers/name_builder.cpp
index 6510cc941..0ab827eaa 100644
--- a/projects/yarn/src/types/helpers/name_builder.cpp
+++ b/projects/yarn/src/types/helpers/name_builder.cpp
@@ -23,8 +23,8 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/string/splitter.hpp"
-#include "dogen/yarn/io/location_io.hpp"
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/io/meta_model/location_io.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/separators.hpp"
 #include "dogen/yarn/types/helpers/building_error.hpp"
 #include "dogen/yarn/types/helpers/string_processor.hpp"
@@ -52,7 +52,8 @@ namespace helpers {
 name_builder::name_builder(const bool model_name_mode)
     : model_name_mode_(model_name_mode) { }
 
-name_builder::name_builder(const name& n, const bool model_name_mode)
+name_builder::
+name_builder(const meta_model::name& n, const bool model_name_mode)
     : model_name_mode_(model_name_mode), name_(n) { }
 
 std::string name_builder::compute_id() {
@@ -99,7 +100,7 @@ name_builder& name_builder::model_name(const std::string& mn) {
     return *this;
 }
 
-name_builder& name_builder::model_name(const yarn::location& l) {
+name_builder& name_builder::model_name(const meta_model::location& l) {
     name_.location().model_modules(l.model_modules());
 
     BOOST_LOG_SEV(lg, debug) << "Added model name from location: " << l;
@@ -160,20 +161,18 @@ name_builder& name_builder::external_modules(const std::list<std::string>& em) {
     return *this;
 }
 
-name_builder& name_builder::location(const yarn::location& l) {
+name_builder& name_builder::location(const meta_model::location& l) {
     BOOST_LOG_SEV(lg, debug) << "Added location: " << l;
     name_.location(l);
     return *this;
 }
 
-name name_builder::build() {
+meta_model::name name_builder::build() {
     setup_computed_properties();
     return name_;
 }
 
-name name_builder::build(std::list<std::string> names) {
-    name_builder b;
-
+meta_model::name name_builder::build(std::list<std::string> names) {
     /*
      * If we have a single name, we are either referencing a type
      * defined in the global namespace (possibly in a different
@@ -181,6 +180,7 @@ name name_builder::build(std::list<std::string> names) {
      * cannot tell the difference, we must fill in just the simple
      * name and let the resolver handle it properly later on.
      */
+    name_builder b;
     const auto front(names.front());
     if (names.size() == 1) {
         b.simple_name(front);
@@ -208,8 +208,7 @@ name name_builder::build(std::list<std::string> names) {
     return b.build();
 }
 
-name name_builder::build(const std::string& names) {
-
+meta_model::name name_builder::build(const std::string& names) {
     using utility::string::splitter;
     const auto names_as_list(splitter::split_scoped(names));
     return build(names_as_list);
diff --git a/projects/yarn/src/types/helpers/name_factory.cpp b/projects/yarn/src/types/helpers/name_factory.cpp
index fc87a7a09..5bf358805 100644
--- a/projects/yarn/src/types/helpers/name_factory.cpp
+++ b/projects/yarn/src/types/helpers/name_factory.cpp
@@ -39,7 +39,7 @@ namespace dogen {
 namespace yarn {
 namespace helpers {
 
-name name_factory::build_model_name(const std::string& model_name,
+meta_model::name name_factory::build_model_name(const std::string& model_name,
     const std::string& external_modules) const {
     name_builder b(true/*model_name_mode*/);
     b.model_name(model_name);
@@ -47,25 +47,26 @@ name name_factory::build_model_name(const std::string& model_name,
     return b.build();
 }
 
-name name_factory::build_element_name(const std::string& simple_name) const {
+meta_model::name name_factory::build_element_name(
+    const std::string& simple_name) const {
     name_builder b;
     b.simple_name(simple_name);
     return b.build();
 }
 
-name name_factory::build_element_name(const std::string& model_name,
+meta_model::name name_factory::build_element_name(const std::string& model_name,
     const std::string& simple_name) const {
-
     name_builder b;
     b.simple_name(simple_name);
     b.model_name(model_name);
     return b.build();
 }
 
-name name_factory::build_element_name(const std::string& simple_name,
+meta_model::name name_factory::build_element_name(
+    const std::string& simple_name,
     const std::list<std::string>& internal_modules) const {
 
-    yarn::name n;
+    meta_model::name n;
     n.simple(simple_name);
     n.location().internal_modules(internal_modules);
 
@@ -73,10 +74,11 @@ name name_factory::build_element_name(const std::string& simple_name,
     return b.build();
 }
 
-name name_factory::build_element_in_model(const name& model_name,
+meta_model::name name_factory::build_element_in_model(
+    const meta_model::name& model_name,
     const std::string& simple_name) const {
 
-    yarn::name n;
+    meta_model::name n;
     n.simple(simple_name);
 
     const auto& l(model_name.location());
@@ -87,11 +89,12 @@ name name_factory::build_element_in_model(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_element_in_model(const name& model_name,
+meta_model::name name_factory::build_element_in_model(
+    const meta_model::name& model_name,
     const std::string& simple_name,
     const std::list<std::string>& internal_modules) const {
 
-    yarn::name n;
+    meta_model::name n;
     n.simple(simple_name);
 
     const auto& l(model_name.location());
@@ -103,9 +106,10 @@ name name_factory::build_element_in_model(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_element_in_module(const name& module_name,
+meta_model::name name_factory::build_element_in_module(
+    const meta_model::name& module_name,
     const std::string& simple_name) const {
-    yarn::name n;
+    meta_model::name n;
     n.simple(simple_name);
 
     const auto& l(module_name.location());
@@ -120,7 +124,8 @@ name name_factory::build_element_in_module(const name& module_name,
     return b.build();
 }
 
-name name_factory::build_module_name(const name& model_name,
+meta_model::name name_factory::build_module_name(
+    const meta_model::name& model_name,
     const std::list<std::string>& internal_modules) const {
 
     if (internal_modules.empty()) {
@@ -128,7 +133,7 @@ name name_factory::build_module_name(const name& model_name,
         BOOST_THROW_EXCEPTION(building_error(empty_internal_modules));
     }
 
-    yarn::name n;
+    meta_model::name n;
     n.simple(internal_modules.back());
 
     const auto& l(model_name.location());
@@ -143,11 +148,12 @@ name name_factory::build_module_name(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_module_name(const name& model_name,
+meta_model::name name_factory::build_module_name(
+    const meta_model::name& model_name,
     const std::string& module_name,
     const std::list<std::string>& internal_modules) const {
 
-    yarn::name n;
+    meta_model::name n;
     n.simple(module_name);
 
     const auto& l(model_name.location());
@@ -159,11 +165,12 @@ name name_factory::build_module_name(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_combined_element_name(const name& model_name,
-    const name& partial_element_name,
+meta_model::name name_factory::build_combined_element_name(
+    const meta_model::name& model_name,
+    const meta_model::name& partial_element_name,
     const bool populate_model_modules_if_blank,
     const bool populate_internal_modules_if_blank) const {
-    name n(partial_element_name);
+    meta_model::name n(partial_element_name);
 
     const auto& l(model_name.location());
     if (populate_model_modules_if_blank &&
@@ -182,8 +189,9 @@ name name_factory::build_combined_element_name(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_promoted_module_name(const name& element_name) const {
-    name n;
+meta_model::name name_factory::
+build_promoted_module_name(const meta_model::name& element_name) const {
+    meta_model::name n;
     n.simple(element_name.simple());
 
     const auto& l(element_name.location());
@@ -203,9 +211,10 @@ name name_factory::build_promoted_module_name(const name& element_name) const {
     return b.build();
 }
 
-name name_factory::build_promoted_module_name(const name& model_name,
-    const name& element_name) const {
-    name n;
+meta_model::name name_factory::build_promoted_module_name(
+    const meta_model::name& model_name,
+    const meta_model::name& element_name) const {
+    meta_model::name n;
     n.simple(element_name.simple());
 
     const auto& l(element_name.location());
@@ -222,13 +231,14 @@ name name_factory::build_promoted_module_name(const name& model_name,
     return b.build();
 }
 
-name name_factory::build_attribute_name(const name& owner_name,
+meta_model::name name_factory::build_attribute_name(
+    const meta_model::name& owner_name,
     const std::string& simple_name) const {
 
-    location l(owner_name.location());
+    auto l(owner_name.location());
     l.element(owner_name.simple());
 
-    name n;
+    meta_model::name n;
     n.location(l);
     n.simple(simple_name);
     name_builder b(n);
diff --git a/projects/yarn/src/types/name_flattener.cpp b/projects/yarn/src/types/helpers/name_flattener.cpp
similarity index 91%
rename from projects/yarn/src/types/name_flattener.cpp
rename to projects/yarn/src/types/helpers/name_flattener.cpp
index a7dc4e070..02b893333 100644
--- a/projects/yarn/src/types/name_flattener.cpp
+++ b/projects/yarn/src/types/helpers/name_flattener.cpp
@@ -18,15 +18,17 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/name_flattener.hpp"
+#include "dogen/yarn/types/helpers/name_flattener.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace helpers {
 
 name_flattener::name_flattener(const bool detect_model_name)
     : detect_model_name_(detect_model_name) {}
 
-std::list<std::string> name_flattener::flatten(const name& n) const {
+std::list<std::string>
+name_flattener::flatten(const meta_model::name& n) const {
     const auto& l(n.location());
     std::list<std::string> r(l.external_modules());
 
@@ -55,4 +57,4 @@ std::list<std::string> name_flattener::flatten(const name& n) const {
     return r;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/helpers/name_tree_builder.cpp b/projects/yarn/src/types/helpers/name_tree_builder.cpp
index 322f12542..9bbd48396 100644
--- a/projects/yarn/src/types/helpers/name_tree_builder.cpp
+++ b/projects/yarn/src/types/helpers/name_tree_builder.cpp
@@ -27,10 +27,10 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/unordered_set_io.hpp"
 #include "dogen/utility/io/list_io.hpp"
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/location_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
-#include "dogen/yarn/types/languages.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/location_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
+#include "dogen/yarn/types/meta_model/languages.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/building_error.hpp"
 #include "dogen/yarn/types/helpers/name_tree_builder.hpp"
@@ -128,10 +128,10 @@ void name_tree_builder::end_children() {
     current_ = current_->parent();
 }
 
-name_tree name_tree_builder::make_name_tree(const node& n) {
+meta_model::name_tree name_tree_builder::make_name_tree(const node& n) {
     BOOST_LOG_SEV(lg, debug) << "Node: " << n.data();
 
-    name_tree r;
+    meta_model::name_tree r;
     r.current(n.data());
 
     for (const auto c : n.children()) {
@@ -142,7 +142,7 @@ name_tree name_tree_builder::make_name_tree(const node& n) {
     return r;
 }
 
-name_tree name_tree_builder::build() {
+meta_model::name_tree name_tree_builder::build() {
     BOOST_LOG_SEV(lg, debug) << "Started building.";
 
     /*
@@ -154,7 +154,7 @@ name_tree name_tree_builder::build() {
     /*
      * Convert the node representation into a tree representation.
      */
-    name_tree r(make_name_tree(*root_));
+    auto r(make_name_tree(*root_));
 
     BOOST_LOG_SEV(lg, debug) << "Finished building. Final name: " << r;
 
diff --git a/projects/yarn/src/types/helpers/node.cpp b/projects/yarn/src/types/helpers/node.cpp
index 768a02b60..0539e2481 100644
--- a/projects/yarn/src/types/helpers/node.cpp
+++ b/projects/yarn/src/types/helpers/node.cpp
@@ -35,7 +35,7 @@ namespace helpers {
 
 node::node(
     const boost::shared_ptr<dogen::yarn::helpers::node>& parent,
-    const dogen::yarn::name& data,
+    const dogen::yarn::meta_model::name& data,
     const std::list<boost::shared_ptr<dogen::yarn::helpers::node> >& children)
     : parent_(parent),
       data_(data),
@@ -76,19 +76,19 @@ void node::parent(const boost::shared_ptr<dogen::yarn::helpers::node>&& v) {
     parent_ = std::move(v);
 }
 
-const dogen::yarn::name& node::data() const {
+const dogen::yarn::meta_model::name& node::data() const {
     return data_;
 }
 
-dogen::yarn::name& node::data() {
+dogen::yarn::meta_model::name& node::data() {
     return data_;
 }
 
-void node::data(const dogen::yarn::name& v) {
+void node::data(const dogen::yarn::meta_model::name& v) {
     data_ = v;
 }
 
-void node::data(const dogen::yarn::name&& v) {
+void node::data(const dogen::yarn::meta_model::name&& v) {
     data_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/helpers/persister.cpp b/projects/yarn/src/types/helpers/persister.cpp
index 4812d8015..70d7a5fd7 100644
--- a/projects/yarn/src/types/helpers/persister.cpp
+++ b/projects/yarn/src/types/helpers/persister.cpp
@@ -21,7 +21,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/serialization/xml_helper.hpp"
-#include "dogen/yarn/serialization/intermediate_model_ser.hpp"
+#include "dogen/yarn/serialization/meta_model/intermediate_model_ser.hpp"
 #include "dogen/yarn/types/helpers/persister_error.hpp"
 #include "dogen/yarn/types/helpers/persister.hpp"
 
@@ -39,9 +39,9 @@ namespace dogen {
 namespace yarn {
 namespace helpers {
 
-void persister::
-persist(const intermediate_model& m, const boost::filesystem::path& p) {
-    const std::string extension(p.extension().string());
+void persister::persist(const meta_model::intermediate_model& m,
+    const boost::filesystem::path& p) {
+    const auto extension(p.extension().string());
     if (extension != xml_extension) {
         BOOST_LOG_SEV(lg, error) << unsupported_extension << extension;
         BOOST_THROW_EXCEPTION(
@@ -49,7 +49,7 @@ persist(const intermediate_model& m, const boost::filesystem::path& p) {
     }
 
     using dogen::utility::serialization::xml_serialize;
-    xml_serialize<intermediate_model>(p, m);
+    xml_serialize<meta_model::intermediate_model>(p, m);
 }
 
 } } }
diff --git a/projects/yarn/src/types/helpers/post_processing_validator.cpp b/projects/yarn/src/types/helpers/post_processing_validator.cpp
index 5a12257b4..e908b97dc 100644
--- a/projects/yarn/src/types/helpers/post_processing_validator.cpp
+++ b/projects/yarn/src/types/helpers/post_processing_validator.cpp
@@ -26,7 +26,7 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/string/splitter.hpp"
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/helpers/decomposer.hpp"
 #include "dogen/yarn/types/helpers/validation_error.hpp"
 #include "dogen/yarn/types/helpers/post_processing_validator.hpp"
@@ -116,12 +116,12 @@ namespace yarn {
 namespace helpers {
 
 bool post_processing_validator::
-allow_spaces_in_built_in_types(const languages l) {
-    return l == languages::cpp;
+allow_spaces_in_built_in_types(const meta_model::languages l) {
+    return l == meta_model::languages::cpp;
 }
 
 decomposition_result post_processing_validator::
-decompose_model(const intermediate_model& im) {
+decompose_model(const meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Decomposing model: " << im.name().id();
 
     /*
@@ -154,8 +154,9 @@ decompose_model(const intermediate_model& im) {
     return dc.result();
 }
 
-void post_processing_validator::validate_enumerations(const indices& idx,
-    const std::unordered_map<std::string, enumeration>& enumerations) {
+void post_processing_validator::
+validate_enumerations(const indices& idx, const std::unordered_map<std::string,
+    meta_model::enumeration>& enumerations) {
 
     for (const auto& pair : enumerations) {
         const auto& e(pair.second);
@@ -171,7 +172,7 @@ void post_processing_validator::validate_enumerations(const indices& idx,
 }
 
 void post_processing_validator::validate_primitives(const indices& idx,
-    const std::unordered_map<std::string, primitive>& primitivess) {
+    const std::unordered_map<std::string, meta_model::primitive>& primitivess) {
 
     for (const auto& pair : primitivess) {
         const auto& p(pair.second);
@@ -232,8 +233,8 @@ validate_strings(const std::list<std::string>& strings) {
         validate_string(s);
 }
 
-void post_processing_validator::
-validate_name(const name& n, const bool allow_spaces_in_built_in_types) {
+void post_processing_validator::validate_name(const meta_model::name& n,
+    const bool allow_spaces_in_built_in_types) {
     /*
      * Built-in types are defined at the global namespace level; if we
      * are at the global namespace level, then built-ins are valid
@@ -275,8 +276,8 @@ validate_name(const name& n, const bool allow_spaces_in_built_in_types) {
 }
 
 void post_processing_validator::
-validate_names(const std::list<std::pair<std::string, name>>& names,
-    const languages l) {
+validate_names(const std::list<std::pair<std::string, meta_model::name>>& names,
+    const meta_model::languages l) {
     BOOST_LOG_SEV(lg, debug) << "Sanity checking all names.";
     std::unordered_set<std::string> ids_done;
 
@@ -314,7 +315,7 @@ validate_names(const std::list<std::pair<std::string, name>>& names,
 
 void post_processing_validator::
 validate_name_tree(const std::unordered_set<std::string>& abstract_elements,
-    const languages l, const name_tree& nt,
+    const meta_model::languages l, const meta_model::name_tree& nt,
     const bool inherit_opaqueness_from_parent) {
 
     const auto& ae(abstract_elements);
@@ -330,14 +331,15 @@ validate_name_tree(const std::unordered_set<std::string>& abstract_elements,
 }
 
 void post_processing_validator::validate_name_trees(
-    const std::unordered_set<std::string>& abstract_elements, const languages l,
-    const std::list<std::pair<std::string, name_tree>>& nts) {
+    const std::unordered_set<std::string>& abstract_elements,
+    const meta_model::languages l,
+    const std::list<std::pair<std::string, meta_model::name_tree>>& nts) {
 
     /*
      * The only validation we perform on name trees at present is done
      * just for c++, so we can ignore all other languages.
      */
-    if (l != languages::cpp)
+    if (l != meta_model::languages::cpp)
         return;
 
     for (const auto& pair : nts) {
@@ -355,7 +357,7 @@ void post_processing_validator::validate_name_trees(
 }
 
 void post_processing_validator::
-validate(const indices& idx, const intermediate_model& im) {
+validate(const indices& idx, const meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started validation. Model: " << im.name().id();
 
     const auto l(im.input_language());
diff --git a/projects/yarn/src/types/helpers/pre_processing_validator.cpp b/projects/yarn/src/types/helpers/pre_processing_validator.cpp
index 2ef123409..77694d945 100644
--- a/projects/yarn/src/types/helpers/pre_processing_validator.cpp
+++ b/projects/yarn/src/types/helpers/pre_processing_validator.cpp
@@ -46,36 +46,37 @@ namespace helpers {
 
 class validator {
 public:
-    validator(const name& model_name, const bool check_names,
+    validator(const meta_model::name& model_name, const bool check_names,
         const bool is_proxy_reference);
 
 private:
     void validate_name(const std::string& id, const bool in_global_namespace,
-        const name& n) const;
+        const meta_model::name& n) const;
 
 public:
-    void validate(const std::string& id, const yarn::concept& c) const;
-    void validate(const std::string& id, const yarn::builtin& b) const;
-    void validate(const std::string& id, const dogen::yarn::visitor& v) const;
-    void validate(const std::string& id, const yarn::enumeration& e) const;
-    void validate(const std::string& id, const yarn::object& o) const;
-    void validate(const std::string& id, const yarn::exception& e) const;
-    void validate(const std::string& id, const yarn::module& m) const;
+    void validate(const std::string& id, const meta_model::concept& c) const;
+    void validate(const std::string& id, const meta_model::builtin& b) const;
+    void validate(const std::string& id, const meta_model::visitor& v) const;
+    void validate(const std::string& id,
+        const meta_model::enumeration& e) const;
+    void validate(const std::string& id, const meta_model::object& o) const;
+    void validate(const std::string& id, const meta_model::exception& e) const;
+    void validate(const std::string& id, const meta_model::module& m) const;
 
 private:
-    const name model_name_;
+    const meta_model::name model_name_;
     const bool check_names_;
     const bool is_proxy_reference_;
 };
 
-validator::validator(const name& model_name, const bool check_names,
+validator::validator(const meta_model::name& model_name, const bool check_names,
     const bool is_proxy_reference) : model_name_(model_name),
                                      check_names_(check_names),
                                      is_proxy_reference_(is_proxy_reference) {}
 
 void validator::
 validate_name(const std::string& id, const bool in_global_namespace,
-    const name& n) const {
+    const meta_model::name& n) const {
     /*
      * Types in global namespace are known to have a mismatch between
      * their name and model name, so we need to ignore those.
@@ -104,26 +105,28 @@ validate_name(const std::string& id, const bool in_global_namespace,
     }
 }
 
-void validator::validate(const std::string& id, const yarn::concept& c) const {
+void validator::
+validate(const std::string& id, const meta_model::concept& c) const {
     validate_name(id, c.in_global_module(), c.name());
 }
 
 void validator::
-validate(const std::string& id, const yarn::builtin& b) const {
+validate(const std::string& id, const meta_model::builtin& b) const {
     validate_name(id, b.in_global_module(), b.name());
 }
 
 void validator::
-validate(const std::string& id, const dogen::yarn::visitor& v) const {
+validate(const std::string& id, const meta_model::visitor& v) const {
     validate_name(id, v.in_global_module(), v.name());
 }
 
 void validator::
-validate(const std::string& id, const yarn::enumeration& e) const {
+validate(const std::string& id, const meta_model::enumeration& e) const {
     validate_name(id, e.in_global_module(), e.name());
 }
 
-void validator::validate(const std::string& id, const yarn::object& o) const {
+void validator::
+validate(const std::string& id, const meta_model::object& o) const {
     validate_name(id, o.in_global_module(), o.name());
 
     /*
@@ -179,18 +182,23 @@ void validator::validate(const std::string& id, const yarn::object& o) const {
 }
 
 void validator::
-validate(const std::string& id, const yarn::exception& e) const {
+validate(const std::string& id, const meta_model::exception& e) const {
     validate_name(id, e.in_global_module(), e.name());
 }
 
-void validator::validate(const std::string& id, const yarn::module& m) const {
+void validator::
+validate(const std::string& id, const meta_model::module& m) const {
     validate_name(id, m.in_global_module(), m.name());
 }
 
-void pre_processing_validator::validate(const intermediate_model& im) {
+void pre_processing_validator::
+validate(const meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started validation. Model: " << im.name().id();
 
+    using meta_model::origin_types;
     const bool ipr(im.origin_type() == origin_types::proxy_reference);
+
+    using meta_model::languages;
     const bool check_names(im.input_language() != languages::upsilon);
     validator v(im.name(), check_names, ipr/*is_proxy_reference*/);
 
diff --git a/projects/yarn/src/types/helpers/pretty_printer.cpp b/projects/yarn/src/types/helpers/pretty_printer.cpp
index 519800f00..da81cceda 100644
--- a/projects/yarn/src/types/helpers/pretty_printer.cpp
+++ b/projects/yarn/src/types/helpers/pretty_printer.cpp
@@ -52,7 +52,7 @@ pretty_printer::pretty_printer(const separators s)
       separator_(s) { }
 
 std::list<std::string> pretty_printer::
-to_list(const name& n, const bool model_name_mode) const {
+to_list(const meta_model::name& n, const bool model_name_mode) const {
     std::list<std::string> r;
     auto lambda([&](const std::string& s) {
             if (!s.empty())
@@ -99,7 +99,8 @@ print_scoped(const std::string& separator, const std::list<std::string>& l) {
     }
 }
 
-void pretty_printer::add(const name& n, const bool model_name_mode) {
+void pretty_printer::
+add(const meta_model::name& n, const bool model_name_mode) {
     const auto l(to_list(n, model_name_mode));
 
     switch (separator_) {
diff --git a/projects/yarn/src/types/helpers/reference_paths_extractor.cpp b/projects/yarn/src/types/helpers/reference_paths_extractor.cpp
index 4a02d18b6..c7f5f4125 100644
--- a/projects/yarn/src/types/helpers/reference_paths_extractor.cpp
+++ b/projects/yarn/src/types/helpers/reference_paths_extractor.cpp
@@ -26,7 +26,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/helpers/reference_paths_extractor.hpp"
 
@@ -127,8 +127,9 @@ obtain_paths_to_user_references(const transforms::context& ctx,
     return r;
 }
 
-std::list<boost::filesystem::path> reference_paths_extractor::
-extract(const transforms::context& ctx, const intermediate_model& target) {
+std::list<boost::filesystem::path>
+reference_paths_extractor::extract(const transforms::context& ctx,
+    const meta_model::intermediate_model& target) {
     /*
      * Obtain the root annotation and read the requested user
      * references from it.
diff --git a/projects/yarn/src/types/helpers/resolver.cpp b/projects/yarn/src/types/helpers/resolver.cpp
index 82e70d2e2..757e73668 100644
--- a/projects/yarn/src/types/helpers/resolver.cpp
+++ b/projects/yarn/src/types/helpers/resolver.cpp
@@ -26,12 +26,12 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/unordered_set_io.hpp"
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/io/name_tree_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/intermediate_model_io.hpp"
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/name_tree_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/intermediate_model_io.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/helpers/identifiable_and_qualified_builder.hpp"
 #include "dogen/yarn/types/helpers/resolution_error.hpp"
@@ -58,13 +58,15 @@ namespace yarn {
 namespace helpers {
 
 bool resolver::
-is_floating_point(const intermediate_model& im, const name& n) {
+is_floating_point(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
     auto i(im.builtins().find(n.id()));
     return i != im.builtins().end() && i->second.is_floating_point();
 }
 
-bool resolver::
-is_builtin(const intermediate_model& im, const name& n) {
+bool resolver::is_builtin(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
+
     auto i(im.builtins().find(n.id()));
     if (i != im.builtins().end()) {
         BOOST_LOG_SEV(lg, debug) << "Name belongs to a built-in in model.";
@@ -73,8 +75,9 @@ is_builtin(const intermediate_model& im, const name& n) {
     return false;
 }
 
-bool resolver::
-is_primitive(const intermediate_model& im, const name& n) {
+bool resolver::is_primitive(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
+
     auto i(im.primitives().find(n.id()));
     if (i != im.primitives().end()) {
         BOOST_LOG_SEV(lg, debug) << "Name belongs to a primitive in model.";
@@ -83,8 +86,9 @@ is_primitive(const intermediate_model& im, const name& n) {
     return false;
 }
 
-bool resolver::
-is_enumeration(const intermediate_model& im, const name& n) {
+bool resolver::is_enumeration(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
+
     auto i(im.enumerations().find(n.id()));
     if (i != im.enumerations().end()) {
         BOOST_LOG_SEV(lg, debug) << "Name belongs to an enumeration in model.";
@@ -93,8 +97,9 @@ is_enumeration(const intermediate_model& im, const name& n) {
     return false;
 }
 
-bool resolver::
-is_object(const intermediate_model& im, const name& n) {
+bool resolver::is_object(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
+
     auto i(im.objects().find(n.id()));
     if (i != im.objects().end()) {
         BOOST_LOG_SEV(lg, debug) << "Name belongs to an object in model.";
@@ -103,8 +108,9 @@ is_object(const intermediate_model& im, const name& n) {
     return false;
 }
 
-bool resolver::
-is_concept(const intermediate_model& im, const name& n) {
+bool resolver::is_concept(const meta_model::intermediate_model& im,
+    const meta_model::name& n) {
+
     auto i(im.concepts().find(n.id()));
     if (i != im.concepts().end()) {
         BOOST_LOG_SEV(lg, debug) << "Name belongs to a concept in model.";
@@ -113,7 +119,8 @@ is_concept(const intermediate_model& im, const name& n) {
     return false;
 }
 
-bool resolver::is_name_referable(const indices& idx, const name& n) {
+bool resolver::
+is_name_referable(const indices& idx, const meta_model::name& n) {
     BOOST_LOG_SEV(lg, debug) << "Checking to see if name is referable:" << n;
 
     const auto i(idx.elements_referable_by_attributes().find(n.id()));
@@ -124,9 +131,9 @@ bool resolver::is_name_referable(const indices& idx, const name& n) {
     return false;
 }
 
-name resolver::
-resolve_name_with_internal_modules(const intermediate_model& im,
-    const indices& idx, const name& ctx, const name& n) {
+meta_model::name resolver::resolve_name_with_internal_modules(
+    const meta_model::intermediate_model& im, const indices& idx,
+    const meta_model::name& ctx, const meta_model::name& n) {
 
     /*
      * Since the user has bothered to provide an internal module path,
@@ -226,9 +233,9 @@ resolve_name_with_internal_modules(const intermediate_model& im,
     BOOST_THROW_EXCEPTION(resolution_error(undefined_type + n.id()));
 }
 
-boost::optional<name> resolver::
+boost::optional<meta_model::name> resolver::
 try_resolve_name_with_context_internal_modules(const indices& idx,
-    name ctx, const name& n) {
+    meta_model::name ctx, const meta_model::name& n) {
 
     BOOST_LOG_SEV(lg, debug) << "Context has internal modules.";
 
@@ -273,12 +280,12 @@ try_resolve_name_with_context_internal_modules(const indices& idx,
      * If we didn't find anything, we should not throw as there still
      * are other possibilities left to try.
      */
-    return boost::optional<name>();
+    return boost::optional<meta_model::name>();
 }
 
-name resolver::
-resolve_name(const intermediate_model& im, const indices& idx,
-    const name& ctx, const name& n) {
+meta_model::name resolver::
+resolve_name(const meta_model::intermediate_model& im, const indices& idx,
+    const meta_model::name& ctx, const meta_model::name& n) {
 
     BOOST_LOG_SEV(lg, debug) << "Resolving name: " << n.id();
     BOOST_LOG_SEV(lg, debug) << "Initial state: " << n;
@@ -343,9 +350,11 @@ resolve_name(const intermediate_model& im, const indices& idx,
     BOOST_THROW_EXCEPTION(resolution_error(undefined_type + n.id()));
 }
 
-void resolver::resolve_name_tree(const intermediate_model& im,
-    const indices& idx, const name& owner, name_tree& nt) {
-    const name n(resolve_name(im, idx, owner, nt.current()));
+void resolver::resolve_name_tree(const meta_model::intermediate_model& im,
+    const indices& idx, const meta_model::name& owner,
+    meta_model::name_tree& nt) {
+
+    const meta_model::name n(resolve_name(im, idx, owner, nt.current()));
 
     BOOST_LOG_SEV(lg, debug) << "Resolved name: " << nt.current().id()
                              << " to: " << n.id();
@@ -384,8 +393,10 @@ void resolver::resolve_name_tree(const intermediate_model& im,
     nt.qualified(iq.second);
 }
 
-void resolver::resolve_attribute(const intermediate_model& im,
-    const indices& idx, const name& owner, attribute& attr) {
+void resolver::resolve_attribute(const meta_model::intermediate_model& im,
+    const indices& idx, const meta_model::name& owner,
+    meta_model::attribute& attr) {
+
     try {
         resolve_name_tree(im, idx, owner, attr.parsed_type());
 
@@ -405,15 +416,17 @@ void resolver::resolve_attribute(const intermediate_model& im,
     }
 }
 
-void resolver::resolve_attributes(const intermediate_model& im,
-    const indices& idx, const name& owner,
-    std::list<attribute>& attributes) {
+void resolver::resolve_attributes(const meta_model::intermediate_model& im,
+    const indices& idx, const meta_model::name& owner,
+    std::list<meta_model::attribute>& attributes) {
+
     for (auto& attr : attributes)
         resolve_attribute(im, idx, owner, attr);
 }
 
 void resolver::
-validate_inheritance_graph(const intermediate_model& im, const object& o) {
+validate_inheritance_graph(const meta_model::intermediate_model& im,
+    const meta_model::object& o) {
     /*
      * Ensure that all parents and original parents exist as objects.
      */
@@ -441,8 +454,8 @@ validate_inheritance_graph(const intermediate_model& im, const object& o) {
     }
 }
 
-void resolver::
-validate_refinements(const intermediate_model& im, const concept& c) {
+void resolver::validate_refinements(const meta_model::intermediate_model& im,
+    const meta_model::concept& c) {
     /*
      * Ensure that all refined concepts exist as concepts.
      */
@@ -461,12 +474,12 @@ validate_refinements(const intermediate_model& im, const concept& c) {
 }
 
 void resolver::
-resolve_concepts(const indices& idx, intermediate_model& im) {
+resolve_concepts(const indices& idx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolving concepts. Size: "
                              << im.concepts().size();
 
     for (auto& pair : im.concepts()) {
-        concept& c(pair.second);
+        auto& c(pair.second);
 
         BOOST_LOG_SEV(lg, debug) << "Resolving concept: " << c.name().id();
         resolve_attributes(im, idx, c.name(), c.local_attributes());
@@ -478,7 +491,7 @@ resolve_concepts(const indices& idx, intermediate_model& im) {
 }
 
 void resolver::
-resolve_objects(const indices& idx, intermediate_model& im) {
+resolve_objects(const indices& idx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolving objects. Size: "
                              << im.objects().size();
 
@@ -494,7 +507,7 @@ resolve_objects(const indices& idx, intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolved objects.";
 }
 
-void resolver::resolve_enumerations(intermediate_model& im) {
+void resolver::resolve_enumerations(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolving enumerations. Size: "
                              << im.enumerations().size();
 
@@ -526,7 +539,7 @@ void resolver::resolve_enumerations(intermediate_model& im) {
 }
 
 void resolver::
-resolve_primitives(const indices& idx, intermediate_model& im) {
+resolve_primitives(const indices& idx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolving primitives. Size: "
                              << im.primitives().size();
 
@@ -541,8 +554,9 @@ resolve_primitives(const indices& idx, intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolved primitives.";
 }
 
-name resolver::resolve(const intermediate_model& im,
-    const indices& idx, const name& ctx, const name& n) {
+meta_model::name resolver::
+resolve(const meta_model::intermediate_model& im, const indices& idx,
+    const meta_model::name& ctx, const meta_model::name& n) {
 
     const auto r(resolve_name(im, idx, ctx, n));
     BOOST_LOG_SEV(lg, debug) << "Resolved name: " << n.id()
@@ -550,8 +564,9 @@ name resolver::resolve(const intermediate_model& im,
     return r;
 }
 
-boost::optional<name> resolver::try_resolve_concept_name(name ctx,
-    const std::string& s, const intermediate_model& im) {
+boost::optional<meta_model::name>
+resolver::try_resolve_concept_name(meta_model::name ctx, const std::string& s,
+    const meta_model::intermediate_model& im) {
 
     BOOST_LOG_SEV(lg, debug) << "Resolving concept name: " << s;
 
@@ -559,7 +574,7 @@ boost::optional<name> resolver::try_resolve_concept_name(name ctx,
      * We first start at the same level as the context, including any
      * internal modules.
      */
-    name n;
+    meta_model::name n;
     n.simple(s);
 
     name_factory nf;
@@ -603,10 +618,10 @@ boost::optional<name> resolver::try_resolve_concept_name(name ctx,
      * There are no concepts in this model which match the stereotype name.
      */
     BOOST_LOG_SEV(lg, debug) << "Could not find a concept with tentative name.";
-    return boost::optional<name>();
+    return boost::optional<meta_model::name>();
 }
 
-void resolver::resolve(const indices& idx, intermediate_model& im) {
+void resolver::resolve(const indices& idx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Resolving model: " << im.name().id();
 
     resolve_concepts(idx, im);
diff --git a/projects/yarn/src/types/artefact_properties.cpp b/projects/yarn/src/types/meta_model/artefact_properties.cpp
similarity index 90%
rename from projects/yarn/src/types/artefact_properties.cpp
rename to projects/yarn/src/types/meta_model/artefact_properties.cpp
index 193ceba60..3c11a7cd1 100644
--- a/projects/yarn/src/types/artefact_properties.cpp
+++ b/projects/yarn/src/types/meta_model/artefact_properties.cpp
@@ -18,15 +18,16 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/artefact_properties.hpp"
+#include "dogen/yarn/types/meta_model/artefact_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 artefact_properties::artefact_properties()
     : enabled_(static_cast<bool>(0)),
       overwrite_(static_cast<bool>(0)),
-      formatting_style_(static_cast<dogen::yarn::formatting_styles>(0)) { }
+      formatting_style_(static_cast<dogen::yarn::meta_model::formatting_styles>(0)) { }
 
 artefact_properties::artefact_properties(artefact_properties&& rhs)
     : enabled_(std::move(rhs.enabled_)),
@@ -41,7 +42,7 @@ artefact_properties::artefact_properties(
     const bool overwrite,
     const boost::filesystem::path& file_path,
     const std::list<std::string>& dependencies,
-    const dogen::yarn::formatting_styles formatting_style,
+    const dogen::yarn::meta_model::formatting_styles formatting_style,
     const std::string& formatting_input)
     : enabled_(enabled),
       overwrite_(overwrite),
@@ -123,11 +124,11 @@ void artefact_properties::dependencies(const std::list<std::string>&& v) {
     dependencies_ = std::move(v);
 }
 
-dogen::yarn::formatting_styles artefact_properties::formatting_style() const {
+dogen::yarn::meta_model::formatting_styles artefact_properties::formatting_style() const {
     return formatting_style_;
 }
 
-void artefact_properties::formatting_style(const dogen::yarn::formatting_styles v) {
+void artefact_properties::formatting_style(const dogen::yarn::meta_model::formatting_styles v) {
     formatting_style_ = v;
 }
 
@@ -147,4 +148,4 @@ void artefact_properties::formatting_input(const std::string&& v) {
     formatting_input_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/attribute.cpp b/projects/yarn/src/types/meta_model/attribute.cpp
similarity index 80%
rename from projects/yarn/src/types/attribute.cpp
rename to projects/yarn/src/types/meta_model/attribute.cpp
index e0e19c052..f38ac1656 100644
--- a/projects/yarn/src/types/attribute.cpp
+++ b/projects/yarn/src/types/meta_model/attribute.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/attribute.hpp"
+#include "dogen/yarn/types/meta_model/attribute.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 attribute::attribute()
     : is_immutable_(static_cast<bool>(0)),
@@ -40,12 +41,12 @@ attribute::attribute(attribute&& rhs)
 attribute::attribute(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
+    const dogen::yarn::meta_model::name& name,
     const std::string& unparsed_type,
-    const dogen::yarn::name_tree& parsed_type,
+    const dogen::yarn::meta_model::name_tree& parsed_type,
     const bool is_immutable,
     const bool is_fluent,
-    const boost::optional<dogen::yarn::orm_attribute_properties>& orm_properties)
+    const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& orm_properties)
     : documentation_(documentation),
       annotation_(annotation),
       name_(name),
@@ -116,19 +117,19 @@ void attribute::annotation(const dogen::annotations::annotation&& v) {
     annotation_ = std::move(v);
 }
 
-const dogen::yarn::name& attribute::name() const {
+const dogen::yarn::meta_model::name& attribute::name() const {
     return name_;
 }
 
-dogen::yarn::name& attribute::name() {
+dogen::yarn::meta_model::name& attribute::name() {
     return name_;
 }
 
-void attribute::name(const dogen::yarn::name& v) {
+void attribute::name(const dogen::yarn::meta_model::name& v) {
     name_ = v;
 }
 
-void attribute::name(const dogen::yarn::name&& v) {
+void attribute::name(const dogen::yarn::meta_model::name&& v) {
     name_ = std::move(v);
 }
 
@@ -148,19 +149,19 @@ void attribute::unparsed_type(const std::string&& v) {
     unparsed_type_ = std::move(v);
 }
 
-const dogen::yarn::name_tree& attribute::parsed_type() const {
+const dogen::yarn::meta_model::name_tree& attribute::parsed_type() const {
     return parsed_type_;
 }
 
-dogen::yarn::name_tree& attribute::parsed_type() {
+dogen::yarn::meta_model::name_tree& attribute::parsed_type() {
     return parsed_type_;
 }
 
-void attribute::parsed_type(const dogen::yarn::name_tree& v) {
+void attribute::parsed_type(const dogen::yarn::meta_model::name_tree& v) {
     parsed_type_ = v;
 }
 
-void attribute::parsed_type(const dogen::yarn::name_tree&& v) {
+void attribute::parsed_type(const dogen::yarn::meta_model::name_tree&& v) {
     parsed_type_ = std::move(v);
 }
 
@@ -180,20 +181,20 @@ void attribute::is_fluent(const bool v) {
     is_fluent_ = v;
 }
 
-const boost::optional<dogen::yarn::orm_attribute_properties>& attribute::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& attribute::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_attribute_properties>& attribute::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& attribute::orm_properties() {
     return orm_properties_;
 }
 
-void attribute::orm_properties(const boost::optional<dogen::yarn::orm_attribute_properties>& v) {
+void attribute::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>& v) {
     orm_properties_ = v;
 }
 
-void attribute::orm_properties(const boost::optional<dogen::yarn::orm_attribute_properties>&& v) {
+void attribute::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_attribute_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/builtin.cpp b/projects/yarn/src/types/meta_model/builtin.cpp
similarity index 85%
rename from projects/yarn/src/types/builtin.cpp
rename to projects/yarn/src/types/meta_model/builtin.cpp
index cc5e2595c..458624c08 100644
--- a/projects/yarn/src/types/builtin.cpp
+++ b/projects/yarn/src/types/meta_model/builtin.cpp
@@ -20,12 +20,13 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/types/builtin.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 builtin::builtin()
     : is_default_enumeration_type_(static_cast<bool>(0)),
@@ -36,18 +37,18 @@ builtin::builtin()
 builtin::builtin(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
+    const dogen::yarn::meta_model::element_properties& element_properties,
     const bool is_default_enumeration_type,
     const bool is_floating_point,
     const bool can_be_enumeration_underlier,
     const bool can_be_primitive_underlier)
-    : dogen::yarn::element(
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -86,9 +87,9 @@ void builtin::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::builtin\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::builtin\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"is_default_enumeration_type\": " << is_default_enumeration_type_ << ", "
       << "\"is_floating_point\": " << is_floating_point_ << ", "
@@ -98,7 +99,7 @@ void builtin::to_stream(std::ostream& s) const {
 }
 
 void builtin::swap(builtin& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(is_default_enumeration_type_, other.is_default_enumeration_type_);
@@ -107,14 +108,14 @@ void builtin::swap(builtin& other) noexcept {
     swap(can_be_primitive_underlier_, other.can_be_primitive_underlier_);
 }
 
-bool builtin::equals(const dogen::yarn::element& other) const {
+bool builtin::equals(const dogen::yarn::meta_model::element& other) const {
     const builtin* const p(dynamic_cast<const builtin* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool builtin::operator==(const builtin& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         is_default_enumeration_type_ == rhs.is_default_enumeration_type_ &&
         is_floating_point_ == rhs.is_floating_point_ &&
         can_be_enumeration_underlier_ == rhs.can_be_enumeration_underlier_ &&
@@ -159,4 +160,4 @@ void builtin::can_be_primitive_underlier(const bool v) {
     can_be_primitive_underlier_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/concept.cpp b/projects/yarn/src/types/meta_model/concept.cpp
similarity index 67%
rename from projects/yarn/src/types/concept.cpp
rename to projects/yarn/src/types/meta_model/concept.cpp
index 5a60568c8..2afee7393 100644
--- a/projects/yarn/src/types/concept.cpp
+++ b/projects/yarn/src/types/meta_model/concept.cpp
@@ -20,15 +20,15 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/types/concept.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::attribute>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::attribute>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -42,7 +42,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::at
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -60,7 +60,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen:
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::name>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -74,6 +74,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::na
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 concept::concept()
     : is_immutable_(static_cast<bool>(0)),
@@ -83,21 +84,21 @@ concept::concept()
 concept::concept(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
-    const std::list<dogen::yarn::attribute>& all_attributes,
-    const std::list<dogen::yarn::attribute>& local_attributes,
-    const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes,
+    const dogen::yarn::meta_model::element_properties& element_properties,
+    const std::list<dogen::yarn::meta_model::attribute>& all_attributes,
+    const std::list<dogen::yarn::meta_model::attribute>& local_attributes,
+    const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes,
     const bool is_immutable,
     const bool is_fluent,
-    const std::list<dogen::yarn::name>& refines,
+    const std::list<dogen::yarn::meta_model::name>& refines,
     const bool is_child)
-    : dogen::yarn::element(
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -139,9 +140,9 @@ void concept::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::concept\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::concept\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"all_attributes\": " << all_attributes_ << ", "
       << "\"local_attributes\": " << local_attributes_ << ", "
@@ -154,7 +155,7 @@ void concept::to_stream(std::ostream& s) const {
 }
 
 void concept::swap(concept& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(all_attributes_, other.all_attributes_);
@@ -166,14 +167,14 @@ void concept::swap(concept& other) noexcept {
     swap(is_child_, other.is_child_);
 }
 
-bool concept::equals(const dogen::yarn::element& other) const {
+bool concept::equals(const dogen::yarn::meta_model::element& other) const {
     const concept* const p(dynamic_cast<const concept* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool concept::operator==(const concept& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         all_attributes_ == rhs.all_attributes_ &&
         local_attributes_ == rhs.local_attributes_ &&
         inherited_attributes_ == rhs.inherited_attributes_ &&
@@ -189,51 +190,51 @@ concept& concept::operator=(concept other) {
     return *this;
 }
 
-const std::list<dogen::yarn::attribute>& concept::all_attributes() const {
+const std::list<dogen::yarn::meta_model::attribute>& concept::all_attributes() const {
     return all_attributes_;
 }
 
-std::list<dogen::yarn::attribute>& concept::all_attributes() {
+std::list<dogen::yarn::meta_model::attribute>& concept::all_attributes() {
     return all_attributes_;
 }
 
-void concept::all_attributes(const std::list<dogen::yarn::attribute>& v) {
+void concept::all_attributes(const std::list<dogen::yarn::meta_model::attribute>& v) {
     all_attributes_ = v;
 }
 
-void concept::all_attributes(const std::list<dogen::yarn::attribute>&& v) {
+void concept::all_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v) {
     all_attributes_ = std::move(v);
 }
 
-const std::list<dogen::yarn::attribute>& concept::local_attributes() const {
+const std::list<dogen::yarn::meta_model::attribute>& concept::local_attributes() const {
     return local_attributes_;
 }
 
-std::list<dogen::yarn::attribute>& concept::local_attributes() {
+std::list<dogen::yarn::meta_model::attribute>& concept::local_attributes() {
     return local_attributes_;
 }
 
-void concept::local_attributes(const std::list<dogen::yarn::attribute>& v) {
+void concept::local_attributes(const std::list<dogen::yarn::meta_model::attribute>& v) {
     local_attributes_ = v;
 }
 
-void concept::local_attributes(const std::list<dogen::yarn::attribute>&& v) {
+void concept::local_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v) {
     local_attributes_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& concept::inherited_attributes() const {
+const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& concept::inherited_attributes() const {
     return inherited_attributes_;
 }
 
-std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& concept::inherited_attributes() {
+std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& concept::inherited_attributes() {
     return inherited_attributes_;
 }
 
-void concept::inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
+void concept::inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
     inherited_attributes_ = v;
 }
 
-void concept::inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >&& v) {
+void concept::inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >&& v) {
     inherited_attributes_ = std::move(v);
 }
 
@@ -253,19 +254,19 @@ void concept::is_fluent(const bool v) {
     is_fluent_ = v;
 }
 
-const std::list<dogen::yarn::name>& concept::refines() const {
+const std::list<dogen::yarn::meta_model::name>& concept::refines() const {
     return refines_;
 }
 
-std::list<dogen::yarn::name>& concept::refines() {
+std::list<dogen::yarn::meta_model::name>& concept::refines() {
     return refines_;
 }
 
-void concept::refines(const std::list<dogen::yarn::name>& v) {
+void concept::refines(const std::list<dogen::yarn::meta_model::name>& v) {
     refines_ = v;
 }
 
-void concept::refines(const std::list<dogen::yarn::name>&& v) {
+void concept::refines(const std::list<dogen::yarn::meta_model::name>&& v) {
     refines_ = std::move(v);
 }
 
@@ -277,4 +278,4 @@ void concept::is_child(const bool v) {
     is_child_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/element.cpp b/projects/yarn/src/types/meta_model/element.cpp
similarity index 79%
rename from projects/yarn/src/types/element.cpp
rename to projects/yarn/src/types/meta_model/element.cpp
index 267ca28b8..3eeb89bad 100644
--- a/projects/yarn/src/types/element.cpp
+++ b/projects/yarn/src/types/meta_model/element.cpp
@@ -21,11 +21,11 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/io/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/annotations/io/annotation_io.hpp"
-#include "dogen/yarn/io/element_properties_io.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/io/meta_model/origin_types_io.hpp"
+#include "dogen/yarn/io/meta_model/element_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -37,7 +37,7 @@ inline std::string tidy_up_string(std::string s) {
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::name>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -66,9 +66,10 @@ inline std::ostream& operator<<(std::ostream& s, const std::vector<std::string>&
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 element::element()
-    : origin_type_(static_cast<dogen::yarn::origin_types>(0)),
+    : origin_type_(static_cast<dogen::yarn::meta_model::origin_types>(0)),
       in_global_module_(static_cast<bool>(0)),
       is_element_extension_(static_cast<bool>(0)) { }
 
@@ -86,13 +87,13 @@ element::element(element&& rhs)
 element::element(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties)
+    const dogen::yarn::meta_model::element_properties& element_properties)
     : documentation_(documentation),
       annotation_(annotation),
       name_(name),
@@ -111,7 +112,7 @@ void element::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::element\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::element\"" << ", "
       << "\"documentation\": " << "\"" << tidy_up_string(documentation_) << "\"" << ", "
       << "\"annotation\": " << annotation_ << ", "
       << "\"name\": " << name_ << ", "
@@ -181,43 +182,43 @@ void element::annotation(const dogen::annotations::annotation&& v) {
     annotation_ = std::move(v);
 }
 
-const dogen::yarn::name& element::name() const {
+const dogen::yarn::meta_model::name& element::name() const {
     return name_;
 }
 
-dogen::yarn::name& element::name() {
+dogen::yarn::meta_model::name& element::name() {
     return name_;
 }
 
-void element::name(const dogen::yarn::name& v) {
+void element::name(const dogen::yarn::meta_model::name& v) {
     name_ = v;
 }
 
-void element::name(const dogen::yarn::name&& v) {
+void element::name(const dogen::yarn::meta_model::name&& v) {
     name_ = std::move(v);
 }
 
-dogen::yarn::origin_types element::origin_type() const {
+dogen::yarn::meta_model::origin_types element::origin_type() const {
     return origin_type_;
 }
 
-void element::origin_type(const dogen::yarn::origin_types v) {
+void element::origin_type(const dogen::yarn::meta_model::origin_types v) {
     origin_type_ = v;
 }
 
-const boost::optional<dogen::yarn::name>& element::contained_by() const {
+const boost::optional<dogen::yarn::meta_model::name>& element::contained_by() const {
     return contained_by_;
 }
 
-boost::optional<dogen::yarn::name>& element::contained_by() {
+boost::optional<dogen::yarn::meta_model::name>& element::contained_by() {
     return contained_by_;
 }
 
-void element::contained_by(const boost::optional<dogen::yarn::name>& v) {
+void element::contained_by(const boost::optional<dogen::yarn::meta_model::name>& v) {
     contained_by_ = v;
 }
 
-void element::contained_by(const boost::optional<dogen::yarn::name>&& v) {
+void element::contained_by(const boost::optional<dogen::yarn::meta_model::name>&& v) {
     contained_by_ = std::move(v);
 }
 
@@ -253,20 +254,20 @@ void element::is_element_extension(const bool v) {
     is_element_extension_ = v;
 }
 
-const dogen::yarn::element_properties& element::element_properties() const {
+const dogen::yarn::meta_model::element_properties& element::element_properties() const {
     return element_properties_;
 }
 
-dogen::yarn::element_properties& element::element_properties() {
+dogen::yarn::meta_model::element_properties& element::element_properties() {
     return element_properties_;
 }
 
-void element::element_properties(const dogen::yarn::element_properties& v) {
+void element::element_properties(const dogen::yarn::meta_model::element_properties& v) {
     element_properties_ = v;
 }
 
-void element::element_properties(const dogen::yarn::element_properties&& v) {
+void element::element_properties(const dogen::yarn::meta_model::element_properties&& v) {
     element_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/element_properties.cpp b/projects/yarn/src/types/meta_model/element_properties.cpp
similarity index 80%
rename from projects/yarn/src/types/element_properties.cpp
rename to projects/yarn/src/types/meta_model/element_properties.cpp
index 810f1cf5a..37cf34b00 100644
--- a/projects/yarn/src/types/element_properties.cpp
+++ b/projects/yarn/src/types/meta_model/element_properties.cpp
@@ -18,14 +18,15 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/element_properties.hpp"
+#include "dogen/yarn/types/meta_model/element_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 element_properties::element_properties(
     const dogen::formatters::decoration_properties& decoration_properties,
-    const std::unordered_map<std::string, dogen::yarn::artefact_properties>& artefact_properties)
+    const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& artefact_properties)
     : decoration_properties_(decoration_properties),
       artefact_properties_(artefact_properties) { }
 
@@ -62,20 +63,20 @@ void element_properties::decoration_properties(const dogen::formatters::decorati
     decoration_properties_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::artefact_properties>& element_properties::artefact_properties() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& element_properties::artefact_properties() const {
     return artefact_properties_;
 }
 
-std::unordered_map<std::string, dogen::yarn::artefact_properties>& element_properties::artefact_properties() {
+std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& element_properties::artefact_properties() {
     return artefact_properties_;
 }
 
-void element_properties::artefact_properties(const std::unordered_map<std::string, dogen::yarn::artefact_properties>& v) {
+void element_properties::artefact_properties(const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>& v) {
     artefact_properties_ = v;
 }
 
-void element_properties::artefact_properties(const std::unordered_map<std::string, dogen::yarn::artefact_properties>&& v) {
+void element_properties::artefact_properties(const std::unordered_map<std::string, dogen::yarn::meta_model::artefact_properties>&& v) {
     artefact_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/elements_traversal.cpp b/projects/yarn/src/types/meta_model/elements_traversal.cpp
similarity index 91%
rename from projects/yarn/src/types/elements_traversal.cpp
rename to projects/yarn/src/types/meta_model/elements_traversal.cpp
index 57faa421a..2c89f0dcd 100644
--- a/projects/yarn/src/types/elements_traversal.cpp
+++ b/projects/yarn/src/types/meta_model/elements_traversal.cpp
@@ -18,12 +18,13 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/elements_traversal.hpp"
-
-// dummy function to suppress ranlib warnings
-void elements_traversal() { }
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
+
+// dummy function to suppress ranlib warnings
+void elements_traversal() { }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/enumeration.cpp b/projects/yarn/src/types/meta_model/enumeration.cpp
similarity index 76%
rename from projects/yarn/src/types/enumeration.cpp
rename to projects/yarn/src/types/meta_model/enumeration.cpp
index 79bacbc4e..3f0df18e0 100644
--- a/projects/yarn/src/types/enumeration.cpp
+++ b/projects/yarn/src/types/meta_model/enumeration.cpp
@@ -20,15 +20,15 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/enumerator_io.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/enumerator_io.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::vector<dogen::yarn::enumerator>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::vector<dogen::yarn::meta_model::enumerator>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -42,6 +42,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::vector<dogen::yarn::
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enumeration::enumeration()
     : use_implementation_defined_underlying_element_(static_cast<bool>(0)),
@@ -51,19 +52,19 @@ enumeration::enumeration()
 enumeration::enumeration(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
-    const dogen::yarn::name& underlying_element,
-    const std::vector<dogen::yarn::enumerator>& enumerators,
+    const dogen::yarn::meta_model::element_properties& element_properties,
+    const dogen::yarn::meta_model::name& underlying_element,
+    const std::vector<dogen::yarn::meta_model::enumerator>& enumerators,
     const bool use_implementation_defined_underlying_element,
     const bool use_implementation_defined_enumerator_values,
     const bool add_invalid_enumerator)
-    : dogen::yarn::element(
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -103,9 +104,9 @@ void enumeration::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::enumeration\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::enumeration\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"underlying_element\": " << underlying_element_ << ", "
       << "\"enumerators\": " << enumerators_ << ", "
@@ -116,7 +117,7 @@ void enumeration::to_stream(std::ostream& s) const {
 }
 
 void enumeration::swap(enumeration& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(underlying_element_, other.underlying_element_);
@@ -126,14 +127,14 @@ void enumeration::swap(enumeration& other) noexcept {
     swap(add_invalid_enumerator_, other.add_invalid_enumerator_);
 }
 
-bool enumeration::equals(const dogen::yarn::element& other) const {
+bool enumeration::equals(const dogen::yarn::meta_model::element& other) const {
     const enumeration* const p(dynamic_cast<const enumeration* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool enumeration::operator==(const enumeration& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         underlying_element_ == rhs.underlying_element_ &&
         enumerators_ == rhs.enumerators_ &&
         use_implementation_defined_underlying_element_ == rhs.use_implementation_defined_underlying_element_ &&
@@ -147,35 +148,35 @@ enumeration& enumeration::operator=(enumeration other) {
     return *this;
 }
 
-const dogen::yarn::name& enumeration::underlying_element() const {
+const dogen::yarn::meta_model::name& enumeration::underlying_element() const {
     return underlying_element_;
 }
 
-dogen::yarn::name& enumeration::underlying_element() {
+dogen::yarn::meta_model::name& enumeration::underlying_element() {
     return underlying_element_;
 }
 
-void enumeration::underlying_element(const dogen::yarn::name& v) {
+void enumeration::underlying_element(const dogen::yarn::meta_model::name& v) {
     underlying_element_ = v;
 }
 
-void enumeration::underlying_element(const dogen::yarn::name&& v) {
+void enumeration::underlying_element(const dogen::yarn::meta_model::name&& v) {
     underlying_element_ = std::move(v);
 }
 
-const std::vector<dogen::yarn::enumerator>& enumeration::enumerators() const {
+const std::vector<dogen::yarn::meta_model::enumerator>& enumeration::enumerators() const {
     return enumerators_;
 }
 
-std::vector<dogen::yarn::enumerator>& enumeration::enumerators() {
+std::vector<dogen::yarn::meta_model::enumerator>& enumeration::enumerators() {
     return enumerators_;
 }
 
-void enumeration::enumerators(const std::vector<dogen::yarn::enumerator>& v) {
+void enumeration::enumerators(const std::vector<dogen::yarn::meta_model::enumerator>& v) {
     enumerators_ = v;
 }
 
-void enumeration::enumerators(const std::vector<dogen::yarn::enumerator>&& v) {
+void enumeration::enumerators(const std::vector<dogen::yarn::meta_model::enumerator>&& v) {
     enumerators_ = std::move(v);
 }
 
@@ -203,4 +204,4 @@ void enumeration::add_invalid_enumerator(const bool v) {
     add_invalid_enumerator_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/enumerator.cpp b/projects/yarn/src/types/meta_model/enumerator.cpp
similarity index 88%
rename from projects/yarn/src/types/enumerator.cpp
rename to projects/yarn/src/types/meta_model/enumerator.cpp
index 684610cc3..71afa9f00 100644
--- a/projects/yarn/src/types/enumerator.cpp
+++ b/projects/yarn/src/types/meta_model/enumerator.cpp
@@ -18,14 +18,15 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/enumerator.hpp"
+#include "dogen/yarn/types/meta_model/enumerator.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 enumerator::enumerator(
     const std::string& documentation,
-    const dogen::yarn::name& name,
+    const dogen::yarn::meta_model::name& name,
     const dogen::annotations::annotation& annotation,
     const std::string& value)
     : documentation_(documentation),
@@ -70,19 +71,19 @@ void enumerator::documentation(const std::string&& v) {
     documentation_ = std::move(v);
 }
 
-const dogen::yarn::name& enumerator::name() const {
+const dogen::yarn::meta_model::name& enumerator::name() const {
     return name_;
 }
 
-dogen::yarn::name& enumerator::name() {
+dogen::yarn::meta_model::name& enumerator::name() {
     return name_;
 }
 
-void enumerator::name(const dogen::yarn::name& v) {
+void enumerator::name(const dogen::yarn::meta_model::name& v) {
     name_ = v;
 }
 
-void enumerator::name(const dogen::yarn::name&& v) {
+void enumerator::name(const dogen::yarn::meta_model::name&& v) {
     name_ = std::move(v);
 }
 
@@ -118,4 +119,4 @@ void enumerator::value(const std::string&& v) {
     value_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/exception.cpp b/projects/yarn/src/types/meta_model/exception.cpp
similarity index 72%
rename from projects/yarn/src/types/exception.cpp
rename to projects/yarn/src/types/meta_model/exception.cpp
index 799211499..813856fcf 100644
--- a/projects/yarn/src/types/exception.cpp
+++ b/projects/yarn/src/types/meta_model/exception.cpp
@@ -19,24 +19,25 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/types/exception.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 exception::exception(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties)
-    : dogen::yarn::element(
+    const dogen::yarn::meta_model::element_properties& element_properties)
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -65,25 +66,25 @@ void exception::accept(element_visitor& v) {
 
 void exception::to_stream(std::ostream& s) const {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::exception\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::exception\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << " }";
 }
 
 void exception::swap(exception& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
 }
 
-bool exception::equals(const dogen::yarn::element& other) const {
+bool exception::equals(const dogen::yarn::meta_model::element& other) const {
     const exception* const p(dynamic_cast<const exception* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool exception::operator==(const exception& rhs) const {
-    return dogen::yarn::element::compare(rhs);
+    return dogen::yarn::meta_model::element::compare(rhs);
 }
 
 exception& exception::operator=(exception other) {
@@ -92,4 +93,4 @@ exception& exception::operator=(exception other) {
     return *this;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/intermediate_model.cpp b/projects/yarn/src/types/meta_model/intermediate_model.cpp
similarity index 57%
rename from projects/yarn/src/types/intermediate_model.cpp
rename to projects/yarn/src/types/meta_model/intermediate_model.cpp
index 59a79a9e1..3af5a38c8 100644
--- a/projects/yarn/src/types/intermediate_model.cpp
+++ b/projects/yarn/src/types/meta_model/intermediate_model.cpp
@@ -18,13 +18,13 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/element.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace boost {
 
-inline bool operator==(const boost::shared_ptr<dogen::yarn::element>& lhs,
-const boost::shared_ptr<dogen::yarn::element>& rhs) {
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::element>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::element>& rhs) {
     return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
 }
 
@@ -32,11 +32,12 @@ const boost::shared_ptr<dogen::yarn::element>& rhs) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 intermediate_model::intermediate_model()
-    : origin_type_(static_cast<dogen::yarn::origin_types>(0)),
+    : origin_type_(static_cast<dogen::yarn::meta_model::origin_types>(0)),
       has_generatable_types_(static_cast<bool>(0)),
-      input_language_(static_cast<dogen::yarn::languages>(0)) { }
+      input_language_(static_cast<dogen::yarn::meta_model::languages>(0)) { }
 
 intermediate_model::intermediate_model(intermediate_model&& rhs)
     : name_(std::move(rhs.name_)),
@@ -60,25 +61,25 @@ intermediate_model::intermediate_model(intermediate_model&& rhs)
       orm_properties_(std::move(rhs.orm_properties_)) { }
 
 intermediate_model::intermediate_model(
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& references,
-    const std::unordered_set<dogen::yarn::name>& leaves,
-    const std::unordered_map<std::string, dogen::yarn::module>& modules,
-    const std::unordered_map<std::string, dogen::yarn::concept>& concepts,
-    const std::unordered_map<std::string, dogen::yarn::builtin>& builtins,
-    const std::unordered_map<std::string, dogen::yarn::enumeration>& enumerations,
-    const std::unordered_map<std::string, dogen::yarn::primitive>& primitives,
-    const std::unordered_map<std::string, dogen::yarn::object>& objects,
-    const std::unordered_map<std::string, dogen::yarn::exception>& exceptions,
-    const std::unordered_map<std::string, dogen::yarn::visitor>& visitors,
-    const std::list<boost::shared_ptr<dogen::yarn::element> >& injected_elements,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references,
+    const std::unordered_set<dogen::yarn::meta_model::name>& leaves,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions,
+    const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors,
+    const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements,
     const bool has_generatable_types,
-    const dogen::yarn::module& root_module,
-    const dogen::yarn::languages input_language,
-    const std::list<dogen::yarn::languages>& output_languages,
+    const dogen::yarn::meta_model::module& root_module,
+    const dogen::yarn::meta_model::languages input_language,
+    const std::list<dogen::yarn::meta_model::languages>& output_languages,
     const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups,
-    const boost::optional<dogen::yarn::orm_model_properties>& orm_properties)
+    const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties)
     : name_(name),
       origin_type_(origin_type),
       references_(references),
@@ -150,203 +151,203 @@ intermediate_model& intermediate_model::operator=(intermediate_model other) {
     return *this;
 }
 
-const dogen::yarn::name& intermediate_model::name() const {
+const dogen::yarn::meta_model::name& intermediate_model::name() const {
     return name_;
 }
 
-dogen::yarn::name& intermediate_model::name() {
+dogen::yarn::meta_model::name& intermediate_model::name() {
     return name_;
 }
 
-void intermediate_model::name(const dogen::yarn::name& v) {
+void intermediate_model::name(const dogen::yarn::meta_model::name& v) {
     name_ = v;
 }
 
-void intermediate_model::name(const dogen::yarn::name&& v) {
+void intermediate_model::name(const dogen::yarn::meta_model::name&& v) {
     name_ = std::move(v);
 }
 
-dogen::yarn::origin_types intermediate_model::origin_type() const {
+dogen::yarn::meta_model::origin_types intermediate_model::origin_type() const {
     return origin_type_;
 }
 
-void intermediate_model::origin_type(const dogen::yarn::origin_types v) {
+void intermediate_model::origin_type(const dogen::yarn::meta_model::origin_types v) {
     origin_type_ = v;
 }
 
-const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& intermediate_model::references() const {
+const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& intermediate_model::references() const {
     return references_;
 }
 
-std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& intermediate_model::references() {
+std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& intermediate_model::references() {
     return references_;
 }
 
-void intermediate_model::references(const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>& v) {
+void intermediate_model::references(const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& v) {
     references_ = v;
 }
 
-void intermediate_model::references(const std::unordered_map<dogen::yarn::name, dogen::yarn::origin_types>&& v) {
+void intermediate_model::references(const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>&& v) {
     references_ = std::move(v);
 }
 
-const std::unordered_set<dogen::yarn::name>& intermediate_model::leaves() const {
+const std::unordered_set<dogen::yarn::meta_model::name>& intermediate_model::leaves() const {
     return leaves_;
 }
 
-std::unordered_set<dogen::yarn::name>& intermediate_model::leaves() {
+std::unordered_set<dogen::yarn::meta_model::name>& intermediate_model::leaves() {
     return leaves_;
 }
 
-void intermediate_model::leaves(const std::unordered_set<dogen::yarn::name>& v) {
+void intermediate_model::leaves(const std::unordered_set<dogen::yarn::meta_model::name>& v) {
     leaves_ = v;
 }
 
-void intermediate_model::leaves(const std::unordered_set<dogen::yarn::name>&& v) {
+void intermediate_model::leaves(const std::unordered_set<dogen::yarn::meta_model::name>&& v) {
     leaves_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::module>& intermediate_model::modules() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::module>& intermediate_model::modules() const {
     return modules_;
 }
 
-std::unordered_map<std::string, dogen::yarn::module>& intermediate_model::modules() {
+std::unordered_map<std::string, dogen::yarn::meta_model::module>& intermediate_model::modules() {
     return modules_;
 }
 
-void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::module>& v) {
+void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
     modules_ = v;
 }
 
-void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::module>&& v) {
+void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>&& v) {
     modules_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::concept>& intermediate_model::concepts() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& intermediate_model::concepts() const {
     return concepts_;
 }
 
-std::unordered_map<std::string, dogen::yarn::concept>& intermediate_model::concepts() {
+std::unordered_map<std::string, dogen::yarn::meta_model::concept>& intermediate_model::concepts() {
     return concepts_;
 }
 
-void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::concept>& v) {
+void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
     concepts_ = v;
 }
 
-void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::concept>&& v) {
+void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>&& v) {
     concepts_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::builtin>& intermediate_model::builtins() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& intermediate_model::builtins() const {
     return builtins_;
 }
 
-std::unordered_map<std::string, dogen::yarn::builtin>& intermediate_model::builtins() {
+std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& intermediate_model::builtins() {
     return builtins_;
 }
 
-void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::builtin>& v) {
+void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
     builtins_ = v;
 }
 
-void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::builtin>&& v) {
+void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>&& v) {
     builtins_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::enumeration>& intermediate_model::enumerations() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& intermediate_model::enumerations() const {
     return enumerations_;
 }
 
-std::unordered_map<std::string, dogen::yarn::enumeration>& intermediate_model::enumerations() {
+std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& intermediate_model::enumerations() {
     return enumerations_;
 }
 
-void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::enumeration>& v) {
+void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
     enumerations_ = v;
 }
 
-void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::enumeration>&& v) {
+void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>&& v) {
     enumerations_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::primitive>& intermediate_model::primitives() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& intermediate_model::primitives() const {
     return primitives_;
 }
 
-std::unordered_map<std::string, dogen::yarn::primitive>& intermediate_model::primitives() {
+std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& intermediate_model::primitives() {
     return primitives_;
 }
 
-void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::primitive>& v) {
+void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
     primitives_ = v;
 }
 
-void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::primitive>&& v) {
+void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>&& v) {
     primitives_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::object>& intermediate_model::objects() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::object>& intermediate_model::objects() const {
     return objects_;
 }
 
-std::unordered_map<std::string, dogen::yarn::object>& intermediate_model::objects() {
+std::unordered_map<std::string, dogen::yarn::meta_model::object>& intermediate_model::objects() {
     return objects_;
 }
 
-void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::object>& v) {
+void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
     objects_ = v;
 }
 
-void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::object>&& v) {
+void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>&& v) {
     objects_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::exception>& intermediate_model::exceptions() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& intermediate_model::exceptions() const {
     return exceptions_;
 }
 
-std::unordered_map<std::string, dogen::yarn::exception>& intermediate_model::exceptions() {
+std::unordered_map<std::string, dogen::yarn::meta_model::exception>& intermediate_model::exceptions() {
     return exceptions_;
 }
 
-void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::exception>& v) {
+void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
     exceptions_ = v;
 }
 
-void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::exception>&& v) {
+void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>&& v) {
     exceptions_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::visitor>& intermediate_model::visitors() const {
+const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& intermediate_model::visitors() const {
     return visitors_;
 }
 
-std::unordered_map<std::string, dogen::yarn::visitor>& intermediate_model::visitors() {
+std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& intermediate_model::visitors() {
     return visitors_;
 }
 
-void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::visitor>& v) {
+void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
     visitors_ = v;
 }
 
-void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::visitor>&& v) {
+void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>&& v) {
     visitors_ = std::move(v);
 }
 
-const std::list<boost::shared_ptr<dogen::yarn::element> >& intermediate_model::injected_elements() const {
+const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& intermediate_model::injected_elements() const {
     return injected_elements_;
 }
 
-std::list<boost::shared_ptr<dogen::yarn::element> >& intermediate_model::injected_elements() {
+std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& intermediate_model::injected_elements() {
     return injected_elements_;
 }
 
-void intermediate_model::injected_elements(const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
+void intermediate_model::injected_elements(const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     injected_elements_ = v;
 }
 
-void intermediate_model::injected_elements(const std::list<boost::shared_ptr<dogen::yarn::element> >&& v) {
+void intermediate_model::injected_elements(const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >&& v) {
     injected_elements_ = std::move(v);
 }
 
@@ -358,43 +359,43 @@ void intermediate_model::has_generatable_types(const bool v) {
     has_generatable_types_ = v;
 }
 
-const dogen::yarn::module& intermediate_model::root_module() const {
+const dogen::yarn::meta_model::module& intermediate_model::root_module() const {
     return root_module_;
 }
 
-dogen::yarn::module& intermediate_model::root_module() {
+dogen::yarn::meta_model::module& intermediate_model::root_module() {
     return root_module_;
 }
 
-void intermediate_model::root_module(const dogen::yarn::module& v) {
+void intermediate_model::root_module(const dogen::yarn::meta_model::module& v) {
     root_module_ = v;
 }
 
-void intermediate_model::root_module(const dogen::yarn::module&& v) {
+void intermediate_model::root_module(const dogen::yarn::meta_model::module&& v) {
     root_module_ = std::move(v);
 }
 
-dogen::yarn::languages intermediate_model::input_language() const {
+dogen::yarn::meta_model::languages intermediate_model::input_language() const {
     return input_language_;
 }
 
-void intermediate_model::input_language(const dogen::yarn::languages v) {
+void intermediate_model::input_language(const dogen::yarn::meta_model::languages v) {
     input_language_ = v;
 }
 
-const std::list<dogen::yarn::languages>& intermediate_model::output_languages() const {
+const std::list<dogen::yarn::meta_model::languages>& intermediate_model::output_languages() const {
     return output_languages_;
 }
 
-std::list<dogen::yarn::languages>& intermediate_model::output_languages() {
+std::list<dogen::yarn::meta_model::languages>& intermediate_model::output_languages() {
     return output_languages_;
 }
 
-void intermediate_model::output_languages(const std::list<dogen::yarn::languages>& v) {
+void intermediate_model::output_languages(const std::list<dogen::yarn::meta_model::languages>& v) {
     output_languages_ = v;
 }
 
-void intermediate_model::output_languages(const std::list<dogen::yarn::languages>&& v) {
+void intermediate_model::output_languages(const std::list<dogen::yarn::meta_model::languages>&& v) {
     output_languages_ = std::move(v);
 }
 
@@ -414,20 +415,20 @@ void intermediate_model::scribble_groups(const std::unordered_map<std::string, d
     scribble_groups_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::orm_model_properties>& intermediate_model::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_model_properties>& intermediate_model::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_model_properties>& intermediate_model::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_model_properties>& intermediate_model::orm_properties() {
     return orm_properties_;
 }
 
-void intermediate_model::orm_properties(const boost::optional<dogen::yarn::orm_model_properties>& v) {
+void intermediate_model::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     orm_properties_ = v;
 }
 
-void intermediate_model::orm_properties(const boost::optional<dogen::yarn::orm_model_properties>&& v) {
+void intermediate_model::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/location.cpp b/projects/yarn/src/types/meta_model/location.cpp
similarity index 97%
rename from projects/yarn/src/types/location.cpp
rename to projects/yarn/src/types/meta_model/location.cpp
index 5f0ee6335..50da0f7ca 100644
--- a/projects/yarn/src/types/location.cpp
+++ b/projects/yarn/src/types/meta_model/location.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/location.hpp"
+#include "dogen/yarn/types/meta_model/location.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 location::location(
     const std::list<std::string>& external_modules,
@@ -118,4 +119,4 @@ void location::element(const std::string&& v) {
     element_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/model.cpp b/projects/yarn/src/types/meta_model/model.cpp
similarity index 64%
rename from projects/yarn/src/types/model.cpp
rename to projects/yarn/src/types/meta_model/model.cpp
index 813cd9fe5..894765486 100644
--- a/projects/yarn/src/types/model.cpp
+++ b/projects/yarn/src/types/meta_model/model.cpp
@@ -18,13 +18,13 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/model.hpp"
-#include "dogen/yarn/types/element.hpp"
+#include "dogen/yarn/types/meta_model/model.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
 
 namespace boost {
 
-inline bool operator==(const boost::shared_ptr<dogen::yarn::element>& lhs,
-const boost::shared_ptr<dogen::yarn::element>& rhs) {
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::element>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::element>& rhs) {
     return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
 }
 
@@ -32,11 +32,12 @@ const boost::shared_ptr<dogen::yarn::element>& rhs) {
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 model::model()
     : has_generatable_types_(static_cast<bool>(0)),
-      input_language_(static_cast<dogen::yarn::languages>(0)),
-      output_language_(static_cast<dogen::yarn::languages>(0)) { }
+      input_language_(static_cast<dogen::yarn::meta_model::languages>(0)),
+      output_language_(static_cast<dogen::yarn::meta_model::languages>(0)) { }
 
 model::model(model&& rhs)
     : name_(std::move(rhs.name_)),
@@ -49,14 +50,14 @@ model::model(model&& rhs)
       orm_properties_(std::move(rhs.orm_properties_)) { }
 
 model::model(
-    const dogen::yarn::name& name,
-    const std::vector<boost::shared_ptr<dogen::yarn::element> >& elements,
-    const dogen::yarn::module& root_module,
+    const dogen::yarn::meta_model::name& name,
+    const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements,
+    const dogen::yarn::meta_model::module& root_module,
     const std::unordered_set<std::string>& module_ids,
     const bool has_generatable_types,
-    const dogen::yarn::languages input_language,
-    const dogen::yarn::languages output_language,
-    const boost::optional<dogen::yarn::orm_model_properties>& orm_properties)
+    const dogen::yarn::meta_model::languages input_language,
+    const dogen::yarn::meta_model::languages output_language,
+    const boost::optional<dogen::yarn::meta_model::orm_model_properties>& orm_properties)
     : name_(name),
       elements_(elements),
       root_module_(root_module),
@@ -95,51 +96,51 @@ model& model::operator=(model other) {
     return *this;
 }
 
-const dogen::yarn::name& model::name() const {
+const dogen::yarn::meta_model::name& model::name() const {
     return name_;
 }
 
-dogen::yarn::name& model::name() {
+dogen::yarn::meta_model::name& model::name() {
     return name_;
 }
 
-void model::name(const dogen::yarn::name& v) {
+void model::name(const dogen::yarn::meta_model::name& v) {
     name_ = v;
 }
 
-void model::name(const dogen::yarn::name&& v) {
+void model::name(const dogen::yarn::meta_model::name&& v) {
     name_ = std::move(v);
 }
 
-const std::vector<boost::shared_ptr<dogen::yarn::element> >& model::elements() const {
+const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& model::elements() const {
     return elements_;
 }
 
-std::vector<boost::shared_ptr<dogen::yarn::element> >& model::elements() {
+std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& model::elements() {
     return elements_;
 }
 
-void model::elements(const std::vector<boost::shared_ptr<dogen::yarn::element> >& v) {
+void model::elements(const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& v) {
     elements_ = v;
 }
 
-void model::elements(const std::vector<boost::shared_ptr<dogen::yarn::element> >&& v) {
+void model::elements(const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >&& v) {
     elements_ = std::move(v);
 }
 
-const dogen::yarn::module& model::root_module() const {
+const dogen::yarn::meta_model::module& model::root_module() const {
     return root_module_;
 }
 
-dogen::yarn::module& model::root_module() {
+dogen::yarn::meta_model::module& model::root_module() {
     return root_module_;
 }
 
-void model::root_module(const dogen::yarn::module& v) {
+void model::root_module(const dogen::yarn::meta_model::module& v) {
     root_module_ = v;
 }
 
-void model::root_module(const dogen::yarn::module&& v) {
+void model::root_module(const dogen::yarn::meta_model::module&& v) {
     root_module_ = std::move(v);
 }
 
@@ -167,36 +168,36 @@ void model::has_generatable_types(const bool v) {
     has_generatable_types_ = v;
 }
 
-dogen::yarn::languages model::input_language() const {
+dogen::yarn::meta_model::languages model::input_language() const {
     return input_language_;
 }
 
-void model::input_language(const dogen::yarn::languages v) {
+void model::input_language(const dogen::yarn::meta_model::languages v) {
     input_language_ = v;
 }
 
-dogen::yarn::languages model::output_language() const {
+dogen::yarn::meta_model::languages model::output_language() const {
     return output_language_;
 }
 
-void model::output_language(const dogen::yarn::languages v) {
+void model::output_language(const dogen::yarn::meta_model::languages v) {
     output_language_ = v;
 }
 
-const boost::optional<dogen::yarn::orm_model_properties>& model::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_model_properties>& model::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_model_properties>& model::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_model_properties>& model::orm_properties() {
     return orm_properties_;
 }
 
-void model::orm_properties(const boost::optional<dogen::yarn::orm_model_properties>& v) {
+void model::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>& v) {
     orm_properties_ = v;
 }
 
-void model::orm_properties(const boost::optional<dogen::yarn::orm_model_properties>&& v) {
+void model::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_model_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/module.cpp b/projects/yarn/src/types/meta_model/module.cpp
similarity index 76%
rename from projects/yarn/src/types/module.cpp
rename to projects/yarn/src/types/meta_model/module.cpp
index 23d90ca54..4b61663ae 100644
--- a/projects/yarn/src/types/module.cpp
+++ b/projects/yarn/src/types/meta_model/module.cpp
@@ -21,10 +21,10 @@
 #include <ostream>
 #include <boost/io/ios_state.hpp>
 #include <boost/algorithm/string.hpp>
-#include "dogen/yarn/types/module.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
-#include "dogen/yarn/io/orm_module_properties_io.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/orm_module_properties_io.hpp"
 
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
@@ -50,7 +50,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::string>& v
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_module_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_module_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -65,14 +65,15 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 module::module()
     : is_root_(static_cast<bool>(0)),
       is_global_module_(static_cast<bool>(0)) { }
 
 module::module(module&& rhs)
-    : dogen::yarn::element(
-        std::forward<dogen::yarn::element>(rhs)),
+    : dogen::yarn::meta_model::element(
+        std::forward<dogen::yarn::meta_model::element>(rhs)),
       members_(std::move(rhs.members_)),
       is_root_(std::move(rhs.is_root_)),
       is_global_module_(std::move(rhs.is_global_module_)),
@@ -81,18 +82,18 @@ module::module(module&& rhs)
 module::module(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
+    const dogen::yarn::meta_model::element_properties& element_properties,
     const std::list<std::string>& members,
     const bool is_root,
     const bool is_global_module,
-    const boost::optional<dogen::yarn::orm_module_properties>& orm_properties)
-    : dogen::yarn::element(
+    const boost::optional<dogen::yarn::meta_model::orm_module_properties>& orm_properties)
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -131,9 +132,9 @@ void module::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::module\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::module\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"members\": " << members_ << ", "
       << "\"is_root\": " << is_root_ << ", "
@@ -143,7 +144,7 @@ void module::to_stream(std::ostream& s) const {
 }
 
 void module::swap(module& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(members_, other.members_);
@@ -152,14 +153,14 @@ void module::swap(module& other) noexcept {
     swap(orm_properties_, other.orm_properties_);
 }
 
-bool module::equals(const dogen::yarn::element& other) const {
+bool module::equals(const dogen::yarn::meta_model::element& other) const {
     const module* const p(dynamic_cast<const module* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool module::operator==(const module& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         members_ == rhs.members_ &&
         is_root_ == rhs.is_root_ &&
         is_global_module_ == rhs.is_global_module_ &&
@@ -204,20 +205,20 @@ void module::is_global_module(const bool v) {
     is_global_module_ = v;
 }
 
-const boost::optional<dogen::yarn::orm_module_properties>& module::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_module_properties>& module::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_module_properties>& module::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_module_properties>& module::orm_properties() {
     return orm_properties_;
 }
 
-void module::orm_properties(const boost::optional<dogen::yarn::orm_module_properties>& v) {
+void module::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_module_properties>& v) {
     orm_properties_ = v;
 }
 
-void module::orm_properties(const boost::optional<dogen::yarn::orm_module_properties>&& v) {
+void module::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_module_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/name.cpp b/projects/yarn/src/types/meta_model/name.cpp
similarity index 77%
rename from projects/yarn/src/types/name.cpp
rename to projects/yarn/src/types/meta_model/name.cpp
index f4a51017b..4340c61ac 100644
--- a/projects/yarn/src/types/name.cpp
+++ b/projects/yarn/src/types/meta_model/name.cpp
@@ -18,16 +18,17 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/name.hpp"
+#include "dogen/yarn/types/meta_model/name.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 name::name(
     const std::string& id,
     const std::string& simple,
-    const std::map<dogen::yarn::languages, std::string>& qualified,
-    const dogen::yarn::location& location,
+    const std::map<dogen::yarn::meta_model::languages, std::string>& qualified,
+    const dogen::yarn::meta_model::location& location,
     const std::string& identifiable)
     : id_(id),
       simple_(simple),
@@ -90,35 +91,35 @@ void name::simple(const std::string&& v) {
     simple_ = std::move(v);
 }
 
-const std::map<dogen::yarn::languages, std::string>& name::qualified() const {
+const std::map<dogen::yarn::meta_model::languages, std::string>& name::qualified() const {
     return qualified_;
 }
 
-std::map<dogen::yarn::languages, std::string>& name::qualified() {
+std::map<dogen::yarn::meta_model::languages, std::string>& name::qualified() {
     return qualified_;
 }
 
-void name::qualified(const std::map<dogen::yarn::languages, std::string>& v) {
+void name::qualified(const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     qualified_ = v;
 }
 
-void name::qualified(const std::map<dogen::yarn::languages, std::string>&& v) {
+void name::qualified(const std::map<dogen::yarn::meta_model::languages, std::string>&& v) {
     qualified_ = std::move(v);
 }
 
-const dogen::yarn::location& name::location() const {
+const dogen::yarn::meta_model::location& name::location() const {
     return location_;
 }
 
-dogen::yarn::location& name::location() {
+dogen::yarn::meta_model::location& name::location() {
     return location_;
 }
 
-void name::location(const dogen::yarn::location& v) {
+void name::location(const dogen::yarn::meta_model::location& v) {
     location_ = v;
 }
 
-void name::location(const dogen::yarn::location&& v) {
+void name::location(const dogen::yarn::meta_model::location&& v) {
     location_ = std::move(v);
 }
 
@@ -138,4 +139,4 @@ void name::identifiable(const std::string&& v) {
     identifiable_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/meta_model/name_flattener.cpp b/projects/yarn/src/types/meta_model/name_flattener.cpp
new file mode 100644
index 000000000..055448532
--- /dev/null
+++ b/projects/yarn/src/types/meta_model/name_flattener.cpp
@@ -0,0 +1,31 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/yarn/types/meta_model/name_flattener.hpp"
+
+namespace dogen {
+namespace yarn {
+namespace meta_model {
+
+bool name_flattener::operator==(const name_flattener& /*rhs*/) const {
+    return true;
+}
+
+} } }
diff --git a/projects/yarn/src/types/name_tree.cpp b/projects/yarn/src/types/meta_model/name_tree.cpp
similarity index 76%
rename from projects/yarn/src/types/name_tree.cpp
rename to projects/yarn/src/types/meta_model/name_tree.cpp
index 71bd8d8b7..7396e74e8 100644
--- a/projects/yarn/src/types/name_tree.cpp
+++ b/projects/yarn/src/types/meta_model/name_tree.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/name_tree.hpp"
+#include "dogen/yarn/types/meta_model/name_tree.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 name_tree::name_tree()
     : are_children_opaque_(static_cast<bool>(0)),
@@ -30,11 +31,11 @@ name_tree::name_tree()
       is_floating_point_(static_cast<bool>(0)) { }
 
 name_tree::name_tree(
-    const dogen::yarn::name& current,
-    const std::list<dogen::yarn::name_tree>& children,
+    const dogen::yarn::meta_model::name& current,
+    const std::list<dogen::yarn::meta_model::name_tree>& children,
     const bool are_children_opaque,
     const bool is_circular_dependency,
-    const std::map<dogen::yarn::languages, std::string>& qualified,
+    const std::map<dogen::yarn::meta_model::languages, std::string>& qualified,
     const std::string& identifiable,
     const bool is_current_simple_type,
     const bool is_floating_point)
@@ -76,35 +77,35 @@ name_tree& name_tree::operator=(name_tree other) {
     return *this;
 }
 
-const dogen::yarn::name& name_tree::current() const {
+const dogen::yarn::meta_model::name& name_tree::current() const {
     return current_;
 }
 
-dogen::yarn::name& name_tree::current() {
+dogen::yarn::meta_model::name& name_tree::current() {
     return current_;
 }
 
-void name_tree::current(const dogen::yarn::name& v) {
+void name_tree::current(const dogen::yarn::meta_model::name& v) {
     current_ = v;
 }
 
-void name_tree::current(const dogen::yarn::name&& v) {
+void name_tree::current(const dogen::yarn::meta_model::name&& v) {
     current_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name_tree>& name_tree::children() const {
+const std::list<dogen::yarn::meta_model::name_tree>& name_tree::children() const {
     return children_;
 }
 
-std::list<dogen::yarn::name_tree>& name_tree::children() {
+std::list<dogen::yarn::meta_model::name_tree>& name_tree::children() {
     return children_;
 }
 
-void name_tree::children(const std::list<dogen::yarn::name_tree>& v) {
+void name_tree::children(const std::list<dogen::yarn::meta_model::name_tree>& v) {
     children_ = v;
 }
 
-void name_tree::children(const std::list<dogen::yarn::name_tree>&& v) {
+void name_tree::children(const std::list<dogen::yarn::meta_model::name_tree>&& v) {
     children_ = std::move(v);
 }
 
@@ -124,19 +125,19 @@ void name_tree::is_circular_dependency(const bool v) {
     is_circular_dependency_ = v;
 }
 
-const std::map<dogen::yarn::languages, std::string>& name_tree::qualified() const {
+const std::map<dogen::yarn::meta_model::languages, std::string>& name_tree::qualified() const {
     return qualified_;
 }
 
-std::map<dogen::yarn::languages, std::string>& name_tree::qualified() {
+std::map<dogen::yarn::meta_model::languages, std::string>& name_tree::qualified() {
     return qualified_;
 }
 
-void name_tree::qualified(const std::map<dogen::yarn::languages, std::string>& v) {
+void name_tree::qualified(const std::map<dogen::yarn::meta_model::languages, std::string>& v) {
     qualified_ = v;
 }
 
-void name_tree::qualified(const std::map<dogen::yarn::languages, std::string>&& v) {
+void name_tree::qualified(const std::map<dogen::yarn::meta_model::languages, std::string>&& v) {
     qualified_ = std::move(v);
 }
 
@@ -172,4 +173,4 @@ void name_tree::is_floating_point(const bool v) {
     is_floating_point_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/object.cpp b/projects/yarn/src/types/meta_model/object.cpp
similarity index 69%
rename from projects/yarn/src/types/object.cpp
rename to projects/yarn/src/types/meta_model/object.cpp
index 135992e98..ef9bd0403 100644
--- a/projects/yarn/src/types/object.cpp
+++ b/projects/yarn/src/types/meta_model/object.cpp
@@ -20,18 +20,18 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/io/object_types_io.hpp"
-#include "dogen/yarn/io/type_parameters_io.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
-#include "dogen/yarn/io/orm_object_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/io/meta_model/object_types_io.hpp"
+#include "dogen/yarn/io/meta_model/type_parameters_io.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::attribute>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::attribute>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -45,7 +45,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::at
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -63,7 +63,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<dogen:
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::name>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -77,7 +77,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::na
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::name>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -92,7 +92,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_object_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_object_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -107,6 +107,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 object::object()
     : is_immutable_(static_cast<bool>(0)),
@@ -119,13 +120,13 @@ object::object()
       in_inheritance_relationship_(static_cast<bool>(0)),
       is_visitation_root_(static_cast<bool>(0)),
       is_visitation_leaf_(static_cast<bool>(0)),
-      object_type_(static_cast<dogen::yarn::object_types>(0)),
+      object_type_(static_cast<dogen::yarn::meta_model::object_types>(0)),
       provides_opaqueness_(static_cast<bool>(0)),
       can_be_primitive_underlier_(static_cast<bool>(0)) { }
 
 object::object(object&& rhs)
-    : dogen::yarn::element(
-        std::forward<dogen::yarn::element>(rhs)),
+    : dogen::yarn::meta_model::element(
+        std::forward<dogen::yarn::meta_model::element>(rhs)),
       all_attributes_(std::move(rhs.all_attributes_)),
       local_attributes_(std::move(rhs.local_attributes_)),
       inherited_attributes_(std::move(rhs.inherited_attributes_)),
@@ -157,16 +158,16 @@ object::object(object&& rhs)
 object::object(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
-    const std::list<dogen::yarn::attribute>& all_attributes,
-    const std::list<dogen::yarn::attribute>& local_attributes,
-    const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& inherited_attributes,
+    const dogen::yarn::meta_model::element_properties& element_properties,
+    const std::list<dogen::yarn::meta_model::attribute>& all_attributes,
+    const std::list<dogen::yarn::meta_model::attribute>& local_attributes,
+    const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& inherited_attributes,
     const bool is_immutable,
     const bool is_fluent,
     const bool is_parent,
@@ -175,23 +176,23 @@ object::object(
     const bool is_final,
     const bool is_abstract,
     const bool in_inheritance_relationship,
-    const std::list<dogen::yarn::name>& root_parents,
-    const std::list<dogen::yarn::name>& parents,
-    const std::list<dogen::yarn::name>& leaves,
-    const std::list<dogen::yarn::name>& transparent_associations,
-    const std::list<dogen::yarn::name>& opaque_associations,
-    const boost::optional<dogen::yarn::name>& base_visitor,
-    const boost::optional<dogen::yarn::name>& derived_visitor,
+    const std::list<dogen::yarn::meta_model::name>& root_parents,
+    const std::list<dogen::yarn::meta_model::name>& parents,
+    const std::list<dogen::yarn::meta_model::name>& leaves,
+    const std::list<dogen::yarn::meta_model::name>& transparent_associations,
+    const std::list<dogen::yarn::meta_model::name>& opaque_associations,
+    const boost::optional<dogen::yarn::meta_model::name>& base_visitor,
+    const boost::optional<dogen::yarn::meta_model::name>& derived_visitor,
     const bool is_visitation_root,
     const bool is_visitation_leaf,
-    const dogen::yarn::type_parameters& type_parameters,
-    const dogen::yarn::object_types object_type,
-    const std::list<dogen::yarn::name>& modeled_concepts,
-    const std::list<dogen::yarn::name>& associative_container_keys,
+    const dogen::yarn::meta_model::type_parameters& type_parameters,
+    const dogen::yarn::meta_model::object_types object_type,
+    const std::list<dogen::yarn::meta_model::name>& modeled_concepts,
+    const std::list<dogen::yarn::meta_model::name>& associative_container_keys,
     const bool provides_opaqueness,
     const bool can_be_primitive_underlier,
-    const boost::optional<dogen::yarn::orm_object_properties>& orm_properties)
-    : dogen::yarn::element(
+    const boost::optional<dogen::yarn::meta_model::orm_object_properties>& orm_properties)
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -253,9 +254,9 @@ void object::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::object\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::object\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"all_attributes\": " << all_attributes_ << ", "
       << "\"local_attributes\": " << local_attributes_ << ", "
@@ -288,7 +289,7 @@ void object::to_stream(std::ostream& s) const {
 }
 
 void object::swap(object& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(all_attributes_, other.all_attributes_);
@@ -320,14 +321,14 @@ void object::swap(object& other) noexcept {
     swap(orm_properties_, other.orm_properties_);
 }
 
-bool object::equals(const dogen::yarn::element& other) const {
+bool object::equals(const dogen::yarn::meta_model::element& other) const {
     const object* const p(dynamic_cast<const object* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool object::operator==(const object& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         all_attributes_ == rhs.all_attributes_ &&
         local_attributes_ == rhs.local_attributes_ &&
         inherited_attributes_ == rhs.inherited_attributes_ &&
@@ -363,51 +364,51 @@ object& object::operator=(object other) {
     return *this;
 }
 
-const std::list<dogen::yarn::attribute>& object::all_attributes() const {
+const std::list<dogen::yarn::meta_model::attribute>& object::all_attributes() const {
     return all_attributes_;
 }
 
-std::list<dogen::yarn::attribute>& object::all_attributes() {
+std::list<dogen::yarn::meta_model::attribute>& object::all_attributes() {
     return all_attributes_;
 }
 
-void object::all_attributes(const std::list<dogen::yarn::attribute>& v) {
+void object::all_attributes(const std::list<dogen::yarn::meta_model::attribute>& v) {
     all_attributes_ = v;
 }
 
-void object::all_attributes(const std::list<dogen::yarn::attribute>&& v) {
+void object::all_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v) {
     all_attributes_ = std::move(v);
 }
 
-const std::list<dogen::yarn::attribute>& object::local_attributes() const {
+const std::list<dogen::yarn::meta_model::attribute>& object::local_attributes() const {
     return local_attributes_;
 }
 
-std::list<dogen::yarn::attribute>& object::local_attributes() {
+std::list<dogen::yarn::meta_model::attribute>& object::local_attributes() {
     return local_attributes_;
 }
 
-void object::local_attributes(const std::list<dogen::yarn::attribute>& v) {
+void object::local_attributes(const std::list<dogen::yarn::meta_model::attribute>& v) {
     local_attributes_ = v;
 }
 
-void object::local_attributes(const std::list<dogen::yarn::attribute>&& v) {
+void object::local_attributes(const std::list<dogen::yarn::meta_model::attribute>&& v) {
     local_attributes_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& object::inherited_attributes() const {
+const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& object::inherited_attributes() const {
     return inherited_attributes_;
 }
 
-std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& object::inherited_attributes() {
+std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& object::inherited_attributes() {
     return inherited_attributes_;
 }
 
-void object::inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >& v) {
+void object::inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >& v) {
     inherited_attributes_ = v;
 }
 
-void object::inherited_attributes(const std::unordered_map<dogen::yarn::name, std::list<dogen::yarn::attribute> >&& v) {
+void object::inherited_attributes(const std::unordered_map<dogen::yarn::meta_model::name, std::list<dogen::yarn::meta_model::attribute> >&& v) {
     inherited_attributes_ = std::move(v);
 }
 
@@ -475,115 +476,115 @@ void object::in_inheritance_relationship(const bool v) {
     in_inheritance_relationship_ = v;
 }
 
-const std::list<dogen::yarn::name>& object::root_parents() const {
+const std::list<dogen::yarn::meta_model::name>& object::root_parents() const {
     return root_parents_;
 }
 
-std::list<dogen::yarn::name>& object::root_parents() {
+std::list<dogen::yarn::meta_model::name>& object::root_parents() {
     return root_parents_;
 }
 
-void object::root_parents(const std::list<dogen::yarn::name>& v) {
+void object::root_parents(const std::list<dogen::yarn::meta_model::name>& v) {
     root_parents_ = v;
 }
 
-void object::root_parents(const std::list<dogen::yarn::name>&& v) {
+void object::root_parents(const std::list<dogen::yarn::meta_model::name>&& v) {
     root_parents_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& object::parents() const {
+const std::list<dogen::yarn::meta_model::name>& object::parents() const {
     return parents_;
 }
 
-std::list<dogen::yarn::name>& object::parents() {
+std::list<dogen::yarn::meta_model::name>& object::parents() {
     return parents_;
 }
 
-void object::parents(const std::list<dogen::yarn::name>& v) {
+void object::parents(const std::list<dogen::yarn::meta_model::name>& v) {
     parents_ = v;
 }
 
-void object::parents(const std::list<dogen::yarn::name>&& v) {
+void object::parents(const std::list<dogen::yarn::meta_model::name>&& v) {
     parents_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& object::leaves() const {
+const std::list<dogen::yarn::meta_model::name>& object::leaves() const {
     return leaves_;
 }
 
-std::list<dogen::yarn::name>& object::leaves() {
+std::list<dogen::yarn::meta_model::name>& object::leaves() {
     return leaves_;
 }
 
-void object::leaves(const std::list<dogen::yarn::name>& v) {
+void object::leaves(const std::list<dogen::yarn::meta_model::name>& v) {
     leaves_ = v;
 }
 
-void object::leaves(const std::list<dogen::yarn::name>&& v) {
+void object::leaves(const std::list<dogen::yarn::meta_model::name>&& v) {
     leaves_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& object::transparent_associations() const {
+const std::list<dogen::yarn::meta_model::name>& object::transparent_associations() const {
     return transparent_associations_;
 }
 
-std::list<dogen::yarn::name>& object::transparent_associations() {
+std::list<dogen::yarn::meta_model::name>& object::transparent_associations() {
     return transparent_associations_;
 }
 
-void object::transparent_associations(const std::list<dogen::yarn::name>& v) {
+void object::transparent_associations(const std::list<dogen::yarn::meta_model::name>& v) {
     transparent_associations_ = v;
 }
 
-void object::transparent_associations(const std::list<dogen::yarn::name>&& v) {
+void object::transparent_associations(const std::list<dogen::yarn::meta_model::name>&& v) {
     transparent_associations_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& object::opaque_associations() const {
+const std::list<dogen::yarn::meta_model::name>& object::opaque_associations() const {
     return opaque_associations_;
 }
 
-std::list<dogen::yarn::name>& object::opaque_associations() {
+std::list<dogen::yarn::meta_model::name>& object::opaque_associations() {
     return opaque_associations_;
 }
 
-void object::opaque_associations(const std::list<dogen::yarn::name>& v) {
+void object::opaque_associations(const std::list<dogen::yarn::meta_model::name>& v) {
     opaque_associations_ = v;
 }
 
-void object::opaque_associations(const std::list<dogen::yarn::name>&& v) {
+void object::opaque_associations(const std::list<dogen::yarn::meta_model::name>&& v) {
     opaque_associations_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::name>& object::base_visitor() const {
+const boost::optional<dogen::yarn::meta_model::name>& object::base_visitor() const {
     return base_visitor_;
 }
 
-boost::optional<dogen::yarn::name>& object::base_visitor() {
+boost::optional<dogen::yarn::meta_model::name>& object::base_visitor() {
     return base_visitor_;
 }
 
-void object::base_visitor(const boost::optional<dogen::yarn::name>& v) {
+void object::base_visitor(const boost::optional<dogen::yarn::meta_model::name>& v) {
     base_visitor_ = v;
 }
 
-void object::base_visitor(const boost::optional<dogen::yarn::name>&& v) {
+void object::base_visitor(const boost::optional<dogen::yarn::meta_model::name>&& v) {
     base_visitor_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::name>& object::derived_visitor() const {
+const boost::optional<dogen::yarn::meta_model::name>& object::derived_visitor() const {
     return derived_visitor_;
 }
 
-boost::optional<dogen::yarn::name>& object::derived_visitor() {
+boost::optional<dogen::yarn::meta_model::name>& object::derived_visitor() {
     return derived_visitor_;
 }
 
-void object::derived_visitor(const boost::optional<dogen::yarn::name>& v) {
+void object::derived_visitor(const boost::optional<dogen::yarn::meta_model::name>& v) {
     derived_visitor_ = v;
 }
 
-void object::derived_visitor(const boost::optional<dogen::yarn::name>&& v) {
+void object::derived_visitor(const boost::optional<dogen::yarn::meta_model::name>&& v) {
     derived_visitor_ = std::move(v);
 }
 
@@ -603,59 +604,59 @@ void object::is_visitation_leaf(const bool v) {
     is_visitation_leaf_ = v;
 }
 
-const dogen::yarn::type_parameters& object::type_parameters() const {
+const dogen::yarn::meta_model::type_parameters& object::type_parameters() const {
     return type_parameters_;
 }
 
-dogen::yarn::type_parameters& object::type_parameters() {
+dogen::yarn::meta_model::type_parameters& object::type_parameters() {
     return type_parameters_;
 }
 
-void object::type_parameters(const dogen::yarn::type_parameters& v) {
+void object::type_parameters(const dogen::yarn::meta_model::type_parameters& v) {
     type_parameters_ = v;
 }
 
-void object::type_parameters(const dogen::yarn::type_parameters&& v) {
+void object::type_parameters(const dogen::yarn::meta_model::type_parameters&& v) {
     type_parameters_ = std::move(v);
 }
 
-dogen::yarn::object_types object::object_type() const {
+dogen::yarn::meta_model::object_types object::object_type() const {
     return object_type_;
 }
 
-void object::object_type(const dogen::yarn::object_types v) {
+void object::object_type(const dogen::yarn::meta_model::object_types v) {
     object_type_ = v;
 }
 
-const std::list<dogen::yarn::name>& object::modeled_concepts() const {
+const std::list<dogen::yarn::meta_model::name>& object::modeled_concepts() const {
     return modeled_concepts_;
 }
 
-std::list<dogen::yarn::name>& object::modeled_concepts() {
+std::list<dogen::yarn::meta_model::name>& object::modeled_concepts() {
     return modeled_concepts_;
 }
 
-void object::modeled_concepts(const std::list<dogen::yarn::name>& v) {
+void object::modeled_concepts(const std::list<dogen::yarn::meta_model::name>& v) {
     modeled_concepts_ = v;
 }
 
-void object::modeled_concepts(const std::list<dogen::yarn::name>&& v) {
+void object::modeled_concepts(const std::list<dogen::yarn::meta_model::name>&& v) {
     modeled_concepts_ = std::move(v);
 }
 
-const std::list<dogen::yarn::name>& object::associative_container_keys() const {
+const std::list<dogen::yarn::meta_model::name>& object::associative_container_keys() const {
     return associative_container_keys_;
 }
 
-std::list<dogen::yarn::name>& object::associative_container_keys() {
+std::list<dogen::yarn::meta_model::name>& object::associative_container_keys() {
     return associative_container_keys_;
 }
 
-void object::associative_container_keys(const std::list<dogen::yarn::name>& v) {
+void object::associative_container_keys(const std::list<dogen::yarn::meta_model::name>& v) {
     associative_container_keys_ = v;
 }
 
-void object::associative_container_keys(const std::list<dogen::yarn::name>&& v) {
+void object::associative_container_keys(const std::list<dogen::yarn::meta_model::name>&& v) {
     associative_container_keys_ = std::move(v);
 }
 
@@ -675,20 +676,20 @@ void object::can_be_primitive_underlier(const bool v) {
     can_be_primitive_underlier_ = v;
 }
 
-const boost::optional<dogen::yarn::orm_object_properties>& object::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_object_properties>& object::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_object_properties>& object::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_object_properties>& object::orm_properties() {
     return orm_properties_;
 }
 
-void object::orm_properties(const boost::optional<dogen::yarn::orm_object_properties>& v) {
+void object::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_object_properties>& v) {
     orm_properties_ = v;
 }
 
-void object::orm_properties(const boost::optional<dogen::yarn::orm_object_properties>&& v) {
+void object::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_object_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/orm_attribute_properties.cpp b/projects/yarn/src/types/meta_model/orm_attribute_properties.cpp
similarity index 86%
rename from projects/yarn/src/types/orm_attribute_properties.cpp
rename to projects/yarn/src/types/meta_model/orm_attribute_properties.cpp
index ecddb876d..38651e1d4 100644
--- a/projects/yarn/src/types/orm_attribute_properties.cpp
+++ b/projects/yarn/src/types/meta_model/orm_attribute_properties.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/orm_attribute_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_attribute_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_attribute_properties::orm_attribute_properties()
     : is_primary_key_(static_cast<bool>(0)),
@@ -38,7 +39,7 @@ orm_attribute_properties::orm_attribute_properties(
     const std::string& column_name,
     const bool is_primary_key,
     const boost::optional<bool>& is_nullable,
-    const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& type_overrides,
+    const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& type_overrides,
     const bool is_composite)
     : column_name_(column_name),
       is_primary_key_(is_primary_key),
@@ -109,19 +110,19 @@ void orm_attribute_properties::is_nullable(const boost::optional<bool>&& v) {
     is_nullable_ = std::move(v);
 }
 
-const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& orm_attribute_properties::type_overrides() const {
+const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& orm_attribute_properties::type_overrides() const {
     return type_overrides_;
 }
 
-std::unordered_map<dogen::yarn::orm_database_systems, std::string>& orm_attribute_properties::type_overrides() {
+std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& orm_attribute_properties::type_overrides() {
     return type_overrides_;
 }
 
-void orm_attribute_properties::type_overrides(const std::unordered_map<dogen::yarn::orm_database_systems, std::string>& v) {
+void orm_attribute_properties::type_overrides(const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>& v) {
     type_overrides_ = v;
 }
 
-void orm_attribute_properties::type_overrides(const std::unordered_map<dogen::yarn::orm_database_systems, std::string>&& v) {
+void orm_attribute_properties::type_overrides(const std::unordered_map<dogen::yarn::meta_model::orm_database_systems, std::string>&& v) {
     type_overrides_ = std::move(v);
 }
 
@@ -133,4 +134,4 @@ void orm_attribute_properties::is_composite(const bool v) {
     is_composite_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/orm_model_properties.cpp b/projects/yarn/src/types/meta_model/orm_model_properties.cpp
similarity index 76%
rename from projects/yarn/src/types/orm_model_properties.cpp
rename to projects/yarn/src/types/meta_model/orm_model_properties.cpp
index 62efa262e..94bb051dc 100644
--- a/projects/yarn/src/types/orm_model_properties.cpp
+++ b/projects/yarn/src/types/meta_model/orm_model_properties.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/orm_model_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_model_properties::orm_model_properties(orm_model_properties&& rhs)
     : database_systems_(std::move(rhs.database_systems_)),
@@ -29,9 +30,9 @@ orm_model_properties::orm_model_properties(orm_model_properties&& rhs)
       letter_case_(std::move(rhs.letter_case_)) { }
 
 orm_model_properties::orm_model_properties(
-    const std::vector<dogen::yarn::orm_database_systems>& database_systems,
+    const std::vector<dogen::yarn::meta_model::orm_database_systems>& database_systems,
     const std::string& schema_name,
-    const boost::optional<dogen::yarn::letter_cases>& letter_case)
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case)
     : database_systems_(database_systems),
       schema_name_(schema_name),
       letter_case_(letter_case) { }
@@ -55,19 +56,19 @@ orm_model_properties& orm_model_properties::operator=(orm_model_properties other
     return *this;
 }
 
-const std::vector<dogen::yarn::orm_database_systems>& orm_model_properties::database_systems() const {
+const std::vector<dogen::yarn::meta_model::orm_database_systems>& orm_model_properties::database_systems() const {
     return database_systems_;
 }
 
-std::vector<dogen::yarn::orm_database_systems>& orm_model_properties::database_systems() {
+std::vector<dogen::yarn::meta_model::orm_database_systems>& orm_model_properties::database_systems() {
     return database_systems_;
 }
 
-void orm_model_properties::database_systems(const std::vector<dogen::yarn::orm_database_systems>& v) {
+void orm_model_properties::database_systems(const std::vector<dogen::yarn::meta_model::orm_database_systems>& v) {
     database_systems_ = v;
 }
 
-void orm_model_properties::database_systems(const std::vector<dogen::yarn::orm_database_systems>&& v) {
+void orm_model_properties::database_systems(const std::vector<dogen::yarn::meta_model::orm_database_systems>&& v) {
     database_systems_ = std::move(v);
 }
 
@@ -87,20 +88,20 @@ void orm_model_properties::schema_name(const std::string&& v) {
     schema_name_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::letter_cases>& orm_model_properties::letter_case() const {
+const boost::optional<dogen::yarn::meta_model::letter_cases>& orm_model_properties::letter_case() const {
     return letter_case_;
 }
 
-boost::optional<dogen::yarn::letter_cases>& orm_model_properties::letter_case() {
+boost::optional<dogen::yarn::meta_model::letter_cases>& orm_model_properties::letter_case() {
     return letter_case_;
 }
 
-void orm_model_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>& v) {
+void orm_model_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     letter_case_ = v;
 }
 
-void orm_model_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>&& v) {
+void orm_model_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v) {
     letter_case_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/orm_module_properties.cpp b/projects/yarn/src/types/meta_model/orm_module_properties.cpp
similarity index 95%
rename from projects/yarn/src/types/orm_module_properties.cpp
rename to projects/yarn/src/types/meta_model/orm_module_properties.cpp
index 84461a763..d234cd25e 100644
--- a/projects/yarn/src/types/orm_module_properties.cpp
+++ b/projects/yarn/src/types/meta_model/orm_module_properties.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/orm_module_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_module_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_module_properties::orm_module_properties(const std::string& schema_name)
     : schema_name_(schema_name) { }
@@ -57,4 +58,4 @@ void orm_module_properties::schema_name(const std::string&& v) {
     schema_name_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/orm_object_properties.cpp b/projects/yarn/src/types/meta_model/orm_object_properties.cpp
similarity index 90%
rename from projects/yarn/src/types/orm_object_properties.cpp
rename to projects/yarn/src/types/meta_model/orm_object_properties.cpp
index 4048c724d..a2c1b1715 100644
--- a/projects/yarn/src/types/orm_object_properties.cpp
+++ b/projects/yarn/src/types/meta_model/orm_object_properties.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_object_properties::orm_object_properties()
     : generate_mapping_(static_cast<bool>(0)),
@@ -42,7 +43,7 @@ orm_object_properties::orm_object_properties(
     const std::string& table_name,
     const bool is_value,
     const bool has_primary_key,
-    const boost::optional<dogen::yarn::letter_cases>& letter_case)
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case)
     : generate_mapping_(generate_mapping),
       schema_name_(schema_name),
       table_name_(table_name),
@@ -131,20 +132,20 @@ void orm_object_properties::has_primary_key(const bool v) {
     has_primary_key_ = v;
 }
 
-const boost::optional<dogen::yarn::letter_cases>& orm_object_properties::letter_case() const {
+const boost::optional<dogen::yarn::meta_model::letter_cases>& orm_object_properties::letter_case() const {
     return letter_case_;
 }
 
-boost::optional<dogen::yarn::letter_cases>& orm_object_properties::letter_case() {
+boost::optional<dogen::yarn::meta_model::letter_cases>& orm_object_properties::letter_case() {
     return letter_case_;
 }
 
-void orm_object_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>& v) {
+void orm_object_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     letter_case_ = v;
 }
 
-void orm_object_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>&& v) {
+void orm_object_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v) {
     letter_case_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/orm_primitive_properties.cpp b/projects/yarn/src/types/meta_model/orm_primitive_properties.cpp
similarity index 86%
rename from projects/yarn/src/types/orm_primitive_properties.cpp
rename to projects/yarn/src/types/meta_model/orm_primitive_properties.cpp
index 6a2b42ab8..0f2ac8717 100644
--- a/projects/yarn/src/types/orm_primitive_properties.cpp
+++ b/projects/yarn/src/types/meta_model/orm_primitive_properties.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 orm_primitive_properties::orm_primitive_properties()
     : generate_mapping_(static_cast<bool>(0)) { }
@@ -34,7 +35,7 @@ orm_primitive_properties::orm_primitive_properties(orm_primitive_properties&& rh
 orm_primitive_properties::orm_primitive_properties(
     const bool generate_mapping,
     const std::string& schema_name,
-    const boost::optional<dogen::yarn::letter_cases>& letter_case)
+    const boost::optional<dogen::yarn::meta_model::letter_cases>& letter_case)
     : generate_mapping_(generate_mapping),
       schema_name_(schema_name),
       letter_case_(letter_case) { }
@@ -82,20 +83,20 @@ void orm_primitive_properties::schema_name(const std::string&& v) {
     schema_name_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::letter_cases>& orm_primitive_properties::letter_case() const {
+const boost::optional<dogen::yarn::meta_model::letter_cases>& orm_primitive_properties::letter_case() const {
     return letter_case_;
 }
 
-boost::optional<dogen::yarn::letter_cases>& orm_primitive_properties::letter_case() {
+boost::optional<dogen::yarn::meta_model::letter_cases>& orm_primitive_properties::letter_case() {
     return letter_case_;
 }
 
-void orm_primitive_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>& v) {
+void orm_primitive_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>& v) {
     letter_case_ = v;
 }
 
-void orm_primitive_properties::letter_case(const boost::optional<dogen::yarn::letter_cases>&& v) {
+void orm_primitive_properties::letter_case(const boost::optional<dogen::yarn::meta_model::letter_cases>&& v) {
     letter_case_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/primitive.cpp b/projects/yarn/src/types/meta_model/primitive.cpp
similarity index 73%
rename from projects/yarn/src/types/primitive.cpp
rename to projects/yarn/src/types/meta_model/primitive.cpp
index 23f1a0841..9c72043a6 100644
--- a/projects/yarn/src/types/primitive.cpp
+++ b/projects/yarn/src/types/meta_model/primitive.cpp
@@ -20,15 +20,15 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/io/attribute_io.hpp"
-#include "dogen/yarn/types/primitive.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
-#include "dogen/yarn/io/orm_primitive_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/io/meta_model/attribute_io.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::orm_primitive_properties>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -43,6 +43,7 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 primitive::primitive()
     : is_nullable_(static_cast<bool>(0)),
@@ -50,8 +51,8 @@ primitive::primitive()
       is_immutable_(static_cast<bool>(0)) { }
 
 primitive::primitive(primitive&& rhs)
-    : dogen::yarn::element(
-        std::forward<dogen::yarn::element>(rhs)),
+    : dogen::yarn::meta_model::element(
+        std::forward<dogen::yarn::meta_model::element>(rhs)),
       is_nullable_(std::move(rhs.is_nullable_)),
       value_attribute_(std::move(rhs.value_attribute_)),
       use_type_aliasing_(std::move(rhs.use_type_aliasing_)),
@@ -61,19 +62,19 @@ primitive::primitive(primitive&& rhs)
 primitive::primitive(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
+    const dogen::yarn::meta_model::element_properties& element_properties,
     const bool is_nullable,
-    const dogen::yarn::attribute& value_attribute,
+    const dogen::yarn::meta_model::attribute& value_attribute,
     const bool use_type_aliasing,
     const bool is_immutable,
-    const boost::optional<dogen::yarn::orm_primitive_properties>& orm_properties)
-    : dogen::yarn::element(
+    const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& orm_properties)
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -113,9 +114,9 @@ void primitive::to_stream(std::ostream& s) const {
     s.setf(std::ios::showpoint);
 
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::primitive\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::primitive\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"is_nullable\": " << is_nullable_ << ", "
       << "\"value_attribute\": " << value_attribute_ << ", "
@@ -126,7 +127,7 @@ void primitive::to_stream(std::ostream& s) const {
 }
 
 void primitive::swap(primitive& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(is_nullable_, other.is_nullable_);
@@ -136,14 +137,14 @@ void primitive::swap(primitive& other) noexcept {
     swap(orm_properties_, other.orm_properties_);
 }
 
-bool primitive::equals(const dogen::yarn::element& other) const {
+bool primitive::equals(const dogen::yarn::meta_model::element& other) const {
     const primitive* const p(dynamic_cast<const primitive* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool primitive::operator==(const primitive& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         is_nullable_ == rhs.is_nullable_ &&
         value_attribute_ == rhs.value_attribute_ &&
         use_type_aliasing_ == rhs.use_type_aliasing_ &&
@@ -165,19 +166,19 @@ void primitive::is_nullable(const bool v) {
     is_nullable_ = v;
 }
 
-const dogen::yarn::attribute& primitive::value_attribute() const {
+const dogen::yarn::meta_model::attribute& primitive::value_attribute() const {
     return value_attribute_;
 }
 
-dogen::yarn::attribute& primitive::value_attribute() {
+dogen::yarn::meta_model::attribute& primitive::value_attribute() {
     return value_attribute_;
 }
 
-void primitive::value_attribute(const dogen::yarn::attribute& v) {
+void primitive::value_attribute(const dogen::yarn::meta_model::attribute& v) {
     value_attribute_ = v;
 }
 
-void primitive::value_attribute(const dogen::yarn::attribute&& v) {
+void primitive::value_attribute(const dogen::yarn::meta_model::attribute&& v) {
     value_attribute_ = std::move(v);
 }
 
@@ -197,20 +198,20 @@ void primitive::is_immutable(const bool v) {
     is_immutable_ = v;
 }
 
-const boost::optional<dogen::yarn::orm_primitive_properties>& primitive::orm_properties() const {
+const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& primitive::orm_properties() const {
     return orm_properties_;
 }
 
-boost::optional<dogen::yarn::orm_primitive_properties>& primitive::orm_properties() {
+boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& primitive::orm_properties() {
     return orm_properties_;
 }
 
-void primitive::orm_properties(const boost::optional<dogen::yarn::orm_primitive_properties>& v) {
+void primitive::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>& v) {
     orm_properties_ = v;
 }
 
-void primitive::orm_properties(const boost::optional<dogen::yarn::orm_primitive_properties>&& v) {
+void primitive::orm_properties(const boost::optional<dogen::yarn::meta_model::orm_primitive_properties>&& v) {
     orm_properties_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/type_parameters.cpp b/projects/yarn/src/types/meta_model/type_parameters.cpp
similarity index 96%
rename from projects/yarn/src/types/type_parameters.cpp
rename to projects/yarn/src/types/meta_model/type_parameters.cpp
index 429098748..b88dc6265 100644
--- a/projects/yarn/src/types/type_parameters.cpp
+++ b/projects/yarn/src/types/meta_model/type_parameters.cpp
@@ -18,10 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/yarn/types/type_parameters.hpp"
+#include "dogen/yarn/types/meta_model/type_parameters.hpp"
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 type_parameters::type_parameters()
     : variable_number_of_parameters_(static_cast<bool>(0)),
@@ -79,4 +80,4 @@ void type_parameters::always_in_heap(const bool v) {
     always_in_heap_ = v;
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/visitor.cpp b/projects/yarn/src/types/meta_model/visitor.cpp
similarity index 64%
rename from projects/yarn/src/types/visitor.cpp
rename to projects/yarn/src/types/meta_model/visitor.cpp
index 38912066b..c1d61fa2b 100644
--- a/projects/yarn/src/types/visitor.cpp
+++ b/projects/yarn/src/types/meta_model/visitor.cpp
@@ -19,14 +19,14 @@
  *
  */
 #include <ostream>
-#include "dogen/yarn/io/name_io.hpp"
-#include "dogen/yarn/io/element_io.hpp"
-#include "dogen/yarn/types/visitor.hpp"
-#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
+#include "dogen/yarn/io/meta_model/element_io.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/element_visitor.hpp"
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::meta_model::name>& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -40,7 +40,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<dogen::yarn::na
 
 namespace boost {
 
-inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::name>& v) {
+inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::yarn::meta_model::name>& v) {
     s << "{ " << "\"__type__\": " << "\"boost::optional\"" << ", ";
 
     if (v)
@@ -55,26 +55,27 @@ inline std::ostream& operator<<(std::ostream& s, const boost::optional<dogen::ya
 
 namespace dogen {
 namespace yarn {
+namespace meta_model {
 
 visitor::visitor(visitor&& rhs)
-    : dogen::yarn::element(
-        std::forward<dogen::yarn::element>(rhs)),
+    : dogen::yarn::meta_model::element(
+        std::forward<dogen::yarn::meta_model::element>(rhs)),
       visits_(std::move(rhs.visits_)),
       parent_(std::move(rhs.parent_)) { }
 
 visitor::visitor(
     const std::string& documentation,
     const dogen::annotations::annotation& annotation,
-    const dogen::yarn::name& name,
-    const dogen::yarn::origin_types origin_type,
-    const boost::optional<dogen::yarn::name>& contained_by,
+    const dogen::yarn::meta_model::name& name,
+    const dogen::yarn::meta_model::origin_types origin_type,
+    const boost::optional<dogen::yarn::meta_model::name>& contained_by,
     const bool in_global_module,
     const std::vector<std::string>& stereotypes,
     const bool is_element_extension,
-    const dogen::yarn::element_properties& element_properties,
-    const std::list<dogen::yarn::name>& visits,
-    const boost::optional<dogen::yarn::name>& parent)
-    : dogen::yarn::element(
+    const dogen::yarn::meta_model::element_properties& element_properties,
+    const std::list<dogen::yarn::meta_model::name>& visits,
+    const boost::optional<dogen::yarn::meta_model::name>& parent)
+    : dogen::yarn::meta_model::element(
       documentation,
       annotation,
       name,
@@ -105,9 +106,9 @@ void visitor::accept(element_visitor& v) {
 
 void visitor::to_stream(std::ostream& s) const {
     s << " { "
-      << "\"__type__\": " << "\"dogen::yarn::visitor\"" << ", "
+      << "\"__type__\": " << "\"dogen::yarn::meta_model::visitor\"" << ", "
       << "\"__parent_0__\": ";
-    dogen::yarn::element::to_stream(s);
+    dogen::yarn::meta_model::element::to_stream(s);
     s << ", "
       << "\"visits\": " << visits_ << ", "
       << "\"parent\": " << parent_
@@ -115,21 +116,21 @@ void visitor::to_stream(std::ostream& s) const {
 }
 
 void visitor::swap(visitor& other) noexcept {
-    dogen::yarn::element::swap(other);
+    dogen::yarn::meta_model::element::swap(other);
 
     using std::swap;
     swap(visits_, other.visits_);
     swap(parent_, other.parent_);
 }
 
-bool visitor::equals(const dogen::yarn::element& other) const {
+bool visitor::equals(const dogen::yarn::meta_model::element& other) const {
     const visitor* const p(dynamic_cast<const visitor* const>(&other));
     if (!p) return false;
     return *this == *p;
 }
 
 bool visitor::operator==(const visitor& rhs) const {
-    return dogen::yarn::element::compare(rhs) &&
+    return dogen::yarn::meta_model::element::compare(rhs) &&
         visits_ == rhs.visits_ &&
         parent_ == rhs.parent_;
 }
@@ -140,36 +141,36 @@ visitor& visitor::operator=(visitor other) {
     return *this;
 }
 
-const std::list<dogen::yarn::name>& visitor::visits() const {
+const std::list<dogen::yarn::meta_model::name>& visitor::visits() const {
     return visits_;
 }
 
-std::list<dogen::yarn::name>& visitor::visits() {
+std::list<dogen::yarn::meta_model::name>& visitor::visits() {
     return visits_;
 }
 
-void visitor::visits(const std::list<dogen::yarn::name>& v) {
+void visitor::visits(const std::list<dogen::yarn::meta_model::name>& v) {
     visits_ = v;
 }
 
-void visitor::visits(const std::list<dogen::yarn::name>&& v) {
+void visitor::visits(const std::list<dogen::yarn::meta_model::name>&& v) {
     visits_ = std::move(v);
 }
 
-const boost::optional<dogen::yarn::name>& visitor::parent() const {
+const boost::optional<dogen::yarn::meta_model::name>& visitor::parent() const {
     return parent_;
 }
 
-boost::optional<dogen::yarn::name>& visitor::parent() {
+boost::optional<dogen::yarn::meta_model::name>& visitor::parent() {
     return parent_;
 }
 
-void visitor::parent(const boost::optional<dogen::yarn::name>& v) {
+void visitor::parent(const boost::optional<dogen::yarn::meta_model::name>& v) {
     parent_ = v;
 }
 
-void visitor::parent(const boost::optional<dogen::yarn::name>&& v) {
+void visitor::parent(const boost::optional<dogen::yarn::meta_model::name>&& v) {
     parent_ = std::move(v);
 }
 
-} }
+} } }
diff --git a/projects/yarn/src/types/transforms/annotations_transform.cpp b/projects/yarn/src/types/transforms/annotations_transform.cpp
index 96744148a..fd048177f 100644
--- a/projects/yarn/src/types/transforms/annotations_transform.cpp
+++ b/projects/yarn/src/types/transforms/annotations_transform.cpp
@@ -24,8 +24,8 @@
 #include "dogen/annotations/io/scribble_group_io.hpp"
 #include "dogen/annotations/types/annotation_groups_factory.hpp"
 #include "dogen/annotations/types/annotation_groups_factory.hpp"
-#include "dogen/yarn/types/elements_traversal.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/annotations_transform.hpp"
@@ -47,7 +47,7 @@ public:
         annotations::scribble_group>& sgrps) : scribble_groups_(sgrps) {}
 
 private:
-    void update_scribble(const element& e) {
+    void update_scribble(const meta_model::element& e) {
         const auto id(e.name().id());
         BOOST_LOG_SEV(lg, debug) << "Processing element: " << id;
 
@@ -79,15 +79,15 @@ private:
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(yarn::module& m) { update_scribble(m); }
-    void operator()(yarn::concept& c) { update_scribble(c); }
-    void operator()(yarn::builtin& b) { update_scribble(b); }
-    void operator()(yarn::enumeration& e) { update_scribble(e); }
-    void operator()(yarn::primitive& p) { update_scribble(p); }
-    void operator()(yarn::object& o) { update_scribble(o); }
-    void operator()(yarn::exception& e) { update_scribble(e); }
-    void operator()(yarn::visitor& v) { update_scribble(v); }
+    void operator()(meta_model::element&) { }
+    void operator()(meta_model::module& m) { update_scribble(m); }
+    void operator()(meta_model::concept& c) { update_scribble(c); }
+    void operator()(meta_model::builtin& b) { update_scribble(b); }
+    void operator()(meta_model::enumeration& e) { update_scribble(e); }
+    void operator()(meta_model::primitive& p) { update_scribble(p); }
+    void operator()(meta_model::object& o) { update_scribble(o); }
+    void operator()(meta_model::exception& e) { update_scribble(e); }
+    void operator()(meta_model::visitor& v) { update_scribble(v); }
 
 private:
     std::unordered_map<std::string, annotations::scribble_group>&
@@ -96,7 +96,7 @@ private:
 
 class annotation_updater {
 public:
-    annotation_updater(const yarn::name& model_name,
+    annotation_updater(const meta_model::name& model_name,
         const std::unordered_map<std::string, annotations::annotation_group>&
         annotation_groups);
 
@@ -156,23 +156,27 @@ private:
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(yarn::module& m) { update_extensible(m); }
-    void operator()(yarn::concept& c) { update_extensible_and_stateful(c); }
-    void operator()(yarn::builtin& b) { update_extensible(b); }
-    void operator()(yarn::enumeration& e);
-    void operator()(yarn::primitive& p) { update_extensible(p); }
-    void operator()(yarn::object& o) { update_extensible_and_stateful(o); }
-    void operator()(yarn::exception& e) { update_extensible(e); }
-    void operator()(yarn::visitor& v) { update_extensible(v); }
+    void operator()(meta_model::element&) { }
+    void operator()(meta_model::module& m) { update_extensible(m); }
+    void operator()(meta_model::concept& c) {
+        update_extensible_and_stateful(c);
+    }
+    void operator()(meta_model::builtin& b) { update_extensible(b); }
+    void operator()(meta_model::enumeration& e);
+    void operator()(meta_model::primitive& p) { update_extensible(p); }
+    void operator()(meta_model::object& o) {
+        update_extensible_and_stateful(o);
+    }
+    void operator()(meta_model::exception& e) { update_extensible(e); }
+    void operator()(meta_model::visitor& v) { update_extensible(v); }
 
 private:
-    const yarn::name model_name_;
+    const meta_model::name model_name_;
     const std::unordered_map<std::string, annotations::annotation_group>&
     annotation_groups_;
 };
 
-void annotation_updater::operator()(yarn::enumeration& e) {
+void annotation_updater::operator()(meta_model::enumeration& e) {
     const auto id(e.name().id());
     BOOST_LOG_SEV(lg, debug) << "Processing element: " << id;
 
@@ -204,12 +208,13 @@ void annotation_updater::operator()(yarn::enumeration& e) {
     }
 }
 
-annotation_updater::annotation_updater(const yarn::name& model_name,
+annotation_updater::annotation_updater(const meta_model::name& model_name,
     const std::unordered_map<std::string, annotations::annotation_group>&
     annotation_groups) : model_name_(model_name),
                          annotation_groups_(annotation_groups) {}
 
-void annotations_transform::update_scribble_groups(intermediate_model& im) {
+void annotations_transform::
+update_scribble_groups(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Updating scribble groups.";
 
     /*
@@ -217,7 +222,7 @@ void annotations_transform::update_scribble_groups(intermediate_model& im) {
      * effect the stereotypes.
      */
     scribble_updater u(im.scribble_groups());
-    yarn::elements_traversal(im, u);
+    meta_model::elements_traversal(im, u);
 
     BOOST_LOG_SEV(lg, debug) << "Updated scribble groups. Result: "
                              << im.scribble_groups();
@@ -225,7 +230,7 @@ void annotations_transform::update_scribble_groups(intermediate_model& im) {
 
 void annotations_transform::
 update_annotations(const annotations::annotation_groups_factory& agf,
-    intermediate_model& im) {
+    meta_model::intermediate_model& im) {
 
     /*
      * We first call the annotations group factory to convert our
@@ -238,11 +243,11 @@ update_annotations(const annotations::annotation_groups_factory& agf,
      * the yarn elements that own them with their annotations.
      */
     annotation_updater u(im.name(), annotation_groups);
-    yarn::elements_traversal(im, u);
+    meta_model::elements_traversal(im, u);
 }
 
 void annotations_transform::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
 
     BOOST_LOG_SEV(lg, debug) << "Starting annotations expansion for model: "
                              << im.name().id();
diff --git a/projects/yarn/src/types/transforms/associations_transform.cpp b/projects/yarn/src/types/transforms/associations_transform.cpp
index 8c8ea46bc..4f6ab29d7 100644
--- a/projects/yarn/src/types/transforms/associations_transform.cpp
+++ b/projects/yarn/src/types/transforms/associations_transform.cpp
@@ -24,7 +24,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/associations_transform.hpp"
 
@@ -39,8 +39,9 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-void associations_transform::remove_duplicates(std::list<name>& names,
-    std::unordered_set<name> processed) {
+void associations_transform::remove_duplicates(
+    std::list<meta_model::name>& names,
+    std::unordered_set<meta_model::name> processed) {
     BOOST_LOG_SEV(lg, debug) << "Removing duplicates from list. Original size: "
                              << names.size() << ". Processed starts with size: "
                              << processed.size();
@@ -61,8 +62,9 @@ void associations_transform::remove_duplicates(std::list<name>& names,
                              << names.size();
 }
 
-void associations_transform::walk_name_tree(
-    const intermediate_model& im, object& o, const name_tree& nt,
+void associations_transform::
+walk_name_tree(const meta_model::intermediate_model& im, meta_model::object& o,
+    const meta_model::name_tree& nt,
     const bool inherit_opaqueness_from_parent) {
 
     const auto n(nt.current());
@@ -78,7 +80,7 @@ void associations_transform::walk_name_tree(
      * keys.
      */
     bool is_first(true);
-    const auto ac(object_types::associative_container);
+    const auto ac(meta_model::object_types::associative_container);
     const auto i(im.objects().find(n.id()));
     const auto is_associative_container(i != im.objects().end() &&
         i->second.object_type() == ac);
@@ -93,7 +95,7 @@ void associations_transform::walk_name_tree(
 }
 
 void associations_transform::
-expand_object(const intermediate_model& im, object& o) {
+expand_object(const meta_model::intermediate_model& im, meta_model::object& o) {
     BOOST_LOG_SEV(lg, debug) << "Expand object: " << o.name().id();
 
     for (const auto& p : o.local_attributes()) {
@@ -101,7 +103,7 @@ expand_object(const intermediate_model& im, object& o) {
         walk_name_tree(im, o, nt, false/*inherit_opaqueness_from_parent*/);
     }
 
-    std::unordered_set<name> transparent_associations;
+    std::unordered_set<meta_model::name> transparent_associations;
     if (!o.transparent_associations().empty()) {
         remove_duplicates(o.transparent_associations());
         for (const auto n : o.transparent_associations())
@@ -120,7 +122,7 @@ expand_object(const intermediate_model& im, object& o) {
         remove_duplicates(o.associative_container_keys());
 }
 
-void associations_transform::transform(intermediate_model& im) {
+void associations_transform::transform(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding objects. Total objects: "
                              << im.objects().size();
 
diff --git a/projects/yarn/src/types/transforms/attributes_transform.cpp b/projects/yarn/src/types/transforms/attributes_transform.cpp
index 3558e9048..df2656209 100644
--- a/projects/yarn/src/types/transforms/attributes_transform.cpp
+++ b/projects/yarn/src/types/transforms/attributes_transform.cpp
@@ -26,7 +26,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/attributes_transform.hpp"
@@ -47,8 +47,8 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-object& attributes_transform::
-find_object(const name& n, intermediate_model& im) {
+meta_model::object& attributes_transform::
+find_object(const meta_model::name& n, meta_model::intermediate_model& im) {
     const auto id(n.id());
     auto i(im.objects().find(id));
     if (i == im.objects().end()) {
@@ -58,8 +58,8 @@ find_object(const name& n, intermediate_model& im) {
     return i->second;
 }
 
-concept& attributes_transform::
-find_concept(const name& n, intermediate_model& im) {
+meta_model::concept& attributes_transform::
+find_concept(const meta_model::name& n, meta_model::intermediate_model& im) {
     const auto& id(n.id());
     auto i(im.concepts().find(id));
     if (i == im.concepts().end()) {
@@ -69,7 +69,8 @@ find_concept(const name& n, intermediate_model& im) {
     return i->second;
 }
 
-void attributes_transform::expand_object(object& o, intermediate_model& im,
+void attributes_transform::expand_object(meta_model::object& o,
+    meta_model::intermediate_model& im,
     std::unordered_set<std::string>& processed_ids) {
     const auto id(o.name().id());
     BOOST_LOG_SEV(lg, debug) << "Expanding object: " << id;
@@ -95,7 +96,7 @@ void attributes_transform::expand_object(object& o, intermediate_model& im,
      * changes from rippling through, but there is no evidence that
      * this order is more effective than other alternatives.
      */
-    std::list<attribute> concept_attributes;
+    std::list<meta_model::attribute> concept_attributes;
     for (const auto& n : o.modeled_concepts()) {
         auto& c(find_concept(n, im));
         const auto& p(c.local_attributes());
@@ -162,7 +163,7 @@ void attributes_transform::expand_object(object& o, intermediate_model& im,
     processed_ids.insert(id);
 }
 
-void attributes_transform::expand_objects(intermediate_model& im) {
+void attributes_transform::expand_objects(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding objects: " << im.objects().size();
 
     std::unordered_set<std::string> processed_ids;
@@ -172,7 +173,8 @@ void attributes_transform::expand_objects(intermediate_model& im) {
     }
 }
 
-void attributes_transform::expand_concept(concept& c, intermediate_model& im,
+void attributes_transform::expand_concept(meta_model::concept& c,
+    meta_model::intermediate_model& im,
     std::unordered_set<std::string>& processed_ids) {
     const auto id(c.name().id());
     BOOST_LOG_SEV(lg, debug) << "Expanding concept: " << id;
@@ -211,7 +213,7 @@ void attributes_transform::expand_concept(concept& c, intermediate_model& im,
     processed_ids.insert(id);
 }
 
-void attributes_transform::expand_concepts(intermediate_model& im) {
+void attributes_transform::expand_concepts(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding concepts: " << im.concepts().size();
 
     std::unordered_set<std::string> processed_ids;
@@ -221,7 +223,7 @@ void attributes_transform::expand_concepts(intermediate_model& im) {
     }
 }
 
-void attributes_transform::transform(intermediate_model& im) {
+void attributes_transform::transform(meta_model::intermediate_model& im) {
     expand_concepts(im);
     expand_objects(im);
 }
diff --git a/projects/yarn/src/types/transforms/concepts_transform.cpp b/projects/yarn/src/types/transforms/concepts_transform.cpp
index 9f7755a38..84389c05a 100644
--- a/projects/yarn/src/types/transforms/concepts_transform.cpp
+++ b/projects/yarn/src/types/transforms/concepts_transform.cpp
@@ -26,7 +26,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/concepts_transform.hpp"
 
@@ -45,6 +45,8 @@ const std::string concept_not_found("Concept not found in concept container: ");
 namespace dogen {
 namespace yarn {
 
+namespace meta_model {
+
 /**
  * @brief Add comparable support for names.
  *
@@ -55,9 +57,12 @@ inline bool operator<(const name& lhs, const name& rhs) {
     return lhs.id() < rhs.id();
 }
 
+}
+
 namespace transforms {
 
-object& concepts_transform::find_object(const name& n, intermediate_model& im) {
+meta_model::object& concepts_transform::
+find_object(const meta_model::name& n, meta_model::intermediate_model& im) {
     auto i(im.objects().find(n.id()));
     if (i == im.objects().end()) {
         BOOST_LOG_SEV(lg, error) << object_not_found << n.id();
@@ -66,7 +71,8 @@ object& concepts_transform::find_object(const name& n, intermediate_model& im) {
     return i->second;
 }
 
-concept& concepts_transform::find_concept(const name& n, intermediate_model& im) {
+meta_model::concept& concepts_transform::
+find_concept(const meta_model::name& n, meta_model::intermediate_model& im) {
     auto i(im.concepts().find(n.id()));
     if (i == im.concepts().end()) {
         BOOST_LOG_SEV(lg, error) << concept_not_found << n.id();
@@ -75,8 +81,8 @@ concept& concepts_transform::find_concept(const name& n, intermediate_model& im)
     return i->second;
 }
 
-void concepts_transform::remove_duplicates(std::list<name>& names) {
-    std::unordered_set<name> processed;
+void concepts_transform::remove_duplicates(std::list<meta_model::name>& names) {
+    std::unordered_set<meta_model::name> processed;
 
     BOOST_LOG_SEV(lg, debug) << "Removing duplicates from list. Original size: "
                              << names.size();
@@ -97,8 +103,9 @@ void concepts_transform::remove_duplicates(std::list<name>& names) {
                              << names.size();
 }
 
-void concepts_transform::expand_object(object& o, intermediate_model& im,
-    std::unordered_set<name>& processed_names) {
+void concepts_transform::
+expand_object(meta_model::object& o, meta_model::intermediate_model& im,
+    std::unordered_set<meta_model::name>& processed_names) {
     BOOST_LOG_SEV(lg, debug) << "Expanding object: " << o.name().id();
 
     if (processed_names.find(o.name()) != processed_names.end()) {
@@ -117,7 +124,7 @@ void concepts_transform::expand_object(object& o, intermediate_model& im,
      * including their parents and so on. We can rely on the concepts'
      * @e refines container for this.
      */
-    std::list<name> expanded_refines;
+    std::list<meta_model::name> expanded_refines;
     for (auto& n : o.modeled_concepts()) {
         auto& c(find_concept(n, im));
         expanded_refines.push_back(n);
@@ -147,10 +154,10 @@ void concepts_transform::expand_object(object& o, intermediate_model& im,
      */
     BOOST_LOG_SEV(lg, debug) << "Object has a parent, computing set difference.";
 
-    std::set<name> our_concepts;
+    std::set<meta_model::name> our_concepts;
     our_concepts.insert(expanded_refines.begin(), expanded_refines.end());
 
-    std::set<name> their_concepts;
+    std::set<meta_model::name> their_concepts;
     const auto& n(o.parents().front());
     auto& parent(find_object(n, im));
     expand_object(parent, im, processed_names);
@@ -163,7 +170,7 @@ void concepts_transform::expand_object(object& o, intermediate_model& im,
      * We want to only model concepts which have not yet been modeled
      * by any of our parents.
      */
-    std::set<name> result;
+    std::set<meta_model::name> result;
     std::set_difference(our_concepts.begin(), our_concepts.end(),
         their_concepts.begin(), their_concepts.end(),
         std::inserter(result, result.end()));
@@ -181,18 +188,19 @@ void concepts_transform::expand_object(object& o, intermediate_model& im,
     BOOST_LOG_SEV(lg, debug) << "Finished indexing object.";
 }
 
-void concepts_transform::expand_objects(intermediate_model& im) {
+void concepts_transform::expand_objects(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding objects: " << im.objects().size();
 
-    std::unordered_set<name> processed_names;
+    std::unordered_set<meta_model::name> processed_names;
     for (auto& pair : im.objects()) {
         auto& o(pair.second);
         expand_object(o, im, processed_names);
     }
 }
 
-void concepts_transform::expand_concept(concept& c, intermediate_model& im,
-    std::unordered_set<name>& processed_names) {
+void concepts_transform::
+expand_concept(meta_model::concept& c, meta_model::intermediate_model& im,
+    std::unordered_set<meta_model::name>& processed_names) {
     BOOST_LOG_SEV(lg, debug) << "Expand concept: " << c.name().id();
 
     if (processed_names.find(c.name()) != processed_names.end()) {
@@ -206,7 +214,7 @@ void concepts_transform::expand_concept(concept& c, intermediate_model& im,
         return;
     }
 
-    std::list<name> expanded_refines;
+    std::list<meta_model::name> expanded_refines;
     for (auto& n : c.refines()) {
         auto& parent(find_concept(n, im));
         expand_concept(parent, im, processed_names);
@@ -221,17 +229,17 @@ void concepts_transform::expand_concept(concept& c, intermediate_model& im,
     processed_names.insert(c.name());
 }
 
-void concepts_transform::expand_concepts(intermediate_model& im) {
+void concepts_transform::expand_concepts(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Indexing concepts: " << im.concepts().size();
 
-    std::unordered_set<name> processed_names;
+    std::unordered_set<meta_model::name> processed_names;
     for (auto& pair : im.concepts()) {
         auto& c(pair.second);
         expand_concept(c, im, processed_names);
     }
 }
 
-void concepts_transform::transform(intermediate_model& im) {
+void concepts_transform::transform(meta_model::intermediate_model& im) {
     /*
      * We must expand concepts before we expand objects as we rely on
      * the expanded attributes.
diff --git a/projects/yarn/src/types/transforms/containment_transform.cpp b/projects/yarn/src/types/transforms/containment_transform.cpp
index 5bee1eca5..e5d01c750 100644
--- a/projects/yarn/src/types/transforms/containment_transform.cpp
+++ b/projects/yarn/src/types/transforms/containment_transform.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/containment_transform.hpp"
@@ -42,7 +42,8 @@ namespace transforms {
 
 template<typename AssociativeContainerOfContainable>
 inline void add_containing_module_to_non_contained_entities(
-    const name& container_name, AssociativeContainerOfContainable& c) {
+    const meta_model::name& container_name,
+    AssociativeContainerOfContainable& c) {
     for (auto& pair : c) {
         auto& s(pair.second);
         if (!s.contained_by())
@@ -50,8 +51,9 @@ inline void add_containing_module_to_non_contained_entities(
     }
 }
 
-module containment_transform::create_global_module(const origin_types ot) {
-    module r;
+meta_model::module
+containment_transform::create_global_module(const meta_model::origin_types ot) {
+    meta_model::module r;
     r.name().id("<global module>");
     r.origin_type(ot);
     r.documentation(global_module_doc);
@@ -59,7 +61,8 @@ module containment_transform::create_global_module(const origin_types ot) {
     return r;
 }
 
-void containment_transform::inject_global_module(intermediate_model& im) {
+void containment_transform::
+inject_global_module(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Injecting global module for: "
                              << im.name().id();
 
@@ -86,7 +89,7 @@ void containment_transform::inject_global_module(intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Done injecting global module";
 }
 
-void containment_transform::transform(intermediate_model& im) {
+void containment_transform::transform(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding containment for: " << im.name().id();
     inject_global_module(im);
     BOOST_LOG_SEV(lg, debug) << "Finished expanding containment.";
diff --git a/projects/yarn/src/types/transforms/enumerations_transform.cpp b/projects/yarn/src/types/transforms/enumerations_transform.cpp
index 3f2ceeaf6..225200eca 100644
--- a/projects/yarn/src/types/transforms/enumerations_transform.cpp
+++ b/projects/yarn/src/types/transforms/enumerations_transform.cpp
@@ -26,8 +26,8 @@
 #include "dogen/annotations/io/type_io.hpp"
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
-#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/traits.hpp"
@@ -146,7 +146,7 @@ make_type_group(const annotations::type_repository& atrp) {
 }
 
 void enumerations_transform::populate_from_annotations(
-    const enumeration_type_group& tg, enumeration& e) {
+    const enumeration_type_group& tg, meta_model::enumeration& e) {
 
     const auto& a(e.annotation());
     const annotations::entry_selector s(a);
@@ -163,7 +163,7 @@ void enumerations_transform::populate_from_annotations(
 }
 
 void enumerations_transform::populate_from_annotations(
-    const enumerator_type_group& tg, enumerator& e) {
+    const enumerator_type_group& tg, meta_model::enumerator& e) {
     const auto& a(e.annotation());
     const annotations::entry_selector s(a);
     if (s.has_entry(tg.value)) {
@@ -173,12 +173,13 @@ void enumerations_transform::populate_from_annotations(
     }
 }
 
-name enumerations_transform::obtain_enumeration_default_underlying_element_name(
-    const intermediate_model& im) {
+meta_model::name
+enumerations_transform::obtain_enumeration_default_underlying_element_name(
+    const meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Obtaining default enumeration underlying "
                              << "element name for model: " << im.name().id();
 
-    name r;
+    meta_model::name r;
     bool found(false);
     for (const auto& pair : im.builtins()) {
         const auto b(pair.second);
@@ -209,11 +210,11 @@ name enumerations_transform::obtain_enumeration_default_underlying_element_name(
 }
 
 std::string enumerations_transform::
-obtain_invalid_enumerator_simple_name(const languages l) {
+obtain_invalid_enumerator_simple_name(const meta_model::languages l) {
     switch(l) {
-    case languages::csharp: return csharp_invalid;
-    case languages::cpp: return cpp_invalid;
-    case languages::upsilon: return csharp_invalid;
+    case meta_model::languages::csharp: return csharp_invalid;
+    case meta_model::languages::cpp: return cpp_invalid;
+    case meta_model::languages::upsilon: return csharp_invalid;
     default: {
         const auto s(boost::lexical_cast<std::string>(l));
         BOOST_LOG_SEV(lg, error) << unsupported_language << s;
@@ -221,9 +222,9 @@ obtain_invalid_enumerator_simple_name(const languages l) {
     } }
 }
 
-enumerator enumerations_transform::
-make_invalid_enumerator(const name& n, const languages l) {
-    enumerator r;
+meta_model::enumerator enumerations_transform::make_invalid_enumerator(
+    const meta_model::name& n, const meta_model::languages l) {
+    meta_model::enumerator r;
     r.documentation("Represents an uninitialised enum");
     r.value("0");
 
@@ -235,7 +236,8 @@ make_invalid_enumerator(const name& n, const languages l) {
 }
 
 void enumerations_transform::expand_default_underlying_element(
-    const name& default_underlying_element_name, enumeration& e) {
+    const meta_model::name& default_underlying_element_name,
+    meta_model::enumeration& e) {
     const auto ue(e.underlying_element());
     BOOST_LOG_SEV(lg, debug) << "Underlying type: '" << ue.id() << "'";
 
@@ -248,8 +250,8 @@ void enumerations_transform::expand_default_underlying_element(
 }
 
 void enumerations_transform::expand_enumerators(const enumerator_type_group& tg,
-    const languages l, enumeration& e) {
-    std::vector<enumerator> enumerators;
+    const meta_model::languages l, meta_model::enumeration& e) {
+    std::vector<meta_model::enumerator> enumerators;
 
     if (e.add_invalid_enumerator()) {
         enumerators.reserve(e.enumerators().size() + 1/*invalid*/);
@@ -296,8 +298,8 @@ void enumerations_transform::expand_enumerators(const enumerator_type_group& tg,
     e.enumerators(enumerators);
 }
 
-void
-enumerations_transform::transform(const context& ctx, intermediate_model& im) {
+void enumerations_transform::transform(const context& ctx,
+    meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started transforming enumerations for model: "
                              << im.name().id();
 
diff --git a/projects/yarn/src/types/transforms/exogenous_model_chain.cpp b/projects/yarn/src/types/transforms/exogenous_model_chain.cpp
index ba703be09..bc4362e48 100644
--- a/projects/yarn/src/types/transforms/exogenous_model_chain.cpp
+++ b/projects/yarn/src/types/transforms/exogenous_model_chain.cpp
@@ -42,7 +42,7 @@ exogenous_transform_registrar& exogenous_model_chain::registrar() {
     return *registrar_;
 }
 
-intermediate_model
+meta_model::intermediate_model
 exogenous_model_chain::transform(const boost::filesystem::path& p) {
     BOOST_LOG_SEV(lg, debug) << "Transforming exogenous model: "
                              << p.generic_string();
@@ -58,8 +58,8 @@ exogenous_model_chain::transform(const boost::filesystem::path& p) {
     return r;
 }
 
-void exogenous_model_chain::
-transform(const intermediate_model& im, const boost::filesystem::path& p) {
+void exogenous_model_chain::transform(const meta_model::intermediate_model& im,
+    const boost::filesystem::path& p) {
     BOOST_LOG_SEV(lg, debug) << "Transforming yarn model: "
                              << im.name().id();
 
diff --git a/projects/yarn/src/types/transforms/external_transforms_chain.cpp b/projects/yarn/src/types/transforms/external_transforms_chain.cpp
index 6ae6ace4d..e5652c528 100644
--- a/projects/yarn/src/types/transforms/external_transforms_chain.cpp
+++ b/projects/yarn/src/types/transforms/external_transforms_chain.cpp
@@ -64,7 +64,7 @@ external_transforms_chain::create_decoration_properties_factory(
 }
 
 void external_transforms_chain::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
     const auto id(im.name().id());
     BOOST_LOG_SEV(lg, debug) << "Performing external transforms on: " << id;
 
diff --git a/projects/yarn/src/types/transforms/final_model_transform.cpp b/projects/yarn/src/types/transforms/final_model_transform.cpp
index 133de6586..243276874 100644
--- a/projects/yarn/src/types/transforms/final_model_transform.cpp
+++ b/projects/yarn/src/types/transforms/final_model_transform.cpp
@@ -23,9 +23,9 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/list_io.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
-#include "dogen/yarn/types/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/transforms/final_model_transform.hpp"
 
 namespace {
@@ -47,7 +47,7 @@ namespace {
 
 class model_populator {
 public:
-    explicit model_populator(model& m) : result_(m) { }
+    explicit model_populator(meta_model::model& m) : result_(m) { }
 
 private:
     void ensure_not_yet_processed(const std::string& id) {
@@ -59,7 +59,7 @@ private:
         }
     }
 
-    void add_element(boost::shared_ptr<element> e) {
+    void add_element(boost::shared_ptr<meta_model::element> e) {
         /*
          * Element extensions share the same id as the original
          * element, so they are not considered duplicates. All other
@@ -78,37 +78,37 @@ private:
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(const yarn::module& m) {
+    void operator()(meta_model::element&) { }
+    void operator()(const meta_model::module& m) {
         result_.module_ids().insert(m.name().id());
         add(m);
     }
-    void operator()(const yarn::concept& c) { add(c); }
-    void operator()(const yarn::builtin& b) { add(b); }
-    void operator()(const yarn::enumeration& e) { add(e); }
-    void operator()(const yarn::primitive& p) { add(p); }
-    void operator()(const yarn::object& o) { add(o); }
-    void operator()(const yarn::exception& e) { add(e); }
-    void operator()(const yarn::visitor& v) { add(v); }
+    void operator()(const meta_model::concept& c) { add(c); }
+    void operator()(const meta_model::builtin& b) { add(b); }
+    void operator()(const meta_model::enumeration& e) { add(e); }
+    void operator()(const meta_model::primitive& p) { add(p); }
+    void operator()(const meta_model::object& o) { add(o); }
+    void operator()(const meta_model::exception& e) { add(e); }
+    void operator()(const meta_model::visitor& v) { add(v); }
 
 public:
-    void add(const std::list<boost::shared_ptr<element>>& ie) {
+    void add(const std::list<boost::shared_ptr<meta_model::element>>& ie) {
         for (const auto& e : ie)
             add_element(e);
     }
 
 public:
-    const model& result() const { return result_; }
+    const meta_model::model& result() const { return result_; }
 
 private:
-    model& result_;
+    meta_model::model& result_;
     std::unordered_set<std::string> processed_ids_;
 };
 
 }
 
-std::size_t
-final_model_transform::compute_total_size(const intermediate_model& im) {
+std::size_t final_model_transform::
+compute_total_size(const meta_model::intermediate_model& im) {
     std::size_t r;
     r = im.modules().size();
     r += im.concepts().size();
@@ -122,8 +122,9 @@ final_model_transform::compute_total_size(const intermediate_model& im) {
     return r;
 }
 
-model final_model_transform::transform(const intermediate_model& im) {
-    model r;
+meta_model::model
+final_model_transform::transform(const meta_model::intermediate_model& im) {
+    meta_model::model r;
     r.name(im.name());
     r.input_language(im.input_language());
     if (im.output_languages().size() != 1) {
@@ -144,7 +145,7 @@ model final_model_transform::transform(const intermediate_model& im) {
     r.elements().reserve(size);
 
     model_populator mp(r);
-    yarn::elements_traversal(im, mp);
+    meta_model::elements_traversal(im, mp);
     mp.add(im.injected_elements());
 
     return r;
diff --git a/projects/yarn/src/types/transforms/generability_transform.cpp b/projects/yarn/src/types/transforms/generability_transform.cpp
index 513c10137..b85dc9522 100644
--- a/projects/yarn/src/types/transforms/generability_transform.cpp
+++ b/projects/yarn/src/types/transforms/generability_transform.cpp
@@ -24,13 +24,13 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-bool generability_transform::is_generatable(const element& e) {
+bool generability_transform::is_generatable(const meta_model::element& e) {
     const auto ot(e.origin_type());
-    return ot == origin_types::target;
+    return ot == meta_model::origin_types::target;
 }
 
 bool generability_transform::
-has_generatable_types(const intermediate_model& im) {
+has_generatable_types(const meta_model::intermediate_model& im) {
     for (const auto pair : im.objects()) {
         if (is_generatable(pair.second))
             return true;
@@ -69,7 +69,7 @@ has_generatable_types(const intermediate_model& im) {
     return false;
 }
 
-void generability_transform::transform(intermediate_model& im) {
+void generability_transform::transform(meta_model::intermediate_model& im) {
     im.has_generatable_types(has_generatable_types(im));
 }
 
diff --git a/projects/yarn/src/types/transforms/generalization_transform.cpp b/projects/yarn/src/types/transforms/generalization_transform.cpp
index 09b3b5544..e4bd34d37 100644
--- a/projects/yarn/src/types/transforms/generalization_transform.cpp
+++ b/projects/yarn/src/types/transforms/generalization_transform.cpp
@@ -24,7 +24,7 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/traits.hpp"
 #include "dogen/yarn/types/helpers/resolver.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
@@ -45,10 +45,14 @@ const std::string incompatible_is_final(
 namespace dogen {
 namespace yarn {
 
+namespace meta_model {
+
 inline bool operator<(const name& lhs, const name& rhs) {
     return lhs.id() < rhs.id();
 }
 
+}
+
 namespace transforms {
 
 generalization_transform::type_group generalization_transform::make_type_group(
@@ -73,7 +77,7 @@ generalization_transform::make_is_final(const type_group& tg,
 
 std::unordered_set<std::string>
 generalization_transform::update_and_collect_parent_ids(
-    const helpers::indices& idx, intermediate_model& im) {
+    const helpers::indices& idx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Updating and collecting parent ids.";
 
     using helpers::resolver;
@@ -95,7 +99,7 @@ generalization_transform::update_and_collect_parent_ids(
          * generalization, which needs resolution. So we must resolve
          * here.
          */
-        std::list<name> resolved_parents;
+        std::list<meta_model::name> resolved_parents;
         for (const auto& pn : o.parents()) {
             const auto resolved_pn(resolver::resolve(im, idx, o.name(), pn));
             r.insert(resolved_pn.id());
@@ -110,8 +114,8 @@ generalization_transform::update_and_collect_parent_ids(
 }
 
 void generalization_transform::populate_properties_up_the_generalization_tree(
-    const type_group& tg, const yarn::name& leaf,
-    intermediate_model& im, yarn::object& o) {
+    const type_group& tg, const meta_model::name& leaf,
+    meta_model::intermediate_model& im, meta_model::object& o) {
 
     /*
      * Add the leaf to all nodes of the tree except for the leaf node
@@ -169,7 +173,7 @@ void generalization_transform::populate_properties_up_the_generalization_tree(
 void generalization_transform::
 populate_generalizable_properties(const type_group& tg,
     const std::unordered_set<std::string>& parent_ids,
-    intermediate_model& im) {
+    meta_model::intermediate_model& im) {
 
     for (auto& pair : im.objects()) {
         const auto& id(pair.first);
@@ -230,15 +234,15 @@ populate_generalizable_properties(const type_group& tg,
     }
 }
 
-void generalization_transform::sort_leaves(intermediate_model& im) {
+void generalization_transform::sort_leaves(meta_model::intermediate_model& im) {
     for (auto& pair : im.objects()) {
         auto& o(pair.second);
         o.leaves().sort();
     }
 }
 
-void generalization_transform::transform(
-    const context& ctx, const helpers::indices& idx, intermediate_model& im) {
+void generalization_transform::transform(const context& ctx,
+    const helpers::indices& idx, meta_model::intermediate_model& im) {
     const auto parent_ids(update_and_collect_parent_ids(idx, im));
 
     const auto tg(make_type_group(ctx.type_repository()));
diff --git a/projects/yarn/src/types/transforms/initial_target_chain.cpp b/projects/yarn/src/types/transforms/initial_target_chain.cpp
index e680bc395..0cb6f1c60 100644
--- a/projects/yarn/src/types/transforms/initial_target_chain.cpp
+++ b/projects/yarn/src/types/transforms/initial_target_chain.cpp
@@ -51,7 +51,8 @@ ensure_target_path_is_absolute(const boost::filesystem::path& p) {
     BOOST_THROW_EXCEPTION(transformation_error(non_absolute_target + gs));
 }
 
-intermediate_model initial_target_chain::transform(const context& ctx) {
+meta_model::intermediate_model
+initial_target_chain::transform(const context& ctx) {
     BOOST_LOG_SEV(lg, debug) << "Executing the initial target chain.";
 
     const auto tp(ctx.options().target());
@@ -68,7 +69,7 @@ intermediate_model initial_target_chain::transform(const context& ctx) {
      * further transforms can be applied such as the origin
      * transforms.
      */
-    r.origin_type(origin_types::target);
+    r.origin_type(meta_model::origin_types::target);
 
     /*
      * Finally, we apply all of the pre-processing transforms to the
diff --git a/projects/yarn/src/types/transforms/language_transform.cpp b/projects/yarn/src/types/transforms/language_transform.cpp
index 416ca82f2..1ece011d9 100644
--- a/projects/yarn/src/types/transforms/language_transform.cpp
+++ b/projects/yarn/src/types/transforms/language_transform.cpp
@@ -24,7 +24,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/language_transform.hpp"
@@ -48,7 +48,8 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-languages language_transform::to_language(const std::string& s) {
+meta_model::languages language_transform::to_language(const std::string& s) {
+    using meta_model::languages;
     if (s == cpp_language)
         return languages::cpp;
     else if (s == csharp_language)
@@ -71,19 +72,19 @@ make_type_group(const annotations::type_repository& atrp) {
     return r;
 }
 
-languages language_transform::make_input_language(const type_group& tg,
+meta_model::languages language_transform::make_input_language(const type_group& tg,
     const annotations::annotation& a) {
     const annotations::entry_selector s(a);
     const auto lang_str(s.get_text_content_or_default(tg.input_language));
     return to_language(lang_str);
 }
 
-std::list<languages>
+std::list<meta_model::languages>
 language_transform::make_output_languages(const type_group& tg,
     const annotations::annotation& a) {
     const annotations::entry_selector s(a);
 
-    std::list<languages> r;
+    std::list<meta_model::languages> r;
     if (!s.has_entry(tg.output_language))
         return r;
 
@@ -94,11 +95,13 @@ language_transform::make_output_languages(const type_group& tg,
     return r;
 }
 
-void language_transform::transform(const context& ctx, intermediate_model& im) {
+void language_transform::
+transform(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding language. Model: " << im.name().id();
 
     const auto tg(make_type_group(ctx.type_repository()));
     const auto ra(im.root_module().annotation());
+    using meta_model::languages;
     const bool has_input_language(im.input_language() != languages::invalid);
     if (!has_input_language) {
         const auto il(make_input_language(tg, ra));
diff --git a/projects/yarn/src/types/transforms/mapping_transform.cpp b/projects/yarn/src/types/transforms/mapping_transform.cpp
index e62117031..1068cc7ce 100644
--- a/projects/yarn/src/types/transforms/mapping_transform.cpp
+++ b/projects/yarn/src/types/transforms/mapping_transform.cpp
@@ -26,12 +26,13 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-bool mapping_transform::is_mappable(const languages from, const languages to) {
+bool mapping_transform::is_mappable(const meta_model::languages from,
+    const meta_model::languages to) {
     return helpers::mapper::is_mappable(from, to);
 }
 
-intermediate_model mapping_transform::transform(const context& ctx,
-    const intermediate_model& src, const languages to) {
+meta_model::intermediate_model mapping_transform::transform(const context& ctx,
+    const meta_model::intermediate_model& src, const meta_model::languages to) {
 
     const helpers::mapper mp(ctx.mapping_repository());
     return mp.map(src.input_language(), to, src);
diff --git a/projects/yarn/src/types/transforms/merge_transform.cpp b/projects/yarn/src/types/transforms/merge_transform.cpp
index 70b1b03e4..94c77e544 100644
--- a/projects/yarn/src/types/transforms/merge_transform.cpp
+++ b/projects/yarn/src/types/transforms/merge_transform.cpp
@@ -20,7 +20,7 @@
  */
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/merge_transform.hpp"
 
 namespace {
@@ -44,8 +44,8 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-void merge_transform::merge(const intermediate_model& src,
-    intermediate_model& dst) {
+void merge_transform::merge(const meta_model::intermediate_model& src,
+    meta_model::intermediate_model& dst) {
 
     /*
      * Skip any reference models for which the input language does
@@ -89,9 +89,9 @@ void merge_transform::merge(const intermediate_model& src,
     dst.references().insert(p);
 }
 
-intermediate_model
-merge_transform::transform(const intermediate_model& target,
-    const std::list<intermediate_model>& refs) {
+meta_model::intermediate_model
+merge_transform::transform(const meta_model::intermediate_model& target,
+    const std::list<meta_model::intermediate_model>& refs) {
     BOOST_LOG_SEV(lg, debug) << "Executing the merge transform.";
 
     /*
@@ -99,7 +99,7 @@ merge_transform::transform(const intermediate_model& target,
      * initialises all of the relevant parts of the merged model such
      * as leaves etc as well as all of the element containers.
      */
-    intermediate_model r(target);
+    auto r(target);
 
     /*
      * Now we push all of the references into the merged model.
diff --git a/projects/yarn/src/types/transforms/model_assembly_chain.cpp b/projects/yarn/src/types/transforms/model_assembly_chain.cpp
index 02bce8d2e..dfa97d35f 100644
--- a/projects/yarn/src/types/transforms/model_assembly_chain.cpp
+++ b/projects/yarn/src/types/transforms/model_assembly_chain.cpp
@@ -37,9 +37,10 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-intermediate_model model_assembly_chain::obtain_merged_model(const context& ctx,
-    const languages l, const intermediate_model& target,
-    const std::list<intermediate_model>& refs) {
+meta_model::intermediate_model
+model_assembly_chain::obtain_merged_model(const context& ctx,
+    const meta_model::languages l, const meta_model::intermediate_model& target,
+    const std::list<meta_model::intermediate_model>& refs) {
 
     /*
      * Perform all the language mapping required for target and
@@ -47,7 +48,7 @@ intermediate_model model_assembly_chain::obtain_merged_model(const context& ctx,
      */
     const auto mapped_target(mapping_transform::transform(ctx, target, l));
 
-    std::list<intermediate_model> mapped_refs;
+    std::list<meta_model::intermediate_model> mapped_refs;
     for (const auto& ref : refs) {
         /*
          * We have all references for all the output languages
@@ -70,9 +71,9 @@ intermediate_model model_assembly_chain::obtain_merged_model(const context& ctx,
     return merge_transform::transform(mapped_target, mapped_refs);
 }
 
-model model_assembly_chain::transform(const context& ctx, const languages l,
-    const intermediate_model& target,
-    const std::list<intermediate_model>& refs) {
+meta_model::model model_assembly_chain::transform(const context& ctx,
+    const meta_model::languages l, const meta_model::intermediate_model& target,
+    const std::list<meta_model::intermediate_model>& refs) {
 
     /*
      * First we obtain the merged (and mapped) model.
diff --git a/projects/yarn/src/types/transforms/model_generation_chain.cpp b/projects/yarn/src/types/transforms/model_generation_chain.cpp
index 6c192a11c..eba8ed4a0 100644
--- a/projects/yarn/src/types/transforms/model_generation_chain.cpp
+++ b/projects/yarn/src/types/transforms/model_generation_chain.cpp
@@ -26,7 +26,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/initial_target_chain.hpp"
 #include "dogen/yarn/types/transforms/references_chain.hpp"
@@ -44,7 +44,7 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-std::list<model>
+std::list<meta_model::model>
 model_generation_chain::transform(const context& ctx) {
     /*
      * Obtain the initial target, given the user options. The initial
@@ -76,7 +76,7 @@ model_generation_chain::transform(const context& ctx) {
      * Execute the assembly chain for each of the requested output
      * languages.
      */
-    std::list<model> r;
+    std::list<meta_model::model> r;
     for (const auto ol : target.output_languages())
         r.push_back(model_assembly_chain::transform(ctx, ol, target, refs));
 
diff --git a/projects/yarn/src/types/transforms/modules_transform.cpp b/projects/yarn/src/types/transforms/modules_transform.cpp
index c6a5e04df..388e56fdf 100644
--- a/projects/yarn/src/types/transforms/modules_transform.cpp
+++ b/projects/yarn/src/types/transforms/modules_transform.cpp
@@ -21,7 +21,7 @@
 #include <boost/throw_exception.hpp>
 #include <boost/algorithm/string.hpp>
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/types/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
@@ -46,19 +46,19 @@ namespace {
 
 class internal_modules_builder {
 private:
-    void process(const name& n);
+    void process(const meta_model::name& n);
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(yarn::module& m) { process(m.name()); }
-    void operator()(yarn::concept& c) { process(c.name()); }
-    void operator()(yarn::builtin& b) { process(b.name()); }
-    void operator()(yarn::enumeration& e) { process(e.name()); }
-    void operator()(yarn::primitive& p) { process(p.name()); }
-    void operator()(yarn::object& o) { process(o.name()); }
-    void operator()(yarn::exception& e) { process(e.name()); }
-    void operator()(yarn::visitor& v) { process(v.name()); }
+    void operator()(meta_model::element&) { }
+    void operator()(meta_model::module& m) { process(m.name()); }
+    void operator()(meta_model::concept& c) { process(c.name()); }
+    void operator()(meta_model::builtin& b) { process(b.name()); }
+    void operator()(meta_model::enumeration& e) { process(e.name()); }
+    void operator()(meta_model::primitive& p) { process(p.name()); }
+    void operator()(meta_model::object& o) { process(o.name()); }
+    void operator()(meta_model::exception& e) { process(e.name()); }
+    void operator()(meta_model::visitor& v) { process(v.name()); }
 
 public:
     const std::unordered_map<std::string, std::list<std::string>>&
@@ -69,7 +69,7 @@ private:
         distinct_internal_moduless_;
 };
 
-void internal_modules_builder::process(const name& n) {
+void internal_modules_builder::process(const meta_model::name& n) {
     auto imp(n.location().internal_modules());
     while (!imp.empty()) {
         const std::string key(boost::join(imp, separator));
@@ -85,29 +85,31 @@ const std::unordered_map<std::string, std::list<std::string>>&
 
 class updater {
 public:
-    updater(intermediate_model& im) : model_(im) { }
+    updater(meta_model::intermediate_model& im) : model_(im) { }
 
 private:
-    boost::optional<name> containing_module(const name& n);
-    void update(element& e);
+    boost::optional<meta_model::name>
+    containing_module(const meta_model::name& n);
+    void update(meta_model::element& e);
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(yarn::module& m) { update(m); }
-    void operator()(yarn::concept& c) { update(c); }
-    void operator()(yarn::builtin& b) { update(b); }
-    void operator()(yarn::enumeration& e) { update(e); }
-    void operator()(yarn::primitive& p) { update(p); }
-    void operator()(yarn::object& o) { update(o); }
-    void operator()(yarn::exception& e) { update(e); }
-    void operator()(yarn::visitor& v) { update(v); }
+    void operator()(meta_model::element&) { }
+    void operator()(meta_model::module& m) { update(m); }
+    void operator()(meta_model::concept& c) { update(c); }
+    void operator()(meta_model::builtin& b) { update(b); }
+    void operator()(meta_model::enumeration& e) { update(e); }
+    void operator()(meta_model::primitive& p) { update(p); }
+    void operator()(meta_model::object& o) { update(o); }
+    void operator()(meta_model::exception& e) { update(e); }
+    void operator()(meta_model::visitor& v) { update(v); }
 
 public:
-    intermediate_model& model_;
+    meta_model::intermediate_model& model_;
 };
 
-boost::optional<name> updater::containing_module(const name& n) {
+boost::optional<meta_model::name>
+updater::containing_module(const meta_model::name& n) {
     BOOST_LOG_SEV(lg, debug) << "Finding containing module for: "
                              << n.id();
 
@@ -116,7 +118,7 @@ boost::optional<name> updater::containing_module(const name& n) {
         BOOST_LOG_SEV(lg, debug) << "Type is in global module so, it has"
                                  << " no containing module yet. Type: "
                                  << n.id();
-        return boost::optional<name>();
+        return boost::optional<meta_model::name>();
     }
 
     const bool at_model_level(n.location().internal_modules().empty());
@@ -125,7 +127,7 @@ boost::optional<name> updater::containing_module(const name& n) {
         BOOST_LOG_SEV(lg, debug) << "Type is a model module, so containing "
                                  << "module will be handled later. Type: "
                                  << n.id();
-        return boost::optional<name>();
+        return boost::optional<meta_model::name>();
     }
 
     helpers::name_builder b;
@@ -173,10 +175,10 @@ boost::optional<name> updater::containing_module(const name& n) {
 
     BOOST_LOG_SEV(lg, warn) << "Could not find containing module: "
                             << module_n.id();
-    return boost::optional<name>();
+    return boost::optional<meta_model::name>();
 }
 
-void updater::update(element& e) {
+void updater::update(meta_model::element& e) {
     e.contained_by(containing_module(e.name()));
 
     if (!e.contained_by())
@@ -192,7 +194,8 @@ void updater::update(element& e) {
 
 }
 
-void modules_transform::populate_root_module(intermediate_model& im) {
+void modules_transform::
+populate_root_module(meta_model::intermediate_model& im) {
     const auto i(im.modules().find(im.name().id()));
     if (i == im.modules().end()) {
         const auto id(im.name().id());
@@ -204,9 +207,10 @@ void modules_transform::populate_root_module(intermediate_model& im) {
     im.root_module(i->second);
 }
 
-void modules_transform::create_missing_modules(intermediate_model& im) {
+void modules_transform::
+create_missing_modules(meta_model::intermediate_model& im) {
     internal_modules_builder b;
-    yarn::elements_traversal(im, b);
+    meta_model::elements_traversal(im, b);
 
     for (const auto& pair : b.result()) {
         helpers::name_factory f;
@@ -214,7 +218,7 @@ void modules_transform::create_missing_modules(intermediate_model& im) {
         const auto n(f.build_module_name(im.name(), ipp));
         const auto i(im.modules().find(n.id()));
         if (i == im.modules().end()) {
-            yarn::module mod;
+            meta_model::module mod;
             mod.name(n);
             mod.origin_type(im.origin_type());
             im.modules().insert(std::make_pair(n.id(), mod));
@@ -222,12 +226,13 @@ void modules_transform::create_missing_modules(intermediate_model& im) {
     }
 }
 
-void modules_transform::expand_containing_module(intermediate_model& im) {
+void modules_transform::
+expand_containing_module(meta_model::intermediate_model& im) {
     updater u(im);
-    yarn::elements_traversal(im, u);
+    meta_model::elements_traversal(im, u);
 }
 
-void modules_transform::transform(intermediate_model& im) {
+void modules_transform::transform(meta_model::intermediate_model& im) {
     populate_root_module(im);
     create_missing_modules(im);
     expand_containing_module(im);
diff --git a/projects/yarn/src/types/transforms/origin_transform.cpp b/projects/yarn/src/types/transforms/origin_transform.cpp
index ba8647031..b37288036 100644
--- a/projects/yarn/src/types/transforms/origin_transform.cpp
+++ b/projects/yarn/src/types/transforms/origin_transform.cpp
@@ -23,7 +23,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/types/elements_traversal.hpp"
+#include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/origin_transform.hpp"
@@ -46,7 +46,7 @@ namespace {
 
 class updater {
 public:
-    explicit updater(const origin_types ot) : origin_types_(ot) {}
+    explicit updater(const meta_model::origin_types ot) : origin_types_(ot) {}
 
 public:
     template<typename DeterminableOrigin>
@@ -54,18 +54,18 @@ public:
 
 public:
     bool include_injected_elements() { return false; }
-    void operator()(yarn::element&) { }
-    void operator()(yarn::module& m) { update(m); }
-    void operator()(yarn::concept& c) { update(c); }
-    void operator()(yarn::builtin& b) { update(b); }
-    void operator()(yarn::enumeration& e) { update(e); }
-    void operator()(yarn::primitive& p) { update(p); }
-    void operator()(yarn::object& o) { update(o); }
-    void operator()(yarn::exception& e) { update(e); }
-    void operator()(yarn::visitor& v) { update(v); }
+    void operator()(meta_model::element&) { }
+    void operator()(meta_model::module& m) { update(m); }
+    void operator()(meta_model::concept& c) { update(c); }
+    void operator()(meta_model::builtin& b) { update(b); }
+    void operator()(meta_model::enumeration& e) { update(e); }
+    void operator()(meta_model::primitive& p) { update(p); }
+    void operator()(meta_model::object& o) { update(o); }
+    void operator()(meta_model::exception& e) { update(e); }
+    void operator()(meta_model::visitor& v) { update(v); }
 
 private:
-    const origin_types origin_types_;
+    const meta_model::origin_types origin_types_;
 };
 
 }
@@ -80,7 +80,7 @@ make_type_group(const annotations::type_repository& atrp) {
 }
 
 bool origin_transform::
-is_proxy_model(const type_group& tg, const intermediate_model& im) {
+is_proxy_model(const type_group& tg, const meta_model::intermediate_model& im) {
     const auto& o(im.root_module().annotation());
     const annotations::entry_selector s(o);
     const bool r(s.get_boolean_content_or_default(tg.is_proxy_model));
@@ -89,9 +89,10 @@ is_proxy_model(const type_group& tg, const intermediate_model& im) {
     return r;
 }
 
-origin_types
-origin_transform::compute_origin_types(const intermediate_model& im,
+meta_model::origin_types
+origin_transform::compute_origin_types(const meta_model::intermediate_model& im,
     const bool is_proxy_model) {
+    using meta_model::origin_types;
     if (is_proxy_model && im.origin_type() == origin_types::target) {
         const auto& id(im.name().id());
         BOOST_LOG_SEV(lg, error) << target_cannot_be_proxy << id;
@@ -107,14 +108,15 @@ origin_transform::compute_origin_types(const intermediate_model& im,
     return origin_types::non_proxy_reference;
 }
 
-void origin_transform::transform(const context& ctx, intermediate_model& im) {
+void origin_transform::
+transform(const context& ctx, meta_model::intermediate_model& im) {
     const auto tg(make_type_group(ctx.type_repository()));
     const auto ipm(is_proxy_model(tg, im));
     const auto ot(compute_origin_types(im, ipm));
     im.origin_type(ot);
 
     updater g(ot);
-    yarn::elements_traversal(im, g);
+    meta_model::elements_traversal(im, g);
 }
 
 } } }
diff --git a/projects/yarn/src/types/transforms/orm_transform.cpp b/projects/yarn/src/types/transforms/orm_transform.cpp
index 8eb3dc303..d683a3b03 100644
--- a/projects/yarn/src/types/transforms/orm_transform.cpp
+++ b/projects/yarn/src/types/transforms/orm_transform.cpp
@@ -26,10 +26,10 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
+#include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
-#include "dogen/yarn/io/orm_model_properties_io.hpp"
-#include "dogen/yarn/io/orm_object_properties_io.hpp"
-#include "dogen/yarn/io/orm_primitive_properties_io.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/orm_transform.hpp"
 
@@ -61,9 +61,9 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-orm_database_systems orm_transform::
+meta_model::orm_database_systems orm_transform::
 to_orm_database_system(const std::string& s) {
-
+    using meta_model::orm_database_systems;
     const auto ls(boost::to_lower_copy(s));
     if (ls == mysql) {
         return orm_database_systems::mysql;
@@ -81,9 +81,9 @@ to_orm_database_system(const std::string& s) {
     BOOST_THROW_EXCEPTION(transformation_error(invalid_daatabase_system + s));
 }
 
-std::vector<orm_database_systems> orm_transform::
+std::vector<meta_model::orm_database_systems> orm_transform::
 to_orm_database_system(const std::list<std::string>& vs) {
-    std::vector<orm_database_systems> r;
+    std::vector<meta_model::orm_database_systems> r;
     r.reserve(vs.size());
     for (const auto& s : vs) {
         r.push_back(to_orm_database_system(s));
@@ -91,8 +91,9 @@ to_orm_database_system(const std::list<std::string>& vs) {
     return r;
 }
 
-letter_cases
+meta_model::letter_cases
 orm_transform::to_letter_case(const std::string& s) {
+    using meta_model::letter_cases;
     const auto ls(boost::to_lower_copy(s));
     if (ls == upper_case) {
         return letter_cases::upper_case;
@@ -104,10 +105,10 @@ orm_transform::to_letter_case(const std::string& s) {
     BOOST_THROW_EXCEPTION(transformation_error(invalid_letter_case + s));
 }
 
-std::unordered_map<orm_database_systems, std::string>
+std::unordered_map<meta_model::orm_database_systems, std::string>
 orm_transform::
 make_type_overrides(const std::list<std::string> ls) {
-    std::unordered_map<orm_database_systems, std::string> r;
+    std::unordered_map<meta_model::orm_database_systems, std::string> r;
 
     using utility::string::splitter;
     for (const auto& s : ls) {
@@ -187,7 +188,7 @@ make_type_group(const annotations::type_repository& atrp) {
     return r;
 }
 
-boost::optional<orm_model_properties>
+boost::optional<meta_model::orm_model_properties>
 orm_transform::make_model_properties(const type_group& tg,
     const annotations::annotation& a) {
 
@@ -195,7 +196,7 @@ orm_transform::make_model_properties(const type_group& tg,
     const annotations::entry_selector s(a);
     bool found_any(false);
 
-    orm_model_properties r;
+    meta_model::orm_model_properties r;
     if (s.has_entry(tg.database_system)) {
         found_any = true;
         const auto ds(s.get_text_collection_content(tg.database_system));
@@ -219,12 +220,12 @@ orm_transform::make_model_properties(const type_group& tg,
     }
 
     BOOST_LOG_SEV(lg, debug) << "Model configuration is empty.";
-    return boost::optional<orm_model_properties>();
+    return boost::optional<meta_model::orm_model_properties>();
 }
 
 void orm_transform::update_object_properties(
     const type_group& tg, const annotations::annotation& a,
-    orm_object_properties& cfg) {
+    meta_model::orm_object_properties& cfg) {
 
     const annotations::entry_selector s(a);
     if (s.has_entry(tg.schema_name))
@@ -234,14 +235,14 @@ void orm_transform::update_object_properties(
         cfg.table_name(s.get_text_content(tg.table_name));
 }
 
-boost::optional<orm_attribute_properties>
+boost::optional<meta_model::orm_attribute_properties>
 orm_transform::make_attribute_properties(const type_group& tg,
     const annotations::annotation& a) {
 
     const annotations::entry_selector s(a);
     bool found_any(false);
 
-    orm_attribute_properties r;
+    meta_model::orm_attribute_properties r;
     if (s.has_entry(tg.column_name)) {
         found_any = true;
         r.column_name(s.get_text_content(tg.column_name));
@@ -271,26 +272,26 @@ orm_transform::make_attribute_properties(const type_group& tg,
     if (found_any)
         return r;
 
-    return boost::optional<orm_attribute_properties>();
+    return boost::optional<meta_model::orm_attribute_properties>();
 }
 
 void orm_transform::update_primitive_properties(
     const type_group& tg, const annotations::annotation& a,
-    orm_primitive_properties& cfg) {
+    meta_model::orm_primitive_properties& cfg) {
 
     const annotations::entry_selector s(a);
     if (s.has_entry(tg.schema_name))
         cfg.schema_name(s.get_text_content(tg.schema_name));
 }
 
-boost::optional<orm_module_properties>
+boost::optional<meta_model::orm_module_properties>
 orm_transform::make_module_properties(const type_group& tg,
     const annotations::annotation& a) {
 
     const annotations::entry_selector s(a);
     bool found_any(false);
 
-    orm_module_properties r;
+    meta_model::orm_module_properties r;
     if (s.has_entry(tg.schema_name)) {
         found_any = true;
         r.schema_name(s.get_text_content(tg.schema_name));
@@ -299,14 +300,14 @@ orm_transform::make_module_properties(const type_group& tg,
     if (found_any)
         return r;
 
-    return boost::optional<orm_module_properties>();
+    return boost::optional<meta_model::orm_module_properties>();
 }
 
 void orm_transform::
-expand_objects(const type_group& tg, intermediate_model& im) {
+expand_objects(const type_group& tg, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started object expansion.";
 
-    boost::optional<letter_cases> lc;
+    boost::optional<meta_model::letter_cases> lc;
     if (im.orm_properties())
         lc = im.orm_properties()->letter_case();
 
@@ -356,7 +357,7 @@ expand_objects(const type_group& tg, intermediate_model& im) {
 }
 
 void orm_transform::
-expand_concepts(const type_group& tg, intermediate_model& im) {
+expand_concepts(const type_group& tg, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started concept expansion.";
 
     for (auto& pair : im.concepts()) {
@@ -371,11 +372,11 @@ expand_concepts(const type_group& tg, intermediate_model& im) {
 }
 
 void orm_transform::expand_primitives(
-    const type_group& tg, intermediate_model& im) {
+    const type_group& tg, meta_model::intermediate_model& im) {
 
     BOOST_LOG_SEV(lg, debug) << "Started primitive expansion.";
 
-    boost::optional<letter_cases> lc;
+    boost::optional<meta_model::letter_cases> lc;
     if (im.orm_properties())
         lc = im.orm_properties()->letter_case();
 
@@ -410,7 +411,7 @@ void orm_transform::expand_primitives(
 }
 
 void orm_transform::
-expand_modules(const type_group& tg, intermediate_model& im) {
+expand_modules(const type_group& tg, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started module expansion.";
 
     for (auto& pair : im.modules()) {
@@ -476,7 +477,8 @@ expand_modules(const type_group& tg, intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Finished module expansion.";
 }
 
-void orm_transform::expand(const context& ctx, intermediate_model& im) {
+void orm_transform::
+expand(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started expansion.";
 
     const auto tg(make_type_group(ctx.type_repository()));
diff --git a/projects/yarn/src/types/transforms/parsing_transform.cpp b/projects/yarn/src/types/transforms/parsing_transform.cpp
index 1aad013b7..5d1df9101 100644
--- a/projects/yarn/src/types/transforms/parsing_transform.cpp
+++ b/projects/yarn/src/types/transforms/parsing_transform.cpp
@@ -27,7 +27,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/helpers/legacy_name_tree_parser.hpp"
@@ -106,7 +106,8 @@ std::string parsing_transform::make_primitive_underlying_element(
 }
 
 std::string parsing_transform::
-obtain_value_attribute_simple_name(const languages l) {
+obtain_value_attribute_simple_name(const meta_model::languages l) {
+    using meta_model::languages;
     switch(l) {
     case languages::csharp: return csharp_value;
     case languages::cpp: return cpp_value;
@@ -118,8 +119,8 @@ obtain_value_attribute_simple_name(const languages l) {
     } }
 }
 
-void parsing_transform::
-parse_attributes(const languages language, std::list<attribute>& attrs) {
+void parsing_transform::parse_attributes(const meta_model::languages language,
+    std::list<meta_model::attribute>& attrs) {
     const helpers::legacy_name_tree_parser ntp(language);
     for (auto& attr : attrs) {
         const auto ut(boost::algorithm::trim_copy(attr.unparsed_type()));
@@ -138,8 +139,8 @@ parse_attributes(const languages language, std::list<attribute>& attrs) {
     }
 }
 
-void parsing_transform::parse_parent(const type_group& tg, object& o) {
-
+void parsing_transform::
+parse_parent(const type_group& tg, meta_model::object& o) {
     /*
      * Obtain the parent name from the meta-data. If there is no
      * parent name there is nothing to do.
@@ -167,7 +168,7 @@ void parsing_transform::parse_parent(const type_group& tg, object& o) {
 }
 
 void parsing_transform::
-parse_underlying_element(const type_group& tg, enumeration& e) {
+parse_underlying_element(const type_group& tg, meta_model::enumeration& e) {
 
     /*
      * Obtain the underlying element name from the meta-data. If there
@@ -197,7 +198,7 @@ parse_underlying_element(const type_group& tg, enumeration& e) {
 }
 
 void parsing_transform::parse_underlying_element(const type_group& tg,
-    const languages l, primitive& p) {
+    const meta_model::languages l, meta_model::primitive& p) {
 
     const auto id(p.name().id());
 
@@ -219,7 +220,7 @@ void parsing_transform::parse_underlying_element(const type_group& tg,
     const auto& n(p.name());
     const auto sn(obtain_value_attribute_simple_name(l));
 
-    yarn::attribute attr;
+    meta_model::attribute attr;
     attr.name(nf.build_attribute_name(n, sn));
     attr.unparsed_type(ut);
     attr.documentation(documentation);
@@ -232,7 +233,7 @@ void parsing_transform::parse_underlying_element(const type_group& tg,
 }
 
 void parsing_transform::
-transform(const context& ctx, intermediate_model& m) {
+transform(const context& ctx, meta_model::intermediate_model& m) {
     const auto tg(make_type_group(ctx.type_repository()));
     const auto l(m.input_language());
 
diff --git a/projects/yarn/src/types/transforms/post_processing_chain.cpp b/projects/yarn/src/types/transforms/post_processing_chain.cpp
index 78861dcdb..8f8fdbc4c 100644
--- a/projects/yarn/src/types/transforms/post_processing_chain.cpp
+++ b/projects/yarn/src/types/transforms/post_processing_chain.cpp
@@ -47,7 +47,7 @@ namespace yarn {
 namespace transforms {
 
 void post_processing_chain::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Executing post-processing chain.";
 
     /*
diff --git a/projects/yarn/src/types/transforms/pre_processing_chain.cpp b/projects/yarn/src/types/transforms/pre_processing_chain.cpp
index 131684f69..0e7cfa549 100644
--- a/projects/yarn/src/types/transforms/pre_processing_chain.cpp
+++ b/projects/yarn/src/types/transforms/pre_processing_chain.cpp
@@ -19,7 +19,8 @@
  *
  */
 #include "dogen/utility/log/logger.hpp"
-#include "dogen/yarn/io/languages_io.hpp"
+#include "dogen/yarn/io/meta_model/languages_io.hpp"
+#include "dogen/yarn/types/helpers/pre_processing_validator.hpp"
 #include "dogen/yarn/types/transforms/annotations_transform.hpp"
 #include "dogen/yarn/types/transforms/modules_transform.hpp"
 #include "dogen/yarn/types/transforms/origin_transform.hpp"
@@ -27,7 +28,6 @@
 #include "dogen/yarn/types/transforms/type_params_transform.hpp"
 #include "dogen/yarn/types/transforms/parsing_transform.hpp"
 #include "dogen/yarn/types/transforms/primitives_transform.hpp"
-#include "dogen/yarn/types/helpers/pre_processing_validator.hpp"
 #include "dogen/yarn/types/transforms/pre_processing_chain.hpp"
 
 namespace {
@@ -41,9 +41,9 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-bool pre_processing_chain::
-is_language_relevant(const std::unordered_set<languages>& relevant_languages,
-    const intermediate_model& im) {
+bool pre_processing_chain::is_language_relevant(
+    const std::unordered_set<meta_model::languages>& relevant_languages,
+    const meta_model::intermediate_model& im) {
     const auto l(im.input_language());
     const auto i(relevant_languages.find(l));
     if (i == relevant_languages.end()) {
@@ -61,8 +61,8 @@ is_language_relevant(const std::unordered_set<languages>& relevant_languages,
     return true;
 }
 
-void pre_processing_chain::
-apply_first_set_of_transforms(const context& ctx, intermediate_model& im) {
+void pre_processing_chain::apply_first_set_of_transforms(const context& ctx,
+    meta_model::intermediate_model& im) {
     /*
      * We must transform annotations before we transform modules to
      * ensure the root module is populated with entries before being
@@ -79,8 +79,8 @@ apply_first_set_of_transforms(const context& ctx, intermediate_model& im) {
     language_transform::transform(ctx, im);
 }
 
-void pre_processing_chain::
-apply_second_set_of_transforms(const context& ctx, intermediate_model& im) {
+void pre_processing_chain::apply_second_set_of_transforms(const context& ctx,
+    meta_model::intermediate_model& im) {
     /*
      * There are no particular dependencies on the next set of
      * transforms.
@@ -102,14 +102,14 @@ apply_second_set_of_transforms(const context& ctx, intermediate_model& im) {
 }
 
 void pre_processing_chain::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
     apply_first_set_of_transforms(ctx, im);
     apply_second_set_of_transforms(ctx, im);
 }
 
 bool pre_processing_chain::try_transform(const context& ctx,
-    const std::unordered_set<languages>& relevant_languages,
-    intermediate_model& im) {
+    const std::unordered_set<meta_model::languages>& relevant_languages,
+    meta_model::intermediate_model& im) {
     /*
      * We must apply the first set of transforms because language
      * expansion is required.
diff --git a/projects/yarn/src/types/transforms/primitives_transform.cpp b/projects/yarn/src/types/transforms/primitives_transform.cpp
index 9c2d2cb6d..b1647c00a 100644
--- a/projects/yarn/src/types/transforms/primitives_transform.cpp
+++ b/projects/yarn/src/types/transforms/primitives_transform.cpp
@@ -69,7 +69,7 @@ make_type_group(const annotations::type_repository& atrp) {
 }
 
 void primitives_transform::
-populate_from_annotations(const type_group& tg, primitive& p) {
+populate_from_annotations(const type_group& tg, meta_model::primitive& p) {
     const auto& a(p.annotation());
     const annotations::entry_selector s(a);
     p.is_nullable(s.get_boolean_content_or_default(tg.is_nullable));
@@ -77,7 +77,7 @@ populate_from_annotations(const type_group& tg, primitive& p) {
 }
 
 void primitives_transform::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started expanding primitives for model: "
                              << im.name().id();
 
diff --git a/projects/yarn/src/types/transforms/references_chain.cpp b/projects/yarn/src/types/transforms/references_chain.cpp
index ffa658a26..c9d7d5368 100644
--- a/projects/yarn/src/types/transforms/references_chain.cpp
+++ b/projects/yarn/src/types/transforms/references_chain.cpp
@@ -38,9 +38,9 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
-std::unordered_set<languages> references_chain::
-obtain_relevant_languages(const intermediate_model& target) {
-    std::unordered_set<languages> r;
+std::unordered_set<meta_model::languages> references_chain::
+obtain_relevant_languages(const meta_model::intermediate_model& target) {
+    std::unordered_set<meta_model::languages> r;
     r.insert(target.input_language());
 
     for (const auto ol : target.output_languages())
@@ -49,8 +49,8 @@ obtain_relevant_languages(const intermediate_model& target) {
     return r;
 }
 
-std::list<intermediate_model> references_chain::
-transform(const context& ctx, const intermediate_model& target) {
+std::list<meta_model::intermediate_model> references_chain::
+transform(const context& ctx, const meta_model::intermediate_model& target) {
     BOOST_LOG_SEV(lg, debug) << "Executing the reference models chain.";
 
     /*
@@ -71,7 +71,7 @@ transform(const context& ctx, const intermediate_model& target) {
      * Load each reference model from the reference path, filter and
      * pre-process them.
      */
-    std::list<intermediate_model> r;
+    std::list<meta_model::intermediate_model> r;
     for (const auto& rp : rps) {
         /*
          * Obtain the reference model exactly as it was read out from
diff --git a/projects/yarn/src/types/transforms/resolver_transform.cpp b/projects/yarn/src/types/transforms/resolver_transform.cpp
index 0f1ff48a3..80c0bd161 100644
--- a/projects/yarn/src/types/transforms/resolver_transform.cpp
+++ b/projects/yarn/src/types/transforms/resolver_transform.cpp
@@ -26,7 +26,7 @@ namespace yarn {
 namespace transforms {
 
 void resolver_transform::
-transform(const helpers::indices& idx, intermediate_model& im) {
+transform(const helpers::indices& idx, meta_model::intermediate_model& im) {
     helpers::resolver::resolve(idx, im);
 }
 
diff --git a/projects/yarn/src/types/transforms/stereotypes_transform.cpp b/projects/yarn/src/types/transforms/stereotypes_transform.cpp
index 7538524d7..7d8273cdf 100644
--- a/projects/yarn/src/types/transforms/stereotypes_transform.cpp
+++ b/projects/yarn/src/types/transforms/stereotypes_transform.cpp
@@ -22,14 +22,14 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/vector_io.hpp"
-#include "dogen/yarn/types/object.hpp"
-#include "dogen/yarn/io/name_io.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/helpers/resolver.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
-#include "dogen/yarn/types/intermediate_model.hpp"
-#include "dogen/yarn/types/orm_object_properties.hpp"
-#include "dogen/yarn/types/orm_primitive_properties.hpp"
+#include "dogen/yarn/types/meta_model/intermediate_model.hpp"
+#include "dogen/yarn/types/meta_model/orm_object_properties.hpp"
+#include "dogen/yarn/types/meta_model/orm_primitive_properties.hpp"
 #include "dogen/yarn/types/transforms/stereotypes_transform.hpp"
 
 namespace {
@@ -84,17 +84,20 @@ is_stereotype_handled_externally(const std::string& s) {
         s == stereotype_csharp_artefact_formatter;
 }
 
-std::unordered_map<location, std::list<name> > stereotypes_transform::
-bucket_leaves_by_location(const std::list<name>& leaves) {
-    std::unordered_map<location, std::list<name> >  r;
+std::unordered_map<meta_model::location,
+                   std::list<meta_model::name>> stereotypes_transform::
+bucket_leaves_by_location(const std::list<meta_model::name>& leaves) {
+    std::unordered_map<meta_model::location, std::list<meta_model::name>>  r;
     for (const auto& l : leaves)
         r[l.location()].push_back(l);
 
     return r;
 }
 
-visitor stereotypes_transform::create_visitor(const object& o, const location& l,
-    const origin_types ot, const std::list<name>& leaves) {
+meta_model::visitor
+stereotypes_transform::create_visitor(const meta_model::object& o,
+    const meta_model::location& l, const meta_model::origin_types ot,
+    const std::list<meta_model::name>& leaves) {
     helpers::name_builder b;
     b.simple_name(o.name().simple() + "_" + visitor_name);
     b.location(l);
@@ -102,7 +105,7 @@ visitor stereotypes_transform::create_visitor(const object& o, const location& l
     const auto n(b.build());
     BOOST_LOG_SEV(lg, debug) << "Creating visitor: " << n.id();
 
-    visitor r;
+    meta_model::visitor r;
     r.name(n);
     r.origin_type(ot);
     r.documentation(visitor_doc + o.name().simple());
@@ -120,15 +123,16 @@ visitor stereotypes_transform::create_visitor(const object& o, const location& l
 }
 
 void stereotypes_transform::
-update_visited_leaves(const std::list<name>& leaves, const visitor_details& vd,
-    intermediate_model& m) {
+update_visited_leaves(const std::list<meta_model::name>& leaves,
+    const visitor_details& vd, meta_model::intermediate_model& m) {
     BOOST_LOG_SEV(lg, debug) << "Updating leaves for: " << vd.base.id();
 
     for (const auto& l : leaves) {
         auto i(m.objects().find(l.id()));
         if (i == m.objects().end()) {
             BOOST_LOG_SEV(lg, error) << leaf_not_found << l.id();
-            BOOST_THROW_EXCEPTION(transformation_error(leaf_not_found + l.id()));
+            BOOST_THROW_EXCEPTION(
+                transformation_error(leaf_not_found + l.id()));
         }
 
         auto& o(i->second);
@@ -141,7 +145,8 @@ update_visited_leaves(const std::list<name>& leaves, const visitor_details& vd,
 }
 
 void stereotypes_transform::
-add_visitor_to_model(const visitor& v, intermediate_model& im) {
+add_visitor_to_model(const meta_model::visitor& v,
+    meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Adding visitor: " << v.name().id();
 
     const auto pair(std::make_pair(v.name().id(), v));
@@ -155,7 +160,7 @@ add_visitor_to_model(const visitor& v, intermediate_model& im) {
 }
 
 void stereotypes_transform::
-expand_visitable(object& o, intermediate_model& im) {
+expand_visitable(meta_model::object& o, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding visitable for: " << o.name().id();
 
     /*
@@ -256,7 +261,9 @@ expand_visitable(object& o, intermediate_model& im) {
         const auto& dv_location(pair.first);
         const auto immm(im.name().location().model_modules());
         const bool in_target_model(immm == dv_location.model_modules());
-        const auto ot(in_target_model ? origin_types::target : o.origin_type());
+        const auto ot(in_target_model ?
+            meta_model::origin_types::target :
+            o.origin_type());
 
         /*
          * Generate the derived visitor and update its leaves.
@@ -272,8 +279,8 @@ expand_visitable(object& o, intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Done injecting visitor.";
 }
 
-bool stereotypes_transform::try_expand_concept(
-    const std::string& s, object& o, const intermediate_model& im) {
+bool stereotypes_transform::try_expand_concept(const std::string& s,
+    meta_model::object& o, const meta_model::intermediate_model& im) {
 
     using helpers::resolver;
     const auto on(resolver::try_resolve_concept_name(o.name(), s, im));
@@ -284,7 +291,8 @@ bool stereotypes_transform::try_expand_concept(
     return true;
 }
 
-void stereotypes_transform::expand(object& o, intermediate_model& im) {
+void stereotypes_transform::expand(meta_model::object& o,
+    meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding stereotypes for: " << o.name().id();
     if (o.stereotypes().empty()) {
         BOOST_LOG_SEV(lg, debug) << "No stereotypes found.";
@@ -305,11 +313,11 @@ void stereotypes_transform::expand(object& o, intermediate_model& im) {
         else if (s == stereotype_immutable)
             o.is_immutable(true);
         else if (s == stereotype_orm_object) {
-            orm_object_properties cfg;
+            meta_model::orm_object_properties cfg;
             cfg.generate_mapping(true);
             o.orm_properties(cfg);
         } else if (s == stereotype_orm_value) {
-            orm_object_properties cfg;
+            meta_model::orm_object_properties cfg;
             cfg.generate_mapping(true);
             cfg.is_value(true);
             o.orm_properties(cfg);
@@ -335,7 +343,7 @@ void stereotypes_transform::expand(object& o, intermediate_model& im) {
     o.stereotypes(external_stereotypes);
 }
 
-void stereotypes_transform::expand(primitive& p) {
+void stereotypes_transform::expand(meta_model::primitive& p) {
     const auto id(p.name().id());
     BOOST_LOG_SEV(lg, debug) << "Expanding stereotypes for: " << id;
     if (p.stereotypes().empty()) {
@@ -349,7 +357,7 @@ void stereotypes_transform::expand(primitive& p) {
         if (s == stereotype_immutable)
             p.is_immutable(true);
         else if (s == stereotype_orm_value) {
-            orm_primitive_properties cfg;
+            meta_model::orm_primitive_properties cfg;
             cfg.generate_mapping(true);
             p.orm_properties(cfg);
         } else if (s == stereotype_orm_object) {
@@ -369,7 +377,7 @@ void stereotypes_transform::expand(primitive& p) {
     BOOST_LOG_SEV(lg, debug) << "Unknown: " << p.stereotypes();
 }
 
-void stereotypes_transform::transform(intermediate_model& im) {
+void stereotypes_transform::transform(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding stereotypes for: " << im.name().id();
 
     for (auto& pair : im.objects())
diff --git a/projects/yarn/src/types/transforms/type_params_transform.cpp b/projects/yarn/src/types/transforms/type_params_transform.cpp
index 8f11f2935..ef4c678f7 100644
--- a/projects/yarn/src/types/transforms/type_params_transform.cpp
+++ b/projects/yarn/src/types/transforms/type_params_transform.cpp
@@ -45,10 +45,10 @@ make_type_group(const annotations::type_repository& atrp) {
     return r;
 }
 
-type_parameters
+meta_model::type_parameters
 type_params_transform::make_type_parameters(const type_group& tg,
     const annotations::annotation& a) {
-    type_parameters r;
+    meta_model::type_parameters r;
     const annotations::entry_selector s(a);
 
     const auto& vnp(tg.variable_number_of_parameters);
@@ -64,13 +64,13 @@ type_params_transform::make_type_parameters(const type_group& tg,
 }
 
 void type_params_transform::
-expand_type_parameters(const type_group& tg, object& o) {
+expand_type_parameters(const type_group& tg, meta_model::object& o) {
     const auto tp(make_type_parameters(tg, o.annotation()));
     o.type_parameters(tp);
 }
 
 void type_params_transform::
-transform(const context& ctx, intermediate_model& im) {
+transform(const context& ctx, meta_model::intermediate_model& im) {
     const auto tg(make_type_group(ctx.type_repository()));
     for (auto& pair : im.objects()) {
         auto& o(pair.second);
