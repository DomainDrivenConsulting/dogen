diff --git a/diagrams/yarn.dia b/diagrams/yarn.dia
index 9e3c9e0..29fd8d6 100644
--- a/diagrams/yarn.dia
+++ b/diagrams/yarn.dia
@@ -13444,16 +13444,16 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O107">
       <dia:attribute name="obj_pos">
-        <dia:point val="-14,50"/>
+        <dia:point val="-9,50"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-14.05,49.95;13.5,55.25"/>
+        <dia:rectangle val="-9.05,49.95;10.03,55.25"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-14,50"/>
+        <dia:point val="-9,50"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="27.449999999999999"/>
+        <dia:real val="18.98"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="5.2000000000000011"/>
@@ -13551,7 +13551,7 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
             <dia:string>#elements#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;element&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;boost::shared_ptr&lt;element&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -13734,7 +13734,7 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:point val="29.8,38.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-0.325,37.65;30.55,50.8"/>
+        <dia:rectangle val="0.44,37.65;30.55,50.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -13742,8 +13742,8 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
       <dia:attribute name="orth_points">
         <dia:point val="29.8,38.4"/>
         <dia:point val="29.8,44"/>
-        <dia:point val="-0.275,44"/>
-        <dia:point val="-0.275,50"/>
+        <dia:point val="0.49,44"/>
+        <dia:point val="0.49,50"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -13802,17 +13802,17 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-14,55.2"/>
+        <dia:point val="-9,55.2"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-14.75,54.45;-0.315,66.8"/>
+        <dia:rectangle val="-9.75,54.45;-0.315,66.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-14,55.2"/>
-        <dia:point val="-14,61"/>
+        <dia:point val="-9,55.2"/>
+        <dia:point val="-9,61"/>
         <dia:point val="-0.515,61"/>
         <dia:point val="-0.515,66"/>
       </dia:attribute>
@@ -14518,7 +14518,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
         <dia:point val="25,53.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="13.4,52.85;25.75,61.05"/>
+        <dia:rectangle val="9.93,52.85;25.75,61.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -14526,8 +14526,8 @@ Leaves are types concrete types which have a parent.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="25,53.6"/>
         <dia:point val="25,61"/>
-        <dia:point val="13.45,61"/>
-        <dia:point val="13.45,55.2"/>
+        <dia:point val="9.98,61"/>
+        <dia:point val="9.98,55.2"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -23192,7 +23192,7 @@ that belong to the yarn model.#</dia:string>
         <dia:point val="140.6,13"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="139.85,3.35;160.417,13.8"/>
+        <dia:rectangle val="139.85,3.35;160.418,13.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -23523,7 +23523,7 @@ that belong to the yarn model.#</dia:string>
         <dia:point val="122.22,4.2"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="116.95,3.45;122.97,14.6"/>
+        <dia:rectangle val="116.95,3.45;122.97,13.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
diff --git a/doc/agile/sprint_backlog_87.org b/doc/agile/sprint_backlog_87.org
index eae2c66..6bafcd9 100644
--- a/doc/agile/sprint_backlog_87.org
+++ b/doc/agile/sprint_backlog_87.org
@@ -12,38 +12,38 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2016-09-10 Sat 17:09]
+#+CAPTION: Clock summary at [2016-09-10 Sat 17:47]
 | <75>                                                                        |         |       |      |       |
 | Headline                                                                    | Time    |       |      |     % |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| *Total time*                                                                | *51:51* |       |      | 100.0 |
+| *Total time*                                                                | *52:28* |       |      | 100.0 |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| Stories                                                                     | 51:51   |       |      | 100.0 |
-| Active                                                                      |         | 51:51 |      | 100.0 |
+| Stories                                                                     | 52:28   |       |      | 100.0 |
+| Active                                                                      |         | 52:28 |      | 100.0 |
 | STARTED Sprint and product backlog grooming                                 |         |       | 0:57 |   1.8 |
 | COMPLETED Move readme to markdown                                           |         |       | 0:49 |   1.6 |
 | COMPLETED Use =element= base class in  =update_element=                     |         |       | 0:29 |   0.9 |
-| COMPLETED Move file instantiation code into yarn                            |         |       | 2:22 |   4.6 |
-| COMPLETED Yarn naming tidy-up                                               |         |       | 4:19 |   8.3 |
-| COMPLETED Generalisation tidy-up                                            |         |       | 5:07 |   9.9 |
-| COMPLETED Create an indexer for resolution data                             |         |       | 1:38 |   3.2 |
-| COMPLETED First chat with IS about current state of dogen                   |         |       | 1:57 |   3.8 |
+| COMPLETED Move file instantiation code into yarn                            |         |       | 2:22 |   4.5 |
+| COMPLETED Yarn naming tidy-up                                               |         |       | 4:19 |   8.2 |
+| COMPLETED Generalisation tidy-up                                            |         |       | 5:07 |   9.8 |
+| COMPLETED Create an indexer for resolution data                             |         |       | 1:38 |   3.1 |
+| COMPLETED First chat with IS about current state of dogen                   |         |       | 1:57 |   3.7 |
 | COMPLETED Extend name builder with required functionality                   |         |       | 1:28 |   2.8 |
-| COMPLETED Consider adding support for inheritance via meta-data             |         |       | 4:55 |   9.5 |
-| CANCELLED Pick-up Boost 1.61 from Debian Testing                            |         |       | 1:23 |   2.7 |
+| COMPLETED Consider adding support for inheritance via meta-data             |         |       | 4:55 |   9.4 |
+| CANCELLED Pick-up Boost 1.61 from Debian Testing                            |         |       | 1:23 |   2.6 |
 | COMPLETED Allow cross model inheritance                                     |         |       | 1:09 |   2.2 |
-| COMPLETED Add support for visitor inheritance                               |         |       | 7:27 |  14.4 |
+| COMPLETED Add support for visitor inheritance                               |         |       | 7:27 |  14.2 |
 | COMPLETED Move visitor =accept= methods to cpp file                         |         |       | 0:41 |   1.3 |
 | COMPLETED Analysis work on implementing remaining yarn types                |         |       | 0:52 |   1.7 |
 | COMPLETED Split injector into separate classes                              |         |       | 0:56 |   1.8 |
 | COMPLETED Add injector interface and registrar                              |         |       | 1:02 |   2.0 |
 | COMPLETED Analysis: supporting multiple elements for one id                 |         |       | 1:12 |   2.3 |
 | COMPLETED Add language-specific element injection                           |         |       | 0:41 |   1.3 |
-| COMPLETED Implement includers in fabric                                     |         |       | 6:10 |  11.9 |
+| COMPLETED Implement includers in fabric                                     |         |       | 6:10 |  11.8 |
 | COMPLETED Quilt's formatter names are incorrect                             |         |       | 0:41 |   1.3 |
-| COMPLETED Implement registrar in fabric                                     |         |       | 3:27 |   6.7 |
+| COMPLETED Implement registrar in fabric                                     |         |       | 3:27 |   6.6 |
 | COMPLETED Move injection to intermediate model                              |         |       | 1:30 |   2.9 |
-| STARTED Use a list in model rather than a map                               |         |       | 0:39 |   1.3 |
+| STARTED Use a list in model rather than a map                               |         |       | 1:16 |   2.4 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -714,6 +714,7 @@ Tasks:
 - update transformer to take into account injected types.
 
 *** STARTED Use a list in model rather than a map                     :story:
+    CLOCK: [2016-09-10 Sat 17:10]--[2016-09-10 Sat 17:47] =>  0:37
     CLOCK: [2016-09-10 Sat 15:15]--[2016-09-10 Sat 15:33] =>  0:18
     CLOCK: [2016-09-10 Sat 14:53]--[2016-09-10 Sat 15:14] =>  0:21
 
diff --git a/projects/quilt.cpp/src/types/properties/aspect_properties_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/aspect_properties_repository_factory.cpp
index 71112ca..ab53a99 100644
--- a/projects/quilt.cpp/src/types/properties/aspect_properties_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/aspect_properties_repository_factory.cpp
@@ -91,10 +91,8 @@ aspect_properties_repository aspect_properties_repository_factory::make(
 
     const aspect_properties_factory f(asrp);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
 
     BOOST_LOG_SEV(lg, debug) << "Finished creating aspect properties"
                              << " repository: " << g.result();
diff --git a/projects/quilt.cpp/src/types/properties/enablement_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/enablement_repository_factory.cpp
index 3a2b7f8..27f370c 100644
--- a/projects/quilt.cpp/src/types/properties/enablement_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/enablement_repository_factory.cpp
@@ -155,10 +155,8 @@ enablement_repository enablement_repository_factory::make(
     const auto gep(obtain_global_properties(fd, root_object));
     const enablement_factory f(rp, fc, gep);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
     auto r(g.result());
 
     BOOST_LOG_SEV(lg, debug) << "Finished computing enablement:" << r;
diff --git a/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
index 38ec153..9356bfe 100644
--- a/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/helper_properties_repository_factory.cpp
@@ -124,10 +124,8 @@ helper_properties_repository_factory::make(
 
     const helper_properties_factory f(fff, hsrp, ssrp);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
 
     BOOST_LOG_SEV(lg, debug) << "Finished creating helper repository: "
                              << g.result();
diff --git a/projects/quilt.cpp/src/types/properties/inclusion_dependencies_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/inclusion_dependencies_repository_factory.cpp
index e1582ff..60f8d0c 100644
--- a/projects/quilt.cpp/src/types/properties/inclusion_dependencies_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/inclusion_dependencies_repository_factory.cpp
@@ -115,10 +115,8 @@ make(const inclusion_dependencies_builder_factory& bf, const container& c,
 
     const inclusion_dependencies_factory idf(bf, c);
     generator g(idf);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
 
     BOOST_LOG_SEV(lg, debug) << "Finished creating inclusion dependencies:"
                              << g.result();
diff --git a/projects/quilt.cpp/src/types/properties/inclusion_directives_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/inclusion_directives_repository_factory.cpp
index e78403e..cc58c69 100644
--- a/projects/quilt.cpp/src/types/properties/inclusion_directives_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/inclusion_directives_repository_factory.cpp
@@ -116,11 +116,8 @@ inclusion_directives_repository inclusion_directives_repository_factory::make(
 
     const inclusion_directives_factory f(srp, fc, pdrp);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
-
+    for (const auto& e : m.elements())
+        e->accept(g);
     const auto r(g.result());
 
     BOOST_LOG_SEV(lg, debug) << "Finished inclusion directives repository:"
diff --git a/projects/quilt.cpp/src/types/properties/path_derivatives_factory.cpp b/projects/quilt.cpp/src/types/properties/path_derivatives_factory.cpp
index f9308c9..186e276 100644
--- a/projects/quilt.cpp/src/types/properties/path_derivatives_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/path_derivatives_factory.cpp
@@ -75,10 +75,8 @@ path_derivatives_factory::path_derivatives_factory(
 std::unordered_set<std::string> path_derivatives_factory::
 module_ids(const yarn::model& m) const {
     module_id_collector c;
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(c);
-    }
+    for (const auto& e : m.elements())
+        e->accept(c);
     return c.result();
 }
 
diff --git a/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp b/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
index 6b12513..7a83211 100644
--- a/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/properties/path_derivatives_repository_factory.cpp
@@ -106,11 +106,10 @@ path_derivatives_repository path_derivatives_repository_factory::make(
     BOOST_LOG_SEV(lg, debug) << "Starting workflow.";
     const path_derivatives_factory f(opts, m, ps);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
     const auto r(g.result());
+
     BOOST_LOG_SEV(lg, debug) << "Finished workflow. Result: " << r;
 
     return r;
diff --git a/projects/quilt.cpp/src/types/properties/workflow.cpp b/projects/quilt.cpp/src/types/properties/workflow.cpp
index e5687bb..649c4bc 100644
--- a/projects/quilt.cpp/src/types/properties/workflow.cpp
+++ b/projects/quilt.cpp/src/types/properties/workflow.cpp
@@ -135,10 +135,8 @@ workflow::from_transformer_activity(const yarn::model& m) const {
 
     transformer t;
     generator g(t);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
 
     BOOST_LOG_SEV(lg, debug) << "Finished transforming properties.";
     return g.result();
diff --git a/projects/quilt.cpp/src/types/settings/aspect_settings_repository_factory.cpp b/projects/quilt.cpp/src/types/settings/aspect_settings_repository_factory.cpp
index caa2f5f..d349f41 100644
--- a/projects/quilt.cpp/src/types/settings/aspect_settings_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/settings/aspect_settings_repository_factory.cpp
@@ -101,11 +101,10 @@ make(const dynamic::repository& rp, const yarn::model& m) const {
 
     const aspect_settings_factory f(rp);
     generator g(f);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
     auto r(g.result());
+
     BOOST_LOG_SEV(lg, debug) << "Finished creating aspect settings repository."
                              << r;
     return r;
diff --git a/projects/quilt.cpp/src/types/settings/element_settings_repository_factory.cpp b/projects/quilt.cpp/src/types/settings/element_settings_repository_factory.cpp
index 3507649..f2b5329 100644
--- a/projects/quilt.cpp/src/types/settings/element_settings_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/settings/element_settings_repository_factory.cpp
@@ -127,11 +127,10 @@ make(const opaque_settings_builder& osb, const yarn::model& m) const {
 
     const element_settings_factory f(osb);
     generator g(f, osb);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        e.accept(g);
-    }
+    for (const auto& e : m.elements())
+        e->accept(g);
     auto r(g.result());
+
     BOOST_LOG_SEV(lg, debug) << "Finished creating element settings repository."
                              << r;
     return r;
diff --git a/projects/quilt.cpp/src/types/settings/helper_settings_repository_factory.cpp b/projects/quilt.cpp/src/types/settings/helper_settings_repository_factory.cpp
index 1d56684..6dc68dc 100644
--- a/projects/quilt.cpp/src/types/settings/helper_settings_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/settings/helper_settings_repository_factory.cpp
@@ -42,10 +42,9 @@ make(const dynamic::repository& rp, const yarn::model& m) const {
 
     helper_settings_repository r;
     helper_settings_factory f(rp);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        const auto hs(f.make(e.extensions()));
-            r.by_id()[e.name().id()] = hs;
+    for (const auto& e : m.elements()) {
+        const auto hs(f.make(e->extensions()));
+            r.by_id()[e->name().id()] = hs;
     }
     BOOST_LOG_SEV(lg, debug) << "Finished making helper settings: " << r;
     return r;
diff --git a/projects/quilt.cpp/src/types/settings/streaming_settings_repository_factory.cpp b/projects/quilt.cpp/src/types/settings/streaming_settings_repository_factory.cpp
index 4c54d01..9d76b57 100644
--- a/projects/quilt.cpp/src/types/settings/streaming_settings_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/settings/streaming_settings_repository_factory.cpp
@@ -42,13 +42,12 @@ make(const dynamic::repository& rp, const yarn::model& m) const {
 
     streaming_settings_repository r;
     streaming_settings_factory f(rp);
-    for (const auto& pair : m.elements()) {
-        const auto& e(*pair.second);
-        const auto ss(f.make(e.extensions()));
+    for (const auto& e : m.elements()) {
+        const auto ss(f.make(e->extensions()));
         if (!ss)
             continue;
 
-        r.by_id()[e.name().id()] = *ss;
+        r.by_id()[e->name().id()] = *ss;
     }
     BOOST_LOG_SEV(lg, debug) << "Finished making streaming settings" << r;
     return r;
diff --git a/projects/quilt.cpp/src/types/workflow.cpp b/projects/quilt.cpp/src/types/workflow.cpp
index 2d4864f..bf670e1 100644
--- a/projects/quilt.cpp/src/types/workflow.cpp
+++ b/projects/quilt.cpp/src/types/workflow.cpp
@@ -107,10 +107,7 @@ std::forward_list<boost::shared_ptr<yarn::element> >
 workflow::extract_generatable_elements(const yarn::model& m) const {
     std::forward_list<boost::shared_ptr<yarn::element> > r;
 
-    // for (const auto& e : m.elements()) {
-    for (const auto& pair : m.elements()) {
-        const auto e(pair.second);
-
+    for (const auto& e : m.elements()) {
         if (e->generation_type() != yarn::generation_types::no_generation)
             r.push_front(e);
     }
diff --git a/projects/yarn/include/dogen/yarn/types/model.hpp b/projects/yarn/include/dogen/yarn/types/model.hpp
index 07daf2a..022ec00 100644
--- a/projects/yarn/include/dogen/yarn/types/model.hpp
+++ b/projects/yarn/include/dogen/yarn/types/model.hpp
@@ -25,9 +25,8 @@
 #pragma once
 #endif
 
-#include <string>
+#include <list>
 #include <algorithm>
-#include <unordered_map>
 #include <boost/shared_ptr.hpp>
 #include "dogen/yarn/types/name.hpp"
 #include "dogen/yarn/types/module.hpp"
@@ -52,7 +51,7 @@ public:
 public:
     model(
         const dogen::yarn::name& name,
-        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& elements,
+        const std::list<boost::shared_ptr<dogen::yarn::element> >& elements,
         const dogen::yarn::module& root_module,
         const bool has_generatable_types);
 
@@ -74,10 +73,10 @@ public:
     void name(const dogen::yarn::name&& v);
     /**@}*/
 
-    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& elements() const;
-    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& elements();
-    void elements(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& v);
-    void elements(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >&& v);
+    const std::list<boost::shared_ptr<dogen::yarn::element> >& elements() const;
+    std::list<boost::shared_ptr<dogen::yarn::element> >& elements();
+    void elements(const std::list<boost::shared_ptr<dogen::yarn::element> >& v);
+    void elements(const std::list<boost::shared_ptr<dogen::yarn::element> >&& v);
 
     /**
      * @brief The module that represents the model.
@@ -109,7 +108,7 @@ public:
 
 private:
     dogen::yarn::name name_;
-    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> > elements_;
+    std::list<boost::shared_ptr<dogen::yarn::element> > elements_;
     dogen::yarn::module root_module_;
     bool has_generatable_types_;
 };
diff --git a/projects/yarn/src/hash/model_hash.cpp b/projects/yarn/src/hash/model_hash.cpp
index 2bcc4ea..9078be7 100644
--- a/projects/yarn/src/hash/model_hash.cpp
+++ b/projects/yarn/src/hash/model_hash.cpp
@@ -37,11 +37,10 @@ inline std::size_t hash_boost_shared_ptr_dogen_yarn_element(const boost::shared_
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_element(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& v) {
+inline std::size_t hash_std_list_boost_shared_ptr_dogen_yarn_element(const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, i.first);
-        combine(seed, hash_boost_shared_ptr_dogen_yarn_element(i.second));
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_element(i));
     }
     return seed;
 }
@@ -55,7 +54,7 @@ std::size_t model_hasher::hash(const model& v) {
     std::size_t seed(0);
 
     combine(seed, v.name());
-    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_element(v.elements()));
+    combine(seed, hash_std_list_boost_shared_ptr_dogen_yarn_element(v.elements()));
     combine(seed, v.root_module());
     combine(seed, v.has_generatable_types());
 
diff --git a/projects/yarn/src/io/model_io.cpp b/projects/yarn/src/io/model_io.cpp
index 7596a1e..b3d9f68 100644
--- a/projects/yarn/src/io/model_io.cpp
+++ b/projects/yarn/src/io/model_io.cpp
@@ -20,19 +20,11 @@
  */
 #include <ostream>
 #include <boost/io/ios_state.hpp>
-#include <boost/algorithm/string.hpp>
 #include "dogen/yarn/io/name_io.hpp"
 #include "dogen/yarn/io/model_io.hpp"
 #include "dogen/yarn/io/module_io.hpp"
 #include "dogen/yarn/io/element_io.hpp"
 
-inline std::string tidy_up_string(std::string s) {
-    boost::replace_all(s, "\r\n", "<new_line>");
-    boost::replace_all(s, "\n", "<new_line>");
-    boost::replace_all(s, "\"", "<quote>");
-    return s;
-}
-
 namespace boost {
 
 inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::element>& v) {
@@ -51,17 +43,13 @@ inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& v) {
-    s << "[";
+inline std::ostream& operator<<(std::ostream& s, const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
+    s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
-        s << "[ { " << "\"__type__\": " << "\"key\"" << ", " << "\"data\": ";
-        s << "\"" << tidy_up_string(i->first) << "\"";
-        s << " }, { " << "\"__type__\": " << "\"value\"" << ", " << "\"data\": ";
-        s << i->second;
-        s << " } ]";
+        s << *i;
     }
-    s << " ] ";
+    s << "] ";
     return s;
 }
 
diff --git a/projects/yarn/src/serialization/model_ser.cpp b/projects/yarn/src/serialization/model_ser.cpp
index aa6b991..13fd8aa 100644
--- a/projects/yarn/src/serialization/model_ser.cpp
+++ b/projects/yarn/src/serialization/model_ser.cpp
@@ -19,15 +19,14 @@
  *
  */
 #include <boost/serialization/nvp.hpp>
+#include <boost/serialization/list.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
-#include <boost/serialization/string.hpp>
 #include <boost/archive/text_iarchive.hpp>
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>
 #include <boost/serialization/shared_ptr.hpp>
-#include <boost/serialization/unordered_map.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
 #include "dogen/yarn/serialization/name_ser.hpp"
diff --git a/projects/yarn/src/test_data/model_td.cpp b/projects/yarn/src/test_data/model_td.cpp
index ceceddd..2102ea1 100644
--- a/projects/yarn/src/test_data/model_td.cpp
+++ b/projects/yarn/src/test_data/model_td.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include <sstream>
 #include "dogen/yarn/test_data/name_td.hpp"
 #include "dogen/yarn/test_data/model_td.hpp"
 #include "dogen/yarn/test_data/module_td.hpp"
@@ -31,12 +30,6 @@ create_dogen_yarn_name(const unsigned int position) {
     return dogen::yarn::name_generator::create(position);
 }
 
-std::string create_std_string(const unsigned int position) {
-    std::ostringstream s;
-    s << "a_string_" << position;
-    return s.str();
-}
-
 dogen::yarn::element*
 create_dogen_yarn_element_ptr(const unsigned int position) {
     return dogen::yarn::element_generator::create_ptr(position);
@@ -49,10 +42,10 @@ create_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
     return r;
 }
 
-std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
-    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> > r;
+std::list<boost::shared_ptr<dogen::yarn::element> > create_std_list_boost_shared_ptr_dogen_yarn_element(unsigned int position) {
+    std::list<boost::shared_ptr<dogen::yarn::element> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_element(position + i)));
+        r.push_back(create_boost_shared_ptr_dogen_yarn_element(position + i));
     }
     return r;
 }
@@ -76,7 +69,7 @@ model_generator::model_generator() : position_(0) { }
 void model_generator::
 populate(const unsigned int position, result_type& v) {
     v.name(create_dogen_yarn_name(position + 0));
-    v.elements(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_element(position + 1));
+    v.elements(create_std_list_boost_shared_ptr_dogen_yarn_element(position + 1));
     v.root_module(create_dogen_yarn_module(position + 2));
     v.has_generatable_types(create_bool(position + 3));
 }
diff --git a/projects/yarn/src/types/model.cpp b/projects/yarn/src/types/model.cpp
index 54674f4..812762a 100644
--- a/projects/yarn/src/types/model.cpp
+++ b/projects/yarn/src/types/model.cpp
@@ -38,7 +38,7 @@ model::model()
 
 model::model(
     const dogen::yarn::name& name,
-    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& elements,
+    const std::list<boost::shared_ptr<dogen::yarn::element> >& elements,
     const dogen::yarn::module& root_module,
     const bool has_generatable_types)
     : name_(name),
@@ -83,19 +83,19 @@ void model::name(const dogen::yarn::name&& v) {
     name_ = std::move(v);
 }
 
-const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& model::elements() const {
+const std::list<boost::shared_ptr<dogen::yarn::element> >& model::elements() const {
     return elements_;
 }
 
-std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& model::elements() {
+std::list<boost::shared_ptr<dogen::yarn::element> >& model::elements() {
     return elements_;
 }
 
-void model::elements(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >& v) {
+void model::elements(const std::list<boost::shared_ptr<dogen::yarn::element> >& v) {
     elements_ = v;
 }
 
-void model::elements(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::element> >&& v) {
+void model::elements(const std::list<boost::shared_ptr<dogen::yarn::element> >&& v) {
     elements_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/transformer.cpp b/projects/yarn/src/types/transformer.cpp
index 76bd476..cd533f9 100644
--- a/projects/yarn/src/types/transformer.cpp
+++ b/projects/yarn/src/types/transformer.cpp
@@ -18,6 +18,7 @@
  * MA 02110-1301, USA.
  *
  */
+#include <unordered_set>
 #include <boost/make_shared.hpp>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
@@ -47,12 +48,14 @@ public:
 private:
     void add(boost::shared_ptr<element> e) {
         const auto id(e->name().id());
-        const auto r(result_.elements().insert(std::make_pair(id, e)));
-        if (!r.second) {
+        const auto i(processed_ids_.find(id));
+        if (i != processed_ids_.end()) {
             BOOST_LOG_SEV(lg, error) << duplicate_qualified_name << id;
             BOOST_THROW_EXCEPTION(
                 transformation_error(duplicate_qualified_name + id));
         }
+        processed_ids_.insert(id);
+        result_.elements().push_back(e);
     }
 
     template<typename Element>
@@ -79,6 +82,7 @@ public:
 
 private:
     model& result_;
+    std::unordered_set<std::string> processed_ids_;
 };
 
 }
