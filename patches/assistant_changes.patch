diff --git a/doc/agile/v1/sprint_backlog_05.org b/doc/agile/v1/sprint_backlog_05.org
index e76795923..4fc96c62e 100644
--- a/doc/agile/v1/sprint_backlog_05.org
+++ b/doc/agile/v1/sprint_backlog_05.org
@@ -881,6 +881,8 @@ Notes:
 - make is_enabled private in dependencies builder and see what breaks.
 
 *** STARTED Move enablement into yarn                                 :story:
+    CLOCK: [2017-09-16 Sat 15:42]
+    CLOCK: [2017-09-16 Sat 15:25]--[2017-09-16 Sat 15:32] =>  0:07
     CLOCK: [2017-09-16 Sat 15:04]--[2017-09-16 Sat 15:24] =>  0:20
     CLOCK: [2017-09-16 Sat 14:54]--[2017-09-16 Sat 15:03] =>  0:09
     CLOCK: [2017-09-16 Sat 13:43]--[2017-09-16 Sat 14:53] =>  1:10
@@ -926,6 +928,8 @@ Problems:
 To do:
 
 - kernel registrar type index map - done.
+- assistant to latch on to element; use new element properties where
+  possible.
 - c# formatter registrar type index map - done.
 - bug in template instantiating: artefact expansions do not seem to
   take kernel into account - done.
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/assistant.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/assistant.hpp
index f7f4b3dd0..44798e4f0 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/assistant.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formatters/assistant.hpp
@@ -55,8 +55,9 @@ namespace formatters {
  */
 class assistant final {
 public:
-    assistant(const context& ctx, const annotations::archetype_location& al,
-        const bool requires_header_guard, const std::string& id);
+    assistant(const context& ctx, const yarn::meta_model::element& e,
+        const annotations::archetype_location& al,
+        const bool requires_header_guard);
 
 private:
     /**
@@ -67,9 +68,8 @@ private:
 
 public:
     template<typename T>
-    static const T&
-    as(const std::string& /*archetype*/, const yarn::meta_model::element& e) {
-        return dynamic_cast<const T&>(e);
+    const T& as() const {
+        return dynamic_cast<const T&>(element_);
     }
 
     /**
@@ -259,28 +259,26 @@ private:
      * @brief Returns the decoration properties for a given yarn element.
      */
     const dogen::formatters::decoration_properties&
-    get_decoration_properties(const yarn::meta_model::element& e) const;
+    get_decoration_properties() const;
 
 public:
     /**
      * @brief Returns a scoped boilerplate formatter.
      */
     dogen::formatters::cpp::scoped_boilerplate_formatter
-    make_scoped_boilerplate_formatter(const yarn::meta_model::element& e);
+    make_scoped_boilerplate_formatter();
 
     /**
      * @brief Returns a scoped namespace formatter.
      */
     dogen::formatters::cpp::scoped_namespace_formatter
-    make_scoped_namespace_formatter(const std::list<std::string>& ns);
+    make_scoped_namespace_formatter();
 
     /**
      * @brief Creates the decoration preamble.
      */
     /**@{*/
-    void make_decoration_preamble(
-        const dogen::formatters::comment_styles cs,
-        const yarn::meta_model::element& e);
+    void make_decoration_preamble(const dogen::formatters::comment_styles cs);
     void make_decoration_preamble(
         const dogen::formatters::comment_styles cs,
         const boost::optional<dogen::formatters::decoration_properties> dc);
@@ -323,7 +321,7 @@ public:
      * @brief Creates any helper methods that may be required for this
      * formatter.
      */
-    void add_helper_methods(const std::string& element_id);
+    void add_helper_methods();
 
     /**
      * @brief Returns the correct streaming invocation for the
@@ -384,9 +382,9 @@ public:
     dogen::formatters::artefact make_artefact() const;
 
 private:
+    const yarn::meta_model::element& element_;
     std::ostringstream stream_;
     boost::iostreams::filtering_ostream filtering_stream_;
-    const std::string element_id_;
     const context& context_;
     formattables::artefact_properties artefact_properties_;
     const annotations::archetype_location archetype_location_;
diff --git a/projects/quilt.cpp/src/types/formatters/assistant.cpp b/projects/quilt.cpp/src/types/formatters/assistant.cpp
index 22d25dd36..1907bf129 100644
--- a/projects/quilt.cpp/src/types/formatters/assistant.cpp
+++ b/projects/quilt.cpp/src/types/formatters/assistant.cpp
@@ -102,15 +102,15 @@ get_identifiable_and_qualified(const IdentifiableAndQualified& iaq) {
 }
 
 assistant::
-assistant(const context& ctx, const annotations::archetype_location& al,
-    const bool requires_header_guard, const std::string& id) :
-    element_id_(id),
-    context_(ctx),
+assistant(const context& ctx, const yarn::meta_model::element& e,
+    const annotations::archetype_location& al,
+    const bool requires_header_guard) :
+    element_(e), context_(ctx),
     artefact_properties_(
-        obtain_artefact_properties(element_id_, al.archetype())),
+        obtain_artefact_properties(element_.name().id(), al.archetype())),
     archetype_location_(al), requires_header_guard_(requires_header_guard) {
 
-    BOOST_LOG_SEV(lg, debug) << "Processing element: " << element_id_
+    BOOST_LOG_SEV(lg, debug) << "Processing element: " << element_.name().id()
                              << " for archetype: " << al.archetype();
 
     dogen::formatters::indent_filter::push(filtering_stream_, 4);
@@ -204,7 +204,7 @@ std::string assistant::get_product_name(const yarn::meta_model::name& n) const {
 const formattables::element_properties& assistant::obtain_element_properties(
     const std::string& element_id) const {
 
-    if (element_id == element_id_)
+    if (element_id == element_.name().id())
         return context_.element_properties();
 
     const auto& formattables(context_.model().formattables());
@@ -260,11 +260,14 @@ assistant::make_namespaces(const yarn::meta_model::name& n) const {
 }
 
 bool assistant::is_archetype_enabled(const std::string& archetype) const {
-    yarn::meta_model::element_archetype ea(element_id_, archetype);
-    const auto& eafe(context_.enabled_archetype_for_element());
-    const auto i(eafe.find(ea));
-    const bool is_disabled(i == eafe.end());
-    return !is_disabled;
+    const auto& ap(element_.element_properties().artefact_properties());
+    const auto i(ap.find(archetype));
+    if (i == ap.end()) {
+        BOOST_LOG_SEV(lg, error) << artefact_properties_missing << archetype;
+        BOOST_THROW_EXCEPTION(
+            formatting_error(artefact_properties_missing + archetype));
+    }
+    return i->second.enabled();
 }
 
 bool assistant::is_facet_enabled(const std::string& facet) const {
@@ -340,15 +343,15 @@ bool assistant::is_odb_facet_enabled() const {
     return is_facet_enabled(traits::facet());
 }
 
-const dogen::formatters::decoration_properties& assistant::
-get_decoration_properties(const yarn::meta_model::element& e) const {
-    const auto& ep(e.element_properties());
+const dogen::formatters::decoration_properties&
+assistant::get_decoration_properties() const {
+    const auto& ep(element_.element_properties());
     return ep.decoration_properties();
 }
 
 dogen::formatters::cpp::scoped_boilerplate_formatter
-assistant::make_scoped_boilerplate_formatter(const yarn::meta_model::element& e) {
-    const auto dp(get_decoration_properties(e));
+assistant::make_scoped_boilerplate_formatter() {
+    const auto dp(get_decoration_properties());
     const auto& art_props(artefact_properties_);
     const auto& deps(art_props.inclusion_dependencies());
     const auto& hg(art_props.header_guard());
@@ -358,16 +361,16 @@ assistant::make_scoped_boilerplate_formatter(const yarn::meta_model::element& e)
 }
 
 dogen::formatters::cpp::scoped_namespace_formatter
-assistant::make_scoped_namespace_formatter(const std::list<std::string>& ns) {
+assistant::make_scoped_namespace_formatter() {
+    const auto ns(make_namespaces(element_.name()));
     return dogen::formatters::cpp::scoped_namespace_formatter(
         stream(), ns, false/*create_anonymous_namespace*/,
         true/*add_new_line*/);
 }
 
-void assistant::
-make_decoration_preamble(const dogen::formatters::comment_styles cs,
-    const yarn::meta_model::element& e) {
-    const auto dp(get_decoration_properties(e));
+void assistant::make_decoration_preamble(
+    const dogen::formatters::comment_styles cs) {
+    const auto dp(get_decoration_properties());
     make_decoration_preamble(cs, dp);
 }
 
@@ -516,9 +519,9 @@ is_streaming_enabled(const formattables::helper_properties& hp) const {
     return in_types_class_implementation && hp.in_inheritance_relationship();
 }
 
-void assistant::add_helper_methods(const std::string& element_id) {
+void assistant::add_helper_methods() {
     BOOST_LOG_SEV(lg, debug) << "Generating helper methods. Element: "
-                             << element_id;
+                             << element_.name().id();
 
     if (context_.element_properties().helper_properties().empty())
         BOOST_LOG_SEV(lg, debug) << "No helper methods found.";
diff --git a/projects/quilt.cpp/src/types/formatters/msbuild_targets_formatter.stitch b/projects/quilt.cpp/src/types/formatters/msbuild_targets_formatter.stitch
index a87ce3c88..6b3ff7963 100644
--- a/projects/quilt.cpp/src/types/formatters/msbuild_targets_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/msbuild_targets_formatter.stitch
@@ -67,13 +67,12 @@ std::list<std::string> msbuild_targets_formatter::inclusion_dependencies(
 
 dogen::formatters::artefact msbuild_targets_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
-    const auto& c(a.as<fabric::msbuild_targets>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
+    const auto& c(a.as<fabric::msbuild_targets>());
 
     {
         const auto cs(dogen::formatters::comment_styles::xml_style);
-        a.make_decoration_preamble(cs, e);
+        a.make_decoration_preamble(cs);
         const auto model_name(a.get_identifiable_model_name(c.name()));
         const auto product_name(a.get_product_name(c.name()));
         const auto targets(c.odb_targets());
diff --git a/projects/quilt.cpp/src/types/formatters/odb/class_header_formatter.stitch b/projects/quilt.cpp/src/types/formatters/odb/class_header_formatter.stitch
index 76291a56a..b8920a26c 100644
--- a/projects/quilt.cpp/src/types/formatters/odb/class_header_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/odb/class_header_formatter.stitch
@@ -41,14 +41,13 @@ std::list<std::string> class_header_formatter::inclusion_dependencies(
 dogen::formatters::artefact
 class_header_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
-    const auto& o(a.as<yarn::meta_model::object>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
+    const auto& o(a.as<yarn::meta_model::object>());
 
     {
         const auto sn(o.name().simple());
         const auto qn(a.get_qualified_name(o.name()));
-        auto sbf(a.make_scoped_boilerplate_formatter(e));
+        auto sbf(a.make_scoped_boilerplate_formatter());
         const auto top_level_pragmas(a.get_odb_pragmas());
         if (top_level_pragmas.empty()) {
 #>
@@ -57,8 +56,7 @@ format(const context& ctx, const yarn::meta_model::element& e) const {
 <#+
         } else {
             {
-                const auto ns(a.make_namespaces(o.name()));
-                auto snf(a.make_scoped_namespace_formatter(ns));
+                auto snf(a.make_scoped_namespace_formatter());
 #>
 
 #ifdef ODB_COMPILER
@@ -71,7 +69,8 @@ format(const context& ctx, const yarn::meta_model::element& e) const {
 
                 bool is_first(true);
                 for (const auto& attr : o.local_attributes()) {
-                    const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().id()));
+                    const auto attr_id(attr.name().id());
+                    const auto attr_level_pragmas(a.get_odb_pragmas(attr_id));
                     for (const auto pg : attr_level_pragmas) {
                         if (is_first)
 #>
diff --git a/projects/quilt.cpp/src/types/formatters/odb/common_odb_options_formatter.stitch b/projects/quilt.cpp/src/types/formatters/odb/common_odb_options_formatter.stitch
index 0b0b5f33d..dbf9d31cb 100644
--- a/projects/quilt.cpp/src/types/formatters/odb/common_odb_options_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/odb/common_odb_options_formatter.stitch
@@ -71,13 +71,12 @@ std::list<std::string> common_odb_options_formatter::inclusion_dependencies(
 
 dogen::formatters::artefact common_odb_options_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
-    const auto& o(a.as<fabric::common_odb_options>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
+    const auto& o(a.as<fabric::common_odb_options>());
 
     {
         const auto cs(dogen::formatters::comment_styles::shell_style);
-        a.make_decoration_preamble(cs, e);
+        a.make_decoration_preamble(cs);
 
         if (!a.is_cpp_standard_98()) {
 #>
diff --git a/projects/quilt.cpp/src/types/formatters/odb/enum_header_formatter.stitch b/projects/quilt.cpp/src/types/formatters/odb/enum_header_formatter.stitch
index ac69338e7..493da506a 100644
--- a/projects/quilt.cpp/src/types/formatters/odb/enum_header_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/odb/enum_header_formatter.stitch
@@ -30,15 +30,13 @@ std::list<std::string> enum_header_formatter::inclusion_dependencies(
 
 dogen::formatters::artefact enum_header_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
-    const auto& ye(a.as<yarn::meta_model::enumeration>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
+    const auto& ye(a.as<yarn::meta_model::enumeration>());
 
     {
-        auto sbf(a.make_scoped_boilerplate_formatter(e));
+        auto sbf(a.make_scoped_boilerplate_formatter());
         {
-            const auto ns(a.make_namespaces(ye.name()));
-            auto snf(a.make_scoped_namespace_formatter(ns));
+            auto snf(a.make_scoped_namespace_formatter());
 #>
 
 #ifdef ODB_COMPILER
diff --git a/projects/quilt.cpp/src/types/formatters/odb/object_odb_options_formatter.stitch b/projects/quilt.cpp/src/types/formatters/odb/object_odb_options_formatter.stitch
index 889b3e17a..cc9d55da2 100644
--- a/projects/quilt.cpp/src/types/formatters/odb/object_odb_options_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/odb/object_odb_options_formatter.stitch
@@ -71,13 +71,12 @@ std::list<std::string> object_odb_options_formatter::inclusion_dependencies(
 
 dogen::formatters::artefact object_odb_options_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), false/*requires_header_guard*/, id);
-    const auto& ooo(a.as<fabric::object_odb_options>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), false/*requires_header_guard*/);
+    const auto& ooo(a.as<fabric::object_odb_options>());
 
     {
         const auto cs(dogen::formatters::comment_styles::shell_style);
-        a.make_decoration_preamble(cs, e);
+        a.make_decoration_preamble(cs);
 #>
 # epilogue
 --odb-epilogue <#= ooo.epilogue() #>
diff --git a/projects/quilt.cpp/src/types/formatters/odb/primitive_header_formatter.stitch b/projects/quilt.cpp/src/types/formatters/odb/primitive_header_formatter.stitch
index 93a4640b9..3c251e76b 100644
--- a/projects/quilt.cpp/src/types/formatters/odb/primitive_header_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/odb/primitive_header_formatter.stitch
@@ -33,14 +33,13 @@ std::list<std::string> primitive_header_formatter::inclusion_dependencies(
 
 dogen::formatters::artefact primitive_header_formatter::
 format(const context& ctx, const yarn::meta_model::element& e) const {
-    const auto id(e.name().id());
-    assistant a(ctx, archetype_location(), true/*requires_header_guard*/, id);
-    const auto& p(a.as<yarn::meta_model::primitive>(static_artefact(), e));
+    assistant a(ctx, e, archetype_location(), true/*requires_header_guard*/);
+    const auto& p(a.as<yarn::meta_model::primitive>());
 
     {
         const auto sn(p.name().simple());
         const auto qn(a.get_qualified_name(p.name()));
-        auto sbf(a.make_scoped_boilerplate_formatter(e));
+        auto sbf(a.make_scoped_boilerplate_formatter());
         const auto top_level_pragmas(a.get_odb_pragmas());
         const auto attr(p.value_attribute());
 
@@ -51,8 +50,7 @@ format(const context& ctx, const yarn::meta_model::element& e) const {
 <#+
         } else {
             {
-                const auto ns(a.make_namespaces(p.name()));
-                auto snf(a.make_scoped_namespace_formatter(ns));
+                auto snf(a.make_scoped_namespace_formatter());
 #>
 
 #ifdef ODB_COMPILER
@@ -64,7 +62,8 @@ format(const context& ctx, const yarn::meta_model::element& e) const {
 <#+
 
                 bool is_first(true);
-                const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().id()));
+                const auto attr_id(attr.name().id());
+                const auto attr_level_pragmas(a.get_odb_pragmas(attr_id));
                 for (const auto pg : attr_level_pragmas) {
                         if (is_first)
 #>
