diff --git a/doc/agile/v1/sprint_backlog_04.org b/doc/agile/v1/sprint_backlog_04.org
index 8e81d876e..5c8359868 100644
--- a/doc/agile/v1/sprint_backlog_04.org
+++ b/doc/agile/v1/sprint_backlog_04.org
@@ -14,16 +14,17 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2017-08-01 Tue 21:25]
+#+CAPTION: Clock summary at [2017-08-02 Wed 18:52]
 | <75>                                                                        |        |      |      |       |
 | Headline                                                                    | Time   |      |      |     % |
 |-----------------------------------------------------------------------------+--------+------+------+-------|
-| *Total time*                                                                | *0:48* |      |      | 100.0 |
+| *Total time*                                                                | *2:17* |      |      | 100.0 |
 |-----------------------------------------------------------------------------+--------+------+------+-------|
-| Stories                                                                     | 0:48   |      |      | 100.0 |
-| Active                                                                      |        | 0:48 |      | 100.0 |
-| COMPLETED Edit release notes for previous sprint                            |        |      | 0:35 |  72.9 |
-| STARTED Sprint and product backlog grooming                                 |        |      | 0:13 |  27.1 |
+| Stories                                                                     | 2:17   |      |      | 100.0 |
+| Active                                                                      |        | 2:17 |      | 100.0 |
+| COMPLETED Edit release notes for previous sprint                            |        |      | 0:35 |  25.5 |
+| STARTED Sprint and product backlog grooming                                 |        |      | 0:13 |   9.5 |
+| STARTED Use shared pointers in all models                                   |        |      | 1:29 |  65.0 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -79,6 +80,14 @@ For all other architectures and/or operative systems, you will need to build Dog
 
 Updates to sprint and product backlog.
 
+*** STARTED Use shared pointers in all models                         :story:
+    CLOCK: [2017-08-02 Wed 18:05]--[2017-08-02 Wed 18:52] =>  0:47
+    CLOCK: [2017-08-02 Wed 07:41]--[2017-08-02 Wed 08:23] =>  0:42
+
+We need to start using unique pointers in exogenous model, and shared
+pointers in intermediate model. We should transfer the ownership as we
+go along, making the transformers/adapters mutable.
+
 *** Rename =meta_type= in JSON                                        :story:
 
 Now we have meta-names we should use the same terminology for JSON
@@ -178,12 +187,6 @@ Steps:
 - process element annotation.
 - process attribute annotations, if stateful.
 
-*** Use shared pointers in all models                                 :story:
-
-We need to start using unique pointers in exogenous model, and shared
-pointers in intermediate model. We should transfer the ownership as we
-go along, making the transformers/adapters mutable.
-
 *** Update repository in yarn.dia to use pointers                     :story:
 
 At present we are using a three-way map from dia object (child) to dia
diff --git a/projects/input_models/yarn.dia b/projects/input_models/yarn.dia
index 59cb032a5..a796351cc 100644
--- a/projects/input_models/yarn.dia
+++ b/projects/input_models/yarn.dia
@@ -5083,7 +5083,7 @@ meta-types (concepts) and non-types (modules and backend specific entities).#</d
             <dia:string>#root_module#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#module#</dia:string>
+            <dia:string>#boost::shared_ptr&lt;module&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5476,7 +5476,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#modules#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, module&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;module&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5499,7 +5499,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#concepts#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, concept&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;concept&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5522,7 +5522,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#builtins#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, builtin&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;builtin&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5545,7 +5545,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#enumerations#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, enumeration&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;enumeration&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5568,7 +5568,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#primitives#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, primitive&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;primitive&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5591,7 +5591,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#objects#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, object&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;object&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5614,7 +5614,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#exceptions#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, exception&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;exception&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5637,7 +5637,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#visitors#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::unordered_map&lt;std::string, visitor&gt;#</dia:string>
+            <dia:string>#std::unordered_map&lt;std::string, boost::shared_ptr&lt;visitor&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -5706,7 +5706,7 @@ Leaves are types concrete types which have a parent.#</dia:string>
             <dia:string>#root_module#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#module#</dia:string>
+            <dia:string>#boost::shared_ptr&lt;module&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -7886,7 +7886,7 @@ This is used to break cycles where required.#</dia:string>
         <dia:point val="-86.2425,-42.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-159.588,-42.65;-85.3925,-18.95"/>
+        <dia:rectangle val="-159.587,-42.65;-85.3925,-18.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -7982,7 +7982,7 @@ space.#</dia:string>
         <dia:point val="-146.93,-93.7"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-146.999,-93.7687;-140.607,-89.6324"/>
+        <dia:rectangle val="-146.999,-93.7687;-140.606,-89.6324"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -9707,13 +9707,13 @@ space.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O72">
       <dia:attribute name="obj_pos">
-        <dia:point val="-31,-51"/>
+        <dia:point val="-30,-51"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-31.05,-51.05;-10.43,-46.55"/>
+        <dia:rectangle val="-30.05,-51.05;-9.43,-46.55"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-31,-51"/>
+        <dia:point val="-30,-51"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="20.52"/>
@@ -9888,13 +9888,13 @@ space.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O73">
       <dia:attribute name="obj_pos">
-        <dia:point val="-15,-33"/>
+        <dia:point val="-9,-33"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-15.05,-33.05;-8.675,-28.55"/>
+        <dia:rectangle val="-9.05,-33.05;-2.675,-28.55"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-15,-33"/>
+        <dia:point val="-9,-33"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="6.2750000000000004"/>
@@ -10082,19 +10082,19 @@ space.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-20.74,-46.6"/>
+        <dia:point val="-19.74,-46.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-21.49,-47.35;-11.6625,-32.2"/>
+        <dia:rectangle val="-20.49,-47.35;-5.6625,-32.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-20.74,-46.6"/>
-        <dia:point val="-20.74,-42"/>
-        <dia:point val="-11.8625,-42"/>
-        <dia:point val="-11.8625,-33"/>
+        <dia:point val="-19.74,-46.6"/>
+        <dia:point val="-19.74,-42"/>
+        <dia:point val="-5.8625,-42"/>
+        <dia:point val="-5.8625,-33"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -10157,7 +10157,7 @@ space.#</dia:string>
         <dia:point val="8.53,-58.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-10.53,-59.55;9.28,-50.2"/>
+        <dia:rectangle val="-9.53,-59.55;9.28,-50.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -10165,8 +10165,8 @@ space.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="8.53,-58.8"/>
         <dia:point val="8.53,-55"/>
-        <dia:point val="-10.48,-55"/>
-        <dia:point val="-10.48,-51"/>
+        <dia:point val="-9.48,-55"/>
+        <dia:point val="-9.48,-51"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -11238,7 +11238,7 @@ space.#</dia:string>
         <dia:point val="-129.585,-27"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-137.523,-27.75;-128.835,-18.2501"/>
+        <dia:rectangle val="-137.522,-27.75;-128.835,-18.2501"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -11310,7 +11310,7 @@ space.#</dia:string>
         <dia:point val="-54.66,-66.8"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-55.41,-67.55;-30.8,-50.2"/>
+        <dia:rectangle val="-55.41,-67.55;-29.8,-50.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -11318,8 +11318,8 @@ space.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-54.66,-66.8"/>
         <dia:point val="-54.66,-55"/>
-        <dia:point val="-31,-55"/>
-        <dia:point val="-31,-51"/>
+        <dia:point val="-30,-55"/>
+        <dia:point val="-30,-51"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -12115,7 +12115,7 @@ space.#</dia:string>
         <dia:point val="-178.505,-29.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-186.678,-30.15;-177.755,-18.2"/>
+        <dia:rectangle val="-186.677,-30.15;-177.755,-18.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -19531,7 +19531,7 @@ space.#</dia:string>
         <dia:point val="-151.012,109.802"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-151.762,109.052;-123.264,129.002"/>
+        <dia:rectangle val="-151.762,109.052;-123.265,129.002"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -19747,7 +19747,7 @@ space.#</dia:string>
         <dia:point val="-136.012,132.602"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-136.762,131.852;-130.415,142.002"/>
+        <dia:rectangle val="-136.762,131.852;-130.414,142.002"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -22060,7 +22060,7 @@ space.#</dia:string>
         <dia:point val="-103.807,106.202"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-125.669,96.7524;-103.057,107.002"/>
+        <dia:rectangle val="-125.67,96.7524;-103.057,107.002"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -27580,7 +27580,7 @@ another.#</dia:string>
         <dia:point val="187.185,62.6501"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="186.435,61.9001;196.977,71.8"/>
+        <dia:rectangle val="186.435,61.9001;196.978,71.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -33170,18 +33170,18 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-10.48,-49.1"/>
+        <dia:point val="-9.48,-49.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-11.23,-49.9;-1.95,-45.9"/>
+        <dia:rectangle val="-10.23,-49.9;-1.95,-45.9"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-10.48,-49.1"/>
-        <dia:point val="-7,-49.1"/>
-        <dia:point val="-7,-46.7"/>
+        <dia:point val="-9.48,-49.1"/>
+        <dia:point val="-6,-49.1"/>
+        <dia:point val="-6,-46.7"/>
         <dia:point val="-2,-46.7"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
@@ -34133,7 +34133,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-180.917,93.2024"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-193.44,85.9524;-180.167,94.0024"/>
+        <dia:rectangle val="-193.439,85.9524;-180.167,94.0024"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -34432,7 +34432,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-160.397,93.2024"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-170.44,85.1524;-159.647,94.0024"/>
+        <dia:rectangle val="-170.439,85.1524;-159.647,94.0024"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -35006,7 +35006,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-161.464,109.802"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-169.514,109.052;-160.714,128.953"/>
+        <dia:rectangle val="-169.514,109.052;-160.714,128.952"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -35015,7 +35015,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-161.464,109.802"/>
         <dia:point val="-161.464,123.202"/>
         <dia:point val="-169.464,123.202"/>
-        <dia:point val="-169.464,128.153"/>
+        <dia:point val="-169.464,128.152"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -35177,7 +35177,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-100.362,-56.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-126.682,-56.45;-99.5125,-46.95"/>
+        <dia:rectangle val="-126.682,-56.45;-99.512,-46.95"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -35255,7 +35255,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-100.362,-60"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-105.33,-70.05;-99.6125,-59.2"/>
+        <dia:rectangle val="-105.33,-70.05;-99.612,-59.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -35949,16 +35949,16 @@ Temporary data structure used to build trees of names.#</dia:string>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O268">
       <dia:attribute name="obj_pos">
-        <dia:point val="-50,-33"/>
+        <dia:point val="-52,-33"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-50.05,-33.05;-19.805,-25.35"/>
+        <dia:rectangle val="-52.05,-33.05;-14.49,-25.35"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-50,-33"/>
+        <dia:point val="-52,-33"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="30.145"/>
+        <dia:real val="37.460000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="7.5999999999999996"/>
@@ -36056,7 +36056,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#modules#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, module&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;module&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36079,7 +36079,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#concepts#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, concept&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;concept&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36102,7 +36102,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#builtins#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, builtin&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;builtin&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36125,7 +36125,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#enumerations#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, enumeration&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;enumeration&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36148,7 +36148,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#primitives#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, primitive&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;primitive&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36171,7 +36171,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#objects#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, object&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;object&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36194,7 +36194,7 @@ Temporary data structure used to build trees of names.#</dia:string>
             <dia:string>#exceptions#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, exception&gt;&gt;#</dia:string>
+            <dia:string>#std::list&lt;std::pair&lt;annotations::scribble_group, boost::shared_ptr&lt;exception&gt;&gt;&gt;#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
@@ -36258,17 +36258,17 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-34.9275,-33"/>
+        <dia:point val="-33.27,-33"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-78.535,-51.05;-34.1775,-31.4"/>
+        <dia:rectangle val="-78.535,-51.8;-32.52,-32.2"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-34.9275,-33"/>
-        <dia:point val="-34.9275,-51"/>
+        <dia:point val="-33.27,-33"/>
+        <dia:point val="-33.27,-51"/>
         <dia:point val="-78.485,-51"/>
         <dia:point val="-78.485,-47"/>
       </dia:attribute>
@@ -36493,7 +36493,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-82.545,48.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-83.295,46.05;-75.95,49.7"/>
+        <dia:rectangle val="-83.295,45.3;-75.95,48.9"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -36742,7 +36742,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-115,48.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-121.36,46.05;-114.25,49.7"/>
+        <dia:rectangle val="-121.36,45.3;-114.25,48.9"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -36991,7 +36991,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-98.7725,49.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-99.5225,48.65;-98.0225,57.6"/>
+        <dia:rectangle val="-99.5225,48.65;-98.0225,56.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -37221,7 +37221,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="-56.635,46.1"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-57.385,45.35;-45.95,49.3"/>
+        <dia:rectangle val="-57.385,45.3;-45.95,48.5"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -37747,7 +37747,7 @@ Temporary data structure used to build trees of names.#</dia:string>
         <dia:point val="77.52,89.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="76.77,88.65;88.2675,99.6"/>
+        <dia:rectangle val="76.77,88.65;88.2675,98.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
index 92e9052cb..43e7e5a7d 100644
--- a/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/elements_traversal.hpp
@@ -47,6 +47,111 @@ template<typename TraversalVisitor>
 inline void elements_traversal(const meta_model::intermediate_model& m,
     const TraversalVisitor& v, const bool include_injected_elements = false) {
     for (const auto& pair : m.modules())
+        v(*pair.second);
+
+    for (const auto& pair : m.concepts())
+        v(*pair.second);
+
+    for (const auto& pair : m.builtins())
+        v(*pair.second);
+
+    for (const auto& pair : m.enumerations())
+        v(*pair.second);
+
+    for (const auto& pair : m.primitives())
+        v(*pair.second);
+
+    for (const auto& pair : m.objects())
+        v(*pair.second);
+
+    for (const auto& pair : m.exceptions())
+        v(*pair.second);
+
+    for (const auto& pair : m.visitors())
+        v(*pair.second);
+
+    if (include_injected_elements) {
+        for (const auto ptr : m.injected_elements())
+            v(*ptr);
+    }
+}
+
+template<typename TraversalVisitor>
+inline void elements_traversal(const meta_model::intermediate_model& m,
+    TraversalVisitor& v, const bool include_injected_elements = false) {
+    for (auto& pair : m.modules())
+        v(*pair.second);
+
+    for (auto& pair : m.concepts())
+        v(*pair.second);
+
+    for (auto& pair : m.builtins())
+        v(*pair.second);
+
+    for (auto& pair : m.enumerations())
+        v(*pair.second);
+
+    for (auto& pair : m.primitives())
+        v(*pair.second);
+
+    for (auto& pair : m.objects())
+        v(*pair.second);
+
+    for (auto& pair : m.exceptions())
+        v(*pair.second);
+
+    for (auto& pair : m.visitors())
+        v(*pair.second);
+
+    if (include_injected_elements) {
+        for (auto ptr : m.injected_elements())
+            v(*ptr);
+    }
+}
+
+template<typename TraversalVisitor>
+inline void elements_traversal(meta_model::intermediate_model& m,
+    TraversalVisitor& v, const bool include_injected_elements = false) {
+    for (auto& pair : m.modules())
+        v(*pair.second);
+
+    for (auto& pair : m.concepts())
+        v(*pair.second);
+
+    for (auto& pair : m.builtins())
+        v(*pair.second);
+
+    for (auto& pair : m.enumerations())
+        v(*pair.second);
+
+    for (auto& pair : m.primitives())
+        v(*pair.second);
+
+    for (auto& pair : m.objects())
+        v(*pair.second);
+
+    for (auto& pair : m.exceptions())
+        v(*pair.second);
+
+    for (auto& pair : m.visitors())
+        v(*pair.second);
+
+    if (include_injected_elements) {
+        for (auto ptr : m.injected_elements())
+            v(*ptr);
+    }
+}
+/**@}*/
+
+/**
+ * @brief Performs a traversal across all element pointers in an
+ * intermediate model.
+ */
+/**@{*/
+template<typename TraversalVisitor>
+inline void shared_elements_traversal(const meta_model::intermediate_model& m,
+    const TraversalVisitor& v, const bool include_injected_elements = false) {
+    for (const auto& pair : m.modules())
         v(pair.second);
 
     for (const auto& pair : m.concepts())
@@ -72,12 +177,12 @@ inline void elements_traversal(const meta_model::intermediate_model& m,
 
     if (include_injected_elements) {
         for (const auto ptr : m.injected_elements())
-            v(*ptr);
+            v(ptr);
     }
 }
 
 template<typename TraversalVisitor>
-inline void elements_traversal(const meta_model::intermediate_model& m,
+inline void shared_elements_traversal(const meta_model::intermediate_model& m,
     TraversalVisitor& v, const bool include_injected_elements = false) {
     for (auto& pair : m.modules())
         v(pair.second);
@@ -105,12 +210,12 @@ inline void elements_traversal(const meta_model::intermediate_model& m,
 
     if (include_injected_elements) {
         for (auto ptr : m.injected_elements())
-            v(*ptr);
+            v(ptr);
     }
 }
 
 template<typename TraversalVisitor>
-inline void elements_traversal(meta_model::intermediate_model& m,
+inline void shared_elements_traversal(meta_model::intermediate_model& m,
     TraversalVisitor& v, const bool include_injected_elements = false) {
     for (auto& pair : m.modules())
         v(pair.second);
@@ -138,7 +243,7 @@ inline void elements_traversal(meta_model::intermediate_model& m,
 
     if (include_injected_elements) {
         for (auto ptr : m.injected_elements())
-            v(*ptr);
+            v(ptr);
     }
 }
 /**@}*/
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/exogenous_model.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/exogenous_model.hpp
index c240aa886..4bee16595 100644
--- a/projects/yarn/include/dogen/yarn/types/meta_model/exogenous_model.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/exogenous_model.hpp
@@ -28,14 +28,15 @@
 #include <list>
 #include <utility>
 #include <algorithm>
-#include "dogen/yarn/types/meta_model/module.hpp"
-#include "dogen/yarn/types/meta_model/object.hpp"
-#include "dogen/yarn/types/meta_model/builtin.hpp"
-#include "dogen/yarn/types/meta_model/concept.hpp"
-#include "dogen/yarn/types/meta_model/exception.hpp"
-#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include <boost/shared_ptr.hpp>
 #include "dogen/annotations/types/scribble_group.hpp"
-#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/module_fwd.hpp"
+#include "dogen/yarn/types/meta_model/object_fwd.hpp"
+#include "dogen/yarn/types/meta_model/builtin_fwd.hpp"
+#include "dogen/yarn/types/meta_model/concept_fwd.hpp"
+#include "dogen/yarn/types/meta_model/exception_fwd.hpp"
+#include "dogen/yarn/types/meta_model/primitive_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumeration_fwd.hpp"
 #include "dogen/yarn/serialization/meta_model/exogenous_model_fwd_ser.hpp"
 
 namespace dogen {
@@ -51,13 +52,13 @@ public:
 
 public:
     exogenous_model(
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& modules,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& concepts,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& builtins,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& enumerations,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& primitives,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& objects,
-        const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exceptions);
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& modules,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& concepts,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& builtins,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& enumerations,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& primitives,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& objects,
+        const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exceptions);
 
 private:
     template<typename Archive>
@@ -67,40 +68,40 @@ private:
     friend void boost::serialization::load(Archive& ar, dogen::yarn::meta_model::exogenous_model& v, unsigned int version);
 
 public:
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& modules() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& modules();
-    void modules(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& v);
-    void modules(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& concepts() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& concepts();
-    void concepts(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& v);
-    void concepts(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& builtins() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& builtins();
-    void builtins(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& v);
-    void builtins(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& enumerations() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& enumerations();
-    void enumerations(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& v);
-    void enumerations(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& primitives() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& primitives();
-    void primitives(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& v);
-    void primitives(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& objects() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& objects();
-    void objects(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& v);
-    void objects(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >&& v);
-
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exceptions() const;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exceptions();
-    void exceptions(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& v);
-    void exceptions(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >&& v);
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& modules() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& modules();
+    void modules(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& v);
+    void modules(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& concepts() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& concepts();
+    void concepts(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& v);
+    void concepts(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& builtins() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& builtins();
+    void builtins(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& v);
+    void builtins(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& enumerations() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& enumerations();
+    void enumerations(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& v);
+    void enumerations(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& primitives() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& primitives();
+    void primitives(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& v);
+    void primitives(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& objects() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& objects();
+    void objects(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& v);
+    void objects(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >&& v);
+
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exceptions() const;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exceptions();
+    void exceptions(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& v);
+    void exceptions(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >&& v);
 
 public:
     bool operator==(const exogenous_model& rhs) const;
@@ -113,13 +114,13 @@ public:
     exogenous_model& operator=(exogenous_model other);
 
 private:
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> > modules_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> > concepts_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> > builtins_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> > enumerations_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> > primitives_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> > objects_;
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> > exceptions_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > > modules_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > > concepts_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > > builtins_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > > enumerations_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > > primitives_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > > objects_;
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > > exceptions_;
 };
 
 } } }
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp
index 6b9234515..f93f5f6ab 100644
--- a/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/intermediate_model.hpp
@@ -33,19 +33,19 @@
 #include <boost/optional.hpp>
 #include <boost/shared_ptr.hpp>
 #include "dogen/yarn/types/meta_model/name.hpp"
-#include "dogen/yarn/types/meta_model/module.hpp"
-#include "dogen/yarn/types/meta_model/object.hpp"
-#include "dogen/yarn/types/meta_model/builtin.hpp"
-#include "dogen/yarn/types/meta_model/concept.hpp"
-#include "dogen/yarn/types/meta_model/visitor.hpp"
 #include "dogen/yarn/hash/meta_model/name_hash.hpp"
-#include "dogen/yarn/types/meta_model/exception.hpp"
 #include "dogen/yarn/types/meta_model/languages.hpp"
-#include "dogen/yarn/types/meta_model/primitive.hpp"
 #include "dogen/annotations/types/scribble_group.hpp"
+#include "dogen/yarn/types/meta_model/module_fwd.hpp"
+#include "dogen/yarn/types/meta_model/object_fwd.hpp"
+#include "dogen/yarn/types/meta_model/builtin_fwd.hpp"
+#include "dogen/yarn/types/meta_model/concept_fwd.hpp"
 #include "dogen/yarn/types/meta_model/element_fwd.hpp"
-#include "dogen/yarn/types/meta_model/enumeration.hpp"
+#include "dogen/yarn/types/meta_model/visitor_fwd.hpp"
 #include "dogen/yarn/types/meta_model/origin_types.hpp"
+#include "dogen/yarn/types/meta_model/exception_fwd.hpp"
+#include "dogen/yarn/types/meta_model/primitive_fwd.hpp"
+#include "dogen/yarn/types/meta_model/enumeration_fwd.hpp"
 #include "dogen/yarn/types/meta_model/facet_properties.hpp"
 #include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
 #include "dogen/yarn/serialization/meta_model/intermediate_model_fwd_ser.hpp"
@@ -75,17 +75,17 @@ public:
         const dogen::yarn::meta_model::origin_types origin_type,
         const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references,
         const std::unordered_set<dogen::yarn::meta_model::name>& leaves,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions,
-        const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& modules,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& concepts,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& builtins,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& enumerations,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& primitives,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& objects,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& exceptions,
+        const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& visitors,
         const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements,
         const bool has_generatable_types,
-        const dogen::yarn::meta_model::module& root_module,
+        const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module,
         const dogen::yarn::meta_model::languages input_language,
         const std::list<dogen::yarn::meta_model::languages>& output_languages,
         const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups,
@@ -154,80 +154,80 @@ public:
      * @brief Modules contained in the intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules();
-    void modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v);
-    void modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& modules() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& modules();
+    void modules(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& v);
+    void modules(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >&& v);
     /**@}*/
 
     /**
      * @brief All the concepts available in this intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts();
-    void concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v);
-    void concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& concepts() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& concepts();
+    void concepts(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v);
+    void concepts(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >&& v);
     /**@}*/
 
     /**
      * @brief All built-ins contained in this intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins();
-    void builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v);
-    void builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& builtins() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& builtins();
+    void builtins(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v);
+    void builtins(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >&& v);
     /**@}*/
 
     /**
      * @brief All enumerations contained in this intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations();
-    void enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v);
-    void enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& enumerations() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& enumerations();
+    void enumerations(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v);
+    void enumerations(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >&& v);
     /**@}*/
 
     /**
      * @brief All primitives in this intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives();
-    void primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v);
-    void primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& primitives() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& primitives();
+    void primitives(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v);
+    void primitives(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >&& v);
     /**@}*/
 
     /**
      * @brief All objects contained in this intermediate model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects();
-    void objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v);
-    void objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& objects() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& objects();
+    void objects(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& v);
+    void objects(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >&& v);
     /**@}*/
 
     /**
      * @brief All exceptions in this model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions();
-    void exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v);
-    void exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& exceptions() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& exceptions();
+    void exceptions(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v);
+    void exceptions(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >&& v);
     /**@}*/
 
     /**
      * @brief All visitors in this model.
      */
     /**@{*/
-    const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors() const;
-    std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors();
-    void visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v);
-    void visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>&& v);
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& visitors() const;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& visitors();
+    void visitors(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& v);
+    void visitors(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >&& v);
     /**@}*/
 
     /**
@@ -248,10 +248,10 @@ public:
     void has_generatable_types(const bool v);
     /**@}*/
 
-    const dogen::yarn::meta_model::module& root_module() const;
-    dogen::yarn::meta_model::module& root_module();
-    void root_module(const dogen::yarn::meta_model::module& v);
-    void root_module(const dogen::yarn::meta_model::module&& v);
+    const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module() const;
+    boost::shared_ptr<dogen::yarn::meta_model::module>& root_module();
+    void root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v);
+    void root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>&& v);
 
     /**
      * @brief Language in which this model was written.
@@ -302,17 +302,17 @@ private:
     dogen::yarn::meta_model::origin_types origin_type_;
     std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types> references_;
     std::unordered_set<dogen::yarn::meta_model::name> leaves_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::module> modules_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::concept> concepts_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::builtin> builtins_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> enumerations_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::primitive> primitives_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::object> objects_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::exception> exceptions_;
-    std::unordered_map<std::string, dogen::yarn::meta_model::visitor> visitors_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> > modules_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> > concepts_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> > builtins_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > enumerations_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> > primitives_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> > objects_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> > exceptions_;
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> > visitors_;
     std::list<boost::shared_ptr<dogen::yarn::meta_model::element> > injected_elements_;
     bool has_generatable_types_;
-    dogen::yarn::meta_model::module root_module_;
+    boost::shared_ptr<dogen::yarn::meta_model::module> root_module_;
     dogen::yarn::meta_model::languages input_language_;
     std::list<dogen::yarn::meta_model::languages> output_languages_;
     std::unordered_map<std::string, dogen::annotations::scribble_group> scribble_groups_;
diff --git a/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp b/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
index 104dbf460..94c1209c2 100644
--- a/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
+++ b/projects/yarn/include/dogen/yarn/types/meta_model/model.hpp
@@ -33,8 +33,8 @@
 #include <boost/optional.hpp>
 #include <boost/shared_ptr.hpp>
 #include "dogen/yarn/types/meta_model/name.hpp"
-#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/meta_model/languages.hpp"
+#include "dogen/yarn/types/meta_model/module_fwd.hpp"
 #include "dogen/yarn/types/meta_model/element_fwd.hpp"
 #include "dogen/yarn/types/meta_model/facet_properties.hpp"
 #include "dogen/yarn/types/meta_model/orm_model_properties.hpp"
@@ -63,7 +63,7 @@ public:
         const dogen::yarn::meta_model::name& name,
         const dogen::yarn::meta_model::name& meta_name,
         const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements,
-        const dogen::yarn::meta_model::module& root_module,
+        const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module,
         const std::unordered_set<std::string>& module_ids,
         const bool has_generatable_types,
         const dogen::yarn::meta_model::languages input_language,
@@ -108,10 +108,10 @@ public:
      * @brief The module that represents the model.
      */
     /**@{*/
-    const dogen::yarn::meta_model::module& root_module() const;
-    dogen::yarn::meta_model::module& root_module();
-    void root_module(const dogen::yarn::meta_model::module& v);
-    void root_module(const dogen::yarn::meta_model::module&& v);
+    const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module() const;
+    boost::shared_ptr<dogen::yarn::meta_model::module>& root_module();
+    void root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v);
+    void root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>&& v);
     /**@}*/
 
     /**
@@ -172,7 +172,7 @@ private:
     dogen::yarn::meta_model::name name_;
     dogen::yarn::meta_model::name meta_name_;
     std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> > elements_;
-    dogen::yarn::meta_model::module root_module_;
+    boost::shared_ptr<dogen::yarn::meta_model::module> root_module_;
     std::unordered_set<std::string> module_ids_;
     bool has_generatable_types_;
     dogen::yarn::meta_model::languages input_language_;
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
index b08ac52ec..708cd7089 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/containment_transform.hpp
@@ -25,6 +25,8 @@
 #pragma once
 #endif
 
+#include <boost/shared_ptr.hpp>
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/meta_model/origin_types.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
@@ -37,7 +39,7 @@ private:
     /**
      * @brief Creates the module to represent the global namespace.
      */
-    static meta_model::module
+    static boost::shared_ptr<meta_model::module>
     create_global_module(const meta_model::origin_types ot);
 
     /**
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
index 4aedd7ab9..8127098e9 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/enablement_transform.hpp
@@ -26,6 +26,7 @@
 #endif
 
 #include <string>
+#include "dogen/yarn/types/meta_model/element.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/local_enablement_configuration.hpp"
 #include "dogen/yarn/types/transforms/global_enablement_configuration.hpp"
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp b/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
index 352b7b5fd..fb29cc907 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/model_assembly_chain.hpp
@@ -35,6 +35,10 @@ namespace dogen {
 namespace yarn {
 namespace transforms {
 
+/**
+ * @brief Merges target and references, post-processes the result and
+ * converts to the final model representation.
+ */
 class model_assembly_chain final {
 private:
     static meta_model::intermediate_model
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/naming_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/naming_transform.hpp
index b223828ad..4e29bf178 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/naming_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/naming_transform.hpp
@@ -79,9 +79,10 @@ private:
 
     template<typename Element>
     static void process(const meta_model::location& l,
-        std::list<std::pair<annotations::scribble_group, Element>>& elements) {
+        std::list<std::pair<annotations::scribble_group,
+        boost::shared_ptr<Element>>>& elements) {
         for (auto& pair : elements)
-            process(l, pair.second);
+            process(l, *pair.second);
     }
 
 private:
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/new_annotations_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/new_annotations_transform.hpp
index 9fecf1954..4e2f7ac6c 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/new_annotations_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/new_annotations_transform.hpp
@@ -29,8 +29,15 @@
 #include <utility>
 #include "dogen/annotations/types/annotation_group.hpp"
 #include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 #include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/transforms/context_fwd.hpp"
 #include "dogen/yarn/types/meta_model/exogenous_model.hpp"
 
@@ -58,10 +65,11 @@ private:
 
     template<typename Element>
     static void process(const context& ctx,
-        std::list<std::pair<annotations::scribble_group, Element>>& elements) {
+        std::list<std::pair<annotations::scribble_group,
+        boost::shared_ptr<Element>>>& elements) {
         for (auto& pair : elements) {
             const auto& sg(pair.first);
-            auto& e(pair.second);
+            auto& e(*pair.second);
             const auto ag(obtain_annotation_group(ctx, sg, e));
             process(ag, e);
         }
diff --git a/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp b/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
index 8caa0b486..0c8122901 100644
--- a/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
+++ b/projects/yarn/include/dogen/yarn/types/transforms/stereotypes_transform.hpp
@@ -27,7 +27,9 @@
 
 #include <list>
 #include <unordered_map>
+#include <boost/shared_ptr.hpp>
 #include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
 #include "dogen/yarn/types/meta_model/primitive.hpp"
 #include "dogen/yarn/hash/meta_model/location_hash.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
@@ -62,7 +64,8 @@ private:
     static std::unordered_map<meta_model::location, std::list<meta_model::name>>
     bucket_leaves_by_location(const std::list<meta_model::name>& leaves);
 
-    static void add_visitor_to_model(const meta_model::visitor& v,
+    static void add_visitor_to_model(
+        const boost::shared_ptr<meta_model::visitor> v,
         meta_model::intermediate_model& im);
 
     /**
@@ -73,7 +76,8 @@ private:
      *
      * @pre leaves must not be empty.
      */
-    static meta_model::visitor create_visitor(const meta_model::object& o,
+    static boost::shared_ptr<meta_model::visitor>
+    create_visitor(const meta_model::object& o,
         const meta_model::location& l, const meta_model::origin_types ot,
         const std::list<meta_model::name>& leaves);
 
diff --git a/projects/yarn/src/hash/meta_model/exogenous_model_hash.cpp b/projects/yarn/src/hash/meta_model/exogenous_model_hash.cpp
index 67d6f9682..46fb4fd48 100644
--- a/projects/yarn/src/hash/meta_model/exogenous_model_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/exogenous_model_hash.cpp
@@ -36,114 +36,156 @@ inline void combine(std::size_t& seed, const HashableType& value) {
     seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_module(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_concept(const boost::shared_ptr<dogen::yarn::meta_model::concept>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_concept(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_builtin(const boost::shared_ptr<dogen::yarn::meta_model::builtin>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_builtin(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_enumeration(const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_enumeration(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_primitive(const boost::shared_ptr<dogen::yarn::meta_model::primitive>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_primitive(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_object(const boost::shared_ptr<dogen::yarn::meta_model::object>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_object(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(i));
     }
     return seed;
 }
 
-inline std::size_t hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_exception(const boost::shared_ptr<dogen::yarn::meta_model::exception>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v) {
     std::size_t seed(0);
 
     combine(seed, v.first);
-    combine(seed, v.second);
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_exception(v.second));
     return seed;
 }
 
-inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& v) {
+inline std::size_t hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
-        combine(seed, hash_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(i));
+        combine(seed, hash_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(i));
     }
     return seed;
 }
@@ -157,13 +199,13 @@ namespace meta_model {
 std::size_t exogenous_model_hasher::hash(const exogenous_model& v) {
     std::size_t seed(0);
 
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(v.modules()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(v.concepts()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(v.builtins()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(v.enumerations()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(v.primitives()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(v.objects()));
-    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(v.exceptions()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(v.modules()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(v.concepts()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(v.builtins()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(v.enumerations()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(v.primitives()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(v.objects()));
+    combine(seed, hash_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(v.exceptions()));
 
     return seed;
 }
diff --git a/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp b/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
index 022360efa..85901b831 100644
--- a/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/intermediate_model_hash.cpp
@@ -60,74 +60,122 @@ inline std::size_t hash_std_unordered_set_dogen_yarn_meta_model_name(const std::
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_module(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_module(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_module(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_concept(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_concept(const boost::shared_ptr<dogen::yarn::meta_model::concept>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_concept(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_concept(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_builtin(const boost::shared_ptr<dogen::yarn::meta_model::builtin>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_builtin(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_builtin(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_enumeration(const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_enumeration(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_enumeration(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_primitive(const boost::shared_ptr<dogen::yarn::meta_model::primitive>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_primitive(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_primitive(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_object(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_object(const boost::shared_ptr<dogen::yarn::meta_model::object>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_object(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_object(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_exception(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_exception(const boost::shared_ptr<dogen::yarn::meta_model::exception>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_exception(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_exception(i.second));
     }
     return seed;
 }
 
-inline std::size_t hash_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_visitor(const boost::shared_ptr<dogen::yarn::meta_model::visitor>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
+inline std::size_t hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_visitor(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& v) {
     std::size_t seed(0);
     for (const auto i : v) {
         combine(seed, i.first);
-        combine(seed, i.second);
+        combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_visitor(i.second));
     }
     return seed;
 }
@@ -196,17 +244,17 @@ std::size_t intermediate_model_hasher::hash(const intermediate_model& v) {
     combine(seed, v.origin_type());
     combine(seed, hash_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(v.references()));
     combine(seed, hash_std_unordered_set_dogen_yarn_meta_model_name(v.leaves()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_module(v.modules()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_concept(v.concepts()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(v.builtins()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(v.enumerations()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(v.primitives()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_object(v.objects()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_exception(v.exceptions()));
-    combine(seed, hash_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(v.visitors()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_module(v.modules()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_concept(v.concepts()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_builtin(v.builtins()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_enumeration(v.enumerations()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_primitive(v.primitives()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_object(v.objects()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_exception(v.exceptions()));
+    combine(seed, hash_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_visitor(v.visitors()));
     combine(seed, hash_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(v.injected_elements()));
     combine(seed, v.has_generatable_types());
-    combine(seed, v.root_module());
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_module(v.root_module()));
     combine(seed, v.input_language());
     combine(seed, hash_std_list_dogen_yarn_meta_model_languages(v.output_languages()));
     combine(seed, hash_std_unordered_map_std_string_dogen_annotations_scribble_group(v.scribble_groups()));
diff --git a/projects/yarn/src/hash/meta_model/model_hash.cpp b/projects/yarn/src/hash/meta_model/model_hash.cpp
index d656f376a..57275f4e8 100644
--- a/projects/yarn/src/hash/meta_model/model_hash.cpp
+++ b/projects/yarn/src/hash/meta_model/model_hash.cpp
@@ -48,6 +48,12 @@ inline std::size_t hash_std_vector_boost_shared_ptr_dogen_yarn_meta_model_elemen
     return seed;
 }
 
+inline std::size_t hash_boost_shared_ptr_dogen_yarn_meta_model_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    std::size_t seed(0);
+    combine(seed, *v);
+    return seed;
+}
+
 inline std::size_t hash_std_unordered_set_std_string(const std::unordered_set<std::string>& v) {
     std::size_t seed(0);
     for (const auto i : v) {
@@ -87,7 +93,7 @@ std::size_t model_hasher::hash(const model& v) {
     combine(seed, v.name());
     combine(seed, v.meta_name());
     combine(seed, hash_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(v.elements()));
-    combine(seed, v.root_module());
+    combine(seed, hash_boost_shared_ptr_dogen_yarn_meta_model_module(v.root_module()));
     combine(seed, hash_std_unordered_set_std_string(v.module_ids()));
     combine(seed, v.has_generatable_types());
     combine(seed, v.input_language());
diff --git a/projects/yarn/src/io/meta_model/exogenous_model_io.cpp b/projects/yarn/src/io/meta_model/exogenous_model_io.cpp
index 59fb1c5ca..166769792 100644
--- a/projects/yarn/src/io/meta_model/exogenous_model_io.cpp
+++ b/projects/yarn/src/io/meta_model/exogenous_model_io.cpp
@@ -29,9 +29,25 @@
 #include "dogen/yarn/io/meta_model/enumeration_io.hpp"
 #include "dogen/yarn/io/meta_model/exogenous_model_io.hpp"
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -44,7 +60,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -56,9 +72,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::concept>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -71,7 +103,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -83,9 +115,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::builtin>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -98,7 +146,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -110,9 +158,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -125,7 +189,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -137,9 +201,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::primitive>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -152,7 +232,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -164,9 +244,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::object>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -179,7 +275,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -191,9 +287,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::exception>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v) {
     s << "{ " << "\"__type__\": " << "\"std::pair\"" << ", ";
 
     s << "\"first\": " << v.first << ", ";
@@ -206,7 +318,7 @@ inline std::ostream& operator<<(std::ostream& s, const std::pair<dogen::annotati
 
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& v) {
     s << "[ ";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/meta_model/intermediate_model_io.cpp b/projects/yarn/src/io/meta_model/intermediate_model_io.cpp
index 4c7e6a383..a377d1a69 100644
--- a/projects/yarn/src/io/meta_model/intermediate_model_io.cpp
+++ b/projects/yarn/src/io/meta_model/intermediate_model_io.cpp
@@ -78,9 +78,25 @@ inline std::string tidy_up_string(std::string s) {
     return s;
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -96,9 +112,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::concept>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -114,9 +146,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::builtin>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -132,9 +180,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -150,9 +214,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::primitive>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -168,9 +248,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::object>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -186,9 +282,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::exception>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
@@ -204,9 +316,25 @@ inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::s
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::visitor>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 namespace std {
 
-inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
+inline std::ostream& operator<<(std::ostream& s, const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& v) {
     s << "[";
     for (auto i(v.begin()); i != v.end(); ++i) {
         if (i != v.begin()) s << ", ";
diff --git a/projects/yarn/src/io/meta_model/model_io.cpp b/projects/yarn/src/io/meta_model/model_io.cpp
index 6539e83e0..005b26bf5 100644
--- a/projects/yarn/src/io/meta_model/model_io.cpp
+++ b/projects/yarn/src/io/meta_model/model_io.cpp
@@ -59,6 +59,22 @@ inline std::ostream& operator<<(std::ostream& s, const std::vector<boost::shared
 
 }
 
+namespace boost {
+
+inline std::ostream& operator<<(std::ostream& s, const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
+    s << "{ " << "\"__type__\": " << "\"boost::shared_ptr\"" << ", "
+      << "\"memory\": " << "\"" << static_cast<void*>(v.get()) << "\"" << ", ";
+
+    if (v)
+        s << "\"data\": " << *v;
+    else
+        s << "\"data\": ""\"<null>\"";
+    s << " }";
+    return s;
+}
+
+}
+
 inline std::string tidy_up_string(std::string s) {
     boost::replace_all(s, "\r\n", "<new_line>");
     boost::replace_all(s, "\n", "<new_line>");
diff --git a/projects/yarn/src/serialization/meta_model/exogenous_model_ser.cpp b/projects/yarn/src/serialization/meta_model/exogenous_model_ser.cpp
index 8954f1605..dfa1c43a1 100644
--- a/projects/yarn/src/serialization/meta_model/exogenous_model_ser.cpp
+++ b/projects/yarn/src/serialization/meta_model/exogenous_model_ser.cpp
@@ -27,6 +27,7 @@
 #include <boost/serialization/utility.hpp>
 #include <boost/archive/binary_iarchive.hpp>
 #include <boost/archive/binary_oarchive.hpp>
+#include <boost/serialization/shared_ptr.hpp>
 #include <boost/archive/polymorphic_iarchive.hpp>
 #include <boost/archive/polymorphic_oarchive.hpp>
 #include "dogen/yarn/serialization/meta_model/module_ser.hpp"
diff --git a/projects/yarn/src/test_data/meta_model/exogenous_model_td.cpp b/projects/yarn/src/test_data/meta_model/exogenous_model_td.cpp
index 1214b81a5..c651ae1bb 100644
--- a/projects/yarn/src/test_data/meta_model/exogenous_model_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/exogenous_model_td.cpp
@@ -35,149 +35,198 @@ create_dogen_annotations_scribble_group(const unsigned int position) {
     return dogen::annotations::scribble_group_generator::create(position);
 }
 
-dogen::yarn::meta_model::module
-create_dogen_yarn_meta_model_module(const unsigned int position) {
-    return dogen::yarn::meta_model::module_generator::create(position);
+dogen::yarn::meta_model::module*
+create_dogen_yarn_meta_model_module_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::module_generator::create_ptr(position);
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> r(
+boost::shared_ptr<dogen::yarn::meta_model::module>
+create_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::module> r(
+        create_dogen_yarn_meta_model_module_ptr(position));
+    return r;
+}
+
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_module(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_module(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::concept
-create_dogen_yarn_meta_model_concept(const unsigned int position) {
-    return dogen::yarn::meta_model::concept_generator::create(position);
+dogen::yarn::meta_model::concept*
+create_dogen_yarn_meta_model_concept_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::concept_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::concept>
+create_boost_shared_ptr_dogen_yarn_meta_model_concept(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::concept> r(
+        create_dogen_yarn_meta_model_concept_ptr(position));
+    return r;
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> r(
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_concept(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_concept(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::builtin
-create_dogen_yarn_meta_model_builtin(const unsigned int position) {
-    return dogen::yarn::meta_model::builtin_generator::create(position);
+dogen::yarn::meta_model::builtin*
+create_dogen_yarn_meta_model_builtin_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::builtin_generator::create_ptr(position);
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> r(
+boost::shared_ptr<dogen::yarn::meta_model::builtin>
+create_boost_shared_ptr_dogen_yarn_meta_model_builtin(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::builtin> r(
+        create_dogen_yarn_meta_model_builtin_ptr(position));
+    return r;
+}
+
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_builtin(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_builtin(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::enumeration
-create_dogen_yarn_meta_model_enumeration(const unsigned int position) {
-    return dogen::yarn::meta_model::enumeration_generator::create(position);
+dogen::yarn::meta_model::enumeration*
+create_dogen_yarn_meta_model_enumeration_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::enumeration_generator::create_ptr(position);
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> r(
+boost::shared_ptr<dogen::yarn::meta_model::enumeration>
+create_boost_shared_ptr_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::enumeration> r(
+        create_dogen_yarn_meta_model_enumeration_ptr(position));
+    return r;
+}
+
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_enumeration(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_enumeration(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::primitive
-create_dogen_yarn_meta_model_primitive(const unsigned int position) {
-    return dogen::yarn::meta_model::primitive_generator::create(position);
+dogen::yarn::meta_model::primitive*
+create_dogen_yarn_meta_model_primitive_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::primitive_generator::create_ptr(position);
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> r(
+boost::shared_ptr<dogen::yarn::meta_model::primitive>
+create_boost_shared_ptr_dogen_yarn_meta_model_primitive(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::primitive> r(
+        create_dogen_yarn_meta_model_primitive_ptr(position));
+    return r;
+}
+
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_primitive(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_primitive(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::object
-create_dogen_yarn_meta_model_object(const unsigned int position) {
-    return dogen::yarn::meta_model::object_generator::create(position);
+dogen::yarn::meta_model::object*
+create_dogen_yarn_meta_model_object_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::object_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::object>
+create_boost_shared_ptr_dogen_yarn_meta_model_object(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::object> r(
+        create_dogen_yarn_meta_model_object_ptr(position));
+    return r;
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> r(
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_object(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_object(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(position + i));
     }
     return r;
 }
 
-dogen::yarn::meta_model::exception
-create_dogen_yarn_meta_model_exception(const unsigned int position) {
-    return dogen::yarn::meta_model::exception_generator::create(position);
+dogen::yarn::meta_model::exception*
+create_dogen_yarn_meta_model_exception_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::exception_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::exception>
+create_boost_shared_ptr_dogen_yarn_meta_model_exception(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::exception> r(
+        create_dogen_yarn_meta_model_exception_ptr(position));
+    return r;
 }
 
-std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception>
-create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(unsigned int position) {
-    std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> r(
+std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> >
+create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(unsigned int position) {
+    std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > r(
         create_dogen_annotations_scribble_group(position),
-        create_dogen_yarn_meta_model_exception(position));
+        create_boost_shared_ptr_dogen_yarn_meta_model_exception(position));
     return r;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> > create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(unsigned int position) {
-    std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> > r;
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > > create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(unsigned int position) {
+    std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.push_back(create_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(position + i));
+        r.push_back(create_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(position + i));
     }
     return r;
 }
@@ -192,13 +241,13 @@ exogenous_model_generator::exogenous_model_generator() : position_(0) { }
 
 void exogenous_model_generator::
 populate(const unsigned int position, result_type& v) {
-    v.modules(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_module(position + 0));
-    v.concepts(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_concept(position + 1));
-    v.builtins(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_builtin(position + 2));
-    v.enumerations(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_enumeration(position + 3));
-    v.primitives(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_primitive(position + 4));
-    v.objects(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_object(position + 5));
-    v.exceptions(create_std_list_std_pair_dogen_annotations_scribble_group_dogen_yarn_meta_model_exception(position + 6));
+    v.modules(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_module(position + 0));
+    v.concepts(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_concept(position + 1));
+    v.builtins(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_builtin(position + 2));
+    v.enumerations(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_enumeration(position + 3));
+    v.primitives(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_primitive(position + 4));
+    v.objects(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_object(position + 5));
+    v.exceptions(create_std_list_std_pair_dogen_annotations_scribble_group_boost_shared_ptr_dogen_yarn_meta_model_exception(position + 6));
 }
 
 exogenous_model_generator::result_type
diff --git a/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp b/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp
index 8f0e503aa..53334cc80 100644
--- a/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/intermediate_model_td.cpp
@@ -70,106 +70,162 @@ std::string create_std_string(const unsigned int position) {
     return s.str();
 }
 
-dogen::yarn::meta_model::module
-create_dogen_yarn_meta_model_module(const unsigned int position) {
-    return dogen::yarn::meta_model::module_generator::create(position);
+dogen::yarn::meta_model::module*
+create_dogen_yarn_meta_model_module_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::module_generator::create_ptr(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::module> create_std_unordered_map_std_string_dogen_yarn_meta_model_module(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::module> r;
+boost::shared_ptr<dogen::yarn::meta_model::module>
+create_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::module> r(
+        create_dogen_yarn_meta_model_module_ptr(position));
+    return r;
+}
+
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_module(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_module(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::concept
-create_dogen_yarn_meta_model_concept(const unsigned int position) {
-    return dogen::yarn::meta_model::concept_generator::create(position);
+dogen::yarn::meta_model::concept*
+create_dogen_yarn_meta_model_concept_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::concept_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::concept>
+create_boost_shared_ptr_dogen_yarn_meta_model_concept(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::concept> r(
+        create_dogen_yarn_meta_model_concept_ptr(position));
+    return r;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::concept> create_std_unordered_map_std_string_dogen_yarn_meta_model_concept(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::concept> r;
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_concept(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_concept(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_concept(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::builtin
-create_dogen_yarn_meta_model_builtin(const unsigned int position) {
-    return dogen::yarn::meta_model::builtin_generator::create(position);
+dogen::yarn::meta_model::builtin*
+create_dogen_yarn_meta_model_builtin_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::builtin_generator::create_ptr(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::builtin> create_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::builtin> r;
+boost::shared_ptr<dogen::yarn::meta_model::builtin>
+create_boost_shared_ptr_dogen_yarn_meta_model_builtin(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::builtin> r(
+        create_dogen_yarn_meta_model_builtin_ptr(position));
+    return r;
+}
+
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_builtin(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_builtin(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_builtin(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::enumeration
-create_dogen_yarn_meta_model_enumeration(const unsigned int position) {
-    return dogen::yarn::meta_model::enumeration_generator::create(position);
+dogen::yarn::meta_model::enumeration*
+create_dogen_yarn_meta_model_enumeration_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::enumeration_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::enumeration>
+create_boost_shared_ptr_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::enumeration> r(
+        create_dogen_yarn_meta_model_enumeration_ptr(position));
+    return r;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> create_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::enumeration> r;
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_enumeration(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_enumeration(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_enumeration(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::primitive
-create_dogen_yarn_meta_model_primitive(const unsigned int position) {
-    return dogen::yarn::meta_model::primitive_generator::create(position);
+dogen::yarn::meta_model::primitive*
+create_dogen_yarn_meta_model_primitive_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::primitive_generator::create_ptr(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::primitive> create_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::primitive> r;
+boost::shared_ptr<dogen::yarn::meta_model::primitive>
+create_boost_shared_ptr_dogen_yarn_meta_model_primitive(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::primitive> r(
+        create_dogen_yarn_meta_model_primitive_ptr(position));
+    return r;
+}
+
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_primitive(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_primitive(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_primitive(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::object
-create_dogen_yarn_meta_model_object(const unsigned int position) {
-    return dogen::yarn::meta_model::object_generator::create(position);
+dogen::yarn::meta_model::object*
+create_dogen_yarn_meta_model_object_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::object_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::object>
+create_boost_shared_ptr_dogen_yarn_meta_model_object(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::object> r(
+        create_dogen_yarn_meta_model_object_ptr(position));
+    return r;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::object> create_std_unordered_map_std_string_dogen_yarn_meta_model_object(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::object> r;
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_object(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_object(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_object(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::exception
-create_dogen_yarn_meta_model_exception(const unsigned int position) {
-    return dogen::yarn::meta_model::exception_generator::create(position);
+dogen::yarn::meta_model::exception*
+create_dogen_yarn_meta_model_exception_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::exception_generator::create_ptr(position);
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::exception> create_std_unordered_map_std_string_dogen_yarn_meta_model_exception(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::exception> r;
+boost::shared_ptr<dogen::yarn::meta_model::exception>
+create_boost_shared_ptr_dogen_yarn_meta_model_exception(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::exception> r(
+        create_dogen_yarn_meta_model_exception_ptr(position));
+    return r;
+}
+
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_exception(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_exception(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_exception(position + i)));
     }
     return r;
 }
 
-dogen::yarn::meta_model::visitor
-create_dogen_yarn_meta_model_visitor(const unsigned int position) {
-    return dogen::yarn::meta_model::visitor_generator::create(position);
+dogen::yarn::meta_model::visitor*
+create_dogen_yarn_meta_model_visitor_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::visitor_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::visitor>
+create_boost_shared_ptr_dogen_yarn_meta_model_visitor(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::visitor> r(
+        create_dogen_yarn_meta_model_visitor_ptr(position));
+    return r;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::visitor> create_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(unsigned int position) {
-    std::unordered_map<std::string, dogen::yarn::meta_model::visitor> r;
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> > create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_visitor(unsigned int position) {
+    std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> > r;
     for (unsigned int i(0); i < 4; ++i) {
-        r.insert(std::make_pair(create_std_string(position + i), create_dogen_yarn_meta_model_visitor(position + i)));
+        r.insert(std::make_pair(create_std_string(position + i), create_boost_shared_ptr_dogen_yarn_meta_model_visitor(position + i)));
     }
     return r;
 }
@@ -264,17 +320,17 @@ populate(const unsigned int position, result_type& v) {
     v.origin_type(create_dogen_yarn_meta_model_origin_types(position + 2));
     v.references(create_std_unordered_map_dogen_yarn_meta_model_name_dogen_yarn_meta_model_origin_types(position + 3));
     v.leaves(create_std_unordered_set_dogen_yarn_meta_model_name(position + 4));
-    v.modules(create_std_unordered_map_std_string_dogen_yarn_meta_model_module(position + 5));
-    v.concepts(create_std_unordered_map_std_string_dogen_yarn_meta_model_concept(position + 6));
-    v.builtins(create_std_unordered_map_std_string_dogen_yarn_meta_model_builtin(position + 7));
-    v.enumerations(create_std_unordered_map_std_string_dogen_yarn_meta_model_enumeration(position + 8));
-    v.primitives(create_std_unordered_map_std_string_dogen_yarn_meta_model_primitive(position + 9));
-    v.objects(create_std_unordered_map_std_string_dogen_yarn_meta_model_object(position + 10));
-    v.exceptions(create_std_unordered_map_std_string_dogen_yarn_meta_model_exception(position + 11));
-    v.visitors(create_std_unordered_map_std_string_dogen_yarn_meta_model_visitor(position + 12));
+    v.modules(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_module(position + 5));
+    v.concepts(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_concept(position + 6));
+    v.builtins(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_builtin(position + 7));
+    v.enumerations(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_enumeration(position + 8));
+    v.primitives(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_primitive(position + 9));
+    v.objects(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_object(position + 10));
+    v.exceptions(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_exception(position + 11));
+    v.visitors(create_std_unordered_map_std_string_boost_shared_ptr_dogen_yarn_meta_model_visitor(position + 12));
     v.injected_elements(create_std_list_boost_shared_ptr_dogen_yarn_meta_model_element(position + 13));
     v.has_generatable_types(create_bool(position + 14));
-    v.root_module(create_dogen_yarn_meta_model_module(position + 15));
+    v.root_module(create_boost_shared_ptr_dogen_yarn_meta_model_module(position + 15));
     v.input_language(create_dogen_yarn_meta_model_languages(position + 16));
     v.output_languages(create_std_list_dogen_yarn_meta_model_languages(position + 17));
     v.scribble_groups(create_std_unordered_map_std_string_dogen_annotations_scribble_group(position + 18));
diff --git a/projects/yarn/src/test_data/meta_model/model_td.cpp b/projects/yarn/src/test_data/meta_model/model_td.cpp
index 29811f5d3..88cde8e24 100644
--- a/projects/yarn/src/test_data/meta_model/model_td.cpp
+++ b/projects/yarn/src/test_data/meta_model/model_td.cpp
@@ -54,9 +54,16 @@ std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> > create_std_vec
     return r;
 }
 
-dogen::yarn::meta_model::module
-create_dogen_yarn_meta_model_module(const unsigned int position) {
-    return dogen::yarn::meta_model::module_generator::create(position);
+dogen::yarn::meta_model::module*
+create_dogen_yarn_meta_model_module_ptr(const unsigned int position) {
+    return dogen::yarn::meta_model::module_generator::create_ptr(position);
+}
+
+boost::shared_ptr<dogen::yarn::meta_model::module>
+create_boost_shared_ptr_dogen_yarn_meta_model_module(unsigned int position) {
+    boost::shared_ptr<dogen::yarn::meta_model::module> r(
+        create_dogen_yarn_meta_model_module_ptr(position));
+    return r;
 }
 
 std::string create_std_string(const unsigned int position) {
@@ -120,7 +127,7 @@ populate(const unsigned int position, result_type& v) {
     v.name(create_dogen_yarn_meta_model_name(position + 0));
     v.meta_name(create_dogen_yarn_meta_model_name(position + 1));
     v.elements(create_std_vector_boost_shared_ptr_dogen_yarn_meta_model_element(position + 2));
-    v.root_module(create_dogen_yarn_meta_model_module(position + 3));
+    v.root_module(create_boost_shared_ptr_dogen_yarn_meta_model_module(position + 3));
     v.module_ids(create_std_unordered_set_std_string(position + 4));
     v.has_generatable_types(create_bool(position + 5));
     v.input_language(create_dogen_yarn_meta_model_languages(position + 6));
diff --git a/projects/yarn/src/types/helpers/indexer.cpp b/projects/yarn/src/types/helpers/indexer.cpp
index 01d51ae83..140f276dc 100644
--- a/projects/yarn/src/types/helpers/indexer.cpp
+++ b/projects/yarn/src/types/helpers/indexer.cpp
@@ -21,6 +21,8 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/unordered_set_io.hpp"
 #include "dogen/yarn/io/helpers/indices_io.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
 #include "dogen/yarn/types/helpers/indexer.hpp"
 
 namespace {
@@ -41,7 +43,7 @@ indices indexer::index(meta_model::intermediate_model& m) {
         const auto id(pair.first);
         r.elements_referable_by_attributes().insert(id);
 
-        const auto& b(pair.second);
+        const auto& b(*pair.second);
         if (b.can_be_enumeration_underlier())
             r.enumeration_underliers().insert(id);
 
@@ -61,7 +63,7 @@ indices indexer::index(meta_model::intermediate_model& m) {
         const auto id(pair.first);
         r.elements_referable_by_attributes().insert(id);
 
-        const auto& o(pair.second);
+        const auto& o(*pair.second);
         if (o.type_parameters().always_in_heap())
             r.objects_always_in_heap().insert(id);
 
diff --git a/projects/yarn/src/types/meta_model/exogenous_model.cpp b/projects/yarn/src/types/meta_model/exogenous_model.cpp
index 55c82b0a6..58cea252b 100644
--- a/projects/yarn/src/types/meta_model/exogenous_model.cpp
+++ b/projects/yarn/src/types/meta_model/exogenous_model.cpp
@@ -18,20 +18,90 @@
  * MA 02110-1301, USA.
  *
  */
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/meta_model/exogenous_model.hpp"
 
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::module>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::module>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::concept>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::concept>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::builtin>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::builtin>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::primitive>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::primitive>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::object>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::object>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::exception>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::exception>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
 namespace dogen {
 namespace yarn {
 namespace meta_model {
 
 exogenous_model::exogenous_model(
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& modules,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& concepts,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& builtins,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& enumerations,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& primitives,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& objects,
-    const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exceptions)
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& modules,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& concepts,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& builtins,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& enumerations,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& primitives,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& objects,
+    const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exceptions)
     : modules_(modules),
       concepts_(concepts),
       builtins_(builtins),
@@ -67,115 +137,115 @@ exogenous_model& exogenous_model::operator=(exogenous_model other) {
     return *this;
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& exogenous_model::modules() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& exogenous_model::modules() const {
     return modules_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& exogenous_model::modules() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& exogenous_model::modules() {
     return modules_;
 }
 
-void exogenous_model::modules(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >& v) {
+void exogenous_model::modules(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >& v) {
     modules_ = v;
 }
 
-void exogenous_model::modules(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::module> >&& v) {
+void exogenous_model::modules(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::module> > >&& v) {
     modules_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& exogenous_model::concepts() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& exogenous_model::concepts() const {
     return concepts_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& exogenous_model::concepts() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& exogenous_model::concepts() {
     return concepts_;
 }
 
-void exogenous_model::concepts(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >& v) {
+void exogenous_model::concepts(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >& v) {
     concepts_ = v;
 }
 
-void exogenous_model::concepts(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::concept> >&& v) {
+void exogenous_model::concepts(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::concept> > >&& v) {
     concepts_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& exogenous_model::builtins() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& exogenous_model::builtins() const {
     return builtins_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& exogenous_model::builtins() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& exogenous_model::builtins() {
     return builtins_;
 }
 
-void exogenous_model::builtins(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >& v) {
+void exogenous_model::builtins(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >& v) {
     builtins_ = v;
 }
 
-void exogenous_model::builtins(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::builtin> >&& v) {
+void exogenous_model::builtins(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::builtin> > >&& v) {
     builtins_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& exogenous_model::enumerations() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& exogenous_model::enumerations() const {
     return enumerations_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& exogenous_model::enumerations() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& exogenous_model::enumerations() {
     return enumerations_;
 }
 
-void exogenous_model::enumerations(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >& v) {
+void exogenous_model::enumerations(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >& v) {
     enumerations_ = v;
 }
 
-void exogenous_model::enumerations(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::enumeration> >&& v) {
+void exogenous_model::enumerations(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::enumeration> > >&& v) {
     enumerations_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& exogenous_model::primitives() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& exogenous_model::primitives() const {
     return primitives_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& exogenous_model::primitives() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& exogenous_model::primitives() {
     return primitives_;
 }
 
-void exogenous_model::primitives(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >& v) {
+void exogenous_model::primitives(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >& v) {
     primitives_ = v;
 }
 
-void exogenous_model::primitives(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::primitive> >&& v) {
+void exogenous_model::primitives(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::primitive> > >&& v) {
     primitives_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& exogenous_model::objects() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& exogenous_model::objects() const {
     return objects_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& exogenous_model::objects() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& exogenous_model::objects() {
     return objects_;
 }
 
-void exogenous_model::objects(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >& v) {
+void exogenous_model::objects(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >& v) {
     objects_ = v;
 }
 
-void exogenous_model::objects(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::object> >&& v) {
+void exogenous_model::objects(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::object> > >&& v) {
     objects_ = std::move(v);
 }
 
-const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exogenous_model::exceptions() const {
+const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exogenous_model::exceptions() const {
     return exceptions_;
 }
 
-std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& exogenous_model::exceptions() {
+std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& exogenous_model::exceptions() {
     return exceptions_;
 }
 
-void exogenous_model::exceptions(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >& v) {
+void exogenous_model::exceptions(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >& v) {
     exceptions_ = v;
 }
 
-void exogenous_model::exceptions(const std::list<std::pair<dogen::annotations::scribble_group, dogen::yarn::meta_model::exception> >&& v) {
+void exogenous_model::exceptions(const std::list<std::pair<dogen::annotations::scribble_group, boost::shared_ptr<dogen::yarn::meta_model::exception> > >&& v) {
     exceptions_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/meta_model/intermediate_model.cpp b/projects/yarn/src/types/meta_model/intermediate_model.cpp
index c13f91190..1480d870b 100644
--- a/projects/yarn/src/types/meta_model/intermediate_model.cpp
+++ b/projects/yarn/src/types/meta_model/intermediate_model.cpp
@@ -18,11 +18,91 @@
  * MA 02110-1301, USA.
  *
  */
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 #include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 
 namespace boost {
 
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::module>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::module>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::concept>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::concept>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::builtin>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::builtin>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::enumeration>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::primitive>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::primitive>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::object>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::object>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::exception>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::exception>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::visitor>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::visitor>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
+namespace boost {
+
 inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::element>& lhs,
 const boost::shared_ptr<dogen::yarn::meta_model::element>& rhs) {
     return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
@@ -68,17 +148,17 @@ intermediate_model::intermediate_model(
     const dogen::yarn::meta_model::origin_types origin_type,
     const std::unordered_map<dogen::yarn::meta_model::name, dogen::yarn::meta_model::origin_types>& references,
     const std::unordered_set<dogen::yarn::meta_model::name>& leaves,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::module>& modules,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& concepts,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& builtins,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& enumerations,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& primitives,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::object>& objects,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& exceptions,
-    const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& visitors,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& modules,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& concepts,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& builtins,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& enumerations,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& primitives,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& objects,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& exceptions,
+    const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& visitors,
     const std::list<boost::shared_ptr<dogen::yarn::meta_model::element> >& injected_elements,
     const bool has_generatable_types,
-    const dogen::yarn::meta_model::module& root_module,
+    const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module,
     const dogen::yarn::meta_model::languages input_language,
     const std::list<dogen::yarn::meta_model::languages>& output_languages,
     const std::unordered_map<std::string, dogen::annotations::scribble_group>& scribble_groups,
@@ -233,131 +313,131 @@ void intermediate_model::leaves(const std::unordered_set<dogen::yarn::meta_model
     leaves_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::module>& intermediate_model::modules() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& intermediate_model::modules() const {
     return modules_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::module>& intermediate_model::modules() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& intermediate_model::modules() {
     return modules_;
 }
 
-void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>& v) {
+void intermediate_model::modules(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >& v) {
     modules_ = v;
 }
 
-void intermediate_model::modules(const std::unordered_map<std::string, dogen::yarn::meta_model::module>&& v) {
+void intermediate_model::modules(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::module> >&& v) {
     modules_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& intermediate_model::concepts() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& intermediate_model::concepts() const {
     return concepts_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::concept>& intermediate_model::concepts() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& intermediate_model::concepts() {
     return concepts_;
 }
 
-void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>& v) {
+void intermediate_model::concepts(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >& v) {
     concepts_ = v;
 }
 
-void intermediate_model::concepts(const std::unordered_map<std::string, dogen::yarn::meta_model::concept>&& v) {
+void intermediate_model::concepts(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::concept> >&& v) {
     concepts_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& intermediate_model::builtins() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& intermediate_model::builtins() const {
     return builtins_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& intermediate_model::builtins() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& intermediate_model::builtins() {
     return builtins_;
 }
 
-void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>& v) {
+void intermediate_model::builtins(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >& v) {
     builtins_ = v;
 }
 
-void intermediate_model::builtins(const std::unordered_map<std::string, dogen::yarn::meta_model::builtin>&& v) {
+void intermediate_model::builtins(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::builtin> >&& v) {
     builtins_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& intermediate_model::enumerations() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& intermediate_model::enumerations() const {
     return enumerations_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& intermediate_model::enumerations() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& intermediate_model::enumerations() {
     return enumerations_;
 }
 
-void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>& v) {
+void intermediate_model::enumerations(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >& v) {
     enumerations_ = v;
 }
 
-void intermediate_model::enumerations(const std::unordered_map<std::string, dogen::yarn::meta_model::enumeration>&& v) {
+void intermediate_model::enumerations(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::enumeration> >&& v) {
     enumerations_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& intermediate_model::primitives() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& intermediate_model::primitives() const {
     return primitives_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& intermediate_model::primitives() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& intermediate_model::primitives() {
     return primitives_;
 }
 
-void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>& v) {
+void intermediate_model::primitives(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >& v) {
     primitives_ = v;
 }
 
-void intermediate_model::primitives(const std::unordered_map<std::string, dogen::yarn::meta_model::primitive>&& v) {
+void intermediate_model::primitives(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::primitive> >&& v) {
     primitives_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::object>& intermediate_model::objects() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& intermediate_model::objects() const {
     return objects_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::object>& intermediate_model::objects() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& intermediate_model::objects() {
     return objects_;
 }
 
-void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>& v) {
+void intermediate_model::objects(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >& v) {
     objects_ = v;
 }
 
-void intermediate_model::objects(const std::unordered_map<std::string, dogen::yarn::meta_model::object>&& v) {
+void intermediate_model::objects(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::object> >&& v) {
     objects_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& intermediate_model::exceptions() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& intermediate_model::exceptions() const {
     return exceptions_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::exception>& intermediate_model::exceptions() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& intermediate_model::exceptions() {
     return exceptions_;
 }
 
-void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>& v) {
+void intermediate_model::exceptions(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >& v) {
     exceptions_ = v;
 }
 
-void intermediate_model::exceptions(const std::unordered_map<std::string, dogen::yarn::meta_model::exception>&& v) {
+void intermediate_model::exceptions(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::exception> >&& v) {
     exceptions_ = std::move(v);
 }
 
-const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& intermediate_model::visitors() const {
+const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& intermediate_model::visitors() const {
     return visitors_;
 }
 
-std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& intermediate_model::visitors() {
+std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& intermediate_model::visitors() {
     return visitors_;
 }
 
-void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>& v) {
+void intermediate_model::visitors(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >& v) {
     visitors_ = v;
 }
 
-void intermediate_model::visitors(const std::unordered_map<std::string, dogen::yarn::meta_model::visitor>&& v) {
+void intermediate_model::visitors(const std::unordered_map<std::string, boost::shared_ptr<dogen::yarn::meta_model::visitor> >&& v) {
     visitors_ = std::move(v);
 }
 
@@ -385,19 +465,19 @@ void intermediate_model::has_generatable_types(const bool v) {
     has_generatable_types_ = v;
 }
 
-const dogen::yarn::meta_model::module& intermediate_model::root_module() const {
+const boost::shared_ptr<dogen::yarn::meta_model::module>& intermediate_model::root_module() const {
     return root_module_;
 }
 
-dogen::yarn::meta_model::module& intermediate_model::root_module() {
+boost::shared_ptr<dogen::yarn::meta_model::module>& intermediate_model::root_module() {
     return root_module_;
 }
 
-void intermediate_model::root_module(const dogen::yarn::meta_model::module& v) {
+void intermediate_model::root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
     root_module_ = v;
 }
 
-void intermediate_model::root_module(const dogen::yarn::meta_model::module&& v) {
+void intermediate_model::root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>&& v) {
     root_module_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/meta_model/model.cpp b/projects/yarn/src/types/meta_model/model.cpp
index bc7bd8830..50f80576b 100644
--- a/projects/yarn/src/types/meta_model/model.cpp
+++ b/projects/yarn/src/types/meta_model/model.cpp
@@ -19,6 +19,7 @@
  *
  */
 #include "dogen/yarn/types/meta_model/model.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/meta_model/element.hpp"
 
 namespace boost {
@@ -30,6 +31,15 @@ const boost::shared_ptr<dogen::yarn::meta_model::element>& rhs) {
 
 }
 
+namespace boost {
+
+inline bool operator==(const boost::shared_ptr<dogen::yarn::meta_model::module>& lhs,
+const boost::shared_ptr<dogen::yarn::meta_model::module>& rhs) {
+    return (!lhs && !rhs) ||(lhs && rhs && (*lhs == *rhs));
+}
+
+}
+
 namespace dogen {
 namespace yarn {
 namespace meta_model {
@@ -55,7 +65,7 @@ model::model(
     const dogen::yarn::meta_model::name& name,
     const dogen::yarn::meta_model::name& meta_name,
     const std::vector<boost::shared_ptr<dogen::yarn::meta_model::element> >& elements,
-    const dogen::yarn::meta_model::module& root_module,
+    const boost::shared_ptr<dogen::yarn::meta_model::module>& root_module,
     const std::unordered_set<std::string>& module_ids,
     const bool has_generatable_types,
     const dogen::yarn::meta_model::languages input_language,
@@ -154,19 +164,19 @@ void model::elements(const std::vector<boost::shared_ptr<dogen::yarn::meta_model
     elements_ = std::move(v);
 }
 
-const dogen::yarn::meta_model::module& model::root_module() const {
+const boost::shared_ptr<dogen::yarn::meta_model::module>& model::root_module() const {
     return root_module_;
 }
 
-dogen::yarn::meta_model::module& model::root_module() {
+boost::shared_ptr<dogen::yarn::meta_model::module>& model::root_module() {
     return root_module_;
 }
 
-void model::root_module(const dogen::yarn::meta_model::module& v) {
+void model::root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>& v) {
     root_module_ = v;
 }
 
-void model::root_module(const dogen::yarn::meta_model::module&& v) {
+void model::root_module(const boost::shared_ptr<dogen::yarn::meta_model::module>&& v) {
     root_module_ = std::move(v);
 }
 
diff --git a/projects/yarn/src/types/transforms/annotations_transform.cpp b/projects/yarn/src/types/transforms/annotations_transform.cpp
index 16016cb79..314077778 100644
--- a/projects/yarn/src/types/transforms/annotations_transform.cpp
+++ b/projects/yarn/src/types/transforms/annotations_transform.cpp
@@ -24,6 +24,15 @@
 #include "dogen/annotations/io/scribble_group_io.hpp"
 #include "dogen/annotations/types/annotation_groups_factory.hpp"
 #include "dogen/annotations/types/annotation_groups_factory.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
diff --git a/projects/yarn/src/types/transforms/associations_transform.cpp b/projects/yarn/src/types/transforms/associations_transform.cpp
index 4f6ab29d7..b7bee7236 100644
--- a/projects/yarn/src/types/transforms/associations_transform.cpp
+++ b/projects/yarn/src/types/transforms/associations_transform.cpp
@@ -24,6 +24,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/associations_transform.hpp"
@@ -83,7 +84,7 @@ walk_name_tree(const meta_model::intermediate_model& im, meta_model::object& o,
     const auto ac(meta_model::object_types::associative_container);
     const auto i(im.objects().find(n.id()));
     const auto is_associative_container(i != im.objects().end() &&
-        i->second.object_type() == ac);
+        i->second->object_type() == ac);
 
     for (const auto c : nt.children()) {
         if (is_first && is_associative_container)
@@ -128,7 +129,7 @@ void associations_transform::transform(meta_model::intermediate_model& im) {
 
     for (auto& pair : im.objects()) {
         auto& o(pair.second);
-        expand_object(im, o);
+        expand_object(im, *o);
     }
     BOOST_LOG_SEV(lg, debug) << "Finished expanding objects.";
 }
diff --git a/projects/yarn/src/types/transforms/attributes_transform.cpp b/projects/yarn/src/types/transforms/attributes_transform.cpp
index df2656209..9ec4d88dc 100644
--- a/projects/yarn/src/types/transforms/attributes_transform.cpp
+++ b/projects/yarn/src/types/transforms/attributes_transform.cpp
@@ -26,6 +26,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 #include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
@@ -55,7 +56,7 @@ find_object(const meta_model::name& n, meta_model::intermediate_model& im) {
         BOOST_LOG_SEV(lg, error) << object_not_found << id;
         BOOST_THROW_EXCEPTION(transformation_error(object_not_found + id));
     }
-    return i->second;
+    return *i->second;
 }
 
 meta_model::concept& attributes_transform::
@@ -66,7 +67,7 @@ find_concept(const meta_model::name& n, meta_model::intermediate_model& im) {
         BOOST_LOG_SEV(lg, error) << concept_not_found << id;
         BOOST_THROW_EXCEPTION(transformation_error(concept_not_found + id));
     }
-    return i->second;
+    return *i->second;
 }
 
 void attributes_transform::expand_object(meta_model::object& o,
@@ -168,7 +169,7 @@ void attributes_transform::expand_objects(meta_model::intermediate_model& im) {
 
     std::unordered_set<std::string> processed_ids;
     for (auto& pair : im.objects()) {
-        auto& o(pair.second);
+        auto& o(*pair.second);
         expand_object(o, im, processed_ids);
     }
 }
@@ -218,7 +219,7 @@ void attributes_transform::expand_concepts(meta_model::intermediate_model& im) {
 
     std::unordered_set<std::string> processed_ids;
     for (auto& pair : im.concepts()) {
-        auto& c(pair.second);
+        auto& c(*pair.second);
         expand_concept(c, im, processed_ids);
     }
 }
diff --git a/projects/yarn/src/types/transforms/code_generation_chain.cpp b/projects/yarn/src/types/transforms/code_generation_chain.cpp
index 448777d6f..35f0c846b 100644
--- a/projects/yarn/src/types/transforms/code_generation_chain.cpp
+++ b/projects/yarn/src/types/transforms/code_generation_chain.cpp
@@ -24,6 +24,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/code_generation_chain.hpp"
@@ -157,7 +158,7 @@ transform(const context& ctx, const meta_model::model& m) {
      * conflicting options - output on language X but disable
      * kernel for language X - so we need to throw to let it know.
      */
-    const auto& ra(m.root_module().annotation());
+    const auto& ra(m.root_module()->annotation());
     const auto& alrp(ctx.archetype_location_repository());
     const auto& als(alrp.archetype_locations());
     const auto cfg(make_configuration(ctx, als, ra));
diff --git a/projects/yarn/src/types/transforms/concepts_transform.cpp b/projects/yarn/src/types/transforms/concepts_transform.cpp
index 84389c05a..50fad3629 100644
--- a/projects/yarn/src/types/transforms/concepts_transform.cpp
+++ b/projects/yarn/src/types/transforms/concepts_transform.cpp
@@ -26,6 +26,7 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/io/list_io.hpp"
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
 #include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/concepts_transform.hpp"
@@ -68,7 +69,7 @@ find_object(const meta_model::name& n, meta_model::intermediate_model& im) {
         BOOST_LOG_SEV(lg, error) << object_not_found << n.id();
         BOOST_THROW_EXCEPTION(transformation_error(object_not_found +  n.id()));
     }
-    return i->second;
+    return *i->second;
 }
 
 meta_model::concept& concepts_transform::
@@ -78,7 +79,7 @@ find_concept(const meta_model::name& n, meta_model::intermediate_model& im) {
         BOOST_LOG_SEV(lg, error) << concept_not_found << n.id();
         BOOST_THROW_EXCEPTION(transformation_error(concept_not_found + n.id()));
     }
-    return i->second;
+    return *i->second;
 }
 
 void concepts_transform::remove_duplicates(std::list<meta_model::name>& names) {
@@ -193,7 +194,7 @@ void concepts_transform::expand_objects(meta_model::intermediate_model& im) {
 
     std::unordered_set<meta_model::name> processed_names;
     for (auto& pair : im.objects()) {
-        auto& o(pair.second);
+        auto& o(*pair.second);
         expand_object(o, im, processed_names);
     }
 }
@@ -234,7 +235,7 @@ void concepts_transform::expand_concepts(meta_model::intermediate_model& im) {
 
     std::unordered_set<meta_model::name> processed_names;
     for (auto& pair : im.concepts()) {
-        auto& c(pair.second);
+        auto& c(*pair.second);
         expand_concept(c, im, processed_names);
     }
 }
diff --git a/projects/yarn/src/types/transforms/containment_transform.cpp b/projects/yarn/src/types/transforms/containment_transform.cpp
index e5d01c750..42c133820 100644
--- a/projects/yarn/src/types/transforms/containment_transform.cpp
+++ b/projects/yarn/src/types/transforms/containment_transform.cpp
@@ -18,9 +18,17 @@
  * MA 02110-1301, USA.
  *
  */
+#include <boost/make_shared.hpp>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/containment_transform.hpp"
@@ -45,19 +53,19 @@ inline void add_containing_module_to_non_contained_entities(
     const meta_model::name& container_name,
     AssociativeContainerOfContainable& c) {
     for (auto& pair : c) {
-        auto& s(pair.second);
+        auto& s(*pair.second);
         if (!s.contained_by())
             s.contained_by(container_name);
     }
 }
 
-meta_model::module
+boost::shared_ptr<meta_model::module>
 containment_transform::create_global_module(const meta_model::origin_types ot) {
-    meta_model::module r;
-    r.name().id("<global module>");
-    r.origin_type(ot);
-    r.documentation(global_module_doc);
-    r.is_global_module(true);
+    auto r(boost::make_shared<meta_model::module>());
+    r->name().id("<global module>");
+    r->origin_type(ot);
+    r->documentation(global_module_doc);
+    r->is_global_module(true);
     return r;
 }
 
@@ -67,7 +75,7 @@ inject_global_module(meta_model::intermediate_model& im) {
                              << im.name().id();
 
     const auto gm(create_global_module(im.origin_type()));
-    const auto gmn(gm.name());
+    const auto gmn(gm->name());
     const auto i(im.modules().find(gmn.id()));
     if (i != im.modules().end()) {
         const auto id(im.name().id());
diff --git a/projects/yarn/src/types/transforms/enablement_transform.cpp b/projects/yarn/src/types/transforms/enablement_transform.cpp
index 68eb26dea..88c899eec 100644
--- a/projects/yarn/src/types/transforms/enablement_transform.cpp
+++ b/projects/yarn/src/types/transforms/enablement_transform.cpp
@@ -31,8 +31,16 @@
 #include "dogen/annotations/types/annotation.hpp"
 #include "dogen/annotations/io/type_io.hpp"
 #include "dogen/annotations/types/entry_selector.hpp"
-#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/io/meta_model/facet_properties_io.hpp"
 #include "dogen/yarn/io/transforms/local_enablement_configuration_io.hpp"
@@ -491,7 +499,7 @@ transform(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started enablement transform.";
 
     const auto& atrp(ctx.type_repository());
-    const auto& ra(im.root_module().annotation());
+    const auto& ra(im.root_module()->annotation());
     const auto& als(ctx.archetype_location_repository().archetype_locations());
 
     /*
diff --git a/projects/yarn/src/types/transforms/enumerations_transform.cpp b/projects/yarn/src/types/transforms/enumerations_transform.cpp
index 225200eca..26db2b89a 100644
--- a/projects/yarn/src/types/transforms/enumerations_transform.cpp
+++ b/projects/yarn/src/types/transforms/enumerations_transform.cpp
@@ -26,6 +26,8 @@
 #include "dogen/annotations/io/type_io.hpp"
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
@@ -182,7 +184,7 @@ enumerations_transform::obtain_enumeration_default_underlying_element_name(
     meta_model::name r;
     bool found(false);
     for (const auto& pair : im.builtins()) {
-        const auto b(pair.second);
+        const auto b(*pair.second);
         const auto id(b.name().id());
         if (b.is_default_enumeration_type()) {
             BOOST_LOG_SEV(lg, debug) << "Found default enumeration underlying "
@@ -320,7 +322,7 @@ void enumerations_transform::transform(const context& ctx,
         const auto& id(pair.first);
         BOOST_LOG_SEV(lg, debug) << "Expanding: " << id;
 
-        auto& e(pair.second);
+        auto& e(*pair.second);
         populate_from_annotations(tg.enumeration, e);
         expand_default_underlying_element(duen, e);
         expand_enumerators(tg.enumerator, l, e);
diff --git a/projects/yarn/src/types/transforms/external_transforms_chain.cpp b/projects/yarn/src/types/transforms/external_transforms_chain.cpp
index 32e0afb07..13176771d 100644
--- a/projects/yarn/src/types/transforms/external_transforms_chain.cpp
+++ b/projects/yarn/src/types/transforms/external_transforms_chain.cpp
@@ -22,6 +22,7 @@
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/formatters/types/repository_factory.hpp"
 #include "dogen/formatters/types/decoration_properties_factory.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/external_transforms_chain.hpp"
 
@@ -63,7 +64,7 @@ transform(const context& ctx, meta_model::intermediate_model& im) {
     auto& rg(registrar());
     rg.validate();
 
-    const auto& ra(im.root_module().annotation());
+    const auto& ra(im.root_module()->annotation());
     const auto dpf(create_decoration_properties_factory(ctx, ra));
     for (const auto& et : rg.external_transforms())
         et->transform(ctx, dpf, im);
diff --git a/projects/yarn/src/types/transforms/final_model_transform.cpp b/projects/yarn/src/types/transforms/final_model_transform.cpp
index b07b9634c..ad1e197c2 100644
--- a/projects/yarn/src/types/transforms/final_model_transform.cpp
+++ b/projects/yarn/src/types/transforms/final_model_transform.cpp
@@ -23,6 +23,15 @@
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/list_io.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/helpers/meta_name_factory.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
@@ -60,7 +69,7 @@ private:
         }
     }
 
-    void add_element(boost::shared_ptr<meta_model::element> e) {
+    void add(boost::shared_ptr<meta_model::element> e) {
         /*
          * Element extensions share the same id as the original
          * element, so they are not considered duplicates. All other
@@ -74,27 +83,24 @@ private:
         result_.elements().push_back(e);
     }
 
-    template<typename Element>
-    void add(const Element& e) { add_element(boost::make_shared<Element>(e)); }
-
 public:
-    void operator()(meta_model::element&) { }
-    void operator()(const meta_model::module& m) {
-        result_.module_ids().insert(m.name().id());
+    void operator()(boost::shared_ptr<meta_model::element>) { }
+    void operator()(boost::shared_ptr<meta_model::module> m) {
+        result_.module_ids().insert(m->name().id());
         add(m);
     }
-    void operator()(const meta_model::concept& c) { add(c); }
-    void operator()(const meta_model::builtin& b) { add(b); }
-    void operator()(const meta_model::enumeration& e) { add(e); }
-    void operator()(const meta_model::primitive& p) { add(p); }
-    void operator()(const meta_model::object& o) { add(o); }
-    void operator()(const meta_model::exception& e) { add(e); }
-    void operator()(const meta_model::visitor& v) { add(v); }
+    void operator()(boost::shared_ptr<meta_model::concept> c) { add(c); }
+    void operator()(boost::shared_ptr<meta_model::builtin> b) { add(b); }
+    void operator()(boost::shared_ptr<meta_model::enumeration> e) { add(e); }
+    void operator()(boost::shared_ptr<meta_model::primitive> p) { add(p); }
+    void operator()(boost::shared_ptr<meta_model::object> o) { add(o); }
+    void operator()(boost::shared_ptr<meta_model::exception> e) { add(e); }
+    void operator()(boost::shared_ptr<meta_model::visitor> v) { add(v); }
 
 public:
     void add(const std::list<boost::shared_ptr<meta_model::element>>& ie) {
         for (const auto& e : ie)
-            add_element(e);
+            add(e);
     }
 
 public:
@@ -148,7 +154,7 @@ final_model_transform::transform(const meta_model::intermediate_model& im) {
     r.elements().reserve(size);
 
     model_populator mp(r);
-    meta_model::elements_traversal(im, mp);
+    meta_model::shared_elements_traversal(im, mp);
     mp.add(im.injected_elements());
 
     return r;
diff --git a/projects/yarn/src/types/transforms/generability_transform.cpp b/projects/yarn/src/types/transforms/generability_transform.cpp
index b85dc9522..285271c54 100644
--- a/projects/yarn/src/types/transforms/generability_transform.cpp
+++ b/projects/yarn/src/types/transforms/generability_transform.cpp
@@ -18,6 +18,14 @@
  * MA 02110-1301, USA.
  *
  */
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/transforms/generability_transform.hpp"
 
 namespace dogen {
@@ -31,38 +39,43 @@ bool generability_transform::is_generatable(const meta_model::element& e) {
 
 bool generability_transform::
 has_generatable_types(const meta_model::intermediate_model& im) {
+    /*
+     * Note: we are deliberately excluding modules since we do not
+     * want to generate an empty model with just a module because its
+     * documented.
+     */
     for (const auto pair : im.objects()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.enumerations()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.enumerations()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.exceptions()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.builtins()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.concepts()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
     for (const auto pair : im.primitives()) {
-        if (is_generatable(pair.second))
+        if (is_generatable(*pair.second))
             return true;
     }
 
diff --git a/projects/yarn/src/types/transforms/generalization_transform.cpp b/projects/yarn/src/types/transforms/generalization_transform.cpp
index e4bd34d37..0f1343362 100644
--- a/projects/yarn/src/types/transforms/generalization_transform.cpp
+++ b/projects/yarn/src/types/transforms/generalization_transform.cpp
@@ -26,6 +26,7 @@
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/helpers/resolver.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
@@ -86,7 +87,7 @@ generalization_transform::update_and_collect_parent_ids(
         const auto& id(pair.first);
         BOOST_LOG_SEV(lg, debug) << "Processing type: " << id;
 
-        auto& o(pair.second);
+        auto& o(*pair.second);
         if (o.parents().empty())
             continue;
 
@@ -149,7 +150,7 @@ void generalization_transform::populate_properties_up_the_generalization_tree(
                 transformation_error(parent_not_found + pn.id()));
         }
 
-        auto& parent(i->second);
+        auto& parent(*i->second);
         populate_properties_up_the_generalization_tree(tg, leaf, im, parent);
 
         if (parent.parents().empty()) {
@@ -179,7 +180,7 @@ populate_generalizable_properties(const type_group& tg,
         const auto& id(pair.first);
         BOOST_LOG_SEV(lg, debug) << "Processing type: " << id;
 
-        auto& o(pair.second);
+        auto& o(*pair.second);
 
         /*
          * We are a child if we have at least one parent.
@@ -236,7 +237,7 @@ populate_generalizable_properties(const type_group& tg,
 
 void generalization_transform::sort_leaves(meta_model::intermediate_model& im) {
     for (auto& pair : im.objects()) {
-        auto& o(pair.second);
+        auto& o(*pair.second);
         o.leaves().sort();
     }
 }
diff --git a/projects/yarn/src/types/transforms/intermediate_model_transform.cpp b/projects/yarn/src/types/transforms/intermediate_model_transform.cpp
index 5183f850a..46133815e 100644
--- a/projects/yarn/src/types/transforms/intermediate_model_transform.cpp
+++ b/projects/yarn/src/types/transforms/intermediate_model_transform.cpp
@@ -20,6 +20,15 @@
  */
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
 #include "dogen/yarn/types/transforms/intermediate_model_transform.hpp"
 
@@ -37,14 +46,15 @@ namespace yarn {
 namespace transforms {
 
 template<typename Element>
-inline std::unordered_map<std::string, Element>
+inline std::unordered_map<std::string, boost::shared_ptr<Element>>
 to_element_map(const std::list<std::pair<annotations::scribble_group,
-    Element>>& elements) {
+    boost::shared_ptr<Element>>>& elements) {
+
+    std::unordered_map<std::string, boost::shared_ptr<Element>> r;
+    for (const auto pair : elements) {
+        const auto e(pair.second);
+        const auto id(e->name().id());
 
-    std::unordered_map<std::string, Element> r;
-    for (const auto& pair : elements) {
-        const auto& e(pair.second);
-        const auto id(e.name().id());
         bool inserted(r.insert(std::make_pair(id, e)).second);
         if (!inserted) {
             BOOST_LOG_SEV(lg, error) << duplicate_element_id << id;
diff --git a/projects/yarn/src/types/transforms/language_transform.cpp b/projects/yarn/src/types/transforms/language_transform.cpp
index 1ece011d9..099f40994 100644
--- a/projects/yarn/src/types/transforms/language_transform.cpp
+++ b/projects/yarn/src/types/transforms/language_transform.cpp
@@ -24,6 +24,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
 #include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
@@ -72,7 +73,8 @@ make_type_group(const annotations::type_repository& atrp) {
     return r;
 }
 
-meta_model::languages language_transform::make_input_language(const type_group& tg,
+meta_model::languages
+language_transform::make_input_language(const type_group& tg,
     const annotations::annotation& a) {
     const annotations::entry_selector s(a);
     const auto lang_str(s.get_text_content_or_default(tg.input_language));
@@ -100,7 +102,7 @@ transform(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding language. Model: " << im.name().id();
 
     const auto tg(make_type_group(ctx.type_repository()));
-    const auto ra(im.root_module().annotation());
+    const auto ra(im.root_module()->annotation());
     using meta_model::languages;
     const bool has_input_language(im.input_language() != languages::invalid);
     if (!has_input_language) {
diff --git a/projects/yarn/src/types/transforms/meta_name_transform.cpp b/projects/yarn/src/types/transforms/meta_name_transform.cpp
index f24a7000b..1b9efd2d3 100644
--- a/projects/yarn/src/types/transforms/meta_name_transform.cpp
+++ b/projects/yarn/src/types/transforms/meta_name_transform.cpp
@@ -19,6 +19,7 @@
  *
  */
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/meta_model/intermediate_model.hpp"
 #include "dogen/yarn/types/helpers/meta_name_factory.hpp"
diff --git a/projects/yarn/src/types/transforms/modules_transform.cpp b/projects/yarn/src/types/transforms/modules_transform.cpp
index 5db103af2..cef66905a 100644
--- a/projects/yarn/src/types/transforms/modules_transform.cpp
+++ b/projects/yarn/src/types/transforms/modules_transform.cpp
@@ -18,9 +18,12 @@
  * MA 02110-1301, USA.
  *
  */
+#include <boost/make_shared.hpp>
 #include <boost/throw_exception.hpp>
 #include <boost/algorithm/string.hpp>
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
@@ -167,7 +170,8 @@ updater::containing_module(const meta_model::name& n) {
         BOOST_LOG_SEV(lg, debug) << "Adding type to module. Type: '"
                                  << n.id()
                                  << "' Module: '" << module_n.id();
-        i->second.members().push_back(n.id());
+        auto& o(*i->second);
+        o.members().push_back(n.id());
         return module_n;
     }
 
@@ -201,7 +205,8 @@ populate_root_module(meta_model::intermediate_model& im) {
         BOOST_THROW_EXCEPTION(transformation_error(missing_root_module + id));
     }
 
-    i->second.is_root(true);
+    auto& m(*i->second);
+    m.is_root(true);
     im.root_module(i->second);
 }
 
@@ -216,10 +221,10 @@ create_missing_modules(meta_model::intermediate_model& im) {
         const auto n(f.build_module_name(im.name(), ipp));
         const auto i(im.modules().find(n.id()));
         if (i == im.modules().end()) {
-            meta_model::module mod;
-            mod.name(n);
-            mod.origin_type(im.origin_type());
-            im.modules().insert(std::make_pair(n.id(), mod));
+            auto m(boost::make_shared<meta_model::module>());
+            m->name(n);
+            m->origin_type(im.origin_type());
+            im.modules().insert(std::make_pair(n.id(), m));
         }
     }
 }
diff --git a/projects/yarn/src/types/transforms/naming_transform.cpp b/projects/yarn/src/types/transforms/naming_transform.cpp
index 9ffa0c916..2834c641f 100644
--- a/projects/yarn/src/types/transforms/naming_transform.cpp
+++ b/projects/yarn/src/types/transforms/naming_transform.cpp
@@ -23,6 +23,15 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/location_builder.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
@@ -96,7 +105,7 @@ naming_transform::make_naming_configuration(const type_group& tg,
 const annotations::annotation& naming_transform::
 obtain_root_annotation(const meta_model::exogenous_model& em) {
     for (const auto& pair : em.modules()) {
-        const auto& m(pair.second);
+        const auto& m(*pair.second);
         if (m.is_root())
             return m.annotation();
     }
diff --git a/projects/yarn/src/types/transforms/origin_transform.cpp b/projects/yarn/src/types/transforms/origin_transform.cpp
index 3672bc161..0b8c52e62 100644
--- a/projects/yarn/src/types/transforms/origin_transform.cpp
+++ b/projects/yarn/src/types/transforms/origin_transform.cpp
@@ -23,6 +23,15 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/types/meta_model/elements_traversal.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/transformation_error.hpp"
@@ -80,7 +89,7 @@ make_type_group(const annotations::type_repository& atrp) {
 
 bool origin_transform::
 is_proxy_model(const type_group& tg, const meta_model::intermediate_model& im) {
-    const auto& o(im.root_module().annotation());
+    const auto& o(im.root_module()->annotation());
     const annotations::entry_selector s(o);
     const bool r(s.get_boolean_content_or_default(tg.is_proxy_model));
     BOOST_LOG_SEV(lg, debug) << "Read is proxy model: " << r
diff --git a/projects/yarn/src/types/transforms/orm_transform.cpp b/projects/yarn/src/types/transforms/orm_transform.cpp
index d683a3b03..c116314e7 100644
--- a/projects/yarn/src/types/transforms/orm_transform.cpp
+++ b/projects/yarn/src/types/transforms/orm_transform.cpp
@@ -26,6 +26,15 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/io/meta_model/orm_model_properties_io.hpp"
 #include "dogen/yarn/io/meta_model/orm_object_properties_io.hpp"
 #include "dogen/yarn/io/meta_model/orm_primitive_properties_io.hpp"
@@ -317,7 +326,7 @@ expand_objects(const type_group& tg, meta_model::intermediate_model& im) {
          * done for this object. Configurations are setup during
          * stereotype expansion, if the ORM stereotypes were present.
          */
-        auto& o(pair.second);
+        auto& o(*pair.second);
         if (!o.orm_properties())
             continue;
 
@@ -361,7 +370,7 @@ expand_concepts(const type_group& tg, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started concept expansion.";
 
     for (auto& pair : im.concepts()) {
-        auto& c(pair.second);
+        auto& c(*pair.second);
         for (auto& attr : c.local_attributes()) {
             const auto& a(attr.annotation());
             attr.orm_properties(make_attribute_properties(tg, a));
@@ -386,7 +395,7 @@ void orm_transform::expand_primitives(
          * done for this primitive. Configurations are setup during
          * stereotype expansion, if the ORM stereotypes were present.
          */
-        auto& p(pair.second);
+        auto& p(*pair.second);
         if (!p.orm_properties())
             continue;
 
@@ -415,7 +424,7 @@ expand_modules(const type_group& tg, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started module expansion.";
 
     for (auto& pair : im.modules()) {
-        auto& m(pair.second);
+        auto& m(*pair.second);
         const auto& a(m.annotation());
         auto cfg(make_module_properties(tg, a));
         if (!cfg)
@@ -443,7 +452,7 @@ expand_modules(const type_group& tg, meta_model::intermediate_model& im) {
 
             const auto i(im.objects().find(id));
             if (i != im.objects().end()) {
-                auto& o(i->second);
+                auto& o(*i->second);
                 auto& cfg(o.orm_properties());
                 const bool update_schema_name(cfg && cfg->schema_name().empty()
                     && (cfg->generate_mapping() || cfg->is_value()));
@@ -459,7 +468,7 @@ expand_modules(const type_group& tg, meta_model::intermediate_model& im) {
                 if (j == im.primitives().end())
                     continue;
 
-                auto& p(j->second);
+                auto& p(*j->second);
                 auto& cfg(p.orm_properties());
                 const bool update_schema_name(cfg &&
                     cfg->schema_name().empty() && cfg->generate_mapping());
@@ -482,7 +491,7 @@ expand(const context& ctx, meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Started expansion.";
 
     const auto tg(make_type_group(ctx.type_repository()));
-    const auto& rm(im.root_module());
+    const auto& rm(*im.root_module());
     im.orm_properties(make_model_properties(tg, rm.annotation()));
 
     expand_objects(tg, im);
diff --git a/projects/yarn/src/types/transforms/parsing_transform.cpp b/projects/yarn/src/types/transforms/parsing_transform.cpp
index 5d1df9101..4b16ea4f2 100644
--- a/projects/yarn/src/types/transforms/parsing_transform.cpp
+++ b/projects/yarn/src/types/transforms/parsing_transform.cpp
@@ -27,6 +27,15 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/module.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
+#include "dogen/yarn/types/meta_model/builtin.hpp"
+#include "dogen/yarn/types/meta_model/concept.hpp"
+#include "dogen/yarn/types/meta_model/element.hpp"
+#include "dogen/yarn/types/meta_model/visitor.hpp"
+#include "dogen/yarn/types/meta_model/exception.hpp"
+#include "dogen/yarn/types/meta_model/primitive.hpp"
+#include "dogen/yarn/types/meta_model/enumeration.hpp"
 #include "dogen/yarn/io/meta_model/languages_io.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
 #include "dogen/yarn/types/helpers/name_factory.hpp"
@@ -238,7 +247,7 @@ transform(const context& ctx, meta_model::intermediate_model& m) {
     const auto l(m.input_language());
 
     for (auto& pair : m.objects()) {
-        auto& o(pair.second);
+        auto& o(*pair.second);
         const auto id(o.name().id());
 
         try {
@@ -251,7 +260,7 @@ transform(const context& ctx, meta_model::intermediate_model& m) {
     }
 
     for (auto& pair : m.concepts()) {
-        auto& c(pair.second);
+        auto& c(*pair.second);
         const auto id(c.name().id());
 
         try {
@@ -263,7 +272,7 @@ transform(const context& ctx, meta_model::intermediate_model& m) {
     }
 
     for (auto& pair : m.enumerations()) {
-        auto& e(pair.second);
+        auto& e(*pair.second);
         const auto id(e.name().id());
 
         try {
@@ -275,7 +284,7 @@ transform(const context& ctx, meta_model::intermediate_model& m) {
     }
 
     for (auto& pair : m.primitives()) {
-        auto& p(pair.second);
+        auto& p(*pair.second);
         const auto id(p.name().id());
 
         try {
diff --git a/projects/yarn/src/types/transforms/primitives_transform.cpp b/projects/yarn/src/types/transforms/primitives_transform.cpp
index b1647c00a..87eed2ed3 100644
--- a/projects/yarn/src/types/transforms/primitives_transform.cpp
+++ b/projects/yarn/src/types/transforms/primitives_transform.cpp
@@ -86,7 +86,7 @@ transform(const context& ctx, meta_model::intermediate_model& im) {
         const auto& id(pair.first);
         BOOST_LOG_SEV(lg, debug) << "Expanding: " << id;
 
-        auto& p(pair.second);
+        auto& p(*pair.second);
         populate_from_annotations(tg, p);
     }
 
diff --git a/projects/yarn/src/types/transforms/stereotypes_transform.cpp b/projects/yarn/src/types/transforms/stereotypes_transform.cpp
index 7d8273cdf..c156d86f3 100644
--- a/projects/yarn/src/types/transforms/stereotypes_transform.cpp
+++ b/projects/yarn/src/types/transforms/stereotypes_transform.cpp
@@ -18,11 +18,11 @@
  * MA 02110-1301, USA.
  *
  */
+#include <boost/make_shared.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/vector_io.hpp"
-#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/io/meta_model/name_io.hpp"
 #include "dogen/yarn/types/helpers/resolver.hpp"
 #include "dogen/yarn/types/helpers/name_builder.hpp"
@@ -94,7 +94,7 @@ bucket_leaves_by_location(const std::list<meta_model::name>& leaves) {
     return r;
 }
 
-meta_model::visitor
+boost::shared_ptr<meta_model::visitor>
 stereotypes_transform::create_visitor(const meta_model::object& o,
     const meta_model::location& l, const meta_model::origin_types ot,
     const std::list<meta_model::name>& leaves) {
@@ -105,10 +105,10 @@ stereotypes_transform::create_visitor(const meta_model::object& o,
     const auto n(b.build());
     BOOST_LOG_SEV(lg, debug) << "Creating visitor: " << n.id();
 
-    meta_model::visitor r;
-    r.name(n);
-    r.origin_type(ot);
-    r.documentation(visitor_doc + o.name().simple());
+    auto r(boost::make_shared<meta_model::visitor>());
+    r->name(n);
+    r->origin_type(ot);
+    r->documentation(visitor_doc + o.name().simple());
 
     if (leaves.empty()) {
         BOOST_LOG_SEV(lg, error) << no_visitees << n.id();
@@ -116,7 +116,7 @@ stereotypes_transform::create_visitor(const meta_model::object& o,
     }
 
     for (const auto& l : leaves)
-        r.visits().push_back(l);
+        r->visits().push_back(l);
 
     BOOST_LOG_SEV(lg, debug) << "Created visitor: " << n.id();
     return r;
@@ -135,7 +135,7 @@ update_visited_leaves(const std::list<meta_model::name>& leaves,
                 transformation_error(leaf_not_found + l.id()));
         }
 
-        auto& o(i->second);
+        auto& o(*i->second);
         o.is_visitation_leaf(true);
         o.base_visitor(vd.base);
         o.derived_visitor(vd.derived);
@@ -145,18 +145,18 @@ update_visited_leaves(const std::list<meta_model::name>& leaves,
 }
 
 void stereotypes_transform::
-add_visitor_to_model(const meta_model::visitor& v,
+add_visitor_to_model(const boost::shared_ptr<meta_model::visitor> v,
     meta_model::intermediate_model& im) {
-    BOOST_LOG_SEV(lg, debug) << "Adding visitor: " << v.name().id();
+    const auto id(v->name().id());
+    BOOST_LOG_SEV(lg, debug) << "Adding visitor: " << id;
 
-    const auto pair(std::make_pair(v.name().id(), v));
+    const auto pair(std::make_pair(id, v));
     const auto i(im.visitors().insert(pair));
     if (!i.second) {
-        const auto id(v.name().id());
         BOOST_LOG_SEV(lg, error) << duplicate_name << id;
         BOOST_THROW_EXCEPTION(transformation_error(duplicate_name + id));
     }
-    BOOST_LOG_SEV(lg, debug) << "Added visitor: " << v.name().id();
+    BOOST_LOG_SEV(lg, debug) << "Added visitor: " << id;
 }
 
 void stereotypes_transform::
@@ -222,7 +222,7 @@ expand_visitable(meta_model::object& o, meta_model::intermediate_model& im) {
      * visitor base.
      */
     const auto bv(create_visitor(o, loc, o.origin_type(), bvl));
-    const auto bvn(bv.name());
+    const auto bvn(bv->name());
     o.is_visitation_root(true);
     o.base_visitor(bvn);
     update_visited_leaves(bvl, visitor_details(bvn), im);
@@ -270,8 +270,8 @@ expand_visitable(meta_model::object& o, meta_model::intermediate_model& im) {
          */
         const auto& bl(pair.second);
         auto dv(create_visitor(o, dv_location, ot, bl));
-        const auto dvn(dv.name());
-        dv.parent(bvn);
+        const auto dvn(dv->name());
+        dv->parent(bvn);
         update_visited_leaves(bl, visitor_details(bvn, dvn), im);
         add_visitor_to_model(dv, im);
     }
@@ -381,10 +381,10 @@ void stereotypes_transform::transform(meta_model::intermediate_model& im) {
     BOOST_LOG_SEV(lg, debug) << "Expanding stereotypes for: " << im.name().id();
 
     for (auto& pair : im.objects())
-        expand(pair.second, im);
+        expand(*pair.second, im);
 
     for (auto& pair : im.primitives())
-        expand(pair.second);
+        expand(*pair.second);
 
     BOOST_LOG_SEV(lg, debug) << "Finished expanding stereotypes.";
 }
diff --git a/projects/yarn/src/types/transforms/type_params_transform.cpp b/projects/yarn/src/types/transforms/type_params_transform.cpp
index ef4c678f7..9b946fc12 100644
--- a/projects/yarn/src/types/transforms/type_params_transform.cpp
+++ b/projects/yarn/src/types/transforms/type_params_transform.cpp
@@ -21,6 +21,7 @@
 #include "dogen/annotations/types/entry_selector.hpp"
 #include "dogen/annotations/types/type_repository_selector.hpp"
 #include "dogen/yarn/types/traits.hpp"
+#include "dogen/yarn/types/meta_model/object.hpp"
 #include "dogen/yarn/types/transforms/context.hpp"
 #include "dogen/yarn/types/transforms/type_params_transform.hpp"
 
@@ -73,7 +74,7 @@ void type_params_transform::
 transform(const context& ctx, meta_model::intermediate_model& im) {
     const auto tg(make_type_group(ctx.type_repository()));
     for (auto& pair : im.objects()) {
-        auto& o(pair.second);
+        auto& o(*pair.second);
         expand_type_parameters(tg, o);
     }
 }
