diff --git a/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/transformer.hpp b/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/transformer.hpp
index 1b90e3a71..99492eedb 100644
--- a/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/transformer.hpp
+++ b/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/transformer.hpp
@@ -51,8 +51,9 @@ public:
         const yarn::name& target_model_name,
         const std::unordered_map<std::string, dogen::yarn::name>&
         schema_name_to_model_name,
-        const std::unordered_map<std::string,
-        dogen::upsilon::name>& collection_names);
+        const std::unordered_map<std::string, dogen::upsilon::name>&
+        collection_names,
+        const std::unordered_map<std::string, std::string>& intrinsic_names);
 
 private:
     std::string to_unparsed_type(const dogen::upsilon::name& tn) const;
@@ -74,6 +75,7 @@ private:
     schema_name_to_model_name_;
     const std::unordered_map<std::string, dogen::upsilon::name>
     collection_names_;
+    const std::unordered_map<std::string, std::string> intrinsic_names_;
 };
 
 } } }
diff --git a/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/workflow.hpp b/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/workflow.hpp
index 801a16d97..476a62379 100644
--- a/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/workflow.hpp
+++ b/projects/yarn.upsilon/include/dogen/yarn.upsilon/types/workflow.hpp
@@ -33,6 +33,7 @@
 #include "dogen/upsilon/types/name.hpp"
 #include "dogen/upsilon/types/model.hpp"
 #include "dogen/upsilon/types/output.hpp"
+#include "dogen/upsilon/types/intrinsic_types.hpp"
 #include "dogen/yarn/types/languages.hpp"
 #include "dogen/yarn/types/intermediate_model.hpp"
 
@@ -43,11 +44,9 @@ namespace upsilon {
 class workflow final {
 private:
     /**
-     * @brief Obtains a list of output languages from the upsilon
-     * configuration.
+     * @brief Indexes the upsilon model.
      */
-    std::list<languages> obtain_output_languages(
-        const std::vector<dogen::upsilon::output>& outputs) const;
+    indices index(const dogen::upsilon::model& um) const;
 
     /**
      * @brief Creates a map of schema names to yarn model names.
@@ -76,7 +75,9 @@ private:
         const std::unordered_map<std::string, dogen::yarn::name>&
         schema_name_to_model_name,
         const std::unordered_map<std::string, dogen::upsilon::name>&
-        collection_names, yarn::intermediate_model& im) const;
+        collection_names, const std::unordered_map<
+        dogen::upsilon::intrinsic_types, dogen::yarn::name>& intrinsic_names,
+        yarn::intermediate_model& im) const;
 
 public:
     yarn::intermediate_model execute(const dogen::upsilon::model& um) const;
diff --git a/projects/yarn.upsilon/src/types/transformer.cpp b/projects/yarn.upsilon/src/types/transformer.cpp
index 1a3532273..64d36cee6 100644
--- a/projects/yarn.upsilon/src/types/transformer.cpp
+++ b/projects/yarn.upsilon/src/types/transformer.cpp
@@ -19,9 +19,11 @@
  *
  */
 #include <sstream>
+#include <boost/lexical_cast.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/yarn/types/name_factory.hpp"
 #include "dogen/upsilon/io/name_io.hpp"
+#include "dogen/upsilon/io/intrinsic_types_io.hpp"
 #include "dogen/yarn.upsilon/types/transformation_error.hpp"
 #include "dogen/yarn.upsilon/types/transformer.hpp"
 
@@ -35,6 +37,7 @@ const std::string collection_name("Collection");
 const std::string less_than("<");
 const std::string more_than(">");
 
+const std::string missing_intrinsic("Could not find intrinsic: ");
 const std::string missing_schema_reference(
     "Type belongs to a schema that is not referenced: ");
 
@@ -47,21 +50,31 @@ namespace upsilon {
 transformer::transformer(const yarn::name& target_model_name)
     : target_model_name_(target_model_name),
       schema_name_to_model_name_(),
-      collection_names_() {}
+      collection_names_(),
+      intrinsic_names_() {}
 
 transformer::
 transformer(const yarn::name& target_model_name,
     const std::unordered_map<std::string, dogen::yarn::name>&
     schema_name_to_model_name,
     const std::unordered_map<std::string,
-    dogen::upsilon::name>& collection_names)
+    dogen::upsilon::name>& collection_names,
+    const std::unordered_map<std::string, std::string>& intrinsic_names)
     : target_model_name_(target_model_name),
       schema_name_to_model_name_(schema_name_to_model_name),
-      collection_names_(collection_names) {}
+      collection_names_(collection_names),
+      intrinsic_names_(intrinsic_names) {}
 
 std::string
 transformer::to_unparsed_type(const dogen::upsilon::name& tn) const {
-    const auto i(collection_names_.find(tn.id()));
+    const auto id(tn.id());
+
+    const auto i(intrinsic_names_.find(id));
+    if (i != intrinsic_names_.end()) {
+        return i->second;quc
+    }
+
+    const auto i(collection_names_.find(id));
     if (i == collection_names_.end()) {
         if (tn.schema_name().empty())
             return tn.value();
@@ -114,8 +127,25 @@ void transformer::populate_element_properties(const dogen::upsilon::type& t,
 yarn::primitive
 transformer::to_primitive(const dogen::upsilon::primitive& p) const {
     BOOST_LOG_SEV(lg, debug) << "Transforming primitive: " << p.name();
+
+    const auto i(intrinsic_names_.find(p.intrinsic()));
+    if (i == intrinsic_names_.end()) {
+        const auto s(boost::lexical_cast<std::string>(p.intrinsic()));
+        BOOST_LOG_SEV(lg, error) << missing_intrinsic << s;
+        BOOST_THROW_EXCEPTION(transformation_error(missing_intrinsic + s));
+    }
+
+    /*
+     * Primitive types are purely "pass-through" types; we map them to
+     * their intrinsic type and further down the pipeline they get
+     * mapped into the appropriate built-in or standard library
+     * types. Thus we just populate the minimal set of attributes for
+     * them needed for the mapping.
+     */
     yarn::primitive r;
-    populate_element_properties(p, r);
+    r.name(i->second);
+    r.origin_type(dogen::yarn::origin_types::proxy_reference);
+
     BOOST_LOG_SEV(lg, debug) << "Finished transforming primitive";
     return r;
 }
diff --git a/projects/yarn.upsilon/src/types/workflow.cpp b/projects/yarn.upsilon/src/types/workflow.cpp
index 6e35363b2..83940a0c4 100644
--- a/projects/yarn.upsilon/src/types/workflow.cpp
+++ b/projects/yarn.upsilon/src/types/workflow.cpp
@@ -21,6 +21,7 @@
 #include <list>
 #include <boost/lexical_cast.hpp>
 #include <boost/throw_exception.hpp>
+#include <boost/algorithm/string.hpp>
 #include "dogen/utility/log/logger.hpp"
 #include "dogen/utility/io/unordered_map_io.hpp"
 #include "dogen/yarn/types/name.hpp"
@@ -44,6 +45,19 @@ const std::string incorrect_number_of_outputs(
 const std::string unspported_target("Target is not supported: ");
 const std::string duplicate_id("Duplicate id: ");
 const std::string duplicate_schema_name("Duplicate schema name: ");
+const std::string unsupported_intrinsic("Intrinsic is invalid or unsupported: ");
+
+const std::string intrinsic_integer("Integer");
+const std::string intrinsic_integer64("Integer64");
+const std::string intrinsic_double("Double");
+const std::string intrinsic_boolean("Boolean");
+const std::string intrinsic_string("String");
+const std::string intrinsic_binary("Binary");
+const std::string intrinsic_guid("Guid");
+const std::string intrinsic_date("Date");
+const std::string intrinsic_utc_time("UtcTime");
+const std::string intrinsic_utc_date_time("UtcDateTime");
+const std::string intrinsic_decimal("Decimal");
 
 }
 
@@ -51,41 +65,111 @@ namespace dogen {
 namespace yarn {
 namespace upsilon {
 
-class collection_accumulator : public dogen::upsilon::type_visitor {
+namespace {
+
+class indexer : public dogen::upsilon::type_visitor {
+public:
+    class indices {
+    public:
+        std::unordered_map<std::string, dogen::upsilon::name> collection_names;
+        std::unordered_map<std::string, std::string> intrinsic_names;
+    };
+
+public:
+    std::string to_intrinsic_name(
+        const dogen::upsilon::intrinsic_types it) const;
+
 public:
     using dogen::upsilon::type_visitor::visit;
     void visit(const dogen::upsilon::collection& c);
+    void visit(const dogen::upsilon::primitive& p);
 
 public:
-    const std::unordered_map<std::string, dogen::upsilon::name>& result() const;
+    const indices& result() const;
+
+public:
+    void index(const dogen::upsilon::model& um) const;
 
 private:
-    std::unordered_map<std::string, dogen::upsilon::name> result_;
+    indices result_;
 };
 
-void collection_accumulator::visit(const dogen::upsilon::collection& c) {
+std::string indexer::to_intrinsic_name(
+    const dogen::upsilon::intrinsic_types it) const {
+
+    using dogen::upsilon::intrinsic_types;
+    switch(it) {
+    case intrinsic_types::integer: return intrinsic_integer;
+    case intrinsic_types::integer64: return intrinsic_integer64;
+    case intrinsic_types::double_x: return intrinsic_double;
+    case intrinsic_types::boolean: return intrinsic_boolean;
+    case intrinsic_types::string: return intrinsic_string;
+    case intrinsic_types::binary: return intrinsic_binary;
+    case intrinsic_types::guid: return intrinsic_guid;
+    case intrinsic_types::date: return intrinsic_date;
+    case intrinsic_types::utc_time: return intrinsic_utc_time;
+    case intrinsic_types::utc_date_time: return intrinsic_utc_date_time;
+    case intrinsic_types::decimal: return intrinsic_decimal;
+    default:
+        const auto s(boost::lexical_cast<std::string>(it));
+        BOOST_LOG_SEV(lg, error) << unsupported_intrinsic << s;
+        BOOST_THROW_EXCEPTION(workflow_error(unsupported_intrinsic + s));
+    }
+}
+
+void indexer::visit(const dogen::upsilon::collection& c) {
     const auto id(c.name().id());
     BOOST_LOG_SEV(lg, debug) << "Processing: " << id;
 
     const auto pair(std::make_pair(id, c.type_name()));
-    const auto inserted(result_.insert(pair).second);
+    const auto inserted(result_.collection_names.insert(pair).second);
+    if (!inserted) {
+        BOOST_LOG_SEV(lg, error) << duplicate_id << id;
+        BOOST_THROW_EXCEPTION(workflow_error(duplicate_id + id));
+    }
+}
+
+void indexer::visit(const dogen::upsilon::primitive& p) {
+    const auto id(p.name().id());
+    BOOST_LOG_SEV(lg, debug) << "Processing: " << id;
+
+    const auto pair(std::make_pair(id, to_intrinsic_name(p.intrinsic())));
+    const auto inserted(result_.intrinsic_names.insert(pair).second);
     if (!inserted) {
         BOOST_LOG_SEV(lg, error) << duplicate_id << id;
         BOOST_THROW_EXCEPTION(workflow_error(duplicate_id + id));
     }
 }
 
-const std::unordered_map<std::string, dogen::upsilon::name>&
-collection_accumulator::result() const {
+const indexer::indices& indexer::result() const {
     return result_;
 }
 
+void indexer::index(const dogen::upsilon::model& um) const {
+    for (const auto& pair : um.schemas()) {
+        const auto& schema(pair.second);
+        BOOST_LOG_SEV(lg, debug) << "Indexing schema: "
+                                 << schema.file_name().generic_string();
+
+        const auto& types(schema.types());
+        for (const auto& ptr : types) {
+            const auto& t(*ptr);
+            t.accept(*this);
+        }
+
+        BOOST_LOG_SEV(lg, debug) << "Finished indexing schema.";
+    }
+    BOOST_LOG_SEV(lg, debug) << "Finished indexing. ";
+}
+
 class model_populator : public dogen::upsilon::type_visitor {
 public:
     model_populator(const std::unordered_map<std::string, dogen::yarn::name>&
         schema_name_to_model_name,
         const std::unordered_map<std::string, dogen::upsilon::name>&
-        collection_names, yarn::intermediate_model& im);
+        collection_names, const std::unordered_map<
+        dogen::upsilon::intrinsic_types, dogen::yarn::name>& intrinsic_names,
+        yarn::intermediate_model& im);
 
 private:
     template<typename Nameable>
@@ -115,9 +199,11 @@ model_populator::
 model_populator(const std::unordered_map<std::string, dogen::yarn::name>&
     schema_name_to_model_name,
     const std::unordered_map<std::string, dogen::upsilon::name>&
-    collection_names, yarn::intermediate_model& im)
+    collection_names, const std::unordered_map<dogen::upsilon::intrinsic_types,
+    dogen::yarn::name>& intrinsic_names, yarn::intermediate_model& im)
     : model_(im),
-      transformer_(im.name(), schema_name_to_model_name, collection_names) {}
+      transformer_(im.name(), schema_name_to_model_name, collection_names,
+          intrinsic_names) {}
 
 void model_populator::visit(const dogen::upsilon::compound& c) {
     const auto o(transformer_.to_object(c));
@@ -134,6 +220,12 @@ void model_populator::visit(const dogen::upsilon::primitive& p) {
     insert(yp, model_.primitives());
 }
 
+}
+
+indices workflow::index(const dogen::upsilon::model& um) const {
+
+}
+
 std::list<languages> workflow::obtain_output_languages(
     const std::vector<dogen::upsilon::output>& outputs) const {
     std::list<languages> r;
@@ -160,29 +252,6 @@ std::list<languages> workflow::obtain_output_languages(
     return r;
 }
 
-std::unordered_map<std::string, dogen::upsilon::name> workflow::
-obtain_collection_names(const dogen::upsilon::model& um) const {
-    BOOST_LOG_SEV(lg, debug) << "Started accumulating collection names.";
-
-    collection_accumulator ca;
-    for (const auto& pair : um.schemas()) {
-        const auto& schema(pair.second);
-        BOOST_LOG_SEV(lg, debug) << "Processing Schema: "
-                                 << schema.file_name().generic_string();
-
-        const auto& types(schema.types());
-        for (const auto& ptr : types) {
-            const auto& t(*ptr);
-            t.accept(ca);
-        }
-
-        BOOST_LOG_SEV(lg, debug) << "Finished processing Schema.";
-    }
-    BOOST_LOG_SEV(lg, debug) << "Finished accumulating collection names."
-                             << " Result: " << ca.result();
-    return ca.result();
-}
-
 std::unordered_map<std::string, dogen::yarn::name>
 workflow::map_schema_name_to_model_name(const dogen::upsilon::model& um) const {
     std::unordered_map<std::string, dogen::yarn::name> r;
@@ -235,9 +304,11 @@ void workflow::populate_model(const dogen::upsilon::model& um,
     const std::unordered_map<std::string, dogen::yarn::name>&
     schema_name_to_model_name,
     const std::unordered_map<std::string, dogen::upsilon::name>&
-    collection_names, yarn::intermediate_model& im) const {
+    collection_names, const std::unordered_map<dogen::upsilon::intrinsic_types,
+    dogen::yarn::name>& intrinsic_names, yarn::intermediate_model& im) const {
 
-    model_populator mp(schema_name_to_model_name, collection_names, im);
+    const auto& snmn(schema_name_to_model_name);
+    model_populator mp(snmn, collection_names, intrinsic_names, im);
     for (const auto& pair : um.schemas()) {
         const auto& schema(pair.second);
         BOOST_LOG_SEV(lg, debug) << "Populating from Schema: "
@@ -258,10 +329,13 @@ workflow::execute(const dogen::upsilon::model& um) const {
     BOOST_LOG_SEV(lg, debug) << "Executing workflow on upsilon model. Config: "
                              << um.config().file_name().generic_string();
 
-    const auto cn(obtain_collection_names(um));
+    indexer idx;
+    idx.index(um);
+    const auto indices(idx.result());
+
     const auto snmn(map_schema_name_to_model_name(um));
     auto r(create_model(um));
-    populate_model(um, snmn, cn, r);
+    populate_model(um, snmn, idx.collection_names, idx.intrinsic_names, r);
 
     BOOST_LOG_SEV(lg, debug) << "Finished executing workflow on upsilon model.";
     return r;
