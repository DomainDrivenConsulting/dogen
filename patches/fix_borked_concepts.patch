diff --git a/diagrams/sml.dia b/diagrams/sml.dia
index 8ad8957..5c2be29 100644
--- a/diagrams/sml.dia
+++ b/diagrams/sml.dia
@@ -7888,30 +7888,116 @@ requirements of the underlying typed element.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O48">
+    <dia:object type="UML - Generalization" version="1" id="O48">
       <dia:attribute name="obj_pos">
-        <dia:point val="-128,129"/>
+        <dia:point val="-80.0875,105.4"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="-113.795,105.35;-79.2375,115.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="-80.0875,105.4"/>
+        <dia:point val="-80.0875,110"/>
+        <dia:point val="-113.745,110"/>
+        <dia:point val="-113.745,115"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O44" connection="6"/>
+        <dia:connection handle="1" to="O46" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O49">
+      <dia:attribute name="obj_pos">
+        <dia:point val="-80.0875,105.4"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="-94.485,105.35;-79.2375,115"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="-80.0875,105.4"/>
+        <dia:point val="-80.0875,110"/>
+        <dia:point val="-94.435,110"/>
+        <dia:point val="-94.435,114.95"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O44" connection="6"/>
+        <dia:connection handle="1" to="O47" connection="14"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O50">
+      <dia:attribute name="obj_pos">
+        <dia:point val="-79,115"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-128.05,128.95;-118.98,138.25"/>
+        <dia:rectangle val="-79.05,114.95;-68.44,118.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-128,129"/>
+        <dia:point val="-79,115"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="8.9700000000000006"/>
+        <dia:real val="10.51"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="9.2000000000000011"/>
+        <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#value_types#</dia:string>
+        <dia:string>#service#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#enumeration#</dia:string>
+        <dia:string>#entity, aggregate root#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>##</dia:string>
+        <dia:string>#Type of model element that has behaviour but not necessarily other object properties.
+
+In traditional Domain Driven Design, a service is a set of operations that
+conceptually do not belong to any specific object. In dogen, due to code
+generation constraints, services tend to be where all the behaviour sits.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -7994,177 +8080,16 @@ requirements of the underlying typed element.#</dia:string>
       <dia:attribute name="attributes">
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#user_defined#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value was created by the user.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#unversioned_key#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value is an unversioned key.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#versioned_key#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value is a versioned key.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#exception#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value represents an exception type.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#string_table#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value is a list of strings.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#smart_pointer#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Value is a smart pointer.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#associative_container#</dia:string>
+            <dia:string>#type#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>##</dia:string>
+            <dia:string>#service_types#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#Type is an associative container.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#sequence_container#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Type is a sequence container.#</dia:string>
+            <dia:string>#Type of the service.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -8183,12 +8108,12 @@ requirements of the underlying typed element.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O49">
+    <dia:object type="UML - Generalization" version="1" id="O51">
       <dia:attribute name="obj_pos">
         <dia:point val="-80.0875,105.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-113.795,105.35;-79.2375,115.05"/>
+        <dia:rectangle val="-80.9375,105.35;-73.695,115.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -8196,8 +8121,8 @@ requirements of the underlying typed element.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="-80.0875,105.4"/>
         <dia:point val="-80.0875,110"/>
-        <dia:point val="-113.745,110"/>
-        <dia:point val="-113.745,115"/>
+        <dia:point val="-73.745,110"/>
+        <dia:point val="-73.745,115"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -8221,10 +8146,10 @@ requirements of the underlying typed element.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O44" connection="6"/>
-        <dia:connection handle="1" to="O46" connection="1"/>
+        <dia:connection handle="1" to="O50" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O50">
+    <dia:object type="UML - Association" version="2" id="O52">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -8262,19 +8187,19 @@ requirements of the underlying typed element.#</dia:string>
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="-113.745,118.6"/>
+        <dia:point val="-73.745,118.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-123.565,117.85;-112.995,129.8"/>
+        <dia:rectangle val="-74.495,117.85;-61.4887,129.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-113.745,118.6"/>
-        <dia:point val="-113.745,124.15"/>
-        <dia:point val="-123.515,124.15"/>
-        <dia:point val="-123.515,129"/>
+        <dia:point val="-73.745,118.6"/>
+        <dia:point val="-73.745,124.15"/>
+        <dia:point val="-61.6887,124.15"/>
+        <dia:point val="-61.6887,129"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -8291,79 +8216,34 @@ requirements of the underlying typed element.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O46" connection="6"/>
-        <dia:connection handle="1" to="O48" connection="1"/>
-      </dia:connections>
-    </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O51">
-      <dia:attribute name="obj_pos">
-        <dia:point val="-80.0875,105.4"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="-94.485,105.35;-79.2375,115"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="-80.0875,105.4"/>
-        <dia:point val="-80.0875,110"/>
-        <dia:point val="-94.435,110"/>
-        <dia:point val="-94.435,114.95"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="stereotype">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:connections>
-        <dia:connection handle="0" to="O44" connection="6"/>
-        <dia:connection handle="1" to="O47" connection="14"/>
+        <dia:connection handle="0" to="O50" connection="6"/>
+        <dia:connection handle="1" to="O41" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O52">
+    <dia:object type="UML - Class" version="0" id="O53">
       <dia:attribute name="obj_pos">
-        <dia:point val="-79,115"/>
+        <dia:point val="-61,115"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-79.05,114.95;-68.44,118.65"/>
+        <dia:rectangle val="-61.05,114.95;-50.44,118.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-79,115"/>
+        <dia:point val="-61,115"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.51"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="3.6000000000000001"/>
+        <dia:real val="3"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#service#</dia:string>
+        <dia:string>#factory#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>#entity, aggregate root#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#Type of model element that has behaviour but not necessarily other object properties.
-
-In traditional Domain Driven Design, a service is a set of operations that
-conceptually do not belong to any specific object. In dogen, due to code
-generation constraints, services tend to be where all the behaviour sits.#</dia:string>
+        <dia:string>#Type whose responsibility is to create other types.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -8443,52 +8323,28 @@ generation constraints, services tend to be where all the behaviour sits.#</dia:
       <dia:attribute name="comment_font_height">
         <dia:real val="0.69999999999999996"/>
       </dia:attribute>
-      <dia:attribute name="attributes">
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#type#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>#service_types#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Type of the service.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-      </dia:attribute>
+      <dia:attribute name="attributes"/>
       <dia:attribute name="operations"/>
       <dia:attribute name="template">
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O53">
+    <dia:object type="UML - Generalization" version="1" id="O54">
       <dia:attribute name="obj_pos">
-        <dia:point val="-80.0875,105.4"/>
+        <dia:point val="-80.0875,105.45"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-80.9375,105.35;-73.695,115.05"/>
+        <dia:rectangle val="-80.9375,105.4;-55.695,115.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-80.0875,105.4"/>
+        <dia:point val="-80.0875,105.45"/>
         <dia:point val="-80.0875,110"/>
-        <dia:point val="-73.745,110"/>
-        <dia:point val="-73.745,115"/>
+        <dia:point val="-55.745,110"/>
+        <dia:point val="-55.745,115"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -8511,90 +8367,19 @@ generation constraints, services tend to be where all the behaviour sits.#</dia:
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O44" connection="6"/>
-        <dia:connection handle="1" to="O52" connection="1"/>
-      </dia:connections>
-    </dia:object>
-    <dia:object type="UML - Association" version="2" id="O54">
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="direction">
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="show_direction">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="assoc_type">
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="role_a">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="multipicity_a">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="visibility_a">
-        <dia:enum val="3"/>
-      </dia:attribute>
-      <dia:attribute name="show_arrow_a">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="role_b">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="multipicity_b">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="visibility_b">
-        <dia:enum val="3"/>
-      </dia:attribute>
-      <dia:attribute name="show_arrow_b">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="obj_pos">
-        <dia:point val="-73.745,118.6"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="-74.495,117.85;-61.4887,129.8"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="-73.745,118.6"/>
-        <dia:point val="-73.745,124.15"/>
-        <dia:point val="-61.6887,124.15"/>
-        <dia:point val="-61.6887,129"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="true"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:connections>
-        <dia:connection handle="0" to="O52" connection="6"/>
-        <dia:connection handle="1" to="O41" connection="1"/>
+        <dia:connection handle="0" to="O44" connection="32"/>
+        <dia:connection handle="1" to="O53" connection="1"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O55">
       <dia:attribute name="obj_pos">
-        <dia:point val="-61,115"/>
+        <dia:point val="-45,115"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-61.05,114.95;-50.44,118.05"/>
+        <dia:rectangle val="-45.05,114.95;-34.44,118.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-61,115"/>
+        <dia:point val="-45,115"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.51"/>
@@ -8603,13 +8388,18 @@ generation constraints, services tend to be where all the behaviour sits.#</dia:
         <dia:real val="3"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#factory#</dia:string>
+        <dia:string>#repository#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>#entity, aggregate root#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#Type whose responsibility is to create other types.#</dia:string>
+        <dia:string>#Represents all objects of a certain type as a conceptual set.
+
+Acts very much like a collection, except with a more elaborate querying
+ability. Objects of the appropriate type can be added or removed, and the
+machinery behind the repository inserts them or deletes them from the
+underlying storage (for example, a relational database).#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -8698,19 +8488,19 @@ generation constraints, services tend to be where all the behaviour sits.#</dia:
     </dia:object>
     <dia:object type="UML - Generalization" version="1" id="O56">
       <dia:attribute name="obj_pos">
-        <dia:point val="-80.0875,105.45"/>
+        <dia:point val="-80.0875,105.4"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-80.9375,105.4;-55.695,115.05"/>
+        <dia:rectangle val="-80.9375,105.35;-39.695,115.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="-80.0875,105.45"/>
+        <dia:point val="-80.0875,105.4"/>
         <dia:point val="-80.0875,110"/>
-        <dia:point val="-55.745,110"/>
-        <dia:point val="-55.745,115"/>
+        <dia:point val="-39.745,110"/>
+        <dia:point val="-39.745,115"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -8733,39 +8523,34 @@ generation constraints, services tend to be where all the behaviour sits.#</dia:
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O44" connection="32"/>
+        <dia:connection handle="0" to="O44" connection="6"/>
         <dia:connection handle="1" to="O55" connection="1"/>
       </dia:connections>
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O57">
       <dia:attribute name="obj_pos">
-        <dia:point val="-45,115"/>
+        <dia:point val="23,84"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="-45.05,114.95;-34.44,118.05"/>
+        <dia:rectangle val="22.95,83.95;33.56,87.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="-45,115"/>
+        <dia:point val="23,84"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.51"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="3"/>
+        <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#repository#</dia:string>
+        <dia:string>#concept#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#entity, aggregate root#</dia:string>
+        <dia:string>#entity, Object#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#Represents all objects of a certain type as a conceptual set.
-
-Acts very much like a collection, except with a more elaborate querying
-ability. Objects of the appropriate type can be added or removed, and the
-machinery behind the repository inserts them or deletes them from the
-underlying storage (for example, a relational database).#</dia:string>
+        <dia:string>#Represents a concept, similar to the C++ definition.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -8813,170 +8598,19 @@ underlying storage (for example, a relational database).#</dia:string>
         <dia:font family="monospace" style="0" name="Courier"/>
       </dia:attribute>
       <dia:attribute name="abstract_font">
-        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+        <dia:font family="monospace" style="0" name="Courier"/>
       </dia:attribute>
       <dia:attribute name="polymorphic_font">
-        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+        <dia:font family="monospace" style="0" name="Courier"/>
       </dia:attribute>
       <dia:attribute name="classname_font">
         <dia:font family="sans" style="80" name="Helvetica-Bold"/>
       </dia:attribute>
       <dia:attribute name="abstract_classname_font">
-        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+        <dia:font family="sans" style="0" name="Helvetica"/>
       </dia:attribute>
       <dia:attribute name="comment_font">
-        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
-      </dia:attribute>
-      <dia:attribute name="normal_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="polymorphic_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_font_height">
-        <dia:real val="0.80000000000000004"/>
-      </dia:attribute>
-      <dia:attribute name="classname_font_height">
-        <dia:real val="1"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_classname_font_height">
-        <dia:real val="1"/>
-      </dia:attribute>
-      <dia:attribute name="comment_font_height">
-        <dia:real val="0.69999999999999996"/>
-      </dia:attribute>
-      <dia:attribute name="attributes"/>
-      <dia:attribute name="operations"/>
-      <dia:attribute name="template">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="templates"/>
-    </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O58">
-      <dia:attribute name="obj_pos">
-        <dia:point val="-80.0875,105.4"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="-80.9375,105.35;-39.695,115.05"/>
-      </dia:attribute>
-      <dia:attribute name="meta">
-        <dia:composite type="dict"/>
-      </dia:attribute>
-      <dia:attribute name="orth_points">
-        <dia:point val="-80.0875,105.4"/>
-        <dia:point val="-80.0875,110"/>
-        <dia:point val="-39.745,110"/>
-        <dia:point val="-39.745,115"/>
-      </dia:attribute>
-      <dia:attribute name="orth_orient">
-        <dia:enum val="1"/>
-        <dia:enum val="0"/>
-        <dia:enum val="1"/>
-      </dia:attribute>
-      <dia:attribute name="orth_autoroute">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="name">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:attribute name="stereotype">
-        <dia:string>##</dia:string>
-      </dia:attribute>
-      <dia:connections>
-        <dia:connection handle="0" to="O44" connection="6"/>
-        <dia:connection handle="1" to="O57" connection="1"/>
-      </dia:connections>
-    </dia:object>
-    <dia:object type="UML - Class" version="0" id="O59">
-      <dia:attribute name="obj_pos">
-        <dia:point val="23,84"/>
-      </dia:attribute>
-      <dia:attribute name="obj_bb">
-        <dia:rectangle val="22.95,83.95;33.56,87.65"/>
-      </dia:attribute>
-      <dia:attribute name="elem_corner">
-        <dia:point val="23,84"/>
-      </dia:attribute>
-      <dia:attribute name="elem_width">
-        <dia:real val="10.51"/>
-      </dia:attribute>
-      <dia:attribute name="elem_height">
-        <dia:real val="3.6000000000000001"/>
-      </dia:attribute>
-      <dia:attribute name="name">
-        <dia:string>#concept#</dia:string>
-      </dia:attribute>
-      <dia:attribute name="stereotype">
-        <dia:string>#entity, Object#</dia:string>
-      </dia:attribute>
-      <dia:attribute name="comment">
-        <dia:string>#Represents a concept, similar to the C++ definition.#</dia:string>
-      </dia:attribute>
-      <dia:attribute name="abstract">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="suppress_attributes">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="suppress_operations">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="visible_attributes">
-        <dia:boolean val="true"/>
-      </dia:attribute>
-      <dia:attribute name="visible_operations">
-        <dia:boolean val="true"/>
-      </dia:attribute>
-      <dia:attribute name="visible_comments">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="wrap_operations">
-        <dia:boolean val="true"/>
-      </dia:attribute>
-      <dia:attribute name="wrap_after_char">
-        <dia:int val="40"/>
-      </dia:attribute>
-      <dia:attribute name="comment_line_length">
-        <dia:int val="17"/>
-      </dia:attribute>
-      <dia:attribute name="comment_tagging">
-        <dia:boolean val="false"/>
-      </dia:attribute>
-      <dia:attribute name="line_width">
-        <dia:real val="0.10000000000000001"/>
-      </dia:attribute>
-      <dia:attribute name="line_color">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="fill_color">
-        <dia:color val="#ffffff"/>
-      </dia:attribute>
-      <dia:attribute name="text_color">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="normal_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
-      </dia:attribute>
-      <dia:attribute name="polymorphic_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
-      </dia:attribute>
-      <dia:attribute name="classname_font">
-        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
-      </dia:attribute>
-      <dia:attribute name="abstract_classname_font">
-        <dia:font family="sans" style="0" name="Helvetica"/>
-      </dia:attribute>
-      <dia:attribute name="comment_font">
-        <dia:font family="sans" style="0" name="Helvetica"/>
+        <dia:font family="sans" style="0" name="Helvetica"/>
       </dia:attribute>
       <dia:attribute name="normal_font_height">
         <dia:real val="0.80000000000000004"/>
@@ -9027,7 +8661,7 @@ underlying storage (for example, a relational database).#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Message" version="0" id="O60">
+    <dia:object type="UML - Message" version="0" id="O58">
       <dia:attribute name="obj_pos">
         <dia:point val="31,31.65"/>
       </dia:attribute>
@@ -9057,11 +8691,11 @@ underlying storage (for example, a relational database).#</dia:string>
         <dia:point val="28.26,32.3749"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O61" connection="3"/>
-        <dia:connection handle="1" to="O63" connection="9"/>
+        <dia:connection handle="0" to="O59" connection="3"/>
+        <dia:connection handle="1" to="O61" connection="9"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Note" version="0" id="O61">
+    <dia:object type="UML - Note" version="0" id="O59">
       <dia:attribute name="obj_pos">
         <dia:point val="31,30"/>
       </dia:attribute>
@@ -9114,7 +8748,7 @@ all types in the merged model.#</dia:string>
         </dia:composite>
       </dia:attribute>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O62">
+    <dia:object type="UML - Association" version="2" id="O60">
       <dia:attribute name="name">
         <dia:string>#resolves all types using &gt;#</dia:string>
       </dia:attribute>
@@ -9182,10 +8816,10 @@ all types in the merged model.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O29" connection="5"/>
-        <dia:connection handle="1" to="O63" connection="1"/>
+        <dia:connection handle="1" to="O61" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O63">
+    <dia:object type="UML - Class" version="0" id="O61">
       <dia:attribute name="obj_pos">
         <dia:point val="5,29"/>
       </dia:attribute>
@@ -9440,7 +9074,7 @@ all types in the merged model.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O64">
+    <dia:object type="UML - Association" version="2" id="O62">
       <dia:attribute name="name">
         <dia:string>#resolves types in &gt;#</dia:string>
       </dia:attribute>
@@ -9507,11 +9141,11 @@ all types in the merged model.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O63" connection="7"/>
+        <dia:connection handle="0" to="O61" connection="7"/>
         <dia:connection handle="1" to="O0" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O65">
+    <dia:object type="UML - Class" version="0" id="O63">
       <dia:attribute name="obj_pos">
         <dia:point val="10,45"/>
       </dia:attribute>
@@ -9621,7 +9255,7 @@ all types in the merged model.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O66">
+    <dia:object type="UML - Association" version="2" id="O64">
       <dia:attribute name="name">
         <dia:string>#throws on failure &gt;#</dia:string>
       </dia:attribute>
@@ -9688,11 +9322,11 @@ all types in the merged model.#</dia:string>
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O63" connection="5"/>
-        <dia:connection handle="1" to="O65" connection="1"/>
+        <dia:connection handle="0" to="O61" connection="5"/>
+        <dia:connection handle="1" to="O63" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O67">
+    <dia:object type="UML - Class" version="0" id="O65">
       <dia:attribute name="obj_pos">
         <dia:point val="-122,21"/>
       </dia:attribute>
@@ -9828,7 +9462,7 @@ all types in the merged model.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O68">
+    <dia:object type="UML - Class" version="0" id="O66">
       <dia:attribute name="obj_pos">
         <dia:point val="-175,21"/>
       </dia:attribute>
@@ -9966,7 +9600,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O69">
+    <dia:object type="UML - Class" version="0" id="O67">
       <dia:attribute name="obj_pos">
         <dia:point val="-160,21"/>
       </dia:attribute>
@@ -10100,7 +9734,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O70">
+    <dia:object type="UML - Class" version="0" id="O68">
       <dia:attribute name="obj_pos">
         <dia:point val="-139,36"/>
       </dia:attribute>
@@ -10234,7 +9868,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O71">
+    <dia:object type="UML - Class" version="0" id="O69">
       <dia:attribute name="obj_pos">
         <dia:point val="-155,36"/>
       </dia:attribute>
@@ -10344,7 +9978,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O72">
+    <dia:object type="UML - Generalization" version="1" id="O70">
       <dia:attribute name="obj_pos">
         <dia:point val="-169.553,24.6"/>
       </dia:attribute>
@@ -10381,11 +10015,11 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O68" connection="6"/>
-        <dia:connection handle="1" to="O71" connection="1"/>
+        <dia:connection handle="0" to="O66" connection="6"/>
+        <dia:connection handle="1" to="O69" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O73">
+    <dia:object type="UML - Generalization" version="1" id="O71">
       <dia:attribute name="obj_pos">
         <dia:point val="-143.58,24.6"/>
       </dia:attribute>
@@ -10422,11 +10056,11 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O69" connection="6"/>
-        <dia:connection handle="1" to="O71" connection="1"/>
+        <dia:connection handle="0" to="O67" connection="6"/>
+        <dia:connection handle="1" to="O69" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O74">
+    <dia:object type="UML - Generalization" version="1" id="O72">
       <dia:attribute name="obj_pos">
         <dia:point val="-119.44,24.6"/>
       </dia:attribute>
@@ -10463,11 +10097,11 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O67" connection="6"/>
-        <dia:connection handle="1" to="O71" connection="1"/>
+        <dia:connection handle="0" to="O65" connection="6"/>
+        <dia:connection handle="1" to="O69" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O75">
+    <dia:object type="UML - Class" version="0" id="O73">
       <dia:attribute name="obj_pos">
         <dia:point val="-148,48"/>
       </dia:attribute>
@@ -10577,7 +10211,7 @@ for Java, etc.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O76">
+    <dia:object type="UML - Generalization" version="1" id="O74">
       <dia:attribute name="obj_pos">
         <dia:point val="-152.632,39"/>
       </dia:attribute>
@@ -10614,11 +10248,11 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O71" connection="6"/>
-        <dia:connection handle="1" to="O75" connection="1"/>
+        <dia:connection handle="0" to="O69" connection="6"/>
+        <dia:connection handle="1" to="O73" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O77">
+    <dia:object type="UML - Generalization" version="1" id="O75">
       <dia:attribute name="obj_pos">
         <dia:point val="-132.205,39.6"/>
       </dia:attribute>
@@ -10655,11 +10289,11 @@ for Java, etc.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O70" connection="6"/>
-        <dia:connection handle="1" to="O75" connection="1"/>
+        <dia:connection handle="0" to="O68" connection="6"/>
+        <dia:connection handle="1" to="O73" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O78">
+    <dia:object type="UML - Class" version="0" id="O76">
       <dia:attribute name="obj_pos">
         <dia:point val="-171.403,47.8379"/>
       </dia:attribute>
@@ -10795,7 +10429,7 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O79">
+    <dia:object type="UML - Class" version="0" id="O77">
       <dia:attribute name="obj_pos">
         <dia:point val="-158,60"/>
       </dia:attribute>
@@ -10905,7 +10539,7 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O80">
+    <dia:object type="UML - Generalization" version="1" id="O78">
       <dia:attribute name="obj_pos">
         <dia:point val="-164.993,51.4379"/>
       </dia:attribute>
@@ -10942,11 +10576,11 @@ Does not include inherited attributes.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O78" connection="6"/>
-        <dia:connection handle="1" to="O79" connection="1"/>
+        <dia:connection handle="0" to="O76" connection="6"/>
+        <dia:connection handle="1" to="O77" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O81">
+    <dia:object type="UML - Generalization" version="1" id="O79">
       <dia:attribute name="obj_pos">
         <dia:point val="-143.124,51"/>
       </dia:attribute>
@@ -10983,11 +10617,11 @@ Does not include inherited attributes.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O75" connection="6"/>
-        <dia:connection handle="1" to="O79" connection="1"/>
+        <dia:connection handle="0" to="O73" connection="6"/>
+        <dia:connection handle="1" to="O77" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O82">
+    <dia:object type="UML - Association" version="2" id="O80">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11058,7 +10692,7 @@ Does not include inherited attributes.#</dia:string>
         <dia:connection handle="1" to="O43" connection="10"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O83">
+    <dia:object type="UML - Association" version="2" id="O81">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11126,18 +10760,18 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:connections>
         <dia:connection handle="0" to="O0" connection="6"/>
-        <dia:connection handle="1" to="O59" connection="1"/>
+        <dia:connection handle="1" to="O57" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O84">
+    <dia:object type="UML - Class" version="0" id="O82">
       <dia:attribute name="obj_pos">
-        <dia:point val="32.1667,98.1667"/>
+        <dia:point val="29,98"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="32.1167,98.1167;36.7892,101.217"/>
+        <dia:rectangle val="28.95,97.95;33.6225,101.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="32.1667,98.1667"/>
+        <dia:point val="29,98"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="4.5724999999999998"/>
@@ -11239,7 +10873,7 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O85">
+    <dia:object type="UML - Class" version="0" id="O83">
       <dia:attribute name="obj_pos">
         <dia:point val="38,84"/>
       </dia:attribute>
@@ -11349,12 +10983,12 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O86">
+    <dia:object type="UML - Generalization" version="1" id="O84">
       <dia:attribute name="obj_pos">
         <dia:point val="44.6025,87"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="34.4029,86.95;45.4525,98.2167"/>
+        <dia:rectangle val="31.2362,86.95;45.4525,98.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
@@ -11362,8 +10996,8 @@ Does not include inherited attributes.#</dia:string>
       <dia:attribute name="orth_points">
         <dia:point val="44.6025,87"/>
         <dia:point val="44.6025,94"/>
-        <dia:point val="34.4529,94"/>
-        <dia:point val="34.4529,98.1667"/>
+        <dia:point val="31.2862,94"/>
+        <dia:point val="31.2862,98"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -11386,11 +11020,11 @@ Does not include inherited attributes.#</dia:string>
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O85" connection="6"/>
-        <dia:connection handle="1" to="O84" connection="1"/>
+        <dia:connection handle="0" to="O83" connection="6"/>
+        <dia:connection handle="1" to="O82" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O87">
+    <dia:object type="UML - Association" version="2" id="O85">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11447,44 +11081,934 @@ Does not include inherited attributes.#</dia:string>
         <dia:enum val="0"/>
         <dia:enum val="1"/>
       </dia:attribute>
-      <dia:attribute name="orth_autoroute">
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O0" connection="36"/>
+        <dia:connection handle="1" to="O83" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O86">
+      <dia:attribute name="obj_pos">
+        <dia:point val="40,98"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="39.95,97.95;54.795,102.45"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="40,98"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="14.744999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="4.4000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#enumeration#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#entity, aggregate root#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#Defines a bounded set of logically related values for a primitive type or a string.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="0" name="Helvetica"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="0" name="Helvetica"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#underlying_type#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#qname#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Underlying type of each instance of the enumeration.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#enumerators#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::vector&lt;enumerator&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Enumerators for this enumeration.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O87">
+      <dia:attribute name="obj_pos">
+        <dia:point val="34,111"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="33.95,110.95;41.865,115.45"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="34,111"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="7.8150000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="4.4000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#enumerator#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#Documentable#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#One of a set of valid values that an enumeration can assume.
+
+The enumerator defines an element in the domain of the enumeration.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#name#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Qualified name for the type.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#value#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::string#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Value for the enumerator.
+
+It must be castable to instance of the type defined in the enumeration.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Association" version="2" id="O88">
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="direction">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="show_direction">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="assoc_type">
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="role_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_a">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_a">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_a">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="role_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="multipicity_b">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="visibility_b">
+        <dia:enum val="3"/>
+      </dia:attribute>
+      <dia:attribute name="show_arrow_b">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="obj_pos">
+        <dia:point val="47.3725,102.4"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="37.8575,101.65;48.1225,111.8"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="47.3725,102.4"/>
+        <dia:point val="47.3725,106"/>
+        <dia:point val="37.9075,106"/>
+        <dia:point val="37.9075,111"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O86" connection="6"/>
+        <dia:connection handle="1" to="O87" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O89">
+      <dia:attribute name="obj_pos">
+        <dia:point val="44.6025,87"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="43.7525,86.95;47.4225,98.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="44.6025,87"/>
+        <dia:point val="44.6025,94"/>
+        <dia:point val="47.3725,94"/>
+        <dia:point val="47.3725,98"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O83" connection="6"/>
+        <dia:connection handle="1" to="O86" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O90">
+      <dia:attribute name="obj_pos">
+        <dia:point val="44.6025,87"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="43.7525,86.95;71.9625,98.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="44.6025,87"/>
+        <dia:point val="44.6025,94"/>
+        <dia:point val="71.9125,94"/>
+        <dia:point val="71.9125,98"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O83" connection="6"/>
+        <dia:connection handle="1" to="O91" connection="1"/>
+      </dia:connections>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O91">
+      <dia:attribute name="obj_pos">
+        <dia:point val="63,98"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="62.95,97.95;80.875,111.25"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="63,98"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="17.824999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="13.200000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#abstract_object#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#Object#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#Abstract representation of the object concept in the OOP paradigm.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="0" name="Helvetica"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="0" name="Helvetica"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#parent_name#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#boost::optional&lt;qname&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Qualified name for the pod's parent, if the pod has one.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#original_parent_name#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#boost::optional&lt;qname&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Qualified name for the root of the inheritance hierarchy, if the pod is part of one.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#leaves#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;qname&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#All concrete types which are indirectly or directly derived from this type.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_parent#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#True if this class is the parent of one or more classes, false otherwise.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#number_of_type_arguments#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#unsigned int#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#How many type arguments does this type have#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_visitable#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, a visitor is to be generated for this type and its descendants.
+
+Only applicable if is_parent is true.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_immutable#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, do not generate setters for the type's properties.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_versioned#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, add a version property to the type.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_keyed#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, add key support for the type.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_comparable#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, generates the less than operator.
+
+A type is only comparable if all of its properties are primitives or strings,
+or other comparable model types.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_fluent#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, generate fluent setters.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#is_aggregate_root#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#bool#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#If true, this pod is a root of an aggregate.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#modeled_concepts#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#std::list&lt;qname&gt;#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#List of concepts this pod models.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
         <dia:boolean val="false"/>
       </dia:attribute>
-      <dia:attribute name="text_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:attribute name="line_colour">
-        <dia:color val="#000000"/>
-      </dia:attribute>
-      <dia:connections>
-        <dia:connection handle="0" to="O0" connection="36"/>
-        <dia:connection handle="1" to="O85" connection="1"/>
-      </dia:connections>
+      <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O88">
+    <dia:object type="UML - Class" version="0" id="O92">
       <dia:attribute name="obj_pos">
-        <dia:point val="41,98"/>
+        <dia:point val="50,122"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="40.95,97.95;55.795,102.45"/>
+        <dia:rectangle val="49.95,121.95;60.56,125.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="41,98"/>
+        <dia:point val="50,122"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="14.744999999999999"/>
+        <dia:real val="10.51"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.4000000000000004"/>
+        <dia:real val="3.6000000000000001"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#enumeration#</dia:string>
+        <dia:string>#value_object#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
         <dia:string>#entity, aggregate root#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#Defines a bounded set of logically related values for a primitive type or a string.#</dia:string>
+        <dia:string>#Represents a descriptive aspect of the domain.
+
+A value (or value object) does not have an identity, but instead are used
+to describe some aspect of the domain. For example colour is a value
+object.#</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -11532,19 +12056,19 @@ Does not include inherited attributes.#</dia:string>
         <dia:font family="monospace" style="0" name="Courier"/>
       </dia:attribute>
       <dia:attribute name="abstract_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
       </dia:attribute>
       <dia:attribute name="polymorphic_font">
-        <dia:font family="monospace" style="0" name="Courier"/>
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
       </dia:attribute>
       <dia:attribute name="classname_font">
         <dia:font family="sans" style="80" name="Helvetica-Bold"/>
       </dia:attribute>
       <dia:attribute name="abstract_classname_font">
-        <dia:font family="sans" style="0" name="Helvetica"/>
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
       </dia:attribute>
       <dia:attribute name="comment_font">
-        <dia:font family="sans" style="0" name="Helvetica"/>
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
       </dia:attribute>
       <dia:attribute name="normal_font_height">
         <dia:real val="0.80000000000000004"/>
@@ -11567,39 +12091,16 @@ Does not include inherited attributes.#</dia:string>
       <dia:attribute name="attributes">
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#underlying_type#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="type">
-            <dia:string>#qname#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="value">
-            <dia:string>##</dia:string>
-          </dia:attribute>
-          <dia:attribute name="comment">
-            <dia:string>#Underlying type of each instance of the enumeration.#</dia:string>
-          </dia:attribute>
-          <dia:attribute name="visibility">
-            <dia:enum val="0"/>
-          </dia:attribute>
-          <dia:attribute name="abstract">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-          <dia:attribute name="class_scope">
-            <dia:boolean val="false"/>
-          </dia:attribute>
-        </dia:composite>
-        <dia:composite type="umlattribute">
-          <dia:attribute name="name">
-            <dia:string>#enumerators#</dia:string>
+            <dia:string>#type#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::vector&lt;enumerator&gt;#</dia:string>
+            <dia:string>#value_types#</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#Enumerators for this enumeration.#</dia:string>
+            <dia:string>#Type of this value object.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -11618,32 +12119,30 @@ Does not include inherited attributes.#</dia:string>
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Class" version="0" id="O89">
+    <dia:object type="UML - Class" version="0" id="O93">
       <dia:attribute name="obj_pos">
-        <dia:point val="49,110"/>
+        <dia:point val="42,135"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="48.95,109.95;56.865,114.45"/>
+        <dia:rectangle val="41.95,134.95;51.02,143.45"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="49,110"/>
+        <dia:point val="42,135"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="7.8150000000000004"/>
+        <dia:real val="8.9700000000000006"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
-        <dia:real val="4.4000000000000004"/>
+        <dia:real val="8.4000000000000004"/>
       </dia:attribute>
       <dia:attribute name="name">
-        <dia:string>#enumerator#</dia:string>
+        <dia:string>#value_types#</dia:string>
       </dia:attribute>
       <dia:attribute name="stereotype">
-        <dia:string>#Documentable#</dia:string>
+        <dia:string>#enumeration#</dia:string>
       </dia:attribute>
       <dia:attribute name="comment">
-        <dia:string>#One of a set of valid values that an enumeration can assume.
-
-The enumerator defines an element in the domain of the enumeration.#</dia:string>
+        <dia:string>##</dia:string>
       </dia:attribute>
       <dia:attribute name="abstract">
         <dia:boolean val="false"/>
@@ -11726,16 +12225,16 @@ The enumerator defines an element in the domain of the enumeration.#</dia:string
       <dia:attribute name="attributes">
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#name#</dia:string>
+            <dia:string>#user_defined#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::string#</dia:string>
+            <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#Qualified name for the type.#</dia:string>
+            <dia:string>#Value was created by the user.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -11749,18 +12248,131 @@ The enumerator defines an element in the domain of the enumeration.#</dia:string
         </dia:composite>
         <dia:composite type="umlattribute">
           <dia:attribute name="name">
-            <dia:string>#value#</dia:string>
+            <dia:string>#unversioned_key#</dia:string>
           </dia:attribute>
           <dia:attribute name="type">
-            <dia:string>#std::string#</dia:string>
+            <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="value">
             <dia:string>##</dia:string>
           </dia:attribute>
           <dia:attribute name="comment">
-            <dia:string>#Value for the enumerator.
-
-It must be castable to instance of the type defined in the enumeration.#</dia:string>
+            <dia:string>#Value is an unversioned key.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#versioned_key#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Value is a versioned key.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#exception#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Value represents an exception type.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#smart_pointer#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Value is a smart pointer.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#associative_container#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Type is an associative container.#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#sequence_container#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>#Type is a sequence container.#</dia:string>
           </dia:attribute>
           <dia:attribute name="visibility">
             <dia:enum val="0"/>
@@ -11779,7 +12391,7 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
-    <dia:object type="UML - Association" version="2" id="O90">
+    <dia:object type="UML - Association" version="2" id="O94">
       <dia:attribute name="name">
         <dia:string>##</dia:string>
       </dia:attribute>
@@ -11817,19 +12429,19 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:boolean val="false"/>
       </dia:attribute>
       <dia:attribute name="obj_pos">
-        <dia:point val="48.3725,102.4"/>
+        <dia:point val="55.255,125.6"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="47.6225,101.65;53.1075,110.8"/>
+        <dia:rectangle val="46.435,124.85;56.005,135.8"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="48.3725,102.4"/>
-        <dia:point val="48.3725,106"/>
-        <dia:point val="52.9075,106"/>
-        <dia:point val="52.9075,110"/>
+        <dia:point val="55.255,125.6"/>
+        <dia:point val="55.255,130"/>
+        <dia:point val="46.485,130"/>
+        <dia:point val="46.485,135"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -11846,25 +12458,25 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:color val="#000000"/>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O88" connection="6"/>
-        <dia:connection handle="1" to="O89" connection="1"/>
+        <dia:connection handle="0" to="O92" connection="6"/>
+        <dia:connection handle="1" to="O93" connection="1"/>
       </dia:connections>
     </dia:object>
-    <dia:object type="UML - Generalization" version="1" id="O91">
+    <dia:object type="UML - Generalization" version="1" id="O95">
       <dia:attribute name="obj_pos">
-        <dia:point val="44.6025,87"/>
+        <dia:point val="71.9125,111.2"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="43.7525,86.95;48.4225,98.05"/>
+        <dia:rectangle val="55.205,111.15;72.7625,122.05"/>
       </dia:attribute>
       <dia:attribute name="meta">
         <dia:composite type="dict"/>
       </dia:attribute>
       <dia:attribute name="orth_points">
-        <dia:point val="44.6025,87"/>
-        <dia:point val="44.6025,94"/>
-        <dia:point val="48.3725,94"/>
-        <dia:point val="48.3725,98"/>
+        <dia:point val="71.9125,111.2"/>
+        <dia:point val="71.9125,117"/>
+        <dia:point val="55.255,117"/>
+        <dia:point val="55.255,122"/>
       </dia:attribute>
       <dia:attribute name="orth_orient">
         <dia:enum val="1"/>
@@ -11887,8 +12499,8 @@ It must be castable to instance of the type defined in the enumeration.#</dia:st
         <dia:string>##</dia:string>
       </dia:attribute>
       <dia:connections>
-        <dia:connection handle="0" to="O85" connection="6"/>
-        <dia:connection handle="1" to="O88" connection="1"/>
+        <dia:connection handle="0" to="O91" connection="6"/>
+        <dia:connection handle="1" to="O92" connection="1"/>
       </dia:connections>
     </dia:object>
   </dia:layer>
diff --git a/doc/agile/release_notes_sprint_29.org b/doc/agile/release_notes_sprint_29.org
index 8fc3d46..a673be1 100644
--- a/doc/agile/release_notes_sprint_29.org
+++ b/doc/agile/release_notes_sprint_29.org
@@ -252,6 +252,18 @@ we didn't notice that the inclusion management was not being done
 properly. Update extractor to take properties obtained via concepts
 into account.
 
+*** IMPLEMENTATION Descendents modeling different concepts from base break :spike:
+    CLOCK: [2013-06-25 Tue 22:41]
+
+The current concepts implementation does not support the scenario
+where the base models a concept say A, and a descendent models a
+refinement of A, say B. We just duplicate the properties when in
+reality we need to exclude the intersections.
+
+We should just expand the refinements container at inception to all of
+the qnames for all the concepts, excluding all the concepts found in
+the inheritance path of a class.
+
 *** IMPLEMENTATION Update SML to make use of concepts                 :story:
 
 In S28 as part of "Break down SML into concepts at the design level"
@@ -293,6 +305,10 @@ using. Attempt to make use of these to simplify the model.
 - update C++ transformer
 - remove enumeration from value types
 
+**** IMPLEMENTATION Add support for value objects                      :task:
+     CLOCK: [2013-06-25 Tue 22:28]--[2013-06-25 Tue 22:40] =>  0:12
+     CLOCK: [2013-06-25 Tue 22:09]--[2013-06-25 Tue 22:28] =>  0:19
+
 **** Convert pods into entities, values or services                    :task:
 
 *** Model name should be a qname                                      :story:
diff --git a/projects/cpp/src/types/transformer.cpp b/projects/cpp/src/types/transformer.cpp
index ad74b1d..d8c9152 100644
--- a/projects/cpp/src/types/transformer.cpp
+++ b/projects/cpp/src/types/transformer.cpp
@@ -188,8 +188,9 @@ void transformer::properties_for_concept(const sml::qname& qn,
                 qn.type_name()));
     }
 
-    for (const auto& c : i->second.refines())
-        properties_for_concept(c, properties, processed_qnames);
+    // FIXME: mega hack
+    // for (const auto& c : i->second.refines())
+    //     properties_for_concept(c, properties, processed_qnames);
 
     const auto& props(i->second.properties());
     properties.insert(properties.end(), props.begin(), props.end());
diff --git a/projects/sml/include/dogen/sml/types/resolver.hpp b/projects/sml/include/dogen/sml/types/resolver.hpp
index 95ea1d2..a4cd65d 100644
--- a/projects/sml/include/dogen/sml/types/resolver.hpp
+++ b/projects/sml/include/dogen/sml/types/resolver.hpp
@@ -58,6 +58,13 @@ public:
 
 private:
     /**
+     * @brief Expand concept hierarchy into a list of all concepts.
+     */
+    void expand_concept_hierarchy(const qname& qn,
+        std::unordered_set<qname>& concepts) const;
+
+private:
+    /**
      * @brief Resolves a partially formed qname into a full qname.
      */
     qname resolve_partial_type(const qname& n) const;
diff --git a/projects/sml/src/types/resolver.cpp b/projects/sml/src/types/resolver.cpp
index 57c8872..4b98561 100644
--- a/projects/sml/src/types/resolver.cpp
+++ b/projects/sml/src/types/resolver.cpp
@@ -18,9 +18,15 @@
  * MA 02110-1301, USA.
  *
  */
+#include <set>
 #include <sstream>
+#include <iostream>
+#include <iterator>
+#include <algorithm>
 #include <boost/throw_exception.hpp>
 #include "dogen/utility/log/logger.hpp"
+#include "dogen/utility/io/set_io.hpp"
+#include "dogen/utility/io/unordered_set_io.hpp"
 #include "dogen/sml/types/resolution_error.hpp"
 #include "dogen/sml/io/qname_io.hpp"
 #include "dogen/sml/io/nested_qname_io.hpp"
@@ -49,8 +55,36 @@ typedef boost::error_info<struct tag_errmsg, std::string> errmsg_info;
 namespace dogen {
 namespace sml {
 
+// FIXME: hack
+bool operator<(const qname& lhs, const qname& rhs) {
+    return
+        lhs.model_name() < rhs.model_name() &&
+        lhs.external_module_path() < rhs.external_module_path() &&
+        lhs.type_name() < rhs.type_name() &&
+        lhs.meta_type() < rhs.meta_type();
+}
+
 resolver::resolver(model& m) : model_(m), has_resolved_(false) { }
 
+void resolver::expand_concept_hierarchy(const qname& qn,
+    std::unordered_set<qname>& concepts) const {
+
+    const auto i(model_.concepts().find(qn));
+    if (i == model_.concepts().end()) {
+        std::ostringstream stream;
+        stream << orphan_concept << ". concept: "
+               << qn.type_name() << " could not be found.";
+
+        BOOST_LOG_SEV(lg, error) << stream.str();
+        BOOST_THROW_EXCEPTION(resolution_error(stream.str()));
+    }
+
+    for (const auto& c : i->second.refines())
+        expand_concept_hierarchy(c, concepts);
+
+    concepts.insert(qn);
+}
+
 void resolver::validate_inheritance_graph(const pod& p) const {
     // FIXME: we should really just check that the parent exists since
     // we know all pods get checked anyway. this results in a lot of
@@ -240,14 +274,72 @@ void resolver::resolve_pods() {
 
         validate_inheritance_graph(p);
         p.properties(resolve_properties(p.name(), p.properties()));
+
+        //FIXME: biggest hack ever
+        if (p.modeled_concepts().empty())
+            continue;
+
+        std::unordered_set<qname> expanded_modeled_concepts;
+        for (const auto& qn : p.modeled_concepts())
+            expand_concept_hierarchy(qn, expanded_modeled_concepts);
+
+        std::cout << "type: " << p.name().type_name() << std::endl;
+
+        std::cout << "after expand: " << expanded_modeled_concepts.size()
+                  << std::endl
+                  << " " << expanded_modeled_concepts << std::endl;
+
+        p.modeled_concepts().clear();
+        for (const auto& qn : expanded_modeled_concepts)
+            p.modeled_concepts().push_back(qn);
+
+        std::cout << "modeled: " << p.modeled_concepts().size() << std::endl;
+    }
+
+    //FIXME: biggest hack ever - continued
+    for (auto& pair : model_.pods()) {
+        pod& p(pair.second);
+
+        if (p.modeled_concepts().empty())
+            continue;
+
+        std::cout << "type2: " << p.name().type_name() << std::endl;
+        std::cout << "modeled: " << p.modeled_concepts().size() << std::endl;
+
+        std::set<qname> mc;
+        for (const auto& qn : p.modeled_concepts())
+            mc.insert(qn);
+
+        std::set<qname> pmc;
+        auto parent(p.parent_name());
+        while (parent) {
+            qname pqn(*parent);
+            const auto i(model_.pods().find(pqn));
+            for (const auto& qn : i->second.modeled_concepts())
+                pmc.insert(qn);
+            parent = i->second.parent_name();
+        }
+
+        std::cout << "pmc: " << pmc << std::endl
+                  << "mc: " << mc  << std::endl;
+
+        std::set<qname> result;
+        std::set_difference(mc.begin(), mc.end(), pmc.begin(), pmc.end(),
+            std::inserter(result, result.end()));
+
+        std::cout << "result: " << result << std::endl;
+
+        p.modeled_concepts().clear();
+        for (const auto& qn : result)
+            p.modeled_concepts().push_back(qn);
     }
 }
 
 void resolver::resolve() {
     require_not_has_resolved();
     resolve_references();
-    resolve_pods();
     resolve_concepts();
+    resolve_pods();
     has_resolved_ = true;
 }
 
diff --git a/projects/stereotypes/include/dogen/stereotypes/hash/all_hash.hpp b/projects/stereotypes/include/dogen/stereotypes/hash/all_hash.hpp
index 8bdfdf7..77d592e 100644
--- a/projects/stereotypes/include/dogen/stereotypes/hash/all_hash.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/hash/all_hash.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/hash/aggregate_root_hash.hpp"
 #include "dogen/stereotypes/hash/base_concept_model_hash.hpp"
+#include "dogen/stereotypes/hash/base_with_concept_hash.hpp"
 #include "dogen/stereotypes/hash/composite_identity_hash.hpp"
 #include "dogen/stereotypes/hash/composite_identity_unversioned_key_hash.hpp"
 #include "dogen/stereotypes/hash/composite_identity_ver_hash.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/hash/composite_identity_ver_versioned_key_hash.hpp"
 #include "dogen/stereotypes/hash/entity_hash.hpp"
 #include "dogen/stereotypes/hash/fluent_hash.hpp"
+#include "dogen/stereotypes/hash/further_refined_hash.hpp"
 #include "dogen/stereotypes/hash/identity_and_other_hash.hpp"
 #include "dogen/stereotypes/hash/identity_and_other_unversioned_key_hash.hpp"
 #include "dogen/stereotypes/hash/identity_and_other_ver_hash.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/hash/base_with_concept_hash.hpp b/projects/stereotypes/include/dogen/stereotypes/hash/base_with_concept_hash.hpp
new file mode 100644
index 0000000..8991869
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/hash/base_with_concept_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_HASH_BASE_WITH_CONCEPT_HASH_HPP
+#define DOGEN_STEREOTYPES_HASH_BASE_WITH_CONCEPT_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+class base_with_concept_hasher {
+public:
+    static std::size_t hash(const base_with_concept& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+class hash<dogen::stereotypes::base_with_concept> {
+public:
+    size_t operator()(const dogen::stereotypes::base_with_concept& v) const {
+        return dogen::stereotypes::base_with_concept_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/hash/further_refined_hash.hpp b/projects/stereotypes/include/dogen/stereotypes/hash/further_refined_hash.hpp
new file mode 100644
index 0000000..445a7f1
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/hash/further_refined_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_HASH_FURTHER_REFINED_HASH_HPP
+#define DOGEN_STEREOTYPES_HASH_FURTHER_REFINED_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+class further_refined_hasher {
+public:
+    static std::size_t hash(const further_refined& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+class hash<dogen::stereotypes::further_refined> {
+public:
+    size_t operator()(const dogen::stereotypes::further_refined& v) const {
+        return dogen::stereotypes::further_refined_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/io/all_io.hpp b/projects/stereotypes/include/dogen/stereotypes/io/all_io.hpp
index e1b07fb..6c5d3eb 100644
--- a/projects/stereotypes/include/dogen/stereotypes/io/all_io.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/io/all_io.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/io/aggregate_root_io.hpp"
 #include "dogen/stereotypes/io/base_concept_model_io.hpp"
+#include "dogen/stereotypes/io/base_with_concept_io.hpp"
 #include "dogen/stereotypes/io/composite_identity_io.hpp"
 #include "dogen/stereotypes/io/composite_identity_unversioned_key_io.hpp"
 #include "dogen/stereotypes/io/composite_identity_ver_io.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/io/composite_identity_ver_versioned_key_io.hpp"
 #include "dogen/stereotypes/io/entity_io.hpp"
 #include "dogen/stereotypes/io/fluent_io.hpp"
+#include "dogen/stereotypes/io/further_refined_io.hpp"
 #include "dogen/stereotypes/io/identity_and_other_io.hpp"
 #include "dogen/stereotypes/io/identity_and_other_unversioned_key_io.hpp"
 #include "dogen/stereotypes/io/identity_and_other_ver_io.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/io/base_with_concept_io.hpp b/projects/stereotypes/include/dogen/stereotypes/io/base_with_concept_io.hpp
new file mode 100644
index 0000000..0c9b18d
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/io/base_with_concept_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_IO_BASE_WITH_CONCEPT_IO_HPP
+#define DOGEN_STEREOTYPES_IO_BASE_WITH_CONCEPT_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::stereotypes::base_with_concept& v);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/io/further_refined_io.hpp b/projects/stereotypes/include/dogen/stereotypes/io/further_refined_io.hpp
new file mode 100644
index 0000000..e5a82dc
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/io/further_refined_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_IO_FURTHER_REFINED_IO_HPP
+#define DOGEN_STEREOTYPES_IO_FURTHER_REFINED_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::stereotypes::further_refined& v);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/odb/all_pragmas.hpp b/projects/stereotypes/include/dogen/stereotypes/odb/all_pragmas.hpp
index 25c7917..8df6ee6 100644
--- a/projects/stereotypes/include/dogen/stereotypes/odb/all_pragmas.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/odb/all_pragmas.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/odb/aggregate_root_pragmas.hpp"
 #include "dogen/stereotypes/odb/base_concept_model_pragmas.hpp"
+#include "dogen/stereotypes/odb/base_with_concept_pragmas.hpp"
 #include "dogen/stereotypes/odb/composite_identity_pragmas.hpp"
 #include "dogen/stereotypes/odb/composite_identity_unversioned_key_pragmas.hpp"
 #include "dogen/stereotypes/odb/composite_identity_ver_pragmas.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/odb/composite_identity_ver_versioned_key_pragmas.hpp"
 #include "dogen/stereotypes/odb/entity_pragmas.hpp"
 #include "dogen/stereotypes/odb/fluent_pragmas.hpp"
+#include "dogen/stereotypes/odb/further_refined_pragmas.hpp"
 #include "dogen/stereotypes/odb/identity_and_other_pragmas.hpp"
 #include "dogen/stereotypes/odb/identity_and_other_unversioned_key_pragmas.hpp"
 #include "dogen/stereotypes/odb/identity_and_other_ver_pragmas.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/odb/base_with_concept_pragmas.hpp b/projects/stereotypes/include/dogen/stereotypes/odb/base_with_concept_pragmas.hpp
new file mode 100644
index 0000000..d64833c
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/odb/base_with_concept_pragmas.hpp
@@ -0,0 +1,32 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_ODB_BASE_WITH_CONCEPT_PRAGMAS_HPP
+#define DOGEN_STEREOTYPES_ODB_BASE_WITH_CONCEPT_PRAGMAS_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+// class has no ODB pragmas defined.
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/odb/further_refined_pragmas.hpp b/projects/stereotypes/include/dogen/stereotypes/odb/further_refined_pragmas.hpp
new file mode 100644
index 0000000..b884552
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/odb/further_refined_pragmas.hpp
@@ -0,0 +1,33 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_ODB_FURTHER_REFINED_PRAGMAS_HPP
+#define DOGEN_STEREOTYPES_ODB_FURTHER_REFINED_PRAGMAS_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/odb/base_with_concept_pragmas.hpp"
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+// class has no ODB pragmas defined.
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/odb/simple_concept_model_pragmas.hpp b/projects/stereotypes/include/dogen/stereotypes/odb/simple_concept_model_pragmas.hpp
index 5c2578f..725061c 100644
--- a/projects/stereotypes/include/dogen/stereotypes/odb/simple_concept_model_pragmas.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/odb/simple_concept_model_pragmas.hpp
@@ -25,7 +25,6 @@
 #pragma once
 #endif
 
-#include "dogen/stereotypes/odb/entity_pragmas.hpp"
 #include "dogen/stereotypes/types/simple_concept_model.hpp"
 
 // class has no ODB pragmas defined.
diff --git a/projects/stereotypes/include/dogen/stereotypes/serialization/all_ser.hpp b/projects/stereotypes/include/dogen/stereotypes/serialization/all_ser.hpp
index b4c93e9..9413233 100644
--- a/projects/stereotypes/include/dogen/stereotypes/serialization/all_ser.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/serialization/all_ser.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/serialization/aggregate_root_ser.hpp"
 #include "dogen/stereotypes/serialization/base_concept_model_ser.hpp"
+#include "dogen/stereotypes/serialization/base_with_concept_ser.hpp"
 #include "dogen/stereotypes/serialization/composite_identity_ser.hpp"
 #include "dogen/stereotypes/serialization/composite_identity_unversioned_key_ser.hpp"
 #include "dogen/stereotypes/serialization/composite_identity_ver_ser.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/serialization/composite_identity_ver_versioned_key_ser.hpp"
 #include "dogen/stereotypes/serialization/entity_ser.hpp"
 #include "dogen/stereotypes/serialization/fluent_ser.hpp"
+#include "dogen/stereotypes/serialization/further_refined_ser.hpp"
 #include "dogen/stereotypes/serialization/identity_and_other_ser.hpp"
 #include "dogen/stereotypes/serialization/identity_and_other_unversioned_key_ser.hpp"
 #include "dogen/stereotypes/serialization/identity_and_other_ver_ser.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_fwd_ser.hpp b/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_fwd_ser.hpp
new file mode 100644
index 0000000..9f39ff0
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_SERIALIZATION_BASE_WITH_CONCEPT_FWD_SER_HPP
+#define DOGEN_STEREOTYPES_SERIALIZATION_BASE_WITH_CONCEPT_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/types/base_with_concept_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_ser.hpp b/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_ser.hpp
new file mode 100644
index 0000000..4497088
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/serialization/base_with_concept_ser.hpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_SERIALIZATION_BASE_WITH_CONCEPT_SER_HPP
+#define DOGEN_STEREOTYPES_SERIALIZATION_BASE_WITH_CONCEPT_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/assume_abstract.hpp>
+#include <boost/serialization/split_free.hpp>
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::stereotypes::base_with_concept)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(dogen::stereotypes::base_with_concept)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_fwd_ser.hpp b/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_fwd_ser.hpp
new file mode 100644
index 0000000..f1a1a4c
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_SERIALIZATION_FURTHER_REFINED_FWD_SER_HPP
+#define DOGEN_STEREOTYPES_SERIALIZATION_FURTHER_REFINED_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/types/further_refined_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_ser.hpp b/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_ser.hpp
new file mode 100644
index 0000000..c73b9f9
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/serialization/further_refined_ser.hpp
@@ -0,0 +1,54 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_SERIALIZATION_FURTHER_REFINED_SER_HPP
+#define DOGEN_STEREOTYPES_SERIALIZATION_FURTHER_REFINED_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include <boost/type_traits/is_virtual_base_of.hpp>
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+namespace boost {
+
+template<>struct
+is_virtual_base_of<
+    dogen::stereotypes::base_with_concept,
+    dogen::stereotypes::further_refined
+> : public mpl::true_ {};
+
+}
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::stereotypes::further_refined)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/test_data/all_td.hpp b/projects/stereotypes/include/dogen/stereotypes/test_data/all_td.hpp
index 43e9a72..29951d9 100644
--- a/projects/stereotypes/include/dogen/stereotypes/test_data/all_td.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/test_data/all_td.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/test_data/aggregate_root_td.hpp"
 #include "dogen/stereotypes/test_data/base_concept_model_td.hpp"
+#include "dogen/stereotypes/test_data/base_with_concept_td.hpp"
 #include "dogen/stereotypes/test_data/composite_identity_td.hpp"
 #include "dogen/stereotypes/test_data/composite_identity_unversioned_key_td.hpp"
 #include "dogen/stereotypes/test_data/composite_identity_ver_td.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/test_data/composite_identity_ver_versioned_key_td.hpp"
 #include "dogen/stereotypes/test_data/entity_td.hpp"
 #include "dogen/stereotypes/test_data/fluent_td.hpp"
+#include "dogen/stereotypes/test_data/further_refined_td.hpp"
 #include "dogen/stereotypes/test_data/identity_and_other_td.hpp"
 #include "dogen/stereotypes/test_data/identity_and_other_unversioned_key_td.hpp"
 #include "dogen/stereotypes/test_data/identity_and_other_ver_td.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/test_data/base_with_concept_td.hpp b/projects/stereotypes/include/dogen/stereotypes/test_data/base_with_concept_td.hpp
new file mode 100644
index 0000000..9fb5289
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/test_data/base_with_concept_td.hpp
@@ -0,0 +1,48 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TEST_DATA_BASE_WITH_CONCEPT_TD_HPP
+#define DOGEN_STEREOTYPES_TEST_DATA_BASE_WITH_CONCEPT_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+class base_with_concept_generator {
+public:
+    base_with_concept_generator();
+
+public:
+    typedef dogen::stereotypes::base_with_concept result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/test_data/further_refined_td.hpp b/projects/stereotypes/include/dogen/stereotypes/test_data/further_refined_td.hpp
new file mode 100644
index 0000000..1971715
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/test_data/further_refined_td.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TEST_DATA_FURTHER_REFINED_TD_HPP
+#define DOGEN_STEREOTYPES_TEST_DATA_FURTHER_REFINED_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+class further_refined_generator {
+public:
+    further_refined_generator();
+
+public:
+    typedef dogen::stereotypes::further_refined result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/all.hpp b/projects/stereotypes/include/dogen/stereotypes/types/all.hpp
index 41c2cd4..cbe1a85 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/all.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/all.hpp
@@ -20,6 +20,7 @@
  */
 #include "dogen/stereotypes/types/aggregate_root.hpp"
 #include "dogen/stereotypes/types/base_concept_model.hpp"
+#include "dogen/stereotypes/types/base_with_concept.hpp"
 #include "dogen/stereotypes/types/composite_identity.hpp"
 #include "dogen/stereotypes/types/composite_identity_unversioned_key.hpp"
 #include "dogen/stereotypes/types/composite_identity_ver.hpp"
@@ -27,6 +28,7 @@
 #include "dogen/stereotypes/types/composite_identity_ver_versioned_key.hpp"
 #include "dogen/stereotypes/types/entity.hpp"
 #include "dogen/stereotypes/types/fluent.hpp"
+#include "dogen/stereotypes/types/further_refined.hpp"
 #include "dogen/stereotypes/types/identity_and_other.hpp"
 #include "dogen/stereotypes/types/identity_and_other_unversioned_key.hpp"
 #include "dogen/stereotypes/types/identity_and_other_ver.hpp"
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/base_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/base_concept_model.hpp
index 1ef1a5d..bd16592 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/base_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/base_concept_model.hpp
@@ -36,15 +36,11 @@ namespace stereotypes {
  */
 class base_concept_model final {
 public:
+    base_concept_model() = default;
     base_concept_model(const base_concept_model&) = default;
     base_concept_model(base_concept_model&&) = default;
     ~base_concept_model() = default;
-
-public:
-    base_concept_model();
-
-public:
-    explicit base_concept_model(const int prop_0);
+    base_concept_model& operator=(const base_concept_model&) = default;
 
 private:
     template<typename Archive>
@@ -54,39 +50,13 @@ private:
     friend void boost::serialization::load(Archive& ar, base_concept_model& v, unsigned int version);
 
 public:
-    /**
-     * @brief Property in the base concept.
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-public:
     bool operator==(const base_concept_model& rhs) const;
     bool operator!=(const base_concept_model& rhs) const {
         return !this->operator==(rhs);
     }
 
-public:
-    void swap(base_concept_model& other) noexcept;
-    base_concept_model& operator=(base_concept_model other);
-
-private:
-    int prop_0_;
 };
 
 } }
 
-namespace std {
-
-template<>
-inline void swap(
-    dogen::stereotypes::base_concept_model& lhs,
-    dogen::stereotypes::base_concept_model& rhs) {
-    lhs.swap(rhs);
-}
-
-}
-
 #endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept.hpp b/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept.hpp
new file mode 100644
index 0000000..a73dfd5
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept.hpp
@@ -0,0 +1,75 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TYPES_BASE_WITH_CONCEPT_HPP
+#define DOGEN_STEREOTYPES_TYPES_BASE_WITH_CONCEPT_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include <iosfwd>
+#include "dogen/stereotypes/serialization/base_with_concept_fwd_ser.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+/**
+ * @brief Base class that models a refined concept.
+ */
+class base_with_concept {
+public:
+    base_with_concept() = default;
+    base_with_concept(const base_with_concept&) = default;
+    base_with_concept(base_with_concept&&) = default;
+    base_with_concept& operator=(const base_with_concept&) = default;
+
+    virtual ~base_with_concept() noexcept = 0;
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const base_with_concept& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, base_with_concept& v, unsigned int version);
+
+public:
+    virtual void to_stream(std::ostream& s) const;
+
+protected:
+    bool compare(const base_with_concept& rhs) const;
+public:
+    virtual bool equals(const base_with_concept& other) const = 0;
+
+protected:
+    void swap(base_with_concept& other) noexcept;
+
+};
+
+inline base_with_concept::~base_with_concept() noexcept { }
+
+inline bool operator==(const base_with_concept& lhs, const base_with_concept& rhs) {
+    return lhs.equals(rhs);
+}
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept_fwd.hpp b/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept_fwd.hpp
new file mode 100644
index 0000000..d66de5c
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/types/base_with_concept_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TYPES_BASE_WITH_CONCEPT_FWD_HPP
+#define DOGEN_STEREOTYPES_TYPES_BASE_WITH_CONCEPT_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace stereotypes {
+
+class base_with_concept;
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/further_refined.hpp b/projects/stereotypes/include/dogen/stereotypes/types/further_refined.hpp
new file mode 100644
index 0000000..a3d98e7
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/types/further_refined.hpp
@@ -0,0 +1,72 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TYPES_FURTHER_REFINED_HPP
+#define DOGEN_STEREOTYPES_TYPES_FURTHER_REFINED_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include <iosfwd>
+#include "dogen/stereotypes/serialization/further_refined_fwd_ser.hpp"
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+/**
+ * @brief Descendant class that models a concept which is a refinement of the concept
+ * modeled by the base.
+ */
+class further_refined final : public dogen::stereotypes::base_with_concept {
+public:
+    further_refined() = default;
+    further_refined(const further_refined&) = default;
+    further_refined(further_refined&&) = default;
+    further_refined& operator=(const further_refined&) = default;
+
+    virtual ~further_refined() noexcept { }
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const further_refined& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, further_refined& v, unsigned int version);
+
+public:
+    void to_stream(std::ostream& s) const override;
+
+public:
+    bool operator==(const further_refined& rhs) const;
+    bool operator!=(const further_refined& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    bool equals(const dogen::stereotypes::base_with_concept& other) const override;
+
+};
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/further_refined_fwd.hpp b/projects/stereotypes/include/dogen/stereotypes/types/further_refined_fwd.hpp
new file mode 100644
index 0000000..2b4fb0d
--- /dev/null
+++ b/projects/stereotypes/include/dogen/stereotypes/types/further_refined_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_STEREOTYPES_TYPES_FURTHER_REFINED_FWD_HPP
+#define DOGEN_STEREOTYPES_TYPES_FURTHER_REFINED_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace stereotypes {
+
+class further_refined;
+
+} }
+
+#endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/multi_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/multi_concept_model.hpp
index 2b7f79a..a766936 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/multi_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/multi_concept_model.hpp
@@ -44,11 +44,7 @@ public:
     multi_concept_model();
 
 public:
-    multi_concept_model(
-        const int prop_0,
-        const int prop_1,
-        const int prop_2,
-        const int prop_10);
+    explicit multi_concept_model(const int prop_10);
 
 private:
     template<typename Archive>
@@ -59,30 +55,6 @@ private:
 
 public:
     /**
-     * @brief Base concept property
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-    /**
-     * @brief First refinement property
-     */
-    /**@{*/
-    int prop_1() const;
-    void prop_1(const int v);
-    /**@}*/
-
-    /**
-     * @brief Second refinement property
-     */
-    /**@{*/
-    int prop_2() const;
-    void prop_2(const int v);
-    /**@}*/
-
-    /**
      * @brief Property of class.
      */
     /**@{*/
@@ -101,9 +73,6 @@ public:
     multi_concept_model& operator=(multi_concept_model other);
 
 private:
-    int prop_0_;
-    int prop_1_;
-    int prop_2_;
     int prop_10_;
 };
 
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/multiple_refinement_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/multiple_refinement_concept_model.hpp
index e0f61ef..03e4bda 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/multiple_refinement_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/multiple_refinement_concept_model.hpp
@@ -44,12 +44,7 @@ public:
     multiple_refinement_concept_model();
 
 public:
-    multiple_refinement_concept_model(
-        const int prop_0,
-        const int prop_1,
-        const int prop_2,
-        const int prop_3,
-        const int prop_10);
+    explicit multiple_refinement_concept_model(const int prop_10);
 
 private:
     template<typename Archive>
@@ -60,38 +55,6 @@ private:
 
 public:
     /**
-     * @brief Base concept property
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-    /**
-     * @brief First refinement property
-     */
-    /**@{*/
-    int prop_1() const;
-    void prop_1(const int v);
-    /**@}*/
-
-    /**
-     * @brief Second refinement property
-     */
-    /**@{*/
-    int prop_2() const;
-    void prop_2(const int v);
-    /**@}*/
-
-    /**
-     * @brief Multiple refinements property.
-     */
-    /**@{*/
-    int prop_3() const;
-    void prop_3(const int v);
-    /**@}*/
-
-    /**
      * @brief Property of the class itself.
      */
     /**@{*/
@@ -110,10 +73,6 @@ public:
     multiple_refinement_concept_model& operator=(multiple_refinement_concept_model other);
 
 private:
-    int prop_0_;
-    int prop_1_;
-    int prop_2_;
-    int prop_3_;
     int prop_10_;
 };
 
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/refinement_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/refinement_concept_model.hpp
index cd467e5..740739a 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/refinement_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/refinement_concept_model.hpp
@@ -36,17 +36,11 @@ namespace stereotypes {
  */
 class refinement_concept_model final {
 public:
+    refinement_concept_model() = default;
     refinement_concept_model(const refinement_concept_model&) = default;
     refinement_concept_model(refinement_concept_model&&) = default;
     ~refinement_concept_model() = default;
-
-public:
-    refinement_concept_model();
-
-public:
-    refinement_concept_model(
-        const int prop_0,
-        const int prop_1);
+    refinement_concept_model& operator=(const refinement_concept_model&) = default;
 
 private:
     template<typename Archive>
@@ -56,48 +50,13 @@ private:
     friend void boost::serialization::load(Archive& ar, refinement_concept_model& v, unsigned int version);
 
 public:
-    /**
-     * @brief Property in the base concept.
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-    /**
-     * @brief Refinement concept property.
-     */
-    /**@{*/
-    int prop_1() const;
-    void prop_1(const int v);
-    /**@}*/
-
-public:
     bool operator==(const refinement_concept_model& rhs) const;
     bool operator!=(const refinement_concept_model& rhs) const {
         return !this->operator==(rhs);
     }
 
-public:
-    void swap(refinement_concept_model& other) noexcept;
-    refinement_concept_model& operator=(refinement_concept_model other);
-
-private:
-    int prop_0_;
-    int prop_1_;
 };
 
 } }
 
-namespace std {
-
-template<>
-inline void swap(
-    dogen::stereotypes::refinement_concept_model& lhs,
-    dogen::stereotypes::refinement_concept_model& rhs) {
-    lhs.swap(rhs);
-}
-
-}
-
 #endif
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/second_refinement_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/second_refinement_concept_model.hpp
index fe7b6e0..41f23c7 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/second_refinement_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/second_refinement_concept_model.hpp
@@ -44,10 +44,7 @@ public:
     second_refinement_concept_model();
 
 public:
-    second_refinement_concept_model(
-        const int prop_0,
-        const int prop_2,
-        const int prop_10);
+    explicit second_refinement_concept_model(const int prop_10);
 
 private:
     template<typename Archive>
@@ -58,22 +55,6 @@ private:
 
 public:
     /**
-     * @brief Base concept property
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-    /**
-     * @brief Second refinement property
-     */
-    /**@{*/
-    int prop_2() const;
-    void prop_2(const int v);
-    /**@}*/
-
-    /**
      * @brief Property of the class itself.
      */
     /**@{*/
@@ -92,8 +73,6 @@ public:
     second_refinement_concept_model& operator=(second_refinement_concept_model other);
 
 private:
-    int prop_0_;
-    int prop_2_;
     int prop_10_;
 };
 
diff --git a/projects/stereotypes/include/dogen/stereotypes/types/simple_concept_model.hpp b/projects/stereotypes/include/dogen/stereotypes/types/simple_concept_model.hpp
index 58a5450..6794204 100644
--- a/projects/stereotypes/include/dogen/stereotypes/types/simple_concept_model.hpp
+++ b/projects/stereotypes/include/dogen/stereotypes/types/simple_concept_model.hpp
@@ -27,7 +27,6 @@
 
 #include <algorithm>
 #include "dogen/stereotypes/serialization/simple_concept_model_fwd_ser.hpp"
-#include "dogen/stereotypes/types/entity.hpp"
 
 namespace dogen {
 namespace stereotypes {
@@ -45,10 +44,7 @@ public:
     simple_concept_model();
 
 public:
-    simple_concept_model(
-        const int prop_0,
-        const dogen::stereotypes::entity& prop_1,
-        const int prop_10);
+    explicit simple_concept_model(const int prop_10);
 
 private:
     template<typename Archive>
@@ -59,24 +55,6 @@ private:
 
 public:
     /**
-     * @brief This is a sample property in a concept.
-     */
-    /**@{*/
-    int prop_0() const;
-    void prop_0(const int v);
-    /**@}*/
-
-    /**
-     * @brief Prove that includes of types get picked up.
-     */
-    /**@{*/
-    const dogen::stereotypes::entity& prop_1() const;
-    dogen::stereotypes::entity& prop_1();
-    void prop_1(const dogen::stereotypes::entity& v);
-    void prop_1(const dogen::stereotypes::entity&& v);
-    /**@}*/
-
-    /**
      * @brief Property that belongs to class.
      */
     /**@{*/
@@ -95,8 +73,6 @@ public:
     simple_concept_model& operator=(simple_concept_model other);
 
 private:
-    int prop_0_;
-    dogen::stereotypes::entity prop_1_;
     int prop_10_;
 };
 
diff --git a/projects/stereotypes/src/hash/base_concept_model_hash.cpp b/projects/stereotypes/src/hash/base_concept_model_hash.cpp
index a3da56e..b83a642 100644
--- a/projects/stereotypes/src/hash/base_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/base_concept_model_hash.cpp
@@ -22,22 +22,14 @@
 
 namespace {
 
-template <typename HashableType>
-inline void combine(std::size_t& seed, const HashableType& value)
-{
-    std::hash<HashableType> hasher;
-    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-}
 
 }
 
 namespace dogen {
 namespace stereotypes {
 
-std::size_t base_concept_model_hasher::hash(const base_concept_model&v) {
+std::size_t base_concept_model_hasher::hash(const base_concept_model&) {
     std::size_t seed(0);
-
-    combine(seed, v.prop_0());
     return seed;
 }
 
diff --git a/projects/stereotypes/src/hash/base_with_concept_hash.cpp b/projects/stereotypes/src/hash/base_with_concept_hash.cpp
new file mode 100644
index 0000000..9bb7097
--- /dev/null
+++ b/projects/stereotypes/src/hash/base_with_concept_hash.cpp
@@ -0,0 +1,36 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/stereotypes/hash/base_with_concept_hash.hpp"
+
+namespace {
+
+
+}
+
+namespace dogen {
+namespace stereotypes {
+
+std::size_t base_with_concept_hasher::hash(const base_with_concept&) {
+    std::size_t seed(0);
+    return seed;
+}
+
+} }
diff --git a/projects/stereotypes/src/hash/further_refined_hash.cpp b/projects/stereotypes/src/hash/further_refined_hash.cpp
new file mode 100644
index 0000000..371628c
--- /dev/null
+++ b/projects/stereotypes/src/hash/further_refined_hash.cpp
@@ -0,0 +1,45 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/stereotypes/hash/base_with_concept_hash.hpp"
+#include "dogen/stereotypes/hash/further_refined_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace stereotypes {
+
+std::size_t further_refined_hasher::hash(const further_refined&v) {
+    std::size_t seed(0);
+
+    combine(seed, dynamic_cast<const dogen::stereotypes::base_with_concept&>(v));
+    return seed;
+}
+
+} }
diff --git a/projects/stereotypes/src/hash/multi_concept_model_hash.cpp b/projects/stereotypes/src/hash/multi_concept_model_hash.cpp
index 0856039..3eb008b 100644
--- a/projects/stereotypes/src/hash/multi_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/multi_concept_model_hash.cpp
@@ -37,11 +37,7 @@ namespace stereotypes {
 std::size_t multi_concept_model_hasher::hash(const multi_concept_model&v) {
     std::size_t seed(0);
 
-    combine(seed, v.prop_0());
-    combine(seed, v.prop_1());
-    combine(seed, v.prop_2());
     combine(seed, v.prop_10());
-
     return seed;
 }
 
diff --git a/projects/stereotypes/src/hash/multiple_refinement_concept_model_hash.cpp b/projects/stereotypes/src/hash/multiple_refinement_concept_model_hash.cpp
index c5c537f..8fbe225 100644
--- a/projects/stereotypes/src/hash/multiple_refinement_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/multiple_refinement_concept_model_hash.cpp
@@ -37,12 +37,7 @@ namespace stereotypes {
 std::size_t multiple_refinement_concept_model_hasher::hash(const multiple_refinement_concept_model&v) {
     std::size_t seed(0);
 
-    combine(seed, v.prop_0());
-    combine(seed, v.prop_1());
-    combine(seed, v.prop_2());
-    combine(seed, v.prop_3());
     combine(seed, v.prop_10());
-
     return seed;
 }
 
diff --git a/projects/stereotypes/src/hash/refinement_concept_model_hash.cpp b/projects/stereotypes/src/hash/refinement_concept_model_hash.cpp
index 70c748a..26b3824 100644
--- a/projects/stereotypes/src/hash/refinement_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/refinement_concept_model_hash.cpp
@@ -22,24 +22,14 @@
 
 namespace {
 
-template <typename HashableType>
-inline void combine(std::size_t& seed, const HashableType& value)
-{
-    std::hash<HashableType> hasher;
-    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
-}
 
 }
 
 namespace dogen {
 namespace stereotypes {
 
-std::size_t refinement_concept_model_hasher::hash(const refinement_concept_model&v) {
+std::size_t refinement_concept_model_hasher::hash(const refinement_concept_model&) {
     std::size_t seed(0);
-
-    combine(seed, v.prop_0());
-    combine(seed, v.prop_1());
-
     return seed;
 }
 
diff --git a/projects/stereotypes/src/hash/second_refinement_concept_model_hash.cpp b/projects/stereotypes/src/hash/second_refinement_concept_model_hash.cpp
index cf23958..e49cff2 100644
--- a/projects/stereotypes/src/hash/second_refinement_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/second_refinement_concept_model_hash.cpp
@@ -37,10 +37,7 @@ namespace stereotypes {
 std::size_t second_refinement_concept_model_hasher::hash(const second_refinement_concept_model&v) {
     std::size_t seed(0);
 
-    combine(seed, v.prop_0());
-    combine(seed, v.prop_2());
     combine(seed, v.prop_10());
-
     return seed;
 }
 
diff --git a/projects/stereotypes/src/hash/simple_concept_model_hash.cpp b/projects/stereotypes/src/hash/simple_concept_model_hash.cpp
index 3d0c0d6..0e6677b 100644
--- a/projects/stereotypes/src/hash/simple_concept_model_hash.cpp
+++ b/projects/stereotypes/src/hash/simple_concept_model_hash.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/stereotypes/hash/entity_hash.hpp"
 #include "dogen/stereotypes/hash/simple_concept_model_hash.hpp"
 
 namespace {
@@ -38,10 +37,7 @@ namespace stereotypes {
 std::size_t simple_concept_model_hasher::hash(const simple_concept_model&v) {
     std::size_t seed(0);
 
-    combine(seed, v.prop_0());
-    combine(seed, v.prop_1());
     combine(seed, v.prop_10());
-
     return seed;
 }
 
diff --git a/projects/stereotypes/src/io/base_concept_model_io.cpp b/projects/stereotypes/src/io/base_concept_model_io.cpp
index a92ded8..01434b3 100644
--- a/projects/stereotypes/src/io/base_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/base_concept_model_io.cpp
@@ -24,11 +24,9 @@
 namespace dogen {
 namespace stereotypes {
 
-std::ostream& operator<<(std::ostream& s, const base_concept_model& v) {
+std::ostream& operator<<(std::ostream& s, const base_concept_model&) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::stereotypes::base_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0()
-      << " }";
+      << "\"__type__\": " << "\"dogen::stereotypes::base_concept_model\"" << " }";
     return(s);
 }
 
diff --git a/projects/stereotypes/src/io/base_with_concept_io.cpp b/projects/stereotypes/src/io/base_with_concept_io.cpp
new file mode 100644
index 0000000..eddb62f
--- /dev/null
+++ b/projects/stereotypes/src/io/base_with_concept_io.cpp
@@ -0,0 +1,32 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/stereotypes/io/base_with_concept_io.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+std::ostream& operator<<(std::ostream& s, const base_with_concept& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/io/further_refined_io.cpp b/projects/stereotypes/src/io/further_refined_io.cpp
new file mode 100644
index 0000000..1b8c2a2
--- /dev/null
+++ b/projects/stereotypes/src/io/further_refined_io.cpp
@@ -0,0 +1,33 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/stereotypes/io/base_with_concept_io.hpp"
+#include "dogen/stereotypes/io/further_refined_io.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+std::ostream& operator<<(std::ostream& s, const further_refined& v) {
+    v.to_stream(s);
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/io/multi_concept_model_io.cpp b/projects/stereotypes/src/io/multi_concept_model_io.cpp
index d381294..e7bc45b 100644
--- a/projects/stereotypes/src/io/multi_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/multi_concept_model_io.cpp
@@ -27,9 +27,6 @@ namespace stereotypes {
 std::ostream& operator<<(std::ostream& s, const multi_concept_model& v) {
     s << " { "
       << "\"__type__\": " << "\"dogen::stereotypes::multi_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0() << ", "
-      << "\"prop_1\": " << v.prop_1() << ", "
-      << "\"prop_2\": " << v.prop_2() << ", "
       << "\"prop_10\": " << v.prop_10()
       << " }";
     return(s);
diff --git a/projects/stereotypes/src/io/multiple_refinement_concept_model_io.cpp b/projects/stereotypes/src/io/multiple_refinement_concept_model_io.cpp
index 8fafffe..0c0399f 100644
--- a/projects/stereotypes/src/io/multiple_refinement_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/multiple_refinement_concept_model_io.cpp
@@ -27,10 +27,6 @@ namespace stereotypes {
 std::ostream& operator<<(std::ostream& s, const multiple_refinement_concept_model& v) {
     s << " { "
       << "\"__type__\": " << "\"dogen::stereotypes::multiple_refinement_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0() << ", "
-      << "\"prop_1\": " << v.prop_1() << ", "
-      << "\"prop_2\": " << v.prop_2() << ", "
-      << "\"prop_3\": " << v.prop_3() << ", "
       << "\"prop_10\": " << v.prop_10()
       << " }";
     return(s);
diff --git a/projects/stereotypes/src/io/refinement_concept_model_io.cpp b/projects/stereotypes/src/io/refinement_concept_model_io.cpp
index 327f01a..b03cc4e 100644
--- a/projects/stereotypes/src/io/refinement_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/refinement_concept_model_io.cpp
@@ -24,12 +24,9 @@
 namespace dogen {
 namespace stereotypes {
 
-std::ostream& operator<<(std::ostream& s, const refinement_concept_model& v) {
+std::ostream& operator<<(std::ostream& s, const refinement_concept_model&) {
     s << " { "
-      << "\"__type__\": " << "\"dogen::stereotypes::refinement_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0() << ", "
-      << "\"prop_1\": " << v.prop_1()
-      << " }";
+      << "\"__type__\": " << "\"dogen::stereotypes::refinement_concept_model\"" << " }";
     return(s);
 }
 
diff --git a/projects/stereotypes/src/io/second_refinement_concept_model_io.cpp b/projects/stereotypes/src/io/second_refinement_concept_model_io.cpp
index 36b62cd..12a9de2 100644
--- a/projects/stereotypes/src/io/second_refinement_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/second_refinement_concept_model_io.cpp
@@ -27,8 +27,6 @@ namespace stereotypes {
 std::ostream& operator<<(std::ostream& s, const second_refinement_concept_model& v) {
     s << " { "
       << "\"__type__\": " << "\"dogen::stereotypes::second_refinement_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0() << ", "
-      << "\"prop_2\": " << v.prop_2() << ", "
       << "\"prop_10\": " << v.prop_10()
       << " }";
     return(s);
diff --git a/projects/stereotypes/src/io/simple_concept_model_io.cpp b/projects/stereotypes/src/io/simple_concept_model_io.cpp
index ede805a..6649154 100644
--- a/projects/stereotypes/src/io/simple_concept_model_io.cpp
+++ b/projects/stereotypes/src/io/simple_concept_model_io.cpp
@@ -19,7 +19,6 @@
  *
  */
 #include <ostream>
-#include "dogen/stereotypes/io/entity_io.hpp"
 #include "dogen/stereotypes/io/simple_concept_model_io.hpp"
 
 namespace dogen {
@@ -28,8 +27,6 @@ namespace stereotypes {
 std::ostream& operator<<(std::ostream& s, const simple_concept_model& v) {
     s << " { "
       << "\"__type__\": " << "\"dogen::stereotypes::simple_concept_model\"" << ", "
-      << "\"prop_0\": " << v.prop_0() << ", "
-      << "\"prop_1\": " << v.prop_1() << ", "
       << "\"prop_10\": " << v.prop_10()
       << " }";
     return(s);
diff --git a/projects/stereotypes/src/serialization/base_concept_model_ser.cpp b/projects/stereotypes/src/serialization/base_concept_model_ser.cpp
index 62cc5d1..b896e8e 100644
--- a/projects/stereotypes/src/serialization/base_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/base_concept_model_ser.cpp
@@ -38,17 +38,15 @@ namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar,
-    const dogen::stereotypes::base_concept_model& v,
+void save(Archive& /*ar*/,
+    const dogen::stereotypes::base_concept_model& /*v*/,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
 }
 
 template<typename Archive>
-void load(Archive& ar,
-    dogen::stereotypes::base_concept_model& v,
+void load(Archive& /*ar*/,
+    dogen::stereotypes::base_concept_model& /*v*/,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
 }
 
 } }
diff --git a/projects/stereotypes/src/serialization/base_with_concept_ser.cpp b/projects/stereotypes/src/serialization/base_with_concept_ser.cpp
new file mode 100644
index 0000000..f8dcfd3
--- /dev/null
+++ b/projects/stereotypes/src/serialization/base_with_concept_ser.cpp
@@ -0,0 +1,79 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/stereotypes/serialization/base_with_concept_ser.hpp"
+#include "dogen/stereotypes/serialization/further_refined_ser.hpp"
+
+#ifdef __linux__
+#include "eos/portable_iarchive.hpp"
+#include "eos/portable_oarchive.hpp"
+#endif
+
+BOOST_CLASS_TRACKING(
+    dogen::stereotypes::base_with_concept,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& /*ar*/,
+    const dogen::stereotypes::base_with_concept& /*v*/,
+    const unsigned int /*version*/) {
+}
+
+template<typename Archive>
+void load(Archive& /*ar*/,
+    dogen::stereotypes::base_with_concept& /*v*/,
+    const unsigned int /*version*/) {
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+
+#ifdef __linux__
+template void save(eos::portable_oarchive& ar, const dogen::stereotypes::base_with_concept& v, unsigned int version);
+template void load(eos::portable_iarchive& ar, dogen::stereotypes::base_with_concept& v, unsigned int version);
+#endif
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/serialization/further_refined_ser.cpp b/projects/stereotypes/src/serialization/further_refined_ser.cpp
new file mode 100644
index 0000000..3fcf5a8
--- /dev/null
+++ b/projects/stereotypes/src/serialization/further_refined_ser.cpp
@@ -0,0 +1,81 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/stereotypes/serialization/base_with_concept_ser.hpp"
+#include "dogen/stereotypes/serialization/further_refined_ser.hpp"
+
+#ifdef __linux__
+#include "eos/portable_iarchive.hpp"
+#include "eos/portable_oarchive.hpp"
+#endif
+
+BOOST_CLASS_TRACKING(
+    dogen::stereotypes::further_refined,
+    boost::serialization::track_selectively)
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::stereotypes::further_refined& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("base_with_concept", base_object<dogen::stereotypes::base_with_concept>(v));
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::stereotypes::further_refined& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("base_with_concept", base_object<dogen::stereotypes::base_with_concept>(v));
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+
+#ifdef __linux__
+template void save(eos::portable_oarchive& ar, const dogen::stereotypes::further_refined& v, unsigned int version);
+template void load(eos::portable_iarchive& ar, dogen::stereotypes::further_refined& v, unsigned int version);
+#endif
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/serialization/multi_concept_model_ser.cpp b/projects/stereotypes/src/serialization/multi_concept_model_ser.cpp
index 1e311c9..868aabf 100644
--- a/projects/stereotypes/src/serialization/multi_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/multi_concept_model_ser.cpp
@@ -41,9 +41,6 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::stereotypes::multi_concept_model& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
-    ar << make_nvp("prop_1", v.prop_1_);
-    ar << make_nvp("prop_2", v.prop_2_);
     ar << make_nvp("prop_10", v.prop_10_);
 }
 
@@ -51,9 +48,6 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::stereotypes::multi_concept_model& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
-    ar >> make_nvp("prop_1", v.prop_1_);
-    ar >> make_nvp("prop_2", v.prop_2_);
     ar >> make_nvp("prop_10", v.prop_10_);
 }
 
diff --git a/projects/stereotypes/src/serialization/multiple_refinement_concept_model_ser.cpp b/projects/stereotypes/src/serialization/multiple_refinement_concept_model_ser.cpp
index 96ef8d2..298a0f3 100644
--- a/projects/stereotypes/src/serialization/multiple_refinement_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/multiple_refinement_concept_model_ser.cpp
@@ -41,10 +41,6 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::stereotypes::multiple_refinement_concept_model& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
-    ar << make_nvp("prop_1", v.prop_1_);
-    ar << make_nvp("prop_2", v.prop_2_);
-    ar << make_nvp("prop_3", v.prop_3_);
     ar << make_nvp("prop_10", v.prop_10_);
 }
 
@@ -52,10 +48,6 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::stereotypes::multiple_refinement_concept_model& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
-    ar >> make_nvp("prop_1", v.prop_1_);
-    ar >> make_nvp("prop_2", v.prop_2_);
-    ar >> make_nvp("prop_3", v.prop_3_);
     ar >> make_nvp("prop_10", v.prop_10_);
 }
 
diff --git a/projects/stereotypes/src/serialization/refinement_concept_model_ser.cpp b/projects/stereotypes/src/serialization/refinement_concept_model_ser.cpp
index 28a745a..ee7543d 100644
--- a/projects/stereotypes/src/serialization/refinement_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/refinement_concept_model_ser.cpp
@@ -38,19 +38,15 @@ namespace boost {
 namespace serialization {
 
 template<typename Archive>
-void save(Archive& ar,
-    const dogen::stereotypes::refinement_concept_model& v,
+void save(Archive& /*ar*/,
+    const dogen::stereotypes::refinement_concept_model& /*v*/,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
-    ar << make_nvp("prop_1", v.prop_1_);
 }
 
 template<typename Archive>
-void load(Archive& ar,
-    dogen::stereotypes::refinement_concept_model& v,
+void load(Archive& /*ar*/,
+    dogen::stereotypes::refinement_concept_model& /*v*/,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
-    ar >> make_nvp("prop_1", v.prop_1_);
 }
 
 } }
diff --git a/projects/stereotypes/src/serialization/registrar_ser.cpp b/projects/stereotypes/src/serialization/registrar_ser.cpp
index 2a32771..2ccc028 100644
--- a/projects/stereotypes/src/serialization/registrar_ser.cpp
+++ b/projects/stereotypes/src/serialization/registrar_ser.cpp
@@ -26,6 +26,7 @@
 #include <boost/archive/text_oarchive.hpp>
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
+#include "dogen/stereotypes/serialization/further_refined_ser.hpp"
 #ifdef __linux__
 #include "eos/portable_iarchive.hpp"
 #include "eos/portable_oarchive.hpp"
@@ -35,20 +36,21 @@ namespace dogen {
 namespace stereotypes {
 
 template<typename Archive>
-void register_types(Archive&) {
+void register_types(Archive& ar) {
+    ar.template register_type<dogen::stereotypes::further_refined>();
 }
 
-template void register_types(boost::archive::polymorphic_oarchive&);
-template void register_types(boost::archive::polymorphic_iarchive&);
+template void register_types(boost::archive::polymorphic_oarchive& ar);
+template void register_types(boost::archive::polymorphic_iarchive& ar);
 
-template void register_types(boost::archive::text_oarchive&);
-template void register_types(boost::archive::text_iarchive&);
+template void register_types(boost::archive::text_oarchive& ar);
+template void register_types(boost::archive::text_iarchive& ar);
 
-template void register_types(boost::archive::binary_oarchive&);
-template void register_types(boost::archive::binary_iarchive&);
+template void register_types(boost::archive::binary_oarchive& ar);
+template void register_types(boost::archive::binary_iarchive& ar);
 
-template void register_types(boost::archive::xml_oarchive&);
-template void register_types(boost::archive::xml_iarchive&);
+template void register_types(boost::archive::xml_oarchive& ar);
+template void register_types(boost::archive::xml_iarchive& ar);
 
 #ifdef __linux__
 template void register_types(eos::portable_oarchive& ar);
diff --git a/projects/stereotypes/src/serialization/second_refinement_concept_model_ser.cpp b/projects/stereotypes/src/serialization/second_refinement_concept_model_ser.cpp
index fba1af2..c555b04 100644
--- a/projects/stereotypes/src/serialization/second_refinement_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/second_refinement_concept_model_ser.cpp
@@ -41,8 +41,6 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::stereotypes::second_refinement_concept_model& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
-    ar << make_nvp("prop_2", v.prop_2_);
     ar << make_nvp("prop_10", v.prop_10_);
 }
 
@@ -50,8 +48,6 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::stereotypes::second_refinement_concept_model& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
-    ar >> make_nvp("prop_2", v.prop_2_);
     ar >> make_nvp("prop_10", v.prop_10_);
 }
 
diff --git a/projects/stereotypes/src/serialization/simple_concept_model_ser.cpp b/projects/stereotypes/src/serialization/simple_concept_model_ser.cpp
index 9153fe3..0e6f019 100644
--- a/projects/stereotypes/src/serialization/simple_concept_model_ser.cpp
+++ b/projects/stereotypes/src/serialization/simple_concept_model_ser.cpp
@@ -27,7 +27,6 @@
 #include <boost/archive/xml_iarchive.hpp>
 #include <boost/archive/xml_oarchive.hpp>
 #include <boost/serialization/nvp.hpp>
-#include "dogen/stereotypes/serialization/entity_ser.hpp"
 #include "dogen/stereotypes/serialization/simple_concept_model_ser.hpp"
 
 #ifdef __linux__
@@ -42,8 +41,6 @@ template<typename Archive>
 void save(Archive& ar,
     const dogen::stereotypes::simple_concept_model& v,
     const unsigned int /*version*/) {
-    ar << make_nvp("prop_0", v.prop_0_);
-    ar << make_nvp("prop_1", v.prop_1_);
     ar << make_nvp("prop_10", v.prop_10_);
 }
 
@@ -51,8 +48,6 @@ template<typename Archive>
 void load(Archive& ar,
     dogen::stereotypes::simple_concept_model& v,
     const unsigned int /*version*/) {
-    ar >> make_nvp("prop_0", v.prop_0_);
-    ar >> make_nvp("prop_1", v.prop_1_);
     ar >> make_nvp("prop_10", v.prop_10_);
 }
 
diff --git a/projects/stereotypes/src/test_data/base_concept_model_td.cpp b/projects/stereotypes/src/test_data/base_concept_model_td.cpp
index 2c0d495..b850a71 100644
--- a/projects/stereotypes/src/test_data/base_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/base_concept_model_td.cpp
@@ -20,13 +20,7 @@
  */
 #include "dogen/stereotypes/test_data/base_concept_model_td.hpp"
 
-namespace {
 
-int create_int(const unsigned int position) {
-    return position;
-}
-
-}
 
 namespace dogen {
 namespace stereotypes {
@@ -34,14 +28,12 @@ namespace stereotypes {
 base_concept_model_generator::base_concept_model_generator() : position_(0) { }
 
 void base_concept_model_generator::
-populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
+populate(const unsigned int /*position*/, result_type& /*v*/) {
 }
 
 base_concept_model_generator::result_type
-base_concept_model_generator::create(const unsigned int position) {
+base_concept_model_generator::create(const unsigned int/*position*/) {
     base_concept_model r;
-    base_concept_model_generator::populate(position, r);
     return r;
 }
 base_concept_model_generator::result_type*
diff --git a/projects/stereotypes/src/test_data/base_with_concept_td.cpp b/projects/stereotypes/src/test_data/base_with_concept_td.cpp
new file mode 100644
index 0000000..c87f45c
--- /dev/null
+++ b/projects/stereotypes/src/test_data/base_with_concept_td.cpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/stereotypes/test_data/base_with_concept_td.hpp"
+#include "dogen/stereotypes/test_data/further_refined_td.hpp"
+
+
+
+namespace dogen {
+namespace stereotypes {
+
+
+void base_with_concept_generator::
+populate(const unsigned int /*position*/, result_type& /*v*/) {
+}
+
+base_with_concept_generator::result_type*
+base_with_concept_generator::create_ptr(const unsigned int position) {
+    return dogen::stereotypes::further_refined_generator::create_ptr(position);
+}
+
+
+} }
diff --git a/projects/stereotypes/src/test_data/further_refined_td.cpp b/projects/stereotypes/src/test_data/further_refined_td.cpp
new file mode 100644
index 0000000..7bed8a4
--- /dev/null
+++ b/projects/stereotypes/src/test_data/further_refined_td.cpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/stereotypes/test_data/base_with_concept_td.hpp"
+#include "dogen/stereotypes/test_data/further_refined_td.hpp"
+
+
+
+namespace dogen {
+namespace stereotypes {
+
+further_refined_generator::further_refined_generator() : position_(0) { }
+
+void further_refined_generator::
+populate(const unsigned int position, result_type& v) {
+    dogen::stereotypes::base_with_concept_generator::populate(position, v);
+}
+
+further_refined_generator::result_type
+further_refined_generator::create(const unsigned int/*position*/) {
+    further_refined r;
+    return r;
+}
+further_refined_generator::result_type*
+further_refined_generator::create_ptr(const unsigned int position) {
+    further_refined* p = new further_refined();
+    further_refined_generator::populate(position, *p);
+    return p;
+}
+
+further_refined_generator::result_type
+further_refined_generator::operator()() {
+    return create(position_++);
+}
+
+} }
diff --git a/projects/stereotypes/src/test_data/multi_concept_model_td.cpp b/projects/stereotypes/src/test_data/multi_concept_model_td.cpp
index c162208..f2f7f9e 100644
--- a/projects/stereotypes/src/test_data/multi_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/multi_concept_model_td.cpp
@@ -35,10 +35,7 @@ multi_concept_model_generator::multi_concept_model_generator() : position_(0) {
 
 void multi_concept_model_generator::
 populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
-    v.prop_1(create_int(position + 1));
-    v.prop_2(create_int(position + 2));
-    v.prop_10(create_int(position + 3));
+    v.prop_10(create_int(position + 0));
 }
 
 multi_concept_model_generator::result_type
diff --git a/projects/stereotypes/src/test_data/multiple_refinement_concept_model_td.cpp b/projects/stereotypes/src/test_data/multiple_refinement_concept_model_td.cpp
index 9f0f81b..236deb3 100644
--- a/projects/stereotypes/src/test_data/multiple_refinement_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/multiple_refinement_concept_model_td.cpp
@@ -35,11 +35,7 @@ multiple_refinement_concept_model_generator::multiple_refinement_concept_model_g
 
 void multiple_refinement_concept_model_generator::
 populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
-    v.prop_1(create_int(position + 1));
-    v.prop_2(create_int(position + 2));
-    v.prop_3(create_int(position + 3));
-    v.prop_10(create_int(position + 4));
+    v.prop_10(create_int(position + 0));
 }
 
 multiple_refinement_concept_model_generator::result_type
diff --git a/projects/stereotypes/src/test_data/refinement_concept_model_td.cpp b/projects/stereotypes/src/test_data/refinement_concept_model_td.cpp
index 12d8292..064eeb4 100644
--- a/projects/stereotypes/src/test_data/refinement_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/refinement_concept_model_td.cpp
@@ -20,13 +20,7 @@
  */
 #include "dogen/stereotypes/test_data/refinement_concept_model_td.hpp"
 
-namespace {
 
-int create_int(const unsigned int position) {
-    return position;
-}
-
-}
 
 namespace dogen {
 namespace stereotypes {
@@ -34,15 +28,12 @@ namespace stereotypes {
 refinement_concept_model_generator::refinement_concept_model_generator() : position_(0) { }
 
 void refinement_concept_model_generator::
-populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
-    v.prop_1(create_int(position + 1));
+populate(const unsigned int /*position*/, result_type& /*v*/) {
 }
 
 refinement_concept_model_generator::result_type
-refinement_concept_model_generator::create(const unsigned int position) {
+refinement_concept_model_generator::create(const unsigned int/*position*/) {
     refinement_concept_model r;
-    refinement_concept_model_generator::populate(position, r);
     return r;
 }
 refinement_concept_model_generator::result_type*
diff --git a/projects/stereotypes/src/test_data/second_refinement_concept_model_td.cpp b/projects/stereotypes/src/test_data/second_refinement_concept_model_td.cpp
index 2161efb..9a96e15 100644
--- a/projects/stereotypes/src/test_data/second_refinement_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/second_refinement_concept_model_td.cpp
@@ -35,9 +35,7 @@ second_refinement_concept_model_generator::second_refinement_concept_model_gener
 
 void second_refinement_concept_model_generator::
 populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
-    v.prop_2(create_int(position + 1));
-    v.prop_10(create_int(position + 2));
+    v.prop_10(create_int(position + 0));
 }
 
 second_refinement_concept_model_generator::result_type
diff --git a/projects/stereotypes/src/test_data/simple_concept_model_td.cpp b/projects/stereotypes/src/test_data/simple_concept_model_td.cpp
index af07884..e31e4dc 100644
--- a/projects/stereotypes/src/test_data/simple_concept_model_td.cpp
+++ b/projects/stereotypes/src/test_data/simple_concept_model_td.cpp
@@ -18,7 +18,6 @@
  * MA 02110-1301, USA.
  *
  */
-#include "dogen/stereotypes/test_data/entity_td.hpp"
 #include "dogen/stereotypes/test_data/simple_concept_model_td.hpp"
 
 namespace {
@@ -27,11 +26,6 @@ int create_int(const unsigned int position) {
     return position;
 }
 
-dogen::stereotypes::entity
-create_dogen_stereotypes_entity(const unsigned int position) {
-    return dogen::stereotypes::entity_generator::create(position);
-}
-
 }
 
 namespace dogen {
@@ -41,9 +35,7 @@ simple_concept_model_generator::simple_concept_model_generator() : position_(0)
 
 void simple_concept_model_generator::
 populate(const unsigned int position, result_type& v) {
-    v.prop_0(create_int(position + 0));
-    v.prop_1(create_dogen_stereotypes_entity(position + 1));
-    v.prop_10(create_int(position + 2));
+    v.prop_10(create_int(position + 0));
 }
 
 simple_concept_model_generator::result_type
diff --git a/projects/stereotypes/src/types/base_concept_model.cpp b/projects/stereotypes/src/types/base_concept_model.cpp
index ec30593..59c179a 100644
--- a/projects/stereotypes/src/types/base_concept_model.cpp
+++ b/projects/stereotypes/src/types/base_concept_model.cpp
@@ -23,33 +23,8 @@
 namespace dogen {
 namespace stereotypes {
 
-base_concept_model::base_concept_model()
-    : prop_0_(static_cast<int>(0)) { }
-
-base_concept_model::base_concept_model(const int prop_0)
-    : prop_0_(prop_0) { }
-
-void base_concept_model::swap(base_concept_model& other) noexcept {
-    using std::swap;
-    swap(prop_0_, other.prop_0_);
-}
-
-bool base_concept_model::operator==(const base_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_;
-}
-
-base_concept_model& base_concept_model::operator=(base_concept_model other) {
-    using std::swap;
-    swap(*this, other);
-    return *this;
-}
-
-int base_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void base_concept_model::prop_0(const int v) {
-    prop_0_ = v;
+bool base_concept_model::operator==(const base_concept_model& /*rhs*/) const {
+    return true;
 }
 
 } }
\ No newline at end of file
diff --git a/projects/stereotypes/src/types/base_with_concept.cpp b/projects/stereotypes/src/types/base_with_concept.cpp
new file mode 100644
index 0000000..d9c7269
--- /dev/null
+++ b/projects/stereotypes/src/types/base_with_concept.cpp
@@ -0,0 +1,39 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/stereotypes/types/base_with_concept.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+void base_with_concept::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::stereotypes::base_with_concept\"" << " }";
+}
+
+void base_with_concept::swap(base_with_concept&) noexcept {
+}
+
+bool base_with_concept::compare(const base_with_concept& /*rhs*/) const {
+    return true;
+}
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/types/further_refined.cpp b/projects/stereotypes/src/types/further_refined.cpp
new file mode 100644
index 0000000..e120d00
--- /dev/null
+++ b/projects/stereotypes/src/types/further_refined.cpp
@@ -0,0 +1,46 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/stereotypes/io/base_with_concept_io.hpp"
+#include "dogen/stereotypes/types/further_refined.hpp"
+
+namespace dogen {
+namespace stereotypes {
+
+void further_refined::to_stream(std::ostream& s) const {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::stereotypes::further_refined\"" << ", "
+      << "\"__parent_0__\": ";
+    base_with_concept::to_stream(s);
+    s << " }";
+}
+
+bool further_refined::equals(const dogen::stereotypes::base_with_concept& other) const {
+    const further_refined* const p(dynamic_cast<const further_refined* const>(&other));
+    if (!p) return false;
+    return *this == *p;
+}
+
+bool further_refined::operator==(const further_refined& /*rhs*/) const {
+    return true;
+}
+
+} }
\ No newline at end of file
diff --git a/projects/stereotypes/src/types/multi_concept_model.cpp b/projects/stereotypes/src/types/multi_concept_model.cpp
index 818b667..4e7c9e3 100644
--- a/projects/stereotypes/src/types/multi_concept_model.cpp
+++ b/projects/stereotypes/src/types/multi_concept_model.cpp
@@ -24,34 +24,18 @@ namespace dogen {
 namespace stereotypes {
 
 multi_concept_model::multi_concept_model()
-    : prop_0_(static_cast<int>(0)),
-      prop_1_(static_cast<int>(0)),
-      prop_2_(static_cast<int>(0)),
-      prop_10_(static_cast<int>(0)) { }
+    : prop_10_(static_cast<int>(0)) { }
 
-multi_concept_model::multi_concept_model(
-    const int prop_0,
-    const int prop_1,
-    const int prop_2,
-    const int prop_10)
-    : prop_0_(prop_0),
-      prop_1_(prop_1),
-      prop_2_(prop_2),
-      prop_10_(prop_10) { }
+multi_concept_model::multi_concept_model(const int prop_10)
+    : prop_10_(prop_10) { }
 
 void multi_concept_model::swap(multi_concept_model& other) noexcept {
     using std::swap;
-    swap(prop_0_, other.prop_0_);
-    swap(prop_1_, other.prop_1_);
-    swap(prop_2_, other.prop_2_);
     swap(prop_10_, other.prop_10_);
 }
 
 bool multi_concept_model::operator==(const multi_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_ &&
-        prop_1_ == rhs.prop_1_ &&
-        prop_2_ == rhs.prop_2_ &&
-        prop_10_ == rhs.prop_10_;
+    return prop_10_ == rhs.prop_10_;
 }
 
 multi_concept_model& multi_concept_model::operator=(multi_concept_model other) {
@@ -60,30 +44,6 @@ multi_concept_model& multi_concept_model::operator=(multi_concept_model other) {
     return *this;
 }
 
-int multi_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void multi_concept_model::prop_0(const int v) {
-    prop_0_ = v;
-}
-
-int multi_concept_model::prop_1() const {
-    return prop_1_;
-}
-
-void multi_concept_model::prop_1(const int v) {
-    prop_1_ = v;
-}
-
-int multi_concept_model::prop_2() const {
-    return prop_2_;
-}
-
-void multi_concept_model::prop_2(const int v) {
-    prop_2_ = v;
-}
-
 int multi_concept_model::prop_10() const {
     return prop_10_;
 }
diff --git a/projects/stereotypes/src/types/multiple_refinement_concept_model.cpp b/projects/stereotypes/src/types/multiple_refinement_concept_model.cpp
index 7aa0b22..c366aeb 100644
--- a/projects/stereotypes/src/types/multiple_refinement_concept_model.cpp
+++ b/projects/stereotypes/src/types/multiple_refinement_concept_model.cpp
@@ -24,39 +24,18 @@ namespace dogen {
 namespace stereotypes {
 
 multiple_refinement_concept_model::multiple_refinement_concept_model()
-    : prop_0_(static_cast<int>(0)),
-      prop_1_(static_cast<int>(0)),
-      prop_2_(static_cast<int>(0)),
-      prop_3_(static_cast<int>(0)),
-      prop_10_(static_cast<int>(0)) { }
+    : prop_10_(static_cast<int>(0)) { }
 
-multiple_refinement_concept_model::multiple_refinement_concept_model(
-    const int prop_0,
-    const int prop_1,
-    const int prop_2,
-    const int prop_3,
-    const int prop_10)
-    : prop_0_(prop_0),
-      prop_1_(prop_1),
-      prop_2_(prop_2),
-      prop_3_(prop_3),
-      prop_10_(prop_10) { }
+multiple_refinement_concept_model::multiple_refinement_concept_model(const int prop_10)
+    : prop_10_(prop_10) { }
 
 void multiple_refinement_concept_model::swap(multiple_refinement_concept_model& other) noexcept {
     using std::swap;
-    swap(prop_0_, other.prop_0_);
-    swap(prop_1_, other.prop_1_);
-    swap(prop_2_, other.prop_2_);
-    swap(prop_3_, other.prop_3_);
     swap(prop_10_, other.prop_10_);
 }
 
 bool multiple_refinement_concept_model::operator==(const multiple_refinement_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_ &&
-        prop_1_ == rhs.prop_1_ &&
-        prop_2_ == rhs.prop_2_ &&
-        prop_3_ == rhs.prop_3_ &&
-        prop_10_ == rhs.prop_10_;
+    return prop_10_ == rhs.prop_10_;
 }
 
 multiple_refinement_concept_model& multiple_refinement_concept_model::operator=(multiple_refinement_concept_model other) {
@@ -65,38 +44,6 @@ multiple_refinement_concept_model& multiple_refinement_concept_model::operator=(
     return *this;
 }
 
-int multiple_refinement_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void multiple_refinement_concept_model::prop_0(const int v) {
-    prop_0_ = v;
-}
-
-int multiple_refinement_concept_model::prop_1() const {
-    return prop_1_;
-}
-
-void multiple_refinement_concept_model::prop_1(const int v) {
-    prop_1_ = v;
-}
-
-int multiple_refinement_concept_model::prop_2() const {
-    return prop_2_;
-}
-
-void multiple_refinement_concept_model::prop_2(const int v) {
-    prop_2_ = v;
-}
-
-int multiple_refinement_concept_model::prop_3() const {
-    return prop_3_;
-}
-
-void multiple_refinement_concept_model::prop_3(const int v) {
-    prop_3_ = v;
-}
-
 int multiple_refinement_concept_model::prop_10() const {
     return prop_10_;
 }
diff --git a/projects/stereotypes/src/types/refinement_concept_model.cpp b/projects/stereotypes/src/types/refinement_concept_model.cpp
index 4a4dfde..bbd583f 100644
--- a/projects/stereotypes/src/types/refinement_concept_model.cpp
+++ b/projects/stereotypes/src/types/refinement_concept_model.cpp
@@ -23,47 +23,8 @@
 namespace dogen {
 namespace stereotypes {
 
-refinement_concept_model::refinement_concept_model()
-    : prop_0_(static_cast<int>(0)),
-      prop_1_(static_cast<int>(0)) { }
-
-refinement_concept_model::refinement_concept_model(
-    const int prop_0,
-    const int prop_1)
-    : prop_0_(prop_0),
-      prop_1_(prop_1) { }
-
-void refinement_concept_model::swap(refinement_concept_model& other) noexcept {
-    using std::swap;
-    swap(prop_0_, other.prop_0_);
-    swap(prop_1_, other.prop_1_);
-}
-
-bool refinement_concept_model::operator==(const refinement_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_ &&
-        prop_1_ == rhs.prop_1_;
-}
-
-refinement_concept_model& refinement_concept_model::operator=(refinement_concept_model other) {
-    using std::swap;
-    swap(*this, other);
-    return *this;
-}
-
-int refinement_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void refinement_concept_model::prop_0(const int v) {
-    prop_0_ = v;
-}
-
-int refinement_concept_model::prop_1() const {
-    return prop_1_;
-}
-
-void refinement_concept_model::prop_1(const int v) {
-    prop_1_ = v;
+bool refinement_concept_model::operator==(const refinement_concept_model& /*rhs*/) const {
+    return true;
 }
 
 } }
\ No newline at end of file
diff --git a/projects/stereotypes/src/types/second_refinement_concept_model.cpp b/projects/stereotypes/src/types/second_refinement_concept_model.cpp
index 5d1e1f8..1640bb3 100644
--- a/projects/stereotypes/src/types/second_refinement_concept_model.cpp
+++ b/projects/stereotypes/src/types/second_refinement_concept_model.cpp
@@ -24,29 +24,18 @@ namespace dogen {
 namespace stereotypes {
 
 second_refinement_concept_model::second_refinement_concept_model()
-    : prop_0_(static_cast<int>(0)),
-      prop_2_(static_cast<int>(0)),
-      prop_10_(static_cast<int>(0)) { }
+    : prop_10_(static_cast<int>(0)) { }
 
-second_refinement_concept_model::second_refinement_concept_model(
-    const int prop_0,
-    const int prop_2,
-    const int prop_10)
-    : prop_0_(prop_0),
-      prop_2_(prop_2),
-      prop_10_(prop_10) { }
+second_refinement_concept_model::second_refinement_concept_model(const int prop_10)
+    : prop_10_(prop_10) { }
 
 void second_refinement_concept_model::swap(second_refinement_concept_model& other) noexcept {
     using std::swap;
-    swap(prop_0_, other.prop_0_);
-    swap(prop_2_, other.prop_2_);
     swap(prop_10_, other.prop_10_);
 }
 
 bool second_refinement_concept_model::operator==(const second_refinement_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_ &&
-        prop_2_ == rhs.prop_2_ &&
-        prop_10_ == rhs.prop_10_;
+    return prop_10_ == rhs.prop_10_;
 }
 
 second_refinement_concept_model& second_refinement_concept_model::operator=(second_refinement_concept_model other) {
@@ -55,22 +44,6 @@ second_refinement_concept_model& second_refinement_concept_model::operator=(seco
     return *this;
 }
 
-int second_refinement_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void second_refinement_concept_model::prop_0(const int v) {
-    prop_0_ = v;
-}
-
-int second_refinement_concept_model::prop_2() const {
-    return prop_2_;
-}
-
-void second_refinement_concept_model::prop_2(const int v) {
-    prop_2_ = v;
-}
-
 int second_refinement_concept_model::prop_10() const {
     return prop_10_;
 }
diff --git a/projects/stereotypes/src/types/simple_concept_model.cpp b/projects/stereotypes/src/types/simple_concept_model.cpp
index 8de9bbe..87fb12b 100644
--- a/projects/stereotypes/src/types/simple_concept_model.cpp
+++ b/projects/stereotypes/src/types/simple_concept_model.cpp
@@ -24,28 +24,18 @@ namespace dogen {
 namespace stereotypes {
 
 simple_concept_model::simple_concept_model()
-    : prop_0_(static_cast<int>(0)),
-      prop_10_(static_cast<int>(0)) { }
+    : prop_10_(static_cast<int>(0)) { }
 
-simple_concept_model::simple_concept_model(
-    const int prop_0,
-    const dogen::stereotypes::entity& prop_1,
-    const int prop_10)
-    : prop_0_(prop_0),
-      prop_1_(prop_1),
-      prop_10_(prop_10) { }
+simple_concept_model::simple_concept_model(const int prop_10)
+    : prop_10_(prop_10) { }
 
 void simple_concept_model::swap(simple_concept_model& other) noexcept {
     using std::swap;
-    swap(prop_0_, other.prop_0_);
-    swap(prop_1_, other.prop_1_);
     swap(prop_10_, other.prop_10_);
 }
 
 bool simple_concept_model::operator==(const simple_concept_model& rhs) const {
-    return prop_0_ == rhs.prop_0_ &&
-        prop_1_ == rhs.prop_1_ &&
-        prop_10_ == rhs.prop_10_;
+    return prop_10_ == rhs.prop_10_;
 }
 
 simple_concept_model& simple_concept_model::operator=(simple_concept_model other) {
@@ -54,30 +44,6 @@ simple_concept_model& simple_concept_model::operator=(simple_concept_model other
     return *this;
 }
 
-int simple_concept_model::prop_0() const {
-    return prop_0_;
-}
-
-void simple_concept_model::prop_0(const int v) {
-    prop_0_ = v;
-}
-
-const dogen::stereotypes::entity& simple_concept_model::prop_1() const {
-    return prop_1_;
-}
-
-dogen::stereotypes::entity& simple_concept_model::prop_1() {
-    return prop_1_;
-}
-
-void simple_concept_model::prop_1(const dogen::stereotypes::entity& v) {
-    prop_1_ = v;
-}
-
-void simple_concept_model::prop_1(const dogen::stereotypes::entity&& v) {
-    prop_1_ = std::move(v);
-}
-
 int simple_concept_model::prop_10() const {
     return prop_10_;
 }
diff --git a/projects/utility/include/dogen/utility/io/array_io.hpp b/projects/utility/include/dogen/utility/io/array_io.hpp
index 5b9c35f..95b3712 100644
--- a/projects/utility/include/dogen/utility/io/array_io.hpp
+++ b/projects/utility/include/dogen/utility/io/array_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_ARRAY_HPP
-#define DOGEN_UTILITY_STREAMING_ARRAY_HPP
+#ifndef DOGEN_UTILITY_IO_ARRAY_IO_HPP
+#define DOGEN_UTILITY_IO_ARRAY_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/jsonify_io.hpp b/projects/utility/include/dogen/utility/io/jsonify_io.hpp
index 9be642e..b3258c5 100644
--- a/projects/utility/include/dogen/utility/io/jsonify_io.hpp
+++ b/projects/utility/include/dogen/utility/io/jsonify_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_JSONIFY_HPP
-#define DOGEN_UTILITY_STREAMING_JSONIFY_HPP
+#ifndef DOGEN_UTILITY_IO_JSONIFY_IO_HPP
+#define DOGEN_UTILITY_IO_JSONIFY_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/list_io.hpp b/projects/utility/include/dogen/utility/io/list_io.hpp
index 7318708..1f15dfd 100644
--- a/projects/utility/include/dogen/utility/io/list_io.hpp
+++ b/projects/utility/include/dogen/utility/io/list_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_LIST_HPP
-#define DOGEN_UTILITY_STREAMING_LIST_HPP
+#ifndef DOGEN_UTILITY_IO_LIST_IO_HPP
+#define DOGEN_UTILITY_IO_LIST_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/map_io.hpp b/projects/utility/include/dogen/utility/io/map_io.hpp
index 5856c0f..1419787 100644
--- a/projects/utility/include/dogen/utility/io/map_io.hpp
+++ b/projects/utility/include/dogen/utility/io/map_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_MAP_HPP
-#define DOGEN_UTILITY_STREAMING_MAP_HPP
+#ifndef DOGEN_UTILITY_IO_MAP_IO_HPP
+#define DOGEN_UTILITY_IO_MAP_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/optional_io.hpp b/projects/utility/include/dogen/utility/io/optional_io.hpp
index 74a69ed..21a4e8a 100644
--- a/projects/utility/include/dogen/utility/io/optional_io.hpp
+++ b/projects/utility/include/dogen/utility/io/optional_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_OPTIONAL_HPP
-#define DOGEN_UTILITY_STREAMING_OPTIONAL_HPP
+#ifndef DOGEN_UTILITY_IO_OPTIONAL_IO_HPP
+#define DOGEN_UTILITY_IO_OPTIONAL_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/pair_io.hpp b/projects/utility/include/dogen/utility/io/pair_io.hpp
index 4bc54ba..bcd4ec6 100644
--- a/projects/utility/include/dogen/utility/io/pair_io.hpp
+++ b/projects/utility/include/dogen/utility/io/pair_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_PAIR_HPP
-#define DOGEN_UTILITY_STREAMING_PAIR_HPP
+#ifndef DOGEN_UTILITY_IO_PAIR_IO_HPP
+#define DOGEN_UTILITY_IO_PAIR_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/set_io.hpp b/projects/utility/include/dogen/utility/io/set_io.hpp
index 3de3273..86293c7 100644
--- a/projects/utility/include/dogen/utility/io/set_io.hpp
+++ b/projects/utility/include/dogen/utility/io/set_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_SET_HPP
-#define DOGEN_UTILITY_STREAMING_SET_HPP
+#ifndef DOGEN_UTILITY_IO_SET_IO_HPP
+#define DOGEN_UTILITY_IO_SET_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/shared_ptr_io.hpp b/projects/utility/include/dogen/utility/io/shared_ptr_io.hpp
index 2ba4ec4..594789b 100644
--- a/projects/utility/include/dogen/utility/io/shared_ptr_io.hpp
+++ b/projects/utility/include/dogen/utility/io/shared_ptr_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_SHARED_PTR_HPP
-#define DOGEN_UTILITY_STREAMING_SHARED_PTR_HPP
+#ifndef DOGEN_UTILITY_IO_SHARED_PTR_IO_HPP
+#define DOGEN_UTILITY_IO_SHARED_PTR_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/unordered_map_io.hpp b/projects/utility/include/dogen/utility/io/unordered_map_io.hpp
index 19f3986..256d5e9 100644
--- a/projects/utility/include/dogen/utility/io/unordered_map_io.hpp
+++ b/projects/utility/include/dogen/utility/io/unordered_map_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_IO_MAP_HPP
-#define DOGEN_UTILITY_IO_MAP_HPP
+#ifndef DOGEN_UTILITY_IO_UNORDERED_MAP_IO_HPP
+#define DOGEN_UTILITY_IO_UNORDERED_MAP_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/unordered_set_io.hpp b/projects/utility/include/dogen/utility/io/unordered_set_io.hpp
index 01c4d9a..8c5aba3 100644
--- a/projects/utility/include/dogen/utility/io/unordered_set_io.hpp
+++ b/projects/utility/include/dogen/utility/io/unordered_set_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_SET_HPP
-#define DOGEN_UTILITY_STREAMING_SET_HPP
+#ifndef DOGEN_UTILITY_IO_UNORDERED_SET_IO_HPP
+#define DOGEN_UTILITY_IO_UNORDERED_SET_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/utility_io.hpp b/projects/utility/include/dogen/utility/io/utility_io.hpp
index bac83e7..34578f6 100644
--- a/projects/utility/include/dogen/utility/io/utility_io.hpp
+++ b/projects/utility/include/dogen/utility/io/utility_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_STREAMING_HPP
-#define DOGEN_UTILITY_STREAMING_STREAMING_HPP
+#ifndef DOGEN_UTILITY_IO_UTILITY_IO_HPP
+#define DOGEN_UTILITY_IO_UTILITY_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/projects/utility/include/dogen/utility/io/vector_io.hpp b/projects/utility/include/dogen/utility/io/vector_io.hpp
index fa68a48..94b004b 100644
--- a/projects/utility/include/dogen/utility/io/vector_io.hpp
+++ b/projects/utility/include/dogen/utility/io/vector_io.hpp
@@ -18,8 +18,8 @@
  * MA 02110-1301, USA.
  *
  */
-#ifndef DOGEN_UTILITY_STREAMING_VECTOR_HPP
-#define DOGEN_UTILITY_STREAMING_VECTOR_HPP
+#ifndef DOGEN_UTILITY_IO_VECTOR_IO_HPP
+#define DOGEN_UTILITY_IO_VECTOR_IO_HPP
 
 #if defined(_MSC_VER) && (_MSC_VER >= 1200)
 #pragma once
diff --git a/test_data/dia_sml/input/stereotypes.dia b/test_data/dia_sml/input/stereotypes.dia
index 49d799b..2ea9c2d 100644
--- a/test_data/dia_sml/input/stereotypes.dia
+++ b/test_data/dia_sml/input/stereotypes.dia
@@ -3250,13 +3250,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O23">
       <dia:attribute name="obj_pos">
-        <dia:point val="123,3"/>
+        <dia:point val="133,3"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="122.95,2.95;133.663,6.65"/>
+        <dia:rectangle val="132.95,2.95;143.663,6.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="123,3"/>
+        <dia:point val="133,3"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="10.612500000000001"/>
@@ -3693,13 +3693,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O27">
       <dia:attribute name="obj_pos">
-        <dia:point val="123,10"/>
+        <dia:point val="133,10"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="122.95,9.95;132.82,13.05"/>
+        <dia:rectangle val="132.95,9.95;142.82,13.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="123,10"/>
+        <dia:point val="133,10"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="9.7699999999999996"/>
@@ -3803,13 +3803,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O28">
       <dia:attribute name="obj_pos">
-        <dia:point val="123,22"/>
+        <dia:point val="134,22"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="122.95,21.95;135.66,25.05"/>
+        <dia:rectangle val="133.95,21.95;146.66,25.05"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="123,22"/>
+        <dia:point val="134,22"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="12.609999999999999"/>
@@ -4613,13 +4613,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O37">
       <dia:attribute name="obj_pos">
-        <dia:point val="131,39"/>
+        <dia:point val="134,39"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="130.95,38.95;147.245,42.65"/>
+        <dia:rectangle val="133.95,38.95;150.245,42.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="131,39"/>
+        <dia:point val="134,39"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="16.195"/>
@@ -4747,13 +4747,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O38">
       <dia:attribute name="obj_pos">
-        <dia:point val="131,50"/>
+        <dia:point val="134,49"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="130.95,49.95;147.785,53.65"/>
+        <dia:rectangle val="133.95,48.95;150.785,52.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="131,50"/>
+        <dia:point val="134,49"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="16.734999999999999"/>
@@ -4881,13 +4881,13 @@ These are the main cases:
     </dia:object>
     <dia:object type="UML - Class" version="0" id="O39">
       <dia:attribute name="obj_pos">
-        <dia:point val="131,32"/>
+        <dia:point val="134,32"/>
       </dia:attribute>
       <dia:attribute name="obj_bb">
-        <dia:rectangle val="130.95,31.95;148.105,35.65"/>
+        <dia:rectangle val="133.95,31.95;151.105,35.65"/>
       </dia:attribute>
       <dia:attribute name="elem_corner">
-        <dia:point val="131,32"/>
+        <dia:point val="134,32"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
         <dia:real val="17.055"/>
@@ -5013,5 +5013,267 @@ These are the main cases:
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O40">
+      <dia:attribute name="obj_pos">
+        <dia:point val="163,32"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="162.95,31.95;172.015,35.05"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="163,32"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="8.9649999999999999"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#base_with_concept#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#SecondRefinement#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#Base class that models a refined concept.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Class" version="0" id="O41">
+      <dia:attribute name="obj_pos">
+        <dia:point val="157,44"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="156.95,43.95;166.405,47.05"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="157,44"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="9.3550000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="3"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#further_refined#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>#MultipleRefinements#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>#Descendant class that models a concept which is a refinement of the concept
+modeled by the base.#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes"/>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
+    <dia:object type="UML - Generalization" version="1" id="O42">
+      <dia:attribute name="obj_pos">
+        <dia:point val="167.482,35.0504"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="161.627,35.0004;168.332,44.05"/>
+      </dia:attribute>
+      <dia:attribute name="meta">
+        <dia:composite type="dict"/>
+      </dia:attribute>
+      <dia:attribute name="orth_points">
+        <dia:point val="167.482,35.0504"/>
+        <dia:point val="167.482,39.9252"/>
+        <dia:point val="161.678,39.9252"/>
+        <dia:point val="161.678,44"/>
+      </dia:attribute>
+      <dia:attribute name="orth_orient">
+        <dia:enum val="1"/>
+        <dia:enum val="0"/>
+        <dia:enum val="1"/>
+      </dia:attribute>
+      <dia:attribute name="orth_autoroute">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="text_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="line_colour">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:connections>
+        <dia:connection handle="0" to="O40" connection="8"/>
+        <dia:connection handle="1" to="O41" connection="1"/>
+      </dia:connections>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
