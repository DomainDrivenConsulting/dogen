diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp
index e69de29..d414b80 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp
@@ -0,0 +1,55 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_QUILT_CPP_TYPES_FORMATTABLES_HELPER_INSTANCES_FACTORY_HPP
+#define DOGEN_QUILT_CPP_TYPES_FORMATTABLES_HELPER_INSTANCES_FACTORY_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <list>
+#include <unordered_map>
+#include "dogen/yarn/types/property.hpp"
+#include "dogen/quilt.cpp/types/settings/helper_settings.hpp"
+#include "dogen/quilt.cpp/types/formattables/helper_instance.hpp"
+
+namespace dogen {
+namespace quilt {
+namespace cpp {
+namespace formattables {
+
+class helper_instances_factory {
+public:
+    explicit helper_instances_factory(const std::unordered_map<std::string,
+        settings::helper_settings>& hs);
+
+public:
+    std::list<formattables::helper_instance> make(
+        const std::list<yarn::property>& properties) const;
+
+private:
+    const std::unordered_map<std::string, settings::helper_settings>&
+    helper_settings_;
+};
+
+} } } }
+
+#endif
diff --git a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_repository_factory.hpp b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_repository_factory.hpp
index e69de29..9eaef5b 100644
--- a/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_repository_factory.hpp
+++ b/projects/quilt.cpp/include/dogen/quilt.cpp/types/formattables/helper_instances_repository_factory.hpp
@@ -0,0 +1,48 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_QUILT_CPP_TYPES_FORMATTABLES_HELPER_INSTANCES_REPOSITORY_FACTORY_HPP
+#define DOGEN_QUILT_CPP_TYPES_FORMATTABLES_HELPER_INSTANCES_REPOSITORY_FACTORY_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <string>
+#include <unordered_map>
+#include "dogen/yarn/types/model.hpp"
+#include "dogen/quilt.cpp/types/settings/helper_settings.hpp"
+#include "dogen/quilt.cpp/types/formattables/helper_instances_repository.hpp"
+
+namespace dogen {
+namespace quilt {
+namespace cpp {
+namespace formattables {
+
+class helper_instances_repository_factory {
+public:
+    helper_instances_repository
+    make(const yarn::model& m, const std::unordered_map<std::string,
+        settings::helper_settings>& hs) const;
+};
+
+} } } }
+
+#endif
diff --git a/projects/quilt.cpp/src/types/formattables/helper_instances_factory.cpp b/projects/quilt.cpp/src/types/formattables/helper_instances_factory.cpp
index d67ce65..9fb9b14 100644
--- a/projects/quilt.cpp/src/types/formattables/helper_instances_factory.cpp
+++ b/projects/quilt.cpp/src/types/formattables/helper_instances_factory.cpp
@@ -1,2 +1,56 @@
-// dummy function to suppress ranlib warnings
-void helper_instances_factory() { }
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <unordered_set>
+#include "dogen/utility/log/logger.hpp"
+#include "dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp"
+
+namespace {
+
+using namespace dogen::utility::log;
+static logger lg(logger_factory("quilt.cpp.helper_instances_factory"));
+
+}
+
+namespace dogen {
+namespace quilt {
+namespace cpp {
+namespace formattables {
+
+helper_instances_factory::helper_instances_factory(
+    const std::unordered_map<std::string, settings::helper_settings>& hs)
+    : helper_settings_(hs) { }
+
+std::list<formattables::helper_instance> helper_instances_factory::make(
+    const std::list<yarn::property>& properties) const {
+    BOOST_LOG_SEV(lg, debug) << "Creating helper method instances.";
+    if (properties.empty()) {
+        BOOST_LOG_SEV(lg, debug) << "No properties found.";
+        return std::list<formattables::helper_instance>{};
+    }
+
+    BOOST_LOG_SEV(lg, debug) << "[New] Properties found: " << properties.size();
+    std::unordered_set<std::string> types_done;
+    for (const auto p : properties)
+        recursive_helper_method_creator(owner, p.name_tree(), types_done);
+
+}
+
+} } } }
diff --git a/projects/quilt.cpp/src/types/formattables/helper_instances_repository_factory.cpp b/projects/quilt.cpp/src/types/formattables/helper_instances_repository_factory.cpp
index 7626e43..e9b6141 100644
--- a/projects/quilt.cpp/src/types/formattables/helper_instances_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/formattables/helper_instances_repository_factory.cpp
@@ -1,2 +1,107 @@
-// dummy function to suppress ranlib warnings
-void helper_instances_repository_factory() { }
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012-2015 Marco Craveiro <marco.craveiro@gmail.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/utility/log/logger.hpp"
+#include "dogen/yarn/types/object.hpp"
+#include "dogen/yarn/types/concept.hpp"
+#include "dogen/yarn/types/primitive.hpp"
+#include "dogen/yarn/types/enumeration.hpp"
+#include "dogen/yarn/types/element_visitor.hpp"
+#include "dogen/quilt.cpp/types/formattables/building_error.hpp"
+#include "dogen/quilt.cpp/types/formattables/helper_instances_factory.hpp"
+#include "dogen/quilt.cpp/io/formattables/helper_instances_repository_io.hpp"
+#include "dogen/quilt.cpp/types/formattables/helper_instances_repository_factory.hpp"
+
+namespace {
+
+using namespace dogen::utility::log;
+static logger lg(logger_factory(
+        "quilt.cpp.formattables.helper_instances_repository_factory"));
+
+const std::string duplicate_name("Duplicate name: ");
+
+}
+
+namespace dogen {
+namespace quilt {
+namespace cpp {
+namespace formattables {
+
+namespace {
+class generator final : public yarn::element_visitor {
+public:
+    explicit generator(const helper_instances_factory& f) : factory_(f) {}
+
+private:
+    template<typename YarnStateful>
+    void generate(const YarnStateful& e) {
+        if (e.generation_type() == yarn::generation_types::no_generation)
+            return;
+
+        const auto helper_instances(factory_.make(e.local_properties()));
+
+        if (helper_instances.empty())
+            return;
+
+        const auto qn(e.name().qualified());
+        const auto pair(std::make_pair(qn, helper_instances));
+        auto& deps(result_.helper_instances_by_name());
+        const auto res(deps.insert(pair));
+        if (!res.second) {
+            BOOST_LOG_SEV(lg, error) << duplicate_name << qn;
+            BOOST_THROW_EXCEPTION(building_error(duplicate_name + qn));
+        }
+    }
+
+public:
+    using yarn::element_visitor::visit;
+    void visit(const dogen::yarn::concept& c) { generate(c); }
+    void visit(const dogen::yarn::object& o) { generate(o); }
+
+public:
+    const helper_instances_repository& result() const { return result_; }
+
+private:
+    const helper_instances_factory& factory_;
+    helper_instances_repository result_;
+};
+
+}
+
+helper_instances_repository helper_instances_repository_factory::
+make(const yarn::model& m, const std::unordered_map<std::string,
+    settings::helper_settings>& hs) const {
+
+    BOOST_LOG_SEV(lg, debug) << "Started creating helper instances.";
+
+    const helper_instances_factory f(hs);
+    generator g(f);
+    for (const auto& pair : m.elements()) {
+        const auto& e(*pair.second);
+        e.accept(g);
+    }
+
+    BOOST_LOG_SEV(lg, debug) << "Finished creating helper instances:"
+                             << g.result();
+
+    return g.result();
+}
+
+} } } }
diff --git a/projects/quilt.cpp/src/types/formattables/inclusion_dependencies_repository_factory.cpp b/projects/quilt.cpp/src/types/formattables/inclusion_dependencies_repository_factory.cpp
index df64606..211c94b 100644
--- a/projects/quilt.cpp/src/types/formattables/inclusion_dependencies_repository_factory.cpp
+++ b/projects/quilt.cpp/src/types/formattables/inclusion_dependencies_repository_factory.cpp
@@ -53,6 +53,7 @@ public:
     explicit generator(const inclusion_dependencies_factory& f) : factory_(f) {}
 
 public:
+    // FIXME: this function is public as a hack because of registrar.
     template<typename YarnEntity>
     void generate(const YarnEntity& e, const yarn::name& n) {
         const auto id(factory_.make(e));
diff --git a/projects/quilt.cpp/src/types/formattables/workflow.cpp b/projects/quilt.cpp/src/types/formattables/workflow.cpp
index 8f9ec86..5e11b2a 100644
--- a/projects/quilt.cpp/src/types/formattables/workflow.cpp
+++ b/projects/quilt.cpp/src/types/formattables/workflow.cpp
@@ -34,10 +34,8 @@
 
 namespace {
 
-const std::string id("quilt.cpp.formattables.workflow");
-
 using namespace dogen::utility::log;
-static logger lg(logger_factory(id));
+static logger lg(logger_factory("quilt.cpp.formattables.workflow"));
 
 }
 
