diff --git a/CMakeLists.txt b/CMakeLists.txt
index abe10981b0..5a87110a85 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -482,24 +482,24 @@ if (DOGEN_CLI_EXECUTABLE)
 
     # uncomment to enable logging.
     set(DOGEN_LOGGING_OPTIONS "")
-    # set(DOGEN_LOG_LEVEL "trace")
-    # set(DOGEN_LOGGING_OPTIONS --log-enabled --log-level ${DOGEN_LOG_LEVEL})
+    set(DOGEN_LOG_LEVEL "trace")
+    set(DOGEN_LOGGING_OPTIONS --log-enabled --log-level ${DOGEN_LOG_LEVEL})
 
     set(DOGEN_TRACING_OPTIONS "")
     # uncomment to enable tracing.
-    # set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-enabled)
-    # set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-level detail)
-    # set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-format org-mode)
-    # set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-guids-enabled)
-    # set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-backend relational)
+    set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-enabled)
+    set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-level detail)
+    set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-format org-mode)
+    set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-guids-enabled)
+    set(DOGEN_TRACING_OPTIONS ${DOGEN_TRACING_OPTIONS} --tracing-backend relational)
 
     set(DOGEN_DATABASE_OPTIONS "")
     # uncomment to enable database tracing.
-    # set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-host localhost)
-    # set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-port 5432)
-    # set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-name musseque)
-    # set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-user build)
-    # set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-password build)
+    set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-host localhost)
+    set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-port 5433)
+    set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-name musseque)
+    set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-user build)
+    set(DOGEN_DATABASE_OPTIONS ${DOGEN_DATABASE_OPTIONS} --database-password build)
 
     set(DOGEN_DIFFING_OPTIONS "")
     # uncomment to enable diffing
diff --git a/projects/dogen.assets/src/types/transforms/orm_transform.cpp b/projects/dogen.assets/src/types/transforms/orm_transform.cpp
index fb394d91f2..54d4c0e4b8 100644
--- a/projects/dogen.assets/src/types/transforms/orm_transform.cpp
+++ b/projects/dogen.assets/src/types/transforms/orm_transform.cpp
@@ -520,6 +520,7 @@ void orm_transform::transform_objects(
             has_primary_key |= (attr_op && attr_op->is_primary_key());
             attr.orm_properties(attr_op);
         }
+        op.has_primary_key(has_primary_key);
 
         /*
          * Update the object's configuration with any additional
@@ -527,7 +528,6 @@ void orm_transform::transform_objects(
          */
         const auto& cfg(*o.configuration());
         update_object_properties(fg, cfg, lc, op);
-        op.has_primary_key(has_primary_key);
 
         BOOST_LOG_SEV(lg, debug) << "ORM configuration for object: "
                                  << pair.first << ": " << op;
diff --git a/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.cpp b/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.cpp
index 2b376c16bb..ab5b72ebe3 100644
--- a/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.cpp
+++ b/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.cpp
@@ -100,8 +100,8 @@ format(const context& ctx, const assets::meta_model::element& e) const {
         const auto sn(o.name().simple());
         const auto qn(a.get_qualified_name(o.name()));
         auto sbf(a.make_scoped_boilerplate_formatter(e));
-        const auto top_level_pragmas(a.get_odb_pragmas());
-        if (top_level_pragmas.empty()) {
+
+        if (!o.orm_properties() || o.orm_properties()->odb_pragmas().empty()) {
 a.stream() << "// class has no ODB pragmas defined." << std::endl;
 a.stream() << std::endl;
         } else {
@@ -111,12 +111,16 @@ a.stream() << std::endl;
 a.stream() << std::endl;
 a.stream() << "#ifdef ODB_COMPILER" << std::endl;
 a.stream() << std::endl;
-                for (const auto& pg : top_level_pragmas)
+                for (const auto& pg : o.orm_properties()->odb_pragmas())
 a.stream() << "#pragma db " << a.get_odb_type() << "(" << sn << ") " << pg << std::endl;
 
                 bool is_first(true);
                 for (const auto& attr : o.local_attributes()) {
-                    const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().qualified().dot()));
+                    if (!attr.orm_properties() ||
+                        attr.orm_properties()->odb_pragmas().empty())
+                        continue;
+
+                    const auto attr_level_pragmas(attr.orm_properties()->odb_pragmas());
                     for (const auto pg : attr_level_pragmas) {
                         if (is_first)
 a.stream() << std::endl;
diff --git a/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.stitch b/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.stitch
index b5ee1175e4..4dbf4250a5 100644
--- a/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.stitch
+++ b/projects/dogen.generation.cpp/src/types/formatters/odb/class_header_formatter.stitch
@@ -48,8 +48,8 @@ format(const context& ctx, const assets::meta_model::element& e) const {
         const auto sn(o.name().simple());
         const auto qn(a.get_qualified_name(o.name()));
         auto sbf(a.make_scoped_boilerplate_formatter(e));
-        const auto top_level_pragmas(a.get_odb_pragmas());
-        if (top_level_pragmas.empty()) {
+
+        if (!o.orm_properties() || o.orm_properties()->odb_pragmas().empty()) {
 #>
 // class has no ODB pragmas defined.
 
@@ -63,14 +63,18 @@ format(const context& ctx, const assets::meta_model::element& e) const {
 #ifdef ODB_COMPILER
 
 <#+
-                for (const auto& pg : top_level_pragmas)
+                for (const auto& pg : o.orm_properties()->odb_pragmas())
 #>
 #pragma db <#= a.get_odb_type() #>(<#= sn #>) <#= pg #>
 <#+
 
                 bool is_first(true);
                 for (const auto& attr : o.local_attributes()) {
-                    const auto attr_level_pragmas(a.get_odb_pragmas(attr.name().qualified().dot()));
+                    if (!attr.orm_properties() ||
+                        attr.orm_properties()->odb_pragmas().empty())
+                        continue;
+
+                    const auto attr_level_pragmas(attr.orm_properties()->odb_pragmas());
                     for (const auto pg : attr_level_pragmas) {
                         if (is_first)
 #>
