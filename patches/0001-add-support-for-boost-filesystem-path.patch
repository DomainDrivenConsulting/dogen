http://lists.boost.org/Archives/boost/2008/09/142550.php
From ce3d67a111db75c5d21cae92c244404ef12a8d40 Mon Sep 17 00:00:00 2001
From: Marco Craveiro <marco.craveiro@gmail.com>
Date: Sat, 12 Jan 2013 10:54:11 +0000
Subject: [PATCH] add support for boost filesystem path

---
 diagrams/config/config.dia                         |  Bin 0 -> 961 bytes
 .../include/dogen/boost_model/hash/all_hash.hpp    |    1 +
 .../dogen/boost_model/hash/class_f_hash.hpp        |   52 +++++++
 .../include/dogen/boost_model/io/all_io.hpp        |    1 +
 .../include/dogen/boost_model/io/class_f_io.hpp    |   40 ++++++
 .../dogen/boost_model/serialization/all_ser.hpp    |    1 +
 .../boost_model/serialization/class_f_fwd_ser.hpp  |   41 ++++++
 .../boost_model/serialization/class_f_ser.hpp      |   43 ++++++
 .../include/dogen/boost_model/test_data/all_td.hpp |    1 +
 .../dogen/boost_model/test_data/class_f_td.hpp     |   53 ++++++++
 .../include/dogen/boost_model/types/all.hpp        |    1 +
 .../include/dogen/boost_model/types/class_f.hpp    |   85 ++++++++++++
 .../dogen/boost_model/types/class_f_fwd.hpp        |   35 +++++
 projects/boost_model/src/hash/class_f_hash.cpp     |   44 ++++++
 projects/boost_model/src/io/class_f_io.cpp         |   35 +++++
 .../boost_model/src/serialization/class_f_ser.cpp  |   76 +++++++++++
 projects/boost_model/src/test_data/class_f_td.cpp  |   62 +++++++++
 projects/boost_model/src/types/class_f.cpp         |   60 +++++++++
 .../dogen/generator/backends/cpp/boost_types.hpp   |    3 +-
 .../formatters/cpp_generator_implementation.hpp    |    1 +
 .../cpp/view_models/nested_type_view_model.hpp     |   16 ++-
 .../src/backends/cpp/boost_model_helper.cpp        |    8 +-
 .../src/backends/cpp/cpp_inclusion_manager.cpp     |   40 +++---
 .../formatters/cpp_generator_implementation.cpp    |   26 +++-
 .../cpp/view_models/sml_to_cpp_view_model.cpp      |    6 +
 projects/sml/src/types/boost_model_factory.cpp     |    7 +
 .../test_model_sanitizer/spec/boost_model_spec.cpp |    5 +
 test_data/dia_sml/input/boost_model.dia            |  142 +++++++++++++++++++-
 28 files changed, 861 insertions(+), 24 deletions(-)
 create mode 100644 diagrams/config/config.dia
 create mode 100644 projects/boost_model/include/dogen/boost_model/hash/class_f_hash.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/io/class_f_io.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/serialization/class_f_fwd_ser.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/serialization/class_f_ser.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/test_data/class_f_td.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/types/class_f.hpp
 create mode 100644 projects/boost_model/include/dogen/boost_model/types/class_f_fwd.hpp
 create mode 100644 projects/boost_model/src/hash/class_f_hash.cpp
 create mode 100644 projects/boost_model/src/io/class_f_io.cpp
 create mode 100644 projects/boost_model/src/serialization/class_f_ser.cpp
 create mode 100644 projects/boost_model/src/test_data/class_f_td.cpp
 create mode 100644 projects/boost_model/src/types/class_f.cpp

diff --git a/diagrams/config/config.dia b/diagrams/config/config.dia
new file mode 100644
index 0000000000000000000000000000000000000000..b0ac605a934fbf27bda1cc456d3dfeeed55532f5
GIT binary patch
literal 961
zcmV;y13vs8iwFP!000021HD+?lbSFPf4{$i;a+=yUnjQJn_g!+eQ4)ide2ON71M@<
zCQ;9q{_PDPiohWXVrFzCF2CRIX0yA==cl)jXdB=HGdkA?hNWvjJ?3K?%=On_-yUrJ
zX>s@2$LOQ_1RRB$dV`AiX|AuNj6Ry?cDpsmP9Vv+LGaoTVE#jdAX5pM`r=O0jsbim
zQ9PH;A}Kj`*Ag^}LYV6=^8N&zt*Ni4Qkk5`2;<rYk-2`qOonb|FlGVg1a^c1a5<nq
z_0X0YvsoMH2zVJbjF`YmMDC)BNDWT>eI%1f2_-~>#r>D@eX3G6kz>85Xf25h5f3n}
z@+jYs)Dc6&9u9}f8Izekv!>(eVDFR5>D=4Wk=xSo+tOj-M2t(0u&h$Lj1fRIWtDsl
z?RkWUhzhY&W_7S)iKS!>`Y#a?=NOPqA9mZNJ2&9iKfQ4a5;Z7W?8}w&)|0zZ^j%Nr
z8!WI(;63dzl~;q`T?f9rI!X4<U+)+VDOzoL@NJmD<nr<mtg#QGA<T+0HAt&W%xv;{
zS?*lNq*JA0olp?81D?S@=Ve;U7C6f|8uBFG?4OQ&!rb5B$;{Z-pFgw*?JGe-=y?O8
z+7Il{^%tw?sj_VfNhQIGt0I=ilQACH)5(XiF|r54N!bh498yQ)x@8uwj6gIXuxA=Q
zW=tc+^l4xjkG5@pm>T0zYi1x2Iv(S++Av(($b>4%FI7YLxn*V~)hi#59k^D2gO#i&
z8@0nOHBN=L$zybhgEdD|MVSMfGyZNLbqSx4z=6fVT*nG;9z-!?XD+pAL!h#bs53rt
z)w^ojmI+Rk<BNQ?jv@|1IEOz(?^H}R+sS(OMzybNXBt&($J!8`X;OEhEZ%za+?J!L
ze`^vJv{d`l@m8pkNDparY_-GByyU1h85{yMsHV_7RZqKdNE8IcZv3hXl9<p?1T14<
z6~~|hS+UQmIfz>=S7wO`X=W(iB3#BG;Z62y17+%9Nt`9C=KXk1TcQw?-CPeDWg<eJ
zYP^Kp#a)<cqEd*jY|Sz7cKrLA&_)B>E~)VF%!vQu68yLAW{w!yg^Wil?6uOUtWYOq
zytr+Re>STkkjifdEe=cb9mobG_E6%Pjw{q!9s7NCy7?x{SQn~N)ufXaN4ux7;j|39
zl-S1CiP76J7dGqdXp4c@$UC@docBd{9KdI|@^MxiEssV=O{97HP@1<*W<!YzBZ4IK
j)idnzMe#NyJ>};Y3CX3w;;wM3u(<mVQkfhec^Ciyv-sJ^

literal 0
HcmV?d00001

diff --git a/projects/boost_model/include/dogen/boost_model/hash/all_hash.hpp b/projects/boost_model/include/dogen/boost_model/hash/all_hash.hpp
index ec4402a..91c7423 100644
--- a/projects/boost_model/include/dogen/boost_model/hash/all_hash.hpp
+++ b/projects/boost_model/include/dogen/boost_model/hash/all_hash.hpp
@@ -24,4 +24,5 @@
 #include "dogen/boost_model/hash/class_d_hash.hpp"
 #include "dogen/boost_model/hash/class_derived_hash.hpp"
 #include "dogen/boost_model/hash/class_e_hash.hpp"
+#include "dogen/boost_model/hash/class_f_hash.hpp"
 #include "dogen/boost_model/hash/pkg1/class_c_hash.hpp"
diff --git a/projects/boost_model/include/dogen/boost_model/hash/class_f_hash.hpp b/projects/boost_model/include/dogen/boost_model/hash/class_f_hash.hpp
new file mode 100644
index 0000000..799a829
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/hash/class_f_hash.hpp
@@ -0,0 +1,52 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_HASH_CLASS_F_HASH_HPP
+#define DOGEN_BOOST_MODEL_HASH_CLASS_F_HASH_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <functional>
+#include "dogen/boost_model/types/class_f.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+class class_f_hasher {
+public:
+    static std::size_t hash(const class_f& v);
+};
+
+} }
+
+namespace std {
+
+template<>
+class hash<dogen::boost_model::class_f> {
+public:
+    size_t operator()(const dogen::boost_model::class_f& v) const {
+        return dogen::boost_model::class_f_hasher::hash(v);
+    }
+};
+
+}
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/io/all_io.hpp b/projects/boost_model/include/dogen/boost_model/io/all_io.hpp
index 0b81a17..9e68f63 100644
--- a/projects/boost_model/include/dogen/boost_model/io/all_io.hpp
+++ b/projects/boost_model/include/dogen/boost_model/io/all_io.hpp
@@ -24,4 +24,5 @@
 #include "dogen/boost_model/io/class_d_io.hpp"
 #include "dogen/boost_model/io/class_derived_io.hpp"
 #include "dogen/boost_model/io/class_e_io.hpp"
+#include "dogen/boost_model/io/class_f_io.hpp"
 #include "dogen/boost_model/io/pkg1/class_c_io.hpp"
diff --git a/projects/boost_model/include/dogen/boost_model/io/class_f_io.hpp b/projects/boost_model/include/dogen/boost_model/io/class_f_io.hpp
new file mode 100644
index 0000000..878d090
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/io/class_f_io.hpp
@@ -0,0 +1,40 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_IO_CLASS_F_IO_HPP
+#define DOGEN_BOOST_MODEL_IO_CLASS_F_IO_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <iosfwd>
+#include "dogen/boost_model/types/class_f.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+std::ostream&
+operator<<(std::ostream& s,
+     const dogen::boost_model::class_f& v);
+
+} }
+
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/serialization/all_ser.hpp b/projects/boost_model/include/dogen/boost_model/serialization/all_ser.hpp
index 90e418a..faf5a3a 100644
--- a/projects/boost_model/include/dogen/boost_model/serialization/all_ser.hpp
+++ b/projects/boost_model/include/dogen/boost_model/serialization/all_ser.hpp
@@ -24,4 +24,5 @@
 #include "dogen/boost_model/serialization/class_d_ser.hpp"
 #include "dogen/boost_model/serialization/class_derived_ser.hpp"
 #include "dogen/boost_model/serialization/class_e_ser.hpp"
+#include "dogen/boost_model/serialization/class_f_ser.hpp"
 #include "dogen/boost_model/serialization/pkg1/class_c_ser.hpp"
diff --git a/projects/boost_model/include/dogen/boost_model/serialization/class_f_fwd_ser.hpp b/projects/boost_model/include/dogen/boost_model/serialization/class_f_fwd_ser.hpp
new file mode 100644
index 0000000..ee20a8b
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/serialization/class_f_fwd_ser.hpp
@@ -0,0 +1,41 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_SERIALIZATION_CLASS_F_FWD_SER_HPP
+#define DOGEN_BOOST_MODEL_SERIALIZATION_CLASS_F_FWD_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/boost_model/types/class_f_fwd.hpp"
+
+namespace boost {
+namespace serialization {
+
+template<class Archive>
+void save(Archive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+
+template<class Archive>
+void load(Archive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/serialization/class_f_ser.hpp b/projects/boost_model/include/dogen/boost_model/serialization/class_f_ser.hpp
new file mode 100644
index 0000000..501a83b
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/serialization/class_f_ser.hpp
@@ -0,0 +1,43 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_SERIALIZATION_CLASS_F_SER_HPP
+#define DOGEN_BOOST_MODEL_SERIALIZATION_CLASS_F_SER_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <boost/serialization/split_free.hpp>
+#include "dogen/boost_model/types/class_f.hpp"
+
+BOOST_SERIALIZATION_SPLIT_FREE(dogen::boost_model::class_f)
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+
+template<typename Archive>
+void load(Archive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+} }
+
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/test_data/all_td.hpp b/projects/boost_model/include/dogen/boost_model/test_data/all_td.hpp
index 3732f09..3dc7af2 100644
--- a/projects/boost_model/include/dogen/boost_model/test_data/all_td.hpp
+++ b/projects/boost_model/include/dogen/boost_model/test_data/all_td.hpp
@@ -24,4 +24,5 @@
 #include "dogen/boost_model/test_data/class_d_td.hpp"
 #include "dogen/boost_model/test_data/class_derived_td.hpp"
 #include "dogen/boost_model/test_data/class_e_td.hpp"
+#include "dogen/boost_model/test_data/class_f_td.hpp"
 #include "dogen/boost_model/test_data/pkg1/class_c_td.hpp"
diff --git a/projects/boost_model/include/dogen/boost_model/test_data/class_f_td.hpp b/projects/boost_model/include/dogen/boost_model/test_data/class_f_td.hpp
new file mode 100644
index 0000000..c4d44de
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/test_data/class_f_td.hpp
@@ -0,0 +1,53 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_TEST_DATA_CLASS_F_TD_HPP
+#define DOGEN_BOOST_MODEL_TEST_DATA_CLASS_F_TD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include "dogen/boost_model/types/class_f.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+class class_f_generator {
+public:
+    class_f_generator();
+
+public:
+    typedef dogen::boost_model::class_f result_type;
+
+public:
+    static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
+public:
+    static result_type* create_ptr(const unsigned int position);
+};
+
+} }
+
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/types/all.hpp b/projects/boost_model/include/dogen/boost_model/types/all.hpp
index dbd532e..0ec7816 100644
--- a/projects/boost_model/include/dogen/boost_model/types/all.hpp
+++ b/projects/boost_model/include/dogen/boost_model/types/all.hpp
@@ -24,5 +24,6 @@
 #include "dogen/boost_model/types/class_d.hpp"
 #include "dogen/boost_model/types/class_derived.hpp"
 #include "dogen/boost_model/types/class_e.hpp"
+#include "dogen/boost_model/types/class_f.hpp"
 #include "dogen/boost_model/types/pkg1/class_c.hpp"
 #include "dogen/boost_model/types/some_service.hpp"
diff --git a/projects/boost_model/include/dogen/boost_model/types/class_f.hpp b/projects/boost_model/include/dogen/boost_model/types/class_f.hpp
new file mode 100644
index 0000000..5ca4c93
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/types/class_f.hpp
@@ -0,0 +1,85 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_TYPES_CLASS_F_HPP
+#define DOGEN_BOOST_MODEL_TYPES_CLASS_F_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+#include <algorithm>
+#include <boost/filesystem/path.hpp>
+#include "dogen/boost_model/serialization/class_f_fwd_ser.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+class class_f final {
+public:
+    class_f() = default;
+    class_f(const class_f&) = default;
+    class_f(class_f&&) = default;
+    ~class_f() = default;
+
+public:
+    explicit class_f(const boost::filesystem::path& prop_0);
+
+private:
+    template<typename Archive>
+    friend void boost::serialization::save(Archive& ar, const class_f& v, unsigned int version);
+
+    template<typename Archive>
+    friend void boost::serialization::load(Archive& ar, class_f& v, unsigned int version);
+
+public:
+    const boost::filesystem::path& prop_0() const;
+    boost::filesystem::path& prop_0();
+    void prop_0(const boost::filesystem::path& v);
+    void prop_0(const boost::filesystem::path&& v);
+
+public:
+    bool operator==(const class_f& rhs) const;
+    bool operator!=(const class_f& rhs) const {
+        return !this->operator==(rhs);
+    }
+
+public:
+    void swap(class_f& other) noexcept;
+    class_f& operator=(class_f other);
+
+private:
+    boost::filesystem::path prop_0_;
+};
+
+} }
+
+namespace std {
+
+template<>
+inline void swap(
+    dogen::boost_model::class_f& lhs,
+    dogen::boost_model::class_f& rhs) {
+    lhs.swap(rhs);
+}
+
+}
+
+#endif
diff --git a/projects/boost_model/include/dogen/boost_model/types/class_f_fwd.hpp b/projects/boost_model/include/dogen/boost_model/types/class_f_fwd.hpp
new file mode 100644
index 0000000..494eba2
--- /dev/null
+++ b/projects/boost_model/include/dogen/boost_model/types/class_f_fwd.hpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#ifndef DOGEN_BOOST_MODEL_TYPES_CLASS_F_FWD_HPP
+#define DOGEN_BOOST_MODEL_TYPES_CLASS_F_FWD_HPP
+
+#if defined(_MSC_VER) && (_MSC_VER >= 1200)
+#pragma once
+#endif
+
+namespace dogen {
+namespace boost_model {
+
+class class_f;
+
+} }
+
+#endif
diff --git a/projects/boost_model/src/hash/class_f_hash.cpp b/projects/boost_model/src/hash/class_f_hash.cpp
new file mode 100644
index 0000000..9590ec5
--- /dev/null
+++ b/projects/boost_model/src/hash/class_f_hash.cpp
@@ -0,0 +1,44 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/boost_model/hash/class_f_hash.hpp"
+
+namespace {
+
+template <typename HashableType>
+inline void combine(std::size_t& seed, const HashableType& value)
+{
+    std::hash<HashableType> hasher;
+    seed ^= hasher(value) + 0x9e3779b9 + (seed << 6) + (seed >> 2);
+}
+
+}
+
+namespace dogen {
+namespace boost_model {
+
+std::size_t class_f_hasher::hash(const class_f&v) {
+    std::size_t seed(0);
+
+    combine(seed, v.prop_0());
+    return seed;
+}
+
+} }
diff --git a/projects/boost_model/src/io/class_f_io.cpp b/projects/boost_model/src/io/class_f_io.cpp
new file mode 100644
index 0000000..c378bea
--- /dev/null
+++ b/projects/boost_model/src/io/class_f_io.cpp
@@ -0,0 +1,35 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <ostream>
+#include "dogen/boost_model/io/class_f_io.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+std::ostream& operator<<(std::ostream& s, const class_f& v) {
+    s << " { "
+      << "\"__type__\": " << "\"dogen::boost_model::class_f\"" << ", "
+      << "\"prop_0\": " << v.prop_0()
+      << " }";
+    return(s);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/boost_model/src/serialization/class_f_ser.cpp b/projects/boost_model/src/serialization/class_f_ser.cpp
new file mode 100644
index 0000000..ab221c1
--- /dev/null
+++ b/projects/boost_model/src/serialization/class_f_ser.cpp
@@ -0,0 +1,76 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include <boost/archive/binary_iarchive.hpp>
+#include <boost/archive/binary_oarchive.hpp>
+#include <boost/archive/polymorphic_iarchive.hpp>
+#include <boost/archive/polymorphic_oarchive.hpp>
+#include <boost/archive/text_iarchive.hpp>
+#include <boost/archive/text_oarchive.hpp>
+#include <boost/archive/xml_iarchive.hpp>
+#include <boost/archive/xml_oarchive.hpp>
+#include <boost/serialization/nvp.hpp>
+#include "dogen/boost_model/serialization/class_f_ser.hpp"
+
+#ifdef __linux__
+#include "eos/portable_iarchive.hpp"
+#include "eos/portable_oarchive.hpp"
+#endif
+
+namespace boost {
+namespace serialization {
+
+template<typename Archive>
+void save(Archive& ar,
+    const dogen::boost_model::class_f& v,
+    const unsigned int /*version*/) {
+    ar << make_nvp("prop_0", v.prop_0_);
+}
+
+template<typename Archive>
+void load(Archive& ar,
+    dogen::boost_model::class_f& v,
+    const unsigned int /*version*/) {
+    ar >> make_nvp("prop_0", v.prop_0_);
+}
+
+} }
+
+namespace boost {
+namespace serialization {
+
+template void save(archive::polymorphic_oarchive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+template void load(archive::polymorphic_iarchive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+template void save(archive::text_oarchive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+template void load(archive::text_iarchive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+template void save(archive::binary_oarchive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+template void load(archive::binary_iarchive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+template void save(archive::xml_oarchive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+template void load(archive::xml_iarchive& ar, dogen::boost_model::class_f& v, unsigned int version);
+
+#ifdef __linux__
+template void save(eos::portable_oarchive& ar, const dogen::boost_model::class_f& v, unsigned int version);
+template void load(eos::portable_iarchive& ar, dogen::boost_model::class_f& v, unsigned int version);
+#endif
+
+} }
\ No newline at end of file
diff --git a/projects/boost_model/src/test_data/class_f_td.cpp b/projects/boost_model/src/test_data/class_f_td.cpp
new file mode 100644
index 0000000..c2d394c
--- /dev/null
+++ b/projects/boost_model/src/test_data/class_f_td.cpp
@@ -0,0 +1,62 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/boost_model/test_data/class_f_td.hpp"
+
+namespace {
+
+boost::filesystem::path
+create_boost_filesystem_path(const unsigned int position) {
+    std::ostringstream s;
+    s << "/a/path/number_" << position;
+    return boost::filesystem::path(s.str());
+}
+
+}
+
+namespace dogen {
+namespace boost_model {
+
+class_f_generator::class_f_generator() : position_(0) { }
+
+void class_f_generator::
+populate(const unsigned int position, result_type& v) {
+    v.prop_0(create_boost_filesystem_path(position + 0));
+}
+
+class_f_generator::result_type
+class_f_generator::create(const unsigned int position) {
+    class_f r;
+    class_f_generator::populate(position, r);
+    return r;
+}
+class_f_generator::result_type*
+class_f_generator::create_ptr(const unsigned int position) {
+    class_f* p = new class_f();
+    class_f_generator::populate(position, *p);
+    return p;
+}
+
+class_f_generator::result_type
+class_f_generator::operator()() {
+    return create(position_++);
+}
+
+} }
diff --git a/projects/boost_model/src/types/class_f.cpp b/projects/boost_model/src/types/class_f.cpp
new file mode 100644
index 0000000..589910e
--- /dev/null
+++ b/projects/boost_model/src/types/class_f.cpp
@@ -0,0 +1,60 @@
+/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ *
+ * Copyright (C) 2012 Kitanda <info@kitanda.co.uk>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA 02110-1301, USA.
+ *
+ */
+#include "dogen/boost_model/types/class_f.hpp"
+
+namespace dogen {
+namespace boost_model {
+
+class_f::class_f(const boost::filesystem::path& prop_0)
+    : prop_0_(prop_0) { }
+
+void class_f::swap(class_f& other) noexcept {
+    using std::swap;
+    swap(prop_0_, other.prop_0_);
+}
+
+bool class_f::operator==(const class_f& rhs) const {
+    return prop_0_ == rhs.prop_0_;
+}
+
+class_f& class_f::operator=(class_f other) {
+    using std::swap;
+    swap(*this, other);
+    return *this;
+}
+
+const boost::filesystem::path& class_f::prop_0() const {
+    return prop_0_;
+}
+
+boost::filesystem::path& class_f::prop_0() {
+    return prop_0_;
+}
+
+void class_f::prop_0(const boost::filesystem::path& v) {
+    prop_0_ = v;
+}
+
+void class_f::prop_0(const boost::filesystem::path&& v) {
+    prop_0_ = std::move(v);
+}
+
+} }
\ No newline at end of file
diff --git a/projects/generator/include/dogen/generator/backends/cpp/boost_types.hpp b/projects/generator/include/dogen/generator/backends/cpp/boost_types.hpp
index 5849c77..6025226 100644
--- a/projects/generator/include/dogen/generator/backends/cpp/boost_types.hpp
+++ b/projects/generator/include/dogen/generator/backends/cpp/boost_types.hpp
@@ -63,7 +63,8 @@ enum class boost_types : unsigned int {
     string_algorithm, ///< string algorithms
     variant, ///< boost variant
     serialization_variant, ///< variant support
-    apply_visitor ///< Apply visitor
+    apply_visitor, ///< Apply visitor
+    filesystem_path ///< filesystem path
 };
 
 } } } }
diff --git a/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_generator_implementation.hpp b/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_generator_implementation.hpp
index 692be90..7e1ee81 100644
--- a/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_generator_implementation.hpp
+++ b/projects/generator/include/dogen/generator/backends/cpp/formatters/cpp_generator_implementation.hpp
@@ -68,6 +68,7 @@ private:
     void smart_pointer_helper(const nested_type_view_model& vm);
     void optional_helper(const nested_type_view_model& vm);
     void variant_helper(const nested_type_view_model& vm);
+    void filesystem_path_helper(const nested_type_view_model& vm);
 
     void composite_domain_type_helper(const std::string& identifiable_type_name,
         const std::string& type_name, bool as_pointer);
diff --git a/projects/generator/include/dogen/generator/backends/cpp/view_models/nested_type_view_model.hpp b/projects/generator/include/dogen/generator/backends/cpp/view_models/nested_type_view_model.hpp
index 836110f..68f57aa 100644
--- a/projects/generator/include/dogen/generator/backends/cpp/view_models/nested_type_view_model.hpp
+++ b/projects/generator/include/dogen/generator/backends/cpp/view_models/nested_type_view_model.hpp
@@ -46,13 +46,14 @@ public:
                                is_char_like_(false), is_int_like_(false),
                                is_sequence_container_(false),
                                is_associative_container_(false),
-                               is_smart_pointer_(false) {}
+                               is_smart_pointer_(false),
+                               is_filesystem_path_(false) {}
 
     explicit nested_type_view_model(const std::string& name)
         : name_(name), is_primitive_(false), is_string_like_(false),
           is_char_like_(false), is_int_like_(false),
           is_sequence_container_(false), is_associative_container_(false),
-          is_smart_pointer_(false) {}
+          is_smart_pointer_(false), is_filesystem_path_(false) {}
 
 public:
     /**
@@ -197,6 +198,16 @@ public:
     }
     /**@}*/
 
+    /**
+     * @brief If true, type is boost filesystem path
+     */
+    /**@{*/
+    bool is_filesystem_path() const { return is_filesystem_path_; }
+    void is_filesystem_path(const bool value) {
+        is_filesystem_path_ = value;
+    }
+    /**@}*/
+
 private:
     std::string name_;
     std::string identifiable_name_;
@@ -214,6 +225,7 @@ private:
     bool is_variant_like_;
     std::list<nested_type_view_model> children_;
     std::list<std::string> namespaces_;
+    bool is_filesystem_path_;
 };
 
 } } } } }
diff --git a/projects/generator/src/backends/cpp/boost_model_helper.cpp b/projects/generator/src/backends/cpp/boost_model_helper.cpp
index cd83758..e187203 100644
--- a/projects/generator/src/backends/cpp/boost_model_helper.cpp
+++ b/projects/generator/src/backends/cpp/boost_model_helper.cpp
@@ -34,6 +34,7 @@ const std::string model("boost");
 const std::string shared_ptr_type("shared_ptr");
 const std::string optional_type("optional");
 const std::string variant_type("variant");
+const std::string filesystem_path_type("path");
 
 const std::string optional_include("boost/optional.hpp");
 const std::string variant_include("boost/variant.hpp");
@@ -71,6 +72,7 @@ const std::string exception_info_include("boost/exception/info.hpp");
 const std::string state_saver_include("boost/io/ios_state.hpp");
 const std::string string_algorithm_include("boost/algorithm/string.hpp");
 const std::string apply_visitor_include("boost/variant/apply_visitor.hpp");
+const std::string filesystem_path_include("boost/filesystem/path.hpp");
 const std::string error_message("Invalid or unexpected boost type");
 
 }
@@ -89,6 +91,7 @@ std::string boost_model_helper::type(const boost_types t) const {
     case boost_types::shared_ptr: return shared_ptr_type;
     case boost_types::optional: return optional_type;
     case boost_types::variant: return variant_type;
+    case boost_types::filesystem_path: return filesystem_path_type;
     default: break;
     }
     BOOST_LOG_SEV(lg, error) << error_message;
@@ -139,10 +142,13 @@ std::string boost_model_helper::include(const boost_types type) const {
     case boost_types::serialization_variant:
         return serialization_variant_include;
     case boost_types::apply_visitor: return apply_visitor_include;
+    case boost_types::filesystem_path: return filesystem_path_include;
     default: break;
     }
+
     BOOST_LOG_SEV(lg, error) << error_message;
-    BOOST_THROW_EXCEPTION(utility::exception::invalid_enum_value(error_message));
+    BOOST_THROW_EXCEPTION(
+        utility::exception::invalid_enum_value(error_message));
 }
 
 } } } }
diff --git a/projects/generator/src/backends/cpp/cpp_inclusion_manager.cpp b/projects/generator/src/backends/cpp/cpp_inclusion_manager.cpp
index e494377..732d232 100644
--- a/projects/generator/src/backends/cpp/cpp_inclusion_manager.cpp
+++ b/projects/generator/src/backends/cpp/cpp_inclusion_manager.cpp
@@ -199,12 +199,14 @@ void cpp_inclusion_manager::append_boost_dependencies(
     const dogen::sml::qname& qname,
     inclusion_lists& il) const {
 
+    const std::string type_name(qname.type_name());
+
     /*
      * boost::shared_ptr
      */
     const bool is_header(flt == cpp_file_types::header);
     const bool is_domain(ft == cpp_facet_types::types);
-    const bool is_sp(qname.type_name() == boost_.type(boost_types::shared_ptr));
+    const bool is_sp(type_name == boost_.type(boost_types::shared_ptr));
     if (is_header && is_domain && is_sp)
         il.system.push_back(boost_.include(boost_types::shared_ptr));
 
@@ -217,7 +219,7 @@ void cpp_inclusion_manager::append_boost_dependencies(
     /*
      * boost::optional
      */
-    const bool is_opt(qname.type_name() == boost_.type(boost_types::optional));
+    const bool is_opt(type_name == boost_.type(boost_types::optional));
     if (is_header && is_domain && is_opt)
         il.system.push_back(boost_.include(boost_types::optional));
 
@@ -228,13 +230,19 @@ void cpp_inclusion_manager::append_boost_dependencies(
     /*
      * boost::variant
      */
-    const bool is_variant(
-        qname.type_name() == boost_.type(boost_types::variant));
+    const bool is_variant(type_name == boost_.type(boost_types::variant));
     if (is_header && is_domain && is_variant)
         il.system.push_back(boost_.include(boost_types::variant));
 
     if (is_implementation && is_serialization && is_variant)
         il.system.push_back(boost_.include(boost_types::serialization_variant));
+
+    /*
+     * boost::filesystem::path
+     */
+    const bool is_path(type_name == boost_.type(boost_types::filesystem_path));
+    if (is_header && is_domain && is_path)
+        il.system.push_back(boost_.include(boost_types::filesystem_path));
 }
 
 void cpp_inclusion_manager::append_std_dependencies(
@@ -242,29 +250,31 @@ void cpp_inclusion_manager::append_std_dependencies(
     const dogen::sml::qname& qname,
     inclusion_lists& il) const {
 
+    const std::string type_name(qname.type_name());
+
     /*
      * std::string
      */
     const bool is_header(flt == cpp_file_types::header);
     const bool is_domain(ft == cpp_facet_types::types);
-    if (is_header && is_domain
-        && qname.type_name() == std_.type(std_types::string))
+    const bool is_string(type_name == std_.type(std_types::string));
+    if (is_header && is_domain && is_string)
         il.system.push_back(std_.include(std_types::string));
 
     const bool is_serialization(ft == cpp_facet_types::serialization);
     const bool is_implementation(flt == cpp_file_types::implementation);
-    const bool is_string(qname.type_name() == std_.type(std_types::string));
     if (is_implementation && is_serialization && is_string)
         il.system.push_back(boost_.include(boost_types::string));
 
     const bool is_test_data(ft == cpp_facet_types::test_data);
-    if (is_implementation && is_test_data && is_string)
+    const bool is_path(type_name == boost_.type(boost_types::filesystem_path));
+    if (is_implementation && is_test_data && (is_string || is_path))
         il.system.push_back(std_.include(std_types::sstream));
 
     /*
      * std::vector
      */
-    const bool is_vector(qname.type_name() == std_.type(std_types::vector));
+    const bool is_vector(type_name == std_.type(std_types::vector));
     if (is_header && is_domain && is_vector)
         il.system.push_back(std_.include(std_types::vector));
 
@@ -274,7 +284,7 @@ void cpp_inclusion_manager::append_std_dependencies(
     /*
      * std::list
      */
-    const bool is_list(qname.type_name() == std_.type(std_types::list));
+    const bool is_list(type_name == std_.type(std_types::list));
     if (is_header && is_domain && is_list)
         il.system.push_back(std_.include(std_types::list));
 
@@ -284,7 +294,7 @@ void cpp_inclusion_manager::append_std_dependencies(
     /*
      * std::deque
      */
-    const bool is_deque(qname.type_name() == std_.type(std_types::deque));
+    const bool is_deque(type_name == std_.type(std_types::deque));
     if (is_header && is_domain && is_deque)
         il.system.push_back(std_.include(std_types::deque));
 
@@ -294,7 +304,7 @@ void cpp_inclusion_manager::append_std_dependencies(
     /*
      * std::set
      */
-    const bool is_set(qname.type_name() == std_.type(std_types::set));
+    const bool is_set(type_name == std_.type(std_types::set));
     if (is_header && is_domain && is_set)
         il.system.push_back(std_.include(std_types::set));
 
@@ -317,7 +327,7 @@ void cpp_inclusion_manager::append_std_dependencies(
     /*
      * std::unordered_map
      */
-    const bool is_umap(qname.type_name() == std_.type(std_types::unordered_map));
+    const bool is_umap(type_name == std_.type(std_types::unordered_map));
     if (is_header && is_domain && is_umap)
         il.system.push_back(std_.include(std_types::unordered_map));
     lambda(std_.type(std_types::unordered_map));
@@ -325,7 +335,7 @@ void cpp_inclusion_manager::append_std_dependencies(
     /*
      * std::unordered_set
      */
-    const bool is_uset(qname.type_name() == std_.type(std_types::unordered_set));
+    const bool is_uset(type_name == std_.type(std_types::unordered_set));
     if (is_header && is_domain && is_uset)
         il.system.push_back(std_.include(std_types::unordered_set));
     lambda(std_.type(std_types::unordered_set));
@@ -334,7 +344,7 @@ void cpp_inclusion_manager::append_std_dependencies(
      * primitives
      */
     if (is_header && is_domain && std_.is_primitive(qname.type_name())) {
-        const auto t(std_.string_to_type(qname.type_name()));
+        const auto t(std_.string_to_type(type_name));
         il.system.push_back(std_.include(t));
     }
 }
diff --git a/projects/generator/src/backends/cpp/formatters/cpp_generator_implementation.cpp b/projects/generator/src/backends/cpp/formatters/cpp_generator_implementation.cpp
index 39dfe86..45eea66 100644
--- a/projects/generator/src/backends/cpp/formatters/cpp_generator_implementation.cpp
+++ b/projects/generator/src/backends/cpp/formatters/cpp_generator_implementation.cpp
@@ -21,6 +21,7 @@
 #include <ostream>
 #include <boost/throw_exception.hpp>
 #include <boost/algorithm/string/predicate.hpp>
+#include "dogen/utility/log/logger.hpp"
 #include "dogen/generator/generation_failure.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_licence.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_header_guards.hpp"
@@ -30,7 +31,6 @@
 #include "dogen/generator/backends/cpp/formatters/cpp_qualified_name.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_indenter.hpp"
 #include "dogen/generator/backends/cpp/formatters/cpp_generator_implementation.hpp"
-#include "dogen/utility/log/logger.hpp"
 
 using namespace dogen::utility::log;
 
@@ -247,6 +247,28 @@ optional_helper(const nested_type_view_model& vm) {
 }
 
 void generator_implementation::
+filesystem_path_helper(const nested_type_view_model& vm) {
+    const auto type_name(vm.identifiable_name());
+    const auto identifiable_type_name(vm.complete_identifiable_name());
+
+    stream_ << indenter_ << vm.name() << std::endl
+            << "create_" << identifiable_type_name
+            << "(const unsigned int position) ";
+
+    utility_.open_scope();
+    {
+        cpp_positive_indenter_scope s(indenter_);
+        stream_ << indenter_ << "std::ostringstream s;" << std::endl
+                << indenter_ << "s << " << utility_.quote("/a/path/number_")
+                << " << position;" << std::endl;
+        stream_ << indenter_ << "return " << vm.name() << "(s.str());"
+                << std::endl;
+    }
+    utility_.close_scope();
+    utility_.blank_line();
+}
+
+void generator_implementation::
 variant_helper(const nested_type_view_model& vm) {
     const auto container_identifiable_type_name(
         vm.complete_identifiable_name());
@@ -448,6 +470,8 @@ recursive_helper_method_creator(const std::string& owner_name,
         optional_helper(vm);
     else if (vm.is_variant_like())
         variant_helper(vm);
+    else if (vm.is_filesystem_path())
+        filesystem_path_helper(vm);
     else {
         if (vm.name() == string_type) {
             string_helper();
diff --git a/projects/generator/src/backends/cpp/view_models/sml_to_cpp_view_model.cpp b/projects/generator/src/backends/cpp/view_models/sml_to_cpp_view_model.cpp
index d376b00..97a488b 100644
--- a/projects/generator/src/backends/cpp/view_models/sml_to_cpp_view_model.cpp
+++ b/projects/generator/src/backends/cpp/view_models/sml_to_cpp_view_model.cpp
@@ -90,6 +90,7 @@ const std::string double_type("double");
 const std::string float_type("float");
 const std::string optional_type("boost::optional");
 const std::string variant_type("boost::variant");
+const std::string filesystem_path_type("boost::filesystem::path");
 
 const std::string int8_t_type("std::int8_t");
 const std::string int16_t_type("std::int16_t");
@@ -114,6 +115,10 @@ bool is_optional_like(const std::string& type_name) {
     return type_name == optional_type;
 }
 
+bool is_filesystem_path(const std::string& type_name) {
+    return type_name == filesystem_path_type;
+}
+
 bool is_variant_like(const std::string& type_name) {
     return type_name == variant_type;
 }
@@ -272,6 +277,7 @@ void sml_dfs_visitor::transform_nested_qualified_name(
     vm.is_string_like(is_string_like(vm.name()));
     vm.is_optional_like(is_optional_like(vm.name()));
     vm.is_variant_like(is_variant_like(vm.name()));
+    vm.is_filesystem_path(is_filesystem_path(vm.name()));
 
     if (qn.meta_type() == meta_types::pod) {
         const auto i(state_->pods_.find(qn));
diff --git a/projects/sml/src/types/boost_model_factory.cpp b/projects/sml/src/types/boost_model_factory.cpp
index cf95212..de4effe 100644
--- a/projects/sml/src/types/boost_model_factory.cpp
+++ b/projects/sml/src/types/boost_model_factory.cpp
@@ -27,8 +27,10 @@ const std::string weak_ptr_name("weak_ptr");
 const std::string scoped_ptr_name("scoped_ptr");
 const std::string optional_name("optional");
 const std::string variant_name("variant");
+const std::string path_name("path");
 
 const std::string asio_name("asio");
+const std::string filesystem_name("filesystem");
 const std::string io_service_name("io_service");
 const std::string ip_name("ip");
 const std::string tcp_name("tcp");
@@ -123,6 +125,11 @@ model boost_model_factory::create() {
     pi(socket_name, pod_types::value, package_path);
     pi(acceptor_name, pod_types::value, package_path);
 
+    package_path.clear();
+    gamma(filesystem_name, package_path);
+    package_path.push_back(filesystem_name);
+    pi(path_name, pod_types::value, package_path);
+
     model r;
     r.name(model_name);
     r.primitives(primitives);
diff --git a/projects/test_model_sanitizer/spec/boost_model_spec.cpp b/projects/test_model_sanitizer/spec/boost_model_spec.cpp
index a245488..5b21776 100644
--- a/projects/test_model_sanitizer/spec/boost_model_spec.cpp
+++ b/projects/test_model_sanitizer/spec/boost_model_spec.cpp
@@ -47,6 +47,7 @@ BOOST_AUTO_TEST_CASE(validate_equality) {
     test_equality<class_b_generator>();
     test_equality<class_d_generator>();
     test_equality<class_e_generator>();
+    test_equality<class_f_generator>();
 }
 
 BOOST_AUTO_TEST_CASE(validate_serialisation) {
@@ -54,6 +55,7 @@ BOOST_AUTO_TEST_CASE(validate_serialisation) {
     rountrip_type<class_b_generator>();
     rountrip_type<class_d_generator>();
     rountrip_type<class_e_generator>();
+    rountrip_type<class_f_generator>();
 }
 
 BOOST_AUTO_TEST_CASE(validate_hashing) {
@@ -61,6 +63,7 @@ BOOST_AUTO_TEST_CASE(validate_hashing) {
     test_hashing<class_b_generator>();
     test_hashing<class_d_generator>();
     test_hashing<class_e_generator>();
+    test_hashing<class_f_generator>();
 }
 
 BOOST_AUTO_TEST_CASE(validate_swap) {
@@ -68,6 +71,7 @@ BOOST_AUTO_TEST_CASE(validate_swap) {
     test_swap<class_b_generator>();
     test_swap<class_d_generator>();
     test_swap<class_e_generator>();
+    test_swap<class_f_generator>();
 }
 
 BOOST_AUTO_TEST_CASE(validate_io) {
@@ -75,6 +79,7 @@ BOOST_AUTO_TEST_CASE(validate_io) {
     test_io<class_b_generator>();
     test_io<class_d_generator>();
     test_io<class_e_generator>();
+    test_io<class_f_generator>();
 }
 
 BOOST_AUTO_TEST_SUITE_END()
diff --git a/test_data/dia_sml/input/boost_model.dia b/test_data/dia_sml/input/boost_model.dia
index f02f21e..81688bc 100644
--- a/test_data/dia_sml/input/boost_model.dia
+++ b/test_data/dia_sml/input/boost_model.dia
@@ -346,7 +346,7 @@
         <dia:point val="29.0625,4"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="8.5849999999999991"/>
+        <dia:real val="8.5850000000000009"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="2.7999999999999998"/>
@@ -518,7 +518,7 @@
         <dia:point val="54.6812,7.84375"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="11.665000000000001"/>
+        <dia:real val="11.664999999999999"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="3.6000000000000001"/>
@@ -676,7 +676,7 @@
         <dia:point val="19.9375,23.3125"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="5.2700000000000005"/>
+        <dia:real val="5.2699999999999996"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="2.7999999999999998"/>
@@ -1368,7 +1368,7 @@
         <dia:point val="41.9188,38.2715"/>
       </dia:attribute>
       <dia:attribute name="elem_width">
-        <dia:real val="24.369999999999997"/>
+        <dia:real val="24.370000000000001"/>
       </dia:attribute>
       <dia:attribute name="elem_height">
         <dia:real val="4.4000000000000004"/>
@@ -1537,5 +1537,139 @@
       </dia:attribute>
       <dia:attribute name="templates"/>
     </dia:object>
+    <dia:object type="UML - Class" version="0" id="O10">
+      <dia:attribute name="obj_pos">
+        <dia:point val="12.2313,48.8031"/>
+      </dia:attribute>
+      <dia:attribute name="obj_bb">
+        <dia:rectangle val="12.1813,48.7531;25.1013,51.6531"/>
+      </dia:attribute>
+      <dia:attribute name="elem_corner">
+        <dia:point val="12.2313,48.8031"/>
+      </dia:attribute>
+      <dia:attribute name="elem_width">
+        <dia:real val="12.82"/>
+      </dia:attribute>
+      <dia:attribute name="elem_height">
+        <dia:real val="2.7999999999999998"/>
+      </dia:attribute>
+      <dia:attribute name="name">
+        <dia:string>#class_f#</dia:string>
+      </dia:attribute>
+      <dia:attribute name="stereotype">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="comment">
+        <dia:string>##</dia:string>
+      </dia:attribute>
+      <dia:attribute name="abstract">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_attributes">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="suppress_operations">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="visible_attributes">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="visible_comments">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_operations">
+        <dia:boolean val="true"/>
+      </dia:attribute>
+      <dia:attribute name="wrap_after_char">
+        <dia:int val="40"/>
+      </dia:attribute>
+      <dia:attribute name="comment_line_length">
+        <dia:int val="17"/>
+      </dia:attribute>
+      <dia:attribute name="comment_tagging">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="line_width">
+        <dia:real val="0.10000000000000001"/>
+      </dia:attribute>
+      <dia:attribute name="line_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="fill_color">
+        <dia:color val="#ffffff"/>
+      </dia:attribute>
+      <dia:attribute name="text_color">
+        <dia:color val="#000000"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font">
+        <dia:font family="monospace" style="0" name="Courier"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font">
+        <dia:font family="monospace" style="88" name="Courier-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font">
+        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font">
+        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font">
+        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font">
+        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
+      </dia:attribute>
+      <dia:attribute name="normal_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="polymorphic_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_font_height">
+        <dia:real val="0.80000000000000004"/>
+      </dia:attribute>
+      <dia:attribute name="classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="abstract_classname_font_height">
+        <dia:real val="1"/>
+      </dia:attribute>
+      <dia:attribute name="comment_font_height">
+        <dia:real val="0.69999999999999996"/>
+      </dia:attribute>
+      <dia:attribute name="attributes">
+        <dia:composite type="umlattribute">
+          <dia:attribute name="name">
+            <dia:string>#prop_0#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="type">
+            <dia:string>#boost::filesystem::path#</dia:string>
+          </dia:attribute>
+          <dia:attribute name="value">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="comment">
+            <dia:string>##</dia:string>
+          </dia:attribute>
+          <dia:attribute name="visibility">
+            <dia:enum val="0"/>
+          </dia:attribute>
+          <dia:attribute name="abstract">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+          <dia:attribute name="class_scope">
+            <dia:boolean val="false"/>
+          </dia:attribute>
+        </dia:composite>
+      </dia:attribute>
+      <dia:attribute name="operations"/>
+      <dia:attribute name="template">
+        <dia:boolean val="false"/>
+      </dia:attribute>
+      <dia:attribute name="templates"/>
+    </dia:object>
   </dia:layer>
 </dia:diagram>
-- 
1.7.9.5

