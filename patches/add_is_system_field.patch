diff --git a/data/library/cpp.boost.json b/data/library/cpp.boost.json
index dd2466b..481180f 100644
--- a/data/library/cpp.boost.json
+++ b/data/library/cpp.boost.json
@@ -9,8 +9,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "boost/shared_ptr.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/shared_ptr.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/shared_ptr.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -21,8 +21,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "boost/weak_ptr.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/weak_ptr.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/weak_ptr.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -33,8 +33,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "boost/scoped_ptr.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/scoped_ptr.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/scoped_ptr.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -45,8 +45,8 @@
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
                 "cpp.type.requires_manual_move_constructor" : true,
-                "cpp.types.header_file.file_name" : "boost/optional.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/optional.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/optional.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -56,8 +56,8 @@
             "simple_name" : "variant",
             "extensions" : {
                 "cpp.type.requires_manual_move_constructor" : true,
-                "cpp.types.header_file.file_name" : "boost/variant.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/variant.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/variant.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -69,7 +69,7 @@
                 "asio"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/asio/io_service.hpp",
+                "cpp.types.class_header_formatter.file_name" : "boost/asio/io_service.hpp",
                 "cpp.hash.standard.status" : "unsupported",
                 "cpp.test_data.status" : "unsupported",
                 "cpp.serialization.boost.status" : "unsupported"
@@ -82,7 +82,7 @@
                 "asio", "ip", "tcp"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/asio/ip/tcp.hpp",
+                "cpp.types.class_header_formatter.file_name" : "boost/asio/ip/tcp.hpp",
                 "cpp.hash.standard.status" : "unsupported",
                 "cpp.test_data.status" : "unsupported",
                 "cpp.serialization.boost.status" : "unsupported"
@@ -95,7 +95,7 @@
                 "asio", "ip", "tcp"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/asio/ip/tcp.hpp",
+                "cpp.types.class_header_formatter.file_name" : "boost/asio/ip/tcp.hpp",
                 "cpp.hash.standard.status" : "unsupported",
                 "cpp.test_data.status" : "unsupported",
                 "cpp.serialization.boost.status" : "unsupported"
@@ -109,8 +109,8 @@
             ],
             "extensions" : {
                 "cpp.type.requires_manual_move_constructor" : true,
-                "cpp.types.header_file.file_name" : "boost/filesystem/path.hpp",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "boost/filesystem/path.hpp",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -120,8 +120,8 @@
                 "gregorian"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/date_time/gregorian/gregorian_types.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/date_time/gregorian/gregorian_types.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.io.header_file.file_name" : "boost/date_time/gregorian/gregorian.hpp",
                 "cpp.io.header_file.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/date_time/gregorian/greg_serialize.hpp",
@@ -135,8 +135,8 @@
                 "posix_time"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/date_time/posix_time/posix_time_types.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/date_time/posix_time/posix_time_types.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/date_time/posix_time/time_serialize.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true,
                 "cpp.io.header_file.file_name" : "boost/date_time/posix_time/posix_time.hpp",
@@ -150,8 +150,8 @@
                 "posix_time"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/date_time/posix_time/posix_time_types.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/date_time/posix_time/posix_time_types.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/date_time/posix_time/time_serialize.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true,
                 "cpp.io.header_file.file_name" : "boost/date_time/posix_time/posix_time.hpp",
@@ -165,8 +165,8 @@
                 "property_tree"
             ],
             "extensions" : {
-                "cpp.types.header_file.file_name" : "boost/property_tree/ptree.hpp",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "boost/property_tree/ptree.hpp",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/property_tree/ptree_serialization.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true,
                 "cpp.io.header_file.file_name" : "boost/property_tree/json_parser.hpp",
diff --git a/data/library/cpp.std.json b/data/library/cpp.std.json
index f751120..d334b7a 100644
--- a/data/library/cpp.std.json
+++ b/data/library/cpp.std.json
@@ -10,8 +10,8 @@
             "extensions" : {
                 "cpp.type.family" : "integer",
                 "cpp.type.requires_manual_default_constructor" : true,
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -21,8 +21,8 @@
             "extensions" : {
                 "cpp.type.family" : "integer",
                 "cpp.type.requires_manual_default_constructor" : true,
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -31,8 +31,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -42,8 +42,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -53,8 +53,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -64,8 +64,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -75,8 +75,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -86,8 +86,8 @@
             "default_value" : "0",
             "extensions" : {
                 "cpp.type.family" : "integer",
-                "cpp.types.header_file.file_name" : "cstdint",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "cstdint",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.type.requires_manual_default_constructor" : true
             }
         },
@@ -96,8 +96,8 @@
             "simple_name" : "string",
             "extensions" : {
                 "cpp.type.family" : "string",
-                "cpp.types.header_file.file_name" : "string",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "string",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/string.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -108,8 +108,8 @@
             "object_type" : "sequence_container",
             "extensions" : {
                 "cpp.type.family" : "sequence_container",
-                "cpp.types.header_file.file_name" : "vector",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "vector",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file.file_name" : "boost/serialization/vector.hpp",
                 "cpp.serialization.boost.header_file.is_system" : true
             }
@@ -120,8 +120,8 @@
             "object_type" : "sequence_container",
             "extensions" : {
                 "cpp.type.family" : "sequence_container",
-                "cpp.types.header_file.file_name" : "deque",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "deque",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/deque.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -132,8 +132,8 @@
             "object_type" : "sequence_container",
             "extensions" : {
                 "cpp.type.family" : "sequence_container",
-                "cpp.types.header_file.file_name" : "array",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "array",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -142,8 +142,8 @@
             "object_type" : "sequence_container",
             "extensions" : {
                 "cpp.type.family" : "sequence_container",
-                "cpp.types.header_file.file_name" : "list",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "list",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/list.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -154,8 +154,8 @@
             "object_type" : "sequence_container",
             "extensions" : {
                 "cpp.type.family" : "sequence_container",
-                "cpp.types.header_file.file_name" : "forward_list",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "forward_list",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -164,8 +164,8 @@
             "object_type" : "ordered_container",
             "extensions" : {
                 "cpp.type.family" : "ordered_container",
-                "cpp.types.header_file.file_name" : "set",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "set",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/set.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -176,8 +176,8 @@
             "object_type" : "ordered_container",
             "extensions" : {
                 "cpp.type.family" : "ordered_container",
-                "cpp.types.header_file.file_name" : "multiset",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "multiset",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/multiset.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -188,8 +188,8 @@
             "object_type" : "hash_container",
             "extensions" : {
                 "cpp.type.family" : "hash_container",
-                "cpp.types.header_file.file_name" : "unordered_set",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "unordered_set",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
@@ -198,7 +198,7 @@
             "object_type" : "ordered_container",
             "extensions" : {
                 "cpp.type.family" : "ordered_container",
-                "cpp.types.header_file.file_name" : "map",
+                "cpp.types.class_header_formatter.file_name" : "map",
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/map.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -209,8 +209,8 @@
             "object_type" : "ordered_container",
             "extensions" : {
                 "cpp.type.family" : "ordered_container",
-                "cpp.types.header_file.file_name" : "multimap",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "multimap",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/multimap.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -221,16 +221,16 @@
             "object_type" : "hash_container",
             "extensions" : {
                 "cpp.type.family" : "hash_container",
-                "cpp.types.header_file.file_name" : "unordered_map",
-                "cpp.types.header_file.is_system" : true
+                "cpp.types.class_header_formatter.file_name" : "unordered_map",
+                "cpp.types.class_header_formatter.is_system" : true
             }
         },
         {
             "meta_type" : "object",
             "simple_name" : "pair",
             "extensions" : {
-                "cpp.types.header_file.file_name" : "pair",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "pair",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.header_file_file.file_name" : "boost/serialization/pair.hpp",
                 "cpp.serialization.boost.header_file_file.is_system" : true
             }
@@ -241,8 +241,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "memory",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "memory",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.status" : "unsupported"
             }
         },
@@ -252,8 +252,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "memory",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "memory",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.status" : "unsupported"
             }
         },
@@ -263,8 +263,8 @@
             "object_type" : "smart_pointer",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "memory",
-                "cpp.types.header_file.is_system" : true,
+                "cpp.types.class_header_formatter.file_name" : "memory",
+                "cpp.types.class_header_formatter.is_system" : true,
                 "cpp.serialization.boost.status" : "unsupported"
             }
         },
@@ -272,7 +272,7 @@
             "meta_type" : "object",
             "simple_name" : "function",
             "extensions" : {
-                "cpp.types.header_file.file_name" : "functional",
+                "cpp.types.class_header_formatter.file_name" : "functional",
                 "cpp.hash.standard.status" : "unsupported",
                 "cpp.test_data.status" : "unsupported",
                 "cpp.serialization.boost.status" : "unsupported"
@@ -283,7 +283,7 @@
             "simple_name" : "optional",
             "extensions" : {
                 "cpp.type.family" : "smart_pointer",
-                "cpp.types.header_file.file_name" : "functional",
+                "cpp.types.class_header_formatter.file_name" : "functional",
                 "cpp.serialization.boost.status" : "unsupported"
             }
         },
@@ -291,7 +291,7 @@
             "meta_type" : "object",
             "simple_name" : "ostream",
             "extensions" : {
-                "cpp.types.header_file.file_name" : "ostream",
+                "cpp.types.class_header_formatter.file_name" : "ostream",
                 "cpp.serialization.boost.status" : "unsupported"
             }
         }
diff --git a/doc/agile/sprint_backlog_60.org b/doc/agile/sprint_backlog_60.org
index 7e8f677..ff88a9f 100644
--- a/doc/agile/sprint_backlog_60.org
+++ b/doc/agile/sprint_backlog_60.org
@@ -274,6 +274,7 @@ expected to be initialised once and reused for the life time of the
 run, this is probably not needed just yet.
 
 *** STARTED Remove optionality from =obtain_field_definition=         :story:
+    CLOCK: [2015-01-28 Wed 18:09]--[2015-01-28 Wed 18:32] =>  0:23
     CLOCK: [2015-01-28 Wed 08:23]--[2015-01-28 Wed 08:27] =>  0:04
     CLOCK: [2015-01-27 Tue 23:42]--[2015-01-27 Tue 23:46] =>  0:04
 
@@ -281,6 +282,18 @@ In order to progress in stages we made fields optional in dynamic
 workflow; if a definition is not found we skip it. We need to remove
 this once all field definitions have been added.
 
+Missing fields:
+
+- cpp.type.family
+- cpp.type.requires_manual_default_constructor
+- cpp.serialization.boost.header_file.is_system
+
+Notes:
+
+- need more context when a field has an invalid field definition or
+  when the scope is invalid, e.g. which field are we currently
+  processing.
+
 *** Dynamic workflow is recreated for every model                     :story:
 
 We should create the dynamic workflow once and pass it to the dia to
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/hash/field_definitions.hpp b/projects/cpp/include/dogen/cpp/types/formatters/hash/field_definitions.hpp
index 269a8ed..78f7184 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/hash/field_definitions.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/hash/field_definitions.hpp
@@ -77,6 +77,12 @@ struct field_definitions {
          * @brief File name override to apply.
          */
         static const dynamic::field_definition& file_name();
+
+        /**
+         * @brief If true, the overridden file name is in system
+         * includes.
+         */
+        static const dynamic::field_definition& is_system();
     };
 
     /**
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/io/field_definitions.hpp b/projects/cpp/include/dogen/cpp/types/formatters/io/field_definitions.hpp
index c9b3a6e..66cf8d0 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/io/field_definitions.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/io/field_definitions.hpp
@@ -77,6 +77,12 @@ struct field_definitions {
          * @brief File name override to apply.
          */
         static const dynamic::field_definition& file_name();
+
+        /**
+         * @brief If true, the overridden file name is in system
+         * includes.
+         */
+        static const dynamic::field_definition& is_system();
     };
 
     /**
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/serialization/field_definitions.hpp b/projects/cpp/include/dogen/cpp/types/formatters/serialization/field_definitions.hpp
index f455406..f2395af 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/serialization/field_definitions.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/serialization/field_definitions.hpp
@@ -77,6 +77,12 @@ struct field_definitions {
          * @brief File name override to apply.
          */
         static const dynamic::field_definition& file_name();
+
+        /**
+         * @brief If true, the overridden file name is in system
+         * includes.
+         */
+        static const dynamic::field_definition& is_system();
     };
 
     /**
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/test_data/field_definitions.hpp b/projects/cpp/include/dogen/cpp/types/formatters/test_data/field_definitions.hpp
index ffab50e..d6bf538 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/test_data/field_definitions.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/test_data/field_definitions.hpp
@@ -77,6 +77,12 @@ struct field_definitions {
          * @brief File name override to apply.
          */
         static const dynamic::field_definition& file_name();
+
+        /**
+         * @brief If true, the overridden file name is in system
+         * includes.
+         */
+        static const dynamic::field_definition& is_system();
     };
 
     /**
diff --git a/projects/cpp/include/dogen/cpp/types/formatters/types/field_definitions.hpp b/projects/cpp/include/dogen/cpp/types/formatters/types/field_definitions.hpp
index bca5145..fc27687 100644
--- a/projects/cpp/include/dogen/cpp/types/formatters/types/field_definitions.hpp
+++ b/projects/cpp/include/dogen/cpp/types/formatters/types/field_definitions.hpp
@@ -77,6 +77,12 @@ struct field_definitions {
          * @brief File name override to apply.
          */
         static const dynamic::field_definition& file_name();
+
+        /**
+         * @brief If true, the overridden file name is in system
+         * includes.
+         */
+        static const dynamic::field_definition& is_system();
     };
 
     /**
diff --git a/projects/cpp/src/types/formatters/hash/field_definitions.cpp b/projects/cpp/src/types/formatters/hash/field_definitions.cpp
index 7ef6ff0..969725c 100644
--- a/projects/cpp/src/types/formatters/hash/field_definitions.cpp
+++ b/projects/cpp/src/types/formatters/hash/field_definitions.cpp
@@ -108,6 +108,18 @@ dogen::dynamic::field_definition create_class_header_formatter_file_name() {
     return r;
 }
 
+dogen::dynamic::field_definition create_class_header_formatter_is_system() {
+    dogen::dynamic::field_definition r;
+    r.name().simple("is_system");
+    r.name().qualified("cpp.hash.class_header_formatter.is_system");
+    r.ownership_hierarchy().model(model_name);
+    r.ownership_hierarchy().facet(facet_name);
+    r.ownership_hierarchy().formatter(class_header_formatter_name);
+    r.type(dogen::dynamic::value_types::text);
+    r.scope(dogen::dynamic::scope_types::root_module);
+    return r;
+}
+
 dogen::dynamic::field_definition
 create_class_implementation_formatter_enabled() {
     dogen::dynamic::field_definition r;
@@ -203,6 +215,7 @@ create_all_field_definitions() {
     r.push_front(chf::enabled());
     r.push_front(chf::postfix());
     r.push_front(chf::file_name());
+    r.push_front(chf::is_system());
 
     using cif = fd::class_implementation_formatter;
     r.push_front(cif::postfix());
@@ -265,6 +278,12 @@ field_definitions::class_header_formatter::file_name() {
 }
 
 const dynamic::field_definition&
+field_definitions::class_header_formatter::is_system() {
+    static auto r(create_class_header_formatter_is_system());
+    return r;
+}
+
+const dynamic::field_definition&
 field_definitions::class_implementation_formatter::enabled() {
     static auto r(create_class_implementation_formatter_enabled());
     return r;
diff --git a/projects/cpp/src/types/formatters/io/field_definitions.cpp b/projects/cpp/src/types/formatters/io/field_definitions.cpp
index a3a1402..2ffd66e 100644
--- a/projects/cpp/src/types/formatters/io/field_definitions.cpp
+++ b/projects/cpp/src/types/formatters/io/field_definitions.cpp
@@ -108,6 +108,18 @@ dogen::dynamic::field_definition create_class_header_formatter_file_name() {
     return r;
 }
 
+dogen::dynamic::field_definition create_class_header_formatter_is_system() {
+    dogen::dynamic::field_definition r;
+    r.name().simple("is_system");
+    r.name().qualified("cpp.io.class_header_formatter.is_system");
+    r.ownership_hierarchy().model(model_name);
+    r.ownership_hierarchy().facet(facet_name);
+    r.ownership_hierarchy().formatter(class_header_formatter_name);
+    r.type(dogen::dynamic::value_types::text);
+    r.scope(dogen::dynamic::scope_types::root_module);
+    return r;
+}
+
 dogen::dynamic::field_definition
 create_class_implementation_formatter_enabled() {
     dogen::dynamic::field_definition r;
@@ -205,6 +217,7 @@ create_all_field_definitions() {
     r.push_front(chf::enabled());
     r.push_front(chf::postfix());
     r.push_front(chf::file_name());
+    r.push_front(chf::is_system());
 
     using cif = fd::class_implementation_formatter;
     r.push_front(cif::postfix());
@@ -268,6 +281,12 @@ field_definitions::class_header_formatter::file_name() {
 }
 
 const dynamic::field_definition&
+field_definitions::class_header_formatter::is_system() {
+    static auto r(create_class_header_formatter_is_system());
+    return r;
+}
+
+const dynamic::field_definition&
 field_definitions::class_implementation_formatter::enabled() {
     static auto r(create_class_implementation_formatter_enabled());
     return r;
diff --git a/projects/cpp/src/types/formatters/serialization/field_definitions.cpp b/projects/cpp/src/types/formatters/serialization/field_definitions.cpp
index e414fad..8bad0ac 100644
--- a/projects/cpp/src/types/formatters/serialization/field_definitions.cpp
+++ b/projects/cpp/src/types/formatters/serialization/field_definitions.cpp
@@ -108,6 +108,18 @@ dogen::dynamic::field_definition create_class_header_formatter_file_name() {
     return r;
 }
 
+dogen::dynamic::field_definition create_class_header_formatter_is_system() {
+    dogen::dynamic::field_definition r;
+    r.name().simple("is_system");
+    r.name().qualified("cpp.serialization.class_header_formatter.is_system");
+    r.ownership_hierarchy().model(model_name);
+    r.ownership_hierarchy().facet(facet_name);
+    r.ownership_hierarchy().formatter(class_header_formatter_name);
+    r.type(dogen::dynamic::value_types::text);
+    r.scope(dogen::dynamic::scope_types::root_module);
+    return r;
+}
+
 dogen::dynamic::field_definition
 create_class_implementation_formatter_enabled() {
     dogen::dynamic::field_definition r;
@@ -205,6 +217,7 @@ create_all_field_definitions() {
     r.push_front(chf::enabled());
     r.push_front(chf::postfix());
     r.push_front(chf::file_name());
+    r.push_front(chf::is_system());
 
     using cif = fd::class_implementation_formatter;
     r.push_front(cif::postfix());
@@ -268,6 +281,12 @@ field_definitions::class_header_formatter::file_name() {
 }
 
 const dynamic::field_definition&
+field_definitions::class_header_formatter::is_system() {
+    static auto r(create_class_header_formatter_is_system());
+    return r;
+}
+
+const dynamic::field_definition&
 field_definitions::class_implementation_formatter::enabled() {
     static auto r(create_class_implementation_formatter_enabled());
     return r;
diff --git a/projects/cpp/src/types/formatters/test_data/field_definitions.cpp b/projects/cpp/src/types/formatters/test_data/field_definitions.cpp
index 31416cd..fe184c6 100644
--- a/projects/cpp/src/types/formatters/test_data/field_definitions.cpp
+++ b/projects/cpp/src/types/formatters/test_data/field_definitions.cpp
@@ -108,6 +108,18 @@ dogen::dynamic::field_definition create_class_header_formatter_file_name() {
     return r;
 }
 
+dogen::dynamic::field_definition create_class_header_formatter_is_system() {
+    dogen::dynamic::field_definition r;
+    r.name().simple("is_system");
+    r.name().qualified("cpp.test_data.class_header_formatter.is_system");
+    r.ownership_hierarchy().model(model_name);
+    r.ownership_hierarchy().facet(facet_name);
+    r.ownership_hierarchy().formatter(class_header_formatter_name);
+    r.type(dogen::dynamic::value_types::text);
+    r.scope(dogen::dynamic::scope_types::root_module);
+    return r;
+}
+
 dogen::dynamic::field_definition
 create_class_implementation_formatter_enabled() {
     dogen::dynamic::field_definition r;
@@ -205,6 +217,7 @@ create_all_field_definitions() {
     r.push_front(chf::enabled());
     r.push_front(chf::postfix());
     r.push_front(chf::file_name());
+    r.push_front(chf::is_system());
 
     using cif = fd::class_implementation_formatter;
     r.push_front(cif::postfix());
@@ -268,6 +281,12 @@ field_definitions::class_header_formatter::file_name() {
 }
 
 const dynamic::field_definition&
+field_definitions::class_header_formatter::is_system() {
+    static auto r(create_class_header_formatter_is_system());
+    return r;
+}
+
+const dynamic::field_definition&
 field_definitions::class_implementation_formatter::enabled() {
     static auto r(create_class_implementation_formatter_enabled());
     return r;
diff --git a/projects/cpp/src/types/formatters/types/field_definitions.cpp b/projects/cpp/src/types/formatters/types/field_definitions.cpp
index ecbaca5..cee0e59 100644
--- a/projects/cpp/src/types/formatters/types/field_definitions.cpp
+++ b/projects/cpp/src/types/formatters/types/field_definitions.cpp
@@ -111,6 +111,18 @@ dogen::dynamic::field_definition create_class_header_formatter_file_name() {
     return r;
 }
 
+dogen::dynamic::field_definition create_class_header_formatter_is_system() {
+    dogen::dynamic::field_definition r;
+    r.name().simple("is_system");
+    r.name().qualified("cpp.types.class_header_formatter.is_system");
+    r.ownership_hierarchy().model(model_name);
+    r.ownership_hierarchy().facet(facet_name);
+    r.ownership_hierarchy().formatter(class_header_formatter_name);
+    r.type(dogen::dynamic::value_types::text);
+    r.scope(dogen::dynamic::scope_types::root_module);
+    return r;
+}
+
 dogen::dynamic::field_definition
 create_class_implementation_formatter_enabled() {
     dogen::dynamic::field_definition r;
@@ -262,6 +274,7 @@ create_all_field_definitions() {
     r.push_front(chf::enabled());
     r.push_front(chf::postfix());
     r.push_front(chf::file_name());
+    r.push_front(chf::is_system());
 
     using cif = fd::class_implementation_formatter;
     r.push_front(cif::postfix());
@@ -333,6 +346,12 @@ field_definitions::class_header_formatter::file_name() {
 }
 
 const dynamic::field_definition&
+field_definitions::class_header_formatter::is_system() {
+    static auto r(create_class_header_formatter_is_system());
+    return r;
+}
+
+const dynamic::field_definition&
 field_definitions::class_implementation_formatter::enabled() {
     static auto r(create_class_implementation_formatter_enabled());
     return r;
