diff --git a/doc/agile/release_notes_sprint_28.org b/doc/agile/release_notes_sprint_28.org
index 086bef5..10681f2 100644
--- a/doc/agile/release_notes_sprint_28.org
+++ b/doc/agile/release_notes_sprint_28.org
@@ -84,7 +84,7 @@ of them in Creris, the compiler complained. We need to add a generic
 test that performs a =std::move= in sanitiser and fix the fallout of
 the test.
 
-*** Transformer tests should check that docs are not empty            :spike:
+*** IMPLEMENTATION Transformer tests should check that docs are not empty :spike:
 
 Dia to SML transformer tests don't appear to check that we are
 correctly transforming the documentation. Change factory to create
diff --git a/projects/dia_to_sml/spec/transformer_spec.cpp b/projects/dia_to_sml/spec/transformer_spec.cpp
index 3ef0629..08f290f 100644
--- a/projects/dia_to_sml/spec/transformer_spec.cpp
+++ b/projects/dia_to_sml/spec/transformer_spec.cpp
@@ -88,6 +88,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_no_stereotype_transforms_into_expected_pod)
     BOOST_CHECK(!p.name().type_name().empty());
     BOOST_CHECK(p.properties().empty());
     BOOST_CHECK(p.pod_type() == dogen::sml::pod_types::value);
+    BOOST_CHECK(!p.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(empty_named_uml_class_throws) {
@@ -118,6 +119,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_enumeration_stereotype_transforms_into_expec
     const auto e(c.model().enumerations().begin()->second);
     BOOST_CHECK(e.name().model_name() == model_name);
     BOOST_CHECK(!e.name().type_name().empty());
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_transforms_into_expected_exception) {
@@ -137,6 +139,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_transforms_into_expecte
     const auto e(c.model().exceptions().begin()->second);
     BOOST_CHECK(e.name().model_name() == model_name);
     BOOST_CHECK(!e.name().type_name().empty());
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 // BOOST_IGNORE_AUTO_TEST_CASE(uml_class_with_service_stereotype_transforms_into_expected_service) {
@@ -157,6 +160,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_transforms_into_expecte
 //     BOOST_CHECK(s.name().model_name() == model_name);
 //     BOOST_CHECK(!s.name().type_name().empty());
 //     BOOST_CHECK(s.service_type() == dogen::sml::service_types::user_defined);
+//     BOOST_CHECK(!s.documentation().empty());
 // }
 
 BOOST_AUTO_TEST_CASE(uml_large_package_transforms_into_expected_module) {
@@ -175,6 +179,7 @@ BOOST_AUTO_TEST_CASE(uml_large_package_transforms_into_expected_module) {
     const auto p(c.model().modules().begin()->second);
     BOOST_CHECK(p.name().model_name() == model_name);
     BOOST_CHECK(!p.name().type_name().empty());
+    BOOST_CHECK(!p.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_in_package_transforms_into_expected_pod) {
@@ -204,6 +209,7 @@ BOOST_AUTO_TEST_CASE(uml_class_in_package_transforms_into_expected_pod) {
     BOOST_CHECK(p.pod_type() == dogen::sml::pod_types::value);
     BOOST_REQUIRE(p.name().module_path().size() == 1);
     BOOST_CHECK(p.name().module_path().front() == pkg.name().type_name());
+    BOOST_CHECK(!p.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_with_enumeration_stereotype_in_package_transforms_into_expected_enumeration) {
@@ -232,6 +238,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_enumeration_stereotype_in_package_transforms
     BOOST_CHECK(!e.name().type_name().empty());
     BOOST_REQUIRE(e.name().module_path().size() == 1);
     BOOST_CHECK(e.name().module_path().front() == pkg.name().type_name());
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_package_transforms_into_expected_exception) {
@@ -260,6 +267,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_package_transforms_i
     BOOST_CHECK(!e.name().type_name().empty());
     BOOST_REQUIRE(e.name().module_path().size() == 1);
     BOOST_CHECK(e.name().module_path().front() == pkg.name().type_name());
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 // BOOST_IGNORE_AUTO_TEST_CASE(uml_class_with_service_stereotype_in_package_transforms_into_expected_service) {
@@ -288,6 +296,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_package_transforms_i
 //     BOOST_CHECK(!e.name().type_name().empty());
 //     BOOST_REQUIRE(e.name().module_path().size() == 1);
 //     BOOST_CHECK(e.name().module_path().front() == pkg.name().type_name());
+//     BOOST_CHECK(!e.documentation().empty());
 // }
 
 BOOST_AUTO_TEST_CASE(uml_class_in_non_existing_package_throws) {
@@ -375,6 +384,7 @@ BOOST_AUTO_TEST_CASE(uml_class_in_two_packages_transforms_into_expected_pod) {
     BOOST_REQUIRE(p.name().module_path().size() == 2);
     BOOST_CHECK(p.name().module_path().front() == first);
     BOOST_CHECK(p.name().module_path().back() == second);
+    BOOST_CHECK(!p.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_with_enumeration_stereotype_in_two_packages_transforms_into_expected_enumeration) {
@@ -429,6 +439,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_enumeration_stereotype_in_two_packages_trans
     BOOST_REQUIRE(e.name().module_path().size() == 2);
     BOOST_CHECK(e.name().module_path().front() == first);
     BOOST_CHECK(e.name().module_path().back() == second);
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_two_packages_transforms_into_expected_exception) {
@@ -483,6 +494,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_two_packages_transfo
     BOOST_REQUIRE(e.name().module_path().size() == 2);
     BOOST_CHECK(e.name().module_path().front() == first);
     BOOST_CHECK(e.name().module_path().back() == second);
+    BOOST_CHECK(!e.documentation().empty());
 }
 
 // BOOST_IGNORE_AUTO_TEST_CASE(uml_class_with_service_stereotype_in_two_packages_transforms_into_expected_service) {
@@ -537,6 +549,7 @@ BOOST_AUTO_TEST_CASE(uml_class_with_exception_stereotype_in_two_packages_transfo
 //     BOOST_REQUIRE(e.name().module_path().size() == 2);
 //     BOOST_CHECK(e.name().module_path().front() == first);
 //     BOOST_CHECK(e.name().module_path().back() == second);
+//     BOOST_CHECK(!e.documentation().empty());
 // }
 
 BOOST_AUTO_TEST_CASE(uml_note_with_marker_transforms_into_model_comments) {
@@ -725,9 +738,11 @@ BOOST_AUTO_TEST_CASE(uml_class_with_inheritance_results_in_expected_pod) {
 //         if (is_type_one(p.first)) {
 //             BOOST_CHECK(!p.second.parent_name());
 //             BOOST_CHECK(!p.second.original_parent_name());
+//             BOOST_CHECK(!p.documentation().empty());
 //         } else if (is_type_two(p.first)) {
 //             BOOST_REQUIRE(p.second.parent_name());
 //             BOOST_REQUIRE(is_type_one(*p.second.parent_name()));
+//             BOOST_CHECK(!p.documentation().empty());
 //         } else {
 //             BOOST_LOG_SEV(lg, error) << "Unexpected type name: " << p.first;
 //             BOOST_FAIL("Unexpected type name");
