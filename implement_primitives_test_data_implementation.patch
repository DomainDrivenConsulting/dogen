diff --git a/doc/agile/sprint_backlog_97.org b/doc/agile/sprint_backlog_97.org
index fe8a06ca1..af11776bd 100644
--- a/doc/agile/sprint_backlog_97.org
+++ b/doc/agile/sprint_backlog_97.org
@@ -13,20 +13,20 @@
 ** Active
 
 #+begin: clocktable :maxlevel 3 :scope subtree :indent nil :emphasize nil :scope file :narrow 75 :formula %
-#+CAPTION: Clock summary at [2017-01-31 Tue 16:49]
+#+CAPTION: Clock summary at [2017-01-31 Tue 17:46]
 | <75>                                                                        |         |       |      |       |
 | Headline                                                                    | Time    |       |      |     % |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| *Total time*                                                                | *18:33* |       |      | 100.0 |
+| *Total time*                                                                | *19:09* |       |      | 100.0 |
 |-----------------------------------------------------------------------------+---------+-------+------+-------|
-| Stories                                                                     | 18:33   |       |      | 100.0 |
-| Active                                                                      |         | 18:33 |      | 100.0 |
+| Stories                                                                     | 19:09   |       |      | 100.0 |
+| Active                                                                      |         | 19:09 |      | 100.0 |
 | STARTED Sprint and product backlog grooming                                 |         |       | 0:01 |   0.1 |
-| COMPLETED Edit release notes for previous sprint                            |         |       | 0:43 |   3.9 |
-| COMPLETED Add support for configurable enumerations types                   |         |       | 4:10 |  22.5 |
-| COMPLETED Allow disabling =invalid= value in enumerations                   |         |       | 0:12 |   1.1 |
-| COMPLETED Add support for configurable enumeration values                   |         |       | 5:26 |  29.3 |
-| STARTED Add support for primitives across the pipeline                      |         |       | 8:01 |  43.2 |
+| COMPLETED Edit release notes for previous sprint                            |         |       | 0:43 |   3.7 |
+| COMPLETED Add support for configurable enumerations types                   |         |       | 4:10 |  21.8 |
+| COMPLETED Allow disabling =invalid= value in enumerations                   |         |       | 0:12 |   1.0 |
+| COMPLETED Add support for configurable enumeration values                   |         |       | 5:26 |  28.4 |
+| STARTED Add support for primitives across the pipeline                      |         |       | 8:37 |  45.0 |
 #+TBLFM: $5='(org-clock-time% @3$2 $2..$4);%.1f
 #+end:
 
@@ -156,6 +156,7 @@ We could:
 - add meta-data to disable setting the enumerator value altogether.
 
 *** STARTED Add support for primitives across the pipeline            :story:
+    CLOCK: [2017-01-31 Tue 17:10]--[2017-01-31 Tue 17:46] =>  0:36
     CLOCK: [2017-01-31 Tue 16:43]--[2017-01-31 Tue 16:49] =>  0:06
     CLOCK: [2017-01-31 Tue 16:37]--[2017-01-31 Tue 16:42] =>  0:05
     CLOCK: [2017-01-31 Tue 16:28]--[2017-01-31 Tue 16:36] =>  0:08
diff --git a/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.cpp b/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.cpp
index e3c5d5842..5f81215f9 100644
--- a/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.cpp
+++ b/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.cpp
@@ -106,6 +106,11 @@ a.stream() << std::endl;
 a.stream() << "public:" << std::endl;
             if (!p.is_immutable())
 a.stream() << "    static void populate(const unsigned int position, result_type& v);" << std::endl;
+a.stream() << "    static result_type create(const unsigned int position);" << std::endl;
+a.stream() << "    result_type operator()();" << std::endl;
+a.stream() << std::endl;
+a.stream() << "private:" << std::endl;
+a.stream() << "    unsigned int position_;" << std::endl;
 a.stream() << std::endl;
 a.stream() << "public:" << std::endl;
 a.stream() << "    static result_type* create_ptr(const unsigned int position);" << std::endl;
diff --git a/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.stitch b/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.stitch
index 6fedda339..9d1356325 100644
--- a/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/test_data/primitive_header_formatter.stitch
@@ -55,6 +55,11 @@ public:
             if (!p.is_immutable())
 #>
     static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
 
 public:
     static result_type* create_ptr(const unsigned int position);
diff --git a/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.cpp b/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.cpp
index 3a8623c2a..3d14901cb 100644
--- a/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.cpp
+++ b/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.cpp
@@ -87,9 +87,9 @@ std::list<std::string> primitive_implementation_formatter::inclusion_dependencie
     const formattables::inclusion_dependencies_builder_factory& f,
     const yarn::element& e) const {
 
-    const auto& o(assistant::as<yarn::primitive>(static_artefact(), e));
+    const auto& p(assistant::as<yarn::primitive>(static_artefact(), e));
     auto builder(f.make());
-    builder.add(o.name(), traits::primitive_header_archetype());
+    builder.add(p.name(), traits::primitive_header_archetype());
 
     // const auto si(builder.make_special_includes(o));
     // if (si.has_path || si.has_std_string)
@@ -109,9 +109,69 @@ format(const context& ctx, const yarn::element& e) const {
     {
 
         auto sbf(a.make_scoped_boilerplate_formatter());
+a.stream() << "namespace {" << std::endl;
+        a.add_helper_methods(p.name().id());
+a.stream() << std::endl;
+a.stream() << "}" << std::endl;
+a.stream() << std::endl;
         {
+            const auto attr(p.value_attribute());
             const auto ns(a.make_namespaces(p.name()));
             auto snf(a.make_scoped_namespace_formatter(ns));
+
+            /*
+             * Default constructor.
+             */
+a.stream() << std::endl;
+a.stream() << sn << "_generator::" << sn << "_generator() : position_(0) { }" << std::endl;
+            /*
+             * Populate method.
+             */
+            if (!p.is_immutable()) {
+a.stream() << std::endl;
+a.stream() << "void " << sn << "_generator::" << std::endl;
+a.stream() << "populate(const unsigned int position, result_type& v) {" << std::endl;
+a.stream() << "    v." << attr.name().simple() << "(create_" << attr.parsed_type().identifiable() << "(position + 1));" << std::endl;
+a.stream() << "}" << std::endl;
+            }
+
+            /*
+             * Create method.
+             */
+a.stream() << std::endl;
+a.stream() << sn << "_generator::result_type" << std::endl;
+a.stream() << sn << "_generator::create(const unsigned int position) {" << std::endl;
+            if (p.is_immutable()) {
+a.stream() << "    return " << sn << "(create_" << attr.parsed_type().identifiable() << "(position + 1));" << std::endl;
+            } else {
+a.stream() << "    " << sn << " r;" << std::endl;
+a.stream() << "    " << sn << "_generator::populate(position, r);" << std::endl;
+a.stream() << "    return r;" << std::endl;
+            }
+a.stream() << "}" << std::endl;
+            /*
+             * Create method ptr.
+             */
+a.stream() << std::endl;
+a.stream() << sn << "_generator::result_type*" << std::endl;
+a.stream() << sn << "_generator::create_ptr(const unsigned int position) {" << std::endl;
+            if (p.is_immutable())
+a.stream() << "    return new " << sn << "(create(position));" << std::endl;
+            else {
+a.stream() << "    " << sn << "* r = new " << sn << "();" << std::endl;
+a.stream() << "    " << sn << "_generator::populate(position, *r);" << std::endl;
+a.stream() << "    return r;" << std::endl;
+            }
+a.stream() << "}" << std::endl;
+            /*
+             * Function operator
+             */
+a.stream() << std::endl;
+a.stream() << sn << "_generator::result_type" << std::endl;
+a.stream() << sn << "_generator::operator()() {" << std::endl;
+a.stream() << "    return create(position_++);" << std::endl;
+a.stream() << "}" << std::endl;
+a.stream() << std::endl;
         } // snf
     } // sbf
     return a.make_artefact();
diff --git a/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.stitch b/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.stitch
index f79451110..941d9d246 100644
--- a/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.stitch
+++ b/projects/quilt.cpp/src/types/formatters/test_data/primitive_implementation_formatter.stitch
@@ -25,9 +25,9 @@ std::list<std::string> primitive_implementation_formatter::inclusion_dependencie
     const formattables::inclusion_dependencies_builder_factory& f,
     const yarn::element& e) const {
 
-    const auto& o(assistant::as<yarn::primitive>(static_artefact(), e));
+    const auto& p(assistant::as<yarn::primitive>(static_artefact(), e));
     auto builder(f.make());
-    builder.add(o.name(), traits::primitive_header_archetype());
+    builder.add(p.name(), traits::primitive_header_archetype());
 
     // const auto si(builder.make_special_includes(o));
     // if (si.has_path || si.has_std_string)
@@ -47,9 +47,95 @@ format(const context& ctx, const yarn::element& e) const {
     {
 
         auto sbf(a.make_scoped_boilerplate_formatter());
+#>
+namespace {
+<#+
+        a.add_helper_methods(p.name().id());
+#>
+
+}
+
+<#+
         {
+            const auto attr(p.value_attribute());
             const auto ns(a.make_namespaces(p.name()));
             auto snf(a.make_scoped_namespace_formatter(ns));
+
+            /*
+             * Default constructor.
+             */
+#>
+
+<#= sn #>_generator::<#= sn #>_generator() : position_(0) { }
+<#+
+            /*
+             * Populate method.
+             */
+            if (!p.is_immutable()) {
+#>
+
+void <#= sn #>_generator::
+populate(const unsigned int position, result_type& v) {
+    v.<#= attr.name().simple() #>(create_<#= attr.parsed_type().identifiable() #>(position + 1));
+}
+<#+
+            }
+
+            /*
+             * Create method.
+             */
+#>
+
+<#= sn #>_generator::result_type
+<#= sn #>_generator::create(const unsigned int position) {
+<#+
+            if (p.is_immutable()) {
+#>
+    return <#= sn #>(create_<#= attr.parsed_type().identifiable() #>(position + 1));
+<#+
+            } else {
+#>
+    <#= sn #> r;
+    <#= sn #>_generator::populate(position, r);
+    return r;
+<#+
+            }
+#>
+}
+<#+
+            /*
+             * Create method ptr.
+             */
+#>
+
+<#= sn #>_generator::result_type*
+<#= sn #>_generator::create_ptr(const unsigned int position) {
+<#+
+            if (p.is_immutable())
+#>
+    return new <#= sn #>(create(position));
+<#+
+            else {
+#>
+    <#= sn #>* r = new <#= sn #>();
+    <#= sn #>_generator::populate(position, *r);
+    return r;
+<#+
+            }
+#>
+}
+<#+
+            /*
+             * Function operator
+             */
+#>
+
+<#= sn #>_generator::result_type
+<#= sn #>_generator::operator()() {
+    return create(position_++);
+}
+
+<#+
         } // snf
     } // sbf
     return a.make_artefact();
diff --git a/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/immutable_primitive_td.hpp b/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/immutable_primitive_td.hpp
index b6e7dc852..92adb19da 100644
--- a/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/immutable_primitive_td.hpp
+++ b/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/immutable_primitive_td.hpp
@@ -40,6 +40,11 @@ public:
 
 public:
     static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
 
 public:
     static result_type* create_ptr(const unsigned int position);
diff --git a/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/product_id_td.hpp b/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/product_id_td.hpp
index 8c763463e..f92eb0ae5 100644
--- a/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/product_id_td.hpp
+++ b/projects/test_models/primitive/include/dogen/test_models/primitive/test_data/product_id_td.hpp
@@ -40,6 +40,11 @@ public:
 
 public:
     static void populate(const unsigned int position, result_type& v);
+    static result_type create(const unsigned int position);
+    result_type operator()();
+
+private:
+    unsigned int position_;
 
 public:
     static result_type* create_ptr(const unsigned int position);
diff --git a/projects/test_models/primitive/src/test_data/immutable_primitive_td.cpp b/projects/test_models/primitive/src/test_data/immutable_primitive_td.cpp
index f56cc1f21..454db7ce7 100644
--- a/projects/test_models/primitive/src/test_data/immutable_primitive_td.cpp
+++ b/projects/test_models/primitive/src/test_data/immutable_primitive_td.cpp
@@ -20,7 +20,38 @@
  */
 #include "dogen/test_models/primitive/test_data/immutable_primitive_td.hpp"
 
+namespace {
+
+}
+
 namespace dogen {
 namespace test_models {
 namespace primitive {
+
+immutable_primitive_generator::immutable_primitive_generator() : position_(0) { }
+
+void immutable_primitive_generator::
+populate(const unsigned int position, result_type& v) {
+    v.value(create_short(position + 1));
+}
+
+immutable_primitive_generator::result_type
+immutable_primitive_generator::create(const unsigned int position) {
+    immutable_primitive r;
+    immutable_primitive_generator::populate(position, r);
+    return r;
+}
+
+immutable_primitive_generator::result_type*
+immutable_primitive_generator::create_ptr(const unsigned int position) {
+    immutable_primitive* r = new immutable_primitive();
+    immutable_primitive_generator::populate(position, *r);
+    return r;
+}
+
+immutable_primitive_generator::result_type
+immutable_primitive_generator::operator()() {
+    return create(position_++);
+}
+
 } } }
diff --git a/projects/test_models/primitive/src/test_data/product_id_td.cpp b/projects/test_models/primitive/src/test_data/product_id_td.cpp
index f442cf058..17f0f96c3 100644
--- a/projects/test_models/primitive/src/test_data/product_id_td.cpp
+++ b/projects/test_models/primitive/src/test_data/product_id_td.cpp
@@ -20,7 +20,38 @@
  */
 #include "dogen/test_models/primitive/test_data/product_id_td.hpp"
 
+namespace {
+
+}
+
 namespace dogen {
 namespace test_models {
 namespace primitive {
+
+product_id_generator::product_id_generator() : position_(0) { }
+
+void product_id_generator::
+populate(const unsigned int position, result_type& v) {
+    v.value(create_short(position + 1));
+}
+
+product_id_generator::result_type
+product_id_generator::create(const unsigned int position) {
+    product_id r;
+    product_id_generator::populate(position, r);
+    return r;
+}
+
+product_id_generator::result_type*
+product_id_generator::create_ptr(const unsigned int position) {
+    product_id* r = new product_id();
+    product_id_generator::populate(position, *r);
+    return r;
+}
+
+product_id_generator::result_type
+product_id_generator::operator()() {
+    return create(position_++);
+}
+
 } } }
